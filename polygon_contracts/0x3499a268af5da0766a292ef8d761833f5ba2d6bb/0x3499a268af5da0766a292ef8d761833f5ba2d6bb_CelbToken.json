{"SourceCode": "{\"Celb.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.0;\\r\\n\\r\\nimport \\\"./ERC20Lockable.sol\\\";\\r\\nimport \\\"./ERC20Burnable.sol\\\";\\r\\nimport \\\"./Pausable.sol\\\";\\r\\n\\r\\ncontract CelbToken is\\r\\n    ERC20Lockable,\\r\\n    ERC20Burnable\\r\\n{\\r\\n    string constant private _name = \\\"Celb Token\\\";\\r\\n    string constant private _symbol = \\\"CELB\\\";\\r\\n    uint8 constant private _decimals = 18;\\r\\n    uint256 constant private _initial_supply = 5_000_000_000;\\r\\n\\r\\n    constructor() Ownable() {\\r\\n        _mint(msg.sender, _initial_supply * (10**uint256(_decimals)));\\r\\n    }\\r\\n\\r\\n    function transfer(address to, uint256 amount)\\r\\n        override\\r\\n        external\\r\\n        whenNotPaused\\r\\n        checkLock(msg.sender, amount)\\r\\n        returns (bool success)\\r\\n    {\\r\\n        require(\\r\\n            to != address(0),\\r\\n            \\\"transfer : Should not send to zero address\\\"\\r\\n        );\\r\\n        _transfer(msg.sender, to, amount);\\r\\n        success = true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(address from, address to, uint256 amount)\\r\\n        override\\r\\n        external\\r\\n        whenNotPaused\\r\\n        checkLock(from, amount)\\r\\n        returns (bool success)\\r\\n    {\\r\\n        require(\\r\\n            to != address(0),\\r\\n            \\\"transferFrom : Should not send to zero address\\\"\\r\\n        );\\r\\n        _transfer(from, to, amount);\\r\\n        _approve(\\r\\n            from,\\r\\n            msg.sender,\\r\\n            _allowances[from][msg.sender] - amount\\r\\n        );\\r\\n        success = true;\\r\\n    }\\r\\n\\r\\n    function approve(address spender, uint256 amount)\\r\\n        override\\r\\n        external\\r\\n        returns (bool success)\\r\\n    {\\r\\n        require(\\r\\n            spender != address(0),\\r\\n            \\\"approve : Should not approve zero address\\\"\\r\\n        );\\r\\n        _approve(msg.sender, spender, amount);\\r\\n        success = true;\\r\\n    }\\r\\n\\r\\n    function name() override external pure returns (string memory tokenName) {\\r\\n        tokenName = _name;\\r\\n    }\\r\\n\\r\\n    function symbol() override external pure returns (string memory tokenSymbol) {\\r\\n        tokenSymbol = _symbol;\\r\\n    }\\r\\n\\r\\n    function decimals() override external pure returns (uint8 tokenDecimals) {\\r\\n        tokenDecimals = _decimals;\\r\\n    }\\r\\n}\"},\"ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.0;\\r\\n\\r\\nabstract contract ERC20 {\\r\\n\\r\\n    uint256 private _totalSupply;\\r\\n    mapping(address =\\u003e uint256) internal _balances;\\r\\n    mapping(address =\\u003e mapping(address =\\u003e uint256)) internal _allowances;\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 amount\\r\\n    );\\r\\n\\r\\n    /*\\r\\n   * Internal Functions for ERC20 standard logics\\r\\n   */\\r\\n\\r\\n    function _transfer(address from, address to, uint256 amount)\\r\\n        internal\\r\\n        returns (bool success)\\r\\n    {\\r\\n        _balances[from] = _balances[from] - amount;\\r\\n        _balances[to] = _balances[to] + amount;\\r\\n        emit Transfer(from, to, amount);\\r\\n        success = true;\\r\\n    }\\r\\n\\r\\n    function _approve(address owner, address spender, uint256 amount)\\r\\n        internal\\r\\n        returns (bool success)\\r\\n    {\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n        success = true;\\r\\n    }\\r\\n\\r\\n    function _mint(address recipient, uint256 amount)\\r\\n        internal\\r\\n        returns (bool success)\\r\\n    {\\r\\n        _totalSupply = _totalSupply + amount;\\r\\n        _balances[recipient] = _balances[recipient] + amount;\\r\\n        emit Transfer(address(0), recipient, amount);\\r\\n        success = true;\\r\\n    }\\r\\n\\r\\n    function _burn(address burned, uint256 amount)\\r\\n        internal\\r\\n        returns (bool success)\\r\\n    {\\r\\n        _balances[burned] = _balances[burned] - amount;\\r\\n        _totalSupply = _totalSupply - amount;\\r\\n        emit Transfer(burned, address(0), amount);\\r\\n        success = true;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n   * public view functions to view common data\\r\\n   */\\r\\n\\r\\n    function totalSupply() external view returns (uint256 total) {\\r\\n        total = _totalSupply;\\r\\n    }\\r\\n    function balanceOf(address owner) external view returns (uint256 balance) {\\r\\n        balance = _balances[owner];\\r\\n    }\\r\\n\\r\\n    function allowance(address owner, address spender)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 remaining)\\r\\n    {\\r\\n        remaining = _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    /*\\r\\n   * External view Function Interface to implement on final contract\\r\\n   */\\r\\n    function name() virtual external view returns (string memory tokenName);\\r\\n    function symbol() virtual external view returns (string memory tokenSymbol);\\r\\n    function decimals() virtual external view returns (uint8 tokenDecimals);\\r\\n\\r\\n    /*\\r\\n   * External Function Interface to implement on final contract\\r\\n   */\\r\\n    function transfer(address to, uint256 amount)\\r\\n        virtual\\r\\n        external\\r\\n        returns (bool success);\\r\\n    function transferFrom(address from, address to, uint256 amount)\\r\\n        virtual\\r\\n        external\\r\\n        returns (bool success);\\r\\n    function approve(address spender, uint256 amount)\\r\\n        virtual\\r\\n        external\\r\\n        returns (bool success);\\r\\n}\"},\"ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.0;\\r\\n\\r\\nimport \\\"./ERC20.sol\\\";\\r\\nimport \\\"../Pausable.sol\\\";\\r\\n\\r\\nabstract contract ERC20Burnable is ERC20, Pausable {\\r\\n    event Burn(address indexed burned, uint256 amount);\\r\\n\\r\\n    function burn(uint256 amount)\\r\\n        external\\r\\n        whenNotPaused\\r\\n        returns (bool success)\\r\\n    {\\r\\n        success = _burn(msg.sender, amount);\\r\\n        emit Burn(msg.sender, amount);\\r\\n        success = true;\\r\\n    }\\r\\n\\r\\n    function burnFrom(address burned, uint256 amount)\\r\\n        external\\r\\n        whenNotPaused\\r\\n        returns (bool success)\\r\\n    {\\r\\n        _burn(burned, amount);\\r\\n        emit Burn(burned, amount);\\r\\n        success = _approve(\\r\\n            burned,\\r\\n            msg.sender,\\r\\n            _allowances[burned][msg.sender] - amount\\r\\n        );\\r\\n    }\\r\\n}\"},\"ERC20Lockable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.0;\\r\\n\\r\\nimport \\\"./ERC20.sol\\\";\\r\\nimport \\\"../Ownable.sol\\\";\\r\\n\\r\\nabstract contract ERC20Lockable is ERC20, Ownable {\\r\\n    struct LockInfo {\\r\\n        uint256 amount;\\r\\n        uint256 due;\\r\\n    }\\r\\n\\r\\n    mapping(address =\\u003e LockInfo[]) internal _locks;\\r\\n    mapping(address =\\u003e uint256) internal _totalLocked;\\r\\n\\r\\n    event Lock(address indexed from, uint256 amount, uint256 due);\\r\\n    event Unlock(address indexed from, uint256 amount);\\r\\n\\r\\n    modifier checkLock(address from, uint256 amount) {\\r\\n        require(_balances[from] \\u003e= _totalLocked[from] + amount, \\\"ERC20Lockable/Cannot send more than unlocked amount\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function _lock(address from, uint256 amount, uint256 due)\\r\\n    internal\\r\\n    returns (bool success)\\r\\n    {\\r\\n        require(due \\u003e block.timestamp, \\\"ERC20Lockable/lock : Cannot set due to past\\\");\\r\\n        require(\\r\\n            _balances[from] \\u003e= amount + _totalLocked[from],\\r\\n            \\\"ERC20Lockable/lock : locked total should be smaller than balance\\\"\\r\\n        );\\r\\n        _totalLocked[from] = _totalLocked[from] + amount;\\r\\n        _locks[from].push(LockInfo(amount, due));\\r\\n        emit Lock(from, amount, due);\\r\\n        success = true;\\r\\n    }\\r\\n\\r\\n    function _unlock(address from, uint256 index) internal returns (bool success) {\\r\\n        LockInfo storage lock = _locks[from][index];\\r\\n        _totalLocked[from] = _totalLocked[from] - lock.amount;\\r\\n        emit Unlock(from, lock.amount);\\r\\n        _locks[from][index] = _locks[from][_locks[from].length - 1];\\r\\n        _locks[from].pop();\\r\\n        success = true;\\r\\n    }\\r\\n\\r\\n    function unlock(address from, uint256 idx) external returns(bool success){\\r\\n        require(_locks[from][idx].due \\u003c block.timestamp,\\\"ERC20Lockable/unlock: cannot unlock before due\\\");\\r\\n        return _unlock(from, idx);\\r\\n    }\\r\\n\\r\\n    function unlockAll(address from) external returns (bool success) {\\r\\n        for(uint256 i = 0; i \\u003c _locks[from].length;){\\r\\n            i++;\\r\\n            if(_locks[from][i - 1].due \\u003c block.timestamp){\\r\\n                if(_unlock(from, i - 1)){\\r\\n                    i--;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        success = true;\\r\\n    }\\r\\n\\r\\n    function releaseLock(address from)\\r\\n    external\\r\\n    onlyOwner\\r\\n    returns (bool success)\\r\\n    {\\r\\n        for(uint256 i = 0; i \\u003c _locks[from].length;){\\r\\n            i++;\\r\\n            if(_unlock(from, i - 1)){\\r\\n                i--;\\r\\n            }\\r\\n        }\\r\\n        success = true;\\r\\n    }\\r\\n\\r\\n    function transferWithLockUp(address recipient, uint256 amount, uint256 due)\\r\\n    external\\r\\n    onlyOwner\\r\\n    returns (bool success)\\r\\n    {\\r\\n        require(\\r\\n            recipient != address(0),\\r\\n            \\\"ERC20Lockable/transferWithLockUp : Cannot send to zero address\\\"\\r\\n        );\\r\\n        _transfer(msg.sender, recipient, amount);\\r\\n        _lock(recipient, amount, due);\\r\\n        success = true;\\r\\n    }\\r\\n\\r\\n    function lockInfo(address locked, uint256 index)\\r\\n    external\\r\\n    view\\r\\n    returns (uint256 amount, uint256 due)\\r\\n    {\\r\\n        LockInfo memory lock = _locks[locked][index];\\r\\n        amount = lock.amount;\\r\\n        due = lock.due;\\r\\n    }\\r\\n\\r\\n    function totalLocked(address locked) external view returns(uint256 amount, uint256 length){\\r\\n        amount = _totalLocked[locked];\\r\\n        length = _locks[locked].length;\\r\\n    }\\r\\n}\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.0;\\r\\n\\r\\nabstract contract Ownable {\\r\\n    address internal _owner;\\r\\n\\r\\n    event OwnershipTransferred(\\r\\n        address indexed currentOwner,\\r\\n        address indexed newOwner\\r\\n    );\\r\\n\\r\\n    constructor() {\\r\\n        _owner = msg.sender;\\r\\n        emit OwnershipTransferred(address(0), msg.sender);\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(\\r\\n            msg.sender == _owner,\\r\\n            \\\"Ownable : Function called by unauthorized user.\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function owner() external view returns (address ownerAddress) {\\r\\n        ownerAddress = _owner;\\r\\n    }\\r\\n\\r\\n    function transferOwnership(address newOwner)\\r\\n        public\\r\\n        onlyOwner\\r\\n        returns (bool success)\\r\\n    {\\r\\n        require(newOwner != address(0), \\\"Ownable/transferOwnership : cannot transfer ownership to zero address\\\");\\r\\n        success = _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    function renounceOwnership() external onlyOwner returns (bool success) {\\r\\n        success = _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    function _transferOwnership(address newOwner) internal returns (bool success) {\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n        success = true;\\r\\n    }\\r\\n}\"},\"Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.0;\\r\\n\\r\\nimport \\\"./Ownable.sol\\\";\\r\\n\\r\\ncontract Pausable is Ownable {\\r\\n    bool internal _paused;\\r\\n\\r\\n    event Paused();\\r\\n    event Unpaused();\\r\\n\\r\\n    modifier whenPaused() {\\r\\n        require(_paused, \\\"Paused : This function can only be called when paused\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier whenNotPaused() {\\r\\n        require(!_paused, \\\"Paused : This function can only be called when not paused\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function pause() external onlyOwner whenNotPaused returns (bool success) {\\r\\n        _paused = true;\\r\\n        emit Paused();\\r\\n        success = true;\\r\\n    }\\r\\n\\r\\n    function unPause() external onlyOwner whenPaused returns (bool success) {\\r\\n        _paused = false;\\r\\n        emit Unpaused();\\r\\n        success = true;\\r\\n    }\\r\\n\\r\\n    function paused() external view returns (bool) {\\r\\n        return _paused;\\r\\n    }\\r\\n}\"}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"burned\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"due\",\"type\":\"uint256\"}],\"name\":\"Lock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"currentOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"burned\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"tokenDecimals\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"locked\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"lockInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"due\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"releaseLock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"locked\",\"type\":\"address\"}],\"name\":\"totalLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"due\",\"type\":\"uint256\"}],\"name\":\"transferWithLockUp\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unPause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"unlock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"unlockAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CelbToken", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://13f88c29a411df4229ff3f5d7bf8ded4071b40b5b7acb68cbe7f1969bc600467"}