{"SourceCode": "// File: contracts\\interfaces\\TokenInterfaceV5.sol\r\n// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.7;\r\n\r\ninterface TokenInterfaceV5{\r\n    function burn(address, uint256) external;\r\n    function mint(address, uint256) external;\r\n    function transfer(address, uint256) external returns (bool);\r\n    function transferFrom(address, address, uint256) external returns(bool);\r\n    function balanceOf(address) external view returns(uint256);\r\n    function hasRole(bytes32, address) external view returns (bool);\r\n    function approve(address, uint256) external returns (bool);\r\n    function allowance(address, address) external view returns (uint256);\r\n}\r\n\r\n// File: contracts\\interfaces\\LpInterfaceV5.sol\r\n\r\npragma solidity 0.8.7;\r\n\r\ninterface LpInterfaceV5{\r\n   \tfunction getReserves() external view returns (uint112, uint112, uint32);\r\n    function token0() external view returns (address);\r\n    function transfer(address, uint) external returns (bool);\r\n    function transferFrom(address, address, uint256) external;\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address) external view returns (uint);\r\n    function approve(address, uint256) external returns (bool);\r\n}\r\n\r\n// File: contracts\\interfaces\\NftInterfaceV5.sol\r\n\r\npragma solidity 0.8.7;\r\n\r\ninterface NftInterfaceV5{\r\n    function balanceOf(address) external view returns (uint);\r\n    function ownerOf(uint) external view returns (address);\r\n    function transferFrom(address, address, uint) external;\r\n    function tokenOfOwnerByIndex(address, uint) external view returns(uint);\r\n}\r\n\r\n// File: contracts\\interfaces\\QuickStakingContractInterfaceV5.sol\r\n\r\npragma solidity 0.8.7;\r\n\r\ninterface QuickStakingContractInterfaceV5{\r\n\tfunction earned(address) external view returns (uint256);\r\n\tfunction getReward() external;\r\n\tfunction stake(uint) external;\r\n\tfunction withdraw(uint) external;\r\n\tfunction balanceOf(address) external view returns (uint256);\r\n}\r\n\r\n// File: contracts\\GNSPoolV5.sol\r\n\r\n\r\n\r\n\r\n\r\npragma solidity 0.8.7;\r\n\r\ncontract GNSPoolV5{\r\n\r\n    // Constants\r\n    bytes32 public constant MINTER_ROLE = 0x9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6;\r\n    TokenInterfaceV5 public constant quick = TokenInterfaceV5(0xf28164A485B0B2C90639E47b0f377b4a438a16B1);\r\n\r\n    // Contracts & Addresses\r\n    TokenInterfaceV5 public token; // GNS\r\n    LpInterfaceV5 public lp; // GNS/DAI\r\n    QuickStakingContractInterfaceV5 public quickStakingContract;\r\n    address public govFund = 0xC66FbE50Dd33c9AAdd65707F7088D597C86fE00F;\r\n\r\n    // Pool variables\r\n    uint public accTokensPerLp;\r\n    uint public accQuickPerLp; // Dual rewards\r\n    uint public lpBalance;\r\n\r\n    // Pool parameters\r\n    uint public maxNftsStaked = 3;\r\n    uint public referralP = 6; // % 2 == 0\r\n    uint[5] public boostsP = [2, 3, 5, 8, 13];\r\n\r\n    // Pool stats\r\n    uint public rewardsToken; // 1e18\r\n    uint public rewardsQuick; // 1e18\r\n\r\n    // Mappings\r\n    mapping(address => User) public users;\r\n    mapping(address => mapping(uint => StakedNft)) public userNfts;\r\n    mapping(address => bool) public allowedContracts;\r\n\r\n    // Structs\r\n    struct StakedNft{\r\n        uint nftId;\r\n        uint nftType;\r\n    }\r\n    struct User{\r\n        uint provided;\r\n        uint debtToken;\r\n        uint debtQuick;\r\n        uint stakedNftsCount;\r\n        uint totalBoost;\r\n        address referral;\r\n        uint referralRewardsToken;\r\n    }\r\n\r\n    // Events\r\n    event AddressUpdated(string name, address a);\r\n    event ContractAllowed(address a, bool allowed);\r\n    event BoostsUpdated(uint[5]);\r\n    event NumberUpdated(string name, uint value);\r\n\r\n    constructor(address _tradingStorage){\r\n        require(_tradingStorage != address(0), \"ADDRESS_0\");\r\n        allowedContracts[_tradingStorage] = true;\r\n    }\r\n\r\n    // GOV => UPDATE VARIABLES & MANAGE PAIRS\r\n\r\n    // 0. Modifiers\r\n    modifier onlyGov(){\r\n        require(msg.sender == govFund, \"GOV_ONLY\");\r\n        _;\r\n    }\r\n\r\n    // Set addresses\r\n    function setGovFund(address _gov) external onlyGov{\r\n        require(_gov != address(0), \"ADDRESS_0\");\r\n        govFund = _gov;\r\n        emit AddressUpdated(\"govFund\", _gov);\r\n    }\r\n    function setToken(TokenInterfaceV5 _token) external onlyGov{\r\n        require(address(_token) != address(0), \"ADDRESS_0\");\r\n        require(address(token) == address(0), \"ALREADY_SET\");\r\n        token = _token;\r\n        emit AddressUpdated(\"token\", address(_token));\r\n    }\r\n    function setLp(LpInterfaceV5 _lp) external onlyGov{\r\n        require(address(_lp) != address(0), \"ADDRESS_0\");\r\n        require(address(lp) == address(0), \"ALREADY_SET\");\r\n        lp = _lp;\r\n        emit AddressUpdated(\"lp\", address(_lp));\r\n    }\r\n    function setQuickStakingContract(QuickStakingContractInterfaceV5 _quickStaking) external onlyGov{\r\n        require(address(_quickStaking) != address(0), \"ADDRESS_0\");\r\n        require(address(quickStakingContract) == address(0), \"ALREADY_SET\");\r\n        quickStakingContract = _quickStaking;\r\n        emit AddressUpdated(\"quickStakingContract\", address(_quickStaking));\r\n    }\r\n    function addAllowedContract(address c) external onlyGov{\r\n        require(c != address(0), \"ADDRESS_0\");\r\n        require(token.hasRole(MINTER_ROLE, c), \"NOT_MINTER\");\r\n        allowedContracts[c] = true;\r\n        emit ContractAllowed(c, true);\r\n    }\r\n    function removeAllowedContract(address c) external onlyGov{\r\n        require(c != address(0), \"ADDRESS_0\");\r\n        allowedContracts[c] = false;\r\n        emit ContractAllowed(c, false);\r\n    }\r\n    function setBoostsP(uint _bronze, uint _silver, uint _gold, uint _platinum, uint _diamond) external onlyGov{\r\n        require(_bronze < _silver && _silver < _gold && _gold < _platinum && _platinum < _diamond && _bronze > 0, \"WRONG_VALUES\");\r\n        boostsP = [_bronze, _silver, _gold, _platinum, _diamond];\r\n        emit BoostsUpdated(boostsP);\r\n    }\r\n    function setMaxNftsStaked(uint _maxNftsStaked) external onlyGov{\r\n        require(_maxNftsStaked >= 3, \"BELOW_3\");\r\n        maxNftsStaked = _maxNftsStaked;\r\n        emit NumberUpdated(\"maxNftsStaked\", _maxNftsStaked);\r\n    }\r\n    function setReferralP(uint _referralP) external onlyGov{\r\n        require(_referralP % 2 == 0, \"NOT_EVEN\");\r\n        referralP = _referralP;\r\n        emit NumberUpdated(\"referralP\", _referralP);\r\n    }\r\n\r\n    // USEFUL FUNCTIONS\r\n\r\n    // Remove access to contracts\r\n    modifier notContract(){\r\n        require(tx.origin == msg.sender, \"CONTRACT\");\r\n        _;\r\n    }\r\n\r\n    // Get reserves LP\r\n    function reservesLp() public view returns(uint, uint){\r\n        (uint112 reserves0, uint112 reserves1, ) = lp.getReserves();\r\n        return lp.token0() == address(token) ? (reserves0, reserves1) : (reserves1, reserves0);\r\n    }\r\n\r\n    // Called by Gains.farm ecosystem allowed contracts (trading, casino, etc.)\r\n    function increaseAccTokensPerLp(uint _amount) external{\r\n        require(allowedContracts[msg.sender] && token.hasRole(MINTER_ROLE, msg.sender), \"ONLY_ALLOWED_CONTRACTS\");\r\n        if(lpBalance > 0){\r\n            accTokensPerLp += _amount * 1e18 / lpBalance;\r\n            rewardsToken += _amount;\r\n        }\r\n    }\r\n\r\n    // Compute NFT boosts\r\n    function setBoosts() private{\r\n        User storage u = users[msg.sender];\r\n        u.totalBoost = 0;\r\n        for(uint i = 0; i < u.stakedNftsCount; i++){\r\n            u.totalBoost += u.provided * boostsP[userNfts[msg.sender][i].nftType-1] / 100;\r\n        }\r\n        u.debtToken = (u.provided + u.totalBoost) * accTokensPerLp / 1e18;\r\n        u.debtQuick = (u.provided + u.totalBoost) * accQuickPerLp / 1e18;\r\n    }\r\n\r\n    // Rewards to be harvested\r\n    function pendingRewardToken() view public returns(uint){\r\n        User storage u = users[msg.sender];\r\n        return (u.provided + u.totalBoost) * accTokensPerLp / 1e18 - u.debtToken;\r\n    }\r\n    function pendingRewardQuick() view public returns(uint){\r\n        if(lpBalance == 0){ return 0; }\r\n        User storage u = users[msg.sender];\r\n        uint pendingAccQuickPerLp = accQuickPerLp + quickStakingContract.earned(address(this)) * 1e18 / lpBalance;\r\n        return (u.provided + u.totalBoost) * pendingAccQuickPerLp / 1e18 - u.debtQuick;\r\n    }\r\n\r\n    // EXTERNAL FUNCTIONS\r\n\r\n    // Harvest rewards\r\n    function harvest() public{\r\n        if(lpBalance == 0){ return; }\r\n        \r\n        User storage u = users[msg.sender];\r\n\r\n        uint pendingTokens = pendingRewardToken();\r\n\r\n        if(pendingTokens > 0){\r\n            if(u.referral == address(0)){\r\n                token.mint(msg.sender, pendingTokens - pendingTokens * referralP / 100);\r\n            }else{\r\n                uint referralReward = pendingTokens * referralP / 200;\r\n\r\n                token.mint(msg.sender, pendingTokens - referralReward);\r\n                token.mint(u.referral, referralReward);\r\n\r\n                users[u.referral].referralRewardsToken += referralReward;\r\n            }\r\n        }\r\n\r\n        u.debtToken = (u.provided + u.totalBoost) * accTokensPerLp / 1e18;\r\n\r\n        uint pendingQuick = pendingRewardQuick();\r\n        uint pendingQuickTotal = quickStakingContract.earned(address(this));\r\n\r\n        quickStakingContract.getReward();\r\n        accQuickPerLp += pendingQuickTotal * 1e18 / lpBalance;\r\n\r\n        u.debtQuick = (u.provided + u.totalBoost) * accQuickPerLp / 1e18;\r\n        rewardsQuick += pendingQuickTotal;\r\n\r\n        if(pendingQuick > 0){ quick.transfer(msg.sender, pendingQuick); }\r\n    }\r\n\r\n    // Stake LPs\r\n    function stake(uint amount, address referral) external{\r\n        User storage u = users[msg.sender];\r\n        \r\n        // 1. Transfer the LPs to the contract\r\n        lp.transferFrom(msg.sender, address(this), amount);\r\n\r\n        // 2. Harvest pending rewards\r\n        harvest();\r\n\r\n        // 3. Stake in quickswap contract\r\n        require(lp.approve(address(quickStakingContract), amount), \"APPROVE_FAILED\");\r\n        quickStakingContract.stake(amount);\r\n\r\n        // 4. Reset lp balance\r\n        lpBalance -= (u.provided + u.totalBoost);\r\n\r\n        // 5. Set user provided\r\n        u.provided += amount;\r\n\r\n        // 6. Set boosts and debt\r\n        setBoosts();\r\n\r\n        // 7. Update lp balance\r\n        lpBalance += (u.provided + u.totalBoost);\r\n\r\n        // 8. Set referral\r\n        if(u.referral == address(0) && referral != address(0) && referral != msg.sender){\r\n            u.referral = referral;\r\n        }\r\n    }\r\n\r\n    // Stake NFT\r\n    // NFT types: 1, 2, 3, 4, 5\r\n    function stakeNft(uint nftType, uint nftId) external notContract{\r\n        User storage u = users[msg.sender];\r\n\r\n        // 0. If didn't already stake NFT + nft type is either platinum or diamond\r\n        require(u.stakedNftsCount < maxNftsStaked, \"MAX_NFTS_ALREADY_STAKED\");\r\n        require(nftType >= 1 && nftType <= 5, \"WRONG_NFT_TYPE\");\r\n\r\n        // 1. Transfer the NFT to the contract\r\n        require(nfts()[nftType-1].balanceOf(msg.sender) >= 1, \"NOT_NFT_OWNER\");\r\n        nfts()[nftType-1].transferFrom(msg.sender, address(this), nftId);\r\n\r\n        // 2. Harvest pending rewards\r\n        harvest();\r\n\r\n        // 3. Reset lp balance\r\n        lpBalance -= (u.provided + u.totalBoost);\r\n\r\n        // 4. Store NFT info\r\n        StakedNft storage stakedNft = userNfts[msg.sender][u.stakedNftsCount];\r\n        stakedNft.nftType = nftType;\r\n        stakedNft.nftId = nftId;\r\n        u.stakedNftsCount ++;\r\n\r\n        // 5. Set user boosts & debt\r\n        setBoosts();\r\n\r\n        // 6. Update lp balance\r\n        lpBalance += (u.provided + u.totalBoost);\r\n    }\r\n\r\n    // Unstake NFT\r\n    function unstakeNft(uint nftIndex) external{\r\n        User storage u = users[msg.sender];\r\n        StakedNft memory stakedNft = userNfts[msg.sender][nftIndex];\r\n\r\n        // 1. Harvest pending rewards\r\n        harvest();\r\n\r\n        // 2. Reset lp balance\r\n        lpBalance -= (u.provided + u.totalBoost);\r\n\r\n        // 3. Remove NFT from storage => replace by last one and remove last one\r\n        userNfts[msg.sender][nftIndex] = userNfts[msg.sender][u.stakedNftsCount-1];\r\n        delete userNfts[msg.sender][u.stakedNftsCount-1];\r\n        u.stakedNftsCount -= 1;\r\n\r\n        // 4. Set user boosts & debt\r\n        setBoosts();\r\n\r\n        // 5. Update lp balance\r\n        lpBalance += (u.provided + u.totalBoost);\r\n\r\n        // 6. Transfer the NFT to the user\r\n        nfts()[stakedNft.nftType-1].transferFrom(address(this), msg.sender, stakedNft.nftId);\r\n    }\r\n\r\n    // Unstake LPs\r\n    function unstake(uint amount) external{\r\n        // 1. Verify he doesn't unstake more than provided\r\n        User storage u = users[msg.sender];\r\n        require(amount <= u.provided, \"AMOUNT_TOO_BIG\");\r\n\r\n        // 2. Harvest pending rewards\r\n        harvest();\r\n\r\n        // 3. Unstake from quickswap contract\r\n        quickStakingContract.withdraw(amount);\r\n\r\n        // 4. Reset lp balance\r\n        lpBalance -= (u.provided + u.totalBoost);\r\n\r\n        // 5. Set user provided\r\n        u.provided -= amount;\r\n\r\n        // 6. Set boosts and debt\r\n        setBoosts();\r\n\r\n        // 7. Update lp balance\r\n        lpBalance += (u.provided + u.totalBoost);\r\n\r\n        // 8. Transfer the LPs to the address\r\n        lp.transfer(msg.sender, amount);\r\n    }\r\n\r\n    // READ-ONLY VIEW FUNCTIONS\r\n\r\n    // 1e5 precision\r\n    function tvl() external view returns(uint){\r\n        if(lp.totalSupply() == 0){ return 0; }\r\n\r\n        (, uint reserveDai) = reservesLp();\r\n        uint lpPriceDai = reserveDai * 1e5 * 2 / lp.totalSupply();\r\n\r\n        return quickStakingContract.balanceOf(address(this)) * lpPriceDai / 1e18;\r\n    }\r\n    // 1e5 precision\r\n    function tvlWithBoosts() external view returns(uint){\r\n        if(lp.totalSupply() == 0){ return 0; }\r\n\r\n        (, uint reserveDai) = reservesLp();\r\n        uint lpPriceDai = reserveDai * 1e5 * 2 / lp.totalSupply();\r\n\r\n        return lpBalance * lpPriceDai / 1e18;\r\n    }\r\n\r\n    // NFTs list\r\n    function nfts() public pure returns(NftInterfaceV5[5] memory){\r\n        return [\r\n            NftInterfaceV5(0xF9A4c522E327935BD1F5a338c121E14e4cc1f898),\r\n            NftInterfaceV5(0x77cd42B925e1A82f41d852D6BE727CFc88fddBbC),\r\n            NftInterfaceV5(0x3378AD81D09DE23725Ee9B9270635c97Ed601921),\r\n            NftInterfaceV5(0x02e2c5825C1a3b69C0417706DbE1327C2Af3e6C2),\r\n            NftInterfaceV5(0x2D266A94469d05C9e06D52A4D0d9C23b157767c2)\r\n        ];\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tradingStorage\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"AddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[5]\",\"name\":\"\",\"type\":\"uint256[5]\"}],\"name\":\"BoostsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"ContractAllowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"NumberUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accQuickPerLp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accTokensPerLp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"c\",\"type\":\"address\"}],\"name\":\"addAllowedContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedContracts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"boostsP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"govFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"increaseAccTokensPerLp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lp\",\"outputs\":[{\"internalType\":\"contract LpInterfaceV5\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxNftsStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nfts\",\"outputs\":[{\"internalType\":\"contract NftInterfaceV5[5]\",\"name\":\"\",\"type\":\"address[5]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingRewardQuick\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingRewardToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quick\",\"outputs\":[{\"internalType\":\"contract TokenInterfaceV5\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quickStakingContract\",\"outputs\":[{\"internalType\":\"contract QuickStakingContractInterfaceV5\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referralP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"c\",\"type\":\"address\"}],\"name\":\"removeAllowedContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reservesLp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsQuick\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bronze\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_silver\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_platinum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_diamond\",\"type\":\"uint256\"}],\"name\":\"setBoostsP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gov\",\"type\":\"address\"}],\"name\":\"setGovFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract LpInterfaceV5\",\"name\":\"_lp\",\"type\":\"address\"}],\"name\":\"setLp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxNftsStaked\",\"type\":\"uint256\"}],\"name\":\"setMaxNftsStaked\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract QuickStakingContractInterfaceV5\",\"name\":\"_quickStaking\",\"type\":\"address\"}],\"name\":\"setQuickStakingContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_referralP\",\"type\":\"uint256\"}],\"name\":\"setReferralP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract TokenInterfaceV5\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nftType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"}],\"name\":\"stakeNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract TokenInterfaceV5\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tvl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tvlWithBoosts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nftIndex\",\"type\":\"uint256\"}],\"name\":\"unstakeNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userNfts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nftType\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"provided\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtQuick\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakedNftsCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBoost\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referralRewardsToken\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "GNSPoolV5", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "999", "ConstructorArguments": "000000000000000000000000aee4d11a16b2bc65edd6416fb626eb404a6d65bd", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://62453395a0e9924bca49929a1e1e5cbb441a1cd6a58d3d09def34be79618002f"}