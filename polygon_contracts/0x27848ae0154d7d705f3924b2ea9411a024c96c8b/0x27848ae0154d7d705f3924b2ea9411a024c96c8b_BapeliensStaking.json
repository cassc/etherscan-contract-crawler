{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@wraith-works/contracts/common/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n/// @dev Common library of errors.\\nlibrary Errors {\\n    /// @dev Zero address found/given.\\n    error ZeroAddress();\\n    /// @dev Unexpected length.\\n    error InvalidLength(uint256 length);\\n    /// @dev Invalid index provided.\\n    error InvalidIndex(uint256 index);\\n    /// @dev Unauthorized access.\\n    error Unauthorized(address accessor);\\n}\\n\"\r\n    },\r\n    \"@wraith-works/contracts/tokens/ERC20/IBaseERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IBaseERC20 is IERC20 {\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    function setAuthorizedMinter(address _minter, bool _authorized) external;\\n\\n    function authorizedMint(address _account, uint256 _amount) external;\\n}\\n\"\r\n    },\r\n    \"@wraith-works/contracts/tokens/ERC721/IStakingPoolsERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\n\\ninterface IStakingPoolsERC721 is IERC721Receiver {\\n    error InvalidLockPeriod();\\n    error StakingPoolInactive(uint256 index);\\n    error StakingPoolInvalid(uint256 index);\\n    error NotOwner();\\n\\n    event StakingTokenSet(address indexed stakingToken);\\n    event RewardTokenSet(address indexed rewardToken);\\n    event StakingRewardCalculatorSet(address indexed stakingRewardCalculator);\\n    event StakingPoolAdded(uint256 index);\\n    event StakingPoolActivated(uint256 index);\\n    event StakingPoolDeactivated(uint256 index);\\n    event StakingPoolInvalidated(uint256 index);\\n    event Staked(address indexed owner, uint256 indexed tokenId);\\n    event Unstaked(address indexed owner, uint256 indexed tokenId);\\n    event RewardClaimed(address indexed owner, uint256 amount);\\n\\n    struct StakingPool {\\n        bool active;\\n        bool invalidated;\\n        bool rewardWhileLocked;\\n        uint256 lockPeriod;\\n        uint256 reward;\\n        uint256 stakedCount;\\n    }\\n\\n    struct StakedTokenInfo {\\n        uint256 tokenId;\\n        uint256 poolIndex;\\n        uint256 expiresAt;\\n        uint256 rewardClaimed;\\n    }\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    function setStakingToken(address _stakingToken) external;\\n\\n    function setRewardToken(address _rewardToken) external;\\n\\n    function setStakingRewardCalculator(address _stakingRewardCalculator) external;\\n\\n    function addStakingPool(bool _rewardWhileLocked, uint256 _lockPeriod, uint256 _reward) external returns (uint256);\\n\\n    function activateStakingPool(uint256 _index) external;\\n\\n    function deactivateStakingPool(uint256 _index) external;\\n\\n    function invalidateStakingPool(uint256 _index) external;\\n\\n    function stake(uint256 _poolIndex, uint256[] calldata _tokenIds) external;\\n\\n    function unstake() external;\\n\\n    function claimRewards() external;\\n\\n    function rewardsAvailable(address _owner) external view returns (uint256);\\n\\n    function stakingPoolCount() external view returns (uint256);\\n\\n    function totalStakedForOwner(address _owner) external view returns (uint256);\\n\\n    function rewardsRatePerTimeUnit(address _owner, uint256 _timeUnit) external view returns (uint256);\\n\\n    function unlockableTokenIds(address _owner) external view returns (uint256, uint256[] memory);\\n\\n    function isLockedInPool(address _owner, uint256 _poolIndex) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@wraith-works/contracts/tokens/ERC721/IStakingRewardCalculator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n/// @dev Interface for a staking reward calculator.\\ninterface IStakingRewardCalculator {\\n    /**\\n     * @dev Calculate the staking reward based on the base reward and a potential multiplier.\\n     * @param _owner The owner of the token.\\n     * @param _tokenId The ID of the token.\\n     * @param _reward The base reward.\\n     * @return Returns the new reward.\\n     */\\n    function calculateStakingReward(address _owner, uint256 _tokenId, uint256 _reward) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@wraith-works/contracts/tokens/ERC721/StakingPoolsERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nimport \\\"./IStakingPoolsERC721.sol\\\";\\nimport \\\"./IStakingRewardCalculator.sol\\\";\\nimport \\\"../ERC20/IBaseERC20.sol\\\";\\nimport \\\"../../common/Errors.sol\\\";\\n\\n/// @dev Staking pools for ERC721 tokens, earning a ERC20 reward token.\\ncontract StakingPoolsERC721 is IStakingPoolsERC721, Ownable, Pausable, ReentrancyGuard {\\n    /// @dev The address of the ERC721 token that can be staked in the contract.\\n    IERC721 public stakingToken;\\n    /// @dev The address of the ERC20 token to be rewarded for staking.\\n    IBaseERC20 public rewardToken;\\n    /// @dev The address of the IStakingRewardCalculator to calculate any extra rewards.\\n    IStakingRewardCalculator public stakingRewardCalculator;\\n    /// @dev The list of staking pools.\\n    StakingPool[] public stakingPools;\\n    /// @dev List of token staking info by owner address.\\n    mapping(address => StakedTokenInfo[]) public stakedTokens;\\n\\n    /**\\n     * @param _stakingToken The address of the ERC721 token that can be staked in the contract.\\n     * @param _rewardToken The address of the ERC20 token to be rewarded for staking.\\n     */\\n    constructor(address _stakingToken, address _rewardToken) {\\n        if (_stakingToken == address(0) || _rewardToken == address(0)) revert Errors.ZeroAddress();\\n        stakingToken = IERC721(_stakingToken);\\n        rewardToken = IBaseERC20(_rewardToken);\\n\\n        _pause();\\n    }\\n\\n    /// @dev Pause the contract, and disable staking.\\n    function pause() external override onlyOwner {\\n        _pause();\\n    }\\n\\n    /// @dev Unpause the contract, and allow staking.\\n    function unpause() external override onlyOwner {\\n        _unpause();\\n    }\\n\\n    /**\\n     * @dev Set the address of the ERC721 token that can be staked in the contract.\\n     * @param _stakingToken Address of the ERC721 token.\\n     */\\n    function setStakingToken(address _stakingToken) external override onlyOwner {\\n        if (_stakingToken == address(0)) revert Errors.ZeroAddress();\\n        stakingToken = IERC721(_stakingToken);\\n        emit StakingTokenSet(_stakingToken);\\n    }\\n\\n    /**\\n     * @dev Set the address of the ERC20 token to be rewarded for staking.\\n     * @param _rewardToken Address of the ERC20 token.\\n     */\\n    function setRewardToken(address _rewardToken) external override onlyOwner {\\n        if (_rewardToken == address(0)) revert Errors.ZeroAddress();\\n        rewardToken = IBaseERC20(_rewardToken);\\n        emit RewardTokenSet(_rewardToken);\\n    }\\n\\n    /**\\n     * @dev Set the address of the IStakingRewardCalculator contract.\\n     * @param _stakingRewardCalculator Address of the contract.\\n     */\\n    function setStakingRewardCalculator(address _stakingRewardCalculator) external override onlyOwner {\\n        stakingRewardCalculator = IStakingRewardCalculator(_stakingRewardCalculator);\\n        emit StakingRewardCalculatorSet(_stakingRewardCalculator);\\n    }\\n\\n    /**\\n     * @dev Add a staking pool. The pool starts disabled.\\n     * @param _rewardWhileLocked Reward tokens can be claimed during the lock period.\\n     * @param _lockPeriod The lock period in seconds that the token will be locked.\\n     * @param _reward The amount of the ERC20 token to give at the end of the lock period.\\n     * @return Returns the index of the staking pool.\\n     */\\n    function addStakingPool(\\n        bool _rewardWhileLocked,\\n        uint256 _lockPeriod,\\n        uint256 _reward\\n    ) external override onlyOwner returns (uint256) {\\n        return _addStakingPool(_rewardWhileLocked, _lockPeriod, _reward);\\n    }\\n\\n    /**\\n     * @dev Activate the given staking pool. Cannot activate an invalidated pool.\\n     * @param _index The index of the staking pool.\\n     */\\n    function activateStakingPool(uint256 _index) external override onlyOwner {\\n        _activateStakingPool(_index);\\n    }\\n\\n    /**\\n     * @dev Deactivate the given staking pool. No new tokens can be staked in the pool,\\n     * but existing tokens in the pool will continue to earn until unlocked.\\n     * @param _index The index of the staking pool.\\n     */\\n    function deactivateStakingPool(uint256 _index) external override onlyOwner {\\n        if (_index >= stakingPools.length) revert Errors.InvalidIndex(_index);\\n        stakingPools[_index].active = false;\\n        emit StakingPoolDeactivated(_index);\\n    }\\n\\n    /**\\n     * @dev Invalidate the staking pool. No new tokens can be staked in the pool,\\n     * and all existing tokens will be immediately unlocked. Unclaimed tokens will be lost.\\n     * @param _index The index of the staking pool.\\n     */\\n    function invalidateStakingPool(uint256 _index) external override onlyOwner {\\n        if (_index >= stakingPools.length) revert Errors.InvalidIndex(_index);\\n        stakingPools[_index].active = false;\\n        stakingPools[_index].invalidated = true;\\n        emit StakingPoolInvalidated(_index);\\n    }\\n\\n    /**\\n     * @dev Stake the token Ids in the given staking pool.\\n     * @param _poolIndex The index of the staking pool.\\n     * @param _tokenIds The list of tokenIds to stake in the pool.\\n     */\\n    function stake(uint256 _poolIndex, uint256[] calldata _tokenIds) external override whenNotPaused {\\n        if (_poolIndex >= stakingPools.length) revert Errors.InvalidIndex(_poolIndex);\\n        if (!stakingPools[_poolIndex].active) revert StakingPoolInactive(_poolIndex);\\n\\n        uint256 length = _tokenIds.length;\\n        for (uint256 i = 0; i < length; ) {\\n            if (stakingToken.ownerOf(_tokenIds[i]) != msg.sender) revert NotOwner();\\n\\n            stakingToken.safeTransferFrom(msg.sender, address(this), _tokenIds[i]);\\n            stakedTokens[msg.sender].push(\\n                StakedTokenInfo({\\n                    tokenId: _tokenIds[i],\\n                    poolIndex: _poolIndex,\\n                    expiresAt: block.timestamp + stakingPools[_poolIndex].lockPeriod,\\n                    rewardClaimed: 0\\n                })\\n            );\\n\\n            emit Staked(msg.sender, _tokenIds[i]);\\n\\n            unchecked {\\n                i++;\\n            }\\n        }\\n\\n        stakingPools[_poolIndex].stakedCount += _tokenIds.length;\\n    }\\n\\n    /// @dev Unstake all unlocked tokens for the caller, and pay out any unclaimed rewards.\\n    function unstake() external override whenNotPaused nonReentrant {\\n        uint256 reward = 0;\\n        uint256 length = stakedTokens[msg.sender].length;\\n        for (uint256 i = length; i > 0; ) {\\n            StakedTokenInfo storage stakedTokenInfo = stakedTokens[msg.sender][i - 1];\\n\\n            if (stakingPools[stakedTokenInfo.poolIndex].invalidated) {\\n                _removeStakedToken(msg.sender, i - 1);\\n            } else if (block.timestamp >= stakedTokenInfo.expiresAt) {\\n                reward += _calculateReward(msg.sender, i - 1, true);\\n                _removeStakedToken(msg.sender, i - 1);\\n            }\\n\\n            unchecked {\\n                i--;\\n            }\\n        }\\n        if (reward > 0) {\\n            rewardToken.authorizedMint(msg.sender, reward);\\n            emit RewardClaimed(msg.sender, reward);\\n        }\\n    }\\n\\n    /// @dev Claim any unclaimed rewards for the caller.\\n    function claimRewards() external override whenNotPaused nonReentrant {\\n        uint256 reward = 0;\\n\\n        uint256 length = stakedTokens[msg.sender].length;\\n        for (uint256 i = 0; i < length; ) {\\n            uint256 _reward = _calculateReward(msg.sender, i, false);\\n            if (_reward > 0) {\\n                stakedTokens[msg.sender][i].rewardClaimed += _reward;\\n                reward += _reward;\\n            }\\n            unchecked {\\n                i++;\\n            }\\n        }\\n\\n        if (reward > 0) {\\n            rewardToken.authorizedMint(msg.sender, reward);\\n            emit RewardClaimed(msg.sender, reward);\\n        }\\n    }\\n\\n    /**\\n     * @dev Add a staking pool. The pool starts disabled.\\n     * @param _rewardWhileLocked Reward tokens can be claimed during the lock period.\\n     * @param _lockPeriod The lock period in seconds that the token will be locked.\\n     * @param _reward The amount of the ERC20 token to give at the end of the lock period.\\n     * @return Returns the index of the staking pool.\\n     */\\n    function _addStakingPool(bool _rewardWhileLocked, uint256 _lockPeriod, uint256 _reward) internal returns (uint256) {\\n        if (_lockPeriod == 0) revert InvalidLockPeriod();\\n        stakingPools.push(\\n            StakingPool({\\n                active: false,\\n                invalidated: false,\\n                rewardWhileLocked: _rewardWhileLocked,\\n                lockPeriod: _lockPeriod,\\n                reward: _reward,\\n                stakedCount: 0\\n            })\\n        );\\n        emit StakingPoolAdded(stakingPools.length - 1);\\n        return stakingPools.length - 1;\\n    }\\n\\n    /**\\n     * @dev Activate the given staking pool. Cannot activate an invalidated pool.\\n     * @param _index The index of the staking pool.\\n     */\\n    function _activateStakingPool(uint256 _index) internal {\\n        if (_index >= stakingPools.length) revert Errors.InvalidIndex(_index);\\n        if (stakingPools[_index].invalidated) revert StakingPoolInvalid(_index);\\n        stakingPools[_index].active = true;\\n        emit StakingPoolActivated(_index);\\n    }\\n\\n    function _removeStakedToken(address _owner, uint256 _index) private {\\n        uint256 length = stakedTokens[_owner].length;\\n        if (_index >= length) revert Errors.InvalidIndex(_index);\\n\\n        stakingToken.safeTransferFrom(address(this), msg.sender, stakedTokens[_owner][_index].tokenId);\\n        stakingPools[stakedTokens[_owner][_index].poolIndex].stakedCount -= 1;\\n        emit Unstaked(_owner, stakedTokens[_owner][_index].tokenId);\\n\\n        stakedTokens[_owner][_index] = stakedTokens[_owner][length - 1];\\n        stakedTokens[_owner].pop();\\n    }\\n\\n    function _calculateExtraReward(address _owner, uint256 _tokenId, uint256 _reward) private view returns (uint256) {\\n        uint256 reward = _reward;\\n        if (address(stakingRewardCalculator) != address(0)) {\\n            reward = stakingRewardCalculator.calculateStakingReward(_owner, _tokenId, _reward);\\n        }\\n        return reward;\\n    }\\n\\n    function _calculateReward(address _owner, uint256 _index, bool _unstaking) private view returns (uint256) {\\n        uint256 length = stakedTokens[_owner].length;\\n        if (_index >= length) revert Errors.InvalidIndex(_index);\\n\\n        StakedTokenInfo storage stakedTokenInfo = stakedTokens[_owner][_index];\\n        StakingPool storage stakingPool = stakingPools[stakedTokenInfo.poolIndex];\\n        uint256 reward = _calculateExtraReward(_owner, stakedTokenInfo.tokenId, stakingPool.reward);\\n\\n        if (stakingPool.invalidated) {\\n            return 0;\\n        } else if (block.timestamp >= stakedTokenInfo.expiresAt) {\\n            return reward - stakedTokenInfo.rewardClaimed;\\n        } else if (!_unstaking && !stakingPool.rewardWhileLocked) {\\n            return 0;\\n        }\\n\\n        uint256 start = stakedTokenInfo.expiresAt - stakingPool.lockPeriod;\\n        return (((block.timestamp - start) * reward) / stakingPool.lockPeriod) - stakedTokenInfo.rewardClaimed;\\n    }\\n\\n    /**\\n     * @dev Get balance of reward token available to claim by user.\\n     * @param _owner The owner to check balance for.\\n     * @return Returns the users reward balance.\\n     */\\n    function rewardsAvailable(address _owner) external view override returns (uint256) {\\n        uint256 reward = 0;\\n\\n        uint256 length = stakedTokens[_owner].length;\\n        for (uint256 i = 0; i < length; ) {\\n            reward += _calculateReward(_owner, i, false);\\n            unchecked {\\n                i++;\\n            }\\n        }\\n\\n        return reward;\\n    }\\n\\n    /**\\n     * @dev Get the number of staking pools available.\\n     * @return Returns the number of staking pools.\\n     */\\n    function stakingPoolCount() external view override returns (uint256) {\\n        return stakingPools.length;\\n    }\\n\\n    /**\\n     * @dev Get the number of staked tokens by owner.\\n     * @param _owner The owner to lookup for.\\n     * @return Returns the number of tokens staked.\\n     */\\n    function totalStakedForOwner(address _owner) external view override returns (uint256) {\\n        return stakedTokens[_owner].length;\\n    }\\n\\n    /**\\n     * @dev Calculate the current rewards rate for a user over a given amount of time.\\n     * @param _owner The owner to calculate for.\\n     * @param _timeUnit The time in seconds to calculate rewards over. i.e. 86400 seconds to calculate rewards per day.\\n     * @return Returns the calculated rewards rate.\\n     */\\n    function rewardsRatePerTimeUnit(address _owner, uint256 _timeUnit) external view override returns (uint256) {\\n        uint256 rewardsRate = 0;\\n\\n        uint256 length = stakedTokens[_owner].length;\\n        for (uint256 i = 0; i < length; ) {\\n            StakedTokenInfo storage stakedTokenInfo = stakedTokens[_owner][i];\\n            if (block.timestamp < stakedTokenInfo.expiresAt) {\\n                StakingPool storage stakingPool = stakingPools[stakedTokenInfo.poolIndex];\\n                uint256 reward = _calculateExtraReward(_owner, stakedTokenInfo.tokenId, stakingPool.reward);\\n                if (!stakingPool.invalidated) {\\n                    rewardsRate += reward / stakingPool.lockPeriod;\\n                }\\n            }\\n\\n            unchecked {\\n                i++;\\n            }\\n        }\\n\\n        return rewardsRate * _timeUnit;\\n    }\\n\\n    /**\\n     * @dev Get a list of unlockable (unstakable) token Ids for a user.\\n     * @param _owner The owner to pull list for.\\n     * @return Returns the length of the array, and the array of token Ids.\\n     */\\n    function unlockableTokenIds(address _owner) external view override returns (uint256, uint256[] memory) {\\n        uint256 length = stakedTokens[_owner].length;\\n        uint256 unlockableCount = 0;\\n        uint256[] memory tokenIds = new uint256[](length);\\n\\n        for (uint256 i = 0; i < length; ) {\\n            StakingPool storage stakingPool = stakingPools[stakedTokens[_owner][i].poolIndex];\\n            if (stakingPool.invalidated || block.timestamp >= stakedTokens[_owner][i].expiresAt) {\\n                tokenIds[unlockableCount] = stakedTokens[_owner][i].tokenId;\\n                unlockableCount += 1;\\n            }\\n\\n            unchecked {\\n                i++;\\n            }\\n        }\\n\\n        return (unlockableCount, tokenIds);\\n    }\\n\\n    /**\\n     * @dev Check if user has tokens locked in a pool.\\n     * @param _owner The owners wallet address.\\n     * @param _poolIndex The pool to check in.\\n     * @return Returns true if the owner has tokens locked in the pool, false if not.\\n     */\\n    function isLockedInPool(address _owner, uint256 _poolIndex) external view override returns (bool) {\\n        if (_poolIndex >= stakingPools.length) revert Errors.InvalidIndex(_poolIndex);\\n        if (stakingPools[_poolIndex].invalidated) return false;\\n\\n        uint256 length = stakedTokens[_owner].length;\\n        for (uint256 i = 0; i < length; ) {\\n            if (\\n                stakedTokens[_owner][i].poolIndex == _poolIndex && block.timestamp < stakedTokens[_owner][i].expiresAt\\n            ) {\\n                return true;\\n            }\\n\\n            unchecked {\\n                i++;\\n            }\\n        }\\n\\n        return false;\\n    }\\n\\n    function onERC721Received(address, address, uint256, bytes calldata) external pure override returns (bytes4) {\\n        return IERC721Receiver.onERC721Received.selector;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/BapeliensStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"@wraith-works/contracts/tokens/ERC721/StakingPoolsERC721.sol\\\";\\n\\ncontract BapeliensStaking is StakingPoolsERC721 {\\n    constructor(address _stakingToken, address _rewardToken) StakingPoolsERC721(_stakingToken, _rewardToken) {}\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"InvalidIndex\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidLockPeriod\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"StakingPoolInactive\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"StakingPoolInvalid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"name\":\"RewardTokenSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"StakingPoolActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"StakingPoolAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"StakingPoolDeactivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"StakingPoolInvalidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakingRewardCalculator\",\"type\":\"address\"}],\"name\":\"StakingRewardCalculatorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakingToken\",\"type\":\"address\"}],\"name\":\"StakingTokenSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"activateStakingPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_rewardWhileLocked\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_lockPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"}],\"name\":\"addStakingPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"deactivateStakingPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"invalidateStakingPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_poolIndex\",\"type\":\"uint256\"}],\"name\":\"isLockedInPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IBaseERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"rewardsAvailable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_timeUnit\",\"type\":\"uint256\"}],\"name\":\"rewardsRatePerTimeUnit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"name\":\"setRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingRewardCalculator\",\"type\":\"address\"}],\"name\":\"setStakingRewardCalculator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"}],\"name\":\"setStakingToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiresAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardClaimed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingPoolCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakingPools\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"invalidated\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"rewardWhileLocked\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"lockPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakedCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingRewardCalculator\",\"outputs\":[{\"internalType\":\"contract IStakingRewardCalculator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"totalStakedForOwner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"unlockableTokenIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BapeliensStaking", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000b0c5a2423011f26a49d5314a564bd93087d366d6000000000000000000000000648932f3bb8af68dbd62090eb4a3980cc5016e1e", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}