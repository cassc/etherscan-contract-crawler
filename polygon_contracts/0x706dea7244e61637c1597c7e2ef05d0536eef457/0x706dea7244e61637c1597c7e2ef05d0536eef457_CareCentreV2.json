{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Aavegotchi/interfaces/IAavegotchiFacet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\n\\nimport { AavegotchiInfo } from \\\"../libraries/LibAavegotchi.sol\\\";\\n\\ninterface IAavegotchiFacet {\\n  function totalSupply() external view returns (uint256 totalSupply_);\\n\\n  function balanceOf(address _owner) external view returns (uint256 balance_);\\n\\n  function getAavegotchi(uint256 _tokenId)\\n    external\\n    view\\n    returns (AavegotchiInfo memory aavegotchiInfo_);\\n\\n  function aavegotchiClaimTime(uint256 _tokenId)\\n    external\\n    view\\n    returns (uint256 claimTime_);\\n\\n  function tokenByIndex(uint256 _index)\\n    external\\n    view\\n    returns (uint256 tokenId_);\\n\\n  function tokenOfOwnerByIndex(address _owner, uint256 _index)\\n    external\\n    view\\n    returns (uint256 tokenId_);\\n\\n  function tokenIdsOfOwner(address _owner)\\n    external\\n    view\\n    returns (uint32[] memory tokenIds_);\\n\\n  function allAavegotchisOfOwner(address _owner)\\n    external\\n    view\\n    returns (AavegotchiInfo[] memory aavegotchiInfos_);\\n\\n  function ownerOf(uint256 _tokenId) external view returns (address owner_);\\n\\n  function getApproved(uint256 _tokenId)\\n    external\\n    view\\n    returns (address approved_);\\n\\n  function isApprovedForAll(address _owner, address _operator)\\n    external\\n    view\\n    returns (bool approved_);\\n\\n  function isPetOperatorForAll(address _owner, address _operator)\\n    external\\n    view\\n    returns (bool approved_);\\n}\\n\"\r\n    },\r\n    \"contracts/Aavegotchi/interfaces/IAavegotchiGameFacet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\n\\ninterface IAavegotchiGameFacet {\\n    function interact(uint256[] calldata _tokenIds) external;\\n}\\n\"\r\n    },\r\n    \"contracts/Aavegotchi/interfaces/ILink.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\n\\ninterface ILink {\\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n    function approve(address spender, uint256 value) external returns (bool success);\\n\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    function decimals() external view returns (uint8 decimalPlaces);\\n\\n    function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n    function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n    function name() external view returns (string memory tokenName);\\n\\n    function symbol() external view returns (string memory tokenSymbol);\\n\\n    function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n    function transfer(address to, uint256 value) external returns (bool success);\\n\\n    function transferAndCall(\\n        address to,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bool success);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool success);\\n}\\n\"\r\n    },\r\n    \"contracts/Aavegotchi/libraries/LibAavegotchi.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\n\\nimport {IERC20} from \\\"../../shared/interfaces/IERC20.sol\\\";\\nimport {\\n    LibAppStorage,\\n    AavegotchiCollateralTypeInfo,\\n    AppStorage,\\n    Aavegotchi,\\n    ItemType,\\n    NUMERIC_TRAITS_NUM,\\n    EQUIPPED_WEARABLE_SLOTS,\\n    PORTAL_AAVEGOTCHIS_NUM\\n} from \\\"./LibAppStorage.sol\\\";\\nimport {LibERC20} from \\\"../../shared/libraries/LibERC20.sol\\\";\\nimport {LibMeta} from \\\"../../shared/libraries/LibMeta.sol\\\";\\nimport {IERC721} from \\\"../../shared/interfaces/IERC721.sol\\\";\\nimport {LibERC721} from \\\"../../shared/libraries/LibERC721.sol\\\";\\nimport {LibItems, ItemTypeIO} from \\\"../libraries/LibItems.sol\\\";\\n\\nstruct AavegotchiCollateralTypeIO {\\n    address collateralType;\\n    AavegotchiCollateralTypeInfo collateralTypeInfo;\\n}\\n\\nstruct AavegotchiInfo {\\n    uint256 tokenId;\\n    string name;\\n    address owner;\\n    uint256 randomNumber;\\n    uint256 status;\\n    int16[NUMERIC_TRAITS_NUM] numericTraits;\\n    int16[NUMERIC_TRAITS_NUM] modifiedNumericTraits;\\n    uint16[EQUIPPED_WEARABLE_SLOTS] equippedWearables;\\n    address collateral;\\n    address escrow;\\n    uint256 stakedAmount;\\n    uint256 minimumStake;\\n    uint256 kinship; //The kinship value of this Aavegotchi. Default is 50.\\n    uint256 lastInteracted;\\n    uint256 experience; //How much XP this Aavegotchi has accrued. Begins at 0.\\n    uint256 toNextLevel;\\n    uint256 usedSkillPoints; //number of skill points used\\n    uint256 level; //the current aavegotchi level\\n    uint256 hauntId;\\n    uint256 baseRarityScore;\\n    uint256 modifiedRarityScore;\\n    bool locked;\\n    ItemTypeIO[] items;\\n}\\n\\nstruct PortalAavegotchiTraitsIO {\\n    uint256 randomNumber;\\n    int16[NUMERIC_TRAITS_NUM] numericTraits;\\n    address collateralType;\\n    uint256 minimumStake;\\n}\\n\\nstruct InternalPortalAavegotchiTraitsIO {\\n    uint256 randomNumber;\\n    int16[NUMERIC_TRAITS_NUM] numericTraits;\\n    address collateralType;\\n    uint256 minimumStake;\\n}\\n\\nlibrary LibAavegotchi {\\n    uint8 constant STATUS_CLOSED_PORTAL = 0;\\n    uint8 constant STATUS_VRF_PENDING = 1;\\n    uint8 constant STATUS_OPEN_PORTAL = 2;\\n    uint8 constant STATUS_AAVEGOTCHI = 3;\\n\\n    event AavegotchiInteract(uint256 indexed _tokenId, uint256 kinship);\\n\\n    function toNumericTraits(uint256 _randomNumber, int16[NUMERIC_TRAITS_NUM] memory _modifiers)\\n        internal\\n        pure\\n        returns (int16[NUMERIC_TRAITS_NUM] memory numericTraits_)\\n    {\\n        for (uint256 i; i < NUMERIC_TRAITS_NUM; i++) {\\n            uint256 value = uint8(uint256(_randomNumber >> (i * 8)));\\n            if (value > 99) {\\n                value /= 2;\\n                if (value > 99) {\\n                    value = uint256(keccak256(abi.encodePacked(_randomNumber, i))) % 100;\\n                }\\n            }\\n            numericTraits_[i] = int16(int256(value)) + _modifiers[i];\\n        }\\n    }\\n\\n    function rarityMultiplier(int16[NUMERIC_TRAITS_NUM] memory _numericTraits) internal pure returns (uint256 multiplier) {\\n        uint256 rarityScore = LibAavegotchi.baseRarityScore(_numericTraits);\\n        if (rarityScore < 300) return 10;\\n        else if (rarityScore >= 300 && rarityScore < 450) return 10;\\n        else if (rarityScore >= 450 && rarityScore <= 525) return 25;\\n        else if (rarityScore >= 526 && rarityScore <= 580) return 100;\\n        else if (rarityScore >= 581) return 1000;\\n    }\\n\\n    function singlePortalAavegotchiTraits(uint256 _randomNumber, uint256 _option)\\n        internal\\n        view\\n        returns (InternalPortalAavegotchiTraitsIO memory singlePortalAavegotchiTraits_)\\n    {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        uint256 randomNumberN = uint256(keccak256(abi.encodePacked(_randomNumber, _option)));\\n        singlePortalAavegotchiTraits_.randomNumber = randomNumberN;\\n        address collateralType = s.collateralTypes[randomNumberN % s.collateralTypes.length];\\n        singlePortalAavegotchiTraits_.numericTraits = toNumericTraits(randomNumberN, s.collateralTypeInfo[collateralType].modifiers);\\n        singlePortalAavegotchiTraits_.collateralType = collateralType;\\n\\n        AavegotchiCollateralTypeInfo memory collateralInfo = s.collateralTypeInfo[collateralType];\\n        uint256 conversionRate = collateralInfo.conversionRate;\\n\\n        //Get rarity multiplier\\n        uint256 multiplier = rarityMultiplier(singlePortalAavegotchiTraits_.numericTraits);\\n\\n        //First we get the base price of our collateral in terms of DAI\\n        uint256 collateralDAIPrice = ((10**IERC20(collateralType).decimals()) / conversionRate);\\n\\n        //Then multiply by the rarity multiplier\\n        singlePortalAavegotchiTraits_.minimumStake = collateralDAIPrice * multiplier;\\n    }\\n\\n    function portalAavegotchiTraits(uint256 _tokenId)\\n        internal\\n        view\\n        returns (PortalAavegotchiTraitsIO[PORTAL_AAVEGOTCHIS_NUM] memory portalAavegotchiTraits_)\\n    {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        require(s.aavegotchis[_tokenId].status == LibAavegotchi.STATUS_OPEN_PORTAL, \\\"AavegotchiFacet: Portal not open\\\");\\n\\n        uint256 randomNumber = s.tokenIdToRandomNumber[_tokenId];\\n\\n        for (uint256 i; i < portalAavegotchiTraits_.length; i++) {\\n            InternalPortalAavegotchiTraitsIO memory single = singlePortalAavegotchiTraits(randomNumber, i);\\n            portalAavegotchiTraits_[i].randomNumber = single.randomNumber;\\n            portalAavegotchiTraits_[i].collateralType = single.collateralType;\\n            portalAavegotchiTraits_[i].minimumStake = single.minimumStake;\\n            portalAavegotchiTraits_[i].numericTraits = single.numericTraits;\\n        }\\n    }\\n\\n    function getAavegotchi(uint256 _tokenId) internal view returns (AavegotchiInfo memory aavegotchiInfo_) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        aavegotchiInfo_.tokenId = _tokenId;\\n        aavegotchiInfo_.owner = s.aavegotchis[_tokenId].owner;\\n        aavegotchiInfo_.randomNumber = s.aavegotchis[_tokenId].randomNumber;\\n        aavegotchiInfo_.status = s.aavegotchis[_tokenId].status;\\n        aavegotchiInfo_.hauntId = s.aavegotchis[_tokenId].hauntId;\\n        if (aavegotchiInfo_.status == STATUS_AAVEGOTCHI) {\\n            aavegotchiInfo_.name = s.aavegotchis[_tokenId].name;\\n            aavegotchiInfo_.equippedWearables = s.aavegotchis[_tokenId].equippedWearables;\\n            aavegotchiInfo_.collateral = s.aavegotchis[_tokenId].collateralType;\\n            aavegotchiInfo_.escrow = s.aavegotchis[_tokenId].escrow;\\n            aavegotchiInfo_.stakedAmount = IERC20(aavegotchiInfo_.collateral).balanceOf(aavegotchiInfo_.escrow);\\n            aavegotchiInfo_.minimumStake = s.aavegotchis[_tokenId].minimumStake;\\n            aavegotchiInfo_.kinship = kinship(_tokenId);\\n            aavegotchiInfo_.lastInteracted = s.aavegotchis[_tokenId].lastInteracted;\\n            aavegotchiInfo_.experience = s.aavegotchis[_tokenId].experience;\\n            aavegotchiInfo_.toNextLevel = xpUntilNextLevel(s.aavegotchis[_tokenId].experience);\\n            aavegotchiInfo_.level = aavegotchiLevel(s.aavegotchis[_tokenId].experience);\\n            aavegotchiInfo_.usedSkillPoints = s.aavegotchis[_tokenId].usedSkillPoints;\\n            aavegotchiInfo_.numericTraits = s.aavegotchis[_tokenId].numericTraits;\\n            aavegotchiInfo_.baseRarityScore = baseRarityScore(aavegotchiInfo_.numericTraits);\\n            (aavegotchiInfo_.modifiedNumericTraits, aavegotchiInfo_.modifiedRarityScore) = modifiedTraitsAndRarityScore(_tokenId);\\n            aavegotchiInfo_.locked = s.aavegotchis[_tokenId].locked;\\n            aavegotchiInfo_.items = LibItems.itemBalancesOfTokenWithTypes(address(this), _tokenId);\\n        }\\n    }\\n\\n    //Only valid for claimed Aavegotchis\\n    function modifiedTraitsAndRarityScore(uint256 _tokenId)\\n        internal\\n        view\\n        returns (int16[NUMERIC_TRAITS_NUM] memory numericTraits_, uint256 rarityScore_)\\n    {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        require(s.aavegotchis[_tokenId].status == STATUS_AAVEGOTCHI, \\\"AavegotchiFacet: Must be claimed\\\");\\n        Aavegotchi storage aavegotchi = s.aavegotchis[_tokenId];\\n        numericTraits_ = getNumericTraits(_tokenId);\\n        uint256 wearableBonus;\\n        for (uint256 slot; slot < EQUIPPED_WEARABLE_SLOTS; slot++) {\\n            uint256 wearableId = aavegotchi.equippedWearables[slot];\\n            if (wearableId == 0) {\\n                continue;\\n            }\\n            ItemType storage itemType = s.itemTypes[wearableId];\\n            //Add on trait modifiers\\n            for (uint256 j; j < NUMERIC_TRAITS_NUM; j++) {\\n                numericTraits_[j] += itemType.traitModifiers[j];\\n            }\\n            wearableBonus += itemType.rarityScoreModifier;\\n        }\\n        uint256 baseRarity = baseRarityScore(numericTraits_);\\n        rarityScore_ = baseRarity + wearableBonus;\\n    }\\n\\n    function getNumericTraits(uint256 _tokenId) internal view returns (int16[NUMERIC_TRAITS_NUM] memory numericTraits_) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        //Check if trait boosts from consumables are still valid\\n        int256 boostDecay = int256((block.timestamp - s.aavegotchis[_tokenId].lastTemporaryBoost) / 24 hours);\\n        for (uint256 i; i < NUMERIC_TRAITS_NUM; i++) {\\n            int256 number = s.aavegotchis[_tokenId].numericTraits[i];\\n            int256 boost = s.aavegotchis[_tokenId].temporaryTraitBoosts[i];\\n\\n            if (boost > 0 && boost > boostDecay) {\\n                number += boost - boostDecay;\\n            } else if ((boost * -1) > boostDecay) {\\n                number += boost + boostDecay;\\n            }\\n            numericTraits_[i] = int16(number);\\n        }\\n    }\\n\\n    function kinship(uint256 _tokenId) internal view returns (uint256 score_) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        Aavegotchi storage aavegotchi = s.aavegotchis[_tokenId];\\n        uint256 lastInteracted = aavegotchi.lastInteracted;\\n        uint256 interactionCount = aavegotchi.interactionCount;\\n        uint256 interval = block.timestamp - lastInteracted;\\n\\n        uint256 daysSinceInteraction = interval / 24 hours;\\n\\n        if (interactionCount > daysSinceInteraction) {\\n            score_ = interactionCount - daysSinceInteraction;\\n        }\\n    }\\n\\n    function xpUntilNextLevel(uint256 _experience) internal pure returns (uint256 requiredXp_) {\\n        uint256 currentLevel = aavegotchiLevel(_experience);\\n        requiredXp_ = ((currentLevel**2) * 50) - _experience;\\n    }\\n\\n    function aavegotchiLevel(uint256 _experience) internal pure returns (uint256 level_) {\\n        if (_experience > 490050) {\\n            return 99;\\n        }\\n\\n        level_ = (sqrt(2 * _experience) / 10);\\n        return level_ + 1;\\n    }\\n\\n    function interact(uint256 _tokenId) internal returns (bool) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        uint256 lastInteracted = s.aavegotchis[_tokenId].lastInteracted;\\n        // if interacted less than 12 hours ago\\n        if (block.timestamp < lastInteracted + 12 hours) {\\n            return false;\\n        }\\n\\n        uint256 interactionCount = s.aavegotchis[_tokenId].interactionCount;\\n        uint256 interval = block.timestamp - lastInteracted;\\n        uint256 daysSinceInteraction = interval / 1 days;\\n        uint256 l_kinship;\\n        if (interactionCount > daysSinceInteraction) {\\n            l_kinship = interactionCount - daysSinceInteraction;\\n        }\\n\\n        uint256 hateBonus;\\n\\n        if (l_kinship < 40) {\\n            hateBonus = 2;\\n        }\\n        l_kinship += 1 + hateBonus;\\n        s.aavegotchis[_tokenId].interactionCount = l_kinship;\\n\\n        s.aavegotchis[_tokenId].lastInteracted = uint40(block.timestamp);\\n        emit AavegotchiInteract(_tokenId, l_kinship);\\n        return true;\\n    }\\n\\n    //Calculates the base rarity score, including collateral modifier\\n    function baseRarityScore(int16[NUMERIC_TRAITS_NUM] memory _numericTraits) internal pure returns (uint256 _rarityScore) {\\n        for (uint256 i; i < NUMERIC_TRAITS_NUM; i++) {\\n            int256 number = _numericTraits[i];\\n            if (number >= 50) {\\n                _rarityScore += uint256(number) + 1;\\n            } else {\\n                _rarityScore += uint256(int256(100) - number);\\n            }\\n        }\\n    }\\n\\n    // Need to ensure there is no overflow of _ghst\\n    function purchase(address _from, uint256 _ghst) internal {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        //33% to burn address\\n        uint256 burnShare = (_ghst * 33) / 100;\\n\\n        //17% to Pixelcraft wallet\\n        uint256 companyShare = (_ghst * 17) / 100;\\n\\n        //40% to rarity farming rewards\\n        uint256 rarityFarmShare = (_ghst * 2) / 5;\\n\\n        //10% to DAO\\n        uint256 daoShare = (_ghst - burnShare - companyShare - rarityFarmShare);\\n\\n        // Using 0xFFfFfFffFFfffFFfFFfFFFFFffFFFffffFfFFFfF as burn address.\\n        // GHST token contract does not allow transferring to address(0) address: https://etherscan.io/address/0x3F382DbD960E3a9bbCeaE22651E88158d2791550#code\\n        address ghstContract = s.ghstContract;\\n        LibERC20.transferFrom(ghstContract, _from, address(0xFFfFfFffFFfffFFfFFfFFFFFffFFFffffFfFFFfF), burnShare);\\n        LibERC20.transferFrom(ghstContract, _from, s.pixelCraft, companyShare);\\n        LibERC20.transferFrom(ghstContract, _from, s.rarityFarming, rarityFarmShare);\\n        LibERC20.transferFrom(ghstContract, _from, s.dao, daoShare);\\n    }\\n\\n    function sqrt(uint256 x) internal pure returns (uint256 y) {\\n        uint256 z = (x + 1) / 2;\\n        y = x;\\n        while (z < y) {\\n            y = z;\\n            z = (x / z + z) / 2;\\n        }\\n    }\\n\\n    function validateAndLowerName(string memory _name) internal pure returns (string memory) {\\n        bytes memory name = abi.encodePacked(_name);\\n        uint256 len = name.length;\\n        require(len != 0, \\\"LibAavegotchi: name can't be 0 chars\\\");\\n        require(len < 26, \\\"LibAavegotchi: name can't be greater than 25 characters\\\");\\n        uint256 char = uint256(uint8(name[0]));\\n        require(char != 32, \\\"LibAavegotchi: first char of name can't be a space\\\");\\n        char = uint256(uint8(name[len - 1]));\\n        require(char != 32, \\\"LibAavegotchi: last char of name can't be a space\\\");\\n        for (uint256 i; i < len; i++) {\\n            char = uint256(uint8(name[i]));\\n            require(char > 31 && char < 127, \\\"LibAavegotchi: invalid character in Aavegotchi name.\\\");\\n            if (char < 91 && char > 64) {\\n                name[i] = bytes1(uint8(char + 32));\\n            }\\n        }\\n        return string(name);\\n    }\\n\\n    // function addTokenToUser(address _to, uint256 _tokenId) internal {}\\n\\n    // function removeTokenFromUser(address _from, uint256 _tokenId) internal {}\\n\\n    function transfer(\\n        address _from,\\n        address _to,\\n        uint256 _tokenId\\n    ) internal {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        // remove\\n        uint256 index = s.ownerTokenIdIndexes[_from][_tokenId];\\n        uint256 lastIndex = s.ownerTokenIds[_from].length - 1;\\n        if (index != lastIndex) {\\n            uint32 lastTokenId = s.ownerTokenIds[_from][lastIndex];\\n            s.ownerTokenIds[_from][index] = lastTokenId;\\n            s.ownerTokenIdIndexes[_from][lastTokenId] = index;\\n        }\\n        s.ownerTokenIds[_from].pop();\\n        delete s.ownerTokenIdIndexes[_from][_tokenId];\\n        if (s.approved[_tokenId] != address(0)) {\\n            delete s.approved[_tokenId];\\n            emit LibERC721.Approval(_from, address(0), _tokenId);\\n        }\\n        // add\\n        s.aavegotchis[_tokenId].owner = _to;\\n        s.ownerTokenIdIndexes[_to][_tokenId] = s.ownerTokenIds[_to].length;\\n        s.ownerTokenIds[_to].push(uint32(_tokenId));\\n        emit LibERC721.Transfer(_from, _to, _tokenId);\\n    }\\n\\n  /*  function verify(uint256 _tokenId) internal pure {\\n       // if (_tokenId < 10) {}\\n       // revert(\\\"Not verified\\\");\\n    }\\n    */\\n}\\n\"\r\n    },\r\n    \"contracts/Aavegotchi/libraries/LibAppStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\nimport {LibDiamond} from \\\"../../shared/libraries/LibDiamond.sol\\\";\\nimport {LibMeta} from \\\"../../shared/libraries/LibMeta.sol\\\";\\nimport {ILink} from \\\"../interfaces/ILink.sol\\\";\\n//import \\\"../interfaces/IERC20.sol\\\";\\n// import \\\"hardhat/console.sol\\\";\\n\\nuint256 constant EQUIPPED_WEARABLE_SLOTS = 16;\\nuint256 constant NUMERIC_TRAITS_NUM = 6;\\nuint256 constant TRAIT_BONUSES_NUM = 5;\\nuint256 constant PORTAL_AAVEGOTCHIS_NUM = 10;\\n\\n//  switch (traitType) {\\n//         case 0:\\n//             return energy(value);\\n//         case 1:\\n//             return aggressiveness(value);\\n//         case 2:\\n//             return spookiness(value);\\n//         case 3:\\n//             return brain(value);\\n//         case 4:\\n//             return eyeShape(value);\\n//         case 5:\\n//             return eyeColor(value);\\n\\nstruct Aavegotchi {\\n    uint16[EQUIPPED_WEARABLE_SLOTS] equippedWearables; //The currently equipped wearables of the Aavegotchi\\n    // [Experience, Rarity Score, Kinship, Eye Color, Eye Shape, Brain Size, Spookiness, Aggressiveness, Energy]\\n    int8[NUMERIC_TRAITS_NUM] temporaryTraitBoosts;\\n    int16[NUMERIC_TRAITS_NUM] numericTraits; // Sixteen 16 bit ints.  [Eye Color, Eye Shape, Brain Size, Spookiness, Aggressiveness, Energy]\\n    string name;\\n    uint256 randomNumber;\\n    uint256 experience; //How much XP this Aavegotchi has accrued. Begins at 0.\\n    uint256 minimumStake; //The minimum amount of collateral that must be staked. Set upon creation.\\n    uint256 usedSkillPoints; //The number of skill points this aavegotchi has already used\\n    uint256 interactionCount; //How many times the owner of this Aavegotchi has interacted with it.\\n    address collateralType;\\n    uint40 claimTime; //The block timestamp when this Aavegotchi was claimed\\n    uint40 lastTemporaryBoost;\\n    uint16 hauntId;\\n    address owner;\\n    uint8 status; // 0 == portal, 1 == VRF_PENDING, 2 == open portal, 3 == Aavegotchi\\n    uint40 lastInteracted; //The last time this Aavegotchi was interacted with\\n    bool locked;\\n    address escrow; //The escrow address this Aavegotchi manages.\\n}\\n\\nstruct Dimensions {\\n    uint8 x;\\n    uint8 y;\\n    uint8 width;\\n    uint8 height;\\n}\\n\\nstruct ItemType {\\n    string name; //The name of the item\\n    string description;\\n    string author;\\n    // treated as int8s array\\n    // [Experience, Rarity Score, Kinship, Eye Color, Eye Shape, Brain Size, Spookiness, Aggressiveness, Energy]\\n    int8[NUMERIC_TRAITS_NUM] traitModifiers; //[WEARABLE ONLY] How much the wearable modifies each trait. Should not be more than +-5 total\\n    //[WEARABLE ONLY] The slots that this wearable can be added to.\\n    bool[EQUIPPED_WEARABLE_SLOTS] slotPositions;\\n    // this is an array of uint indexes into the collateralTypes array\\n    uint8[] allowedCollaterals; //[WEARABLE ONLY] The collaterals this wearable can be equipped to. An empty array is \\\"any\\\"\\n    // SVG x,y,width,height\\n    Dimensions dimensions;\\n    uint256 ghstPrice; //How much GHST this item costs\\n    uint256 maxQuantity; //Total number that can be minted of this item.\\n    uint256 totalQuantity; //The total quantity of this item minted so far\\n    uint32 svgId; //The svgId of the item\\n    uint8 rarityScoreModifier; //Number from 1-50.\\n    // Each bit is a slot position. 1 is true, 0 is false\\n    bool canPurchaseWithGhst;\\n    uint16 minLevel; //The minimum Aavegotchi level required to use this item. Default is 1.\\n    bool canBeTransferred;\\n    uint8 category; // 0 is wearable, 1 is badge, 2 is consumable\\n    int16 kinshipBonus; //[CONSUMABLE ONLY] How much this consumable boosts (or reduces) kinship score\\n    uint32 experienceBonus; //[CONSUMABLE ONLY]\\n}\\n\\nstruct WearableSet {\\n    string name;\\n    uint8[] allowedCollaterals;\\n    uint16[] wearableIds; // The tokenIdS of each piece of the set\\n    int8[TRAIT_BONUSES_NUM] traitsBonuses;\\n}\\n\\nstruct Haunt {\\n    uint256 hauntMaxSize; //The max size of the Haunt\\n    uint256 portalPrice;\\n    bytes3 bodyColor;\\n    uint24 totalCount;\\n}\\n\\nstruct SvgLayer {\\n    address svgLayersContract;\\n    uint16 offset;\\n    uint16 size;\\n}\\n\\nstruct AavegotchiCollateralTypeInfo {\\n    // treated as an arary of int8\\n    int16[NUMERIC_TRAITS_NUM] modifiers; //Trait modifiers for each collateral. Can be 2, 1, -1, or -2\\n    bytes3 primaryColor;\\n    bytes3 secondaryColor;\\n    bytes3 cheekColor;\\n    uint8 svgId;\\n    uint8 eyeShapeSvgId;\\n    uint16 conversionRate; //Current conversionRate for the price of this collateral in relation to 1 USD. Can be updated by the DAO\\n    bool delisted;\\n}\\n\\nstruct ERC1155Listing {\\n    uint256 listingId;\\n    address seller;\\n    address erc1155TokenAddress;\\n    uint256 erc1155TypeId;\\n    uint256 category; // 0 is wearable, 1 is badge, 2 is consumable, 3 is tickets\\n    uint256 quantity;\\n    uint256 priceInWei;\\n    uint256 timeCreated;\\n    uint256 timeLastPurchased;\\n    uint256 sourceListingId;\\n    bool sold;\\n    bool cancelled;\\n}\\n\\nstruct ERC721Listing {\\n    uint256 listingId;\\n    address seller;\\n    address erc721TokenAddress;\\n    uint256 erc721TokenId;\\n    uint256 category; // 0 is closed portal, 1 is vrf pending, 2 is open portal, 3 is Aavegotchi\\n    uint256 priceInWei;\\n    uint256 timeCreated;\\n    uint256 timePurchased;\\n    bool cancelled;\\n}\\n\\nstruct ListingListItem {\\n    uint256 parentListingId;\\n    uint256 listingId;\\n    uint256 childListingId;\\n}\\n\\nstruct AppStorage {\\n    mapping(address => AavegotchiCollateralTypeInfo) collateralTypeInfo;\\n    mapping(address => uint256) collateralTypeIndexes;\\n    mapping(bytes32 => SvgLayer[]) svgLayers;\\n    mapping(address => mapping(uint256 => mapping(uint256 => uint256))) nftItemBalances;\\n    mapping(address => mapping(uint256 => uint256[])) nftItems;\\n    // indexes are stored 1 higher so that 0 means no items in items array\\n    mapping(address => mapping(uint256 => mapping(uint256 => uint256))) nftItemIndexes;\\n    ItemType[] itemTypes;\\n    WearableSet[] wearableSets;\\n    mapping(uint256 => Haunt) haunts;\\n    mapping(address => mapping(uint256 => uint256)) ownerItemBalances;\\n    mapping(address => uint256[]) ownerItems;\\n    // indexes are stored 1 higher so that 0 means no items in items array\\n    mapping(address => mapping(uint256 => uint256)) ownerItemIndexes;\\n    mapping(uint256 => uint256) tokenIdToRandomNumber;\\n    mapping(uint256 => Aavegotchi) aavegotchis;\\n    mapping(address => uint32[]) ownerTokenIds;\\n    mapping(address => mapping(uint256 => uint256)) ownerTokenIdIndexes;\\n    uint32[] tokenIds;\\n    mapping(uint256 => uint256) tokenIdIndexes;\\n    mapping(address => mapping(address => bool)) operators;\\n    mapping(uint256 => address) approved;\\n    mapping(string => bool) aavegotchiNamesUsed;\\n    mapping(address => uint256) metaNonces;\\n    uint32 tokenIdCounter;\\n    uint16 currentHauntId;\\n    string name;\\n    string symbol;\\n    //Addresses\\n    address[] collateralTypes;\\n    address ghstContract;\\n    address childChainManager;\\n    address gameManager;\\n    address dao;\\n    address daoTreasury;\\n    address pixelCraft;\\n    address rarityFarming;\\n    string itemsBaseUri;\\n    bytes32 domainSeparator;\\n    //VRF\\n    mapping(bytes32 => uint256) vrfRequestIdToTokenId;\\n    mapping(bytes32 => uint256) vrfNonces;\\n    bytes32 keyHash;\\n    uint144 fee;\\n    address vrfCoordinator;\\n    ILink link;\\n    // Marketplace\\n    uint256 nextERC1155ListingId;\\n    // erc1155 category => erc1155Order\\n    //ERC1155Order[] erc1155MarketOrders;\\n    mapping(uint256 => ERC1155Listing) erc1155Listings;\\n    // category => (\\\"listed\\\" or purchased => first listingId)\\n    //mapping(uint256 => mapping(string => bytes32[])) erc1155MarketListingIds;\\n    mapping(uint256 => mapping(string => uint256)) erc1155ListingHead;\\n    // \\\"listed\\\" or purchased => (listingId => ListingListItem)\\n    mapping(string => mapping(uint256 => ListingListItem)) erc1155ListingListItem;\\n    mapping(address => mapping(uint256 => mapping(string => uint256))) erc1155OwnerListingHead;\\n    // \\\"listed\\\" or purchased => (listingId => ListingListItem)\\n    mapping(string => mapping(uint256 => ListingListItem)) erc1155OwnerListingListItem;\\n    mapping(address => mapping(uint256 => mapping(address => uint256))) erc1155TokenToListingId;\\n    uint256 listingFeeInWei;\\n    // erc1155Token => (erc1155TypeId => category)\\n    mapping(address => mapping(uint256 => uint256)) erc1155Categories;\\n    uint256 nextERC721ListingId;\\n    //ERC1155Order[] erc1155MarketOrders;\\n    mapping(uint256 => ERC721Listing) erc721Listings;\\n    // listingId => ListingListItem\\n    mapping(uint256 => ListingListItem) erc721ListingListItem;\\n    //mapping(uint256 => mapping(string => bytes32[])) erc1155MarketListingIds;\\n    mapping(uint256 => mapping(string => uint256)) erc721ListingHead;\\n    // user address => category => sort => listingId => ListingListItem\\n    mapping(uint256 => ListingListItem) erc721OwnerListingListItem;\\n    //mapping(uint256 => mapping(string => bytes32[])) erc1155MarketListingIds;\\n    mapping(address => mapping(uint256 => mapping(string => uint256))) erc721OwnerListingHead;\\n    // erc1155Token => (erc1155TypeId => category)\\n    // not really in use now, for the future\\n    mapping(address => mapping(uint256 => uint256)) erc721Categories;\\n    // erc721 token address, erc721 tokenId, user address => listingId\\n    mapping(address => mapping(uint256 => mapping(address => uint256))) erc721TokenToListingId;\\n    // body wearableId => sleevesId\\n    mapping(uint256 => uint256) sleeves;\\n    // mapping(address => mapping(uint256 => address)) petOperators;\\n    // mapping(address => uint256[]) petOperatorTokenIds;\\n    mapping(address => bool) itemManagers;\\n}\\n\\nlibrary LibAppStorage {\\n    function diamondStorage() internal pure returns (AppStorage storage ds) {\\n        assembly {\\n            ds.slot := 0\\n        }\\n    }\\n\\n    function abs(int256 x) internal pure returns (uint256) {\\n        return uint256(x >= 0 ? x : -x);\\n    }\\n}\\n\\ncontract Modifiers {\\n    AppStorage internal s;\\n    modifier onlyAavegotchiOwner(uint256 _tokenId) {\\n        require(LibMeta.msgSender() == s.aavegotchis[_tokenId].owner, \\\"LibAppStorage: Only aavegotchi owner can call this function\\\");\\n        _;\\n    }\\n    modifier onlyUnlocked(uint256 _tokenId) {\\n        require(s.aavegotchis[_tokenId].locked == false, \\\"LibAppStorage: Only callable on unlocked Aavegotchis\\\");\\n        _;\\n    }\\n\\n    modifier onlyOwner {\\n        LibDiamond.enforceIsContractOwner();\\n        _;\\n    }\\n\\n    modifier onlyDao {\\n        address sender = LibMeta.msgSender();\\n        require(sender == s.dao, \\\"Only DAO can call this function\\\");\\n        _;\\n    }\\n\\n    modifier onlyDaoOrOwner {\\n        address sender = LibMeta.msgSender();\\n        require(sender == s.dao || sender == LibDiamond.contractOwner(), \\\"LibAppStorage: Do not have access\\\");\\n        _;\\n    }\\n\\n    modifier onlyOwnerOrDaoOrGameManager {\\n        address sender = LibMeta.msgSender();\\n        require(sender == s.dao || sender == LibDiamond.contractOwner() || sender == s.gameManager, \\\"LibAppStorage: Do not have access\\\");\\n        _;\\n    }\\n    modifier onlyItemManager {\\n        address sender = LibMeta.msgSender();\\n        require(s.itemManagers[sender] == true, \\\"LibAppStorage: only an ItemManager can call this function\\\");\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Aavegotchi/libraries/LibItems.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\n\\nimport {LibAppStorage, AppStorage, ItemType, Aavegotchi, EQUIPPED_WEARABLE_SLOTS} from \\\"./LibAppStorage.sol\\\";\\nimport {LibERC1155} from \\\"../../shared/libraries/LibERC1155.sol\\\";\\n\\nstruct ItemTypeIO {\\n    uint256 balance;\\n    uint256 itemId;\\n    ItemType itemType;\\n}\\n\\nlibrary LibItems {\\n    //Wearables\\n    uint8 internal constant WEARABLE_SLOT_BODY = 0;\\n    uint8 internal constant WEARABLE_SLOT_FACE = 1;\\n    uint8 internal constant WEARABLE_SLOT_EYES = 2;\\n    uint8 internal constant WEARABLE_SLOT_HEAD = 3;\\n    uint8 internal constant WEARABLE_SLOT_HAND_LEFT = 4;\\n    uint8 internal constant WEARABLE_SLOT_HAND_RIGHT = 5;\\n    uint8 internal constant WEARABLE_SLOT_PET = 6;\\n    uint8 internal constant WEARABLE_SLOT_BG = 7;\\n\\n    uint256 internal constant ITEM_CATEGORY_WEARABLE = 0;\\n    uint256 internal constant ITEM_CATEGORY_BADGE = 1;\\n    uint256 internal constant ITEM_CATEGORY_CONSUMABLE = 2;\\n\\n    uint8 internal constant WEARABLE_SLOTS_TOTAL = 11;\\n\\n    function itemBalancesOfTokenWithTypes(address _tokenContract, uint256 _tokenId)\\n        internal\\n        view\\n        returns (ItemTypeIO[] memory itemBalancesOfTokenWithTypes_)\\n    {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        uint256 count = s.nftItems[_tokenContract][_tokenId].length;\\n        itemBalancesOfTokenWithTypes_ = new ItemTypeIO[](count);\\n        for (uint256 i; i < count; i++) {\\n            uint256 itemId = s.nftItems[_tokenContract][_tokenId][i];\\n            uint256 bal = s.nftItemBalances[_tokenContract][_tokenId][itemId];\\n            itemBalancesOfTokenWithTypes_[i].itemId = itemId;\\n            itemBalancesOfTokenWithTypes_[i].balance = bal;\\n            itemBalancesOfTokenWithTypes_[i].itemType = s.itemTypes[itemId];\\n        }\\n    }\\n\\n    function addToParent(\\n        address _toContract,\\n        uint256 _toTokenId,\\n        uint256 _id,\\n        uint256 _value\\n    ) internal {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        s.nftItemBalances[_toContract][_toTokenId][_id] += _value;\\n        if (s.nftItemIndexes[_toContract][_toTokenId][_id] == 0) {\\n            s.nftItems[_toContract][_toTokenId].push(uint16(_id));\\n            s.nftItemIndexes[_toContract][_toTokenId][_id] = s.nftItems[_toContract][_toTokenId].length;\\n        }\\n    }\\n\\n    function addToOwner(\\n        address _to,\\n        uint256 _id,\\n        uint256 _value\\n    ) internal {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        s.ownerItemBalances[_to][_id] += _value;\\n        if (s.ownerItemIndexes[_to][_id] == 0) {\\n            s.ownerItems[_to].push(uint16(_id));\\n            s.ownerItemIndexes[_to][_id] = s.ownerItems[_to].length;\\n        }\\n    }\\n\\n    function removeFromOwner(\\n        address _from,\\n        uint256 _id,\\n        uint256 _value\\n    ) internal {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        uint256 bal = s.ownerItemBalances[_from][_id];\\n        require(_value <= bal, \\\"LibItems: Doesn't have that many to transfer\\\");\\n        bal -= _value;\\n        s.ownerItemBalances[_from][_id] = bal;\\n        if (bal == 0) {\\n            uint256 index = s.ownerItemIndexes[_from][_id] - 1;\\n            uint256 lastIndex = s.ownerItems[_from].length - 1;\\n            if (index != lastIndex) {\\n                uint256 lastId = s.ownerItems[_from][lastIndex];\\n                s.ownerItems[_from][index] = uint16(lastId);\\n                s.ownerItemIndexes[_from][lastId] = index + 1;\\n            }\\n            s.ownerItems[_from].pop();\\n            delete s.ownerItemIndexes[_from][_id];\\n        }\\n    }\\n\\n    function removeFromParent(\\n        address _fromContract,\\n        uint256 _fromTokenId,\\n        uint256 _id,\\n        uint256 _value\\n    ) internal {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        uint256 bal = s.nftItemBalances[_fromContract][_fromTokenId][_id];\\n        require(_value <= bal, \\\"Items: Doesn't have that many to transfer\\\");\\n        bal -= _value;\\n        s.nftItemBalances[_fromContract][_fromTokenId][_id] = bal;\\n        if (bal == 0) {\\n            uint256 index = s.nftItemIndexes[_fromContract][_fromTokenId][_id] - 1;\\n            uint256 lastIndex = s.nftItems[_fromContract][_fromTokenId].length - 1;\\n            if (index != lastIndex) {\\n                uint256 lastId = s.nftItems[_fromContract][_fromTokenId][lastIndex];\\n                s.nftItems[_fromContract][_fromTokenId][index] = uint16(lastId);\\n                s.nftItemIndexes[_fromContract][_fromTokenId][lastId] = index + 1;\\n            }\\n            s.nftItems[_fromContract][_fromTokenId].pop();\\n            delete s.nftItemIndexes[_fromContract][_fromTokenId][_id];\\n            if (_fromContract == address(this)) {\\n                checkWearableIsEquipped(_fromTokenId, _id);\\n            }\\n        }\\n        if (_fromContract == address(this) && bal == 1) {\\n            Aavegotchi storage aavegotchi = s.aavegotchis[_fromTokenId];\\n            if (\\n                aavegotchi.equippedWearables[LibItems.WEARABLE_SLOT_HAND_LEFT] == _id &&\\n                aavegotchi.equippedWearables[LibItems.WEARABLE_SLOT_HAND_RIGHT] == _id\\n            ) {\\n                revert(\\\"LibItems: Can't hold 1 item in both hands\\\");\\n            }\\n        }\\n    }\\n\\n    function checkWearableIsEquipped(uint256 _fromTokenId, uint256 _id) internal view {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        for (uint256 i; i < EQUIPPED_WEARABLE_SLOTS; i++) {\\n            require(s.aavegotchis[_fromTokenId].equippedWearables[i] != _id, \\\"Items: Cannot transfer wearable that is equipped\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/V2/CareCentreV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.1;\\n\\nimport { IAavegotchiFacet } from \\\"../Aavegotchi/interfaces/IAavegotchiFacet.sol\\\";\\nimport { IAavegotchiGameFacet } from \\\"../Aavegotchi/interfaces/IAavegotchiGameFacet.sol\\\";\\nimport { IOperator } from \\\"./interfaces/IOperator.sol\\\";\\nimport { ITreasury } from \\\"./interfaces/ITreasury.sol\\\";\\nimport { EnumerableSet } from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract CareCentreV2 is Ownable {\\n  using SafeMath for uint256;\\n  using EnumerableSet for EnumerableSet.AddressSet;\\n\\n  IAavegotchiFacet public immutable gotchiFacet;\\n  IAavegotchiGameFacet public immutable gameFacet;\\n  IOperator public operator;\\n  ITreasury public treasury;\\n\\n  mapping(address => uint256) public caringOwnerPetCount;\\n  uint256[] public rateOfTier;\\n  uint256[] public petCountOfTier;\\n\\n  EnumerableSet.AddressSet internal executors;\\n  EnumerableSet.AddressSet internal caringOwners;\\n\\n  event StartCare(address indexed owner);\\n  event StopCare(address indexed owner);\\n  event LogPet(address indexed owner, uint256 gotchis, uint256 pets);\\n\\n  constructor(\\n    address _gotchiDiamond,\\n    address _operator,\\n    address _treasury,\\n    address _executor\\n  ) {\\n    gotchiFacet = IAavegotchiFacet(_gotchiDiamond);\\n    gameFacet = IAavegotchiGameFacet(_gotchiDiamond);\\n    operator = IOperator(_operator);\\n    treasury = ITreasury(_treasury);\\n    executors.add(_executor);\\n  }\\n\\n  function startCare() external {\\n    require(\\n      !caringOwners.contains(msg.sender),\\n      \\\"CareCentreV2: startCare: Owner already started\\\"\\n    );\\n\\n    caringOwners.add(msg.sender);\\n\\n    emit StartCare(msg.sender);\\n  }\\n\\n  function stopCare() external {\\n    require(\\n      caringOwners.contains(msg.sender),\\n      \\\"CareCentreV2: stopCare: Owner did not start\\\"\\n    );\\n\\n    delete caringOwnerPetCount[msg.sender];\\n    caringOwners.remove(msg.sender);\\n\\n    emit StopCare(msg.sender);\\n  }\\n\\n  function exec(\\n    address caringOwner,\\n    uint256[] calldata gotchiIds,\\n    bool isFrenExec\\n  ) external {\\n    require(\\n      executors.contains(msg.sender),\\n      \\\"CareCentreV2: exec: Sender is not executor\\\"\\n    );\\n\\n    if (isFrenExec) {\\n      _frenExec(caringOwner, gotchiIds);\\n    } else {\\n      _exec(caringOwner, gotchiIds);\\n    }\\n  }\\n\\n  function _exec(address caringOwner, uint256[] calldata gotchiIds) internal {\\n    uint256 petCount = caringOwnerPetCount[caringOwner];\\n\\n    uint256 rate = calculateRate(petCount);\\n\\n    treasury.payWages(caringOwner, rate);\\n\\n    operator.pet(gotchiIds);\\n\\n    caringOwnerPetCount[caringOwner] = petCount + 1;\\n\\n    uint256 length = gotchiIds.length;\\n\\n    LogPet(caringOwner, length, petCount + 1);\\n  }\\n\\n  function _frenExec(address caringOwner, uint256[] calldata gotchiIds)\\n    internal\\n  {\\n    uint256 petCount = caringOwnerPetCount[caringOwner];\\n\\n    operator.pet(gotchiIds);\\n\\n    uint256 length = gotchiIds.length;\\n\\n    LogPet(caringOwner, length, petCount);\\n  }\\n\\n  function calculateRate(uint256 _petCount) public view returns (uint256) {\\n    for (uint256 x; x < petCountOfTier.length; x++) {\\n      if (_petCount <= petCountOfTier[x]) return rateOfTier[x];\\n    }\\n    return rateOfTier[rateOfTier.length - 1];\\n  }\\n\\n  function rateOfOwner(address _caringOwner) public view returns (uint256) {\\n    uint256 petCount = caringOwnerPetCount[_caringOwner];\\n\\n    for (uint256 x; x < petCountOfTier.length; x++) {\\n      if (petCount <= petCountOfTier[x]) return rateOfTier[x];\\n    }\\n    return rateOfTier[rateOfTier.length - 1];\\n  }\\n\\n  function setRates(\\n    uint256[] memory _newTierRates,\\n    uint256[] memory _newPetCountOfTier\\n  ) external onlyOwner {\\n    require(\\n      _newTierRates.length == _newPetCountOfTier.length + 1,\\n      \\\"Treasury: setRates: Length error\\\"\\n    );\\n    rateOfTier = _newTierRates;\\n    petCountOfTier = _newPetCountOfTier;\\n  }\\n\\n  function addExecutor(address executor) external onlyOwner {\\n    require(\\n      !executors.contains(executor),\\n      \\\"CareCentreV2: addExecutor: Executor already exists\\\"\\n    );\\n\\n    executors.add(executor);\\n  }\\n\\n  function removeExecutor(address executor) external onlyOwner {\\n    require(\\n      executors.contains(executor),\\n      \\\"CareCentreV2: addExecutor: Executor does not exists\\\"\\n    );\\n\\n    executors.remove(executor);\\n  }\\n\\n  function getCaringOwners()\\n    external\\n    view\\n    returns (address[] memory _caringOwners)\\n  {\\n    uint256 length = caringOwners.length();\\n    _caringOwners = new address[](length);\\n    for (uint256 i = 0; i < length; i++) _caringOwners[i] = caringOwners.at(i);\\n  }\\n\\n  function getExecutors() external view returns (address[] memory _executors) {\\n    uint256 length = executors.length();\\n    _executors = new address[](length);\\n    for (uint256 i = 0; i < length; i++) _executors[i] = executors.at(i);\\n  }\\n\\n  function startCareFor(address caringOwner) external onlyOwner {\\n    caringOwners.add(caringOwner);\\n\\n    emit StartCare(caringOwner);\\n  }\\n\\n  function stopCareFor(address caringOwner) external onlyOwner {\\n    caringOwners.remove(caringOwner);\\n\\n    emit StopCare(caringOwner);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/V2/interfaces/IOperator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.1;\\n\\ninterface IOperator {\\n  function pet(uint256[] calldata gotchiIds) external;\\n}\\n\"\r\n    },\r\n    \"contracts/V2/interfaces/ITreasury.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.1;\\n\\ninterface ITreasury {\\n  function payWages(address caringOwner, uint256 rate) external;\\n\\n  function userBalance(address user) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/shared/interfaces/IDiamondCut.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {Add, Replace, Remove}\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\"\r\n    },\r\n    \"contracts/shared/interfaces/IDiamondLoupe.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\n\\n// A loupe is a small magnifying glass used to look at diamonds.\\n// These functions look at diamonds\\ninterface IDiamondLoupe {\\n    /// These functions are expected to be called frequently\\n    /// by tools.\\n\\n    struct Facet {\\n        address facetAddress;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Gets all facet addresses and their four byte function selectors.\\n    /// @return facets_ Facet\\n    function facets() external view returns (Facet[] memory facets_);\\n\\n    /// @notice Gets all the function selectors supported by a specific facet.\\n    /// @param _facet The facet address.\\n    /// @return facetFunctionSelectors_\\n    function facetFunctionSelectors(address _facet) external view returns (bytes4[] memory facetFunctionSelectors_);\\n\\n    /// @notice Get all the facet addresses used by a diamond.\\n    /// @return facetAddresses_\\n    function facetAddresses() external view returns (address[] memory facetAddresses_);\\n\\n    /// @notice Gets the facet that supports the given selector.\\n    /// @dev If facet is not found return address(0).\\n    /// @param _functionSelector The function selector.\\n    /// @return facetAddress_ The facet address.\\n    function facetAddress(bytes4 _functionSelector) external view returns (address facetAddress_);\\n}\\n\"\r\n    },\r\n    \"contracts/shared/interfaces/IERC1155TokenReceiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\n\\n/**\\n    Note: The ERC-165 identifier for this interface is 0x4e2312e0.\\n*/\\ninterface IERC1155TokenReceiver {\\n    /**\\n    @notice Handle the receipt of a single ERC1155 token type.\\n    @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeTransferFrom` after the balance has been updated.        \\n    This function MUST return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` (i.e. 0xf23a6e61) if it accepts the transfer.\\n    This function MUST revert if it rejects the transfer.\\n    Return of any other value than the prescribed keccak256 generated value MUST result in the transaction being reverted by the caller.\\n    @param _operator  The address which initiated the transfer (i.e. msg.sender)\\n    @param _from      The address which previously owned the token\\n    @param _id        The ID of the token being transferred\\n    @param _value     The amount of tokens being transferred\\n    @param _data      Additional data with no specified format\\n    @return           `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n    */\\n    function onERC1155Received(\\n        address _operator,\\n        address _from,\\n        uint256 _id,\\n        uint256 _value,\\n        bytes calldata _data\\n    ) external returns (bytes4);\\n\\n    /**\\n    @notice Handle the receipt of multiple ERC1155 token types.\\n    @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeBatchTransferFrom` after the balances have been updated.        \\n    This function MUST return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` (i.e. 0xbc197c81) if it accepts the transfer(s).\\n    This function MUST revert if it rejects the transfer(s).\\n    Return of any other value than the prescribed keccak256 generated value MUST result in the transaction being reverted by the caller.\\n    @param _operator  The address which initiated the batch transfer (i.e. msg.sender)\\n    @param _from      The address which previously owned the token\\n    @param _ids       An array containing ids of each token being transferred (order and length must match _values array)\\n    @param _values    An array containing amounts of each token being transferred (order and length must match _ids array)\\n    @param _data      Additional data with no specified format\\n    @return           `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n    */\\n    function onERC1155BatchReceived(\\n        address _operator,\\n        address _from,\\n        uint256[] calldata _ids,\\n        uint256[] calldata _values,\\n        bytes calldata _data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"contracts/shared/interfaces/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\n\\ninterface IERC165 {\\n    /// @notice Query if a contract implements an interface\\n    /// @param interfaceId The interface identifier, as specified in ERC-165\\n    /// @dev Interface identification is specified in ERC-165. This function\\n    ///  uses less than 30,000 gas.\\n    /// @return `true` if the contract implements `interfaceID` and\\n    ///  `interfaceID` is not 0xffffffff, `false` otherwise\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/shared/interfaces/IERC173.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\n\\n/// @title ERC-173 Contract Ownership Standard\\n///  Note: the ERC-165 identifier for this interface is 0x7f5828d0\\n/* is ERC165 */\\ninterface IERC173 {\\n    /// @notice Get the address of the owner\\n    /// @return owner_ The address of the owner.\\n    function owner() external view returns (address owner_);\\n\\n    /// @notice Set the address of the new owner of the contract\\n    /// @dev Set _newOwner to address(0) to renounce any ownership.\\n    /// @param _newOwner The address of the new owner of the contract\\n    function transferOwnership(address _newOwner) external;\\n}\\n\"\r\n    },\r\n    \"contracts/shared/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\n\\ninterface IERC20 {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address _owner) external view returns (uint256 balance);\\n\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) external returns (bool success);\\n\\n    function transfer(address _to, uint256 _value) external returns (bool success);\\n\\n    function approve(address _spender, uint256 _value) external returns (bool success);\\n\\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\\n}\\n\"\r\n    },\r\n    \"contracts/shared/interfaces/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\n\\n/// @title ERC-721 Non-Fungible Token Standard\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n///  Note: the ERC-165 identifier for this interface is 0x80ac58cd.\\n/* is ERC165 */\\ninterface IERC721 {\\n    /// @notice Count all NFTs assigned to an owner\\n    /// @dev NFTs assigned to the zero address are considered invalid, and this\\n    ///  function throws for queries about the zero address.\\n    /// @param _owner An address for whom to query the balance\\n    /// @return The number of NFTs owned by `_owner`, possibly zero\\n    function balanceOf(address _owner) external view returns (uint256);\\n\\n    /// @notice Find the owner of an NFT\\n    /// @dev NFTs assigned to zero address are considered invalid, and queries\\n    ///  about them do throw.\\n    /// @param _tokenId The identifier for an NFT\\n    /// @return The address of the owner of the NFT\\n    function ownerOf(uint256 _tokenId) external view returns (address);\\n\\n    /// @notice Transfers the ownership of an NFT from one address to another address\\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\\n    ///  operator, or the approved address for this NFT. Throws if `_from` is\\n    ///  not the current owner. Throws if `_to` is the zero address. Throws if\\n    ///  `_tokenId` is not a valid NFT. When transfer is complete, this function\\n    ///  checks if `_to` is a smart contract (code size > 0). If so, it calls\\n    ///  `onERC721Received` on `_to` and throws if the return value is not\\n    ///  `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`.\\n    /// @param _from The current owner of the NFT\\n    /// @param _to The new owner\\n    /// @param _tokenId The NFT to transfer\\n    /// @param data Additional data with no specified format, sent in call to `_to`\\n    function safeTransferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @notice Transfers the ownership of an NFT from one address to another address\\n    /// @dev This works identically to the other function with an extra data parameter,\\n    ///  except this function just sets data to \\\"\\\".\\n    /// @param _from The current owner of the NFT\\n    /// @param _to The new owner\\n    /// @param _tokenId The NFT to transfer\\n    function safeTransferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _tokenId\\n    ) external;\\n\\n    /// @notice Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE\\n    ///  TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE\\n    ///  THEY MAY BE PERMANENTLY LOST\\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\\n    ///  operator, or the approved address for this NFT. Throws if `_from` is\\n    ///  not the current owner. Throws if `_to` is the zero address. Throws if\\n    ///  `_tokenId` is not a valid NFT.\\n    /// @param _from The current owner of the NFT\\n    /// @param _to The new owner\\n    /// @param _tokenId The NFT to transfer\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _tokenId\\n    ) external;\\n\\n    /// @notice Change or reaffirm the approved address for an NFT\\n    /// @dev The zero address indicates there is no approved address.\\n    ///  Throws unless `msg.sender` is the current NFT owner, or an authorized\\n    ///  operator of the current owner.\\n    /// @param _approved The new approved NFT controller\\n    /// @param _tokenId The NFT to approve\\n    function approve(address _approved, uint256 _tokenId) external;\\n\\n    /// @notice Enable or disable approval for a third party (\\\"operator\\\") to manage\\n    ///  all of `msg.sender`'s assets\\n    /// @dev Emits the ApprovalForAll event. The contract MUST allow\\n    ///  multiple operators per owner.\\n    /// @param _operator Address to add to the set of authorized operators\\n    /// @param _approved True if the operator is approved, false to revoke approval\\n    function setApprovalForAll(address _operator, bool _approved) external;\\n\\n    /// @notice Get the approved address for a single NFT\\n    /// @dev Throws if `_tokenId` is not a valid NFT.\\n    /// @param _tokenId The NFT to find the approved address for\\n    /// @return The approved address for this NFT, or the zero address if there is none\\n    function getApproved(uint256 _tokenId) external view returns (address);\\n\\n    /// @notice Query if an address is an authorized operator for another address\\n    /// @param _owner The address that owns the NFTs\\n    /// @param _operator The address that acts on behalf of the owner\\n    /// @return True if `_operator` is an approved operator for `_owner`, false otherwise\\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/shared/interfaces/IERC721TokenReceiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\n\\n/// @dev Note: the ERC-165 identifier for this interface is 0x150b7a02.\\ninterface IERC721TokenReceiver {\\n    /// @notice Handle the receipt of an NFT\\n    /// @dev The ERC721 smart contract calls this function on the recipient\\n    ///  after a `transfer`. This function MAY throw to revert and reject the\\n    ///  transfer. Return of other than the magic value MUST result in the\\n    ///  transaction being reverted.\\n    ///  Note: the contract address is always the message sender.\\n    /// @param _operator The address which called `safeTransferFrom` function\\n    /// @param _from The address which previously owned the token\\n    /// @param _tokenId The NFT identifier which is being transferred\\n    /// @param _data Additional data with no specified format\\n    /// @return `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`\\n    ///  unless throwing\\n    function onERC721Received(\\n        address _operator,\\n        address _from,\\n        uint256 _tokenId,\\n        bytes calldata _data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"contracts/shared/libraries/LibDiamond.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\nimport {IDiamondCut} from \\\"../interfaces/IDiamondCut.sol\\\";\\nimport {IDiamondLoupe} from \\\"../interfaces/IDiamondLoupe.sol\\\";\\nimport {IERC165} from \\\"../interfaces/IERC165.sol\\\";\\nimport {IERC173} from \\\"../interfaces/IERC173.sol\\\";\\nimport {LibMeta} from \\\"./LibMeta.sol\\\";\\n\\nlibrary LibDiamond {\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint16 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint16 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(LibMeta.msgSender() == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\n    }\\n\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    function addDiamondFunctions(\\n        address _diamondCutFacet,\\n        address _diamondLoupeFacet,\\n        address _ownershipFacet\\n    ) internal {\\n        IDiamondCut.FacetCut[] memory cut = new IDiamondCut.FacetCut[](3);\\n        bytes4[] memory functionSelectors = new bytes4[](1);\\n        functionSelectors[0] = IDiamondCut.diamondCut.selector;\\n        cut[0] = IDiamondCut.FacetCut({facetAddress: _diamondCutFacet, action: IDiamondCut.FacetCutAction.Add, functionSelectors: functionSelectors});\\n        functionSelectors = new bytes4[](5);\\n        functionSelectors[0] = IDiamondLoupe.facets.selector;\\n        functionSelectors[1] = IDiamondLoupe.facetFunctionSelectors.selector;\\n        functionSelectors[2] = IDiamondLoupe.facetAddresses.selector;\\n        functionSelectors[3] = IDiamondLoupe.facetAddress.selector;\\n        functionSelectors[4] = IERC165.supportsInterface.selector;\\n        cut[1] = IDiamondCut.FacetCut({\\n            facetAddress: _diamondLoupeFacet,\\n            action: IDiamondCut.FacetCutAction.Add,\\n            functionSelectors: functionSelectors\\n        });\\n        functionSelectors = new bytes4[](2);\\n        functionSelectors[0] = IERC173.transferOwnership.selector;\\n        functionSelectors[1] = IERC173.owner.selector;\\n        cut[2] = IDiamondCut.FacetCut({facetAddress: _ownershipFacet, action: IDiamondCut.FacetCutAction.Add, functionSelectors: functionSelectors});\\n        diamondCut(cut, address(0), \\\"\\\");\\n    }\\n\\n    // Internal function version of diamondCut\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else {\\n                revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n            }\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        // uint16 selectorCount = uint16(diamondStorage().selectors.length);\\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint16 selectorPosition = uint16(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            enforceHasContractCode(_facetAddress, \\\"LibDiamondCut: New facet has no code\\\");\\n            ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = uint16(ds.facetAddresses.length);\\n            ds.facetAddresses.push(_facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(selector);\\n            ds.selectorToFacetAndPosition[selector].facetAddress = _facetAddress;\\n            ds.selectorToFacetAndPosition[selector].functionSelectorPosition = selectorPosition;\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint16 selectorPosition = uint16(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            enforceHasContractCode(_facetAddress, \\\"LibDiamondCut: New facet has no code\\\");\\n            ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = uint16(ds.facetAddresses.length);\\n            ds.facetAddresses.push(_facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress != _facetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\n            removeFunction(oldFacetAddress, selector);\\n            // add function\\n            ds.selectorToFacetAndPosition[selector].functionSelectorPosition = selectorPosition;\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(selector);\\n            ds.selectorToFacetAndPosition[selector].facetAddress = _facetAddress;\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        // if function does not exist then do nothing and return\\n        require(_facetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            removeFunction(oldFacetAddress, selector);\\n        }\\n    }\\n\\n    function removeFunction(address _facetAddress, bytes4 _selector) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\n        // an immutable function is a function defined directly in a diamond\\n        require(_facetAddress != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint16(selectorPosition);\\n        }\\n        // delete the last selector\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n        delete ds.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = uint16(facetAddressPosition);\\n            }\\n            ds.facetAddresses.pop();\\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n        }\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            require(_calldata.length == 0, \\\"LibDiamondCut: _init is address(0) but_calldata is not empty\\\");\\n        } else {\\n            require(_calldata.length > 0, \\\"LibDiamondCut: _calldata is empty but _init is not address(0)\\\");\\n            if (_init != address(this)) {\\n                enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");\\n            }\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (success == false) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    revert(string(error));\\n                } else {\\n                    revert(\\\"LibDiamondCut: _init function reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize != 0, _errorMessage);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/shared/libraries/LibERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\n\\nimport {IERC1155TokenReceiver} from \\\"../interfaces/IERC1155TokenReceiver.sol\\\";\\n\\nlibrary LibERC1155 {\\n    bytes4 internal constant ERC1155_ACCEPTED = 0xf23a6e61; // Return value from `onERC1155Received` call if a contract accepts receipt (i.e `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`).\\n    bytes4 internal constant ERC1155_BATCH_ACCEPTED = 0xbc197c81; // Return value from `onERC1155BatchReceived` call if a contract accepts receipt (i.e `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`).\\n    event TransferToParent(address indexed _toContract, uint256 indexed _toTokenId, uint256 indexed _tokenTypeId, uint256 _value);\\n    event TransferFromParent(address indexed _fromContract, uint256 indexed _fromTokenId, uint256 indexed _tokenTypeId, uint256 _value);\\n    /**\\n        @dev Either `TransferSingle` or `TransferBatch` MUST emit when tokens are transferred, including zero value transfers as well as minting or burning (see \\\"Safe Transfer Rules\\\" section of the standard).\\n        The `_operator` argument MUST be the address of an account/contract that is approved to make the transfer (SHOULD be LibMeta.msgSender()).\\n        The `_from` argument MUST be the address of the holder whose balance is decreased.\\n        The `_to` argument MUST be the address of the recipient whose balance is increased.\\n        The `_id` argument MUST be the token type being transferred.\\n        The `_value` argument MUST be the number of tokens the holder balance is decreased by and match what the recipient balance is increased by.\\n        When minting/creating tokens, the `_from` argument MUST be set to `0x0` (i.e. zero address).\\n        When burning/destroying tokens, the `_to` argument MUST be set to `0x0` (i.e. zero address).        \\n    */\\n    event TransferSingle(address indexed _operator, address indexed _from, address indexed _to, uint256 _id, uint256 _value);\\n\\n    /**\\n        @dev Either `TransferSingle` or `TransferBatch` MUST emit when tokens are transferred, including zero value transfers as well as minting or burning (see \\\"Safe Transfer Rules\\\" section of the standard).      \\n        The `_operator` argument MUST be the address of an account/contract that is approved to make the transfer (SHOULD be LibMeta.msgSender()).\\n        The `_from` argument MUST be the address of the holder whose balance is decreased.\\n        The `_to` argument MUST be the address of the recipient whose balance is increased.\\n        The `_ids` argument MUST be the list of tokens being transferred.\\n        The `_values` argument MUST be the list of number of tokens (matching the list and order of tokens specified in _ids) the holder balance is decreased by and match what the recipient balance is increased by.\\n        When minting/creating tokens, the `_from` argument MUST be set to `0x0` (i.e. zero address).\\n        When burning/destroying tokens, the `_to` argument MUST be set to `0x0` (i.e. zero address).                \\n    */\\n    event TransferBatch(address indexed _operator, address indexed _from, address indexed _to, uint256[] _ids, uint256[] _values);\\n\\n    /**\\n        @dev MUST emit when approval for a second party/operator address to manage all tokens for an owner address is enabled or disabled (absence of an event assumes disabled).        \\n    */\\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\\n\\n    /**\\n        @dev MUST emit when the URI is updated for a token ID.\\n        URIs are defined in RFC 3986.\\n        The URI MUST point to a JSON file that conforms to the \\\"ERC-1155 Metadata URI JSON Schema\\\".\\n    */\\n    event URI(string _value, uint256 indexed _id);\\n\\n    function onERC1155Received(\\n        address _operator,\\n        address _from,\\n        address _to,\\n        uint256 _id,\\n        uint256 _value,\\n        bytes memory _data\\n    ) internal {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(_to)\\n        }\\n        if (size > 0) {\\n            require(\\n                ERC1155_ACCEPTED == IERC1155TokenReceiver(_to).onERC1155Received(_operator, _from, _id, _value, _data),\\n                \\\"Wearables: Transfer rejected/failed by _to\\\"\\n            );\\n        }\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address _operator,\\n        address _from,\\n        address _to,\\n        uint256[] calldata _ids,\\n        uint256[] calldata _values,\\n        bytes memory _data\\n    ) internal {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(_to)\\n        }\\n        if (size > 0) {\\n            require(\\n                ERC1155_BATCH_ACCEPTED == IERC1155TokenReceiver(_to).onERC1155BatchReceived(_operator, _from, _ids, _values, _data),\\n                \\\"Wearables: Transfer rejected/failed by _to\\\"\\n            );\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/shared/libraries/LibERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge\\n*\\n/******************************************************************************/\\n\\nimport {IERC20} from \\\"../interfaces/IERC20.sol\\\";\\n\\nlibrary LibERC20 {\\n    function transferFrom(\\n        address _token,\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) internal {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(_token)\\n        }\\n        require(size > 0, \\\"LibERC20: ERC20 token address has no code\\\");\\n        (bool success, bytes memory result) = _token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, _from, _to, _value));\\n        handleReturn(success, result);\\n    }\\n\\n    function transfer(\\n        address _token,\\n        address _to,\\n        uint256 _value\\n    ) internal {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(_token)\\n        }\\n        require(size > 0, \\\"LibERC20: ERC20 token address has no code\\\");\\n        (bool success, bytes memory result) = _token.call(abi.encodeWithSelector(IERC20.transfer.selector, _to, _value));\\n        handleReturn(success, result);\\n    }\\n\\n    function handleReturn(bool _success, bytes memory _result) internal pure {\\n        if (_success) {\\n            if (_result.length > 0) {\\n                require(abi.decode(_result, (bool)), \\\"LibERC20: transfer or transferFrom returned false\\\");\\n            }\\n        } else {\\n            if (_result.length > 0) {\\n                // bubble up any reason for revert\\n                revert(string(_result));\\n            } else {\\n                revert(\\\"LibERC20: transfer or transferFrom reverted\\\");\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/shared/libraries/LibERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\n\\nimport \\\"../interfaces/IERC721TokenReceiver.sol\\\";\\n\\nlibrary LibERC721 {\\n    /// @dev This emits when ownership of any NFT changes by any mechanism.\\n    ///  This event emits when NFTs are created (`from` == 0) and destroyed\\n    ///  (`to` == 0). Exception: during contract creation, any number of NFTs\\n    ///  may be created and assigned without emitting Transfer. At the time of\\n    ///  any transfer, the approved address for that NFT (if any) is reset to none.\\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\\n\\n    /// @dev This emits when the approved address for an NFT is changed or\\n    ///  reaffirmed. The zero address indicates there is no approved address.\\n    ///  When a Transfer event emits, this also indicates that the approved\\n    ///  address for that NFT (if any) is reset to none.\\n    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\\n\\n    /// @dev This emits when an operator is enabled or disabled for an owner.\\n    ///  The operator can manage all NFTs of the owner.\\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\\n\\n    bytes4 internal constant ERC721_RECEIVED = 0x150b7a02;\\n\\n    function checkOnERC721Received(\\n        address _operator,\\n        address _from,\\n        address _to,\\n        uint256 _tokenId,\\n        bytes memory _data\\n    ) internal {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(_to)\\n        }\\n        if (size > 0) {\\n            require(\\n                ERC721_RECEIVED == IERC721TokenReceiver(_to).onERC721Received(_operator, _from, _tokenId, _data),\\n                \\\"AavegotchiFacet: Transfer rejected/failed by _to\\\"\\n            );\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/shared/libraries/LibMeta.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\n\\nlibrary LibMeta {\\n    bytes32 internal constant EIP712_DOMAIN_TYPEHASH =\\n        keccak256(bytes(\\\"EIP712Domain(string name,string version,uint256 salt,address verifyingContract)\\\"));\\n\\n    function domainSeparator(string memory name, string memory version) internal view returns (bytes32 domainSeparator_) {\\n        domainSeparator_ = keccak256(\\n            abi.encode(EIP712_DOMAIN_TYPEHASH, keccak256(bytes(name)), keccak256(bytes(version)), getChainID(), address(this))\\n        );\\n    }\\n\\n    function getChainID() internal view returns (uint256 id) {\\n        assembly {\\n            id := chainid()\\n        }\\n    }\\n\\n    function msgSender() internal view returns (address sender_) {\\n        if (msg.sender == address(this)) {\\n            bytes memory array = msg.data;\\n            uint256 index = msg.data.length;\\n            assembly {\\n                // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\\n                sender_ := and(mload(add(array, index)), 0xffffffffffffffffffffffffffffffffffffffff)\\n            }\\n        } else {\\n            sender_ = msg.sender;\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gotchiDiamond\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gotchis\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pets\",\"type\":\"uint256\"}],\"name\":\"LogPet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"StartCare\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"StopCare\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"addExecutor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_petCount\",\"type\":\"uint256\"}],\"name\":\"calculateRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"caringOwnerPetCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caringOwner\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"gotchiIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"isFrenExec\",\"type\":\"bool\"}],\"name\":\"exec\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gameFacet\",\"outputs\":[{\"internalType\":\"contract IAavegotchiGameFacet\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCaringOwners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_caringOwners\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExecutors\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_executors\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gotchiFacet\",\"outputs\":[{\"internalType\":\"contract IAavegotchiFacet\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"contract IOperator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"petCountOfTier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_caringOwner\",\"type\":\"address\"}],\"name\":\"rateOfOwner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rateOfTier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"removeExecutor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_newTierRates\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_newPetCountOfTier\",\"type\":\"uint256[]\"}],\"name\":\"setRates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startCare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caringOwner\",\"type\":\"address\"}],\"name\":\"startCareFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopCare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caringOwner\",\"type\":\"address\"}],\"name\":\"stopCareFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"contract ITreasury\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "CareCentreV2", "CompilerVersion": "v0.8.1+commit.df193b15", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000086935f11c86623dec8a25696e1c19a8659cbf95d0000000000000000000000009eb77149101851eeb78172581203dc635c587ba90000000000000000000000009bf2260fd030f578dacf03810e5b80583cb7c337000000000000000000000000527a819db1eb0e34426297b03bae11f2f8b3a19e", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": ""}