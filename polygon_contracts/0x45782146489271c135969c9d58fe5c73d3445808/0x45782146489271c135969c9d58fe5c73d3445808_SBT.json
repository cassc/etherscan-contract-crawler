{"SourceCode": "{\"AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"./Context.sol\\\";\\nimport \\\"./Strings.sol\\\";\\nimport \\\"./ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn\\u0027t allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role\\u0027s admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address =\\u003e bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 =\\u003e RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role\\u0027s admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``\\u0027s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``\\u0027s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function\\u0027s\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn\\u0027t perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``\\u0027s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"},\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"},\"ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"},\"IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``\\u0027s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role\\u0027s admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``\\u0027s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``\\u0027s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function\\u0027s\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"},\"IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"},\"Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a \\u003e b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a \\u003c b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a \\u0026 b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator \\u003e prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always \\u003e= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator \\u0026 (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel\\u0027s lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don\\u0027t need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up \\u0026\\u0026 mulmod(x, y, denominator) \\u003e 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.\\u0027s \\\"Hacker\\u0027s Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) \\u003c= a \\u003c 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) \\u003c= a \\u003c 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) \\u003c= sqrt(a) \\u003c sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) \\u003c= sqrt(a) \\u003c 2**((k+1)/2) \\u003c= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 \\u003c\\u003c (log2(a) \\u003e\\u003e 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton\\u0027s method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) \\u003e\\u003e 1;\\n            result = (result + a / result) \\u003e\\u003e 1;\\n            result = (result + a / result) \\u003e\\u003e 1;\\n            result = (result + a / result) \\u003e\\u003e 1;\\n            result = (result + a / result) \\u003e\\u003e 1;\\n            result = (result + a / result) \\u003e\\u003e 1;\\n            result = (result + a / result) \\u003e\\u003e 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up \\u0026\\u0026 result * result \\u003c a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value \\u003e\\u003e 128 \\u003e 0) {\\n                value \\u003e\\u003e= 128;\\n                result += 128;\\n            }\\n            if (value \\u003e\\u003e 64 \\u003e 0) {\\n                value \\u003e\\u003e= 64;\\n                result += 64;\\n            }\\n            if (value \\u003e\\u003e 32 \\u003e 0) {\\n                value \\u003e\\u003e= 32;\\n                result += 32;\\n            }\\n            if (value \\u003e\\u003e 16 \\u003e 0) {\\n                value \\u003e\\u003e= 16;\\n                result += 16;\\n            }\\n            if (value \\u003e\\u003e 8 \\u003e 0) {\\n                value \\u003e\\u003e= 8;\\n                result += 8;\\n            }\\n            if (value \\u003e\\u003e 4 \\u003e 0) {\\n                value \\u003e\\u003e= 4;\\n                result += 4;\\n            }\\n            if (value \\u003e\\u003e 2 \\u003e 0) {\\n                value \\u003e\\u003e= 2;\\n                result += 2;\\n            }\\n            if (value \\u003e\\u003e 1 \\u003e 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up \\u0026\\u0026 1 \\u003c\\u003c result \\u003c value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value \\u003e= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value \\u003e= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value \\u003e= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value \\u003e= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value \\u003e= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value \\u003e= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value \\u003e= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up \\u0026\\u0026 10**result \\u003c value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value \\u003e\\u003e 128 \\u003e 0) {\\n                value \\u003e\\u003e= 128;\\n                result += 16;\\n            }\\n            if (value \\u003e\\u003e 64 \\u003e 0) {\\n                value \\u003e\\u003e= 64;\\n                result += 8;\\n            }\\n            if (value \\u003e\\u003e 32 \\u003e 0) {\\n                value \\u003e\\u003e= 32;\\n                result += 4;\\n            }\\n            if (value \\u003e\\u003e 16 \\u003e 0) {\\n                value \\u003e\\u003e= 16;\\n                result += 2;\\n            }\\n            if (value \\u003e\\u003e 8 \\u003e 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up \\u0026\\u0026 1 \\u003c\\u003c (result * 8) \\u003c value ? 1 : 0);\\n        }\\n    }\\n}\\n\"},\"SBT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"./Strings.sol\\\";\\n\\n/// @title SBT token\\ncontract SBT is AccessControl {\\n    using Strings for uint256;\\n\\n    // @notice access control role for mint\\n    bytes32 public constant MINTER_ROLE = bytes32(uint256(keccak256(\\\"access.roles.minter\\\")) - 1);\\n    // @notice access control role for burn\\n    bytes32 public constant BURNER_ROLE = bytes32(uint256(keccak256(\\\"access.roles.burner\\\")) - 1);\\n    // @notice access control role for update, enable id range, set uri and etc\\n    bytes32 public constant OPERATOR_ROLE = bytes32(uint256(keccak256(\\\"access.roles.operator\\\")) - 1);\\n\\n    struct TokenData {\\n        uint256 amount; // token amounts\\n        uint256 weight; // weight for each token\\n        string metaData;\\n        bytes32[] params;\\n    }\\n\\n    /**\\n     * @dev Mapping from token ID to account balances\\n     * @dev tokenID =\\u003e user =\\u003e TokenData\\n     */\\n    mapping(uint256 =\\u003e mapping(address =\\u003e TokenData)) internal _balances;\\n\\n    /**\\n     * @dev Mapping for mint confirmation by user\\n     * @dev tokenID =\\u003e user =\\u003e amounts\\n     */\\n    mapping(uint256 =\\u003e mapping(address =\\u003e uint256)) internal _pendingBalances;\\n\\n    /**\\n     * @dev Mapping for store accept token list of user\\n     * User =\\u003e accept token id list\\n     */\\n    mapping(address =\\u003e uint256[]) public userTokens;\\n\\n    // @dev Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string internal _uri;\\n\\n    // @dev Next token ID for minting\\n    uint256 public nextID;\\n\\n    // @dev list of allowed token ID for mint\\n    mapping(uint256 =\\u003e bool) public mintAllowed;\\n\\n    // @dev mapping of minted total supply for token ID\\n    mapping(uint256 =\\u003e uint256) internal _totalSupply;\\n\\n    // @dev Array with all token ids\\n    uint256[] internal _ids;\\n\\n    // @dev Mapping for checking if the token exists\\n    mapping(uint256 =\\u003e bool) public idIsExist;\\n\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are minted from `from` to `to` by `minter`.\\n     */\\n    event TransferSingleStarted(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    // @param uri_ URI string\\n    constructor(string memory uri_) {\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _uri = uri_;\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     * @param newuri URI string\\n     */\\n    function setURI(string memory newuri) external onlyRole(OPERATOR_ROLE) {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @notice Getter for URI\\n     * @return URI string\\n     */\\n    function getURI() external view returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @notice This implementation returns the same URI for *all* token ids. It relies\\n     * on the token ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     * @param id_ token ID\\n     * @return URI string\\n     */\\n    function uri(uint256 id_) public view returns (string memory) {\\n        require(idIsExist[id_], \\\"SBT: id is not exist\\\");\\n        return string.concat(_uri, id_.toString());\\n    }\\n\\n    /**\\n     * @notice Return user balance\\n     * @param account User address\\n     * @param id Token ID\\n     * @return balance of account for token ID\\n     */\\n    function balanceOf(address account, uint256 id) public view returns (uint256) {\\n        uint256 amount = _balances[id][account].amount;\\n        uint256 weight = _balances[id][account].weight;\\n\\n        return amount * weight;\\n    }\\n\\n    /**\\n     * @notice Return balance of batch for accounts and token IDs\\n     * @dev accounts length should not be zero, accounts and ids must have the same length.\\n     * @param accounts User addresses\\n     * @param ids Token IDs\\n     * @return batch balances\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory) {\\n        uint length = accounts.length;\\n        require(length \\u003e 0, \\\"SBT: accounts length should not be zero\\\");\\n        require(length == ids.length, \\\"SBT: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](length);\\n\\n        for (uint256 i = 0; i \\u003c length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @notice Enable minting for next token ID\\n     * @dev Available only for users with Operator access role\\n     */\\n    function enableNextIDMinting() external onlyRole(OPERATOR_ROLE) {\\n        mintAllowed[nextID] = true;\\n        idIsExist[nextID] = true;\\n        _ids.push(nextID);\\n\\n        nextID += 1;\\n    }\\n\\n    /**\\n     * @notice Change minting state for exist token ID\\n     * @dev Available only for users with Operator access role\\n     * @param id_ Token ID\\n     * @param isAllowed Minting state\\n     */\\n    function changeMintingState(uint id_, bool isAllowed) external onlyRole(OPERATOR_ROLE) {\\n        require(idIsExist[id_], \\\"SBT: id is not exist\\\");\\n\\n        mintAllowed[id_] = isAllowed;\\n    }\\n\\n    /**\\n     * @notice Creates `amount` tokens of token type `id`, and starts transfer them to `to`.\\n     * @dev Available only for users with Minter access role\\n     * @param to User address\\n     * @param id Token ID\\n     * @param data Token data\\n     * @return True is success\\n     */\\n    function mint(address to, uint256 id, TokenData calldata data) external onlyRole(MINTER_ROLE) returns (bool) {\\n        _mint(to, id, data);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Batch version of mint\\n     * @dev Available only for users with Minter access role, to.length should be more than 0,\\n     * to.length, ids.length and data length should be match\\n     * @param to User addresses\\n     * @param ids Token IDs\\n     * @param data Token data for each ID\\n     * @return True is success\\n     */\\n    function mintBatch(address[] calldata to, uint256[] calldata ids, TokenData[] calldata data) external onlyRole(MINTER_ROLE) returns (bool) {\\n        uint length = to.length;\\n        require(length \\u003e 0, \\\"SBT: to length should not be zero\\\");\\n        require(length == ids.length, \\\"SBT: to and ids length mismatch\\\");\\n        require(length == data.length, \\\"SBT: to and data length mismatch\\\");\\n\\n        for(uint256 i = 0; i \\u003c length; i++) {\\n            _mint(to[i], ids[i], data[i]);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and starts transfer to `to`.\\n     * to address should be not zero, data.amount and data weight should be more than null,\\n     * mint is allowed only once for pair token ID - user. Emits a {TransferSingleStarted} event.\\n     * @param to User address\\n     * @param id Token ID\\n     * @param data Token data\\n     */\\n    function _mint(address to, uint256 id, TokenData memory data) internal {\\n        require(mintAllowed[id], \\\"SBT: mint is not allowed\\\");\\n        require(to != address(0), \\\"SBT: mint to the zero address\\\");\\n        uint amount = data.amount;\\n        require(amount \\u003e 0, \\\"SBT: amount should be more than zero\\\");\\n        require(data.weight \\u003e 0, \\\"SBT: weight should be more than zero\\\");\\n        require(_balances[id][to].amount == 0 \\u0026\\u0026 _pendingBalances[id][to] == 0, \\\"SBT: mint is not allowed twice\\\");\\n\\n        _pendingBalances[id][to] = amount;\\n        _totalSupply[id] += amount;\\n\\n        data.amount = 0;\\n        _balances[id][to] = data;\\n\\n        emit TransferSingleStarted(msg.sender, address(0), to, id, amount);\\n    }\\n\\n    /**\\n     * @dev Total amount of tokens in with a given id.\\n     * @param id Token ID\\n     * @return totalSupply amount\\n     */\\n    function totalSupply(uint256 id) public view virtual returns (uint256) {\\n        return _totalSupply[id];\\n    }\\n\\n    /**\\n     * @notice Accept tokens of token type `id`, and finishes transfer them to user.\\n     * @dev Available only for users (only external accounts, no contract accounts)\\n     * @param id Token ID\\n     * @return True is success\\n     */\\n    function acceptToken(uint256 id) external returns (bool) {\\n        require(tx.origin == msg.sender, \\\"SBT: address should not be a contract\\\");\\n\\n        _acceptToken(msg.sender, id);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Batch version of acceptToken\\n     * @dev Available only for users (only external accounts, no contract accounts)\\n     * @param ids Token ID\\n     * @return True is success\\n     */\\n    function acceptTokenBatch(uint256[] calldata ids) external returns (bool) {\\n        require(tx.origin == msg.sender, \\\"SBT: address should not be a contract\\\");\\n\\n        for(uint i = 0; i \\u003c ids.length; i++) {\\n            _acceptToken(msg.sender, ids[i]);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Finishes transfer to `user`.\\n     * Pending balance should be more than zero. Emits a {TransferSingle} event.\\n     * @param user User address\\n     * @param id Token ID\\n     */\\n    function _acceptToken(address user, uint256 id) internal {\\n        uint256 amount = _pendingBalances[id][user];\\n        require(amount \\u003e 0, \\\"SBT: pending balance should be more than zero\\\");\\n\\n        _balances[id][user].amount = amount;\\n        userTokens[user].push(id);\\n        delete _pendingBalances[id][user];\\n\\n        emit TransferSingle(msg.sender, address(0), user, id, amount);\\n    }\\n\\n    /**\\n     * @notice Update token data for user and the token ID.\\n     * @dev Available only for users with Operator access role\\n     * @param user User address\\n     * @param id Token ID\\n     * @param data Token data\\n     * @return True is success\\n     */\\n    function update(address user, uint256 id, TokenData calldata data) external onlyRole(OPERATOR_ROLE) returns(bool) {\\n        _update(user, id, data);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Batch version of update\\n     * @dev Available only for users with Minter access role, users.length should be more than 0,\\n     * users.length, ids.length and data length should be match\\n     * @param users User addresses\\n     * @param ids Token IDs\\n     * @param data Token data for each ID\\n     * @return True is success\\n     */\\n    function updateBatch(\\n        address[] calldata users,\\n        uint256[] calldata ids,\\n        TokenData[] calldata data\\n    ) external onlyRole(OPERATOR_ROLE) returns(bool) {\\n        uint length = users.length;\\n        require(length \\u003e 0, \\\"SBT: users length should not be zero\\\");\\n        require(length == ids.length, \\\"SBT: users and ids length mismatch\\\");\\n        require(length == data.length, \\\"SBT: users and data length mismatch\\\");\\n\\n        for (uint256 i = 0; i \\u003c length; i++) {\\n            _update(users[i], ids[i], data[i]);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Update token data of token type `id` for user.\\n     * user address should be not zero, data.amount and data weight should be more than null.\\n     * @param user User address\\n     * @param id Token ID\\n     * @param data Token data\\n     */\\n    function _update(address user, uint256 id, TokenData memory data) internal {\\n        require(idIsExist[id], \\\"SBT: update not exist id\\\");\\n        require(user != address(0), \\\"SBT: update to the zero address\\\");\\n        require(data.weight \\u003e 0, \\\"SBT: weight should be more than zero\\\");\\n\\n        if (_pendingBalances[id][user] \\u003e 0) {\\n            require(data.amount == 0, \\\"SBT: update balance before accept\\\");\\n        } else {\\n            require(data.amount \\u003e 0, \\\"SBT: amount should be more than zero\\\");\\n        }\\n\\n        uint oldAmount = _balances[id][user].amount;\\n        uint newAmount = data.amount;\\n\\n        _totalSupply[id] = _totalSupply[id] + newAmount - oldAmount;\\n        _balances[id][user] = data;\\n\\n        if (newAmount == oldAmount) {\\n            // nothing\\n        } else if (newAmount \\u003e oldAmount) {\\n            emit TransferSingle(msg.sender, address(0), user, id, newAmount - oldAmount);\\n        } else {\\n            emit TransferSingle(msg.sender, user, address(0), id, oldAmount - newAmount);\\n        }\\n    }\\n\\n    /**\\n     * @notice Destroys token data (or pending amount) of token type `id` for user.\\n     * @dev Available only for users with Burner access role\\n     * @param from User address\\n     * @param id Token ID\\n     * @return True is success\\n     */\\n    function burn(address from, uint256 id) external onlyRole(BURNER_ROLE) returns(bool) {\\n        _burn(from, id);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Batch version of burn\\n     * @dev Available only for users with Burner access role, from.length should be more than 0,\\n     * from.length and ids.length should be match\\n     * @param from User addresses\\n     * @param ids Token IDs\\n     * @return True is success\\n     */\\n    function burnBatch(address[] calldata from, uint256[] calldata ids) external onlyRole(BURNER_ROLE) returns(bool) {\\n        uint length = from.length;\\n        require(length \\u003e 0, \\\"SBT: from length should not be zero\\\");\\n        require(length == ids.length, \\\"SBT: from and ids length mismatch\\\");\\n\\n        for (uint256 i = 0; i \\u003c length; i++) {\\n            _burn(from[i], ids[i]);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Destroys token data of token `id` from `from`.\\n     * from address should be not zero, `from` should have at least `amount` tokens of token type `id` or pending balance,\\n     * id should be exist. Emits a {TransferSingle} event.\\n     * @param from User address\\n     * @param id Token ID\\n     */\\n    function _burn(address from, uint256 id) internal {\\n        require(idIsExist[id], \\\"SBT: burn not exist id\\\");\\n        require(from != address(0), \\\"SBT: burn from the zero address\\\");\\n\\n        uint amount = _balances[id][from].amount;\\n        uint pendingAmount = _pendingBalances[id][from];\\n\\n        require(amount \\u003e 0 || pendingAmount \\u003e 0, \\\"SBT: amount should be more than zero\\\");\\n\\n        uint allAmount = amount + pendingAmount;\\n        require(_totalSupply[id] \\u003e= allAmount, \\\"SBT: total supply should be more than burn amount\\\");\\n        _totalSupply[id] -= allAmount;\\n\\n        delete _pendingBalances[id][from];\\n        delete _balances[id][from];\\n\\n        emit TransferSingle(msg.sender, from, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev Length of token ids.\\n     * @return Length\\n     */\\n    function getIdsLength() public view returns (uint256) {\\n        return _ids.length;\\n    }\\n\\n    /**\\n     * @dev Token ids.\\n     * @return Array of token ids\\n     */\\n    function getIds() public view returns (uint256[] memory) {\\n        return _ids;\\n    }\\n\\n    /**\\n     * @dev Array of user tokens.\\n     * @return Array\\n     */\\n    function getUserTokens(address user) public view returns (uint256[] memory) {\\n        return userTokens[user];\\n    }\\n\\n    /**\\n     * @notice Return token data for token ID and user\\n     * @param id Token ID\\n     * @param user User address\\n     * @return TokenData struct for token ID and user\\n     */\\n    function getTokenData(uint256 id, address user) public view returns (TokenData memory) {\\n        return _balances[id][user];\\n    }\\n\\n    /**\\n     * @notice Return batch token data for token IDs and accounts\\n     * @dev ids length should not be zero, ids and users must have the same length.\\n     * @param ids Token IDs\\n     * @param users User addresses\\n     * @return batch tokenData struct\\n     */\\n    function getTokensData(uint256[] calldata ids, address[] calldata users) external view returns (TokenData[] memory) {\\n        uint length = ids.length;\\n        require(length \\u003e 0, \\\"SBT: ids length should not be zero\\\");\\n        require(length == users.length, \\\"SBT: ids and users length mismatch\\\");\\n        TokenData[] memory data = new TokenData[](length);\\n\\n        for(uint i = 0; i \\u003c length; i++) {\\n            data[i] = getTokenData(ids[i], users[i]);\\n        }\\n\\n        return data;\\n    }\\n\\n    /**\\n     * @notice Return user pending balance\\n     * @param id Token ID\\n     * @param user User address\\n     * @return pending balance of account for token ID\\n     */\\n    function getPendingBalance(uint256 id, address user) public view returns (uint) {\\n        return _pendingBalances[id][user];\\n    }\\n\\n    /**\\n     * @notice Return pending balance of batch for accounts and token IDs\\n     * @dev ids length should not be zero, ids and users must have the same length.\\n     * @param ids Token IDs\\n     * @param users User addresses\\n     * @return batch pending balances\\n     */\\n    function getPendingBalances(uint256[] calldata ids, address[] calldata users) external view returns (uint[] memory) {\\n        uint length = ids.length;\\n        require(length \\u003e 0, \\\"SBT: ids length should not be zero\\\");\\n        require(length == users.length, \\\"SBT: ids and users length mismatch\\\");\\n        uint[] memory data = new uint[](length);\\n\\n        for(uint i = 0; i \\u003c length; i++) {\\n            data[i] = getPendingBalance(ids[i], users[i]);\\n        }\\n\\n        return data;\\n    }\\n}\\n\"},\"Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i \\u003e 1; --i) {\\n            buffer[i] = _SYMBOLS[value \\u0026 0xf];\\n            value \\u003e\\u003e= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingleStarted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BURNER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OPERATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"acceptToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"acceptTokenBatch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"from\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"burnBatch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id_\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isAllowed\",\"type\":\"bool\"}],\"name\":\"changeMintingState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableNextIDMinting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getIdsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getPendingBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"}],\"name\":\"getPendingBalances\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getTokenData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"metaData\",\"type\":\"string\"},{\"internalType\":\"bytes32[]\",\"name\":\"params\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct SBT.TokenData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"}],\"name\":\"getTokensData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"metaData\",\"type\":\"string\"},{\"internalType\":\"bytes32[]\",\"name\":\"params\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct SBT.TokenData[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"idIsExist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"metaData\",\"type\":\"string\"},{\"internalType\":\"bytes32[]\",\"name\":\"params\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct SBT.TokenData\",\"name\":\"data\",\"type\":\"tuple\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mintAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"metaData\",\"type\":\"string\"},{\"internalType\":\"bytes32[]\",\"name\":\"params\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct SBT.TokenData[]\",\"name\":\"data\",\"type\":\"tuple[]\"}],\"name\":\"mintBatch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newuri\",\"type\":\"string\"}],\"name\":\"setURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"metaData\",\"type\":\"string\"},{\"internalType\":\"bytes32[]\",\"name\":\"params\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct SBT.TokenData\",\"name\":\"data\",\"type\":\"tuple\"}],\"name\":\"update\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"metaData\",\"type\":\"string\"},{\"internalType\":\"bytes32[]\",\"name\":\"params\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct SBT.TokenData[]\",\"name\":\"data\",\"type\":\"tuple[]\"}],\"name\":\"updateBatch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id_\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "SBT", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "20000", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ede2635bd173d72365e1fe994f0ae111bb5cee2bb880c12ff719b930128b1fbb"}