{"SourceCode": "/**\r\n *Submitted for verification at polygonscan.com on 2021-06-09\r\n*/\r\n\r\npragma solidity ^0.6.12;\r\npragma experimental ABIEncoderV2;\r\n// SPDX-License-Identifier: UNLICENSED\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name_, string memory symbol_) public {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal virtual {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n//A Jar is a contract that users deposit funds into.\r\n//Jar contracts are paired with a strategy contract that interacts with the pool being farmed.\r\ninterface IJar {\r\n    function token() external view returns (address);\r\n\r\n    function getRatio() external view returns (uint256);\r\n\r\n    function balance() external view returns (uint256);\r\n\r\n    function balanceOf(address _user) external view returns (uint256);\r\n\r\n    function depositAll() external;\r\n\r\n    function deposit(uint256) external;\r\n\r\n    //function depositFor(address user, uint256 amount) external;\r\n\r\n    function withdrawAll() external;\r\n\r\n    //function withdraw(uint256) external;\r\n\r\n    function earn() external;\r\n\r\n    function strategy() external view returns (address);\r\n\r\n    //function decimals() external view returns (uint8);\r\n\r\n    //function getLastTimeRestaked(address _address) external view returns (uint256);\r\n\r\n    //function notifyReward(address _reward, uint256 _amount) external;\r\n\r\n    //function getPendingReward(address _user) external view returns (uint256);\r\n}\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\ninterface IUniswapRouterV2 {\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n}\r\n\r\n\r\nabstract contract BaseStrategy is Ownable {\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public lastHarvestTime = 0;\r\n\r\n    // Tokens\r\n    address public want; //The LP token, Harvest calls this \"rewardToken\"\r\n    address public constant weth = 0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619; //weth for Matic\r\n    address internal harvestedToken; //The token we harvest. If the reward pool emits multiple tokens, they should be converted to a single token.\r\n\r\n    // Contracts\r\n    address public strategist; //The address the performance fee is sent to\r\n    address public multiHarvest; //The multi harvest contract\r\n    address public jar; //The vault/jar contract\r\n\r\n    // Dex\r\n    address public currentRouter = 0xa5E0829CaCEd8fFDD4De3c43696c57F7D7A678ff; //Quickswap router\r\n\r\n    constructor(\r\n        address _want,\r\n        address _strategist,\r\n        address _harvestedToken,\r\n        address _currentRouter\r\n    ) public {\r\n        require(_want != address(0));\r\n        require(_strategist != address(0));\r\n\r\n        want = _want;\r\n        strategist = _strategist;\r\n        harvestedToken = _harvestedToken;\r\n        currentRouter = _currentRouter;\r\n    }\r\n    \r\n    // **** Modifiers **** //\r\n    \r\n    //prevent unauthorized smart contracts from calling harvest()\r\n    modifier onlyHumanOrWhitelisted { \r\n        require(msg.sender == tx.origin || msg.sender == owner() || msg.sender == multiHarvest, \"not authorized\");\r\n        _;\r\n    }\r\n\r\n    // **** Views **** //\r\n\r\n    function balanceOfWant() public view returns (uint256) {\r\n        return IERC20(want).balanceOf(address(this));\r\n    }\r\n\r\n    //Returns the token sent to the fee dist contract, which is used to calculate the amount of ADDY to mint when claiming rewards\r\n    function getFeeDistToken() public virtual view returns (address);\r\n\r\n    function balanceOfPool() public virtual view returns (uint256);\r\n\r\n    function getHarvestable() external virtual view returns (uint256);\r\n\r\n    function balanceOf() public view returns (uint256) {\r\n        return balanceOfWant().add(balanceOfPool());\r\n    }\r\n\r\n    // **** Setters **** //\r\n\r\n    function setJar(address _jar) external onlyOwner {\r\n        require(jar == address(0), \"jar already set\");\r\n        jar = _jar;\r\n        emit SetJar(_jar);\r\n    }\r\n\r\n    function setMultiHarvest(address _address) external onlyOwner {\r\n        multiHarvest = _address;\r\n    }\r\n\r\n    // **** State mutations **** //\r\n    function deposit() public virtual;\r\n\r\n    // Withdraw partial funds, normally used with a jar withdrawal\r\n    function withdraw(uint256 _amount) external {\r\n        require(msg.sender == jar, \"!jar\");\r\n        uint256 _balance = IERC20(want).balanceOf(address(this));\r\n        if (_balance < _amount) {\r\n            _amount = _withdrawSome(_amount.sub(_balance));\r\n            _amount = _amount.add(_balance);\r\n        }\r\n\r\n        IERC20(want).safeTransfer(jar, _amount);\r\n    }\r\n\r\n    // Withdraw funds, used to swap between strategies\r\n    function withdrawForSwap(uint256 _amount)\r\n        external\r\n        returns (uint256 balance)\r\n    {\r\n        require(msg.sender == jar, \"!jar\");\r\n        _withdrawSome(_amount);\r\n\r\n        balance = IERC20(want).balanceOf(address(this));\r\n\r\n        IERC20(want).safeTransfer(jar, balance);\r\n    }\r\n\r\n    function _withdrawAll() internal {\r\n        _withdrawSome(balanceOfPool());\r\n    }\r\n\r\n    function _withdrawSome(uint256 _amount) internal virtual returns (uint256);\r\n\r\n    function harvest() public virtual;\r\n\r\n    // **** Internal functions ****\r\n    function _swapUniswap(\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount\r\n    ) internal {\r\n        require(_to != address(0));\r\n\r\n        // Swap with uniswap\r\n        IERC20(_from).safeApprove(currentRouter, 0);\r\n        IERC20(_from).safeApprove(currentRouter, _amount);\r\n\r\n        address[] memory path;\r\n\r\n        if (_from == weth || _to == weth) {\r\n            path = new address[](2);\r\n            path[0] = _from;\r\n            path[1] = _to;\r\n        } else {\r\n            path = new address[](3);\r\n            path[0] = _from;\r\n            path[1] = weth;\r\n            path[2] = _to;\r\n        }\r\n\r\n        IUniswapRouterV2(currentRouter).swapExactTokensForTokens(\r\n            _amount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            now.add(60)\r\n        );\r\n    }\r\n\r\n    function _swapUniswapWithPath(\r\n        address[] memory path,\r\n        uint256 _amount\r\n    ) internal {\r\n        require(path[1] != address(0));\r\n\r\n        // Swap with uniswap\r\n        IERC20(path[0]).safeApprove(currentRouter, 0);\r\n        IERC20(path[0]).safeApprove(currentRouter, _amount);\r\n\r\n        IUniswapRouterV2(currentRouter).swapExactTokensForTokens(\r\n            _amount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            now.add(60)\r\n        );\r\n    }\r\n\r\n    function _swapUniswapWithPathForFeeOnTransferTokens(\r\n        address[] memory path,\r\n        uint256 _amount\r\n    ) internal {\r\n        require(path[1] != address(0));\r\n\r\n        // Swap with uniswap\r\n        IERC20(path[0]).safeApprove(currentRouter, 0);\r\n        IERC20(path[0]).safeApprove(currentRouter, _amount);\r\n\r\n        IUniswapRouterV2(currentRouter).swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            _amount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            now.add(60)\r\n        );\r\n    }\r\n\r\n    function _distributePerformanceFeesAndDeposit() internal {\r\n        uint256 _want = IERC20(want).balanceOf(address(this));\r\n\r\n        if (_want > 0) {\r\n            deposit();\r\n        }\r\n        lastHarvestTime = now;\r\n    }\r\n\r\n    // **** Events **** //\r\n    event SetJar(address indexed jar);\r\n}\r\ninterface IStakingRewards {\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function earned(address account) external view returns (uint256);\r\n\r\n    function exit() external;\r\n\r\n    function getReward() external;\r\n\r\n    function getRewardForDuration() external view returns (uint256);\r\n\r\n    function lastTimeRewardApplicable() external view returns (uint256);\r\n\r\n    function lastUpdateTime() external view returns (uint256);\r\n\r\n    function notifyRewardAmount(uint256 reward) external;\r\n\r\n    function periodFinish() external view returns (uint256);\r\n\r\n    function rewardPerToken() external view returns (uint256);\r\n\r\n    function rewardPerTokenStored() external view returns (uint256);\r\n\r\n    function rewardRate() external view returns (uint256);\r\n\r\n    function rewards(address) external view returns (uint256);\r\n\r\n    function rewardsDistribution() external view returns (address);\r\n\r\n    function rewardsDuration() external view returns (uint256);\r\n\r\n    function rewardsToken() external view returns (address);\r\n\r\n    function stake(uint256 amount) external;\r\n\r\n    function stakeLocked(uint256 amount, uint256 secs) external;\r\n\r\n    function stakeWithPermit(\r\n        uint256 amount,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    function stakingToken() external view returns (address);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function userRewardPerTokenPaid(address) external view returns (uint256);\r\n\r\n    function withdraw(uint256 amount) external;\r\n\r\n    function withdrawLocked(bytes32 kek_id) external;\r\n}\r\n\r\n// Base contract for SNX Staking rewards contract interfaces\r\n\r\nabstract contract BaseStrategyStakingRewards is BaseStrategy {\r\n    address public rewards;\r\n\r\n    // **** Getters ****\r\n    constructor(\r\n        address _rewards,\r\n        address _want,\r\n        address _strategist,\r\n        address _harvestedToken,\r\n        address _currentRouter\r\n    )\r\n        public\r\n        BaseStrategy(_want, _strategist, _harvestedToken, _currentRouter)\r\n    {\r\n        rewards = _rewards;\r\n    }\r\n\r\n    function balanceOfPool() public override view returns (uint256) {\r\n        return IStakingRewards(rewards).balanceOf(address(this));\r\n    }\r\n\r\n    function getHarvestable() external override view returns (uint256) {\r\n        return IStakingRewards(rewards).earned(address(this));\r\n    }\r\n\r\n    // **** Setters ****\r\n\r\n    function deposit() public override {\r\n        uint256 _want = IERC20(want).balanceOf(address(this));\r\n        if (_want > 0) {\r\n            IERC20(want).safeApprove(rewards, 0);\r\n            IERC20(want).safeApprove(rewards, _want);\r\n            IStakingRewards(rewards).stake(_want);\r\n        }\r\n    }\r\n\r\n    function _withdrawSome(uint256 _amount)\r\n        internal\r\n        override\r\n        returns (uint256)\r\n    {\r\n        IStakingRewards(rewards).withdraw(_amount);\r\n        return _amount;\r\n    }\r\n\r\n    function _notifyJar(uint256 _amount) internal virtual;\r\n\r\n    /* **** Mutative functions **** */\r\n\r\n    function _getReward() internal {\r\n        IStakingRewards(rewards).getReward();\r\n    }\r\n\r\n    // **** Admin functions ****\r\n\r\n    // Added to support recovering LP Rewards from other systems to be distributed to holders\r\n    function salvage(address recipient, address token, uint256 amount) public onlyOwner {\r\n        // Admin cannot withdraw the staking or harvested token from the contract\r\n        require(token != want, \"cannot salvage want\");\r\n        require(token != harvestedToken, \"cannot salvage harvestedToken\");\r\n        IERC20(token).safeTransfer(recipient, amount);\r\n    }\r\n}\r\n\r\ninterface IERCFund {\r\n    function feeShareEnabled() external view returns (bool);\r\n\r\n    function depositToFeeDistributor(address token, uint256 amount) external;\r\n\r\n    function notifyFeeDistribution(address token) external;\r\n\r\n    function getFee() external view returns (uint256);\r\n\r\n    function recover(address token) external;\r\n}\r\n\r\n//Vaults are jars that emit ADDY rewards.\r\ninterface IVault is IJar {\r\n\r\n    function getPendingReward(address _user) external view returns (uint256);\r\n\r\n    function getLastDepositTime(address _user) external view returns (uint256);\r\n\r\n    function getTokensStaked(address _user) external view returns (uint256);\r\n\r\n    function totalShares() external view returns (uint256);\r\n\r\n    function getRewardMultiplier() external view returns (uint256);   \r\n\r\n    function rewardAllocation() external view returns (uint256);   \r\n\r\n    function totalPendingReward() external view returns (uint256);   \r\n\r\n    function withdrawPenaltyTime() external view returns (uint256);   \r\n    \r\n    function increaseRewardAllocation(uint256 _newReward) external;\r\n\r\n    function setWithdrawPenaltyTime(uint256 _withdrawPenaltyTime) external;\r\n}\r\n\r\n//A normal vault is a vault where the strategy contract notifies the vault contract about the profit it generated when harvesting. \r\ninterface IGenericVault is IVault {\r\n    \r\n    //Strategy calls notifyReward to let the vault know that it earned a certain amount of profit (the performance fee) for gov token stakers\r\n    function notifyReward(address _reward, uint256 _amount) external;\r\n}\r\n\r\n//For A/B token pairs, where I have to convert the harvested token to A (ETH/MATIC/USDC/etc) and then sell 1/2 of A for B\r\n//For pools where the reward contract functions have the \"nonReentrant\" modifier\r\n//In addition, the reward is swapped to WMATIC in order to minimize the number of tokens that the calculator needs to support\r\nabstract contract BaseStrategyOtherPairNonReentrant is BaseStrategyStakingRewards {\r\n\r\n    uint256 public constant keepMax = 10000;\r\n\r\n    address public tokenA;\r\n    address public tokenB;\r\n    address public WMATIC = 0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270;\r\n    // Uniswap swap paths\r\n    address[] public reward_a_path;\r\n    address[] public reward_matic_path;\r\n    address[] public a_b_path;\r\n\r\n    constructor(\r\n        address _rewards,\r\n        address _want,\r\n        address _tokenA,\r\n        address _tokenB,\r\n        address _harvestedToken,\r\n        address _strategist,\r\n        address _router\r\n    )\r\n        public\r\n        BaseStrategyStakingRewards(\r\n            _rewards,\r\n            _want,\r\n            _strategist,\r\n            _harvestedToken,\r\n            _router\r\n        )\r\n    {\r\n        tokenA = _tokenA;\r\n        tokenB = _tokenB;\r\n\r\n        reward_a_path = new address[](2);\r\n        reward_a_path[0] = _harvestedToken;\r\n        reward_a_path[1] = _tokenA;\r\n\r\n        reward_matic_path = new address[](2);\r\n        reward_matic_path[0] = _harvestedToken;\r\n        reward_matic_path[1] = WMATIC;\r\n\r\n        a_b_path = new address[](2);\r\n        a_b_path[0] = _tokenA;\r\n        a_b_path[1] = _tokenB;\r\n    }\r\n\r\n    function getFeeDistToken() public override view returns (address) {\r\n        return WMATIC;\r\n    }\r\n\r\n    // **** State Mutations ****\r\n\r\n    //Swap feeAmount to WMATIC before sending it to the fee dist, since profit is calculated in terms of WMATIC\r\n    function swapRewardToWmaticAndDistributeFee(uint256 feeAmount) internal {\r\n        if(feeAmount > 0) {\r\n            _swapUniswapWithPath(reward_matic_path, feeAmount);\r\n            uint256 _maticFee = IERC20(WMATIC).balanceOf(address(this));\r\n            _notifyJar(_maticFee);\r\n            IERC20(WMATIC).safeTransfer(strategist, _maticFee);\r\n        }\r\n    }\r\n\r\n    //deposit() needs to be called manually afterward because deposit() and getReward() have the nonReentrant modifier, so I cannot claim and deposit in the same tx\r\n    function harvest() public override onlyHumanOrWhitelisted {\r\n        //Transfer any harvestedToken and WMATIC that may already be in the contract to the fee dist fund\r\n        IERC20(harvestedToken).safeTransfer(strategist, IERC20(harvestedToken).balanceOf(address(this)));\r\n        IERC20(WMATIC).safeTransfer(strategist, IERC20(WMATIC).balanceOf(address(this)));\r\n        \r\n        _getReward();\r\n\r\n        uint256 _harvested_balance = IERC20(harvestedToken).balanceOf(address(this));\r\n\r\n        //Distribute fee and swap harvestedToken for tokenA\r\n        if (_harvested_balance > 0) {\r\n            uint256 feeAmount = _harvested_balance.mul(IERCFund(strategist).getFee()).div(keepMax);\r\n            uint256 afterFeeAmount = _harvested_balance.sub(feeAmount);\r\n            \r\n            swapRewardToWmaticAndDistributeFee(feeAmount);\r\n\r\n            _swapUniswapWithPath(reward_a_path, afterFeeAmount);\r\n        }\r\n\r\n        //Swap 1/2 of tokenA for tokenB\r\n        uint256 _balanceA = IERC20(tokenA).balanceOf(address(this));\r\n        if (_balanceA > 0) {\r\n            _swapUniswapWithPath(a_b_path, _balanceA.div(2));\r\n        }\r\n\r\n        //Add liquidity\r\n        uint256 aBalance = IERC20(tokenA).balanceOf(address(this));\r\n        uint256 bBalance = IERC20(tokenB).balanceOf(address(this));\r\n        if (aBalance > 0 && bBalance > 0) {\r\n            IERC20(tokenA).safeApprove(currentRouter, 0);\r\n            IERC20(tokenA).safeApprove(currentRouter, aBalance);\r\n            IERC20(tokenB).safeApprove(currentRouter, 0);\r\n            IERC20(tokenB).safeApprove(currentRouter, bBalance);\r\n\r\n            IUniswapRouterV2(currentRouter).addLiquidity(\r\n                tokenA, tokenB,\r\n                aBalance, bBalance,\r\n                0, 0,\r\n                address(this),\r\n                now + 60\r\n            );\r\n        }\r\n\r\n        // Call deposit() separately for non-reentrant vaults\r\n        //_distributePerformanceFeesAndDeposit();\r\n    }\r\n\r\n    function _notifyJar(uint256 _amount) internal override {\r\n        IGenericVault(jar).notifyReward(getFeeDistToken(), _amount);\r\n    }\r\n}\r\n\r\n\r\ncontract StrategyOtherPairCometh is BaseStrategyOtherPairNonReentrant {\r\n\r\n    address public constant MUST_TOKEN = 0x9C78EE466D6Cb57A4d01Fd887D2b5dFb2D46288f;\r\n    address public constant COMETH_ROUTER = 0x93bcDc45f7e62f89a8e901DC4A0E2c6C427D9F25;\r\n    string private pair_name;\r\n\r\n    constructor(address rewards, address lp, address tokenA, address tokenB, address strategist, string memory _pair_name)\r\n        public\r\n        BaseStrategyOtherPairNonReentrant(\r\n            rewards,\r\n            lp,\r\n            tokenA,\r\n            tokenB,\r\n            MUST_TOKEN,\r\n            strategist,\r\n            COMETH_ROUTER\r\n        )\r\n    {\r\n        pair_name = _pair_name;\r\n    }\r\n\r\n    // **** Views ****\r\n\r\n    function pairName() external view returns (string memory) {\r\n        return pair_name;\r\n    }\r\n}\r\n\r\ninterface IStrategy {\r\n    function getFeeDistToken() external view returns (address);\r\n\r\n    function lastHarvestTime() external returns (uint256);\r\n\r\n    function rewards() external view returns (address);\r\n\r\n    function gauge() external view returns (address);\r\n\r\n    function want() external view returns (address);\r\n\r\n    function treasury() external view returns (address);\r\n\r\n    function deposit() external;\r\n\r\n    function depositLocked(uint256 _secs) external;\r\n\r\n    function withdrawForSwap(uint256) external returns (uint256);\r\n\r\n    function withdraw(address) external;\r\n\r\n    function withdraw(uint256) external;\r\n\r\n    function withdrawLocked(bytes32 kek_id) external returns (uint256 balance);\r\n\r\n    function skim() external;\r\n\r\n    function migrate() external;\r\n\r\n    function withdrawAll() external returns (uint256);\r\n\r\n    function balanceOf() external view returns (uint256);\r\n\r\n    function getHarvestable() external view returns (uint256);\r\n\r\n    function pairName() external view returns (string memory);\r\n\r\n    function harvest() external;\r\n\r\n    function setJar(address _jar) external;\r\n\r\n    function migrate(address newStakingContract) external;\r\n\r\n    function getLastTimeMigrated() external view returns (uint256);\r\n\r\n    function execute(address _target, bytes calldata _data)\r\n        external\r\n        payable\r\n        returns (bytes memory response);\r\n\r\n    function execute(bytes calldata _data)\r\n        external\r\n        payable\r\n        returns (bytes memory response);\r\n}\r\ninterface IMinter {\r\n    function isMinter(address) view external returns(bool);\r\n    function amountAddyToMint(uint256 ethProfit) view external returns(uint256);\r\n    function mintFor(address user, address asset, uint256 amount) external;\r\n\r\n    function addyPerProfitEth() view external returns(uint256);\r\n\r\n    function setMinter(address minter, bool canMint) external;\r\n}// Based on https://github.com/iearn-finance/vaults/blob/master/contracts/vaults/yVault.sol\r\n\r\n\r\nabstract contract VaultBase is Ownable {\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n    using SafeMath for uint256;\r\n\r\n    // Info of each user\r\n    struct UserInfo {\r\n        uint256 shares; // User shares\r\n        uint256 rewardDebt; // Reward debt (in terms of QUICK)\r\n        uint256 lastDepositTime;\r\n        uint256 tokensStaked; // Number of tokens staked, only used to calculate profit on the frontend (different than shares)\r\n    }\r\n\r\n    uint256 public constant keepMax = 10000;\r\n\r\n    /* ========== STATE VARIABLES ========== */\r\n\r\n    // Info of each user\r\n    mapping (address => UserInfo) public userInfo;\r\n\r\n    // The total amount of pending rewards available for stakers to claim\r\n    uint256 public totalPendingReward;\r\n    // Accumulated rewards per share, times 1e12.\r\n    uint256 public accRewardPerShare;\r\n    // The total # of shares issued\r\n    uint256 public totalShares;\r\n    // Withdrawing before this much time has passed will have a withdrawal penalty\r\n    uint256 public withdrawPenaltyTime = 3 days;\r\n    // Withdrawal penalty, 100 = 1%\r\n    uint256 public withdrawPenalty = 50;\r\n    // For vaults that are farming pools with a deposit fee\r\n    uint256 public depositFee = 0;\r\n    //Allowed amount of the token sent to the fee dist each vault can mint ADDY rewards for, default 5 (5 QUICK = roughly 1.7 ETH = 807 ADDY)\r\n    uint256 public rewardAllocation = 1e18 * 5;\r\n\r\n    // Certain vaults will give up to 10x ADDY rewards\r\n    // Additional usecase for ADDY: lock it to boost the yield of a certain vault\r\n    uint256 private rewardMultiplier = 1000;\r\n    uint256 private constant MULTIPLIER_BASE = 1000;\r\n    uint256 private constant MULTIPLIER_MAX = 10000;\r\n\r\n    IERC20 public token;\r\n    address public strategy;\r\n    IMinter internal minter;\r\n    address public ercFund;\r\n\r\n    constructor(IStrategy _strategy, address _minter, address _ercFund)\r\n        public\r\n    {\r\n        require(address(_strategy) != address(0));\r\n        token = IERC20(_strategy.want());\r\n        strategy = address(_strategy);\r\n        minter = IMinter(_minter);\r\n        ercFund = _ercFund;\r\n    }\r\n\r\n    /* ========== VIEW FUNCTIONS ========== */\r\n\r\n    // 1000 = 1x multiplier\r\n    function getRewardMultiplier() public view returns (uint256) {\r\n        return rewardMultiplier;\r\n    }\r\n\r\n    function applyRewardMultiplier(uint256 _amount) internal view returns (uint256) {\r\n        return _amount.mul(rewardMultiplier).div(MULTIPLIER_BASE);\r\n    }\r\n\r\n    function getRatio() public view returns (uint256) {\r\n        return balance().mul(1e18).div(totalShares);\r\n    }\r\n\r\n    function balance() public view returns (uint256) {\r\n        return\r\n            token.balanceOf(address(this)).add(\r\n                IStrategy(strategy).balanceOf()\r\n            );\r\n    }\r\n\r\n    function balanceOf(address _user) public view returns (uint256) {\r\n        return userInfo[_user].shares;\r\n    }\r\n\r\n    function getPendingReward(address _user) public view returns (uint256) {\r\n        return userInfo[_user].shares.mul(accRewardPerShare).div(1e12).sub(userInfo[_user].rewardDebt);\r\n    }\r\n\r\n    function getLastDepositTime(address _user) public view returns (uint256) {\r\n        return userInfo[_user].lastDepositTime;\r\n    }\r\n\r\n    function getTokensStaked(address _user) public view returns (uint256) {\r\n        return userInfo[_user].tokensStaked;\r\n    }\r\n\r\n    /* ========== MUTATIVE FUNCTIONS ========== */\r\n\r\n    function depositAll() external {\r\n        deposit(token.balanceOf(msg.sender));\r\n    }\r\n\r\n    function deposit(uint256 _amount) public {\r\n        require(msg.sender == tx.origin, \"no contracts\");\r\n        _claimReward(msg.sender);\r\n\r\n        uint256 _pool = balance();\r\n        uint256 _before = token.balanceOf(address(this));\r\n        token.safeTransferFrom(msg.sender, address(this), _amount);\r\n        uint256 _after = token.balanceOf(address(this));\r\n        _amount = _after.sub(_before); // Additional check for deflationary tokens\r\n        uint256 shares = 0;\r\n        if (totalShares == 0) {\r\n            shares = _amount;\r\n        } else {\r\n            shares = (_amount.mul(totalShares)).div(_pool);\r\n        }\r\n\r\n        //when farming pools with a deposit fee\r\n        if(depositFee > 0) {\r\n            uint256 fee = shares.mul(depositFee).div(keepMax);\r\n            shares = shares.sub(fee);\r\n        }\r\n\r\n        totalShares = totalShares.add(shares);\r\n\r\n        UserInfo storage user = userInfo[msg.sender];\r\n        user.shares = user.shares.add(shares);\r\n        user.rewardDebt = user.shares.mul(accRewardPerShare).div(1e12);\r\n        user.lastDepositTime = now;\r\n        user.tokensStaked = user.tokensStaked.add(_amount);\r\n\r\n        earn(); \r\n        emit Deposited(msg.sender, _amount);\r\n    }\r\n \r\n    function earn() internal {\r\n        uint256 _bal = token.balanceOf(address(this));\r\n        token.safeTransfer(strategy, _bal);\r\n        IStrategy(strategy).deposit();\r\n    }\r\n\r\n    // Withdraw all tokens and claim rewards.\r\n    function withdrawAll() external {\r\n        UserInfo storage user = userInfo[msg.sender];\r\n        uint256 _shares = user.shares;\r\n        uint256 r = (balance().mul(_shares)).div(totalShares);\r\n\r\n        _claimReward(msg.sender);\r\n\r\n        // Check balance\r\n        uint256 b = token.balanceOf(address(this));\r\n        if (b < r) {\r\n            uint256 _withdraw = r.sub(b);\r\n            IStrategy(strategy).withdraw(_withdraw);\r\n            uint256 _after = token.balanceOf(address(this));\r\n            uint256 _diff = _after.sub(b);\r\n            if (_diff < _withdraw) {\r\n                r = b.add(_diff);\r\n            }\r\n        }\r\n\r\n        totalShares = totalShares.sub(_shares);\r\n\r\n        user.shares = user.shares.sub(_shares);\r\n        user.rewardDebt = user.shares.mul(accRewardPerShare).div(1e12);\r\n        user.tokensStaked = 0;\r\n        // Deduct early withdrawal fee if applicable\r\n        if(user.lastDepositTime.add(withdrawPenaltyTime) >= now) {\r\n            uint256 earlyWithdrawalFee = r.mul(withdrawPenalty).div(keepMax);\r\n            r = r.sub(earlyWithdrawalFee);\r\n            token.safeTransfer(ercFund, earlyWithdrawalFee);\r\n        }\r\n\r\n        token.safeTransfer(msg.sender, r);\r\n        emit Withdrawn(msg.sender, r);\r\n    }\r\n\r\n    // Withdraw all tokens without caring about rewards. EMERGENCY ONLY.\r\n    function emergencyWithdraw() public {\r\n        UserInfo storage user = userInfo[msg.sender];\r\n        uint256 _shares = user.shares;\r\n        uint256 r = (balance().mul(_shares)).div(totalShares);\r\n\r\n        // Check balance\r\n        uint256 b = token.balanceOf(address(this));\r\n        if (b < r) {\r\n            uint256 _withdraw = r.sub(b);\r\n            IStrategy(strategy).withdraw(_withdraw);\r\n            uint256 _after = token.balanceOf(address(this));\r\n            uint256 _diff = _after.sub(b);\r\n            if (_diff < _withdraw) {\r\n                r = b.add(_diff);\r\n            }\r\n        }\r\n\r\n        if(_shares <= totalShares) {\r\n            totalShares = totalShares.sub(_shares);\r\n        }\r\n        else {\r\n            totalShares = 0;\r\n        }\r\n        user.shares = 0;\r\n        user.rewardDebt = 0;\r\n        user.tokensStaked = 0;\r\n        // Deduct early withdrawal fee if applicable\r\n        if(user.lastDepositTime.add(withdrawPenaltyTime) >= now) {\r\n            uint256 earlyWithdrawalFee = r.mul(withdrawPenalty).div(keepMax);\r\n            r = r.sub(earlyWithdrawalFee);\r\n            token.safeTransfer(ercFund, earlyWithdrawalFee);\r\n        }\r\n\r\n        token.safeTransfer(msg.sender, r);\r\n        emit Withdrawn(msg.sender, r);\r\n    }\r\n    \r\n    function claim() public {\r\n        UserInfo storage user = userInfo[msg.sender];\r\n        require(user.shares > 0, \"no stake\");\r\n\r\n        _claimReward(msg.sender);\r\n\r\n        user.rewardDebt = user.shares.mul(accRewardPerShare).div(1e12);\r\n    }\r\n\r\n    /* ========== INTERNAL FUNCTIONS ========== */\r\n\r\n    // Handles claiming the user's pending rewards\r\n    function _claimReward(address _user) internal virtual;\r\n\r\n    /* ========== RESTRICTED FUNCTIONS ========== */\r\n\r\n    //Vault deployer also needs to register the vault with the new minter\r\n    function setMinter(IMinter newMinter) public onlyOwner {\r\n        minter = newMinter;\r\n    }\r\n\r\n    function setWithdrawPenaltyTime(uint256 _withdrawPenaltyTime) public onlyOwner {\r\n        require(_withdrawPenaltyTime <= 30 days, \"delay too high\");\r\n        withdrawPenaltyTime = _withdrawPenaltyTime;\r\n    }\r\n\r\n    function setWithdrawPenalty(uint256 _withdrawPenalty) public onlyOwner {\r\n        require(_withdrawPenalty <= 500, \"penalty too high\");\r\n        withdrawPenalty = _withdrawPenalty;\r\n    }\r\n\r\n    function setRewardMultiplier(uint256 _rewardMultiplier) public onlyOwner {\r\n        require(_rewardMultiplier <= MULTIPLIER_MAX, \"multiplier too high\");\r\n        rewardMultiplier = _rewardMultiplier;\r\n    }\r\n\r\n    //shouldn't be farming things with a high deposit fee in the first place\r\n    function setPoolDepositFee(uint256 _depositFee) public onlyOwner {\r\n        require(_depositFee <= 1000, \"?\");\r\n        depositFee = _depositFee;\r\n    }\r\n\r\n    //Increase the amount of the token sent to the fee dist the vault is allowed to mint ADDY for\r\n    function increaseRewardAllocation(uint256 _newReward) public onlyOwner {\r\n        rewardAllocation = rewardAllocation.add(_newReward);\r\n        emit RewardAllocated(_newReward, rewardAllocation);\r\n    }\r\n\r\n    /* ========== EVENTS ========== */\r\n\r\n    event Deposited(address indexed user, uint256 amount);\r\n    event Withdrawn(address indexed user, uint256 amount);\r\n    event RewardAdded(address reward, uint256 amount);\r\n    event Claimed(address indexed user, uint256 amount);\r\n    event RewardAllocated(uint256 newReward, uint256 totalAllocation);\r\n}\r\n\r\n\r\ncontract GenericVault is VaultBase {\r\n\r\n    constructor(IStrategy _strategy, address _minter, address _ercFund) \r\n        public\r\n        VaultBase(_strategy, _minter, _ercFund)\r\n    {\r\n        \r\n    }\r\n\r\n    // Handles claiming the user's pending rewards\r\n    function _claimReward(address _user) internal override {\r\n        UserInfo storage user = userInfo[_user];\r\n        if (user.shares > 0) {\r\n            uint256 pendingReward = user.shares.mul(accRewardPerShare).div(1e12).sub(user.rewardDebt);\r\n            if (pendingReward > 0) {\r\n                totalPendingReward = totalPendingReward.sub(pendingReward);\r\n                \r\n                //Apply reward multiplier to the pendingReward that the minter will mint for\r\n                pendingReward = applyRewardMultiplier(pendingReward);\r\n                \r\n                //Make sure the amount of QUICK the vault is allowed to mint for is above the amount we're trying to mint for\r\n                //Require statement is there for end users\r\n                require(rewardAllocation >= pendingReward, \"Not enough rewards allocated\");\r\n                rewardAllocation = rewardAllocation.sub(pendingReward);\r\n\r\n                //Minter will mint to MultiFeeDistribution and then stake the minted tokens for the user\r\n                minter.mintFor(_user, IStrategy(strategy).getFeeDistToken(), pendingReward);\r\n                emit Claimed(_user, pendingReward);\r\n            }\r\n        }\r\n    }\r\n\r\n    //Strategy calls notifyReward to let the vault know that it earned a certain amount of profit (the performance fee) for gov token stakers\r\n    function notifyReward(address _reward, uint256 _amount) public {\r\n        require(msg.sender == strategy);\r\n        if(_amount == 0) {\r\n            return;\r\n        }\r\n\r\n        totalPendingReward = totalPendingReward.add(_amount);\r\n        accRewardPerShare = accRewardPerShare.add(_amount.mul(1e12).div(totalShares)); //shouldn't be adding reward if totalShares == 0 anyway\r\n\r\n        emit RewardAdded(_reward, _amount);\r\n    }\r\n}\r\n\r\n\r\ncontract ProxyMinter is Ownable {\r\n\r\n    /* ========== STATE VARIABLES ========== */\r\n\r\n    mapping(address => bool) private _minters;\r\n    address public deployer;\r\n    address public minter;\r\n\r\n    /* ========== CONSTRUCTOR ========== */\r\n\r\n    constructor(address _minter)\r\n        public\r\n    {\r\n        minter = _minter;\r\n    }\r\n    \r\n    /* ========== MODIFIERS ========== */\r\n\r\n    modifier onlyMinter {\r\n        require(isMinter(msg.sender) == true, \"AddyMinter: caller is not the minter\");\r\n        _;\r\n    }\r\n\r\n    function mintFor(address user, address asset, uint256 amount) external onlyMinter {\r\n        IMinter(minter).mintFor(user, asset, amount);\r\n    }\r\n    \r\n    /* ========== VIEWS ========== */\r\n\r\n    function isMinter(address account) public view returns (bool) {\r\n        return _minters[account];\r\n    }\r\n\r\n    function amountAddyToMint(uint256 ethProfit) public view returns (uint256) {\r\n        return IMinter(minter).amountAddyToMint(ethProfit);\r\n    }\r\n\r\n    /* ========== RESTRICTED FUNCTIONS ========== */\r\n\r\n    function setDeployer(address _deployer) public onlyOwner {\r\n        require(deployer == address(0), \"already set\");\r\n        deployer = _deployer;\r\n    }\r\n    \r\n    function setMinter(address _minter, bool canMint) external {\r\n        require(deployer == msg.sender, \"not deployer\");\r\n\r\n        if (canMint) {\r\n            _minters[_minter] = canMint;\r\n        } else {\r\n            delete _minters[_minter];\r\n        }\r\n    }\r\n    \r\n    function disableMinter(address _minter) external onlyOwner {\r\n        _minters[_minter] = false;\r\n    }\r\n}\r\n\r\n\r\ninterface IMultiHarvestable {\r\n    function setMultiHarvest(address _address) external;\r\n}\r\n\r\n//Deploys strategies for TokenA/TokenB pairs\r\n//Make sure that a pair for rewardToken/TokenA exists\r\ncontract StrategyDeployerCometh is Ownable {\r\n\r\n    address public FUND = 0x43c085B5aba4E83a7dd1A478B7458D1d472FF6b4;\r\n    address MULTI_HARVEST = 0x3355743Db830Ed30FF4089DB8b18DEeb683F8546;\r\n    address public proxy_minter;\r\n    bool public finalized = false;\r\n\r\n    struct VaultData {\r\n        address strat;\r\n        address vault;\r\n    }\r\n\r\n    VaultData[] public deployedVaults;\r\n\r\n    constructor() public {\r\n        proxy_minter = address(new ProxyMinter(0xAAE758A2dB4204E1334236Acd6E6E73035704921));\r\n        ProxyMinter(proxy_minter).setDeployer(address(this));\r\n        Ownable(proxy_minter).transferOwnership(msg.sender);\r\n    }\r\n\r\n    function deploy(address rewards, address lp, address tokenA, address tokenB, string memory _pair_name) public onlyOwner {\r\n        require(finalized == false, \"This deployer contract is not allowed to deploy any more vaults\");\r\n        \r\n        address strategy = address(new StrategyOtherPairCometh(rewards, lp, tokenA, tokenB, FUND, _pair_name));\r\n        address jar = address(new GenericVault(IStrategy(strategy), proxy_minter, FUND));\r\n        StrategyOtherPairCometh(strategy).setJar(jar);\r\n        IMinter(proxy_minter).setMinter(jar, true);\r\n        \r\n        IMultiHarvestable(strategy).setMultiHarvest(MULTI_HARVEST);\r\n        Ownable(strategy).transferOwnership(msg.sender);\r\n        Ownable(jar).transferOwnership(msg.sender);\r\n\r\n        deployedVaults.push(VaultData({\r\n            strat: strategy,\r\n            vault: jar\r\n        }));\r\n\r\n        emit Deployed(strategy, jar);\r\n    }\r\n\r\n    function getDeployedVaults() public view \r\n        returns (\r\n            VaultData[] memory vaultData\r\n        ) \r\n    {\r\n        uint256 length = deployedVaults.length;\r\n        vaultData = new VaultData[](length);\r\n\r\n        for (uint256 i = 0; i < length; i++) {\r\n            vaultData[i] = deployedVaults[i];\r\n        }\r\n    }\r\n\r\n    //Prevent any more vaults from being deployed\r\n    function finalizeDeployment() external onlyOwner() {\r\n        finalized = true;\r\n    }\r\n\r\n    event Deployed(address indexed strategy, address indexed jar);\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rewards\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"strategist\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_pair_name\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"jar\",\"type\":\"address\"}],\"name\":\"SetJar\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"COMETH_ROUTER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MUST_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WMATIC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"a_b_path\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfWant\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeDistToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHarvestable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"jar\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keepMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastHarvestTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multiHarvest\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"reward_a_path\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"reward_matic_path\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"salvage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_jar\",\"type\":\"address\"}],\"name\":\"setJar\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setMultiHarvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenA\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"want\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawForSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "StrategyOtherPairCometh", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000001c30cfe08506ba215c02bc2723c6d310671bab620000000000000000000000001edb2d8f791d2a51d56979bf3a25673d6e7832320000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000043c085b5aba4e83a7dd1a478b7458d1d472ff6b400000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000009574554482d555344430000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b0c6a72a1c4aca6971fbc9152155e1e24a74403afa0ab24c1dafb36e76384b80"}