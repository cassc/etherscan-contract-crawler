{"SourceCode": "pragma solidity ^0.8.2;\r\n\r\n\r\ninterface IERC165 {\r\n    \r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\ninterface IERC721 is IERC165 {\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    \r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    \r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    \r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    \r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    \r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    \r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    \r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    \r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    \r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    \r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    \r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\ninterface IERC721Receiver {\r\n    \r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\ninterface IERC721Metadata is IERC721 {\r\n    \r\n    function name() external view returns (string memory);\r\n\r\n    \r\n    function symbol() external view returns (string memory);\r\n\r\n    \r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\nlibrary Address {\r\n    \r\n    function isContract(address account) internal view returns (bool) {\r\n        \r\n        \r\n        \r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    \r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    \r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    \r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    \r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    \r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    \r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    \r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    \r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    \r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    \r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            \r\n            if (returndata.length > 0) {\r\n                \r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    \r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        \r\n        \r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    \r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    \r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\nabstract contract ERC165 is IERC165 {\r\n    \r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\r\n    using Address for address;\r\n    using Strings for uint256;\r\n\r\n    \r\n    string private _name;\r\n\r\n    \r\n    string private _symbol;\r\n\r\n    \r\n    mapping(uint256 => address) private _owners;\r\n\r\n    \r\n    mapping(address => uint256) private _balances;\r\n\r\n    \r\n    mapping(uint256 => address) private _tokenApprovals;\r\n\r\n    \r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    \r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    \r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return\r\n            interfaceId == type(IERC721).interfaceId ||\r\n            interfaceId == type(IERC721Metadata).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    \r\n    function balanceOf(address owner) public view virtual override returns (uint256) {\r\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\r\n        return _balances[owner];\r\n    }\r\n\r\n    \r\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\r\n        address owner = _owners[tokenId];\r\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\r\n        return owner;\r\n    }\r\n\r\n    \r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    \r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    \r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\n\r\n        string memory baseURI = _baseURI();\r\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\r\n    }\r\n\r\n    \r\n    function _baseURI() internal view virtual returns (string memory) {\r\n        return \"\";\r\n    }\r\n\r\n    \r\n    function approve(address to, uint256 tokenId) public virtual override {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        require(to != owner, \"ERC721: approval to current owner\");\r\n\r\n        require(\r\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\r\n            \"ERC721: approve caller is not owner nor approved for all\"\r\n        );\r\n\r\n        _approve(to, tokenId);\r\n    }\r\n\r\n    \r\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\r\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    \r\n    function setApprovalForAll(address operator, bool approved) public virtual override {\r\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\r\n\r\n        _operatorApprovals[_msgSender()][operator] = approved;\r\n        emit ApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    \r\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    \r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        \r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    \r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    \r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) public virtual override {\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n        _safeTransfer(from, to, tokenId, _data);\r\n    }\r\n\r\n    \r\n    function _safeTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _transfer(from, to, tokenId);\r\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n\r\n    \r\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\r\n        return _owners[tokenId] != address(0);\r\n    }\r\n\r\n    \r\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\r\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\r\n    }\r\n\r\n    \r\n    function _safeMint(address to, uint256 tokenId) internal virtual {\r\n        _safeMint(to, tokenId, \"\");\r\n    }\r\n\r\n    \r\n    function _safeMint(\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _mint(to, tokenId);\r\n        require(\r\n            _checkOnERC721Received(address(0), to, tokenId, _data),\r\n            \"ERC721: transfer to non ERC721Receiver implementer\"\r\n        );\r\n    }\r\n\r\n    \r\n    function _mint(address to, uint256 tokenId) internal virtual {\r\n        require(to != address(0), \"ERC721: mint to the zero address\");\r\n        require(!_exists(tokenId), \"ERC721: token already minted\");\r\n\r\n        _beforeTokenTransfer(address(0), to, tokenId);\r\n\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(address(0), to, tokenId);\r\n    }\r\n\r\n    \r\n    function _burn(uint256 tokenId) internal virtual {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n\r\n        _beforeTokenTransfer(owner, address(0), tokenId);\r\n\r\n        \r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[owner] -= 1;\r\n        delete _owners[tokenId];\r\n\r\n        emit Transfer(owner, address(0), tokenId);\r\n    }\r\n\r\n    \r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {\r\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\r\n        require(to != address(0), \"ERC721: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, tokenId);\r\n\r\n        \r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[from] -= 1;\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(from, to, tokenId);\r\n    }\r\n\r\n    \r\n    function _approve(address to, uint256 tokenId) internal virtual {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\r\n    }\r\n\r\n    \r\n    function _checkOnERC721Received(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) private returns (bool) {\r\n        if (to.isContract()) {\r\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\r\n                return retval == IERC721Receiver.onERC721Received.selector;\r\n            } catch (bytes memory reason) {\r\n                if (reason.length == 0) {\r\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\r\n                } else {\r\n                    assembly {\r\n                        revert(add(32, reason), mload(reason))\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    \r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {}\r\n}\r\n\r\ninterface IERC721Enumerable is IERC721 {\r\n    \r\n    function totalSupply() external view returns (uint256);\r\n\r\n    \r\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\r\n\r\n    \r\n    function tokenByIndex(uint256 index) external view returns (uint256);\r\n}\r\n\r\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\r\n    \r\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\r\n\r\n    \r\n    mapping(uint256 => uint256) private _ownedTokensIndex;\r\n\r\n    \r\n    uint256[] private _allTokens;\r\n\r\n    \r\n    mapping(uint256 => uint256) private _allTokensIndex;\r\n\r\n    \r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\r\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    \r\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\r\n        require(index < ERC721.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\r\n        return _ownedTokens[owner][index];\r\n    }\r\n\r\n    \r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _allTokens.length;\r\n    }\r\n\r\n    \r\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\r\n        require(index < ERC721Enumerable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\r\n        return _allTokens[index];\r\n    }\r\n\r\n    \r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual override {\r\n        super._beforeTokenTransfer(from, to, tokenId);\r\n\r\n        if (from == address(0)) {\r\n            _addTokenToAllTokensEnumeration(tokenId);\r\n        } else if (from != to) {\r\n            _removeTokenFromOwnerEnumeration(from, tokenId);\r\n        }\r\n        if (to == address(0)) {\r\n            _removeTokenFromAllTokensEnumeration(tokenId);\r\n        } else if (to != from) {\r\n            _addTokenToOwnerEnumeration(to, tokenId);\r\n        }\r\n    }\r\n\r\n    \r\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\r\n        uint256 length = ERC721.balanceOf(to);\r\n        _ownedTokens[to][length] = tokenId;\r\n        _ownedTokensIndex[tokenId] = length;\r\n    }\r\n\r\n    \r\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\r\n        _allTokensIndex[tokenId] = _allTokens.length;\r\n        _allTokens.push(tokenId);\r\n    }\r\n\r\n    \r\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\r\n        \r\n        \r\n\r\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\r\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\r\n\r\n        \r\n        if (tokenIndex != lastTokenIndex) {\r\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\r\n\r\n            _ownedTokens[from][tokenIndex] = lastTokenId; \r\n            _ownedTokensIndex[lastTokenId] = tokenIndex; \r\n        }\r\n\r\n        \r\n        delete _ownedTokensIndex[tokenId];\r\n        delete _ownedTokens[from][lastTokenIndex];\r\n    }\r\n\r\n    \r\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\r\n        \r\n        \r\n\r\n        uint256 lastTokenIndex = _allTokens.length - 1;\r\n        uint256 tokenIndex = _allTokensIndex[tokenId];\r\n\r\n        \r\n        \r\n        \r\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\r\n\r\n        _allTokens[tokenIndex] = lastTokenId; \r\n        _allTokensIndex[lastTokenId] = tokenIndex; \r\n\r\n        \r\n        delete _allTokensIndex[tokenId];\r\n        _allTokens.pop();\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    \r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    \r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    \r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    \r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    \r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\nlibrary Counters {\r\n    struct Counter {\r\n        \r\n        \r\n        \r\n        uint256 _value; \r\n    }\r\n\r\n    function current(Counter storage counter) internal view returns (uint256) {\r\n        return counter._value;\r\n    }\r\n\r\n    function increment(Counter storage counter) internal {\r\n        unchecked {\r\n            counter._value += 1;\r\n        }\r\n    }\r\n\r\n    function decrement(Counter storage counter) internal {\r\n        uint256 value = counter._value;\r\n        require(value > 0, \"Counter: decrement overflow\");\r\n        unchecked {\r\n            counter._value = value - 1;\r\n        }\r\n    }\r\n\r\n    function reset(Counter storage counter) internal {\r\n        counter._value = 0;\r\n    }\r\n}\r\n\r\nabstract contract ReentrancyGuard {\r\n    \r\n    \r\n    \r\n    \r\n    \r\n\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    \r\n    modifier nonReentrant() {\r\n        \r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        \r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        \r\n        \r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\nlibrary Base64 {\r\n    string internal constant TABLE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\r\n\r\n    function encode(bytes memory data) internal pure returns (string memory) {\r\n        if (data.length == 0) return '';\r\n        \r\n        \r\n        string memory table = TABLE;\r\n\r\n        \r\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\r\n\r\n        \r\n        string memory result = new string(encodedLen + 32);\r\n\r\n        assembly {\r\n            \r\n            mstore(result, encodedLen)\r\n            \r\n            \r\n            let tablePtr := add(table, 1)\r\n            \r\n            \r\n            let dataPtr := data\r\n            let endPtr := add(dataPtr, mload(data))\r\n            \r\n            \r\n            let resultPtr := add(result, 32)\r\n            \r\n            \r\n            for {} lt(dataPtr, endPtr) {}\r\n            {\r\n               dataPtr := add(dataPtr, 3)\r\n               \r\n               \r\n               let input := mload(dataPtr)\r\n               \r\n               \r\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F)))))\r\n               resultPtr := add(resultPtr, 1)\r\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F)))))\r\n               resultPtr := add(resultPtr, 1)\r\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr( 6, input), 0x3F)))))\r\n               resultPtr := add(resultPtr, 1)\r\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(        input,  0x3F)))))\r\n               resultPtr := add(resultPtr, 1)\r\n            }\r\n            \r\n            \r\n            switch mod(mload(data), 3)\r\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\r\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\r\n        }\r\n        \r\n        return result;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    \r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    \r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    \r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            \r\n            \r\n            \r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    \r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    \r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    \r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    \r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    \r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    \r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    \r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    \r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    \r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\nlibrary Builder {\r\n    bytes private constant STRING_TABLE = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r\n\r\n    function randomValue(uint256 tokenId, uint256 seed, uint256 divide) internal pure returns (uint256) {\r\n        return SafeMath.mod(uint256(keccak256(abi.encodePacked(Strings.toString(SafeMath.mul(tokenId, seed))))), divide);\r\n    }\r\n\r\n    function getColor(uint256 tokenId, uint256 colorId) internal pure returns (string memory) {\r\n        uint256 base = Builder.randomValue(tokenId, colorId, 16777215);\r\n        return string(abi.encodePacked(\"#\", Builder.substring(Strings.toHexString(base), 2, 8)));\r\n    }\r\n    \r\n    function getCircle(uint256 tokenId, uint256 seed, string memory color) internal pure returns (string memory) {\r\n        string memory cxStr = Strings.toString(randomValue(tokenId, seed, 350));\r\n        string memory cyStr = Strings.toString(randomValue(tokenId, SafeMath.add(seed, 2), 350));\r\n        string memory size = Strings.toString(randomValue(tokenId, SafeMath.add(seed, 4), 150));\r\n        \r\n        return string(abi.encodePacked('<circle cx=\"', cxStr, '\" cy=\"', cyStr, '\" r=\"', size, '\" fill=\"', color, '\" />'));\r\n    }\r\n    \r\n    function getRect(uint256 tokenId, uint256 seed, string memory color) internal pure returns (string memory) {\r\n        string memory xStr = Strings.toString(randomValue(tokenId, seed, 350));\r\n        string memory yStr = Strings.toString(randomValue(tokenId, SafeMath.add(seed, 1), 350));\r\n        string memory wSize = Strings.toString(randomValue(tokenId, SafeMath.add(seed, 2), 150));\r\n        string memory hSize = Strings.toString(randomValue(tokenId, SafeMath.add(seed, 3), 150));\r\n        \r\n        return string(abi.encodePacked('<rect x=\"', xStr, '\" y=\"', yStr, '\" width=\"', wSize, '\" height=\"', hSize, '\" fill=\"', color, '\" />'));\r\n    }\r\n\r\n    function getFont(uint256 tokenId, uint256 seed) internal pure returns (string memory) {\r\n        uint256 str1 = randomValue(tokenId, seed, 25);\r\n        uint256 str2 = randomValue(tokenId, SafeMath.add(seed, 1), 25);\r\n        uint256 str3 = randomValue(tokenId, SafeMath.add(seed, 2), 25);\r\n        uint256 str4 = randomValue(tokenId, SafeMath.add(seed, 3), 25);\r\n        uint256 str5 = randomValue(tokenId, SafeMath.add(seed, 4), 25);\r\n        uint256 str6 = randomValue(tokenId, SafeMath.add(seed, 5), 25);\r\n        return string(abi.encodePacked(STRING_TABLE[str1], STRING_TABLE[str2], STRING_TABLE[str3], STRING_TABLE[str4], STRING_TABLE[str5], STRING_TABLE[str6]));\r\n    }\r\n    \r\n    \r\n    function substring(string memory str, uint startIndex, uint endIndex) internal pure returns (string memory) {\r\n        bytes memory strBytes = bytes(str);\r\n        bytes memory result = new bytes(endIndex-startIndex);\r\n        \r\n        for(uint i = startIndex; i < endIndex; i++) {\r\n            result[i-startIndex] = strBytes[i];\r\n        }\r\n        \r\n        return string(result);\r\n    }\r\n}\r\n\r\ncontract ChainArtefact_Greatsword is ERC721Enumerable, ReentrancyGuard, Ownable {\r\n\r\n    string private constant discription = 'Full-On-Chain Artefact Series. Greatsword Version. Engraved on the chain.';\r\n    string private constant namePrefix = 'ChainArtefact Greatsword #';\r\n    string private constant svgHeader = '<?xml version=\"1.0\" encoding=\"utf-8\"?><svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" width=\"1000px\" height=\"1000px\" viewBox=\"0 0 100 100\" style=\"enable-background:new 0 0 100 100;\" xml:space=\"preserve\">';\r\n    \r\n    string private constant effect = '<path class=\"effect\" d=\"M60.1,84.9v-1.7h-1.7v-1.5v-0.1v-1.7h-1.7h-0.1h-1.5v-1.5v-0.1v-1.5v-0.1v-1.5v-0.1v-1.7h-1.7v-1.5v-0.1v-1.5v-0.1v-1.7h-1.7V67v-0.1v-1.7H50v-1.7h-1.7v-1.7h-1.7v-1.5v-0.1v-1.7h-1.7v-1.7h-1.7v-1.7h-1.7h-0.1h-1.5v-1.7h-1.7v-1.7h-1.7V50h-1.7v-1.7h-1.7v-1.7h-1.7h-0.1h-1.5v-1.7h-1.7H28h-1.5v-1.7h-1.7v-1.7h-1.7H23h-1.5v-1.7h-1.7v-1.7h-1.7v-1.5v-0.1v-1.7h-1.7v-1.5v-0.1v-1.7h-1.7V30v-0.1v-1.5v-0.1v-1.7H13v-1.5V25v-1.5v-0.1v-1.5v-0.1v-1.5v-0.1v-1.5v-0.1v-1.5V17v-1.5v-0.1v-1.5h1.7v-1.7v-0.1v-1.5V9.9V8.4V8.3V6.7V6.6V5.1V4.9V3.3h-1.8V5v0.1v1.5v0.1v1.5h-1.7v1.7V10v1.5H9.9v1.7v0.1v1.5v0.1v1.5v0.1V18v0.1v1.5v0.1v1.5v0.1v1.5v0.1v1.5v0.1V26v0.1v1.7h1.7v1.5v0.1v1.5V31v1.5v0.1v1.5v0.1v1.5v0.1v1.5v0.1v1.7h1.7v1.5v0.1v1.7H15v1.5V44v1.7h1.7v1.7h1.7v1.5V49v1.7h1.7h0.1h1.5h0.1h1.5v1.7H25v1.7h1.7v1.7h1.7v1.7h1.7h0.1h1.5v1.7h1.7v1.7h1.7v1.7h1.7v1.7h1.7V66h1.7v1.7h1.7v1.5v0.1V71h1.7h0.1h1.5v1.5v0.1v1.7h1.7H47h1.5V76h1.7v1.7h1.7v1.7h1.7v1.7h1.7v1.7H57v1.5v0.1v1.7h1.7h0.1h1.5h0.1h1.7v-1.8h-2V84.9z M15.1,40.1L15.1,40.1v-1.6h1.5V40v0.1v1.5h-1.5V40.1z M40.1,64.9v-1.5h1.7v-1.7h1.5v1.5v0.1v1.5v0.1v1.5h-1.5v-1.7h-1.7V64.9z M36.7,56.6v-1.5h1.5v1.5v0.1v1.7h1.7v1.5V60v1.5v0.1v1.5h-1.5v-1.7h-1.7v-1.5v-0.1v-1.5v-0.1V56.6L36.7,56.6z M45.1,69.9v-1.5v-0.1v-1.5v-0.1v-1.5h1.5v1.5v0.1v1.7h1.7V70v0.1v1.5h-1.5h-0.1h-1.5v-1.5v-0.2H45.1z M51.6,71.7v1.5v0.1v1.5h-1.5v-1.5v-0.1v-1.5v-0.1v-1.5h1.5V71.7L51.6,71.7z M13.4,36.6v-1.5V35v-1.5h1.5V35v0.1v1.5v0.1v1.5h-1.5V36.6L13.4,36.6z M21.7,49.9h-0.1h-1.5v-1.5v-0.1v-1.7h-1.7v-1.5V45v-1.5v-0.1v-1.5h1.5v1.7h1.7v1.5v0.1v1.7h1.8v-1.7h1.5v1.7h1.7v1.5v0.1V50v0.1v1.5h-1.5v-1.7h-1.7h-0.1H21.7z M30.1,56.6v-1.7h-1.7v-1.5v-0.1v-1.5v-0.1v-1.5v-0.1v-1.5h1.5v1.7h1.7V52h1.7v1.7H35v1.5v0.1v1.5v0.1v1.5h-1.5v-1.7h-1.7h-0.1h-1.6V56.6z\"/>';\r\n    string private constant base = '<path class=\"base\" d=\"M80.1,88.3v-1.7h-1.7v-1.7h-1.7v-1.7H75v-1.7h-1.8v1.7h-1.7v1.7H70h-0.1h-1.5h-0.1h-1.5v-1.7h-1.7v-1.5v-0.1v-1.7h-1.7v-1.5v-0.1v-1.5v-0.1v-1.5v-0.1v-1.5v-0.1V72v-0.1v-1.5h1.7v-1.7h1.5h0.1h1.5h0.1H70V67h1.7v-1.7v-0.1v-1.5v-0.1v-1.5h1.7v-1.7h1.7v-1.8h-1.7h-0.1h-1.5h-0.1h-1.5h-0.1h-1.5h-0.1H67v-1.7h-1.7v-1.7h-1.7v-1.7h-1.7v-1.7h-1.7v-1.7h-1.7v-1.7h-1.7v-1.7h-1.7v-1.5v-0.1v-1.5v-0.1v-1.7h-1.8v1.7h-1.5V42v-0.1v-1.5v-0.1v-1.5v-0.1V37H50v1.7v0.1v1.5h-1.5v-1.5v-0.1v-1.5v-0.1v-1.7h-1.8v1.7h-1.5v-1.5v-0.1V34v-0.1v-1.7h-1.8v1.7h-1.5v-1.5v-0.1v-1.5v-0.1V29h-1.8v1.7h-1.5v-1.5v-0.1v-1.5v-0.1v-1.7h-1.8v1.7h-1.5V26v-0.1v-1.5v-0.1v-1.7h-1.8v1.7H32v-1.5v-0.1v-1.5v-0.1v-1.7h-1.8v1.7h-1.5v-1.5v-0.1V18v-0.1v-1.7h-1.8v1.7h-1.5v-1.7h-1.7v-1.7H22v-1.7h-1.8v1.7v0.1v1.5v0.1v1.5v0.1v1.5v0.1v1.5V21v1.5v0.1v1.7h1.7v1.5v0.1v1.7h1.7v1.5v0.1v1.7h1.7v1.7H27v1.7h1.7V36h1.7v1.7h1.7h0.1h1.5v1.7h1.7v1.5V41v1.5v0.1v1.5v0.1v1.7h1.7v1.7h1.7v1.7h1.7V51h1.7h0.1h1.5v1.7h1.7h0.1h1.5v1.7h1.7v1.7h1.7v1.7h1.7v1.7h1.7v1.7h1.7v1.5v0.1v1.7h1.7V66v0.1v1.5v0.1v1.5v0.1v1.5v0.1v1.5v0.1V74v0.1v1.5v0.1v1.5v0.1V79H59v1.5v0.1v1.5v0.1v1.7h1.7v1.7h1.7v1.7h1.7V89h1.7v1.7h1.7h0.1h1.5h0.1h1.5h0.1h1.5v1.7H74h0.1h1.5h0.1h1.7v-1.7h1.5H79h1.5h0.1h1.7v-1.8h-2.2V88.3z M41.6,46.6h-1.5v-1.7h-1.7v-1.5h1.7v-1.7v-0.1v-1.5V40v-1.5h1.5V40v0.1v1.5v0.1v1.5v0.1v1.5v0.1V46.6z M31.6,26.6v0.1v1.5v0.1v1.5v0.1v1.5h-1.5v-1.5v-0.1v-1.5v-0.1v-1.5v-0.1v-1.5h1.5V26.6z M46.7,48.4L46.7,48.4v-1.6v-0.1v-1.5v-0.1v-1.5h1.5v1.5v0.1v1.5v0.1v1.5v0.1v1.5h-1.5V48.4z M36.7,41.6v-1.5V40v-1.5v-0.1v-1.5v-0.1v-1.5v-0.1v-1.5h1.5v1.5v0.1v1.5v0.1v1.5v0.1V40v0.1v1.5v0.1v1.5h-1.5V41.6L36.7,41.6z M41.7,48.3v-1.5h1.5v1.5H41.7z\"/>';\r\n    string private constant orb = '<polygon class=\"orb\" points=\"66.7,63.3 66.7,61.7 65,61.7 65,60 63.3,60 63.3,61.7 61.7,61.7 61.7,63.3 60,63.3 60,65 61.6,65 61.6,66.7 63.3,66.7 63.3,68.4 65,68.4 65,66.7 66.7,66.7 66.7,65 68.3,65 68.3,63.3 \"/><rect x=\"63.3\" y=\"61.7\" class=\"st3\" width=\"1.7\" height=\"1.7\"/><polygon class=\"st4\" points=\"63.4,66.6 63.4,65 61.6,65 61.6,66.7 63.3,66.7 63.3,68.4 65,68.4 65,66.6 \"/>';\r\n    string private constant core = '<polygon class=\"core\" points=\"65.2,49.9 65.2,50.1 65.2,51.6 65.2,51.7 65.2,53.3 65.2,53.4 65.2,54.9 65.2,55.1 65.2,56.6 65.2,56.7 65.2,58.4 63.4,58.4 63.4,56.7 61.7,56.7 61.7,55.1 60.1,55.1 60.1,53.4 58.5,53.4 58.4,53.4 56.7,53.4 56.7,51.6 58.4,51.6 58.5,51.6 60.1,51.6 60.1,49.9 61.9,49.9 61.9,51.6 63.4,51.6 63.4,50.1 63.4,49.9 63.4,48.3 65.2,48.3 \"/><polygon class=\"core\" points=\"55.1,63.3 55.1,61.7 55.1,61.6 55.1,59.9 53.4,59.9 53.4,58.3 51.7,58.3 51.7,56.6 50.1,56.6 50.1,54.9 48.4,54.9 48.4,53.4 48.4,53.3 48.4,51.6 46.7,51.6 46.7,49.9 45.1,49.9 45.1,48.3 43.4,48.3 43.3,48.3 41.7,48.3 41.7,46.6 40.1,46.6 40.1,44.9 38.4,44.9 38.4,43.3 36.7,43.3 36.7,41.7 36.7,41.6 36.7,39.9 35.1,39.9 35.1,38.3 33.4,38.3 33.4,36.6 31.7,36.6 31.6,36.6 30.1,36.6 30.1,34.9 28.4,34.9 28.4,33.3 26.7,33.3 26.7,31.6 25.1,31.6 25.1,29.9 23.4,29.9 23.4,28.4 23.4,28.3 23.4,26.6 21.7,26.6 21.7,25.1 21.7,24.9 21.7,23.3 20.1,23.3 20.1,21.7 20.1,21.6 20.1,20.1 20.1,19.9 20.1,18.4 20.1,18.3 20.1,16.7 20.1,16.6 20.1,15.1 20.1,14.9 20.1,13.4 20.1,13.3 20.1,11.7 21.7,11.7 21.7,9.9 20.1,9.9 20.1,8.3 18.4,8.3 18.4,6.6 16.7,6.6 16.7,4.9 14.9,4.9 14.9,6.6 14.9,6.7 14.9,8.3 14.9,8.4 14.9,9.9 14.9,10.1 14.9,11.6 14.9,11.7 14.9,13.3 13.3,13.3 13.3,14.9 13.3,15.1 13.3,16.6 13.3,16.7 13.3,18.3 13.3,18.4 13.3,19.9 13.3,20.1 13.3,21.6 13.3,21.7 13.3,23.3 13.3,23.4 13.3,24.9 13.3,25.1 13.3,26.7 14.9,26.7 14.9,28.3 14.9,28.4 14.9,29.9 14.9,30.1 14.9,31.7 16.6,31.7 16.6,33.3 16.6,33.4 16.6,35.1 18.3,35.1 18.3,36.6 18.3,36.7 18.3,38.4 19.9,38.4 19.9,40.1 21.6,40.1 21.6,41.7 23.3,41.7 23.4,41.7 24.9,41.7 24.9,43.4 26.6,43.4 26.6,45.1 28.3,45.1 28.4,45.1 29.9,45.1 29.9,46.7 31.6,46.7 31.7,46.7 33.3,46.7 33.3,48.4 34.9,48.4 34.9,50.1 36.6,50.1 36.6,51.7 38.3,51.7 38.3,53.4 39.9,53.4 39.9,55.1 41.6,55.1 41.7,55.1 43.3,55.1 43.3,56.7 44.9,56.7 44.9,58.4 46.6,58.4 46.6,59.9 46.6,60.1 46.6,61.7 48.3,61.7 48.3,63.4 49.9,63.4 49.9,65.1 51.6,65.1 51.6,66.6 51.6,66.7 51.6,68.4 53.3,68.4 53.3,69.9 53.3,70.1 53.3,71.6 53.3,71.7 53.3,73.4 54.9,73.4 54.9,74.9 54.9,75.1 54.9,76.7 56.7,76.7 56.7,75.1 56.7,74.9 56.7,73.4 56.7,73.3 56.7,71.7 56.7,71.6 56.7,70.1 56.7,69.9 56.7,68.4 56.7,68.3 56.7,66.7 56.7,66.6 56.7,65.1 56.7,64.9 56.7,63.3 \"/>';\r\n    string private constant mochite = '<polygon class=\"mochite\" points=\"81.7,83.3 81.7,81.7 81.7,81.6 81.7,79.9 80.1,79.9 80.1,78.3 78.4,78.3 78.4,76.6 76.7,76.6 76.7,74.9 75.1,74.9 75.1,73.3 73.4,73.3 73.4,71.6 71.7,71.6 71.7,70.1 71.7,69.9 71.7,68.4 73.4,68.4 73.4,66.7 73.4,66.6 73.4,65.1 73.4,64.9 73.4,63.4 73.4,63.3 73.4,61.6 71.6,61.6 71.6,63.3 71.6,63.4 71.6,64.9 71.6,65.1 71.6,66.6 69.9,66.6 69.9,68.3 68.4,68.3 68.3,68.3 66.7,68.3 66.6,68.3 64.9,68.3 64.9,69.9 63.3,69.9 63.3,71.6 63.3,71.7 63.3,73.4 65.1,73.4 65.1,71.7 66.6,71.7 66.7,71.7 68.3,71.7 68.3,73.4 69.9,73.4 69.9,75.1 71.6,75.1 71.6,76.7 73.3,76.7 73.3,78.4 74.9,78.4 74.9,80.1 76.6,80.1 76.6,81.6 76.6,81.7 76.6,83.3 76.6,83.4 76.6,85.1 78.3,85.1 78.3,86.7 79.9,86.7 79.9,88.4 81.6,88.4 81.7,88.4 83.4,88.4 83.4,86.7 83.4,86.6 83.4,85.1 83.4,84.9 83.4,83.3 \"/>';\r\n\r\n    string private constant svhfooter = '</svg>';\r\n    \r\n    function tokenURI(uint256 tokenId) override public pure returns (string memory) {\r\n        require(tokenId > 0 && tokenId < 10001, \"Token ID invalid\");\r\n        \r\n        string[5] memory colors;\r\n        colors[0] = Builder.getColor(tokenId * 9, 1); \r\n        colors[1] = Builder.getColor(tokenId * 7, 2); \r\n        colors[2] = Builder.getColor(tokenId * 5, 3); \r\n        colors[3] = Builder.getColor(tokenId * 3, 4); \r\n        colors[4] = Builder.getColor(tokenId * 1, 5); \r\n        \r\n        string[12] memory styles;\r\n        styles[1] = '<style type=\"text/css\">.st3{fill:#FFFFFF;}.st4{opacity:0.65;fill:#606060;}.effect{fill:';\r\n        styles[2] = colors[0];\r\n        styles[3] = ';}.base{fill:';\r\n        styles[4] = colors[1];\r\n        styles[5] = ';}.orb{fill:';\r\n        styles[6] = colors[2];\r\n        styles[7] = ';}.core{fill:';\r\n        styles[8] = colors[3];\r\n        styles[9] = ';}.mochite{fill:';\r\n        styles[10] = colors[4];\r\n        styles[11] = ';}.title { fill: #fefefe; font-family: serif; font-size: 5px; }</style><rect width=\"100%\" height=\"100%\" fill=\"#101010\" />';\r\n        \r\n        uint256 rnd = Builder.randomValue(tokenId * 20, 8, 100);\r\n        \r\n        string memory buildSet = string(abi.encodePacked(svgHeader, styles[0], styles[1], styles[2], styles[3], styles[4], styles[5]));\r\n        buildSet = string(abi.encodePacked(buildSet, styles[6], styles[7], styles[8], styles[9], styles[10], styles[11]));\r\n        \r\n        uint8 effectint = 0;\r\n        if( rnd < 10 ){\r\n            buildSet = string(abi.encodePacked(buildSet, effect));\r\n            effectint = 1;\r\n        }\r\n        \r\n        string memory text = string(abi.encodePacked('<text x=\"4\" y=\"99\" class=\"title\">', namePrefix, Strings.toString(tokenId), '</text>'));\r\n        \r\n        return createJSON(string(abi.encodePacked(buildSet, base, orb, core, mochite, text, svhfooter)), string(abi.encodePacked(namePrefix, Strings.toString(tokenId))), discription, effectint, colors);\r\n    }\r\n    \r\n    function claim(uint256 tokenId) public nonReentrant {\r\n        require(tokenId > 0 && tokenId < 8001, \"Token ID invalid\");\r\n        _safeMint(_msgSender(), tokenId);\r\n    }\r\n    \r\n    function ownerClaim(uint256 tokenId) public nonReentrant onlyOwner {\r\n        require(tokenId > 8000 && tokenId < 10001, \"Token ID invalid\");\r\n        _safeMint(owner(), tokenId);\r\n    }\r\n    \r\n    function createJSON(string memory output, string memory mainString, string memory discriptionStr, uint8 effectint, string[5] memory colors) internal pure returns (string memory) {\r\n        string[13] memory attr;\r\n        attr[0] = '\"attributes\":[{\"trait_type\":\"Effect\",\"value\":\"';\r\n        attr[1] = Strings.toString(effectint);\r\n        attr[2] = '\"},{\"trait_type\":\"EffectColor\",\"value\":\"';\r\n        attr[3] = colors[0];\r\n        attr[4] = '\"},{\"trait_type\":\"BaseColor\",\"value\":\"';\r\n        attr[5] = colors[1];\r\n        attr[6] = '\"},{\"trait_type\":\"OrbColor\",\"value\":\"';\r\n        attr[7] = colors[2];\r\n        attr[8] = '\"},{\"trait_type\":\"CoreColor\",\"value\":\"';\r\n        attr[9] = colors[3];\r\n        attr[10] = '\"},{\"trait_type\":\"MochiteColor\",\"value\":\"';\r\n        attr[11] = colors[4];\r\n        attr[12] = '\"}],';\r\n        \r\n        string memory attrStr = string(abi.encodePacked(attr[0], attr[1], attr[2], attr[3], attr[4], attr[5]));\r\n        attrStr = string(abi.encodePacked(attrStr, attr[6], attr[7], attr[8], attr[9], attr[10], attr[11], attr[12]));\r\n        \r\n        string memory out = Base64.encode(bytes(output));\r\n        string memory json = Base64.encode(bytes(string(abi.encodePacked('{\"name\": \"', mainString, '\", \"description\": \"', discriptionStr, '\", ', attrStr, ' \"image\": \"data:image/svg+xml;base64,', out, '\"}'))));\r\n        \r\n        return string(abi.encodePacked('data:application/json;base64,', json));\r\n    }\r\n\r\n    constructor() ERC721(\"ChainArtefactGreatsword\", \"CAG\") Ownable() {}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ChainArtefact_Greatsword", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e0a6089f024074f1067cfd7fd8e4f9440c41fa8c63f649669fe6e58da47f05ed"}