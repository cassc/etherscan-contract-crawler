{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2023-04-24\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.19;\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(address indexed sender, uint amount0In, uint amount1In, uint amount0Out, uint amount1Out, address indexed to);\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n/**\r\n    * @dev Provides information about the current execution context, including the\r\n    * sender of the transaction and its data. While these are generally available\r\n    * via msg.sender and msg.data, they should not be accessed in such a direct\r\n    * manner, since when dealing with meta-transactions the account sending and\r\n    * paying for execution may not be the actual sender (as far as an application\r\n    * is concerned).\r\n    *\r\n    * This contract is only required for intermediate, library-like contracts.\r\n*/\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n    * @title Counters\r\n    * @author Matt Condon (@shrugs)\r\n    * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\r\n    * of elements in a mapping, issuing BEP721 ids, or counting request ids.\r\n    *\r\n    * Include with `using Counters for Counters.Counter;`\r\n*/\r\nlibrary Counters {\r\n    struct Counter {\r\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\r\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\r\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\r\n        uint256 _value; // default: 0\r\n    }\r\n\r\n    function current(Counter storage counter) internal view returns (uint256) {\r\n        return counter._value;\r\n    }\r\n\r\n    function increment(Counter storage counter) internal {\r\n        unchecked {\r\n            counter._value += 1;\r\n        }\r\n    }\r\n\r\n    function decrement(Counter storage counter) internal {\r\n        uint256 value = counter._value;\r\n        require(value > 0, \"Counter: decrement overflow\");\r\n        unchecked {\r\n            counter._value = value - 1;\r\n        }\r\n    }\r\n\r\n    function reset(Counter storage counter) internal {\r\n        counter._value = 0;\r\n    }\r\n}\r\n\r\n/**\r\n    * @dev Contract module which provides a basic access control mechanism, where\r\n    * there is an account (an owner) that can be granted exclusive access to\r\n    * specific functions.\r\n    *\r\n    * By default, the owner account will be the one that deploys the contract. This\r\n    * can later be changed with {transferOwnership}.\r\n    *\r\n    * This module is used through inheritance. It will make available the modifier\r\n    * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n    * the owner.\r\n*/\r\ncontract Ownable is Context {\r\n    address public _owner;\r\n\r\n    /**\r\n    * @dev Initializes the contract setting the deployer as the initial owner.\r\n    */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the address of the current owner.\r\n    */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Leaves the contract without owner. It will not be possible to call\r\n    * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n    *\r\n    * NOTE: Renouncing ownership will leave the contract without an owner,\r\n    * thereby removing any functionality that is only available to the owner.\r\n    */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n    * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n    * Can only be called by the current owner.\r\n    */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n    * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n    * Internal function without access restriction.\r\n    */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n}\r\n\r\n/**\r\n    * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n    * checks.\r\n    *\r\n    * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n    * in bugs, because programmers usually assume that an overflow raises an\r\n    * error, which is the standard behavior in high level programming languages.\r\n    * `SafeMath` restores this intuition by reverting the transaction when an\r\n    * operation overflows.\r\n    *\r\n    * Using this library instead of the unchecked operations eliminates an entire\r\n    * class of bugs, so it's recommended to use it always.\r\n*/\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Returns the addition of two unsigned integers, reverting on\r\n    * overflow.\r\n    *\r\n    * Counterpart to Solidity's `+` operator.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - Addition cannot overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the subtraction of two unsigned integers, reverting on\r\n    * overflow (when the result is negative).\r\n    *\r\n    * Counterpart to Solidity's `-` operator.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - Subtraction cannot overflow.\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n    * overflow (when the result is negative).\r\n    *\r\n    * Counterpart to Solidity's `-` operator.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - Subtraction cannot overflow.\r\n    */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the multiplication of two unsigned integers, reverting on\r\n    * overflow.\r\n    *\r\n    * Counterpart to Solidity's `*` operator.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - Multiplication cannot overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the integer division of two unsigned integers. Reverts on\r\n    * division by zero. The result is rounded towards zero.\r\n    *\r\n    * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n    * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n    * uses an invalid opcode to revert (consuming all remaining gas).\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - The divisor cannot be zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n    * division by zero. The result is rounded towards zero.\r\n    *\r\n    * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n    * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n    * uses an invalid opcode to revert (consuming all remaining gas).\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - The divisor cannot be zero.\r\n    */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n    * Reverts when dividing by zero.\r\n    *\r\n    * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n    * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n    * invalid opcode to revert (consuming all remaining gas).\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - The divisor cannot be zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n    * Reverts with custom message when dividing by zero.\r\n    *\r\n    * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n    * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n    * invalid opcode to revert (consuming all remaining gas).\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - The divisor cannot be zero.\r\n    */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n* @dev Collection of functions related to the address type\r\n*/\r\nlibrary Address {\r\n    /**\r\n    * @dev Returns true if `account` is a contract.\r\n    *\r\n    * [IMPORTANT]\r\n    * ====\r\n    * It is unsafe to assume that an address for which this function returns\r\n    * false is an externally-owned account (EOA) and not a contract.\r\n    *\r\n    * Among others, `isContract` will return false for the following\r\n    * types of addresses:\r\n    *\r\n    *  - an externally-owned account\r\n    *  - a contract in construction\r\n    *  - an address where a contract will be created\r\n    *  - an address where a contract lived, but was destroyed\r\n    * ====\r\n    */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n    * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n    * `recipient`, forwarding all available gas and reverting on errors.\r\n    *\r\n    * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n    * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n    * imposed by `transfer`, making them unable to receive funds via\r\n    * `transfer`. {sendValue} removes this limitation.\r\n    *\r\n    * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n    *\r\n    * IMPORTANT: because control is transferred to `recipient`, care must be\r\n    * taken to not create reentrancy vulnerabilities. Consider using\r\n    * {ReentrancyGuard} or the\r\n    * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n    */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n    * @dev Performs a Solidity function call using a low level `call`. A\r\n    * plain`call` is an unsafe replacement for a function call: use this\r\n    * function instead.\r\n    *\r\n    * If `target` reverts with a revert reason, it is bubbled up by this\r\n    * function (like regular Solidity function calls).\r\n    *\r\n    * Returns the raw returned data. To convert to the expected return value,\r\n    * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `target` must be a contract.\r\n    * - calling `target` with `data` must not revert.\r\n    *\r\n    * _Available since v3.1._\r\n    */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n    return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n    * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n    * `errorMessage` as a fallback revert reason when `target` reverts.\r\n    *\r\n    * _Available since v3.1._\r\n    */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n    * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n    * but also transferring `value` wei to `target`.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - the calling contract must have an ETH balance of at least `value`.\r\n    * - the called Solidity function must be `payable`.\r\n    *\r\n    * _Available since v3.1._\r\n    */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n    * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n    * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n    *\r\n    * _Available since v3.1._\r\n    */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n* @dev Interface of the BEP20 standard as defined in the EIP.\r\n*/\r\ninterface IBEP20 {\r\n    /**\r\n    * @dev Returns the amount of tokens in existence.\r\n    */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n    * @dev Returns the amount of tokens owned by `account`.\r\n    */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n    * @dev Moves `amount` tokens from the caller's account to `to`.\r\n    *\r\n    * Returns a boolean value indicating whether the operation succeeded.\r\n    *\r\n    * Emits a {Transfer} event.\r\n    */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n    * @dev Returns the remaining number of tokens that `spender` will be\r\n    * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n    * zero by default.\r\n    *\r\n    * This value changes when {approve} or {transferFrom} are called.\r\n    */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n    * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n    *\r\n    * Returns a boolean value indicating whether the operation succeeded.\r\n    *\r\n    * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n    * that someone may use both the old and the new allowance by unfortunate\r\n    * transaction ordering. One possible solution to mitigate this race\r\n    * condition is to first reduce the spender's allowance to 0 and set the\r\n    * desired value afterwards:\r\n    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    *\r\n    * Emits an {Approval} event.\r\n    */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n    * @dev Moves `amount` tokens from `from` to `to` using the\r\n    * allowance mechanism. `amount` is then deducted from the caller's\r\n    * allowance.\r\n    *\r\n    * Returns a boolean value indicating whether the operation succeeded.\r\n    *\r\n    * Emits a {Transfer} event.\r\n    */\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n    * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n    * another (`to`).\r\n    *\r\n    * Note that `value` may be zero.\r\n    */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n    * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n    * a call to {approve}. `value` is the new allowance.\r\n    */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n    * @dev Implementation of the {IBEP20} interface.\r\n    *\r\n    * This implementation is agnostic to the way tokens are created. This means\r\n    * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n    * For a generic mechanism see {BEP20PresetMinterPauser}.\r\n    *\r\n    * instead returning `false` on failure. This behavior is nonetheless\r\n    * conventional and does not conflict with the expectations of BEP20\r\n    * applications.\r\n    *\r\n    * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n    * This allows applications to reconstruct the allowance for all accounts just\r\n    * by listening to said events. Other implementations of the EIP may not emit\r\n    * these events, as it isn't required by the specification.\r\n    *\r\n    * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n    * functions have been added to mitigate the well-known issues around setting\r\n    * allowances. See {IBEP20-approve}.\r\n*/\r\nabstract contract BEP20 is Context, IBEP20 {\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    uint256 internal _totalSupply;\r\n\r\n    /**\r\n    * @dev See {IBEP20-totalSupply}.\r\n    */\r\n    function totalSupply() public view virtual returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n    * @dev See {IBEP20-balanceOf}.\r\n    */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n    * @dev See {IBEP20-transfer}.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `to` cannot be the zero address.\r\n    * - the caller must have a balance of at least `amount`.\r\n    */\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev See {IBEP20-allowance}.\r\n    */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n    * @dev See {IBEP20-approve}.\r\n    *\r\n    * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n    * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `spender` cannot be the zero address.\r\n    */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev See {IBEP20-transferFrom}.\r\n    *\r\n    * Emits an {Approval} event indicating the updated allowance. This is not\r\n    * required by the EIP. See the note at the beginning of {BEP20}.\r\n    *\r\n    * NOTE: Does not update the allowance if the current allowance\r\n    * is the maximum `uint256`.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `from` and `to` cannot be the zero address.\r\n    * - `from` must have a balance of at least `amount`.\r\n    * - the caller must have allowance for ``from``'s tokens of at least\r\n    * `amount`.\r\n    */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n    *\r\n    * This is an alternative to {approve} that can be used as a mitigation for\r\n    * problems described in {IBEP20-approve}.\r\n    *\r\n    * Emits an {Approval} event indicating the updated allowance.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `spender` cannot be the zero address.\r\n    */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n    *\r\n    * This is an alternative to {approve} that can be used as a mitigation for\r\n    * problems described in {IBEP20-approve}.\r\n    *\r\n    * Emits an {Approval} event indicating the updated allowance.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `spender` cannot be the zero address.\r\n    * - `spender` must have allowance for the caller of at least\r\n    * `subtractedValue`.\r\n    */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = _allowances[owner][spender];\r\n        require(currentAllowance >= subtractedValue, \"BEP20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Moves `amount` of tokens from `sender` to `recipient`.\r\n    *\r\n    * This internal function is equivalent to {transfer}, and can be used to\r\n    * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n    *\r\n    * Emits a {Transfer} event.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `from` cannot be the zero address.\r\n    * - `to` cannot be the zero address.\r\n    * - `from` must have a balance of at least `amount`.\r\n    */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"BEP20: transfer from the zero address\");\r\n        require(to != address(0), \"BEP20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"BEP20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n        }\r\n        _balances[to] += amount;\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n    * the total supply.\r\n    *\r\n    * Emits a {Transfer} event with `from` set to the zero address.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `account` cannot be the zero address.\r\n    */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"BEP20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n    * @dev Destroys `amount` tokens from `account`, reducing the\r\n    * total supply.\r\n    *\r\n    * Emits a {Transfer} event with `to` set to the zero address.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `account` cannot be the zero address.\r\n    * - `account` must have at least `amount` tokens.\r\n    */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"BEP20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"BEP20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n    * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n    *\r\n    * This internal function is equivalent to `approve`, and can be used to\r\n    * e.g. set automatic allowances for certain subsystems, etc.\r\n    *\r\n    * Emits an {Approval} event.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `owner` cannot be the zero address.\r\n    * - `spender` cannot be the zero address.\r\n    */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"BEP20: approve from the zero address\");\r\n        require(spender != address(0), \"BEP20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n    * @dev Spend `amount` form the allowance of `owner` toward `spender`.\r\n    *\r\n    * Does not update the allowance amount in case of infinite allowance.\r\n    * Revert if not enough allowance is available.\r\n    *\r\n    * Might emit an {Approval} event.\r\n    */\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"BEP20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Hook that is called before any transfer of tokens. This includes\r\n    * minting and burning.\r\n    *\r\n    * Calling conditions:\r\n    *\r\n    * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n    * will be transferred to `to`.\r\n    * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n    * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n    * - `from` and `to` are never both zero.\r\n    *\r\n    * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n    */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n    * @dev Hook that is called after any transfer of tokens. This includes\r\n    * minting and burning.\r\n    *\r\n    * Calling conditions:\r\n    *\r\n    * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n    * has been transferred to `to`.\r\n    * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n    * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n    * - `from` and `to` are never both zero.\r\n    *\r\n    * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n    */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\ncontract AevMultiSale is BEP20, Ownable{\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    bool _pause = false;\r\n    modifier isPausable() {\r\n        require(!_pause, \"The Contract is paused. Presale is paused\");\r\n        _;\r\n    }\r\n\r\n    struct Receivers { \r\n        address wallet;\r\n        uint256 amount;\r\n    }\r\n    mapping (address => uint) private pendingBalance;\r\n\r\n    bool private inTransfer;\r\n    uint256 private  _transaction_fee;\r\n    uint256 private  _withd_fee;\r\n    address private bnb_Address;\r\n    address private token_Address;\r\n    address private bnbToken_reserv;\r\n    address private _withOwner_Address;\r\n    address private _companyAdress;\r\n    uint256 private _DECIMALFACTOR = 10 ** uint256(18);\r\n\r\n    constructor (\r\n        uint256 _transactionFee,\r\n        address companyAddress,\r\n        address _token_Address,\r\n        address wBNBAddress,\r\n        address bnbTokenReserv\r\n    ){\r\n        _transaction_fee = _transactionFee;\r\n        _companyAdress = companyAddress;\r\n        token_Address = _token_Address;\r\n        bnb_Address = wBNBAddress;\r\n        bnbToken_reserv = bnbTokenReserv;\r\n        _owner = msg.sender;\r\n        _withOwner_Address = msg.sender;\r\n    }\r\n\r\n    function totalBalance() external view returns(uint256) {\r\n        return payable(address(this)).balance;\r\n    }\r\n\r\n    function totalTokens() external view returns(uint256) {\r\n        IBEP20 ContractAdd = IBEP20(token_Address);\r\n        return ContractAdd.balanceOf(address(this));\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return pendingBalance[account];\r\n    }\r\n\r\n    function contractStatusPause() public view returns (bool) {\r\n        return _pause;\r\n    }\r\n\r\n    function getBnbTokenReservAddress() public view returns (address) {\r\n        return bnbToken_reserv;\r\n    }\r\n\r\n    function getTransactionFee() public view returns (uint256) {\r\n        return _transaction_fee;\r\n    }\r\n\r\n    function getWithdrawFee() public view returns (uint256) {\r\n        return _withd_fee;\r\n    }\r\n\r\n    /**\r\n     * @dev Enables the contract to receive BNB.\r\n     */\r\n    receive() external payable {}\r\n    fallback() external payable {}\r\n\r\n    /*\r\n    * @dev System of Marketplace transactions\r\n    * @param Recipient, Amount, Sender\r\n    */    \r\n    function transferFromUser(address recipient, uint256 amount) public isPausable() {\r\n        address sender = _msgSender();\r\n        require(balanceOf(sender) > 0 && amount > 0 && amount <= balanceOf(sender), \"You do not have enough balance for this Transaction\");\r\n        if(!inTransfer){\r\n            inTransfer = true;\r\n                uint256 fee = amount.mul(_transaction_fee).div(100);\r\n                pendingBalance[sender] -= amount;\r\n                pendingBalance[recipient] += amount.sub(fee);\r\n                pendingBalance[_companyAdress] += fee;\r\n                emit TransferUser(sender, recipient, amount);\r\n            inTransfer = false;\r\n        }\r\n    }\r\n    \r\n    /*\r\n    * @dev System of Swap tokens in account User\r\n    * @param Amount, Sender\r\n    */\r\n    function transferSwapUser(uint256 amount) public isPausable() {\r\n        address sender = _msgSender();\r\n        require(amount > 0 && balanceOf(sender) > 0 && amount <= balanceOf(sender), \"You do not have enough balance for this Transaction\");\r\n        if(!inTransfer){\r\n            inTransfer = true;\r\n                pendingBalance[sender] -= amount;\r\n                emit Transfer_Swap_User(sender, amount);\r\n            inTransfer = false;\r\n        }\r\n    }\r\n\r\n    /*\r\n    * @dev System of Buy with BNB Ou Tokens\r\n    * @param token, amount, boxType\r\n    */\r\n    function buyWithToken(string memory tokenName, uint256 tokenPrice) public isPausable() {\r\n        require(tokenPrice > 0, \"Insufficient amount for this transaction\");\r\n        IBEP20 ContractToken = IBEP20(token_Address);\r\n        uint256 dexBalance2 = ContractToken.balanceOf(msg.sender);\r\n        require(tokenPrice > 0 && tokenPrice <= dexBalance2, \"Insufficient amount for this transaction\");\r\n        require(ContractToken.transferFrom(msg.sender, address(this), tokenPrice), \"A transaction error has occurred. Check for approval.\");\r\n        \r\n        emit Received(msg.sender, tokenPrice, tokenName);\r\n    }\r\n\r\n    /*\r\n    * @dev System of Buy with BNB Ou Tokens\r\n    * @param token, amount, boxType\r\n    */\r\n    function buyWithBNB(uint256 tokenPrice) public payable isPausable() {\r\n        require(tokenPrice > 0, \"Insufficient amount for this transaction\");\r\n        uint256 amount = getpriceBNB(tokenPrice);\r\n        require(amount > 0 && msg.value >= amount, \"Insufficient amount for this transaction\");\r\n        if(_companyAdress != address(this)){\r\n            (bool tmpSuccess, ) = payable(_companyAdress).call{\r\n                value: amount,\r\n                gas: 21000\r\n            }(\"\");\r\n            tmpSuccess = false;\r\n        }\r\n\r\n        emit Received(msg.sender, tokenPrice, \"BNB\");\r\n    }\r\n\r\n    /*\r\n    * @dev gets the price of BNB per BUSD.\r\n    */\r\n    function getpriceBNB(uint256 amount) public view virtual returns (uint256) {\r\n        require(amount > 0, \"Value is Invalid\");\r\n        IUniswapV2Pair _tokenPair = IUniswapV2Pair(bnbToken_reserv);\r\n        if(bnb_Address == _tokenPair.token0()){\r\n            (uint256 ResBNB, uint256 ResBUSD,) = _tokenPair.getReserves();\r\n            uint256 pricebnb = ResBUSD.div(ResBNB);\r\n            return (amount).div(pricebnb); // return amount of BNB needed to buy\r\n        }else{\r\n            (uint256 ResBUSD, uint256 ResBNB,) = _tokenPair.getReserves();\r\n            uint256 pricebnb = ResBUSD.div(ResBNB);\r\n            return (amount).div(pricebnb); // return amount of BNB needed to buy\r\n        }\r\n    }\r\n\r\n    function DepositOwner(address wallet, uint256 amount) public onlyOwner {\r\n        pendingBalance[wallet] += amount;\r\n        emit DepositeUser(wallet, amount);\r\n    }\r\n\r\n    function DepositUser(uint256 amount) public isPausable() {\r\n        address wallet = msg.sender;\r\n        require(wallet != address(0), \"To make the withdrawal, you need to register a valid address.\");\r\n        IBEP20 ContractToken = IBEP20(token_Address);\r\n        uint256 dexBalance = ContractToken.balanceOf(msg.sender);\r\n        require(amount > 0 && amount <= dexBalance, \"Insufficient amount for this transaction\");\r\n        require(ContractToken.transferFrom(wallet, address(this), amount), \"A transaction error has occurred. Check for approval.\");\r\n        pendingBalance[wallet] += amount;\r\n        emit DepositeUser(wallet, amount);\r\n    }\r\n\r\n    function multWithdOwner(Receivers[] memory wallets) public onlyOwner {\r\n        require(wallets.length <= 100, \"Number of items cannot exceed 100\");\r\n        for ( uint i = 0; i < wallets.length; i++ ){\r\n            uint256 amount = wallets[i].amount;\r\n            require(balanceOf(wallets[i].wallet) > 0 && amount > 0 && amount <= balanceOf(wallets[i].wallet), \"You do not have enough balance for this withdrawal\");\r\n            if(amount >= balanceOf(wallets[i].wallet))amount = balanceOf(wallets[i].wallet);\r\n            pendingBalance[wallets[i].wallet] -= amount;\r\n            emit WithdrawnUser(wallets[i].wallet, amount);\r\n        }\r\n    }\r\n\r\n    function WithdOwner(address wallet, uint256 amount) public onlyOwner {\r\n        require(balanceOf(wallet) > 0 && amount > 0 && amount <= balanceOf(wallet), \"You do not have enough balance for this withdrawal\");\r\n        if(amount >= balanceOf(wallet))amount = balanceOf(wallet);\r\n        pendingBalance[wallet] -= amount;\r\n        emit WithdrawnUser(wallet, amount);\r\n    }\r\n\r\n    function WithdUser(uint256 amount) public isPausable() {\r\n        uint256 withFee = amount.mul(_withd_fee).div(100);\r\n        amount = amount-withFee;\r\n        address wallet = msg.sender;\r\n        require(wallet != address(0), \"To make the withdrawal, you need to register a valid address.\");\r\n        require(balanceOf(wallet) > 0 && amount > 0 && amount <= balanceOf(wallet), \"You do not have enough balance for this withdrawal\");\r\n        if(amount >= balanceOf(wallet))amount = balanceOf(wallet);        \r\n        IBEP20 ContractAdd = IBEP20(token_Address);\r\n        require(ContractAdd.transfer(wallet, amount), \"A transaction error has occurred. Try again.\");\r\n        pendingBalance[wallet] -= amount;\r\n\r\n        emit WithdrawnUser(wallet, amount);\r\n    }\r\n    \r\n    /**\r\n     * @dev Change fee amounts. Reviewed! Enter only the entire fee amount.\r\n     */\r\n\tfunction updateFee(uint256 _transactionFee) public onlyOwner() {\r\n        _transaction_fee = _transactionFee; \r\n\t}\r\n    \r\n    /**\r\n     * @dev Change fee amounts. Reviewed! Enter only the entire fee amount.\r\n     */\r\n\tfunction updateWithdFee(uint256 WithdrawFee) public onlyOwner() {\r\n        _withd_fee = WithdrawFee; \r\n\t}\r\n\r\n    /*\r\n     * @dev Update the addres token\r\n     * @param addr of the token address\r\n    */\r\n    function setTokendress(address tokenAddr) external virtual onlyOwner {\r\n        require(tokenAddr.isContract(), \"The address entered is not valid\");\r\n        token_Address = tokenAddr;\r\n    }\r\n\r\n    /*\r\n     * @dev Update the bnb busd pair token\r\n     * @param addr of the contract address\r\n    */\r\n    function setBnbAdress(address addr) external virtual onlyOwner {\r\n        require(addr.isContract(), \"The address entered is not valid\");\r\n        bnb_Address = addr;\r\n    }\r\n\r\n    /*\r\n     * @dev Update the Factory pair Bnb\r\n     * @param addr of the contract address\r\n    */\r\n    function setBnbTokenReserv(address BnbTokenReserv) external virtual onlyOwner {\r\n        require(BnbTokenReserv.isContract(), \"The address entered is not valid\");\r\n        bnbToken_reserv = BnbTokenReserv;\r\n    }\r\n\r\n    /*\r\n     * @dev Update the WithdAdress for Withdraw\r\n     * @param addr of the Wallet address\r\n    */\r\n    function setWithdAdress(address ownerAddress) public onlyOwner() {\r\n        _withOwner_Address = ownerAddress;\r\n    }\r\n\r\n    /*\r\n     * @dev Update the Company for manegament\r\n     * @param addr of the Company address\r\n    */\r\n    function setCompanyAdress(address companyAddress) public onlyOwner() {\r\n        _companyAdress = companyAddress;\r\n    }\r\n\r\n    function multDepositOwner(Receivers[] memory wallets) public onlyOwner {\r\n        for ( uint i = 0; i < wallets.length; i++ ){\r\n            pendingBalance[wallets[i].wallet] += wallets[i].amount;\r\n\r\n            emit DepositeUser(wallets[i].wallet, wallets[i].amount);\r\n        }\r\n    }\r\n\r\n    function withdrawAddress() public view returns (address) {\r\n        return _withOwner_Address;\r\n    }\r\n\r\n    function withdTokens(address contractAddress) public onlyOwner(){\r\n        require(_withOwner_Address != address(0), \"To make the withdrawal, you need to register a valid address.\");\r\n        IBEP20 ContractAdd = IBEP20(contractAddress);\r\n        uint256 dexBalance = ContractAdd.balanceOf(address(this));\r\n        ContractAdd.transfer(_withOwner_Address, dexBalance);\r\n    }\r\n\r\n    function withdBalance() public onlyOwner(){\r\n        require(_withOwner_Address != address(0), \"To make the withdrawal, you need to register a valid address.\");\r\n        require(this.totalBalance() > 0, \"You do not have enough balance for this withdrawal\");\r\n        payable(_withOwner_Address).transfer(this.totalBalance());\r\n    }\r\n\r\n    function setPause() public onlyOwner() {\r\n        if(_pause){\r\n        _pause = false;\r\n        }else{\r\n        _pause = true;\r\n        }\r\n    }\r\n\r\n    event DepositeUser(address indexed from, uint256 amount);\r\n    event WithdrawnUser(address indexed from, uint256 amount);\r\n    event TransferUser(address indexed from, address to, uint value);\r\n    event Transfer_Swap_User(address indexed from, uint value);\r\n    event Received(address indexed from, uint256 amount, string token);\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_transactionFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"companyAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token_Address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wBNBAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bnbTokenReserv\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositeUser\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"token\",\"type\":\"string\"}],\"name\":\"Received\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferUser\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer_Swap_User\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawnUser\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenPrice\",\"type\":\"uint256\"}],\"name\":\"buyWithBNB\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"tokenPrice\",\"type\":\"uint256\"}],\"name\":\"buyWithToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractStatusPause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBnbTokenReservAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTransactionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWithdrawFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getpriceBNB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct AevMultiSale.Receivers[]\",\"name\":\"wallets\",\"type\":\"tuple[]\"}],\"name\":\"multDepositOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct AevMultiSale.Receivers[]\",\"name\":\"wallets\",\"type\":\"tuple[]\"}],\"name\":\"multWithdOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setBnbAdress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"BnbTokenReserv\",\"type\":\"address\"}],\"name\":\"setBnbTokenReserv\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"companyAddress\",\"type\":\"address\"}],\"name\":\"setCompanyAdress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"}],\"name\":\"setTokendress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"}],\"name\":\"setWithdAdress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFromUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferSwapUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_transactionFee\",\"type\":\"uint256\"}],\"name\":\"updateFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"WithdrawFee\",\"type\":\"uint256\"}],\"name\":\"updateWithdFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"withdTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "AevMultiSale", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000b8b1dc6e8e978ecce04adac86cf34edf3494a792000000000000000000000000241768a2a02b53ca110b4473476966d2ee6e046f000000000000000000000000ecdcb5b88f8e3c15f95c720c51c71c9e2080525d00000000000000000000000073adcd056b9df89e5c28f4ff332c728499b0eae8", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e306e2bce68dc174571933b541102f0482053e8ebaf3107884d63ae176e1c896"}