{"SourceCode": "// Sources flattened with hardhat v2.9.9 https://hardhat.org\n\n// File interfaces/IMailbox.sol\n\n// SPDX-License-Identifier: MIT\npragma solidity >=0.6.11;\n\npragma abicoder v2;\n\ninterface IMailbox {\n    function localDomain() external view returns (uint32);\n}\n\n// File interfaces/IOutbox.sol\n\n// pragma solidity >=0.6.11;\n\ninterface IOutbox is IMailbox {\n    function dispatch(\n        uint32 _destinationDomain,\n        bytes32 _recipientAddress,\n        bytes calldata _messageBody\n    ) external returns (uint256);\n\n    function cacheCheckpoint() external;\n\n    function latestCheckpoint() external view returns (bytes32, uint256);\n\n    function count() external returns (uint256);\n\n    function fail() external;\n\n    function cachedCheckpoints(bytes32) external view returns (uint256);\n\n    function latestCachedCheckpoint()\n        external\n        view\n        returns (bytes32 root, uint256 index);\n}\n\n// File interfaces/IAbacusConnectionManager.sol\n\n// pragma solidity >=0.6.11;\n\ninterface IAbacusConnectionManager {\n    function outbox() external view returns (IOutbox);\n\n    function isInbox(address _inbox) external view returns (bool);\n\n    function localDomain() external view returns (uint32);\n}\n\n// File @openzeppelin/contracts/utils/Context.sol@v4.6.0\n\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\n// pragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\n// File @openzeppelin/contracts/access/Ownable.sol@v4.6.0\n\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\n// pragma solidity ^0.8.0;\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(\n            newOwner != address(0),\n            \"Ownable: new owner is the zero address\"\n        );\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// File @openzeppelin/contracts/utils/structs/EnumerableSet.sol@v4.6.0\n\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/structs/EnumerableSet.sol)\n\n// pragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value)\n        private\n        view\n        returns (bool)\n    {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index)\n        private\n        view\n        returns (bytes32)\n    {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value)\n        internal\n        returns (bool)\n    {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value)\n        internal\n        returns (bool)\n    {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value)\n        internal\n        view\n        returns (bool)\n    {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index)\n        internal\n        view\n        returns (bytes32)\n    {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set)\n        internal\n        view\n        returns (bytes32[] memory)\n    {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value)\n        internal\n        returns (bool)\n    {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value)\n        internal\n        returns (bool)\n    {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value)\n        internal\n        view\n        returns (bool)\n    {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index)\n        internal\n        view\n        returns (address)\n    {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set)\n        internal\n        view\n        returns (address[] memory)\n    {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value)\n        internal\n        returns (bool)\n    {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value)\n        internal\n        view\n        returns (bool)\n    {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index)\n        internal\n        view\n        returns (uint256)\n    {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set)\n        internal\n        view\n        returns (uint256[] memory)\n    {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n\n// File contracts/AbacusConnectionManager.sol\n\n// pragma solidity >=0.8.0;\n// pragma abicoder v2;\n\n// ============ Internal Imports ============\n\n// ============ External Imports ============\n\n/**\n * @title AbacusConnectionManager\n * @author Celo Labs Inc.\n * @notice Manages a registry of local Inbox contracts for remote Outbox\n * domains.\n */\ncontract AbacusConnectionManager is IAbacusConnectionManager, Ownable {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    // ============ Public Storage ============\n\n    // Outbox contract\n    IOutbox public override outbox;\n    // local Inbox address => remote Outbox domain\n    mapping(address => uint32) public inboxToDomain;\n    // remote Outbox domain => local Inbox addresses\n    mapping(uint32 => EnumerableSet.AddressSet) domainToInboxes;\n\n    // ============ Events ============\n\n    /**\n     * @notice Emitted when a new Outbox is set.\n     * @param outbox the address of the Outbox\n     */\n    event OutboxSet(address indexed outbox);\n\n    /**\n     * @notice Emitted when a new Inbox is enrolled / added\n     * @param domain the remote domain of the Outbox contract for the Inbox\n     * @param inbox the address of the Inbox\n     */\n    event InboxEnrolled(uint32 indexed domain, address inbox);\n\n    /**\n     * @notice Emitted when a new Inbox is un-enrolled / removed\n     * @param domain the remote domain of the Outbox contract for the Inbox\n     * @param inbox the address of the Inbox\n     */\n    event InboxUnenrolled(uint32 indexed domain, address inbox);\n\n    // ============ Constructor ============\n\n    // solhint-disable-next-line no-empty-blocks\n    constructor() Ownable() {}\n\n    // ============ External Functions ============\n\n    /**\n     * @notice Sets the address of the local Outbox contract.\n     * @param _outbox The address of the new local Outbox contract.\n     */\n    function setOutbox(address _outbox) external onlyOwner {\n        outbox = IOutbox(_outbox);\n        emit OutboxSet(_outbox);\n    }\n\n    /**\n     * @notice Allow Owner to enroll Inbox contract\n     * @param _domain the remote domain of the Outbox contract for the Inbox\n     * @param _inbox the address of the Inbox\n     */\n    function enrollInbox(uint32 _domain, address _inbox) external onlyOwner {\n        require(!isInbox(_inbox), \"already inbox\");\n        // add inbox and domain to two-way mapping\n        inboxToDomain[_inbox] = _domain;\n        domainToInboxes[_domain].add(_inbox);\n        emit InboxEnrolled(_domain, _inbox);\n    }\n\n    /**\n     * @notice Allow Owner to un-enroll Inbox contract\n     * @param _inbox the address of the Inbox\n     */\n    function unenrollInbox(address _inbox) external onlyOwner {\n        _unenrollInbox(_inbox);\n    }\n\n    /**\n     * @notice Query local domain from Outbox\n     * @return local domain\n     */\n    function localDomain() external view override returns (uint32) {\n        return outbox.localDomain();\n    }\n\n    /**\n     * @notice Returns the Inbox addresses for a given remote domain\n     * @return inboxes An array of addresses of the Inboxes\n     */\n    function getInboxes(uint32 remoteDomain)\n        external\n        view\n        returns (address[] memory)\n    {\n        EnumerableSet.AddressSet storage _inboxes = domainToInboxes[\n            remoteDomain\n        ];\n        uint256 length = _inboxes.length();\n        address[] memory ret = new address[](length);\n        for (uint256 i = 0; i < length; i += 1) {\n            ret[i] = _inboxes.at(i);\n        }\n        return ret;\n    }\n\n    // ============ Public Functions ============\n\n    /**\n     * @notice Check whether _inbox is enrolled\n     * @param _inbox the inbox to check for enrollment\n     * @return TRUE iff _inbox is enrolled\n     */\n    function isInbox(address _inbox) public view override returns (bool) {\n        return inboxToDomain[_inbox] != 0;\n    }\n\n    // ============ Internal Functions ============\n\n    /**\n     * @notice Remove the inbox from the two-way mappings\n     * @param _inbox inbox to un-enroll\n     */\n    function _unenrollInbox(address _inbox) internal {\n        uint32 _currentDomain = inboxToDomain[_inbox];\n        domainToInboxes[_currentDomain].remove(_inbox);\n        inboxToDomain[_inbox] = 0;\n        emit InboxUnenrolled(_currentDomain, _inbox);\n    }\n}\n\n// File contracts/Version0.sol\n\n// pragma solidity >=0.6.11;\n\n/**\n * @title Version0\n * @notice Version getter for contracts\n **/\ncontract Version0 {\n    uint8 public constant VERSION = 0;\n}\n\n// File @openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol@v4.6.0\n\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\n// pragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(\n            address(this).balance >= amount,\n            \"Address: insufficient balance\"\n        );\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(\n            success,\n            \"Address: unable to send value, recipient may have reverted\"\n        );\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data)\n        internal\n        returns (bytes memory)\n    {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return\n            functionCallWithValue(\n                target,\n                data,\n                value,\n                \"Address: low-level call with value failed\"\n            );\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(\n            address(this).balance >= value,\n            \"Address: insufficient balance for call\"\n        );\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(\n            data\n        );\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data)\n        internal\n        view\n        returns (bytes memory)\n    {\n        return\n            functionStaticCall(\n                target,\n                data,\n                \"Address: low-level static call failed\"\n            );\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n// File @openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol@v4.6.0\n\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n\n// pragma solidity ^0.8.2;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(\n                _initialized < version,\n                \"Initializable: contract is already initialized\"\n            );\n            _initialized = version;\n            return true;\n        }\n    }\n}\n\n// File @openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol@v4.6.0\n\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\n// pragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {}\n\n    function __Context_init_unchained() internal onlyInitializing {}\n\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n\n// File @openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol@v4.6.0\n\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\n// pragma solidity ^0.8.0;\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(\n            newOwner != address(0),\n            \"Ownable: new owner is the zero address\"\n        );\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n\n// File @openzeppelin/contracts/utils/Address.sol@v4.6.0\n\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\n// pragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(\n            address(this).balance >= amount,\n            \"Address: insufficient balance\"\n        );\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(\n            success,\n            \"Address: unable to send value, recipient may have reverted\"\n        );\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data)\n        internal\n        returns (bytes memory)\n    {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return\n            functionCallWithValue(\n                target,\n                data,\n                value,\n                \"Address: low-level call with value failed\"\n            );\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(\n            address(this).balance >= value,\n            \"Address: insufficient balance for call\"\n        );\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(\n            data\n        );\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data)\n        internal\n        view\n        returns (bytes memory)\n    {\n        return\n            functionStaticCall(\n                target,\n                data,\n                \"Address: low-level static call failed\"\n            );\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data)\n        internal\n        returns (bytes memory)\n    {\n        return\n            functionDelegateCall(\n                target,\n                data,\n                \"Address: low-level delegate call failed\"\n            );\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n// File contracts/Mailbox.sol\n\n// pragma solidity >=0.8.0;\n\n// ============ Internal Imports ============\n\n// ============ External Imports ============\n\n/**\n * @title Mailbox\n * @author Celo Labs Inc.\n * @notice Shared utilities between Outbox and Inbox.\n */\nabstract contract Mailbox is IMailbox, OwnableUpgradeable {\n    // ============ Immutable Variables ============\n\n    // Domain of chain on which the contract is deployed\n    uint32 public immutable override localDomain;\n\n    // ============ Public Variables ============\n\n    // Address of the validator manager contract.\n    address public validatorManager;\n\n    // ============ Upgrade Gap ============\n\n    // gap for upgrade safety\n    uint256[49] private __GAP;\n\n    // ============ Events ============\n\n    /**\n     * @notice Emitted when the validator manager contract is changed\n     * @param validatorManager The address of the new validatorManager\n     */\n    event ValidatorManagerSet(address validatorManager);\n\n    // ============ Modifiers ============\n\n    /**\n     * @notice Ensures that a function is called by the validator manager contract.\n     */\n    modifier onlyValidatorManager() {\n        require(msg.sender == validatorManager, \"!validatorManager\");\n        _;\n    }\n\n    // ============ Constructor ============\n\n    constructor(uint32 _localDomain) {\n        localDomain = _localDomain;\n    }\n\n    // ============ Initializer ============\n\n    function __Mailbox_initialize(address _validatorManager)\n        internal\n        onlyInitializing\n    {\n        // initialize owner\n        __Ownable_init();\n        _setValidatorManager(_validatorManager);\n    }\n\n    // ============ External Functions ============\n\n    /**\n     * @notice Set a new validator manager contract\n     * @dev Mailbox(es) will initially be initialized using a trusted validator manager contract;\n     * we will progressively decentralize by swapping the trusted contract with a new implementation\n     * that implements Validator bonding & slashing, and rules for Validator selection & rotation\n     * @param _validatorManager the new validator manager contract\n     */\n    function setValidatorManager(address _validatorManager) external onlyOwner {\n        _setValidatorManager(_validatorManager);\n    }\n\n    // ============ Internal Functions ============\n\n    /**\n     * @notice Set the validator manager\n     * @param _validatorManager Address of the validator manager\n     */\n    function _setValidatorManager(address _validatorManager) internal {\n        require(\n            Address.isContract(_validatorManager),\n            \"!contract validatorManager\"\n        );\n        validatorManager = _validatorManager;\n        emit ValidatorManagerSet(_validatorManager);\n    }\n}\n\n// File contracts/libs/Merkle.sol\n\n// pragma solidity >=0.6.11;\n\n// work based on eth2 deposit contract, which is used under CC0-1.0\n\n/**\n * @title MerkleLib\n * @author Celo Labs Inc.\n * @notice An incremental merkle tree modeled on the eth2 deposit contract.\n **/\nlibrary MerkleLib {\n    uint256 internal constant TREE_DEPTH = 32;\n    uint256 internal constant MAX_LEAVES = 2**TREE_DEPTH - 1;\n\n    /**\n     * @notice Struct representing incremental merkle tree. Contains current\n     * branch and the number of inserted leaves in the tree.\n     **/\n    struct Tree {\n        bytes32[TREE_DEPTH] branch;\n        uint256 count;\n    }\n\n    /**\n     * @notice Inserts `_node` into merkle tree\n     * @dev Reverts if tree is full\n     * @param _node Element to insert into tree\n     **/\n    function insert(Tree storage _tree, bytes32 _node) internal {\n        require(_tree.count < MAX_LEAVES, \"merkle tree full\");\n\n        _tree.count += 1;\n        uint256 size = _tree.count;\n        for (uint256 i = 0; i < TREE_DEPTH; i++) {\n            if ((size & 1) == 1) {\n                _tree.branch[i] = _node;\n                return;\n            }\n            _node = keccak256(abi.encodePacked(_tree.branch[i], _node));\n            size /= 2;\n        }\n        // As the loop should always end prematurely with the `return` statement,\n        // this code should be unreachable. We assert `false` just to be safe.\n        assert(false);\n    }\n\n    /**\n     * @notice Calculates and returns`_tree`'s current root given array of zero\n     * hashes\n     * @param _zeroes Array of zero hashes\n     * @return _current Calculated root of `_tree`\n     **/\n    function rootWithCtx(Tree storage _tree, bytes32[TREE_DEPTH] memory _zeroes)\n        internal\n        view\n        returns (bytes32 _current)\n    {\n        uint256 _index = _tree.count;\n\n        for (uint256 i = 0; i < TREE_DEPTH; i++) {\n            uint256 _ithBit = (_index >> i) & 0x01;\n            bytes32 _next = _tree.branch[i];\n            if (_ithBit == 1) {\n                _current = keccak256(abi.encodePacked(_next, _current));\n            } else {\n                _current = keccak256(abi.encodePacked(_current, _zeroes[i]));\n            }\n        }\n    }\n\n    /// @notice Calculates and returns`_tree`'s current root\n    function root(Tree storage _tree) internal view returns (bytes32) {\n        return rootWithCtx(_tree, zeroHashes());\n    }\n\n    /// @notice Returns array of TREE_DEPTH zero hashes\n    /// @return _zeroes Array of TREE_DEPTH zero hashes\n    function zeroHashes()\n        internal\n        pure\n        returns (bytes32[TREE_DEPTH] memory _zeroes)\n    {\n        _zeroes[0] = Z_0;\n        _zeroes[1] = Z_1;\n        _zeroes[2] = Z_2;\n        _zeroes[3] = Z_3;\n        _zeroes[4] = Z_4;\n        _zeroes[5] = Z_5;\n        _zeroes[6] = Z_6;\n        _zeroes[7] = Z_7;\n        _zeroes[8] = Z_8;\n        _zeroes[9] = Z_9;\n        _zeroes[10] = Z_10;\n        _zeroes[11] = Z_11;\n        _zeroes[12] = Z_12;\n        _zeroes[13] = Z_13;\n        _zeroes[14] = Z_14;\n        _zeroes[15] = Z_15;\n        _zeroes[16] = Z_16;\n        _zeroes[17] = Z_17;\n        _zeroes[18] = Z_18;\n        _zeroes[19] = Z_19;\n        _zeroes[20] = Z_20;\n        _zeroes[21] = Z_21;\n        _zeroes[22] = Z_22;\n        _zeroes[23] = Z_23;\n        _zeroes[24] = Z_24;\n        _zeroes[25] = Z_25;\n        _zeroes[26] = Z_26;\n        _zeroes[27] = Z_27;\n        _zeroes[28] = Z_28;\n        _zeroes[29] = Z_29;\n        _zeroes[30] = Z_30;\n        _zeroes[31] = Z_31;\n    }\n\n    /**\n     * @notice Calculates and returns the merkle root for the given leaf\n     * `_item`, a merkle branch, and the index of `_item` in the tree.\n     * @param _item Merkle leaf\n     * @param _branch Merkle proof\n     * @param _index Index of `_item` in tree\n     * @return _current Calculated merkle root\n     **/\n    function branchRoot(\n        bytes32 _item,\n        bytes32[TREE_DEPTH] memory _branch,\n        uint256 _index\n    ) internal pure returns (bytes32 _current) {\n        _current = _item;\n\n        for (uint256 i = 0; i < TREE_DEPTH; i++) {\n            uint256 _ithBit = (_index >> i) & 0x01;\n            bytes32 _next = _branch[i];\n            if (_ithBit == 1) {\n                _current = keccak256(abi.encodePacked(_next, _current));\n            } else {\n                _current = keccak256(abi.encodePacked(_current, _next));\n            }\n        }\n    }\n\n    // keccak256 zero hashes\n    bytes32 internal constant Z_0 =\n        hex\"0000000000000000000000000000000000000000000000000000000000000000\";\n    bytes32 internal constant Z_1 =\n        hex\"ad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5\";\n    bytes32 internal constant Z_2 =\n        hex\"b4c11951957c6f8f642c4af61cd6b24640fec6dc7fc607ee8206a99e92410d30\";\n    bytes32 internal constant Z_3 =\n        hex\"21ddb9a356815c3fac1026b6dec5df3124afbadb485c9ba5a3e3398a04b7ba85\";\n    bytes32 internal constant Z_4 =\n        hex\"e58769b32a1beaf1ea27375a44095a0d1fb664ce2dd358e7fcbfb78c26a19344\";\n    bytes32 internal constant Z_5 =\n        hex\"0eb01ebfc9ed27500cd4dfc979272d1f0913cc9f66540d7e8005811109e1cf2d\";\n    bytes32 internal constant Z_6 =\n        hex\"887c22bd8750d34016ac3c66b5ff102dacdd73f6b014e710b51e8022af9a1968\";\n    bytes32 internal constant Z_7 =\n        hex\"ffd70157e48063fc33c97a050f7f640233bf646cc98d9524c6b92bcf3ab56f83\";\n    bytes32 internal constant Z_8 =\n        hex\"9867cc5f7f196b93bae1e27e6320742445d290f2263827498b54fec539f756af\";\n    bytes32 internal constant Z_9 =\n        hex\"cefad4e508c098b9a7e1d8feb19955fb02ba9675585078710969d3440f5054e0\";\n    bytes32 internal constant Z_10 =\n        hex\"f9dc3e7fe016e050eff260334f18a5d4fe391d82092319f5964f2e2eb7c1c3a5\";\n    bytes32 internal constant Z_11 =\n        hex\"f8b13a49e282f609c317a833fb8d976d11517c571d1221a265d25af778ecf892\";\n    bytes32 internal constant Z_12 =\n        hex\"3490c6ceeb450aecdc82e28293031d10c7d73bf85e57bf041a97360aa2c5d99c\";\n    bytes32 internal constant Z_13 =\n        hex\"c1df82d9c4b87413eae2ef048f94b4d3554cea73d92b0f7af96e0271c691e2bb\";\n    bytes32 internal constant Z_14 =\n        hex\"5c67add7c6caf302256adedf7ab114da0acfe870d449a3a489f781d659e8becc\";\n    bytes32 internal constant Z_15 =\n        hex\"da7bce9f4e8618b6bd2f4132ce798cdc7a60e7e1460a7299e3c6342a579626d2\";\n    bytes32 internal constant Z_16 =\n        hex\"2733e50f526ec2fa19a22b31e8ed50f23cd1fdf94c9154ed3a7609a2f1ff981f\";\n    bytes32 internal constant Z_17 =\n        hex\"e1d3b5c807b281e4683cc6d6315cf95b9ade8641defcb32372f1c126e398ef7a\";\n    bytes32 internal constant Z_18 =\n        hex\"5a2dce0a8a7f68bb74560f8f71837c2c2ebbcbf7fffb42ae1896f13f7c7479a0\";\n    bytes32 internal constant Z_19 =\n        hex\"b46a28b6f55540f89444f63de0378e3d121be09e06cc9ded1c20e65876d36aa0\";\n    bytes32 internal constant Z_20 =\n        hex\"c65e9645644786b620e2dd2ad648ddfcbf4a7e5b1a3a4ecfe7f64667a3f0b7e2\";\n    bytes32 internal constant Z_21 =\n        hex\"f4418588ed35a2458cffeb39b93d26f18d2ab13bdce6aee58e7b99359ec2dfd9\";\n    bytes32 internal constant Z_22 =\n        hex\"5a9c16dc00d6ef18b7933a6f8dc65ccb55667138776f7dea101070dc8796e377\";\n    bytes32 internal constant Z_23 =\n        hex\"4df84f40ae0c8229d0d6069e5c8f39a7c299677a09d367fc7b05e3bc380ee652\";\n    bytes32 internal constant Z_24 =\n        hex\"cdc72595f74c7b1043d0e1ffbab734648c838dfb0527d971b602bc216c9619ef\";\n    bytes32 internal constant Z_25 =\n        hex\"0abf5ac974a1ed57f4050aa510dd9c74f508277b39d7973bb2dfccc5eeb0618d\";\n    bytes32 internal constant Z_26 =\n        hex\"b8cd74046ff337f0a7bf2c8e03e10f642c1886798d71806ab1e888d9e5ee87d0\";\n    bytes32 internal constant Z_27 =\n        hex\"838c5655cb21c6cb83313b5a631175dff4963772cce9108188b34ac87c81c41e\";\n    bytes32 internal constant Z_28 =\n        hex\"662ee4dd2dd7b2bc707961b1e646c4047669dcb6584f0d8d770daf5d7e7deb2e\";\n    bytes32 internal constant Z_29 =\n        hex\"388ab20e2573d171a88108e79d820e98f26c0b84aa8b2f4aa4968dbb818ea322\";\n    bytes32 internal constant Z_30 =\n        hex\"93237c50ba75ee485f4c22adf2f741400bdf8d6a9cc7df7ecae576221665d735\";\n    bytes32 internal constant Z_31 =\n        hex\"8448818bb4ae4562849e949e17ac16e0be16688e156b5cf15e098c627c0056a9\";\n}\n\n// File contracts/libs/TypeCasts.sol\n\n// pragma solidity >=0.6.11;\n\nlibrary TypeCasts {\n    // treat it as a null-terminated string of max 32 bytes\n    function coerceString(bytes32 _buf)\n        internal\n        pure\n        returns (string memory _newStr)\n    {\n        uint8 _slen = 0;\n        while (_slen < 32 && _buf[_slen] != 0) {\n            _slen++;\n        }\n\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            _newStr := mload(0x40)\n            mstore(0x40, add(_newStr, 0x40)) // may end up with extra\n            mstore(_newStr, _slen)\n            mstore(add(_newStr, 0x20), _buf)\n        }\n    }\n\n    // alignment preserving cast\n    function addressToBytes32(address _addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(_addr)));\n    }\n\n    // alignment preserving cast\n    function bytes32ToAddress(bytes32 _buf) internal pure returns (address) {\n        return address(uint160(uint256(_buf)));\n    }\n}\n\n// File contracts/libs/Message.sol\n\n// pragma solidity >=0.8.0;\n\n/**\n * @title Message Library\n * @author Celo Labs Inc.\n * @notice Library for formatted messages used by Outbox and Replica.\n **/\nlibrary Message {\n    using TypeCasts for bytes32;\n\n    /**\n     * @notice Returns formatted (packed) message with provided fields\n     * @dev This function should only be used in memory message construction.\n     * @param _originDomain Domain of home chain\n     * @param _sender Address of sender as bytes32\n     * @param _destinationDomain Domain of destination chain\n     * @param _recipient Address of recipient on destination chain as bytes32\n     * @param _messageBody Raw bytes of message body\n     * @return Formatted message\n     **/\n    function formatMessage(\n        uint32 _originDomain,\n        bytes32 _sender,\n        uint32 _destinationDomain,\n        bytes32 _recipient,\n        bytes calldata _messageBody\n    ) internal pure returns (bytes memory) {\n        return\n            abi.encodePacked(\n                _originDomain,\n                _sender,\n                _destinationDomain,\n                _recipient,\n                _messageBody\n            );\n    }\n\n    /**\n     * @notice Returns leaf of formatted message with provided fields.\n     * @dev hash of abi packed message and leaf index.\n     * @param _message Raw bytes of message contents.\n     * @param _leafIndex Index of the message in the tree\n     * @return Leaf (hash) of formatted message\n     */\n    function leaf(bytes calldata _message, uint256 _leafIndex)\n        internal\n        pure\n        returns (bytes32)\n    {\n        return keccak256(abi.encodePacked(_message, _leafIndex));\n    }\n\n    /**\n     * @notice Decode raw message bytes into structured message fields.\n     * @dev Efficiently slices calldata into structured message fields.\n     * @param _message Raw bytes of message contents.\n     * @return origin Domain of home chain\n     * @return sender Address of sender as bytes32\n     * @return destination Domain of destination chain\n     * @return recipient Address of recipient on destination chain as bytes32\n     * @return body Raw bytes of message body\n     */\n    function destructure(bytes calldata _message)\n        internal\n        pure\n        returns (\n            uint32 origin,\n            bytes32 sender,\n            uint32 destination,\n            bytes32 recipient,\n            bytes calldata body\n        )\n    {\n        return (\n            uint32(bytes4(_message[0:4])),\n            bytes32(_message[4:36]),\n            uint32(bytes4(_message[36:40])),\n            bytes32(_message[40:72]),\n            bytes(_message[72:])\n        );\n    }\n\n    /**\n     * @notice Decode raw message bytes into structured message fields.\n     * @dev Efficiently slices calldata into structured message fields.\n     * @param _message Raw bytes of message contents.\n     * @return origin Domain of home chain\n     * @return sender Address of sender as address (bytes20)\n     * @return destination Domain of destination chain\n     * @return recipient Address of recipient on destination chain as address (bytes20)\n     * @return body Raw bytes of message body\n     */\n    function destructureAddresses(bytes calldata _message)\n        internal\n        pure\n        returns (\n            uint32,\n            address,\n            uint32,\n            address,\n            bytes calldata\n        )\n    {\n        (\n            uint32 _origin,\n            bytes32 _sender,\n            uint32 destination,\n            bytes32 _recipient,\n            bytes calldata body\n        ) = destructure(_message);\n        return (\n            _origin,\n            _sender.bytes32ToAddress(),\n            destination,\n            _recipient.bytes32ToAddress(),\n            body\n        );\n    }\n}\n\n// File interfaces/IMessageRecipient.sol\n\n// pragma solidity >=0.6.11;\n\ninterface IMessageRecipient {\n    function handle(\n        uint32 _origin,\n        bytes32 _sender,\n        bytes calldata _message\n    ) external;\n}\n\n// File interfaces/IInbox.sol\n\n// pragma solidity >=0.6.11;\n\ninterface IInbox is IMailbox {\n    function remoteDomain() external returns (uint32);\n\n    function process(\n        bytes32 _root,\n        uint256 _index,\n        bytes calldata _message,\n        bytes32[32] calldata _proof,\n        uint256 _leafIndex\n    ) external;\n}\n\n// File @openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol@v4.6.0\n\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\n// pragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n\n// File contracts/Inbox.sol\n\n// pragma solidity >=0.8.0;\n\n// ============ Internal Imports ============\n\n// ============ External Imports ============\n\n/**\n * @title Inbox\n * @author Celo Labs Inc.\n * @notice Track root updates on Outbox, prove and dispatch messages to end\n * recipients.\n */\ncontract Inbox is IInbox, ReentrancyGuardUpgradeable, Version0, Mailbox {\n    // ============ Libraries ============\n\n    using MerkleLib for MerkleLib.Tree;\n    using Message for bytes;\n    using TypeCasts for bytes32;\n\n    // ============ Enums ============\n\n    // Status of Message:\n    //   0 - None - message has not been processed\n    //   1 - Processed - message has been dispatched to recipient\n    enum MessageStatus {\n        None,\n        Processed\n    }\n\n    // ============ Public Storage ============\n\n    // Domain of outbox chain\n    uint32 public override remoteDomain;\n    // Mapping of message leaves to MessageStatus\n    mapping(bytes32 => MessageStatus) public messages;\n\n    // ============ Upgrade Gap ============\n\n    // gap for upgrade safety\n    uint256[48] private __GAP;\n\n    // ============ Events ============\n\n    /**\n     * @notice Emitted when message is processed\n     * @dev This event allows watchers to observe the merkle proof they need\n     * to prove fraud on the Outbox.\n     * @param messageHash Hash of message that was processed.\n     */\n    event Process(bytes32 indexed messageHash);\n\n    // ============ Constructor ============\n\n    // solhint-disable-next-line no-empty-blocks\n    constructor(uint32 _localDomain) Mailbox(_localDomain) {}\n\n    // ============ Initializer ============\n\n    function initialize(uint32 _remoteDomain, address _validatorManager)\n        public\n        initializer\n    {\n        __ReentrancyGuard_init();\n        __Mailbox_initialize(_validatorManager);\n        remoteDomain = _remoteDomain;\n    }\n\n    // ============ External Functions ============\n\n    /**\n     * @notice Attempts to process the provided formatted `message`. Performs\n     * verification against root of the proof\n     * @dev Called by the validator manager, which is responsible for verifying a\n     * quorum of validator signatures on the checkpoint.\n     * @dev Reverts if verification of the message fails.\n     * @param _root The merkle root of the checkpoint used to prove message inclusion.\n     * @param _index The index of the checkpoint used to prove message inclusion.\n     * @param _message Formatted message (refer to Mailbox.sol Message library)\n     * @param _proof Merkle proof of inclusion for message's leaf\n     * @param _leafIndex Index of leaf in outbox's merkle tree\n     */\n    function process(\n        bytes32 _root,\n        uint256 _index,\n        bytes calldata _message,\n        bytes32[32] calldata _proof,\n        uint256 _leafIndex\n    ) external override nonReentrant onlyValidatorManager {\n        require(_index >= _leafIndex, \"!index\");\n        bytes32 _messageHash = _message.leaf(_leafIndex);\n        // ensure that message has not been processed\n        require(\n            messages[_messageHash] == MessageStatus.None,\n            \"!MessageStatus.None\"\n        );\n        // calculate the expected root based on the proof\n        bytes32 _calculatedRoot = MerkleLib.branchRoot(\n            _messageHash,\n            _proof,\n            _leafIndex\n        );\n        // verify the merkle proof\n        require(_calculatedRoot == _root, \"!proof\");\n        _process(_message, _messageHash);\n        emit Process(_messageHash);\n    }\n\n    // ============ Internal Functions ============\n\n    /**\n     * @notice Marks a message as processed and calls handle on the recipient\n     * @dev Internal function that can be called by contracts like TestInbox\n     * @param _message Formatted message (refer to Mailbox.sol Message library)\n     * @param _messageHash keccak256 hash of the message\n     */\n    function _process(bytes calldata _message, bytes32 _messageHash) internal {\n        (\n            uint32 origin,\n            bytes32 sender,\n            uint32 destination,\n            bytes32 recipient,\n            bytes calldata body\n        ) = _message.destructure();\n\n        // ensure message was meant for this domain\n        require(destination == localDomain, \"!destination\");\n\n        // update message status as processed\n        messages[_messageHash] = MessageStatus.Processed;\n\n        IMessageRecipient(recipient.bytes32ToAddress()).handle(\n            origin,\n            sender,\n            body\n        );\n    }\n}\n\n// File interfaces/IInterchainGasPaymaster.sol\n\n// pragma solidity >=0.6.11;\n\n/**\n * @title IInterchainGasPaymaster\n * @notice Manages payments on a source chain to cover gas costs of relaying\n * messages to destination chains.\n */\ninterface IInterchainGasPaymaster {\n    function payGasFor(\n        address _outbox,\n        uint256 _leafIndex,\n        uint32 _destinationDomain\n    ) external payable;\n}\n\n// File contracts/InterchainGasPaymaster.sol\n\n// pragma solidity >=0.8.0;\n\n// ============ Internal Imports ============\n\n// ============ External Imports ============\n\n/**\n * @title InterchainGasPaymaster\n * @notice Manages payments on a source chain to cover gas costs of relaying\n * messages to destination chains.\n */\ncontract InterchainGasPaymaster is IInterchainGasPaymaster, OwnableUpgradeable {\n    // ============ Events ============\n\n    /**\n     * @notice Emitted when a payment is made for a message's gas costs.\n     * @param outbox The address of the Outbox contract.\n     * @param leafIndex The index of the message in the Outbox merkle tree.\n     * @param amount The amount of native tokens paid.\n     */\n    event GasPayment(address indexed outbox, uint256 leafIndex, uint256 amount);\n\n    // ============ Constructor ============\n\n    // solhint-disable-next-line no-empty-blocks\n    constructor() {\n        initialize(); // allows contract to be used without proxying\n    }\n\n    // ============ External Functions ============\n\n    function initialize() public initializer {\n        __Ownable_init();\n    }\n\n    /**\n     * @notice Deposits msg.value as a payment for the relaying of a message\n     * to its destination chain.\n     * @param _outbox The address of the Outbox contract.\n     * @param _leafIndex The index of the message in the Outbox merkle tree.\n     * @param _destinationDomain The domain of the message's destination chain.\n     */\n    function payGasFor(\n        address _outbox,\n        uint256 _leafIndex,\n        uint32 _destinationDomain\n    ) external payable override {\n        // Silence compiler warning. The NatSpec @param requires the parameter to be named.\n        // While not used at the moment, future versions of the paymaster may conditionally\n        // forward payments depending on the destination domain.\n        _destinationDomain;\n\n        emit GasPayment(_outbox, _leafIndex, msg.value);\n    }\n\n    /**\n     * @notice Transfers the entire native token balance to the owner of the contract.\n     * @dev The owner must be able to receive native tokens.\n     */\n    function claim() external {\n        // Transfer the entire balance to owner.\n        (bool success, ) = owner().call{value: address(this).balance}(\"\");\n        require(success, \"!transfer\");\n    }\n}\n\n// File contracts/MerkleTreeManager.sol\n\n// pragma solidity >=0.8.0;\n\n// ============ Internal Imports ============\n\n/**\n * @title MerkleTreeManager\n * @author Celo Labs Inc.\n * @notice Contains a Merkle tree instance and\n * exposes view functions for the tree.\n */\ncontract MerkleTreeManager {\n    // ============ Libraries ============\n\n    using MerkleLib for MerkleLib.Tree;\n    MerkleLib.Tree public tree;\n\n    // ============ Upgrade Gap ============\n\n    // gap for upgrade safety\n    uint256[49] private __GAP;\n\n    // ============ Public Functions ============\n\n    /**\n     * @notice Calculates and returns tree's current root\n     */\n    function root() public view returns (bytes32) {\n        return tree.root();\n    }\n}\n\n// File contracts/Outbox.sol\n\n// pragma solidity >=0.8.0;\n\n// ============ Internal Imports ============\n\n/**\n * @title Outbox\n * @author Celo Labs Inc.\n * @notice Accepts messages to be dispatched to remote chains,\n * constructs a Merkle tree of the messages,\n * and accepts signatures from a bonded Validator\n * which notarize the Merkle tree roots.\n * Accepts submissions of fraudulent signatures\n * by the Validator and slashes the Validator in this case.\n */\ncontract Outbox is IOutbox, Version0, MerkleTreeManager, Mailbox {\n    // ============ Libraries ============\n\n    using MerkleLib for MerkleLib.Tree;\n    using TypeCasts for address;\n\n    // ============ Constants ============\n\n    // Maximum bytes per message = 2 KiB\n    // (somewhat arbitrarily set to begin)\n    uint256 public constant MAX_MESSAGE_BODY_BYTES = 2 * 2**10;\n\n    // ============ Enums ============\n\n    // States:\n    //   0 - UnInitialized - before initialize function is called\n    //   note: the contract is initialized at deploy time, so it should never be in this state\n    //   1 - Active - as long as the contract has not become fraudulent\n    //   2 - Failed - after a valid fraud proof has been submitted;\n    //   contract will no longer accept updates or new messages\n    enum States {\n        UnInitialized,\n        Active,\n        Failed\n    }\n\n    // ============ Public Storage Variables ============\n\n    // Cached checkpoints, mapping root => leaf index.\n    // Cached checkpoints must have index > 0 as the presence of such\n    // a checkpoint cannot be distinguished from its absence.\n    mapping(bytes32 => uint256) public cachedCheckpoints;\n    // The latest cached root\n    bytes32 public latestCachedRoot;\n    // Current state of contract\n    States public state;\n\n    // ============ Upgrade Gap ============\n\n    // gap for upgrade safety\n    uint256[47] private __GAP;\n\n    // ============ Events ============\n\n    /**\n     * @notice Emitted when a checkpoint is cached.\n     * @param root Merkle root\n     * @param index Leaf index\n     */\n    event CheckpointCached(bytes32 indexed root, uint256 indexed index);\n\n    /**\n     * @notice Emitted when a new message is dispatched via Abacus\n     * @param leafIndex Index of message's leaf in merkle tree\n     * @param message Raw bytes of message\n     */\n    event Dispatch(uint256 indexed leafIndex, bytes message);\n\n    event Fail();\n\n    // ============ Constructor ============\n\n    constructor(uint32 _localDomain) Mailbox(_localDomain) {} // solhint-disable-line no-empty-blocks\n\n    // ============ Initializer ============\n\n    function initialize(address _validatorManager) public initializer {\n        __Mailbox_initialize(_validatorManager);\n        state = States.Active;\n    }\n\n    // ============ Modifiers ============\n\n    /**\n     * @notice Ensures that contract state != FAILED when the function is called\n     */\n    modifier notFailed() {\n        require(state != States.Failed, \"failed state\");\n        _;\n    }\n\n    // ============ External Functions  ============\n\n    /**\n     * @notice Dispatch the message it to the destination domain & recipient\n     * @dev Format the message, insert its hash into Merkle tree,\n     * and emit `Dispatch` event with message information.\n     * @param _destinationDomain Domain of destination chain\n     * @param _recipientAddress Address of recipient on destination chain as bytes32\n     * @param _messageBody Raw bytes content of message\n     * @return The leaf index of the dispatched message's hash in the Merkle tree.\n     */\n    function dispatch(\n        uint32 _destinationDomain,\n        bytes32 _recipientAddress,\n        bytes calldata _messageBody\n    ) external override notFailed returns (uint256) {\n        require(_messageBody.length <= MAX_MESSAGE_BODY_BYTES, \"msg too long\");\n        // The leaf has not been inserted yet at this point1\n        uint256 _leafIndex = count();\n        // format the message into packed bytes\n        bytes memory _message = Message.formatMessage(\n            localDomain,\n            msg.sender.addressToBytes32(),\n            _destinationDomain,\n            _recipientAddress,\n            _messageBody\n        );\n        // insert the hashed message into the Merkle tree\n        bytes32 _messageHash = keccak256(\n            abi.encodePacked(_message, _leafIndex)\n        );\n        tree.insert(_messageHash);\n        emit Dispatch(_leafIndex, _message);\n        return _leafIndex;\n    }\n\n    /**\n     * @notice Caches the current merkle root and index.\n     * @dev emits CheckpointCached event\n     */\n    function cacheCheckpoint() external override notFailed {\n        (bytes32 _root, uint256 _index) = latestCheckpoint();\n        require(_index > 0, \"!index\");\n        cachedCheckpoints[_root] = _index;\n        latestCachedRoot = _root;\n        emit CheckpointCached(_root, _index);\n    }\n\n    /**\n     * @notice Set contract state to FAILED.\n     * @dev Called by the validator manager when fraud is proven.\n     */\n    function fail() external override onlyValidatorManager {\n        // set contract to FAILED\n        state = States.Failed;\n        emit Fail();\n    }\n\n    /**\n     * @notice Returns the latest entry in the checkpoint cache.\n     * @return root Latest cached root\n     * @return index Latest cached index\n     */\n    function latestCachedCheckpoint()\n        external\n        view\n        returns (bytes32 root, uint256 index)\n    {\n        root = latestCachedRoot;\n        index = cachedCheckpoints[root];\n    }\n\n    /**\n     * @notice Returns the number of inserted leaves in the tree\n     */\n    function count() public view returns (uint256) {\n        return tree.count;\n    }\n\n    /**\n     * @notice Returns a checkpoint representing the current merkle tree.\n     * @return root The root of the Outbox's merkle tree.\n     * @return index The index of the last element in the tree.\n     */\n    function latestCheckpoint() public view returns (bytes32, uint256) {\n        return (root(), count() - 1);\n    }\n}\n\n// File contracts/test/bad-recipient/BadRecipient1.sol\n\n// pragma solidity >=0.8.0;\n\ncontract BadRecipient1 is IMessageRecipient {\n    function handle(\n        uint32,\n        bytes32,\n        bytes calldata\n    ) external pure override {\n        assembly {\n            revert(0, 0)\n        }\n    }\n}\n\n// File contracts/test/bad-recipient/BadRecipient3.sol\n\n// pragma solidity >=0.8.0;\n\ncontract BadRecipient3 is IMessageRecipient {\n    function handle(\n        uint32,\n        bytes32,\n        bytes calldata\n    ) external pure override {\n        assembly {\n            mstore(0, 0xabcdef)\n            revert(0, 32)\n        }\n    }\n}\n\n// File contracts/test/bad-recipient/BadRecipient5.sol\n\n// pragma solidity >=0.8.0;\n\ncontract BadRecipient5 is IMessageRecipient {\n    function handle(\n        uint32,\n        bytes32,\n        bytes calldata\n    ) external pure override {\n        require(false, \"no can do\");\n    }\n}\n\n// File contracts/test/bad-recipient/BadRecipient6.sol\n\n// pragma solidity >=0.8.0;\n\ncontract BadRecipient6 is IMessageRecipient {\n    function handle(\n        uint32,\n        bytes32,\n        bytes calldata\n    ) external pure override {\n        require(false); // solhint-disable-line reason-string\n    }\n}\n\n// File contracts/test/MysteryMath.sol\n\n// pragma solidity >=0.8.0;\n\nabstract contract MysteryMath {\n    uint256 public stateVar;\n\n    function setState(uint256 _var) external {\n        stateVar = _var;\n    }\n\n    function getState() external view returns (uint256) {\n        return stateVar;\n    }\n\n    function doMath(uint256 a, uint256 b)\n        external\n        pure\n        virtual\n        returns (uint256 _result);\n}\n\n// File contracts/test/MysteryMathV1.sol\n\n// pragma solidity >=0.8.0;\n\ncontract MysteryMathV1 is MysteryMath {\n    uint32 public immutable version;\n\n    constructor() {\n        version = 1;\n    }\n\n    function doMath(uint256 a, uint256 b)\n        external\n        pure\n        override\n        returns (uint256 _result)\n    {\n        _result = a + b;\n    }\n}\n\n// File contracts/test/MysteryMathV2.sol\n\n// pragma solidity >=0.8.0;\n\ncontract MysteryMathV2 is MysteryMath {\n    uint32 public immutable version;\n\n    constructor() {\n        version = 2;\n    }\n\n    function doMath(uint256 a, uint256 b)\n        external\n        pure\n        override\n        returns (uint256 _result)\n    {\n        _result = a * b;\n    }\n}\n\n// File contracts/test/TestInbox.sol\n\n// pragma solidity >=0.8.0;\n\ncontract TestInbox is Inbox {\n    using Message for bytes32;\n\n    constructor(uint32 _localDomain) Inbox(_localDomain) {} // solhint-disable-line no-empty-blocks\n\n    function testBranchRoot(\n        bytes32 leaf,\n        bytes32[32] calldata proof,\n        uint256 index\n    ) external pure returns (bytes32) {\n        return MerkleLib.branchRoot(leaf, proof, index);\n    }\n\n    function testProcess(bytes calldata _message, uint256 leafIndex) external {\n        bytes32 _messageHash = keccak256(abi.encodePacked(_message, leafIndex));\n        _process(_message, _messageHash);\n    }\n\n    function setMessageStatus(bytes32 _leaf, MessageStatus status) external {\n        messages[_leaf] = status;\n    }\n\n    function getRevertMsg(bytes calldata _res)\n        internal\n        pure\n        returns (string memory)\n    {\n        // If the _res length is less than 68, then the transaction failed\n        // silently (without a revert message)\n        if (_res.length < 68) return \"Transaction reverted silently\";\n\n        // Remove the selector (first 4 bytes) and decode revert string\n        return abi.decode(_res[4:], (string));\n    }\n}\n\n// File contracts/test/TestMailbox.sol\n\n// pragma solidity >=0.8.0;\n\ncontract TestMailbox is Mailbox {\n    constructor(uint32 _localDomain) Mailbox(_localDomain) {}\n\n    function initialize(address _validatorManager) external initializer {\n        __Mailbox_initialize(_validatorManager);\n    }\n}\n\n// File contracts/test/TestMerkle.sol\n\n// pragma solidity >=0.8.0;\n\ncontract TestMerkle is MerkleTreeManager {\n    using MerkleLib for MerkleLib.Tree;\n\n    // solhint-disable-next-line no-empty-blocks\n    constructor() MerkleTreeManager() {}\n\n    function insert(bytes32 _node) external {\n        tree.insert(_node);\n    }\n\n    function branchRoot(\n        bytes32 _leaf,\n        bytes32[32] calldata _proof,\n        uint256 _index\n    ) external pure returns (bytes32 _node) {\n        return MerkleLib.branchRoot(_leaf, _proof, _index);\n    }\n\n    /**\n     * @notice Returns the number of inserted leaves in the tree\n     */\n    function count() public view returns (uint256) {\n        return tree.count;\n    }\n}\n\n// File contracts/test/TestMessage.sol\n\n// pragma solidity >=0.6.11;\n\ncontract TestMessage {\n    using Message for bytes;\n\n    function body(bytes calldata _message)\n        external\n        pure\n        returns (bytes calldata _body)\n    {\n        (, , , , _body) = _message.destructure();\n    }\n\n    function origin(bytes calldata _message)\n        external\n        pure\n        returns (uint32 _origin)\n    {\n        (_origin, , , , ) = _message.destructure();\n    }\n\n    function sender(bytes calldata _message)\n        external\n        pure\n        returns (bytes32 _sender)\n    {\n        (, _sender, , , ) = _message.destructure();\n    }\n\n    function destination(bytes calldata _message)\n        external\n        pure\n        returns (uint32 _destination)\n    {\n        (, , _destination, , ) = _message.destructure();\n    }\n\n    function recipient(bytes calldata _message)\n        external\n        pure\n        returns (bytes32 _recipient)\n    {\n        (, , , _recipient, ) = _message.destructure();\n    }\n\n    function recipientAddress(bytes calldata _message)\n        external\n        pure\n        returns (address _recipient)\n    {\n        (, , , _recipient, ) = _message.destructureAddresses();\n    }\n\n    function leaf(bytes calldata _message, uint256 _leafIndex)\n        external\n        pure\n        returns (bytes32)\n    {\n        return _message.leaf(_leafIndex);\n    }\n}\n\n// File @openzeppelin/contracts/utils/Strings.sol@v4.6.0\n\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\n// pragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length)\n        internal\n        pure\n        returns (string memory)\n    {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n\n// File @openzeppelin/contracts/utils/cryptography/ECDSA.sol@v4.6.0\n\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\n\n// pragma solidity ^0.8.0;\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature)\n        internal\n        pure\n        returns (address, RecoverError)\n    {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature)\n        internal\n        pure\n        returns (address)\n    {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs &\n            bytes32(\n                0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n            );\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (\n            uint256(s) >\n            0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0\n        ) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash)\n        internal\n        pure\n        returns (bytes32)\n    {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return\n            keccak256(\n                abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash)\n            );\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s)\n        internal\n        pure\n        returns (bytes32)\n    {\n        return\n            keccak256(\n                abi.encodePacked(\n                    \"\\x19Ethereum Signed Message:\\n\",\n                    Strings.toString(s.length),\n                    s\n                )\n            );\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash)\n        internal\n        pure\n        returns (bytes32)\n    {\n        return\n            keccak256(\n                abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash)\n            );\n    }\n}\n\n// File contracts/validator-manager/MultisigValidatorManager.sol\n\n// pragma solidity >=0.8.0;\n// pragma abicoder v2;\n\n// ============ External Imports ============\n\n/**\n * @title MultisigValidatorManager\n * @notice Manages an ownable set of validators that ECDSA sign checkpoints to\n * reach a quorum.\n */\nabstract contract MultisigValidatorManager is Ownable {\n    // ============ Libraries ============\n\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    // ============ Immutables ============\n\n    // The domain of the validator set's outbox chain.\n    uint32 public immutable domain;\n\n    // The domain hash of the validator set's outbox chain.\n    bytes32 public immutable domainHash;\n\n    // ============ Mutable Storage ============\n\n    // The minimum threshold of validator signatures to constitute a quorum.\n    uint256 public threshold;\n\n    // The set of validators.\n    EnumerableSet.AddressSet private validatorSet;\n\n    // ============ Events ============\n\n    /**\n     * @notice Emitted when a validator is enrolled in the validator set.\n     * @param validator The address of the validator.\n     * @param validatorCount The new number of enrolled validators in the validator set.\n     */\n    event ValidatorEnrolled(address indexed validator, uint256 validatorCount);\n\n    /**\n     * @notice Emitted when a validator is unenrolled from the validator set.\n     * @param validator The address of the validator.\n     * @param validatorCount The new number of enrolled validators in the validator set.\n     */\n    event ValidatorUnenrolled(\n        address indexed validator,\n        uint256 validatorCount\n    );\n\n    /**\n     * @notice Emitted when the quorum threshold is set.\n     * @param threshold The new quorum threshold.\n     */\n    event ThresholdSet(uint256 threshold);\n\n    // ============ Constructor ============\n\n    /**\n     * @dev Reverts if `_validators` has any duplicates.\n     * @param _domain The domain of the outbox the validator set is for.\n     * @param _validators The set of validator addresses.\n     * @param _threshold The quorum threshold. Must be greater than or equal\n     * to the length of `_validators`.\n     */\n    constructor(\n        uint32 _domain,\n        address[] memory _validators,\n        uint256 _threshold\n    ) Ownable() {\n        // Set immutables.\n        domain = _domain;\n        domainHash = _domainHash(_domain);\n\n        // Enroll validators. Reverts if there are any duplicates.\n        uint256 _numValidators = _validators.length;\n        for (uint256 i = 0; i < _numValidators; i++) {\n            _enrollValidator(_validators[i]);\n        }\n\n        _setThreshold(_threshold);\n    }\n\n    // ============ External Functions ============\n\n    /**\n     * @notice Enrolls a validator into the validator set.\n     * @dev Reverts if `_validator` is already in the validator set.\n     * @param _validator The validator to add to the validator set.\n     */\n    function enrollValidator(address _validator) external onlyOwner {\n        _enrollValidator(_validator);\n    }\n\n    /**\n     * @notice Unenrolls a validator from the validator set.\n     * @dev Reverts if `_validator` is not in the validator set.\n     * @param _validator The validator to remove from the validator set.\n     */\n    function unenrollValidator(address _validator) external onlyOwner {\n        _unenrollValidator(_validator);\n    }\n\n    /**\n     * @notice Sets the quorum threshold.\n     * @param _threshold The new quorum threshold.\n     */\n    function setThreshold(uint256 _threshold) external onlyOwner {\n        _setThreshold(_threshold);\n    }\n\n    /**\n     * @notice Gets the addresses of the current validator set.\n     * @dev There are no ordering guarantees due to the semantics of EnumerableSet.AddressSet.\n     * @return The addresses of the validator set.\n     */\n    function validators() external view returns (address[] memory) {\n        uint256 _numValidators = validatorSet.length();\n        address[] memory _validators = new address[](_numValidators);\n        for (uint256 i = 0; i < _numValidators; i++) {\n            _validators[i] = validatorSet.at(i);\n        }\n        return _validators;\n    }\n\n    // ============ Public Functions ============\n\n    /**\n     * @notice Returns whether provided signatures over a checkpoint constitute\n     * a quorum of validator signatures.\n     * @dev Reverts if `_signatures` is not sorted in ascending order by the signer\n     * address, which is required for duplicate detection.\n     * @dev Does not revert if a signature's signer is not in the validator set.\n     * @param _root The merkle root of the checkpoint.\n     * @param _index The index of the checkpoint.\n     * @param _signatures Signatures over the checkpoint to be checked for a validator\n     * quorum. Must be sorted in ascending order by signer address.\n     * @return TRUE iff `_signatures` constitute a quorum of validator signatures over\n     * the checkpoint.\n     */\n    function isQuorum(\n        bytes32 _root,\n        uint256 _index,\n        bytes[] calldata _signatures\n    ) public view returns (bool) {\n        uint256 _numSignatures = _signatures.length;\n        // If there are fewer signatures provided than the required quorum threshold,\n        // this is not a quorum.\n        if (_numSignatures < threshold) {\n            return false;\n        }\n        // To identify duplicates, the signers recovered from _signatures\n        // must be sorted in ascending order. previousSigner is used to\n        // enforce ordering.\n        address _previousSigner = address(0);\n        uint256 _validatorSignatureCount = 0;\n        for (uint256 i = 0; i < _numSignatures; i++) {\n            address _signer = _recoverCheckpointSigner(\n                _root,\n                _index,\n                _signatures[i]\n            );\n            // Revert if the signer violates the required sort order.\n            require(_previousSigner < _signer, \"!sorted signers\");\n            // If the signer is a validator, increment _validatorSignatureCount.\n            if (isValidator(_signer)) {\n                _validatorSignatureCount++;\n            }\n            _previousSigner = _signer;\n        }\n        return _validatorSignatureCount >= threshold;\n    }\n\n    /**\n     * @notice Returns if `_validator` is enrolled in the validator set.\n     * @param _validator The address of the validator.\n     * @return TRUE iff `_validator` is enrolled in the validator set.\n     */\n    function isValidator(address _validator) public view returns (bool) {\n        return validatorSet.contains(_validator);\n    }\n\n    /**\n     * @notice Returns the number of validators enrolled in the validator set.\n     * @return The number of validators enrolled in the validator set.\n     */\n    function validatorCount() public view returns (uint256) {\n        return validatorSet.length();\n    }\n\n    // ============ Internal Functions ============\n\n    /**\n     * @notice Recovers the signer from a signature of a checkpoint.\n     * @param _root The checkpoint's merkle root.\n     * @param _index The checkpoint's index.\n     * @param _signature Signature on the the checkpoint.\n     * @return The signer of the checkpoint signature.\n     **/\n    function _recoverCheckpointSigner(\n        bytes32 _root,\n        uint256 _index,\n        bytes calldata _signature\n    ) internal view returns (address) {\n        bytes32 _digest = keccak256(\n            abi.encodePacked(domainHash, _root, _index)\n        );\n        return ECDSA.recover(ECDSA.toEthSignedMessageHash(_digest), _signature);\n    }\n\n    /**\n     * @notice Enrolls a validator into the validator set.\n     * @dev Reverts if `_validator` is already in the validator set.\n     * @param _validator The validator to add to the validator set.\n     */\n    function _enrollValidator(address _validator) internal {\n        require(validatorSet.add(_validator), \"already enrolled\");\n        emit ValidatorEnrolled(_validator, validatorCount());\n    }\n\n    /**\n     * @notice Unenrolls a validator from the validator set.\n     * @dev Reverts if the resulting validator set length is less than\n     * the quorum threshold.\n     * @dev Reverts if `_validator` is not in the validator set.\n     * @param _validator The validator to remove from the validator set.\n     */\n    function _unenrollValidator(address _validator) internal {\n        require(validatorSet.remove(_validator), \"!enrolled\");\n        uint256 _numValidators = validatorCount();\n        require(_numValidators >= threshold, \"violates quorum threshold\");\n        emit ValidatorUnenrolled(_validator, _numValidators);\n    }\n\n    /**\n     * @notice Sets the quorum threshold.\n     * @param _threshold The new quorum threshold.\n     */\n    function _setThreshold(uint256 _threshold) internal {\n        require(_threshold > 0 && _threshold <= validatorCount(), \"!range\");\n        threshold = _threshold;\n        emit ThresholdSet(_threshold);\n    }\n\n    /**\n     * @notice Hash of `_domain` concatenated with \"ABACUS\".\n     * @param _domain The domain to hash.\n     */\n    function _domainHash(uint32 _domain) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(_domain, \"ABACUS\"));\n    }\n}\n\n// File contracts/test/TestMultisigValidatorManager.sol\n\n// pragma solidity >=0.8.0;\n// pragma abicoder v2;\n\n/**\n * This contract exists to test MultisigValidatorManager.sol, which is abstract\n * and cannot be deployed directly.\n */\ncontract TestMultisigValidatorManager is MultisigValidatorManager {\n    // solhint-disable-next-line no-empty-blocks\n    constructor(\n        uint32 _domain,\n        address[] memory _validators,\n        uint256 _threshold\n    ) MultisigValidatorManager(_domain, _validators, _threshold) {}\n\n    /**\n     * @notice Hash of domain concatenated with \"ABACUS\".\n     * @dev This is a public getter of _domainHash to test with.\n     * @param _domain The domain to hash.\n     */\n    function getDomainHash(uint32 _domain) external pure returns (bytes32) {\n        return _domainHash(_domain);\n    }\n}\n\n// File contracts/test/TestOutbox.sol\n\n// pragma solidity >=0.8.0;\n\n// ============ Internal Imports ============\n\ncontract TestOutbox is Outbox {\n    constructor(uint32 _localDomain) Outbox(_localDomain) {} // solhint-disable-line no-empty-blocks\n\n    /**\n     * @notice Set the validator manager\n     * @param _validatorManager Address of the validator manager\n     */\n    function testSetValidatorManager(address _validatorManager) external {\n        validatorManager = _validatorManager;\n    }\n\n    function proof() external view returns (bytes32[32] memory) {\n        bytes32[32] memory _zeroes = MerkleLib.zeroHashes();\n        uint256 _index = tree.count - 1;\n        bytes32[32] memory _proof;\n\n        for (uint256 i = 0; i < 32; i++) {\n            uint256 _ithBit = (_index >> i) & 0x01;\n            if (_ithBit == 1) {\n                _proof[i] = tree.branch[i];\n            } else {\n                _proof[i] = _zeroes[i];\n            }\n        }\n        return _proof;\n    }\n\n    function branch() external view returns (bytes32[32] memory) {\n        return tree.branch;\n    }\n\n    function branchRoot(\n        bytes32 _item,\n        bytes32[32] memory _branch,\n        uint256 _index\n    ) external pure returns (bytes32) {\n        return MerkleLib.branchRoot(_item, _branch, _index);\n    }\n}\n\n// File contracts/test/TestRecipient.sol\n\n// pragma solidity >=0.8.0;\n\ncontract TestRecipient is IMessageRecipient {\n    bool public processed = false;\n\n    // solhint-disable-next-line payable-fallback\n    fallback() external {\n        revert(\"Fallback\");\n    }\n\n    function handle(\n        uint32,\n        bytes32,\n        bytes calldata\n    ) external pure override {} // solhint-disable-line no-empty-blocks\n\n    function receiveString(string calldata _str)\n        public\n        pure\n        returns (string memory)\n    {\n        return _str;\n    }\n\n    function processCall(bool callProcessed) public {\n        processed = callProcessed;\n    }\n\n    function message() public pure returns (string memory) {\n        return \"message received\";\n    }\n}\n\n// File contracts/test/TestSendReceiver.sol\n\n// pragma solidity >=0.8.0;\n\ncontract TestSendReceiver is IMessageRecipient {\n    using TypeCasts for address;\n\n    event Handled(bytes32 blockHash);\n\n    function dispatchToSelf(\n        IOutbox _outbox,\n        IInterchainGasPaymaster _paymaster,\n        uint32 _destinationDomain,\n        bytes calldata _messageBody\n    ) external payable {\n        uint256 _leafIndex = _outbox.dispatch(\n            _destinationDomain,\n            address(this).addressToBytes32(),\n            _messageBody\n        );\n        uint256 _blockHashNum = uint256(previousBlockHash());\n        uint256 _value = msg.value;\n        if (_blockHashNum % 5 == 0) {\n            // Pay in two separate calls, resulting in 2 distinct events\n            uint256 _half = _value / 2;\n            _paymaster.payGasFor{value: _half}(\n                address(_outbox),\n                _leafIndex,\n                _destinationDomain\n            );\n            _paymaster.payGasFor{value: _value - _half}(\n                address(_outbox),\n                _leafIndex,\n                _destinationDomain\n            );\n        } else {\n            // Pay the entire msg.value in one call\n            _paymaster.payGasFor{value: _value}(\n                address(_outbox),\n                _leafIndex,\n                _destinationDomain\n            );\n        }\n    }\n\n    function handle(\n        uint32,\n        bytes32,\n        bytes calldata\n    ) external override {\n        bytes32 blockHash = previousBlockHash();\n        bool isBlockHashEven = uint256(blockHash) % 2 == 0;\n        require(isBlockHashEven, \"block hash is odd\");\n        emit Handled(blockHash);\n    }\n\n    function previousBlockHash() internal view returns (bytes32) {\n        return blockhash(block.number - 1);\n    }\n}\n\n// File contracts/test/TestValidatorManager.sol\n\n// pragma solidity >=0.8.0;\n\n/**\n * Intended for testing Inbox.sol, which requires its validator manager\n * to be a contract.\n */\ncontract TestValidatorManager {\n    function process(\n        IInbox _inbox,\n        bytes32 _root,\n        uint256 _index,\n        bytes calldata _message,\n        bytes32[32] calldata _proof,\n        uint256 _leafIndex\n    ) external {\n        _inbox.process(_root, _index, _message, _proof, _leafIndex);\n    }\n}\n\n// File contracts/upgrade/UpgradeBeacon.sol\n\n// pragma solidity >=0.8.0;\n\n// ============ External Imports ============\n\n/**\n * @title UpgradeBeacon\n * @notice Stores the address of an implementation contract\n * and allows a controller to upgrade the implementation address\n * @dev This implementation combines the gas savings of having no function selectors\n * found in 0age's implementation:\n * https://github.com/dharma-eng/dharma-smart-wallet/blob/master/contracts/proxies/smart-wallet/UpgradeBeaconProxyV1.sol\n * With the added niceties of a safety check that each implementation is a contract\n * and an Upgrade event emitted each time the implementation is changed\n * found in OpenZeppelin's implementation:\n * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/proxy/beacon/BeaconProxy.sol\n */\ncontract UpgradeBeacon {\n    // ============ Immutables ============\n\n    // The controller is capable of modifying the implementation address\n    address private immutable controller;\n\n    // ============ Private Storage Variables ============\n\n    // The implementation address is held in storage slot zero.\n    address private implementation;\n\n    // ============ Events ============\n\n    // Upgrade event is emitted each time the implementation address is set\n    // (including deployment)\n    event Upgrade(address indexed implementation);\n\n    // ============ Constructor ============\n\n    /**\n     * @notice Validate the initial implementation and store it.\n     * Store the controller immutably.\n     * @param _initialImplementation Address of the initial implementation contract\n     * @param _controller Address of the controller who can upgrade the implementation\n     */\n    constructor(address _initialImplementation, address _controller) payable {\n        _setImplementation(_initialImplementation);\n        controller = _controller;\n    }\n\n    // ============ External Functions ============\n\n    /**\n     * @notice For all callers except the controller, return the current implementation address.\n     * If called by the Controller, update the implementation address\n     * to the address passed in the calldata.\n     * Note: this requires inline assembly because Solidity fallback functions\n     * do not natively take arguments or return values.\n     */\n    fallback() external payable {\n        if (msg.sender != controller) {\n            // if not called by the controller,\n            // load implementation address from storage slot zero\n            // and return it.\n            assembly {\n                mstore(0, sload(0))\n                return(0, 32)\n            }\n        } else {\n            // if called by the controller,\n            // load new implementation address from the first word of the calldata\n            address _newImplementation;\n            assembly {\n                _newImplementation := calldataload(0)\n            }\n            // set the new implementation\n            _setImplementation(_newImplementation);\n        }\n    }\n\n    // ============ Private Functions ============\n\n    /**\n     * @notice Perform checks on the new implementation address\n     * then upgrade the stored implementation.\n     * @param _newImplementation Address of the new implementation contract which will replace the old one\n     */\n    function _setImplementation(address _newImplementation) private {\n        // Require that the new implementation is different from the current one\n        require(implementation != _newImplementation, \"!upgrade\");\n        // Require that the new implementation is a contract\n        require(\n            Address.isContract(_newImplementation),\n            \"implementation !contract\"\n        );\n        // set the new implementation\n        implementation = _newImplementation;\n        emit Upgrade(_newImplementation);\n    }\n}\n\n// File contracts/upgrade/UpgradeBeaconController.sol\n\n// pragma solidity >=0.8.0;\n\n// ============ Internal Imports ============\n\n// ============ External Imports ============\n\n/**\n * @title UpgradeBeaconController\n * @notice Set as the controller of UpgradeBeacon contract(s),\n * capable of changing their stored implementation address.\n * @dev This implementation is a minimal version inspired by 0age's implementation:\n * https://github.com/dharma-eng/dharma-smart-wallet/blob/master/contracts/upgradeability/DharmaUpgradeBeaconController.sol\n */\ncontract UpgradeBeaconController is Ownable {\n    // ============ Events ============\n\n    event BeaconUpgraded(address indexed beacon, address implementation);\n\n    // ============ External Functions ============\n\n    /**\n     * @notice Modify the implementation stored in the UpgradeBeacon,\n     * which will upgrade the implementation used by all\n     * Proxy contracts using that UpgradeBeacon\n     * @param _beacon Address of the UpgradeBeacon which will be updated\n     * @param _implementation Address of the Implementation contract to upgrade the Beacon to\n     */\n    function upgrade(address _beacon, address _implementation)\n        external\n        onlyOwner\n    {\n        // Require that the beacon is a contract\n        require(Address.isContract(_beacon), \"beacon !contract\");\n        // Call into beacon and supply address of new implementation to update it.\n        (bool _success, ) = _beacon.call(abi.encode(_implementation));\n        // Revert with message on failure (i.e. if the beacon is somehow incorrect).\n        if (!_success) {\n            assembly {\n                returndatacopy(0, 0, returndatasize())\n                revert(0, returndatasize())\n            }\n        }\n        emit BeaconUpgraded(_beacon, _implementation);\n    }\n}\n\n// File contracts/upgrade/UpgradeBeaconProxy.sol\n\n// pragma solidity >=0.8.0;\n\n// ============ External Imports ============\n\n/**\n * @title UpgradeBeaconProxy\n * @notice\n * Proxy contract which delegates all logic, including initialization,\n * to an implementation contract.\n * The implementation contract is stored within an Upgrade Beacon contract;\n * the implementation contract can be changed by performing an upgrade on the Upgrade Beacon contract.\n * The Upgrade Beacon contract for this Proxy is immutably specified at deployment.\n * @dev This implementation combines the gas savings of keeping the UpgradeBeacon address outside of contract storage\n * found in 0age's implementation:\n * https://github.com/dharma-eng/dharma-smart-wallet/blob/master/contracts/proxies/smart-wallet/UpgradeBeaconProxyV1.sol\n * With the added safety checks that the UpgradeBeacon and implementation are contracts at time of deployment\n * found in OpenZeppelin's implementation:\n * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/proxy/beacon/BeaconProxy.sol\n */\ncontract UpgradeBeaconProxy {\n    // ============ Immutables ============\n\n    // Upgrade Beacon address is immutable (therefore not kept in contract storage)\n    address private immutable upgradeBeacon;\n\n    // ============ Constructor ============\n\n    /**\n     * @notice Validate that the Upgrade Beacon is a contract, then set its\n     * address immutably within this contract.\n     * Validate that the implementation is also a contract,\n     * Then call the initialization function defined at the implementation.\n     * The deployment will revert and pass along the\n     * revert reason if the initialization function reverts.\n     * @param _upgradeBeacon Address of the Upgrade Beacon to be stored immutably in the contract\n     * @param _initializationCalldata Calldata supplied when calling the initialization function\n     */\n    constructor(address _upgradeBeacon, bytes memory _initializationCalldata)\n        payable\n    {\n        // Validate the Upgrade Beacon is a contract\n        require(Address.isContract(_upgradeBeacon), \"beacon !contract\");\n        // set the Upgrade Beacon\n        upgradeBeacon = _upgradeBeacon;\n        // Validate the implementation is a contract\n        address _implementation = _getImplementation(_upgradeBeacon);\n        require(\n            Address.isContract(_implementation),\n            \"beacon implementation !contract\"\n        );\n        // Call the initialization function on the implementation\n        if (_initializationCalldata.length > 0) {\n            _initialize(_implementation, _initializationCalldata);\n        }\n    }\n\n    // ============ External Functions ============\n\n    /**\n     * @notice Forwards all calls with data to _fallback()\n     * No public functions are declared on the contract, so all calls hit fallback\n     */\n    fallback() external payable {\n        _fallback();\n    }\n\n    /**\n     * @notice Forwards all calls with no data to _fallback()\n     */\n    receive() external payable {\n        _fallback();\n    }\n\n    // ============ Private Functions ============\n\n    /**\n     * @notice Call the initialization function on the implementation\n     * Used at deployment to initialize the proxy\n     * based on the logic for initialization defined at the implementation\n     * @param _implementation - Contract to which the initalization is delegated\n     * @param _initializationCalldata - Calldata supplied when calling the initialization function\n     */\n    function _initialize(\n        address _implementation,\n        bytes memory _initializationCalldata\n    ) private {\n        // Delegatecall into the implementation, supplying initialization calldata.\n        (bool _ok, ) = _implementation.delegatecall(_initializationCalldata);\n        // Revert and include revert data if delegatecall to implementation reverts.\n        if (!_ok) {\n            assembly {\n                returndatacopy(0, 0, returndatasize())\n                revert(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @notice Delegates function calls to the implementation contract returned by the Upgrade Beacon\n     */\n    function _fallback() private {\n        _delegate(_getImplementation());\n    }\n\n    /**\n     * @notice Delegate function execution to the implementation contract\n     * @dev This is a low level function that doesn't return to its internal\n     * call site. It will return whatever is returned by the implementation to the\n     * external caller, reverting and returning the revert data if implementation\n     * reverts.\n     * @param _implementation - Address to which the function execution is delegated\n     */\n    function _delegate(address _implementation) private {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n            // Delegatecall to the implementation, supplying calldata and gas.\n            // Out and outsize are set to zero - instead, use the return buffer.\n            let result := delegatecall(\n                gas(),\n                _implementation,\n                0,\n                calldatasize(),\n                0,\n                0\n            )\n            // Copy the returned data from the return buffer.\n            returndatacopy(0, 0, returndatasize())\n            switch result\n            // Delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @notice Call the Upgrade Beacon to get the current implementation contract address\n     * @return _implementation Address of the current implementation.\n     */\n    function _getImplementation()\n        private\n        view\n        returns (address _implementation)\n    {\n        _implementation = _getImplementation(upgradeBeacon);\n    }\n\n    /**\n     * @notice Call the Upgrade Beacon to get the current implementation contract address\n     * @dev _upgradeBeacon is passed as a parameter so that\n     * we can also use this function in the constructor,\n     * where we can't access immutable variables.\n     * @param _upgradeBeacon Address of the UpgradeBeacon storing the current implementation\n     * @return _implementation Address of the current implementation.\n     */\n    function _getImplementation(address _upgradeBeacon)\n        private\n        view\n        returns (address _implementation)\n    {\n        // Get the current implementation address from the upgrade beacon.\n        (bool _ok, bytes memory _returnData) = _upgradeBeacon.staticcall(\"\");\n        // Revert and pass along revert message if call to upgrade beacon reverts.\n        require(_ok, string(_returnData));\n        // Set the implementation to the address returned from the upgrade beacon.\n        _implementation = abi.decode(_returnData, (address));\n    }\n}\n\n// File contracts/validator-manager/InboxValidatorManager.sol\n\n// pragma solidity >=0.8.0;\n// pragma abicoder v2;\n\n// ============ Internal Imports ============\n\n/**\n * @title InboxValidatorManager\n * @notice Verifies checkpoints are signed by a quorum of validators and submits\n * them to an Inbox.\n */\ncontract InboxValidatorManager is MultisigValidatorManager {\n    // ============ Constructor ============\n\n    /**\n     * @dev Reverts if `_validators` has any duplicates.\n     * @param _remoteDomain The remote domain of the outbox chain.\n     * @param _validators The set of validator addresses.\n     * @param _threshold The quorum threshold. Must be greater than or equal\n     * to the length of `_validators`.\n     */\n    // solhint-disable-next-line no-empty-blocks\n    constructor(\n        uint32 _remoteDomain,\n        address[] memory _validators,\n        uint256 _threshold\n    ) MultisigValidatorManager(_remoteDomain, _validators, _threshold) {}\n\n    // ============ External Functions ============\n\n    /**\n     * @notice Verifies a signed checkpoint and submits a message for processing.\n     * @dev Reverts if `_signatures` is not a quorum of validator signatures.\n     * @dev Reverts if `_signatures` is not sorted in ascending order by the signer\n     * address, which is required for duplicate detection.\n     * @param _inbox The inbox to submit the message to.\n     * @param _root The merkle root of the signed checkpoint.\n     * @param _index The index of the signed checkpoint.\n     * @param _signatures Signatures over the checkpoint to be checked for a validator\n     * quorum. Must be sorted in ascending order by signer address.\n     * @param _message The message to process.\n     * @param _proof Merkle proof of inclusion for message's leaf\n     * @param _leafIndex Index of leaf in outbox's merkle tree\n     */\n    function process(\n        IInbox _inbox,\n        bytes32 _root,\n        uint256 _index,\n        bytes[] calldata _signatures,\n        bytes calldata _message,\n        bytes32[32] calldata _proof,\n        uint256 _leafIndex\n    ) external {\n        require(isQuorum(_root, _index, _signatures), \"!quorum\");\n        _inbox.process(_root, _index, _message, _proof, _leafIndex);\n    }\n}\n\n// File contracts/validator-manager/OutboxValidatorManager.sol\n\n// pragma solidity >=0.8.0;\n// pragma abicoder v2;\n\n// ============ Internal Imports ============\n\n/**\n * @title OutboxValidatorManager\n * @notice Verifies if an premature or fraudulent checkpoint has been signed by a quorum of\n * validators and reports it to an Outbox.\n */\ncontract OutboxValidatorManager is MultisigValidatorManager {\n    // ============ Events ============\n\n    /**\n     * @notice Emitted when a checkpoint is proven premature.\n     * @dev Observers of this event should filter by the outbox address.\n     * @param outbox The outbox.\n     * @param signedRoot Root of the premature checkpoint.\n     * @param signedIndex Index of the premature checkpoint.\n     * @param signatures A quorum of signatures on the premature checkpoint.\n     * May include non-validator signatures.\n     * @param count The number of messages in the Outbox.\n     */\n    event PrematureCheckpoint(\n        address indexed outbox,\n        bytes32 signedRoot,\n        uint256 signedIndex,\n        bytes[] signatures,\n        uint256 count\n    );\n\n    /**\n     * @notice Emitted when a checkpoint is proven fraudulent.\n     * @dev Observers of this event should filter by the outbox address.\n     * @param outbox The outbox.\n     * @param signedRoot Root of the fraudulent checkpoint.\n     * @param signedIndex Index of the fraudulent checkpoint.\n     * @param signatures A quorum of signatures on the fraudulent checkpoint.\n     * May include non-validator signatures.\n     * @param fraudulentLeaf The leaf in the fraudulent tree.\n     * @param fraudulentProof Proof of inclusion of fraudulentLeaf.\n     * @param actualLeaf The leaf in the Outbox's tree.\n     * @param actualProof Proof of inclusion of actualLeaf.\n     * @param leafIndex The index of the leaves that are being proved.\n     */\n    event FraudulentCheckpoint(\n        address indexed outbox,\n        bytes32 signedRoot,\n        uint256 signedIndex,\n        bytes[] signatures,\n        bytes32 fraudulentLeaf,\n        bytes32[32] fraudulentProof,\n        bytes32 actualLeaf,\n        bytes32[32] actualProof,\n        uint256 leafIndex\n    );\n\n    // ============ Constructor ============\n\n    /**\n     * @dev Reverts if `_validators` has any duplicates.\n     * @param _localDomain The local domain.\n     * @param _validators The set of validator addresses.\n     * @param _threshold The quorum threshold. Must be greater than or equal\n     * to the length of `_validators`.\n     */\n    // solhint-disable-next-line no-empty-blocks\n    constructor(\n        uint32 _localDomain,\n        address[] memory _validators,\n        uint256 _threshold\n    ) MultisigValidatorManager(_localDomain, _validators, _threshold) {}\n\n    // ============ External Functions ============\n\n    /**\n     * @notice Determines if a quorum of validators have signed a premature checkpoint,\n     * failing the Outbox if so.\n     * A checkpoint is premature if it commits to more messages than are present in the\n     * Outbox's merkle tree.\n     * @dev Premature checkpoints signed by individual validators are not handled to prevent\n     * a single byzantine validator from failing the Outbox.\n     * @param _outbox The outbox.\n     * @param _signedRoot The root of the signed checkpoint.\n     * @param _signedIndex The index of the signed checkpoint.\n     * @param _signatures Signatures over the checkpoint to be checked for a validator\n     * quorum. Must be sorted in ascending order by signer address.\n     * @return True iff prematurity was proved.\n     */\n    function prematureCheckpoint(\n        IOutbox _outbox,\n        bytes32 _signedRoot,\n        uint256 _signedIndex,\n        bytes[] calldata _signatures\n    ) external returns (bool) {\n        require(isQuorum(_signedRoot, _signedIndex, _signatures), \"!quorum\");\n        // Checkpoints are premature if the checkpoint commits to more messages\n        // than the Outbox has in its merkle tree.\n        uint256 count = _outbox.count();\n        require(_signedIndex >= count, \"!premature\");\n        _outbox.fail();\n        emit PrematureCheckpoint(\n            address(_outbox),\n            _signedRoot,\n            _signedIndex,\n            _signatures,\n            count\n        );\n        return true;\n    }\n\n    /**\n     * @notice Determines if a quorum of validators have signed a fraudulent checkpoint,\n     * failing the Outbox if so.\n     * A checkpoint is fraudulent if the leaf it commits to at index I differs\n     * from the leaf the Outbox committed to at index I, where I is less than or equal\n     * to the index of the checkpoint.\n     * This difference can be proved by comparing two merkle proofs for leaf\n     * index J >= I. One against the fraudulent checkpoint, and one against a\n     * checkpoint cached on the Outbox.\n     * @dev Fraudulent checkpoints signed by individual validators are not handled to prevent\n     * a single byzantine validator from failing the Outbox.\n     * @param _outbox The outbox.\n     * @param _signedRoot The root of the signed checkpoint.\n     * @param _signedIndex The index of the signed checkpoint.\n     * @param _signatures Signatures over the checkpoint to be checked for a validator\n     * quorum. Must be sorted in ascending order by signer address.\n     * @param _fraudulentLeaf The leaf in the fraudulent tree.\n     * @param _fraudulentProof Proof of inclusion of `_fraudulentLeaf`.\n     * @param _actualLeaf The leaf in the Outbox's tree.\n     * @param _actualProof Proof of inclusion of `_actualLeaf`.\n     * @param _leafIndex The index of the leaves that are being proved.\n     * @return True iff fraud was proved.\n     */\n    function fraudulentCheckpoint(\n        IOutbox _outbox,\n        bytes32 _signedRoot,\n        uint256 _signedIndex,\n        bytes[] calldata _signatures,\n        bytes32 _fraudulentLeaf,\n        bytes32[32] calldata _fraudulentProof,\n        bytes32 _actualLeaf,\n        bytes32[32] calldata _actualProof,\n        uint256 _leafIndex\n    ) external returns (bool) {\n        // Check the signed checkpoint commits to _fraudulentLeaf at _leafIndex.\n        require(isQuorum(_signedRoot, _signedIndex, _signatures), \"!quorum\");\n        bytes32 _fraudulentRoot = MerkleLib.branchRoot(\n            _fraudulentLeaf,\n            _fraudulentProof,\n            _leafIndex\n        );\n        require(_fraudulentRoot == _signedRoot, \"!root\");\n        require(_signedIndex >= _leafIndex, \"!index\");\n\n        // Check the cached checkpoint commits to _actualLeaf at _leafIndex.\n        bytes32 _cachedRoot = MerkleLib.branchRoot(\n            _actualLeaf,\n            _actualProof,\n            _leafIndex\n        );\n        uint256 _cachedIndex = _outbox.cachedCheckpoints(_cachedRoot);\n        require(_cachedIndex > 0 && _cachedIndex >= _leafIndex, \"!cache\");\n\n        // Check that the two roots commit to at least one differing leaf\n        // with index <= _leafIndex.\n        require(\n            impliesDifferingLeaf(\n                _fraudulentLeaf,\n                _fraudulentProof,\n                _actualLeaf,\n                _actualProof,\n                _leafIndex\n            ),\n            \"!fraud\"\n        );\n\n        // Fail the Outbox.\n        _outbox.fail();\n        emit FraudulentCheckpoint(\n            address(_outbox),\n            _signedRoot,\n            _signedIndex,\n            _signatures,\n            _fraudulentLeaf,\n            _fraudulentProof,\n            _actualLeaf,\n            _actualProof,\n            _leafIndex\n        );\n        return true;\n    }\n\n    /**\n     * @notice Returns true if the implied merkle roots commit to at least one\n     * differing leaf with index <= `_leafIndex`.\n     * Given a merkle proof for leaf index J, we can determine whether an\n     * element in the proof is an internal node whose terminal children are leaves\n     * with index <= J.\n     * Given two merkle proofs for leaf index J, if such elements do not match,\n     * these two proofs necessarily commit to at least one differing leaf with\n     * index I <= J.\n     * @param _leafA The leaf in tree A.\n     * @param _proofA Proof of inclusion of `_leafA` in tree A.\n     * @param _leafB The leaf in tree B.\n     * @param _proofB Proof of inclusion of `_leafB` in tree B.\n     * @param _leafIndex The index of `_leafA` and `_leafB`.\n     * @return differ True if the implied trees differ, false if not.\n     */\n    function impliesDifferingLeaf(\n        bytes32 _leafA,\n        bytes32[32] calldata _proofA,\n        bytes32 _leafB,\n        bytes32[32] calldata _proofB,\n        uint256 _leafIndex\n    ) public pure returns (bool) {\n        // The implied merkle roots commit to at least one differing leaf\n        // with index <= _leafIndex, if either:\n\n        // 1. If the provided leaves differ.\n        if (_leafA != _leafB) {\n            return true;\n        }\n\n        // 2. If the branches contain internal nodes whose subtrees are full\n        // (as implied by _leafIndex) that differ from one another.\n        for (uint8 i = 0; i < 32; i++) {\n            uint256 _ithBit = (_leafIndex >> i) & 0x01;\n            // If the i'th is 1, the i'th element in the proof is an internal\n            // node whose subtree is full.\n            // If these nodes differ, at least one leaf that they commit to\n            // must differ as well.\n            if (_ithBit == 1) {\n                if (_proofA[i] != _proofB[i]) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\n\n// File contracts/test/bad-recipient/BadRecipient2.sol\n\n// pragma solidity >=0.8.0;\n\ncontract BadRecipient2 {\n    function handle(uint32, bytes32) external pure {} // solhint-disable-line no-empty-blocks\n}\n", "ABI": "[{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_remoteDomain\",\"type\":\"uint32\"},{\"internalType\":\"address[]\",\"name\":\"_validators\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"ThresholdSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"validatorCount\",\"type\":\"uint256\"}],\"name\":\"ValidatorEnrolled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"validatorCount\",\"type\":\"uint256\"}],\"name\":\"ValidatorUnenrolled\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"domain\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"domainHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"enrollValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"_signatures\",\"type\":\"bytes[]\"}],\"name\":\"isQuorum\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"isValidator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IInbox\",\"name\":\"_inbox\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"_signatures\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"bytes32[32]\",\"name\":\"_proof\",\"type\":\"bytes32[32]\"},{\"internalType\":\"uint256\",\"name\":\"_leafIndex\",\"type\":\"uint256\"}],\"name\":\"process\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"}],\"name\":\"setThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"threshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"unenrollValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "InboxValidatorManager", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "999999", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000063656c6f0000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000030000000000000000000000008784f09c2cfb70329b936a3b75eb61c41b467b6500000000000000000000000036daf0ac1f4feb22440ea0834308e0d3ae4091390000000000000000000000003fc9689d60e3fe78a624eeb5d9d3452b272cb1a4", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}