{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/SpeedMarkets/SpeedMarketsAMM.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// external\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-4.4.1/proxy/Clones.sol\\\";\\n\\nimport \\\"@pythnetwork/pyth-sdk-solidity/IPyth.sol\\\";\\nimport \\\"@pythnetwork/pyth-sdk-solidity/PythStructs.sol\\\";\\n\\n// internal\\nimport \\\"../utils/proxy/solidity-0.8.0/ProxyReentrancyGuard.sol\\\";\\nimport \\\"../utils/proxy/solidity-0.8.0/ProxyOwned.sol\\\";\\nimport \\\"../utils/proxy/solidity-0.8.0/ProxyPausable.sol\\\";\\nimport \\\"../utils/libraries/AddressSetLib.sol\\\";\\n\\nimport \\\"../interfaces/IStakingThales.sol\\\";\\nimport \\\"../interfaces/IMultiCollateralOnOffRamp.sol\\\";\\nimport {IReferrals} from \\\"../interfaces/IReferrals.sol\\\";\\n\\nimport \\\"./SpeedMarket.sol\\\";\\nimport \\\"./SpeedMarketsAMMUtils.sol\\\";\\n\\n/// @title An AMM for Thales speed markets\\ncontract SpeedMarketsAMM is Initializable, ProxyOwned, ProxyPausable, ProxyReentrancyGuard {\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n    using AddressSetLib for AddressSetLib.AddressSet;\\n\\n    AddressSetLib.AddressSet internal _activeMarkets;\\n    AddressSetLib.AddressSet internal _maturedMarkets;\\n\\n    uint private constant ONE = 1e18;\\n    uint private constant MAX_APPROVAL = type(uint256).max;\\n\\n    IERC20Upgradeable public sUSD;\\n\\n    address public speedMarketMastercopy;\\n\\n    uint public safeBoxImpact;\\n    uint public lpFee;\\n\\n    address public safeBox;\\n\\n    mapping(bytes32 => bool) public supportedAsset;\\n\\n    uint public minimalTimeToMaturity;\\n    uint public maximalTimeToMaturity;\\n\\n    uint public minBuyinAmount;\\n    uint public maxBuyinAmount;\\n\\n    mapping(bytes32 => uint) public maxRiskPerAsset;\\n    mapping(bytes32 => uint) public currentRiskPerAsset;\\n\\n    mapping(bytes32 => bytes32) public assetToPythId;\\n\\n    //eth 0xff61491a931112ddf1bd8147cd1b641375f79f5825126d665480874634fd0ace\\n    IPyth public pyth;\\n\\n    uint64 public maximumPriceDelay;\\n\\n    /// @return The address of the Staking contract\\n    IStakingThales public stakingThales;\\n\\n    mapping(address => AddressSetLib.AddressSet) internal _activeMarketsPerUser;\\n    mapping(address => AddressSetLib.AddressSet) internal _maturedMarketsPerUser;\\n\\n    mapping(address => bool) public whitelistedAddresses;\\n    IMultiCollateralOnOffRamp public multiCollateralOnOffRamp;\\n    bool public multicollateralEnabled;\\n\\n    mapping(bytes32 => mapping(SpeedMarket.Direction => uint)) public maxRiskPerAssetAndDirection;\\n    mapping(bytes32 => mapping(SpeedMarket.Direction => uint)) public currentRiskPerAssetAndDirection;\\n\\n    uint64 public maximumPriceDelayForResolving;\\n\\n    mapping(address => bool) public marketHasCreatedAtAttribute;\\n\\n    address public referrals;\\n\\n    uint[] public timeThresholdsForFees;\\n    uint[] public lpFees;\\n\\n    SpeedMarketsAMMUtils private speedMarketsAMMUtils;\\n\\n    mapping(address => bool) public marketHasFeeAttribute;\\n\\n    receive() external payable {}\\n\\n    function initialize(\\n        address _owner,\\n        IERC20Upgradeable _sUSD,\\n        IPyth _pyth\\n    ) external initializer {\\n        setOwner(_owner);\\n        initNonReentrant();\\n        sUSD = _sUSD;\\n        pyth = _pyth;\\n    }\\n\\n    function createNewMarket(\\n        bytes32 asset,\\n        uint64 strikeTime,\\n        SpeedMarket.Direction direction,\\n        uint buyinAmount,\\n        bytes[] calldata priceUpdateData,\\n        address referrer\\n    ) external payable nonReentrant notPaused {\\n        _createNewMarket(asset, strikeTime, direction, buyinAmount, priceUpdateData, true, referrer);\\n    }\\n\\n    function createNewMarketWithDelta(\\n        bytes32 asset,\\n        uint64 delta,\\n        SpeedMarket.Direction direction,\\n        uint buyinAmount,\\n        bytes[] calldata priceUpdateData,\\n        address referrer\\n    ) external payable nonReentrant notPaused {\\n        _createNewMarket(asset, uint64(block.timestamp + delta), direction, buyinAmount, priceUpdateData, true, referrer);\\n    }\\n\\n    function createNewMarketWithDifferentCollateral(\\n        bytes32 asset,\\n        uint64 strikeTime,\\n        SpeedMarket.Direction direction,\\n        bytes[] calldata priceUpdateData,\\n        address collateral,\\n        uint collateralAmount,\\n        bool isEth,\\n        address referrer\\n    ) external payable nonReentrant notPaused {\\n        _createNewMarketWithDifferentCollateral(\\n            asset,\\n            strikeTime,\\n            direction,\\n            priceUpdateData,\\n            collateral,\\n            collateralAmount,\\n            isEth,\\n            referrer\\n        );\\n    }\\n\\n    function createNewMarketWithDifferentCollateralAndDelta(\\n        bytes32 asset,\\n        uint64 delta,\\n        SpeedMarket.Direction direction,\\n        bytes[] calldata priceUpdateData,\\n        address collateral,\\n        uint collateralAmount,\\n        bool isEth,\\n        address referrer\\n    ) external payable nonReentrant notPaused {\\n        _createNewMarketWithDifferentCollateral(\\n            asset,\\n            uint64(block.timestamp + delta),\\n            direction,\\n            priceUpdateData,\\n            collateral,\\n            collateralAmount,\\n            isEth,\\n            referrer\\n        );\\n    }\\n\\n    function _convertCollateral(\\n        address collateral,\\n        uint collateralAmount,\\n        bool isEth\\n    ) internal returns (uint convertedAmount) {\\n        if (isEth) {\\n            convertedAmount = multiCollateralOnOffRamp.onrampWithEth{value: collateralAmount}(collateralAmount);\\n        } else {\\n            IERC20Upgradeable(collateral).safeTransferFrom(msg.sender, address(this), collateralAmount);\\n            IERC20Upgradeable(collateral).approve(address(multiCollateralOnOffRamp), collateralAmount);\\n            convertedAmount = multiCollateralOnOffRamp.onramp(collateral, collateralAmount);\\n        }\\n    }\\n\\n    function _createNewMarketWithDifferentCollateral(\\n        bytes32 asset,\\n        uint64 strikeTime,\\n        SpeedMarket.Direction direction,\\n        bytes[] calldata priceUpdateData,\\n        address collateral,\\n        uint collateralAmount,\\n        bool isEth,\\n        address referrer\\n    ) internal {\\n        require(multicollateralEnabled, \\\"Multicollateral onramp not enabled\\\");\\n        uint amountBefore = sUSD.balanceOf(address(this));\\n\\n        uint convertedAmount = _convertCollateral(collateral, collateralAmount, isEth);\\n        uint lpFeeForDeltaTime = speedMarketsAMMUtils.getFeeByTimeThreshold(\\n            uint64(strikeTime - block.timestamp),\\n            timeThresholdsForFees,\\n            lpFees,\\n            lpFee\\n        );\\n        uint buyinAmount = (convertedAmount * (ONE - safeBoxImpact - lpFeeForDeltaTime)) / ONE;\\n\\n        uint amountDiff = sUSD.balanceOf(address(this)) - amountBefore;\\n        require(amountDiff >= buyinAmount, \\\"not enough received via onramp\\\");\\n\\n        _createNewMarket(asset, strikeTime, direction, buyinAmount, priceUpdateData, false, referrer);\\n    }\\n\\n    function _handleRisk(\\n        bytes32 asset,\\n        SpeedMarket.Direction direction,\\n        uint buyinAmount,\\n        uint lpFeeForDeltaTime\\n    ) internal {\\n        currentRiskPerAsset[asset] += (buyinAmount * (ONE - safeBoxImpact - lpFeeForDeltaTime)) / ONE;\\n        require(currentRiskPerAsset[asset] <= maxRiskPerAsset[asset], \\\"OI cap breached\\\");\\n\\n        SpeedMarket.Direction oppositeDirection = direction == SpeedMarket.Direction.Up\\n            ? SpeedMarket.Direction.Down\\n            : SpeedMarket.Direction.Up;\\n\\n        // decrease risk for opposite directionif there is, otherwise increase risk for current direction\\n        if (currentRiskPerAssetAndDirection[asset][oppositeDirection] > buyinAmount) {\\n            currentRiskPerAssetAndDirection[asset][oppositeDirection] -= buyinAmount;\\n        } else {\\n            uint amountToIncreaseRisk = buyinAmount - currentRiskPerAssetAndDirection[asset][oppositeDirection];\\n            currentRiskPerAssetAndDirection[asset][oppositeDirection] = 0;\\n            currentRiskPerAssetAndDirection[asset][direction] += amountToIncreaseRisk;\\n            require(\\n                currentRiskPerAssetAndDirection[asset][direction] <= maxRiskPerAssetAndDirection[asset][direction],\\n                \\\"Risk per direction exceeded\\\"\\n            );\\n        }\\n    }\\n\\n    function _createNewMarket(\\n        bytes32 asset,\\n        uint64 strikeTime,\\n        SpeedMarket.Direction direction,\\n        uint buyinAmount,\\n        bytes[] memory priceUpdateData,\\n        bool transferSusd,\\n        address referrer\\n    ) internal {\\n        if (referrer != address(0)) {\\n            IReferrals(referrals).setReferrer(referrer, msg.sender);\\n        }\\n        require(supportedAsset[asset], \\\"Asset is not supported\\\");\\n        require(buyinAmount >= minBuyinAmount && buyinAmount <= maxBuyinAmount, \\\"wrong buy in amount\\\");\\n        require(\\n            strikeTime >= (block.timestamp + minimalTimeToMaturity),\\n            \\\"time has to be in the future + minimalTimeToMaturity\\\"\\n        );\\n        require(strikeTime <= block.timestamp + maximalTimeToMaturity, \\\"time too far into the future\\\");\\n\\n        uint lpFeeForDeltaTime = speedMarketsAMMUtils.getFeeByTimeThreshold(\\n            uint64(strikeTime - block.timestamp),\\n            timeThresholdsForFees,\\n            lpFees,\\n            lpFee\\n        );\\n        _handleRisk(asset, direction, buyinAmount, lpFeeForDeltaTime);\\n\\n        pyth.updatePriceFeeds{value: pyth.getUpdateFee(priceUpdateData)}(priceUpdateData);\\n\\n        PythStructs.Price memory price = pyth.getPrice(assetToPythId[asset]);\\n\\n        require((price.publishTime + maximumPriceDelay) > block.timestamp && price.price > 0, \\\"Stale price\\\");\\n\\n        if (transferSusd) {\\n            uint totalAmountToTransfer = (buyinAmount * (ONE + safeBoxImpact + lpFeeForDeltaTime)) / ONE;\\n            sUSD.safeTransferFrom(msg.sender, address(this), totalAmountToTransfer);\\n        }\\n        SpeedMarket srm = SpeedMarket(Clones.clone(speedMarketMastercopy));\\n        srm.initialize(\\n            SpeedMarket.InitParams(\\n                address(this),\\n                msg.sender,\\n                asset,\\n                strikeTime,\\n                price.price,\\n                direction,\\n                buyinAmount,\\n                safeBoxImpact,\\n                lpFeeForDeltaTime\\n            )\\n        );\\n\\n        sUSD.safeTransfer(address(srm), buyinAmount * 2);\\n\\n        uint referrerShare;\\n        if (referrals != address(0) && referrer != address(0)) {\\n            uint referrerFeeByTier = IReferrals(referrals).getReferrerFee(referrer);\\n            if (referrerFeeByTier > 0) {\\n                referrerShare = (buyinAmount * referrerFeeByTier) / ONE;\\n                sUSD.safeTransfer(referrer, referrerShare);\\n                emit ReferrerPaid(referrer, msg.sender, referrerShare, buyinAmount);\\n            }\\n        }\\n        sUSD.safeTransfer(safeBox, (buyinAmount * safeBoxImpact) / ONE - referrerShare);\\n\\n        _activeMarkets.add(address(srm));\\n        _activeMarketsPerUser[msg.sender].add(address(srm));\\n\\n        if (address(stakingThales) != address(0)) {\\n            stakingThales.updateVolume(msg.sender, buyinAmount);\\n        }\\n\\n        marketHasCreatedAtAttribute[address(srm)] = true;\\n        marketHasFeeAttribute[address(srm)] = true;\\n        emit MarketCreated(address(srm), msg.sender, asset, strikeTime, price.price, direction, buyinAmount);\\n        emit MarketCreatedWithFees(\\n            address(srm),\\n            msg.sender,\\n            asset,\\n            strikeTime,\\n            price.price,\\n            direction,\\n            buyinAmount,\\n            safeBoxImpact,\\n            lpFeeForDeltaTime\\n        );\\n    }\\n\\n    /// @notice resolveMarket resolves an active market\\n    /// @param market address of the market\\n    function resolveMarket(address market, bytes[] calldata priceUpdateData) external payable nonReentrant notPaused {\\n        _resolveMarket(market, priceUpdateData);\\n    }\\n\\n    /// @notice resolveMarket resolves an active market with offramp\\n    /// @param market address of the market\\n    function resolveMarketWithOfframp(\\n        address market,\\n        bytes[] calldata priceUpdateData,\\n        address collateral,\\n        bool toEth\\n    ) external payable nonReentrant notPaused {\\n        address user = SpeedMarket(market).user();\\n        require(msg.sender == user, \\\"Only allowed from market owner\\\");\\n        uint amountBefore = sUSD.balanceOf(user);\\n        _resolveMarket(market, priceUpdateData);\\n        uint amountDiff = sUSD.balanceOf(user) - amountBefore;\\n        sUSD.safeTransferFrom(user, address(this), amountDiff);\\n        if (amountDiff > 0) {\\n            if (toEth) {\\n                uint offramped = multiCollateralOnOffRamp.offrampIntoEth(amountDiff);\\n                address payable _to = payable(user);\\n                bool sent = _to.send(offramped);\\n                require(sent, \\\"Failed to send Ether\\\");\\n            } else {\\n                uint offramped = multiCollateralOnOffRamp.offramp(collateral, amountDiff);\\n                IERC20Upgradeable(collateral).safeTransfer(user, offramped);\\n            }\\n        }\\n    }\\n\\n    /// @notice resolveMarkets in a batch\\n    function resolveMarketsBatch(address[] calldata markets, bytes[] calldata priceUpdateData)\\n        external\\n        payable\\n        nonReentrant\\n        notPaused\\n    {\\n        for (uint i = 0; i < markets.length; i++) {\\n            if (canResolveMarket(markets[i])) {\\n                bytes[] memory subarray = new bytes[](1);\\n                subarray[0] = priceUpdateData[i];\\n                _resolveMarket(markets[i], subarray);\\n            }\\n        }\\n    }\\n\\n    function _resolveMarket(address market, bytes[] memory priceUpdateData) internal {\\n        require(canResolveMarket(market), \\\"Can not resolve\\\");\\n\\n        bytes32[] memory priceIds = new bytes32[](1);\\n        priceIds[0] = assetToPythId[SpeedMarket(market).asset()];\\n        PythStructs.PriceFeed[] memory prices = pyth.parsePriceFeedUpdates{value: pyth.getUpdateFee(priceUpdateData)}(\\n            priceUpdateData,\\n            priceIds,\\n            SpeedMarket(market).strikeTime(),\\n            SpeedMarket(market).strikeTime() + maximumPriceDelayForResolving\\n        );\\n\\n        PythStructs.Price memory price = prices[0].price;\\n\\n        require(price.price > 0, \\\"invalid price\\\");\\n\\n        _resolveMarketWithPrice(market, price.price);\\n    }\\n\\n    /// @notice admin resolve market for a given market address with finalPrice\\n    function resolveMarketManually(address _market, int64 _finalPrice) external isAddressWhitelisted {\\n        _resolveMarketManually(_market, _finalPrice);\\n    }\\n\\n    /// @notice admin resolve for a given markets with finalPrices\\n    function resolveMarketManuallyBatch(address[] calldata markets, int64[] calldata finalPrices)\\n        external\\n        isAddressWhitelisted\\n    {\\n        for (uint i = 0; i < markets.length; i++) {\\n            if (canResolveMarket(markets[i])) {\\n                _resolveMarketManually(markets[i], finalPrices[i]);\\n            }\\n        }\\n    }\\n\\n    function _resolveMarketManually(address _market, int64 _finalPrice) internal {\\n        require(canResolveMarket(_market), \\\"Can not resolve\\\");\\n        _resolveMarketWithPrice(_market, _finalPrice);\\n    }\\n\\n    function _resolveMarketWithPrice(address market, int64 _finalPrice) internal {\\n        SpeedMarket(market).resolve(_finalPrice);\\n        _activeMarkets.remove(market);\\n        _maturedMarkets.add(market);\\n        address user = SpeedMarket(market).user();\\n\\n        if (_activeMarketsPerUser[user].contains(market)) {\\n            _activeMarketsPerUser[user].remove(market);\\n        }\\n        _maturedMarketsPerUser[user].add(market);\\n\\n        bytes32 asset = SpeedMarket(market).asset();\\n        uint buyinAmount = SpeedMarket(market).buyinAmount();\\n        SpeedMarket.Direction direction = SpeedMarket(market).direction();\\n\\n        if (currentRiskPerAssetAndDirection[asset][direction] > buyinAmount) {\\n            currentRiskPerAssetAndDirection[asset][direction] -= buyinAmount;\\n        } else {\\n            currentRiskPerAssetAndDirection[asset][direction] = 0;\\n        }\\n\\n        if (!SpeedMarket(market).isUserWinner()) {\\n            if (currentRiskPerAsset[asset] > 2 * buyinAmount) {\\n                currentRiskPerAsset[asset] -= (2 * buyinAmount);\\n            } else {\\n                currentRiskPerAsset[asset] = 0;\\n            }\\n        }\\n\\n        emit MarketResolved(market, SpeedMarket(market).result(), SpeedMarket(market).isUserWinner());\\n    }\\n\\n    //////////// getters /////////////////\\n\\n    /// @notice activeMarkets returns list of active markets\\n    /// @param index index of the page\\n    /// @param pageSize number of addresses per page\\n    /// @return address[] active market list\\n    function activeMarkets(uint index, uint pageSize) external view returns (address[] memory) {\\n        return _activeMarkets.getPage(index, pageSize);\\n    }\\n\\n    /// @notice maturedMarkets returns list of matured markets\\n    /// @param index index of the page\\n    /// @param pageSize number of addresses per page\\n    /// @return address[] matured market list\\n    function maturedMarkets(uint index, uint pageSize) external view returns (address[] memory) {\\n        return _maturedMarkets.getPage(index, pageSize);\\n    }\\n\\n    /// @notice activeMarkets returns list of active markets per user\\n    function activeMarketsPerUser(\\n        uint index,\\n        uint pageSize,\\n        address user\\n    ) external view returns (address[] memory) {\\n        return _activeMarketsPerUser[user].getPage(index, pageSize);\\n    }\\n\\n    /// @notice maturedMarkets returns list of matured markets per user\\n    function maturedMarketsPerUser(\\n        uint index,\\n        uint pageSize,\\n        address user\\n    ) external view returns (address[] memory) {\\n        return _maturedMarketsPerUser[user].getPage(index, pageSize);\\n    }\\n\\n    /// @notice whether a market can be resolved\\n    function canResolveMarket(address market) public view returns (bool) {\\n        return\\n            _activeMarkets.contains(market) &&\\n            (SpeedMarket(market).strikeTime() < block.timestamp) &&\\n            !SpeedMarket(market).resolved();\\n    }\\n\\n    /// @notice get lengths of all arrays\\n    function getLengths(address user) external view returns (uint[5] memory) {\\n        return [\\n            _activeMarkets.elements.length,\\n            _maturedMarkets.elements.length,\\n            _activeMarketsPerUser[user].elements.length,\\n            _maturedMarketsPerUser[user].elements.length,\\n            lpFees.length\\n        ];\\n    }\\n\\n    //////////////////setters/////////////////\\n\\n    /// @notice Set mastercopy to use to create markets\\n    /// @param _mastercopy to use to create markets\\n    function setMastercopy(address _mastercopy) external onlyOwner {\\n        speedMarketMastercopy = _mastercopy;\\n        emit MastercopyChanged(_mastercopy);\\n    }\\n\\n    /// @notice Set minimum and maximum buyin amounts\\n    function setAmounts(uint _minBuyinAmount, uint _maxBuyinAmount) external onlyOwner {\\n        minBuyinAmount = _minBuyinAmount;\\n        maxBuyinAmount = _maxBuyinAmount;\\n        emit AmountsChanged(_minBuyinAmount, _maxBuyinAmount);\\n    }\\n\\n    /// @notice Set minimum and maximum time to maturity\\n    function setTimes(uint _minimalTimeToMaturity, uint _maximalTimeToMaturity) external onlyOwner {\\n        minimalTimeToMaturity = _minimalTimeToMaturity;\\n        maximalTimeToMaturity = _maximalTimeToMaturity;\\n        emit TimesChanged(_minimalTimeToMaturity, _maximalTimeToMaturity);\\n    }\\n\\n    /// @notice map asset to PythID, e.g. \\\"ETH\\\" as bytes 32 to an equivalent ID from pyth docs\\n    function setAssetToPythID(bytes32 asset, bytes32 pythId) external onlyOwner {\\n        assetToPythId[asset] = pythId;\\n        emit SetAssetToPythID(asset, pythId);\\n    }\\n\\n    /// @notice whats the longest a price can be delayed\\n    function setMaximumPriceDelays(uint64 _maximumPriceDelay, uint64 _maximumPriceDelayForResolving) external onlyOwner {\\n        maximumPriceDelay = _maximumPriceDelay;\\n        maximumPriceDelayForResolving = _maximumPriceDelayForResolving;\\n        emit SetMaximumPriceDelays(_maximumPriceDelay, _maximumPriceDelayForResolving);\\n    }\\n\\n    /// @notice maximum open interest per asset\\n    function setMaxRiskPerAsset(bytes32 asset, uint _maxRiskPerAsset) external onlyOwner {\\n        maxRiskPerAsset[asset] = _maxRiskPerAsset;\\n        emit SetMaxRiskPerAsset(asset, _maxRiskPerAsset);\\n    }\\n\\n    /// @notice maximum risk per asset and direction\\n    function setMaxRiskPerAssetAndDirection(bytes32 asset, uint _maxRiskPerAssetAndDirection) external onlyOwner {\\n        maxRiskPerAssetAndDirection[asset][SpeedMarket.Direction.Up] = _maxRiskPerAssetAndDirection;\\n        maxRiskPerAssetAndDirection[asset][SpeedMarket.Direction.Down] = _maxRiskPerAssetAndDirection;\\n        emit SetMaxRiskPerAssetAndDirection(asset, _maxRiskPerAssetAndDirection);\\n    }\\n\\n    /// @notice set SafeBox params\\n    function setSafeBoxParams(address _safeBox, uint _safeBoxImpact) external onlyOwner {\\n        safeBox = _safeBox;\\n        safeBoxImpact = _safeBoxImpact;\\n        emit SetSafeBoxParams(_safeBox, _safeBoxImpact);\\n    }\\n\\n    /// @notice set LP fee params\\n    /// @param _timeThresholds array of time thresholds (minutes) for different fees in ascending order\\n    /// @param _lpFees array of fees applied to each time frame defined in _timeThresholds\\n    /// @param _lpFee default LP fee when there are no dynamic fees\\n    function setLPFeeParams(\\n        uint[] calldata _timeThresholds,\\n        uint[] calldata _lpFees,\\n        uint _lpFee\\n    ) external onlyOwner {\\n        require(_timeThresholds.length == _lpFees.length, \\\"Times and fees must have the same length\\\");\\n        delete lpFees;\\n        delete timeThresholdsForFees;\\n        for (uint i = 0; i < _timeThresholds.length; i++) {\\n            timeThresholdsForFees.push(_timeThresholds[i]);\\n            lpFees.push(_lpFees[i]);\\n        }\\n        lpFee = _lpFee;\\n        emit SetLPFeeParams(_timeThresholds, _lpFees, _lpFee);\\n    }\\n\\n    /// @notice set corresponding addresses\\n    function setAddresses(\\n        address _pyth,\\n        address _referrals,\\n        address _stakingThales\\n    ) external onlyOwner {\\n        pyth = IPyth(_pyth);\\n        referrals = _referrals;\\n        stakingThales = IStakingThales(_stakingThales);\\n        emit SetAddresses(_pyth, _referrals, _stakingThales);\\n    }\\n\\n    /// @notice set whether an asset is supported\\n    function setSupportedAsset(bytes32 asset, bool _supported) external onlyOwner {\\n        supportedAsset[asset] = _supported;\\n        emit SetSupportedAsset(asset, _supported);\\n    }\\n\\n    /// @notice set multicollateral onramp contract\\n    function setMultiCollateralOnOffRamp(address _onramper, bool enabled) external onlyOwner {\\n        if (address(multiCollateralOnOffRamp) != address(0)) {\\n            sUSD.approve(address(multiCollateralOnOffRamp), 0);\\n        }\\n        multiCollateralOnOffRamp = IMultiCollateralOnOffRamp(_onramper);\\n        multicollateralEnabled = enabled;\\n        sUSD.approve(_onramper, MAX_APPROVAL);\\n        emit SetMultiCollateralOnOffRamp(_onramper, enabled);\\n    }\\n\\n    /// @notice adding/removing whitelist address depending on a flag\\n    /// @param _whitelistAddress address that needed to be whitelisted/ ore removed from WL\\n    /// @param _flag adding or removing from whitelist (true: add, false: remove)\\n    function addToWhitelist(address _whitelistAddress, bool _flag) external onlyOwner {\\n        require(_whitelistAddress != address(0));\\n        whitelistedAddresses[_whitelistAddress] = _flag;\\n        emit AddedIntoWhitelist(_whitelistAddress, _flag);\\n    }\\n\\n    /// @notice Updates contract parametar\\n    /// @param _speedMarketsAMMUtils address of speed markets AMM utils\\n    function setAMMUtils(SpeedMarketsAMMUtils _speedMarketsAMMUtils) external onlyOwner {\\n        speedMarketsAMMUtils = _speedMarketsAMMUtils;\\n        emit SetAMMUtils(_speedMarketsAMMUtils);\\n    }\\n\\n    //////////////////modifiers/////////////////\\n\\n    modifier isAddressWhitelisted() {\\n        require(whitelistedAddresses[msg.sender], \\\"Resolver not whitelisted\\\");\\n        _;\\n    }\\n\\n    //////////////////events/////////////////\\n\\n    event MarketCreated(\\n        address market,\\n        address user,\\n        bytes32 asset,\\n        uint strikeTime,\\n        int64 strikePrice,\\n        SpeedMarket.Direction direction,\\n        uint buyinAmount\\n    );\\n    event MarketCreatedWithFees(\\n        address market,\\n        address user,\\n        bytes32 asset,\\n        uint strikeTime,\\n        int64 strikePrice,\\n        SpeedMarket.Direction direction,\\n        uint buyinAmount,\\n        uint safeBoxImpact,\\n        uint lpFee\\n    );\\n\\n    event MarketResolved(address market, SpeedMarket.Direction result, bool userIsWinner);\\n\\n    event MastercopyChanged(address mastercopy);\\n    event AmountsChanged(uint _minBuyinAmount, uint _maxBuyinAmount);\\n    event TimesChanged(uint _minimalTimeToMaturity, uint _maximalTimeToMaturity);\\n    event SetAssetToPythID(bytes32 asset, bytes32 pythId);\\n    event SetMaximumPriceDelays(uint _maximumPriceDelay, uint _maximumPriceDelayForResolving);\\n    event SetMaxRiskPerAsset(bytes32 asset, uint _maxRiskPerAsset);\\n    event SetMaxRiskPerAssetAndDirection(bytes32 asset, uint _maxRiskPerAssetAndDirection);\\n    event SetSafeBoxParams(address _safeBox, uint _safeBoxImpact);\\n    event SetLPFeeParams(uint[] _timeThresholds, uint[] _lpFees, uint _lpFee);\\n    event SetSupportedAsset(bytes32 asset, bool _supported);\\n    event AddedIntoWhitelist(address _whitelistAddress, bool _flag);\\n    event SetMultiCollateralOnOffRamp(address _onramper, bool enabled);\\n    event ReferrerPaid(address refferer, address trader, uint amount, uint volume);\\n    event SetAddresses(address _pyth, address _referrals, address _stakingThales);\\n    event SetAMMUtils(SpeedMarketsAMMUtils _speedMarketsAMMUtils);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-4.4.1/proxy/Clones.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@pythnetwork/pyth-sdk-solidity/IPyth.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"./PythStructs.sol\\\";\\nimport \\\"./IPythEvents.sol\\\";\\n\\n/// @title Consume prices from the Pyth Network (https://pyth.network/).\\n/// @dev Please refer to the guidance at https://docs.pyth.network/consumers/best-practices for how to consume prices safely.\\n/// @author Pyth Data Association\\ninterface IPyth is IPythEvents {\\n    /// @notice Returns the period (in seconds) that a price feed is considered valid since its publish time\\n    function getValidTimePeriod() external view returns (uint validTimePeriod);\\n\\n    /// @notice Returns the price and confidence interval.\\n    /// @dev Reverts if the price has not been updated within the last `getValidTimePeriod()` seconds.\\n    /// @param id The Pyth Price Feed ID of which to fetch the price and confidence interval.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getPrice(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the exponentially-weighted moving average price and confidence interval.\\n    /// @dev Reverts if the EMA price is not available.\\n    /// @param id The Pyth Price Feed ID of which to fetch the EMA price and confidence interval.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getEmaPrice(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the price of a price feed without any sanity checks.\\n    /// @dev This function returns the most recent price update in this contract without any recency checks.\\n    /// This function is unsafe as the returned price update may be arbitrarily far in the past.\\n    ///\\n    /// Users of this function should check the `publishTime` in the price to ensure that the returned price is\\n    /// sufficiently recent for their application. If you are considering using this function, it may be\\n    /// safer / easier to use either `getPrice` or `getPriceNoOlderThan`.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getPriceUnsafe(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the price that is no older than `age` seconds of the current time.\\n    /// @dev This function is a sanity-checked version of `getPriceUnsafe` which is useful in\\n    /// applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently\\n    /// recently.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getPriceNoOlderThan(\\n        bytes32 id,\\n        uint age\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the exponentially-weighted moving average price of a price feed without any sanity checks.\\n    /// @dev This function returns the same price as `getEmaPrice` in the case where the price is available.\\n    /// However, if the price is not recent this function returns the latest available price.\\n    ///\\n    /// The returned price can be from arbitrarily far in the past; this function makes no guarantees that\\n    /// the returned price is recent or useful for any particular application.\\n    ///\\n    /// Users of this function should check the `publishTime` in the price to ensure that the returned price is\\n    /// sufficiently recent for their application. If you are considering using this function, it may be\\n    /// safer / easier to use either `getEmaPrice` or `getEmaPriceNoOlderThan`.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getEmaPriceUnsafe(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the exponentially-weighted moving average price that is no older than `age` seconds\\n    /// of the current time.\\n    /// @dev This function is a sanity-checked version of `getEmaPriceUnsafe` which is useful in\\n    /// applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently\\n    /// recently.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getEmaPriceNoOlderThan(\\n        bytes32 id,\\n        uint age\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Update price feeds with given update messages.\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    /// Prices will be updated if they are more recent than the current stored prices.\\n    /// The call will succeed even if the update is not the most recent.\\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid.\\n    /// @param updateData Array of price update data.\\n    function updatePriceFeeds(bytes[] calldata updateData) external payable;\\n\\n    /// @notice Wrapper around updatePriceFeeds that rejects fast if a price update is not necessary. A price update is\\n    /// necessary if the current on-chain publishTime is older than the given publishTime. It relies solely on the\\n    /// given `publishTimes` for the price feeds and does not read the actual price update publish time within `updateData`.\\n    ///\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    ///\\n    /// `priceIds` and `publishTimes` are two arrays with the same size that correspond to senders known publishTime\\n    /// of each priceId when calling this method. If all of price feeds within `priceIds` have updated and have\\n    /// a newer or equal publish time than the given publish time, it will reject the transaction to save gas.\\n    /// Otherwise, it calls updatePriceFeeds method to update the prices.\\n    ///\\n    /// @dev Reverts if update is not needed or the transferred fee is not sufficient or the updateData is invalid.\\n    /// @param updateData Array of price update data.\\n    /// @param priceIds Array of price ids.\\n    /// @param publishTimes Array of publishTimes. `publishTimes[i]` corresponds to known `publishTime` of `priceIds[i]`\\n    function updatePriceFeedsIfNecessary(\\n        bytes[] calldata updateData,\\n        bytes32[] calldata priceIds,\\n        uint64[] calldata publishTimes\\n    ) external payable;\\n\\n    /// @notice Returns the required fee to update an array of price updates.\\n    /// @param updateData Array of price update data.\\n    /// @return feeAmount The required fee in Wei.\\n    function getUpdateFee(\\n        bytes[] calldata updateData\\n    ) external view returns (uint feeAmount);\\n\\n    /// @notice Parse `updateData` and return price feeds of the given `priceIds` if they are all published\\n    /// within `minPublishTime` and `maxPublishTime`.\\n    ///\\n    /// You can use this method if you want to use a Pyth price at a fixed time and not the most recent price;\\n    /// otherwise, please consider using `updatePriceFeeds`. This method does not store the price updates on-chain.\\n    ///\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    ///\\n    ///\\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid or there is\\n    /// no update for any of the given `priceIds` within the given time range.\\n    /// @param updateData Array of price update data.\\n    /// @param priceIds Array of price ids.\\n    /// @param minPublishTime minimum acceptable publishTime for the given `priceIds`.\\n    /// @param maxPublishTime maximum acceptable publishTime for the given `priceIds`.\\n    /// @return priceFeeds Array of the price feeds corresponding to the given `priceIds` (with the same order).\\n    function parsePriceFeedUpdates(\\n        bytes[] calldata updateData,\\n        bytes32[] calldata priceIds,\\n        uint64 minPublishTime,\\n        uint64 maxPublishTime\\n    ) external payable returns (PythStructs.PriceFeed[] memory priceFeeds);\\n}\\n\"\r\n    },\r\n    \"@pythnetwork/pyth-sdk-solidity/PythStructs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\ncontract PythStructs {\\n    // A price with a degree of uncertainty, represented as a price +- a confidence interval.\\n    //\\n    // The confidence interval roughly corresponds to the standard error of a normal distribution.\\n    // Both the price and confidence are stored in a fixed-point numeric representation,\\n    // `x * (10^expo)`, where `expo` is the exponent.\\n    //\\n    // Please refer to the documentation at https://docs.pyth.network/consumers/best-practices for how\\n    // to how this price safely.\\n    struct Price {\\n        // Price\\n        int64 price;\\n        // Confidence interval around the price\\n        uint64 conf;\\n        // Price exponent\\n        int32 expo;\\n        // Unix timestamp describing when the price was published\\n        uint publishTime;\\n    }\\n\\n    // PriceFeed represents a current aggregate price from pyth publisher feeds.\\n    struct PriceFeed {\\n        // The price ID.\\n        bytes32 id;\\n        // Latest available price\\n        Price price;\\n        // Latest available exponentially-weighted moving average price\\n        Price emaPrice;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/proxy/solidity-0.8.0/ProxyReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the `nonReentrant` modifier\\n * available, which can be aplied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n */\\ncontract ProxyReentrancyGuard {\\n    /// @dev counter to allow mutex lock with only one SSTORE operation\\n    uint256 private _guardCounter;\\n    bool private _initialized;\\n\\n    function initNonReentrant() public {\\n        require(!_initialized, \\\"Already initialized\\\");\\n        _initialized = true;\\n        _guardCounter = 1;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _guardCounter += 1;\\n        uint256 localCounter = _guardCounter;\\n        _;\\n        require(localCounter == _guardCounter, \\\"ReentrancyGuard: reentrant call\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/proxy/solidity-0.8.0/ProxyOwned.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// Clone of syntetix contract without constructor\\ncontract ProxyOwned {\\n    address public owner;\\n    address public nominatedOwner;\\n    bool private _initialized;\\n    bool private _transferredAtInit;\\n\\n    function setOwner(address _owner) public {\\n        require(_owner != address(0), \\\"Owner address cannot be 0\\\");\\n        require(!_initialized, \\\"Already initialized, use nominateNewOwner\\\");\\n        _initialized = true;\\n        owner = _owner;\\n        emit OwnerChanged(address(0), _owner);\\n    }\\n\\n    function nominateNewOwner(address _owner) external onlyOwner {\\n        nominatedOwner = _owner;\\n        emit OwnerNominated(_owner);\\n    }\\n\\n    function acceptOwnership() external {\\n        require(msg.sender == nominatedOwner, \\\"You must be nominated before you can accept ownership\\\");\\n        emit OwnerChanged(owner, nominatedOwner);\\n        owner = nominatedOwner;\\n        nominatedOwner = address(0);\\n    }\\n\\n    function transferOwnershipAtInit(address proxyAddress) external onlyOwner {\\n        require(proxyAddress != address(0), \\\"Invalid address\\\");\\n        require(!_transferredAtInit, \\\"Already transferred\\\");\\n        owner = proxyAddress;\\n        _transferredAtInit = true;\\n        emit OwnerChanged(owner, proxyAddress);\\n    }\\n\\n    modifier onlyOwner {\\n        _onlyOwner();\\n        _;\\n    }\\n\\n    function _onlyOwner() private view {\\n        require(msg.sender == owner, \\\"Only the contract owner may perform this action\\\");\\n    }\\n\\n    event OwnerNominated(address newOwner);\\n    event OwnerChanged(address oldOwner, address newOwner);\\n}\\n\"\r\n    },\r\n    \"contracts/utils/proxy/solidity-0.8.0/ProxyPausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// Inheritance\\nimport \\\"./ProxyOwned.sol\\\";\\n\\n// Clone of syntetix contract without constructor\\n\\ncontract ProxyPausable is ProxyOwned {\\n    uint public lastPauseTime;\\n    bool public paused;\\n\\n    \\n\\n    /**\\n     * @notice Change the paused state of the contract\\n     * @dev Only the contract owner may call this.\\n     */\\n    function setPaused(bool _paused) external onlyOwner {\\n        // Ensure we're actually changing the state before we do anything\\n        if (_paused == paused) {\\n            return;\\n        }\\n\\n        // Set our paused state.\\n        paused = _paused;\\n\\n        // If applicable, set the last pause time.\\n        if (paused) {\\n            lastPauseTime = block.timestamp;\\n        }\\n\\n        // Let everyone know that our pause state has changed.\\n        emit PauseChanged(paused);\\n    }\\n\\n    event PauseChanged(bool isPaused);\\n\\n    modifier notPaused {\\n        require(!paused, \\\"This action cannot be performed while the contract is paused\\\");\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/libraries/AddressSetLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary AddressSetLib {\\n    struct AddressSet {\\n        address[] elements;\\n        mapping(address => uint) indices;\\n    }\\n\\n    function contains(AddressSet storage set, address candidate) internal view returns (bool) {\\n        if (set.elements.length == 0) {\\n            return false;\\n        }\\n        uint index = set.indices[candidate];\\n        return index != 0 || set.elements[0] == candidate;\\n    }\\n\\n    function getPage(\\n        AddressSet storage set,\\n        uint index,\\n        uint pageSize\\n    ) internal view returns (address[] memory) {\\n        // NOTE: This implementation should be converted to slice operators if the compiler is updated to v0.6.0+\\n        uint endIndex = index + pageSize; // The check below that endIndex <= index handles overflow.\\n\\n        // If the page extends past the end of the list, truncate it.\\n        if (endIndex > set.elements.length) {\\n            endIndex = set.elements.length;\\n        }\\n        if (endIndex <= index) {\\n            return new address[](0);\\n        }\\n\\n        uint n = endIndex - index; // We already checked for negative overflow.\\n        address[] memory page = new address[](n);\\n        for (uint i; i < n; i++) {\\n            page[i] = set.elements[i + index];\\n        }\\n        return page;\\n    }\\n\\n    function add(AddressSet storage set, address element) internal {\\n        // Adding to a set is an idempotent operation.\\n        if (!contains(set, element)) {\\n            set.indices[element] = set.elements.length;\\n            set.elements.push(element);\\n        }\\n    }\\n\\n    function remove(AddressSet storage set, address element) internal {\\n        require(contains(set, element), \\\"Element not in set.\\\");\\n        // Replace the removed element with the last element of the list.\\n        uint index = set.indices[element];\\n        uint lastIndex = set.elements.length - 1; // We required that element is in the list, so it is not empty.\\n        if (index != lastIndex) {\\n            // No need to shift the last element if it is the one we want to delete.\\n            address shiftedElement = set.elements[lastIndex];\\n            set.elements[index] = shiftedElement;\\n            set.indices[shiftedElement] = index;\\n        }\\n        set.elements.pop();\\n        delete set.indices[element];\\n    }\\n}\"\r\n    },\r\n    \"contracts/interfaces/IStakingThales.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.16;\\n\\ninterface IStakingThales {\\n    function updateVolume(address account, uint amount) external;\\n\\n    /* ========== VIEWS / VARIABLES ==========  */\\n    function totalStakedAmount() external view returns (uint);\\n\\n    function stakedBalanceOf(address account) external view returns (uint);\\n\\n    function currentPeriodRewards() external view returns (uint);\\n\\n    function currentPeriodFees() external view returns (uint);\\n\\n    function getLastPeriodOfClaimedRewards(address account) external view returns (uint);\\n\\n    function getRewardsAvailable(address account) external view returns (uint);\\n\\n    function getRewardFeesAvailable(address account) external view returns (uint);\\n\\n    function getAlreadyClaimedRewards(address account) external view returns (uint);\\n\\n    function getContractRewardFunds() external view returns (uint);\\n\\n    function getContractFeeFunds() external view returns (uint);\\n\\n    function getAMMVolume(address account) external view returns (uint);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IMultiCollateralOnOffRamp.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.16;\\n\\ninterface IMultiCollateralOnOffRamp {\\n    function onramp(address collateral, uint collateralAmount) external returns (uint);\\n\\n    function onrampWithEth(uint amount) external payable returns (uint);\\n\\n    function getMinimumReceived(address collateral, uint amount) external view returns (uint);\\n\\n    function getMinimumNeeded(address collateral, uint amount) external view returns (uint);\\n\\n    function WETH9() external view returns (address);\\n\\n    function offrampIntoEth(uint amount) external returns (uint);\\n\\n    function offramp(address collateral, uint amount) external returns (uint);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IReferrals.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.16;\\n\\ninterface IReferrals {\\n    function referrals(address) external view returns (address);\\n\\n    function getReferrerFee(address) external view returns (uint);\\n\\n    function sportReferrals(address) external view returns (address);\\n\\n    function setReferrer(address, address) external;\\n}\\n\"\r\n    },\r\n    \"contracts/SpeedMarkets/SpeedMarket.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\nimport \\\"../interfaces/ISpeedMarketsAMM.sol\\\";\\n\\ncontract SpeedMarket {\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    struct InitParams {\\n        address _speedMarketsAMM;\\n        address _user;\\n        bytes32 _asset;\\n        uint64 _strikeTime;\\n        int64 _strikePrice;\\n        Direction _direction;\\n        uint _buyinAmount;\\n        uint _safeBoxImpact;\\n        uint _lpFee;\\n    }\\n\\n    enum Direction {\\n        Up,\\n        Down\\n    }\\n\\n    address public user;\\n    bytes32 public asset;\\n    uint64 public strikeTime;\\n    int64 public strikePrice;\\n    Direction public direction;\\n    uint public buyinAmount;\\n\\n    bool public resolved;\\n    int64 public finalPrice;\\n    Direction public result;\\n\\n    ISpeedMarketsAMM public speedMarketsAMM;\\n\\n    uint public safeBoxImpact;\\n    uint public lpFee;\\n\\n    uint256 public createdAt;\\n\\n    /* ========== CONSTRUCTOR ========== */\\n\\n    bool public initialized = false;\\n\\n    function initialize(InitParams calldata params) external {\\n        require(!initialized, \\\"Speed market already initialized\\\");\\n        initialized = true;\\n        speedMarketsAMM = ISpeedMarketsAMM(params._speedMarketsAMM);\\n        user = params._user;\\n        asset = params._asset;\\n        strikeTime = params._strikeTime;\\n        strikePrice = params._strikePrice;\\n        direction = params._direction;\\n        buyinAmount = params._buyinAmount;\\n        safeBoxImpact = params._safeBoxImpact;\\n        lpFee = params._lpFee;\\n        speedMarketsAMM.sUSD().approve(params._speedMarketsAMM, type(uint256).max);\\n        createdAt = block.timestamp;\\n    }\\n\\n    function resolve(int64 _finalPrice) external onlyAMM {\\n        require(!resolved, \\\"already resolved\\\");\\n        require(block.timestamp > strikeTime, \\\"not ready to be resolved\\\");\\n        resolved = true;\\n        finalPrice = _finalPrice;\\n\\n        if (finalPrice < strikePrice) {\\n            result = Direction.Down;\\n        } else if (finalPrice > strikePrice) {\\n            result = Direction.Up;\\n        } else {\\n            result = direction == SpeedMarket.Direction.Up ? SpeedMarket.Direction.Down : SpeedMarket.Direction.Up;\\n        }\\n\\n        if (direction == result) {\\n            speedMarketsAMM.sUSD().safeTransfer(user, speedMarketsAMM.sUSD().balanceOf(address(this)));\\n        } else {\\n            speedMarketsAMM.sUSD().safeTransfer(address(speedMarketsAMM), speedMarketsAMM.sUSD().balanceOf(address(this)));\\n        }\\n\\n        emit Resolved(finalPrice, result, direction == result);\\n    }\\n\\n    function isUserWinner() external view returns (bool) {\\n        return resolved && (direction == result);\\n    }\\n\\n    modifier onlyAMM() {\\n        require(msg.sender == address(speedMarketsAMM), \\\"only the AMM may perform these methods\\\");\\n        _;\\n    }\\n\\n    event Resolved(int64 finalPrice, Direction result, bool userIsWinner);\\n}\\n\"\r\n    },\r\n    \"contracts/SpeedMarkets/SpeedMarketsAMMUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title An AMM utils for Thales speed markets\\ncontract SpeedMarketsAMMUtils {\\n    uint private constant SECONDS_PER_MINUTE = 60;\\n\\n    /// @notice get dynamic fee based on defined time thresholds for a given delta time\\n    /// @param _deltaTimeSec to search for appropriate time range (in seconds)\\n    /// @param _timeThresholds array of time thresholds for each fee (in minutes)\\n    /// @param _fees array of fees for every time range\\n    /// @param _defaultFee if _deltaTime doesn't have appropriate time range return this value\\n    /// @return fee defined for specific time range to which _deltaTime belongs to\\n    function getFeeByTimeThreshold(\\n        uint64 _deltaTimeSec,\\n        uint[] calldata _timeThresholds,\\n        uint[] calldata _fees,\\n        uint _defaultFee\\n    ) external pure returns (uint fee) {\\n        fee = _defaultFee;\\n        uint _deltaTime = _deltaTimeSec / SECONDS_PER_MINUTE;\\n        for (uint i = _timeThresholds.length - 1; i >= 0; i--) {\\n            if (_deltaTime >= _timeThresholds[i]) {\\n                fee = _fees[i];\\n                break;\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@pythnetwork/pyth-sdk-solidity/IPythEvents.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @title IPythEvents contains the events that Pyth contract emits.\\n/// @dev This interface can be used for listening to the updates for off-chain and testing purposes.\\ninterface IPythEvents {\\n    /// @dev Emitted when the price feed with `id` has received a fresh update.\\n    /// @param id The Pyth Price Feed ID.\\n    /// @param publishTime Publish time of the given price update.\\n    /// @param price Price of the given price update.\\n    /// @param conf Confidence interval of the given price update.\\n    event PriceFeedUpdate(\\n        bytes32 indexed id,\\n        uint64 publishTime,\\n        int64 price,\\n        uint64 conf\\n    );\\n\\n    /// @dev Emitted when a batch price update is processed successfully.\\n    /// @param chainId ID of the source chain that the batch price update comes from.\\n    /// @param sequenceNumber Sequence number of the batch price update.\\n    event BatchPriceFeedUpdate(uint16 chainId, uint64 sequenceNumber);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISpeedMarketsAMM.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.16;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\nimport \\\"../SpeedMarkets/SpeedMarket.sol\\\";\\n\\ninterface ISpeedMarketsAMM {\\n    function sUSD() external view returns (IERC20Upgradeable);\\n\\n    function minBuyinAmount() external view returns (uint);\\n\\n    function maxBuyinAmount() external view returns (uint);\\n\\n    function minimalTimeToMaturity() external view returns (uint);\\n\\n    function maximalTimeToMaturity() external view returns (uint);\\n\\n    function maximumPriceDelay() external view returns (uint64);\\n\\n    function maximumPriceDelayForResolving() external view returns (uint64);\\n\\n    function timeThresholdsForFees(uint index) external view returns (uint);\\n\\n    function lpFees(uint index) external view returns (uint);\\n\\n    function lpFee() external view returns (uint);\\n\\n    function safeBoxImpact() external view returns (uint);\\n\\n    function marketHasCreatedAtAttribute(address _market) external view returns (bool);\\n\\n    function marketHasFeeAttribute(address _market) external view returns (bool);\\n\\n    function maxRiskPerAsset(bytes32 _asset) external view returns (uint);\\n\\n    function currentRiskPerAsset(bytes32 _asset) external view returns (uint);\\n\\n    function maxRiskPerAssetAndDirection(bytes32 _asset, SpeedMarket.Direction _direction) external view returns (uint);\\n\\n    function currentRiskPerAssetAndDirection(bytes32 _asset, SpeedMarket.Direction _direction) external view returns (uint);\\n\\n    function whitelistedAddresses(address _wallet) external view returns (bool);\\n\\n    function getLengths(address user) external view returns (uint[5] memory);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_whitelistAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_flag\",\"type\":\"bool\"}],\"name\":\"AddedIntoWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_minBuyinAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxBuyinAmount\",\"type\":\"uint256\"}],\"name\":\"AmountsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"strikeTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int64\",\"name\":\"strikePrice\",\"type\":\"int64\"},{\"indexed\":false,\"internalType\":\"enum SpeedMarket.Direction\",\"name\":\"direction\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyinAmount\",\"type\":\"uint256\"}],\"name\":\"MarketCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"strikeTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int64\",\"name\":\"strikePrice\",\"type\":\"int64\"},{\"indexed\":false,\"internalType\":\"enum SpeedMarket.Direction\",\"name\":\"direction\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyinAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"safeBoxImpact\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpFee\",\"type\":\"uint256\"}],\"name\":\"MarketCreatedWithFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum SpeedMarket.Direction\",\"name\":\"result\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"userIsWinner\",\"type\":\"bool\"}],\"name\":\"MarketResolved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"mastercopy\",\"type\":\"address\"}],\"name\":\"MastercopyChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerNominated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isPaused\",\"type\":\"bool\"}],\"name\":\"PauseChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"refferer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"volume\",\"type\":\"uint256\"}],\"name\":\"ReferrerPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract SpeedMarketsAMMUtils\",\"name\":\"_speedMarketsAMMUtils\",\"type\":\"address\"}],\"name\":\"SetAMMUtils\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pyth\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_referrals\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_stakingThales\",\"type\":\"address\"}],\"name\":\"SetAddresses\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"pythId\",\"type\":\"bytes32\"}],\"name\":\"SetAssetToPythID\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_timeThresholds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_lpFees\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_lpFee\",\"type\":\"uint256\"}],\"name\":\"SetLPFeeParams\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxRiskPerAsset\",\"type\":\"uint256\"}],\"name\":\"SetMaxRiskPerAsset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxRiskPerAssetAndDirection\",\"type\":\"uint256\"}],\"name\":\"SetMaxRiskPerAssetAndDirection\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maximumPriceDelay\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maximumPriceDelayForResolving\",\"type\":\"uint256\"}],\"name\":\"SetMaximumPriceDelays\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_onramper\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SetMultiCollateralOnOffRamp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_safeBox\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_safeBoxImpact\",\"type\":\"uint256\"}],\"name\":\"SetSafeBoxParams\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_supported\",\"type\":\"bool\"}],\"name\":\"SetSupportedAsset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_minimalTimeToMaturity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maximalTimeToMaturity\",\"type\":\"uint256\"}],\"name\":\"TimesChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pageSize\",\"type\":\"uint256\"}],\"name\":\"activeMarkets\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pageSize\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"activeMarketsPerUser\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_whitelistAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_flag\",\"type\":\"bool\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"assetToPythId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"}],\"name\":\"canResolveMarket\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"strikeTime\",\"type\":\"uint64\"},{\"internalType\":\"enum SpeedMarket.Direction\",\"name\":\"direction\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"buyinAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"priceUpdateData\",\"type\":\"bytes[]\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"createNewMarket\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"delta\",\"type\":\"uint64\"},{\"internalType\":\"enum SpeedMarket.Direction\",\"name\":\"direction\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"buyinAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"priceUpdateData\",\"type\":\"bytes[]\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"createNewMarketWithDelta\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"strikeTime\",\"type\":\"uint64\"},{\"internalType\":\"enum SpeedMarket.Direction\",\"name\":\"direction\",\"type\":\"uint8\"},{\"internalType\":\"bytes[]\",\"name\":\"priceUpdateData\",\"type\":\"bytes[]\"},{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isEth\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"createNewMarketWithDifferentCollateral\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"delta\",\"type\":\"uint64\"},{\"internalType\":\"enum SpeedMarket.Direction\",\"name\":\"direction\",\"type\":\"uint8\"},{\"internalType\":\"bytes[]\",\"name\":\"priceUpdateData\",\"type\":\"bytes[]\"},{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isEth\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"createNewMarketWithDifferentCollateralAndDelta\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"currentRiskPerAsset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"enum SpeedMarket.Direction\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"currentRiskPerAssetAndDirection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getLengths\",\"outputs\":[{\"internalType\":\"uint256[5]\",\"name\":\"\",\"type\":\"uint256[5]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initNonReentrant\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"_sUSD\",\"type\":\"address\"},{\"internalType\":\"contract IPyth\",\"name\":\"_pyth\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastPauseTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lpFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"marketHasCreatedAtAttribute\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"marketHasFeeAttribute\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pageSize\",\"type\":\"uint256\"}],\"name\":\"maturedMarkets\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pageSize\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"maturedMarketsPerUser\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBuyinAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"maxRiskPerAsset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"enum SpeedMarket.Direction\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"maxRiskPerAssetAndDirection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maximalTimeToMaturity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maximumPriceDelay\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maximumPriceDelayForResolving\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBuyinAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimalTimeToMaturity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multiCollateralOnOffRamp\",\"outputs\":[{\"internalType\":\"contract IMultiCollateralOnOffRamp\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multicollateralEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"nominateNewOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nominatedOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pyth\",\"outputs\":[{\"internalType\":\"contract IPyth\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referrals\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"bytes[]\",\"name\":\"priceUpdateData\",\"type\":\"bytes[]\"}],\"name\":\"resolveMarket\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_market\",\"type\":\"address\"},{\"internalType\":\"int64\",\"name\":\"_finalPrice\",\"type\":\"int64\"}],\"name\":\"resolveMarketManually\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"markets\",\"type\":\"address[]\"},{\"internalType\":\"int64[]\",\"name\":\"finalPrices\",\"type\":\"int64[]\"}],\"name\":\"resolveMarketManuallyBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"bytes[]\",\"name\":\"priceUpdateData\",\"type\":\"bytes[]\"},{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"toEth\",\"type\":\"bool\"}],\"name\":\"resolveMarketWithOfframp\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"markets\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"priceUpdateData\",\"type\":\"bytes[]\"}],\"name\":\"resolveMarketsBatch\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sUSD\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safeBox\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safeBoxImpact\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract SpeedMarketsAMMUtils\",\"name\":\"_speedMarketsAMMUtils\",\"type\":\"address\"}],\"name\":\"setAMMUtils\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pyth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_referrals\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakingThales\",\"type\":\"address\"}],\"name\":\"setAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minBuyinAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxBuyinAmount\",\"type\":\"uint256\"}],\"name\":\"setAmounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"pythId\",\"type\":\"bytes32\"}],\"name\":\"setAssetToPythID\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_timeThresholds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_lpFees\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_lpFee\",\"type\":\"uint256\"}],\"name\":\"setLPFeeParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mastercopy\",\"type\":\"address\"}],\"name\":\"setMastercopy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_maxRiskPerAsset\",\"type\":\"uint256\"}],\"name\":\"setMaxRiskPerAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_maxRiskPerAssetAndDirection\",\"type\":\"uint256\"}],\"name\":\"setMaxRiskPerAssetAndDirection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_maximumPriceDelay\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_maximumPriceDelayForResolving\",\"type\":\"uint64\"}],\"name\":\"setMaximumPriceDelays\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_onramper\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setMultiCollateralOnOffRamp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_safeBox\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_safeBoxImpact\",\"type\":\"uint256\"}],\"name\":\"setSafeBoxParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"_supported\",\"type\":\"bool\"}],\"name\":\"setSupportedAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimalTimeToMaturity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maximalTimeToMaturity\",\"type\":\"uint256\"}],\"name\":\"setTimes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"speedMarketMastercopy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingThales\",\"outputs\":[{\"internalType\":\"contract IStakingThales\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"supportedAsset\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"timeThresholdsForFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proxyAddress\",\"type\":\"address\"}],\"name\":\"transferOwnershipAtInit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistedAddresses\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SpeedMarketsAMM", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}