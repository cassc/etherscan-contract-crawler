{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/SkyMarketV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.12;\\n\\nimport \\\"./SkyToken.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\n/// @title SkyMarket\\n/// @author rektt (https://twitter.com/rekttdoteth)\\n\\ncontract SkyMarketV2 is AccessControl {\\n    /* ========== STORAGE ========== */\\n\\n   bytes32 public constant OWNER_ROLE = keccak256(\\\"OWNER_ROLE\\\");\\n   bytes32 public constant STAFF_ROLE = keccak256(\\\"STAFF_ROLE\\\");\\n\\n    struct Listing {\\n        string name;\\n        string imageURL;\\n        string description;\\n        uint8 listingType;\\n        uint8 marketplaceId;\\n        uint32 winnersAmount;\\n        uint256 individualCap;\\n        uint256 totalSupply;\\n        uint256 availableSupply;\\n        uint256 price;\\n        uint256 start;\\n        uint256 end;\\n    }\\n\\n    SkyToken public skyToken;\\n    \\n    bool public marketPaused;\\n\\n    //true ? == : >=\\n    bool public fixedMp;\\n\\n    uint256 public constant INITIAL_LIST = uint(keccak256(abi.encodePacked(\\\"CONTRACT_INIT\\\")));\\n    uint256 public listingSize = 0;\\n\\n    mapping(uint256 => Listing) public listingMap;\\n    mapping(uint256 => uint256) public _nextListing;\\n    mapping(address => uint256[]) private userPurchases;\\n    mapping(address => mapping(uint256 => uint256)) public userPurchaseQuantity;\\n    mapping(uint256 => address[]) public rewardPurchasers;\\n\\n    mapping(address => bool) private whitelistedPurchaser;\\n\\n    /* ========== EVENTS ========== */\\n\\n    //@dev Emitted when message from root is processed.\\n    event Purchased(address from, uint256 quantity, uint256 listingId);\\n    event Restock(uint256 listingId, uint256 stock);\\n\\n    /* ========== ERRORS ========== */\\n\\n    error ListingExisted();\\n    error NotAuthorized();\\n    error SoldOut();\\n    error ListingInactive();\\n    error MaxCapped();\\n    error MarketPaused();\\n    error Unauthorized();\\n\\n    /* ========== CONSTRUCTOR ========== */\\n\\n    constructor(address skyERC20, address owner, address[] memory staffs) {\\n        skyToken = SkyToken(skyERC20);\\n\\n        _setupRole(OWNER_ROLE, owner);\\n\\n        for(uint256 i = 0; i < staffs.length; i++){\\n            _setupRole(STAFF_ROLE, staffs[i]);\\n            _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        }\\n\\n        _nextListing[INITIAL_LIST] = INITIAL_LIST;\\n    }\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    modifier notPaused(){\\n        if(marketPaused) revert MarketPaused();\\n        _;\\n    }\\n\\n    modifier onlyOwner(){\\n        require(hasRole(OWNER_ROLE, msg.sender), \\\"Caller is not owner\\\");\\n        _;\\n    }\\n\\n    modifier onlyStaff(){\\n        require(hasRole(STAFF_ROLE, msg.sender), \\\"Caller is not staff\\\");\\n        _;\\n    }\\n\\n    modifier onlyOwnerOrStaff(){\\n        require(hasRole(STAFF_ROLE, msg.sender) || hasRole(OWNER_ROLE, msg.sender), \\\"Caller is not team\\\");\\n        _;\\n    }\\n\\n    modifier onlyPurchaser(){\\n        require(whitelistedPurchaser[msg.sender], \\\"Not Purchaser!\\\");\\n        _;\\n    }\\n\\n    /* ========== TEAM FUNCTIONS ========== */\\n\\n    function togglePause() public onlyOwnerOrStaff {\\n        marketPaused = !marketPaused;\\n    }\\n\\n    function toggleFixedMp() public onlyOwnerOrStaff {\\n        fixedMp = !fixedMp;\\n    }\\n\\n    function setAccess(address[] calldata staffs, bool set, uint256 role) public onlyOwner {\\n        if(set){\\n            for(uint256 i = 0; i < staffs.length; i++){\\n                require(staffs[i] != msg.sender, \\\"cannot modify own role!\\\");\\n                _grantRole((role == 0 ? STAFF_ROLE : OWNER_ROLE), staffs[i]);\\n            }\\n        } else {\\n            for(uint256 i = 0; i < staffs.length; i++){\\n                require(staffs[i] != msg.sender, \\\"cannot modify own role!\\\");\\n                _revokeRole((role == 0 ? STAFF_ROLE : OWNER_ROLE), staffs[i]);\\n            }\\n        }\\n        \\n    }\\n\\n    function setPurchasers(address[] calldata purchasers, bool status) public onlyOwnerOrStaff {\\n        for(uint256 i = 0; i < purchasers.length; i++){\\n            whitelistedPurchaser[purchasers[i]] = status;\\n        }\\n    }\\n\\n    function addListing(Listing calldata listing) public onlyOwnerOrStaff {\\n        uint256 id = uint(keccak256(abi.encodePacked(listing.name)));\\n        if(listingMap[id].price > 0) revert ListingExisted();\\n        listingMap[id] = listing;\\n        _nextListing[id] = _nextListing[INITIAL_LIST];\\n        _nextListing[INITIAL_LIST] = id;\\n        listingSize++;\\n    }\\n\\n    function removeListing(uint256 id, uint256 prevId) public onlyOwnerOrStaff {\\n        require(_nextListing[prevId] == id);\\n        delete listingMap[id];\\n        _nextListing[prevId] = _nextListing[id];\\n        _nextListing[id] = 0;\\n        listingSize--;\\n    }\\n\\n    function updateListing(Listing calldata listing) public onlyOwnerOrStaff {\\n        uint256 id = uint(keccak256(abi.encodePacked(listing.name)));\\n        Listing storage currentListing = listingMap[id];\\n\\n        if(currentListing.totalSupply != listing.totalSupply){\\n            uint256 supplyDiff;\\n            if(listing.totalSupply > currentListing.totalSupply ) {\\n                supplyDiff = listing.totalSupply - currentListing.totalSupply;\\n                currentListing.totalSupply += supplyDiff;\\n                currentListing.availableSupply += supplyDiff;\\n            } else {\\n                supplyDiff = currentListing.totalSupply - listing.totalSupply;\\n                currentListing.totalSupply -= supplyDiff;\\n                currentListing.availableSupply -= supplyDiff;\\n            }\\n        }\\n\\n        if(currentListing.start != listing.start) currentListing.start = listing.start;\\n        if(currentListing.end != listing.end) currentListing.end = listing.end;\\n        if(currentListing.individualCap != listing.individualCap) currentListing.individualCap = listing.individualCap;\\n        if(currentListing.price != listing.price) currentListing.price = listing.price;\\n        if(currentListing.winnersAmount != listing.winnersAmount) currentListing.winnersAmount = listing.winnersAmount;\\n        \\n        currentListing.description = listing.description;\\n        currentListing.imageURL = listing.imageURL;\\n    } \\n\\n    function updateName(\\n        uint256 listingId, \\n        string calldata name\\n    ) public onlyOwnerOrStaff {\\n            uint256 newId = uint(keccak256(abi.encodePacked(name)));\\n\\n            if(listingMap[newId].price == 0) {\\n                Listing memory _copy = listingMap[listingId];\\n                _copy.name = name;\\n\\n                listingMap[newId] = _copy;\\n                delete listingMap[listingId];\\n            }\\n    }\\n\\n    /* ========== PUBLIC READ FUNCTIONS ========== */\\n\\n    function isAuthorized(address user) public view returns (bool){\\n        bool authorized;\\n        if (hasRole(STAFF_ROLE, user) || hasRole(OWNER_ROLE, user)) authorized = true;\\n        return authorized;\\n    }\\n\\n    function getPrevListing(uint256 id) public view returns (uint256){\\n        return _getPrevListing(id);\\n    }\\n\\n    function listingByName(string calldata name) public view returns (Listing memory){\\n        uint id = uint(keccak256(abi.encodePacked(name)));\\n        return listingMap[id];\\n    }\\n\\n    function listingById(uint256 id) public view returns (Listing memory){\\n        return listingMap[id];\\n    }\\n\\n    function getUserPurchases(address user) public view returns (uint256[] memory) {\\n        return (userPurchases[user]);\\n    }\\n\\n    function getPurchasers(uint256 id) public view returns (address[] memory){\\n        return (rewardPurchasers[id]);\\n    }\\n\\n    function canPurchase(address user, uint256 id) public view returns (bool, uint256){\\n        return _canPurchase(user, id);\\n    }\\n\\n    function getAllListing(uint256 marketplaceId) public view returns (Listing[] memory) {\\n        Listing[] memory _listings = new Listing[](listingSize);\\n        uint256 currentId = _nextListing[INITIAL_LIST];\\n        for(uint256 i = 0; currentId != INITIAL_LIST; ++i){\\n            Listing memory _currentListing = listingMap[currentId];\\n            \\n            if(_currentListing.marketplaceId == marketplaceId){\\n                _listings[i] = listingMap[currentId];\\n            }\\n\\n            currentId = _nextListing[currentId];\\n        } \\n          \\n        return _listings;\\n    }\\n    \\n    function getListings(bool active, uint256 marketplaceId) public view returns (Listing[] memory) {\\n        Listing[] memory _listings = new Listing[](listingSize);\\n        uint256 currentId = _nextListing[INITIAL_LIST];\\n        for(uint256 i = 0; currentId != INITIAL_LIST; ++i){\\n            Listing memory _currentListing = listingMap[currentId];\\n            if(active){\\n                if(\\n                    (_currentListing.start < block.timestamp && \\n                    _currentListing.end > block.timestamp) &&\\n                    _currentListing.marketplaceId == marketplaceId\\n                ) \\n                    _listings[i] = listingMap[currentId];\\n            } else if (\\n                    (_currentListing.start > block.timestamp ||\\n                    _currentListing.end < block.timestamp) &&\\n                    _currentListing.marketplaceId == marketplaceId\\n                )  {\\n                    _listings[i] = listingMap[currentId];\\n            }\\n\\n            currentId = _nextListing[currentId];\\n        } \\n          \\n        return _listings;\\n    }\\n\\n    /* ========== PUBLIC MUTATIVE FUNCTIONS ========== */\\n\\n    function purchaseListing(\\n        uint256 id, \\n        uint256 tokenId, \\n        uint256 quantity,\\n        address user, \\n        uint256 deadline,\\n        uint8 v, \\n        bytes32 r, \\n        bytes32 s\\n    ) public onlyPurchaser {\\n        if(!_canPurchaseWith(user, id, tokenId)) revert Unauthorized();\\n        Listing storage _listing = listingMap[id];\\n        if(block.timestamp < _listing.start || block.timestamp > _listing.end) revert ListingInactive();\\n        if(_listing.availableSupply == 0) revert SoldOut();\\n        uint256 purchased = userPurchaseQuantity[user][id];\\n        if(purchased >= _listing.individualCap || purchased + quantity > _listing.individualCap) revert MaxCapped();\\n\\n        _listing.availableSupply -= quantity;\\n\\n        if(purchased == 0) {\\n            userPurchases[user].push(id);\\n            rewardPurchasers[id].push(user);\\n        }\\n\\n        userPurchaseQuantity[user][id] += quantity;\\n\\n        uint256 toPay = _listing.price * quantity;\\n\\n        skyToken.spend(user, toPay, deadline, v, r, s);\\n    }\\n\\n    /* ========== INTERNAL FUNCTIONS ========== */\\n\\n    function _getPrevListing(uint256 id) internal view returns (uint256){\\n        uint256 currentId = INITIAL_LIST;\\n        while(_nextListing[currentId] != INITIAL_LIST){\\n            if(_nextListing[currentId] == id){\\n                return currentId;\\n            }\\n            currentId = _nextListing[currentId];\\n        }\\n        return 0;\\n    }\\n\\n    function _canPurchase(address user, uint256 id) internal view returns (bool, uint256){\\n        Listing memory _listing = listingMap[id];\\n\\n        if(_listing.marketplaceId == 0) return (true, 0);\\n\\n        (,uint256[] memory stakedIds) = skyToken.getUserInfo(user);\\n        bool allowed;\\n        uint256 tokenId;\\n\\n        uint256 totalBalance = skyToken.totalBalance(user);\\n\\n        for(uint256 i = 0; i < stakedIds.length; i++){\\n            uint256 rarity = skyToken.tokenRarity(stakedIds[i]);\\n            bool dynamicTruth = fixedMp ? rarity + 1 == _listing.marketplaceId : rarity + 1 >= _listing.marketplaceId;\\n\\n            if(dynamicTruth && totalBalance >= _listing.price){\\n                allowed = true;\\n                tokenId = stakedIds[i];\\n            }\\n        }\\n\\n        return (allowed, tokenId);\\n    }\\n\\n    function _canPurchaseWith(address user, uint256 id, uint256 tokenId) internal view returns (bool){\\n        Listing memory _listing = listingMap[id];\\n\\n        if(_listing.marketplaceId == 0) return true;\\n\\n        SkyToken.StakeRecord memory _record = skyToken.getStakeRecord(user, tokenId);\\n        bool allowed;\\n\\n        uint256 rarity = skyToken.tokenRarity(tokenId);\\n        bool dynamicTruth = fixedMp ? rarity + 1 == _listing.marketplaceId : rarity + 1 >= _listing.marketplaceId;\\n\\n        uint256 totalBalance = skyToken.totalBalance(user);\\n\\n        if(_record.stakedOn > 0 && dynamicTruth && totalBalance >= _listing.price){\\n                allowed = true;\\n        }\\n\\n        return allowed;\\n    }\\n\\n    \\n}\"\r\n    },\r\n    \"contracts/SkyToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.12;\\n\\nimport \\\"./FxBaseChildTunnel.sol\\\";\\nimport \\\"./ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\n/// @title SkyToken\\n/// @author aceplxx (https://twitter.com/aceplxx)\\n\\ncontract SkyToken is ERC20, FxBaseChildTunnel, Ownable {\\n    using ECDSA for bytes32;\\n\\n    struct StakeRecord{\\n        uint256 tokenId;\\n        uint256 stakedOn;\\n        uint256 lastClaimed;\\n        uint256 bonusTierPercent;\\n    }\\n\\n    struct UserInfo{\\n        uint256 stakedBalance;\\n        uint256[] stakedIds;\\n    }\\n\\n    /* ========== EVENTS ========== */\\n\\n    //@dev Emitted when message from root is processed.\\n    event ProcessedMessage(address from, uint256 tokenId, bool stake);\\n\\n    /* ========== STORAGE ========== */\\n\\n    //user address => tokenId => record mapping\\n    mapping(address => mapping(uint => StakeRecord)) private stakeRecord;\\n\\n    mapping(address => UserInfo) private userInfo;\\n    mapping(uint256 => uint256) public tokenIndex;\\n\\n    mapping(address => bool) public harvester;\\n    mapping(bytes32 => bool) public usedMessage;\\n\\n    mapping(uint256 => uint256) public tokenRarity;\\n    mapping(uint256 => uint256) public rarityRate;\\n\\n    // staking bonus percent based on days range staked threshold\\n    mapping(uint256 => uint256) public stakingBonus;\\n\\n    uint256[] public thresholdRecord;\\n\\n    bool public paused = true;\\n\\n    /* ========== CONSTRUCTOR ========== */\\n\\n    constructor(address _fxChild)\\n        FxBaseChildTunnel(_fxChild)\\n        ERC20(\\\"Sky Token\\\", \\\"SKY\\\", 18)\\n    {\\n        rarityRate[0] = 1000 ether;\\n        rarityRate[1] = 1500 ether;\\n        rarityRate[2] = 2000 ether;\\n        rarityRate[3] = 3000 ether;\\n    }\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    modifier notPaused() {\\n        require(!paused, \\\"Reward is paused\\\");\\n        _;\\n    }\\n\\n    modifier onlyHarvester() {\\n        require(harvester[msg.sender], \\\"Only harvester allowed!\\\");\\n        _;\\n    }\\n\\n    /* ========== OWNER FUNCTIONS ========== */\\n\\n    function togglePause() external onlyOwner {\\n        paused = !paused;\\n    }\\n\\n    function setBonus(uint256[] memory stakeDays, uint256[] memory multiplierPercent) external onlyOwner{\\n        require(stakeDays.length == multiplierPercent.length, \\\"Input length missmatch\\\");\\n\\n        for(uint256 i = 0; i < stakeDays.length; i++){\\n            uint256 daysToDelta = stakeDays[i] * 1 days;\\n            stakingBonus[daysToDelta] = multiplierPercent[i];\\n            thresholdRecord.push(daysToDelta);\\n        }\\n    }\\n\\n    function setRarities(uint256[] memory tokenIds, uint256[] memory rarities) external onlyOwner {\\n        require(tokenIds.length == rarities.length, \\\"Input length missmatch\\\");\\n        for(uint256 i = 0; i < tokenIds.length; i++){\\n            tokenRarity[tokenIds[i]] = rarities[i];\\n        }\\n    }\\n\\n    function setRaritiesRate(uint256[] memory rarities, uint256[] memory rates) external onlyOwner{\\n        require(rarities.length == rates.length, \\\"Input length missmatch\\\");\\n        for(uint256 i = 0; i < rarities.length; i++){\\n            rarityRate[rarities[i]] = rates[i];\\n        }\\n    }\\n\\n    function setHarvester(address[] memory harvesters, bool state)\\n        external\\n        onlyOwner\\n    {\\n        for (uint256 i = 0; i < harvesters.length; i++) {\\n            harvester[harvesters[i]] = state;\\n        }\\n    }\\n\\n    function updateFxRootRunnel(address _fxRootTunnel) external onlyOwner {\\n        fxRootTunnel = _fxRootTunnel;\\n    }\\n\\n    function mint(uint256 amount, address receiver) external onlyOwner {\\n        _mint(receiver, amount);\\n    }\\n\\n    function burn(uint256 amount) external onlyOwner {\\n        _burn(address(this), amount);\\n    }\\n\\n    function airdrop(address[] calldata addresses, uint256[] calldata amounts)\\n        external\\n        onlyOwner\\n    {\\n        require(\\n            addresses.length == amounts.length,\\n            \\\"address amounts missmatch\\\"\\n        );\\n        for (uint256 i = 0; i < addresses.length; i++) {\\n            uint256 amount = amounts[i];\\n            _mint(addresses[i], amount);\\n        }\\n    }\\n\\n    /* ========== PUBLIC READ ========== */\\n\\n    function pendingRewards(address user) external view returns (uint256) {\\n        return _getPendingRewards(user);\\n    }\\n\\n    function pendingRewardsByNFT(address user, uint256 tokenId) external view returns (uint256 boosted, uint256 nonboosted) {\\n        return (_getPendingRewardsByNFT(user, tokenId), _getPendingRewardsByNFTNonBoosted(user, tokenId));\\n    }\\n\\n    function createMessage(address user, uint256 amount)\\n        external\\n        view\\n        returns (bytes32)\\n    {\\n        return _createMessage(user, amount);\\n    }\\n\\n    function getStakeRecord(address user, uint256 tokenId) external view returns (StakeRecord memory){\\n        StakeRecord memory _record = stakeRecord[user][tokenId];\\n        uint256 deltaDifference = _record.stakedOn > 0 ? block.timestamp - _record.stakedOn : 0;\\n        _record.bonusTierPercent = _bonusThreshold(deltaDifference);\\n\\n        return _record;\\n    }\\n\\n    function getUserInfo(address user) external view returns (uint256 stakedBalance, uint256[] memory stakedIds){\\n        UserInfo memory _info = userInfo[user];\\n\\n        return(\\n            _info.stakedBalance,\\n            _info.stakedIds\\n        );\\n    }\\n\\n    /* ========== PUBLIC MUTATIVE ========== */\\n\\n    function spend(\\n        address owner,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        _harvestReward(owner);\\n        permit(owner, msg.sender, value, deadline, v, r, s);\\n        transferFrom(owner, address(this), value);\\n    }\\n\\n    function totalBalance(address user) external view returns (uint256) {\\n        return balanceOf[user] + _getPendingRewards(user);\\n    }\\n\\n    /// @notice Harvest $SKY reward.\\n    function harvestReward() external {\\n        _harvestReward(msg.sender);\\n    }\\n\\n    /**\\n     * @notice Harvest $SKY on behalf.\\n     * @param user user address to harvest reward on behalf\\n     * @param amount amount to be harvested\\n     * @param signature bytes message of signatures\\n     */\\n    function gaslessHarvest(\\n        address user,\\n        uint256 amount,\\n        bytes memory signature\\n    ) external onlyHarvester {\\n        _useMessage(user, amount, signature);\\n        _harvestReward(user);\\n    }\\n\\n    /**\\n     * @notice Harvest $SKY on behalf  by NFT.\\n     * @param user user address to harvest reward on behalf\\n     * @param amount amount to be harvested\\n     * @param tokenId tokenId to be harvested\\n     * @param signature bytes message of signatures\\n     */\\n    function gaslessHarvestByNFT(\\n        address user,\\n        uint256 amount,\\n        uint256 tokenId,\\n        bytes memory signature\\n    ) external onlyHarvester {\\n        _useMessage(user, amount, signature);\\n        _harvestRewardByNFT(user, tokenId);\\n    }\\n\\n    /* ========== OVERRIDES ========== */\\n\\n    /**\\n     * @notice Process message received from FxChild\\n     * @param stateId unique state id\\n     * @param sender root message sender\\n     * @param message bytes message that was sent from Root Tunnel\\n     */\\n    function _processMessageFromRoot(\\n        uint256 stateId,\\n        address sender,\\n        bytes memory message\\n    ) internal override validateSender(sender) {\\n        (address from, uint256 tokenId, bool stake) = abi.decode(\\n            message,\\n            (address, uint256, bool)\\n        );\\n\\n        UserInfo storage _userInfo = userInfo[from];\\n\\n        if(stake){\\n            StakeRecord memory _record = StakeRecord(tokenId, block.timestamp,0,0);\\n            stakeRecord[from][tokenId] = _record;\\n            tokenIndex[tokenId] = _userInfo.stakedIds.length;\\n            _userInfo.stakedIds.push(tokenId);\\n            _userInfo.stakedBalance++;\\n        } else {\\n            _harvestRewardByNFT(from, tokenId);\\n            delete stakeRecord[from][tokenId];\\n            _userInfo.stakedBalance--;\\n            if(_userInfo.stakedIds.length > 1){\\n                uint256 lastTokenId = _userInfo.stakedIds[_userInfo.stakedIds.length - 1];\\n                uint256 lastTokenIndexNew = tokenIndex[tokenId];\\n\\n                _userInfo.stakedIds[lastTokenIndexNew] = lastTokenId;\\n                _userInfo.stakedIds.pop();\\n\\n                tokenIndex[lastTokenId] = lastTokenIndexNew;\\n            } else {\\n                _userInfo.stakedIds.pop();\\n            }\\n            delete tokenIndex[tokenId]; \\n        }\\n\\n        emit ProcessedMessage(from, tokenId, stake);\\n    }\\n\\n    /* ========== INTERNAL FUNCTIONS ========== */\\n\\n    /// @notice Helper that creates the message for gaslessHarvest\\n    /// @param user user address\\n    /// @param amount the amount\\n    /// @return the message to sign\\n    function _createMessage(address user, uint256 amount)\\n        internal\\n        view\\n        returns (bytes32)\\n    {\\n        return keccak256(abi.encode(user, amount, address(this)));\\n    }\\n\\n    /// @dev It ensures that signer signed a message containing (account, amount, address(this))\\n    ///      and that this message was not already used\\n    /// @param user the signer\\n    /// @param amount the amount associated to this allowance\\n    /// @param signature the signature by the allowance signer wallet\\n    /// @return the message to mark as used\\n    function _validateSignature(\\n        address user,\\n        uint256 amount,\\n        bytes memory signature\\n    ) internal view returns (bytes32) {\\n        bytes32 message = _createMessage(user, amount).toEthSignedMessageHash();\\n\\n        // verifies that the sha3(account, amount, address(this)) has been signed by user\\n        require(message.recover(signature) == user, \\\"!INVALID_SIGNATURE!\\\");\\n\\n        // verifies that the message was not already used\\n        require(usedMessage[message] == false, \\\"!ALREADY_USED!\\\");\\n\\n        return message;\\n    }\\n\\n    /// @notice internal function that verifies an allowance and marks it as used\\n    ///         this function throws if signature is wrong or this amount for this user has already been used\\n    /// @param user the account the allowance is associated to\\n    /// @param amount the amount\\n    /// @param signature the signature by the allowance wallet\\n    function _useMessage(\\n        address user,\\n        uint256 amount,\\n        bytes memory signature\\n    ) internal {\\n        bytes32 message = _validateSignature(user, amount, signature);\\n        usedMessage[message] = true;\\n    }\\n\\n    function _harvestReward(address user) internal notPaused {\\n        uint256 pendingReward = 0;\\n        UserInfo storage _userInfo = userInfo[user];    \\n\\n        for(uint256 i = 0; i < _userInfo.stakedIds.length; i++){\\n            pendingReward += _pendingByNFTAndMarkClaim(user, _userInfo.stakedIds[i]);\\n        }\\n\\n        _mint(user, pendingReward);\\n    }\\n\\n    function _harvestRewardByNFT(address user, uint256 tokenId) internal notPaused {\\n        uint256 pendingReward = _getPendingRewardsByNFT(user, tokenId);\\n\\n        StakeRecord storage _record = stakeRecord[user][tokenId];\\n        _record.lastClaimed = block.timestamp;\\n        \\n        _mint(user, pendingReward);\\n    }   \\n\\n    function _bonusThreshold(uint256 deltaDifference) internal view returns (uint256) {\\n        uint256 bonus = 0;\\n\\n        for(uint256 i = 0; i < thresholdRecord.length; i++){\\n            if(deltaDifference >= thresholdRecord[i]){\\n                if(stakingBonus[thresholdRecord[i]] > bonus) bonus = stakingBonus[thresholdRecord[i]];\\n            }\\n        }\\n\\n        return bonus;\\n    }\\n\\n    function _pendingByNFTAndMarkClaim(address user, uint256 tokenId) internal returns (uint256){\\n        uint256 rewards = 0;\\n        uint256 rewardsBonus = 0;\\n\\n        StakeRecord storage _record = stakeRecord[user][tokenId];\\n        uint256 deltaStakedDifference = _record.stakedOn > 0 ? block.timestamp - _record.stakedOn : 0;\\n        uint256 deltaClaimedDifference = _record.lastClaimed > 0 ? block.timestamp - _record.lastClaimed : deltaStakedDifference;\\n        \\n        uint256 bonusPercent = _bonusThreshold(deltaStakedDifference) * 10**16;\\n        uint256 rarityBasedRate = rarityRate[tokenRarity[_record.tokenId]];\\n\\n        if(bonusPercent > 0) rewardsBonus = (rarityBasedRate * bonusPercent / 10**18);\\n        uint256 dayRate = (rarityBasedRate + rewardsBonus);\\n        \\n        if(dayRate > 0) rewards = ((dayRate * deltaClaimedDifference) / 86400);\\n        \\n        _record.lastClaimed = block.timestamp;\\n        return rewards;\\n    }\\n\\n    function _getPendingRewardsByNFT(address user, uint256 tokenId) internal view returns (uint256){\\n        uint256 rewards = 0;\\n        uint256 rewardsBonus = 0;\\n\\n        StakeRecord memory _record = stakeRecord[user][tokenId];\\n        uint256 deltaStakedDifference = _record.stakedOn > 0 ? block.timestamp - _record.stakedOn : 0;\\n        uint256 deltaClaimedDifference = _record.lastClaimed > 0 ? block.timestamp - _record.lastClaimed : deltaStakedDifference;\\n        \\n        uint256 bonusPercent = _bonusThreshold(deltaStakedDifference) * 10**16;\\n        uint256 rarityBasedRate = rarityRate[tokenRarity[_record.tokenId]];\\n\\n        if(bonusPercent > 0) rewardsBonus = (rarityBasedRate * bonusPercent / 10**18);\\n        uint256 dayRate = (rarityBasedRate + rewardsBonus);\\n        \\n        if(dayRate > 0) rewards = ((dayRate * deltaClaimedDifference) / 86400);\\n        return rewards;\\n    }\\n\\n    function _getPendingRewardsByNFTNonBoosted(address user, uint256 tokenId) internal view returns (uint256){\\n        uint256 rewards = 0;\\n\\n        StakeRecord memory _record = stakeRecord[user][tokenId];\\n        uint256 deltaStakedDifference = _record.stakedOn > 0 ? block.timestamp - _record.stakedOn : 0;\\n        uint256 deltaClaimedDifference = _record.lastClaimed > 0 ? block.timestamp - _record.lastClaimed : deltaStakedDifference;\\n\\n        uint256 rarityBasedRate = rarityRate[tokenRarity[_record.tokenId]];\\n\\n        if(rarityBasedRate > 0) rewards = ((rarityBasedRate * deltaClaimedDifference) / 86400);\\n        return rewards;\\n    }\\n\\n    function _getPendingRewards(address user) internal view returns (uint256) {\\n        UserInfo storage _userInfo = userInfo[user];\\n\\n        uint256 rewards = 0;\\n        \\n        for(uint256 i = 0; i < _userInfo.stakedIds.length; i++){\\n            rewards += _getPendingRewardsByNFT(user, _userInfo.stakedIds[i]);\\n        }\\n\\n        return rewards;\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/FxBaseChildTunnel.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// IFxMessageProcessor represents interface to process message\\ninterface IFxMessageProcessor {\\n    function processMessageFromRoot(\\n        uint256 stateId,\\n        address rootMessageSender,\\n        bytes calldata data\\n    ) external;\\n}\\n\\n/**\\n * @notice Mock child tunnel contract to receive and send message from L2\\n */\\nabstract contract FxBaseChildTunnel is IFxMessageProcessor {\\n    // MessageTunnel on L1 will get data from this event\\n    event MessageSent(bytes message);\\n\\n    // fx child\\n    address public fxChild;\\n\\n    // fx root tunnel\\n    address public fxRootTunnel;\\n\\n    constructor(address _fxChild) {\\n        fxChild = _fxChild;\\n    }\\n\\n    // Sender must be fxRootTunnel in case of ERC20 tunnel\\n    modifier validateSender(address sender) {\\n        require(sender == fxRootTunnel, \\\"FxBaseChildTunnel: INVALID_SENDER_FROM_ROOT\\\");\\n        _;\\n    }\\n\\n    // set fxRootTunnel if not set already\\n    function setFxRootTunnel(address _fxRootTunnel) external {\\n        require(fxRootTunnel == address(0x0), \\\"FxBaseChildTunnel: ROOT_TUNNEL_ALREADY_SET\\\");\\n        fxRootTunnel = _fxRootTunnel;\\n    }\\n\\n    function processMessageFromRoot(\\n        uint256 stateId,\\n        address rootMessageSender,\\n        bytes calldata data\\n    ) external override {\\n        require(msg.sender == fxChild, \\\"FxBaseChildTunnel: INVALID_SENDER\\\");\\n        _processMessageFromRoot(stateId, rootMessageSender, data);\\n    }\\n\\n    /**\\n     * @notice Emit message that can be received on Root Tunnel\\n     * @dev Call the internal function when need to emit message\\n     * @param message bytes message that will be sent to Root Tunnel\\n     * some message examples -\\n     *   abi.encode(tokenId);\\n     *   abi.encode(tokenId, tokenMetadata);\\n     *   abi.encode(messageType, messageData);\\n     */\\n    function _sendMessageToRoot(bytes memory message) internal {\\n        emit MessageSent(message);\\n    }\\n\\n    /**\\n     * @notice Process message received from Root Tunnel\\n     * @dev function needs to be implemented to handle message as per requirement\\n     * This is called by onStateReceive function.\\n     * Since it is called via a system call, any event will not be emitted during its execution.\\n     * @param stateId unique state id\\n     * @param sender root message sender\\n     * @param message bytes message that was sent from Root Tunnel\\n     */\\n    function _processMessageFromRoot(\\n        uint256 stateId,\\n        address sender,\\n        bytes memory message\\n    ) internal virtual;\\n}\\n\"\r\n    },\r\n    \"contracts/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC20.sol)\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\\nabstract contract ERC20 {\\n    /*///////////////////////////////////////////////////////////////\\n                                  EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                             METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    uint8 public immutable decimals;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                             EIP-2612 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    bytes32 public constant PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n    uint256 internal immutable INITIAL_CHAIN_ID;\\n\\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n\\n        INITIAL_CHAIN_ID = block.chainid;\\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\\n        balanceOf[msg.sender] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\\n\\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\\n\\n        balanceOf[from] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              EIP-2612 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        // Unchecked because the only math done is incrementing\\n        // the owner's nonce which cannot realistically overflow.\\n        unchecked {\\n            bytes32 digest = keccak256(\\n                abi.encodePacked(\\n                    \\\"\\\\x19\\\\x01\\\",\\n                    DOMAIN_SEPARATOR(),\\n                    keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\\n                )\\n            );\\n\\n            address recoveredAddress = ecrecover(digest, v, r, s);\\n\\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_SIGNER\\\");\\n\\n            allowance[recoveredAddress][spender] = value;\\n        }\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\\n    }\\n\\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                    keccak256(bytes(name)),\\n                    keccak256(\\\"1\\\"),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                       INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 amount) internal virtual {\\n        totalSupply += amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal virtual {\\n        balanceOf[from] -= amount;\\n\\n        // Cannot underflow because a user's balance\\n        // will never be larger than the total supply.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 2000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"skyERC20\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"staffs\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ListingExisted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ListingInactive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MarketPaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxCapped\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAuthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SoldOut\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"}],\"name\":\"Purchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stock\",\"type\":\"uint256\"}],\"name\":\"Restock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INITIAL_LIST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OWNER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAFF_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_nextListing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"imageURL\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"listingType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"marketplaceId\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"winnersAmount\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"individualCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"availableSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"internalType\":\"struct SkyMarketV2.Listing\",\"name\":\"listing\",\"type\":\"tuple\"}],\"name\":\"addListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"canPurchase\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fixedMp\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketplaceId\",\"type\":\"uint256\"}],\"name\":\"getAllListing\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"imageURL\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"listingType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"marketplaceId\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"winnersAmount\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"individualCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"availableSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"internalType\":\"struct SkyMarketV2.Listing[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"marketplaceId\",\"type\":\"uint256\"}],\"name\":\"getListings\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"imageURL\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"listingType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"marketplaceId\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"winnersAmount\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"individualCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"availableSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"internalType\":\"struct SkyMarketV2.Listing[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getPrevListing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getPurchasers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserPurchases\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"listingById\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"imageURL\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"listingType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"marketplaceId\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"winnersAmount\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"individualCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"availableSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"internalType\":\"struct SkyMarketV2.Listing\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"listingByName\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"imageURL\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"listingType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"marketplaceId\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"winnersAmount\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"individualCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"availableSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"internalType\":\"struct SkyMarketV2.Listing\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"listingMap\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"imageURL\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"listingType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"marketplaceId\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"winnersAmount\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"individualCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"availableSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listingSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"purchaseListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prevId\",\"type\":\"uint256\"}],\"name\":\"removeListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardPurchasers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"staffs\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"set\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"role\",\"type\":\"uint256\"}],\"name\":\"setAccess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"purchasers\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setPurchasers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"skyToken\",\"outputs\":[{\"internalType\":\"contract SkyToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleFixedMp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"togglePause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"imageURL\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"listingType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"marketplaceId\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"winnersAmount\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"individualCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"availableSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"internalType\":\"struct SkyMarketV2.Listing\",\"name\":\"listing\",\"type\":\"tuple\"}],\"name\":\"updateListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"updateName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userPurchaseQuantity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "SkyMarketV2", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "2000", "ConstructorArguments": "00000000000000000000000037876b9828e3b8413cd8d736672dd1c27cde8220000000000000000000000000497ae0c88a9acde323f658ef55a1e6cbaa6eb04e00000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000002000000000000000000000000497ae0c88a9acde323f658ef55a1e6cbaa6eb04e000000000000000000000000e895295378e642de0d26ceebef54c3f59918b49b", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}