{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/ERC20Detailed.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @dev Optional functions from the ERC20 standard.\r\n */\r\ncontract ERC20Detailed is IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\r\n     * these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20Mintable}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for `sender`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\r\n     * from the caller's allowance.\r\n     *\r\n     * See {_burn} and {_approve}.\r\n     */\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"ERC20: burn amount exceeds allowance\"));\r\n    }\r\n}\r\n\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/*\r\n * The Charg Service Contract\r\n *\r\n * Handles Charg Swap Exchange, Bridge, Services and Feedbacks on Any Blockchain\r\n *\r\n */\r\n\r\ncontract AnyChgCoinService is ERC20Detailed, ERC20 {\r\n  \r\n\tusing SafeMath for uint;\r\n    address payable public owner;\r\n\r\n    /**\r\n\t * the node main data\r\n\t */\r\n\tstruct NodeData {\r\n\r\n\t\tbool registered;\r\n\t\tbool authorized;\r\n\r\n        /* lat, lon values, multiplied by 10^7 */\r\n\t\tint128 latitude;\r\n\t\tint128 longitude;\r\n\r\n\t\t/* main parameters */\r\n\t\tstring name;\r\n\t\tstring phone;\r\n\t\tstring location;\r\n\t\tstring connector;\r\n\t\tstring power;\r\n\t}\r\n\r\n    /**\r\n\t * service parameters for the particular node \r\n\t */\r\n\tstruct ServiceData {\r\n\t\tbool allowed; // service allowed on the node\r\n\t\tuint rate;    // service rate in coins gwei per second\r\n\t\tuint maxTime; // max service time in seconds (0==unlimited)\r\n\t\tbool stopable; // return allowed\r\n\t}\r\n\r\n\r\n    /* service action data */\r\n\tstruct ServiceAction {\r\n\t\tuint started;\r\n\t\tuint finished;\r\n\t\tbool stopable;\r\n\t\taddress node;\r\n\t\taddress payer;\r\n\t\tuint serviceRate;\r\n\t\tuint16 serviceId;\r\n\t\tuint8 feedbackRate;\r\n\t\tstring feedbackText;\r\n\t}\r\n\r\n\tuint16 public servicesCount = 0; \r\n\tmapping (uint16 => string) public services;  // array of possible services\r\n\r\n    mapping (address => mapping (bytes32 => string)) public nodeParameters;  //node => parametrHash => parameterValue\r\n\r\n    mapping (address => NodeData) public registeredNodes;\r\n\r\n    mapping (address => mapping (uint16 => ServiceData)) public nodeService;  //node => serviceId => ServiceData\r\n\r\n\tmapping (bytes32 => ServiceAction) public serviceActions; // paymentHash => ServiceAction\r\n\t\r\n\t/**\r\n\t * minimal CHG balance for start service on the node\r\n\t */\r\n    uint public minCoinsBalance = 500 * 10 ** 18; // 500 CHG default\r\n    \r\n\t/**\r\n\t *   Exchange Service Structures\r\n\t */\r\n\tstruct Order {\r\n\t\taddress user;\r\n\t\tuint amountGive;\r\n\t\tuint amountGet;\r\n\t\tuint expire;\r\n\t}\r\n  \r\n\tmapping (bytes32 => Order) public sellOrders;\r\n\tmapping (bytes32 => Order) public buyOrders;\r\n\t\r\n\t/*  balance of exchange nodes  */\r\n\tmapping (address => uint) public ethBalance; // the other blochchain native token\r\n\r\n\t/*  sevice events  */\r\n \tevent NodeRegistered ( address indexed addr, int128 indexed latitude, int128 indexed longitude, string name, string location, string phone, string connector, string power );\r\n\r\n\tevent DepositEther  ( address sender, uint EthValue, uint EthBalance );\r\n\tevent WithdrawEther ( address sender, uint EthValue, uint EthBalance );\r\n\t\r\n\tevent DepositCoins  ( address sender, uint CoinValue, uint CoinBalance );\r\n\tevent WithdrawCoins ( address sender, uint CoinValue, uint CoinBalance );\r\n \r\n\tevent SellOrder ( bytes32 indexed orderHash, uint amountGive, uint amountGet, uint expire, address seller );\r\n\tevent BuyOrder  ( bytes32 indexed orderHash, uint amountGive, uint amountGet, uint expire, address buyer );\r\n\t\r\n\tevent CancelSellOrder ( bytes32 indexed orderHash );\r\n\tevent CancelBuyOrder  ( bytes32 indexed orderHash );\r\n\r\n\tevent Sell ( bytes32 indexed orderHash, uint amountGive, uint amountGet, address seller );\r\n\tevent Buy  ( bytes32 indexed orderHash, uint amountGive, uint amountGet, address buyer );\r\n\t\r\n\tevent ServiceOn  ( address indexed nodeAddr, address indexed payer, bytes32 paymentHash, uint16 serviceId, uint chgAmount, uint serviceTime, uint finished);\r\n\tevent ServiceOff ( address indexed nodeAddr, address indexed payer, bytes32 paymentHash, uint16 serviceId, uint chgAmount, uint serviceTime, uint finished);\r\n\tevent Feedback   ( address indexed nodeAddr, address indexed payer, bytes32 paymentHash, uint16 serviceId, uint8 feedbackRate);\r\n\r\n    /*\r\n     *  Bridge \r\n     */\r\n    uint64 public networkId; // this network id\r\n    uint256 public minBridgeValue = 1 * 10**18; // min. bridge transfer value (1 CHG)\r\n    uint256 public maxBridgeValue = 10000 * 10**18; // max. bridge transfer value (10000 CHG)\r\n\r\n\tstruct Chain {\r\n        bool active;\r\n        string networkName;\r\n\t}\r\n\r\n\tmapping (uint64 => Chain) public chains; // networkId => Chain\r\n\r\n    mapping (bytes32 => bool) public swaps;\r\n\r\n    mapping (address => bool) public isValidator;\r\n\r\n    event Swap(address indexed from, address indexed to, uint256 value, uint64 chainId, bytes32 chainHash);\r\n    event Validated(bytes32 indexed txHash, address indexed account, uint256 value);\r\n\r\n\r\n\t/**\r\n\t * constructor\r\n\t */\r\n    constructor(uint64 _networkId) ERC20Detailed(\"Charg Coin\", \"CHG\", 18) public {\r\n        owner = msg.sender;\r\n        isValidator[owner] = true;\r\n        networkId = _networkId;\r\n\r\n\t\t/*  initial services  */\r\n\t\tservices[servicesCount] = 'Charg';\r\n\t\tservicesCount++;\r\n\r\n\t\tservices[servicesCount] = 'Parking';\r\n\t\tservicesCount++;\r\n\r\n\t\tservices[servicesCount] = 'Internet';\r\n\t\tservicesCount++;\r\n\r\n        /*  initial chains  */\r\n        chains[1]       = Chain(true, 'Ethereum Mainnet');\r\n        chains[56]      = Chain(true, 'Binance Smart Chain');\r\n        chains[128]     = Chain(true, 'Heco Chain');\r\n        chains[137]     = Chain(true, 'Polygon Network');\r\n        chains[32659]   = Chain(true, 'Fusion Network');\r\n        chains[42161]   = Chain(true, 'Arbitrum One Chain');\r\n        chains[22177]   = Chain(true, 'Native Charg Network');\r\n    }\r\n\r\n    function destroy() public {\r\n        require(msg.sender == owner, \"only owner\");\r\n        selfdestruct(owner);\r\n    }\r\n\r\n\tfunction() external payable {\r\n\t\t//revert();\r\n\t\tdepositEther();\r\n\t}\r\n\r\n    function setOwner(address payable newOwner) public {\r\n        require(msg.sender == owner, \"only owner\");\r\n        owner = newOwner;\r\n    }\r\n    \r\n    /* add a new service to the smart contract */\r\n\tfunction addService( string memory name ) public {\r\n        require(msg.sender == owner, \"only owner\");\r\n\t\tservices[servicesCount] = name;\r\n\t\tservicesCount++;\r\n\t}\r\n\r\n\r\n    /* register a new node */\r\n    function registerNode( int128 latitude, int128 longitude, string memory name, string memory location, string memory phone, string memory connector, string memory power, uint chargRate, uint parkRate, uint inetRate) public {\r\n\r\n\t\t// check if node is not registered, or authorized for update\r\n        require ( !registeredNodes[msg.sender].registered || registeredNodes[msg.sender].authorized, \"already registered\" );\r\n\r\n\t\t// check minimal coins balance\r\n        require (balanceOf(msg.sender) >= minCoinsBalance);\r\n\r\n\t\tif (!registeredNodes[msg.sender].registered) {\r\n\t\t\tregisteredNodes[msg.sender].registered = true;\r\n\t\t\tregisteredNodes[msg.sender].authorized = true;\r\n\t\t}\r\n\r\n\t\tregisteredNodes[msg.sender].latitude = latitude;\r\n\t\tregisteredNodes[msg.sender].longitude = longitude;\r\n\r\n\t\tregisteredNodes[msg.sender].name = name;\r\n\t\tregisteredNodes[msg.sender].location = location;\r\n\t\tregisteredNodes[msg.sender].phone = phone;\r\n\t\tregisteredNodes[msg.sender].connector = connector;\r\n\t\tregisteredNodes[msg.sender].power = power;\r\n\r\n        if (chargRate > 0) {\r\n\t\t\tnodeService[msg.sender][0].allowed = true;\r\n\t\t\tnodeService[msg.sender][0].stopable = true;\r\n\t\t\tnodeService[msg.sender][0].maxTime = 0;\r\n\t\t\tnodeService[msg.sender][0].rate = chargRate;\r\n\t\t}\r\n\r\n        if (parkRate > 0) {\r\n\t\t\tnodeService[msg.sender][1].allowed = true;\r\n\t\t\tnodeService[msg.sender][1].stopable = true;\r\n\t\t\tnodeService[msg.sender][1].maxTime = 0;\r\n\t\t\tnodeService[msg.sender][1].rate = parkRate;\r\n\t\t}\r\n\r\n        if (inetRate > 0) {\r\n\t\t\tnodeService[msg.sender][2].allowed = true;\r\n\t\t\tnodeService[msg.sender][2].stopable = true;\r\n\t\t\tnodeService[msg.sender][2].maxTime = 0;\r\n\t\t\tnodeService[msg.sender][2].rate = inetRate;\r\n\t\t}\r\n\t\temit NodeRegistered( msg.sender, latitude, longitude, name, location, phone, connector, power );\r\n\t}\r\n\r\n\r\n    /* setup the node parameters */\r\n    function setNodeParameter(bytes32 parameterHash, string memory parameterValue) public {\r\n        require (registeredNodes[msg.sender].registered, \"not registered\");\r\n        nodeParameters[msg.sender][parameterHash] = parameterValue;\r\n    }\r\n\t\r\n\r\n    /* setup the node services */\r\n\tfunction setupNodeService( uint16 serviceId, bool allowed, bool stopable, uint rate, uint maxTime ) public {\r\n        require (registeredNodes[msg.sender].registered, \"not registered\");\r\n        require (serviceId < servicesCount);\r\n\r\n        nodeService[msg.sender][serviceId].allowed = allowed;\r\n        nodeService[msg.sender][serviceId].stopable = stopable;\r\n        nodeService[msg.sender][serviceId].rate = rate;\r\n        nodeService[msg.sender][serviceId].maxTime = maxTime;\r\n\t}\r\n\r\n    /* change the node authorization */ \r\n    function modifyNodeAuthorization (address addr, bool authorized) public {\r\n        require(msg.sender == owner, \"only owner\");\r\n        require (registeredNodes[msg.sender].registered, \"not registered\");\r\n        registeredNodes[addr].authorized = authorized;\r\n    }\r\n\r\n    /* set minimal coins balance for the node */ \r\n    function setMinCoinsBalance(uint _newValue) public {\r\n        require(msg.sender == owner, \"only owner\");\r\n\t\tminCoinsBalance = _newValue;\r\n\t}\r\n\r\n\tfunction setMinBridgeValue(uint256 _value) public {\r\n        require(msg.sender == owner, \"only owner\");\r\n        require (_value > 0, \"wrong value\");\r\n        minBridgeValue = _value;\r\n\t}\r\n\r\n\tfunction setMaxBridgeValue(uint256 _value) public {\r\n        require(msg.sender == owner, \"only owner\");\r\n        require (_value > 0, \"wrong value\");\r\n        maxBridgeValue = _value;\r\n\t}\r\n\r\n\tfunction addValidator( address _validator ) public {\r\n        require(msg.sender == owner, \"only owner\");\r\n        isValidator[_validator] = true;\r\n\t}\r\n\r\n\tfunction removeValidator( address _validator ) public {\r\n        require(msg.sender == owner, \"only owner\");\r\n        isValidator[_validator] = false;\r\n\t}\r\n\r\n    /*  cross-chain parameters  */\r\n\tfunction setChain(bool _active, uint64 _networkId, string memory _networkName) public {\r\n        require(msg.sender == owner, \"only owner\");\r\n\t\tchains[_networkId].active = _active;\r\n\t\tchains[_networkId].networkName = _networkName;\r\n\t}\r\n\r\n    function startSwapTo(address _to, uint256 _value, uint64 _networkId, bytes32 _chainHash) public {\r\n        require(_networkId != networkId, \"swap in the same network not allowed\");\r\n        require(chains[_networkId].active, \"swap not allowed\");\r\n        require(_value >= minBridgeValue && _value <= maxBridgeValue, \"wrong value\");\r\n        _burn(msg.sender, _value);\r\n        emit Swap(msg.sender, _to, _value, _networkId, _chainHash);\r\n    }\r\n\r\n    function startSwap(uint256 _value, uint64 _networkId, bytes32 _chainHash) public {\r\n        startSwapTo(msg.sender, _value, _networkId, _chainHash);\r\n    }\r\n\r\n    /*  bridge transactions validation  */\r\n    function validate(bytes32 txHash, address account, uint256 value, uint256 fee) public {\r\n        require (isValidator[msg.sender], \"only validators\");\r\n        require(!swaps[txHash], \"already validated\");\r\n        _mint(account, value);\r\n        if (fee > 0) {\r\n            _mint(msg.sender, fee);\r\n        }\r\n        swaps[txHash] = true;\r\n        emit Validated(txHash, account, value);\r\n    }\r\n\r\n\tfunction depositEther() public payable {\r\n\t\tethBalance[msg.sender] = ethBalance[msg.sender].add(msg.value);\r\n\t\temit DepositEther(msg.sender, msg.value, ethBalance[msg.sender]);\r\n\t}\r\n\r\n\tfunction withdrawEther(uint amount) public {\r\n\t\trequire(ethBalance[msg.sender] >= amount);\r\n\t\tethBalance[msg.sender] = ethBalance[msg.sender].sub(amount);\r\n\t\tmsg.sender.transfer(amount);\r\n\t\temit WithdrawEther(msg.sender, amount, ethBalance[msg.sender]);\r\n\t}\r\n\r\n\tfunction buyOrder(uint amountGive, uint amountGet, uint expire) public {\r\n\t\trequire(amountGive > 0 && amountGet > 0 && amountGive <= ethBalance[msg.sender]);\r\n\t\tbytes32 orderHash = sha256(abi.encodePacked(msg.sender, amountGive, amountGet, block.number));\r\n\t\tbuyOrders[orderHash] = Order(msg.sender, amountGive, amountGet, expire);\r\n\t\temit BuyOrder(orderHash, amountGive, amountGet, expire, msg.sender);\r\n\t}\r\n\r\n\tfunction sellOrder(uint amountGive, uint amountGet, uint expire) public {\r\n\t\trequire(amountGive > 0 && amountGet > 0 && amountGive <= balanceOf(msg.sender));\r\n\t\tbytes32 orderHash = sha256(abi.encodePacked(msg.sender, amountGive, amountGet, block.number));\r\n\t\tsellOrders[orderHash] = Order(msg.sender, amountGive, amountGet, expire);\r\n\t\temit SellOrder(orderHash, amountGive, amountGet, expire, msg.sender);\r\n\t}\r\n\r\n\tfunction cancelBuyOrder(bytes32 orderHash) public {\r\n\t\trequire( buyOrders[orderHash].expire > now && buyOrders[orderHash].user == msg.sender);\r\n\t\tbuyOrders[orderHash].expire = 0; \r\n\t\temit CancelBuyOrder(orderHash);\r\n\t}\r\n\r\n\tfunction cancelSellOrder(bytes32 orderHash) public {\r\n\t\trequire( sellOrders[orderHash].expire > now && sellOrders[orderHash].user == msg.sender);\r\n\t\tsellOrders[orderHash].expire = 0; \r\n\t\temit CancelSellOrder(orderHash);\r\n\t}\r\n\r\n\tfunction buy(bytes32 orderHash) public payable {\r\n        require(sellOrders[orderHash].user != msg.sender, \"order owner\");\r\n\t\trequire(msg.value > 0 && now <= sellOrders[orderHash].expire && 0 <= sellOrders[orderHash].amountGet.sub(msg.value));\r\n\t\t\r\n\t\tuint amountGet; //in CHG\r\n\t\t\r\n\t\tif (msg.value == sellOrders[orderHash].amountGet) {\r\n\t\t\tamountGet = sellOrders[orderHash].amountGive;\r\n\t\t\trequire(0 <= balanceOf(sellOrders[orderHash].user).sub(amountGet));\r\n\t\t\tsellOrders[orderHash].amountGive = 0; \r\n\t\t\tsellOrders[orderHash].amountGet = 0; \r\n\t\t\tsellOrders[orderHash].expire = 0; \r\n\t\t} else {\r\n\t\t\tamountGet = sellOrders[orderHash].amountGive.mul(msg.value).div(sellOrders[orderHash].amountGet);\r\n\t\t\trequire(0 <= balanceOf(sellOrders[orderHash].user).sub(amountGet) && 0 <= sellOrders[orderHash].amountGive.sub(amountGet));\r\n\t\t\tsellOrders[orderHash].amountGive = sellOrders[orderHash].amountGive.sub(amountGet); \r\n\t\t\tsellOrders[orderHash].amountGet = sellOrders[orderHash].amountGet.sub(msg.value); \r\n\t\t}\r\n\t\t\t\r\n        _transfer(sellOrders[orderHash].user, msg.sender, amountGet);\r\n\t\tethBalance[sellOrders[orderHash].user] = ethBalance[sellOrders[orderHash].user].add(msg.value);\r\n\r\n\t\temit Buy(orderHash, sellOrders[orderHash].amountGive, sellOrders[orderHash].amountGet, msg.sender);\r\n\t}\r\n\r\n\tfunction sell(bytes32 orderHash, uint amountGive) public {\r\n        require(buyOrders[orderHash].user != msg.sender, \"order owner\");\r\n\t\trequire(amountGive > 0 && now <= buyOrders[orderHash].expire && 0 <= balanceOf(msg.sender).sub(amountGive) &&  0 <= buyOrders[orderHash].amountGet.sub(amountGive));\r\n\r\n\t\tuint amountGet;\r\n\r\n\t\tif (amountGive == buyOrders[orderHash].amountGet) {\r\n\t\t\tamountGet = buyOrders[orderHash].amountGive;\r\n\t\t\trequire(0 <= ethBalance[buyOrders[orderHash].user].sub(amountGet));\r\n\t\t\tbuyOrders[orderHash].amountGive = 0; \r\n\t\t\tbuyOrders[orderHash].amountGet = 0; \r\n\t\t\tbuyOrders[orderHash].expire = 0; \r\n\t\t} else {\r\n\t\t\tamountGet = buyOrders[orderHash].amountGive.mul(amountGive) / buyOrders[orderHash].amountGet;\r\n\t\t\trequire(0 <= ethBalance[buyOrders[orderHash].user].sub(amountGet) && 0 <= buyOrders[orderHash].amountGive.sub(amountGet));\r\n\t\t\tbuyOrders[orderHash].amountGive = buyOrders[orderHash].amountGive.sub(amountGet); \r\n\t\t\tbuyOrders[orderHash].amountGet = buyOrders[orderHash].amountGet.sub(amountGive); \r\n\t\t}\r\n\r\n\t\tethBalance[buyOrders[orderHash].user] = ethBalance[buyOrders[orderHash].user].sub(amountGet);\r\n        _transfer(msg.sender, buyOrders[orderHash].user, amountGive);\r\n        msg.sender.transfer(amountGet);\r\n\r\n\t\temit Sell(orderHash, buyOrders[orderHash].amountGive, buyOrders[orderHash].amountGet, msg.sender);\r\n\t}\r\n\r\n\t/*\r\n\t * Method serviceOn\r\n\t * Make an exchange and start service on the node\r\n\t *\r\n\t * nodeAddr - the node which provides service\r\n\t * serviceId - id of the started service, described in Node Service Contract (0-charge, 1-parking, 2-internet ...)\r\n\t * orderHash - hash of exchange sell order \r\n\t * paymentHash - hash of the payment transaction \r\n\t */\r\n\tfunction serviceOn(address nodeAddr, uint16 serviceId, uint time, bytes32 paymentHash, bytes32 orderHash) public payable returns (bytes32) {\r\n\r\n\t\trequire ( registeredNodes[nodeAddr].authorized          // the node is registered and authorized\r\n\t\t\t\t&& (balanceOf(nodeAddr) >= minCoinsBalance) // minimal balance of the node\r\n\t\t\t\t&& nodeService[nodeAddr][serviceId].allowed );  // sevice is allowed on the node\r\n\r\n\t\tif (paymentHash == 0)\r\n\t\t\tpaymentHash = keccak256(abi.encodePacked(msg.sender, now, serviceId));\r\n\r\n\t\trequire (serviceActions[paymentHash].started == 0, 'payment served');\r\n\r\n        uint chgAmount;\r\n\t\tif (msg.value > 0) {\r\n            // payment in ether, exchange required\r\n\t\t\trequire(now <= sellOrders[orderHash].expire && 0 <= sellOrders[orderHash].amountGet.sub(msg.value));\r\n\t\t\tif (msg.value == sellOrders[orderHash].amountGet) {\r\n\t\t\t\tchgAmount = sellOrders[orderHash].amountGive;\r\n    \t\t\trequire(0 <= balanceOf(sellOrders[orderHash].user).sub(chgAmount));\r\n\t\t\t\tsellOrders[orderHash].amountGive = 0; \r\n\t\t\t\tsellOrders[orderHash].amountGet = 0; \r\n\t\t\t\tsellOrders[orderHash].expire = 0; \r\n\t\t\t} else {\r\n\t\t\t\tchgAmount = sellOrders[orderHash].amountGive.mul(msg.value) / sellOrders[orderHash].amountGet;\r\n\t\t\t\trequire(0 <= balanceOf(sellOrders[orderHash].user).sub(chgAmount) && 0 <= sellOrders[orderHash].amountGive.sub(chgAmount));\r\n\t\t\t\tsellOrders[orderHash].amountGive = sellOrders[orderHash].amountGive.sub(chgAmount); \r\n\t\t\t\tsellOrders[orderHash].amountGet = sellOrders[orderHash].amountGet.sub(msg.value); \r\n\t\t\t}\r\n\t\t\t// time will be calculated by amount\r\n\t\t\ttime = chgAmount.div(nodeService[nodeAddr][serviceId].rate);\r\n\t\t\trequire ( time <= nodeService[nodeAddr][serviceId].maxTime || nodeService[nodeAddr][serviceId].maxTime == 0);\r\n\r\n            if (sellOrders[orderHash].user != nodeAddr) {\r\n                // no need to transfer if it is the same account\r\n                _transfer(sellOrders[orderHash].user, nodeAddr, chgAmount);\r\n            }\r\n            ethBalance[sellOrders[orderHash].user] = ethBalance[sellOrders[orderHash].user].add(msg.value);\r\n\t\t\temit Buy(orderHash, sellOrders[orderHash].amountGive, sellOrders[orderHash].amountGet, msg.sender);\r\n\r\n\t\t} else {\r\n            // CHG payment\r\n\t\t\trequire ( time <= nodeService[nodeAddr][serviceId].maxTime || nodeService[nodeAddr][serviceId].maxTime == 0);\r\n\t\t\tchgAmount = time * nodeService[nodeAddr][serviceId].rate;\r\n\t\t\trequire( chgAmount > 0 && 0 <= balanceOf(msg.sender).sub(chgAmount) );\r\n            _transfer(msg.sender, nodeAddr, chgAmount);\r\n\t\t}\r\n\r\n        serviceActions[paymentHash].node = nodeAddr; \r\n        serviceActions[paymentHash].payer = msg.sender; //will allow feedback for the sender\r\n        serviceActions[paymentHash].serviceRate = nodeService[nodeAddr][serviceId].rate;\r\n        serviceActions[paymentHash].serviceId = serviceId;\r\n        serviceActions[paymentHash].started = now;\r\n        serviceActions[paymentHash].finished = now + time;\r\n        serviceActions[paymentHash].stopable = nodeService[nodeAddr][serviceId].stopable;\r\n\r\n\t\temit ServiceOn (nodeAddr, msg.sender, paymentHash, serviceId, chgAmount, time, now + time);\r\n\r\n\t\treturn paymentHash;\r\n\t}\r\n\r\n\t\r\n\t/*\r\n\t * Method serviceOff\r\n\t * Turn off the service on the node\r\n\t */\r\n\tfunction serviceOff( bytes32 paymentHash ) public {\r\n\r\n\t\trequire(serviceActions[paymentHash].started > 0 \r\n                    && serviceActions[paymentHash].stopable\r\n\t\t\t\t\t&& now < serviceActions[paymentHash].finished \r\n\t\t\t\t\t&& serviceActions[paymentHash].payer == msg.sender);\r\n\r\n\t\tuint time = serviceActions[paymentHash].finished.sub(now);\r\n\t\tuint chgAmount = time.mul(serviceActions[paymentHash].serviceRate);\r\n        serviceActions[paymentHash].finished = now;\r\n\r\n        _transfer(serviceActions[paymentHash].node, msg.sender, chgAmount);\r\n        \r\n\t\temit ServiceOff (serviceActions[paymentHash].node, msg.sender, paymentHash, serviceActions[paymentHash].serviceId, chgAmount, time, now);\r\n\t}\r\n\r\n\r\n\t/*\r\n\t * Method sendFeedback\r\n\t * Store feedback of the successful payment transaction in the smart contract\r\n\t * paymentHash - hash of the payment transaction\r\n\t * rate - the node raiting 1..10 points \r\n\t */\r\n\tfunction sendFeedback(bytes32 paymentHash, uint8 feedbackRate, string memory feedbackText) public {\r\n\r\n\t\trequire(serviceActions[paymentHash].payer == msg.sender && serviceActions[paymentHash].feedbackRate == 0);\r\n\r\n\t\tserviceActions[paymentHash].feedbackRate = feedbackRate > 10 ? 10 : (feedbackRate < 1 ? 1 : feedbackRate);\r\n\t\tserviceActions[paymentHash].feedbackText = feedbackText;\r\n\t\t\r\n\t\temit Feedback (serviceActions[paymentHash].node, msg.sender, paymentHash, serviceActions[paymentHash].serviceId, serviceActions[paymentHash].feedbackRate);\r\n\t}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_networkId\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountGive\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountGet\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountGive\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountGet\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expire\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"BuyOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"}],\"name\":\"CancelBuyOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"}],\"name\":\"CancelSellOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"CoinValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"CoinBalance\",\"type\":\"uint256\"}],\"name\":\"DepositCoins\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"EthValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"EthBalance\",\"type\":\"uint256\"}],\"name\":\"DepositEther\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nodeAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"paymentHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"serviceId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feedbackRate\",\"type\":\"uint8\"}],\"name\":\"Feedback\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int128\",\"name\":\"latitude\",\"type\":\"int128\"},{\"indexed\":true,\"internalType\":\"int128\",\"name\":\"longitude\",\"type\":\"int128\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"location\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"phone\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"connector\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"power\",\"type\":\"string\"}],\"name\":\"NodeRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountGive\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountGet\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"Sell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountGive\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountGet\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expire\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"SellOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nodeAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"paymentHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"serviceId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chgAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"serviceTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finished\",\"type\":\"uint256\"}],\"name\":\"ServiceOff\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nodeAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"paymentHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"serviceId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chgAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"serviceTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finished\",\"type\":\"uint256\"}],\"name\":\"ServiceOn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"chainHash\",\"type\":\"bytes32\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"txHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Validated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"CoinValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"CoinBalance\",\"type\":\"uint256\"}],\"name\":\"WithdrawCoins\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"EthValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"EthBalance\",\"type\":\"uint256\"}],\"name\":\"WithdrawEther\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"addService\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"addValidator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountGive\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountGet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expire\",\"type\":\"uint256\"}],\"name\":\"buyOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"buyOrders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountGive\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountGet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expire\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"}],\"name\":\"cancelBuyOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"}],\"name\":\"cancelSellOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"chains\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"networkName\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"depositEther\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ethBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isValidator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxBridgeValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minBridgeValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minCoinsBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"authorized\",\"type\":\"bool\"}],\"name\":\"modifyNodeAuthorization\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"networkId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"nodeParameters\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"nodeService\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"stopable\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"int128\",\"name\":\"latitude\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"longitude\",\"type\":\"int128\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"location\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"phone\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"connector\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"power\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chargRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"parkRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inetRate\",\"type\":\"uint256\"}],\"name\":\"registerNode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"registeredNodes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"registered\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"authorized\",\"type\":\"bool\"},{\"internalType\":\"int128\",\"name\":\"latitude\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"longitude\",\"type\":\"int128\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"phone\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"location\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"connector\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"power\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"removeValidator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amountGive\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountGive\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountGet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expire\",\"type\":\"uint256\"}],\"name\":\"sellOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"sellOrders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountGive\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountGet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expire\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"paymentHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"feedbackRate\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"feedbackText\",\"type\":\"string\"}],\"name\":\"sendFeedback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"serviceActions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"started\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finished\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"stopable\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"node\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"serviceRate\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"serviceId\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"feedbackRate\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"feedbackText\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"paymentHash\",\"type\":\"bytes32\"}],\"name\":\"serviceOff\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"nodeAddr\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"serviceId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"paymentHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"}],\"name\":\"serviceOn\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"services\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"servicesCount\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_active\",\"type\":\"bool\"},{\"internalType\":\"uint64\",\"name\":\"_networkId\",\"type\":\"uint64\"},{\"internalType\":\"string\",\"name\":\"_networkName\",\"type\":\"string\"}],\"name\":\"setChain\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setMaxBridgeValue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setMinBridgeValue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newValue\",\"type\":\"uint256\"}],\"name\":\"setMinCoinsBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"parameterHash\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"parameterValue\",\"type\":\"string\"}],\"name\":\"setNodeParameter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"serviceId\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"stopable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTime\",\"type\":\"uint256\"}],\"name\":\"setupNodeService\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"_networkId\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"_chainHash\",\"type\":\"bytes32\"}],\"name\":\"startSwap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"_networkId\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"_chainHash\",\"type\":\"bytes32\"}],\"name\":\"startSwapTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"swaps\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"txHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"validate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AnyChgCoinService", "CompilerVersion": "v0.5.17+commit.d19bba13", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000089", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://034a844363cbe0e703261953838d4c202802e1def69cc34a62eac3afa053c8e9"}