{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/AssimilatorFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./assimilators/AssimilatorV2.sol\\\";\\nimport \\\"./interfaces/IAssimilatorFactory.sol\\\";\\nimport \\\"./interfaces/IOracle.sol\\\";\\n\\ncontract AssimilatorFactory is IAssimilatorFactory, Ownable {\\n\\tevent NewAssimilator(\\n\\t\\taddress indexed caller,\\n\\t\\tbytes32 indexed id,\\n\\t\\taddress indexed assimilator,\\n\\t\\taddress oracle,\\n\\t\\taddress token\\n\\t);\\n\\tevent AssimilatorRevoked(\\n\\t\\taddress indexed caller,\\n\\t\\tbytes32 indexed id,\\n\\t\\taddress indexed assimilator\\n\\t);\\n\\tevent CurveFactoryUpdated(\\n\\t\\taddress indexed caller,\\n\\t\\taddress indexed curveFactory\\n\\t);\\n\\tmapping(bytes32 => AssimilatorV2) public assimilators;\\n\\n\\taddress public curveFactory;\\n\\n\\tmodifier onlyCurveFactoryOrOwner() {\\n\\t\\trequire(\\n\\t\\t\\tmsg.sender == curveFactory || msg.sender == owner(),\\n\\t\\t\\t\\\"unauthorized\\\"\\n\\t\\t);\\n\\t\\t_;\\n\\t}\\n\\n\\tfunction setCurveFactory(address _curveFactory) external onlyOwner {\\n\\t\\trequire(\\n\\t\\t\\t_curveFactory != address(0),\\n\\t\\t\\t\\\"AssimFactory/curve factory zero address!\\\"\\n\\t\\t);\\n\\t\\tcurveFactory = _curveFactory;\\n\\t\\temit CurveFactoryUpdated(msg.sender, curveFactory);\\n\\t}\\n\\n\\tfunction getAssimilator(\\n\\t\\taddress _token\\n\\t) external view override returns (AssimilatorV2) {\\n\\t\\tbytes32 assimilatorID = keccak256(abi.encode(_token));\\n\\t\\treturn assimilators[assimilatorID];\\n\\t}\\n\\n\\tfunction newAssimilator(\\n\\t\\tIOracle _oracle,\\n\\t\\taddress _token,\\n\\t\\tuint256 _tokenDecimals\\n\\t) external override onlyCurveFactoryOrOwner returns (AssimilatorV2) {\\n\\t\\tbytes32 assimilatorID = keccak256(abi.encode(_token));\\n\\t\\tif (address(assimilators[assimilatorID]) != address(0))\\n\\t\\t\\trevert(\\\"AssimilatorFactory/oracle-stablecoin-pair-already-exists\\\");\\n\\n\\t\\tAssimilatorV2 assimilator = new AssimilatorV2(\\n\\t\\t\\t_oracle,\\n\\t\\t\\t_token,\\n\\t\\t\\t_tokenDecimals,\\n\\t\\t\\tIOracle(_oracle).decimals()\\n\\t\\t);\\n\\t\\tassimilators[assimilatorID] = assimilator;\\n\\t\\temit NewAssimilator(\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\tassimilatorID,\\n\\t\\t\\taddress(assimilator),\\n\\t\\t\\taddress(_oracle),\\n\\t\\t\\t_token\\n\\t\\t);\\n\\t\\treturn assimilator;\\n\\t}\\n\\n\\tfunction revokeAssimilator(address _token) external onlyOwner {\\n\\t\\tbytes32 assimilatorID = keccak256(abi.encode(_token));\\n\\t\\taddress _assimAddress = address(assimilators[assimilatorID]);\\n\\t\\tassimilators[assimilatorID] = AssimilatorV2(address(0));\\n\\t\\temit AssimilatorRevoked(\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\tassimilatorID,\\n\\t\\t\\taddress(_assimAddress)\\n\\t\\t);\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/assimilators/AssimilatorV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport \\\"../lib/ABDKMath64x64.sol\\\";\\nimport \\\"../interfaces/IAssimilator.sol\\\";\\nimport \\\"../interfaces/IOracle.sol\\\";\\n\\ncontract AssimilatorV2 is IAssimilator, ReentrancyGuard {\\n\\tusing ABDKMath64x64 for int128;\\n\\tusing ABDKMath64x64 for uint256;\\n\\n\\tusing SafeMath for uint256;\\n\\tusing SafeERC20 for IERC20;\\n\\n\\tIERC20 public immutable usdc;\\n\\n\\tIOracle public immutable oracle;\\n\\tIERC20 public immutable token;\\n\\tuint256 public immutable oracleDecimals;\\n\\tuint256 public immutable tokenDecimals;\\n\\n\\t// solhint-disable-next-line\\n\\tconstructor(\\n\\t\\tIOracle _oracle,\\n\\t\\taddress _token,\\n\\t\\tuint256 _tokenDecimals,\\n\\t\\tuint256 _oracleDecimals\\n\\t) {\\n\\t\\toracle = _oracle;\\n\\t\\ttoken = IERC20(_token);\\n\\t\\toracleDecimals = _oracleDecimals;\\n\\t\\ttokenDecimals = _tokenDecimals;\\n\\t\\tusdc = IERC20(quoteAddress());\\n\\t}\\n\\n\\tfunction quoteAddress() internal view returns (address) {\\n\\t\\tuint256 chainID;\\n\\t\\tassembly {\\n\\t\\t\\tchainID := chainid()\\n\\t\\t}\\n\\t\\tif (chainID == 1) {\\n\\t\\t\\treturn 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\\n\\t\\t} else if (chainID == 137 || chainID == 31337) {\\n\\t\\t\\treturn 0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174;\\n\\t\\t} else if (chainID == 80001) {\\n\\t\\t\\treturn 0x77730cF052837ebc2f8f1398CAD38D946e58d432;\\n\\t\\t}  else if (chainID == 42161) {\\n\\t\\t\\treturn 0xFF970A61A04b1cA14834A43f5dE4533eBDDB5CC8;\\n\\t\\t} else {\\n\\t\\t\\treturn address(0);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction getRate() public view override returns (uint256) {\\n\\t\\t(, int256 price, , , ) = oracle.latestRoundData();\\n\\t\\treturn uint256(price);\\n\\t}\\n\\n\\t// takes raw eurs amount, transfers it in, calculates corresponding numeraire amount and returns it\\n\\tfunction intakeRawAndGetBalance(\\n\\t\\tuint256 _amount\\n\\t) external override returns (int128 amount_, int128 balance_) {\\n\\t\\ttoken.safeTransferFrom(msg.sender, address(this), _amount);\\n\\n\\t\\tuint256 _balance = token.balanceOf(address(this));\\n\\n\\t\\tuint256 _rate = getRate();\\n\\n\\t\\tbalance_ = ((_balance * _rate) / 10 ** oracleDecimals).divu(\\n\\t\\t\\t10 ** tokenDecimals\\n\\t\\t);\\n\\n\\t\\tamount_ = ((_amount * _rate) / 10 ** oracleDecimals).divu(\\n\\t\\t\\t10 ** tokenDecimals\\n\\t\\t);\\n\\t}\\n\\n\\t// takes raw eurs amount, transfers it in, calculates corresponding numeraire amount and returns it\\n\\tfunction intakeRaw(\\n\\t\\tuint256 _amount\\n\\t) external override returns (int128 amount_) {\\n\\t\\ttoken.safeTransferFrom(msg.sender, address(this), _amount);\\n\\n\\t\\tuint256 _rate = getRate();\\n\\n\\t\\tamount_ = ((_amount * _rate) / 10 ** oracleDecimals).divu(\\n\\t\\t\\t10 ** tokenDecimals\\n\\t\\t);\\n\\t}\\n\\n\\t// takes a numeraire amount, calculates the raw amount of eurs, transfers it in and returns the corresponding raw amount\\n\\tfunction intakeNumeraire(\\n\\t\\tint128 _amount\\n\\t) external override returns (uint256 amount_) {\\n\\t\\tuint256 _rate = getRate();\\n\\n\\t\\tamount_ =\\n\\t\\t\\t(_amount.mulu(10 ** tokenDecimals) * 10 ** oracleDecimals) /\\n\\t\\t\\t_rate;\\n\\t\\t\\n\\t\\trequire(amount_ > 0, \\\"intakeNumeraire/zero-amount!\\\");\\n\\t\\t\\n\\t\\ttoken.safeTransferFrom(msg.sender, address(this), amount_);\\n\\t}\\n\\n\\t// takes a numeraire amount, calculates the raw amount of eurs, transfers it in and returns the corresponding raw amount\\n\\tfunction intakeNumeraireLPRatio(\\n\\t\\tuint256 _baseWeight,\\n\\t\\tuint256 _minBaseAmount,\\n\\t\\tuint256 _maxBaseAmount,\\n\\t\\tuint256 _quoteWeight,\\n\\t\\tuint256 _minQuoteAmount,\\n\\t\\tuint256 _maxQuoteAmount,\\n\\t\\taddress _addr,\\n\\t\\tint128 _amount\\n\\t) external override returns (uint256 amount_) {\\n\\t\\tuint256 _tokenBal = token.balanceOf(_addr);\\n\\n\\t\\tif (_tokenBal <= 0) return 0;\\n\\n\\t\\t_tokenBal = _tokenBal.mul(1e18).div(_baseWeight);\\n\\n\\t\\tuint256 _usdcBal = usdc.balanceOf(_addr).mul(1e18).div(_quoteWeight);\\n\\n\\t\\t// Rate is in 1e6\\n\\t\\tuint256 _rate = _usdcBal.mul(10 ** tokenDecimals).div(_tokenBal);\\n\\n\\t\\tamount_ = (_amount.mulu(10 ** tokenDecimals) * 1e6) / _rate;\\n\\n\\t\\tif (address(token) == address(usdc)) {\\n\\t\\t\\trequire(\\n\\t\\t\\t\\tamount_ >= _minQuoteAmount && amount_ <= _maxQuoteAmount,\\n\\t\\t\\t\\t\\\"Assimilator/LP Ratio imbalanced!\\\"\\n\\t\\t\\t);\\n\\t\\t} else {\\n\\t\\t\\trequire(\\n\\t\\t\\t\\tamount_ >= _minBaseAmount && amount_ <= _maxBaseAmount,\\n\\t\\t\\t\\t\\\"Assimilator/LP Ratio imbalanced!\\\"\\n\\t\\t\\t);\\n\\t\\t}\\n\\t\\trequire(amount_ > 0, \\\"intakeNumeraire/zero-amount!\\\");\\n\\t\\t\\n\\t\\ttoken.safeTransferFrom(msg.sender, address(this), amount_);\\n\\t}\\n\\n\\t// takes a raw amount of eurs and transfers it out, returns numeraire value of the raw amount\\n\\tfunction outputRawAndGetBalance(\\n\\t\\taddress _dst,\\n\\t\\tuint256 _amount\\n\\t) external override returns (int128 amount_, int128 balance_) {\\n\\t\\tuint256 _rate = getRate();\\n\\n\\t\\ttoken.safeTransfer(_dst, _amount);\\n\\n\\t\\tuint256 _balance = token.balanceOf(address(this));\\n\\n\\t\\tamount_ = ((_amount * _rate) / 10 ** oracleDecimals).divu(\\n\\t\\t\\t10 ** tokenDecimals\\n\\t\\t);\\n\\n\\t\\tbalance_ = ((_balance * _rate) / 10 ** oracleDecimals).divu(\\n\\t\\t\\t10 ** tokenDecimals\\n\\t\\t);\\n\\t}\\n\\n\\t// takes a raw amount of eurs and transfers it out, returns numeraire value of the raw amount\\n\\tfunction outputRaw(\\n\\t\\taddress _dst,\\n\\t\\tuint256 _amount\\n\\t) external override returns (int128 amount_) {\\n\\t\\tuint256 _rate = getRate();\\n\\n\\t\\ttoken.safeTransfer(_dst, _amount);\\n\\n\\t\\tamount_ = ((_amount * _rate) / 10 ** oracleDecimals).divu(\\n\\t\\t\\t10 ** tokenDecimals\\n\\t\\t);\\n\\t}\\n\\n\\t// takes a numeraire value of eurs, figures out the raw amount, transfers raw amount out, and returns raw amount\\n\\tfunction outputNumeraire(\\n\\t\\taddress _dst,\\n\\t\\tint128 _amount\\n\\t) external override returns (uint256 amount_) {\\n\\t\\tuint256 _rate = getRate();\\n\\n\\t\\tamount_ =\\n\\t\\t\\t(_amount.mulu(10 ** tokenDecimals) * 10 ** oracleDecimals) /\\n\\t\\t\\t_rate;\\n\\n\\t\\ttoken.safeTransfer(_dst, amount_);\\n\\t}\\n\\n\\t// takes a numeraire amount and returns the raw amount\\n\\tfunction viewRawAmount(\\n\\t\\tint128 _amount\\n\\t) external view override returns (uint256 amount_) {\\n\\t\\tuint256 _rate = getRate();\\n\\n\\t\\tamount_ =\\n\\t\\t\\t(_amount.mulu(10 ** tokenDecimals) * 10 ** oracleDecimals) /\\n\\t\\t\\t_rate;\\n\\t}\\n\\n\\tfunction viewRawAmountLPRatio(\\n\\t\\tuint256 _baseWeight,\\n\\t\\tuint256 _quoteWeight,\\n\\t\\taddress _addr,\\n\\t\\tint128 _amount\\n\\t) external view override returns (uint256 amount_) {\\n\\t\\tuint256 _tokenBal = token.balanceOf(_addr);\\n\\n\\t\\tif (_tokenBal <= 0) return 0;\\n\\n\\t\\t// 1e2\\n\\t\\t_tokenBal = _tokenBal.mul(1e18).div(_baseWeight);\\n\\n\\t\\t// 1e6\\n\\t\\tuint256 _usdcBal = usdc.balanceOf(_addr).mul(1e18).div(_quoteWeight);\\n\\n\\t\\t// Rate is in 1e6\\n\\t\\tuint256 _rate = _usdcBal.mul(10 ** tokenDecimals).div(_tokenBal);\\n\\n\\t\\tamount_ = (_amount.mulu(10 ** tokenDecimals) * 1e6) / _rate;\\n\\t}\\n\\n\\t// takes a raw amount and returns the numeraire amount\\n\\tfunction viewNumeraireAmount(\\n\\t\\tuint256 _amount\\n\\t) external view override returns (int128 amount_) {\\n\\t\\tuint256 _rate = getRate();\\n\\n\\t\\tamount_ = ((_amount * _rate) / 10 ** oracleDecimals).divu(\\n\\t\\t\\t10 ** tokenDecimals\\n\\t\\t);\\n\\t}\\n\\n\\t// views the numeraire value of the current balance of the reserve, in this case eurs\\n\\tfunction viewNumeraireBalance(\\n\\t\\taddress _addr\\n\\t) external view override returns (int128 balance_) {\\n\\t\\tuint256 _rate = getRate();\\n\\n\\t\\tuint256 _balance = token.balanceOf(_addr);\\n\\n\\t\\tif (_balance <= 0) return ABDKMath64x64.fromUInt(0);\\n\\n\\t\\tbalance_ = ((_balance * _rate) / 10 ** oracleDecimals).divu(\\n\\t\\t\\t10 ** tokenDecimals\\n\\t\\t);\\n\\t}\\n\\n\\t// views the numeraire value of the current balance of the reserve, in this case eurs\\n\\tfunction viewNumeraireAmountAndBalance(\\n\\t\\taddress _addr,\\n\\t\\tuint256 _amount\\n\\t) external view override returns (int128 amount_, int128 balance_) {\\n\\t\\tuint256 _rate = getRate();\\n\\n\\t\\tamount_ = ((_amount * _rate) / 10 ** oracleDecimals).divu(\\n\\t\\t\\t10 ** tokenDecimals\\n\\t\\t);\\n\\n\\t\\tuint256 _balance = token.balanceOf(_addr);\\n\\n\\t\\tbalance_ = ((_balance * _rate) / 10 ** oracleDecimals).divu(\\n\\t\\t\\t10 ** tokenDecimals\\n\\t\\t);\\n\\t}\\n\\n\\t// views the numeraire value of the current balance of the reserve, in this case eurs\\n\\t// instead of calculating with chainlink's \\\"rate\\\" it'll be determined by the existing\\n\\t// token ratio. This is in here to prevent LPs from losing out on future oracle price updates\\n\\tfunction viewNumeraireBalanceLPRatio(\\n\\t\\tuint256 _baseWeight,\\n\\t\\tuint256 _quoteWeight,\\n\\t\\taddress _addr\\n\\t) external view override returns (int128 balance_) {\\n\\t\\tuint256 _tokenBal = token.balanceOf(_addr);\\n\\n\\t\\tif (_tokenBal <= 0) return ABDKMath64x64.fromUInt(0);\\n\\n\\t\\tuint256 _usdcBal = usdc.balanceOf(_addr).mul(1e18).div(_quoteWeight);\\n\\n\\t\\t// Rate is in 1e6\\n\\t\\tuint256 _rate = _usdcBal.mul(1e18).div(\\n\\t\\t\\t_tokenBal.mul(1e18).div(_baseWeight)\\n\\t\\t);\\n\\n\\t\\tbalance_ = ((_tokenBal * _rate) / 1e6).divu(1e18);\\n\\t}\\n\\n\\tfunction transferFee(int128 _amount, address _treasury) external override {\\n\\t\\tuint256 _rate = getRate();\\n\\t\\tif (_amount < 0) _amount = -(_amount);\\n\\t\\tuint256 amount = (_amount.mulu(10 ** tokenDecimals) *\\n\\t\\t\\t10 ** oracleDecimals) / _rate;\\n\\t\\ttoken.safeTransfer(_treasury, amount);\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAssimilator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity 0.8.19;\\n\\ninterface IAssimilator {\\n\\tfunction oracleDecimals() external view returns (uint256);\\n\\n\\tfunction tokenDecimals() external view returns (uint256);\\n\\n\\tfunction getRate() external view returns (uint256);\\n\\n\\tfunction intakeRaw(uint256 amount) external returns (int128);\\n\\n\\tfunction intakeRawAndGetBalance(\\n\\t\\tuint256 amount\\n\\t) external returns (int128, int128);\\n\\n\\tfunction intakeNumeraire(int128 amount) external returns (uint256);\\n\\n\\tfunction intakeNumeraireLPRatio(\\n\\t\\tuint256,\\n\\t\\tuint256,\\n\\t\\tuint256,\\n\\t\\tuint256,\\n\\t\\tuint256,\\n\\t\\tuint256,\\n\\t\\taddress,\\n\\t\\tint128\\n\\t) external returns (uint256);\\n\\n\\tfunction outputRaw(address dst, uint256 amount) external returns (int128);\\n\\n\\tfunction outputRawAndGetBalance(\\n\\t\\taddress dst,\\n\\t\\tuint256 amount\\n\\t) external returns (int128, int128);\\n\\n\\tfunction outputNumeraire(\\n\\t\\taddress dst,\\n\\t\\tint128 amount\\n\\t) external returns (uint256);\\n\\n\\tfunction viewRawAmount(int128) external view returns (uint256);\\n\\n\\tfunction viewRawAmountLPRatio(\\n\\t\\tuint256,\\n\\t\\tuint256,\\n\\t\\taddress,\\n\\t\\tint128\\n\\t) external view returns (uint256);\\n\\n\\tfunction viewNumeraireAmount(uint256) external view returns (int128);\\n\\n\\tfunction viewNumeraireBalanceLPRatio(\\n\\t\\tuint256,\\n\\t\\tuint256,\\n\\t\\taddress\\n\\t) external view returns (int128);\\n\\n\\tfunction viewNumeraireBalance(address) external view returns (int128);\\n\\n\\tfunction viewNumeraireAmountAndBalance(\\n\\t\\taddress,\\n\\t\\tuint256\\n\\t) external view returns (int128, int128);\\n\\n\\tfunction transferFee(int128, address) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAssimilatorFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"../assimilators/AssimilatorV2.sol\\\";\\nimport \\\"../interfaces/IOracle.sol\\\";\\n\\ninterface IAssimilatorFactory {\\n\\tfunction getAssimilator(\\n\\t\\taddress _token\\n\\t) external view returns (AssimilatorV2);\\n\\n\\tfunction newAssimilator(\\n\\t\\tIOracle _oracle,\\n\\t\\taddress _token,\\n\\t\\tuint256 _tokenDecimals\\n\\t) external returns (AssimilatorV2);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity 0.8.19;\\n\\ninterface IOracle {\\n\\tfunction acceptOwnership() external;\\n\\n\\tfunction accessController() external view returns (address);\\n\\n\\tfunction aggregator() external view returns (address);\\n\\n\\tfunction confirmAggregator(address _aggregator) external;\\n\\n\\tfunction decimals() external view returns (uint8);\\n\\n\\tfunction description() external view returns (string memory);\\n\\n\\tfunction getAnswer(uint256 _roundId) external view returns (int256);\\n\\n\\tfunction getRoundData(\\n\\t\\tuint80 _roundId\\n\\t)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tuint80 roundId,\\n\\t\\t\\tint256 answer,\\n\\t\\t\\tuint256 startedAt,\\n\\t\\t\\tuint256 updatedAt,\\n\\t\\t\\tuint80 answeredInRound\\n\\t\\t);\\n\\n\\tfunction getTimestamp(uint256 _roundId) external view returns (uint256);\\n\\n\\tfunction latestAnswer() external view returns (int256);\\n\\n\\tfunction latestRound() external view returns (uint256);\\n\\n\\tfunction latestRoundData()\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tuint80 roundId,\\n\\t\\t\\tint256 answer,\\n\\t\\t\\tuint256 startedAt,\\n\\t\\t\\tuint256 updatedAt,\\n\\t\\t\\tuint80 answeredInRound\\n\\t\\t);\\n\\n\\tfunction latestTimestamp() external view returns (uint256);\\n\\n\\tfunction owner() external view returns (address);\\n\\n\\tfunction phaseAggregators(uint16) external view returns (address);\\n\\n\\tfunction phaseId() external view returns (uint16);\\n\\n\\tfunction proposeAggregator(address _aggregator) external;\\n\\n\\tfunction proposedAggregator() external view returns (address);\\n\\n\\tfunction proposedGetRoundData(\\n\\t\\tuint80 _roundId\\n\\t)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tuint80 roundId,\\n\\t\\t\\tint256 answer,\\n\\t\\t\\tuint256 startedAt,\\n\\t\\t\\tuint256 updatedAt,\\n\\t\\t\\tuint80 answeredInRound\\n\\t\\t);\\n\\n\\tfunction proposedLatestRoundData()\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tuint80 roundId,\\n\\t\\t\\tint256 answer,\\n\\t\\t\\tuint256 startedAt,\\n\\t\\t\\tuint256 updatedAt,\\n\\t\\t\\tuint80 answeredInRound\\n\\t\\t);\\n\\n\\tfunction setController(address _accessController) external;\\n\\n\\tfunction transferOwnership(address _to) external;\\n\\n\\tfunction version() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/lib/ABDKMath64x64.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-4-Clause\\n/*\\n * ABDK Math 64.64 Smart Contract Library.  Copyright \u00a9 2019 by ABDK Consulting.\\n * Author: Mikhail Vladimirov <mikhail.vladimirov@gmail.com>\\n */\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * Smart contract library of mathematical functions operating with signed\\n * 64.64-bit fixed point numbers.  Signed 64.64-bit fixed point number is\\n * basically a simple fraction whose numerator is signed 128-bit integer and\\n * denominator is 2^64.  As long as denominator is always the same, there is no\\n * need to store it, thus in Solidity signed 64.64-bit fixed point numbers are\\n * represented by int128 type holding only the numerator.\\n */\\nlibrary ABDKMath64x64 {\\n\\t/*\\n\\t * Minimum value signed 64.64-bit fixed point number may have.\\n\\t */\\n\\tint128 private constant MIN_64x64 = -0x80000000000000000000000000000000;\\n\\n\\t/*\\n\\t * Maximum value signed 64.64-bit fixed point number may have.\\n\\t */\\n\\tint128 private constant MAX_64x64 = 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n\\t/**\\n\\t * Convert signed 256-bit integer number into signed 64.64-bit fixed point\\n\\t * number.  Revert on overflow.\\n\\t *\\n\\t * @param x signed 256-bit integer number\\n\\t * @return signed 64.64-bit fixed point number\\n\\t */\\n\\tfunction fromInt(int256 x) internal pure returns (int128) {\\n\\t\\tunchecked {\\n\\t\\t\\trequire(x >= -0x8000000000000000 && x <= 0x7FFFFFFFFFFFFFFF);\\n\\t\\t\\treturn int128(x << 64);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Convert signed 64.64 fixed point number into signed 64-bit integer number\\n\\t * rounding down.\\n\\t *\\n\\t * @param x signed 64.64-bit fixed point number\\n\\t * @return signed 64-bit integer number\\n\\t */\\n\\tfunction toInt(int128 x) internal pure returns (int64) {\\n\\t\\tunchecked {\\n\\t\\t\\treturn int64(x >> 64);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Convert unsigned 256-bit integer number into signed 64.64-bit fixed point\\n\\t * number.  Revert on overflow.\\n\\t *\\n\\t * @param x unsigned 256-bit integer number\\n\\t * @return signed 64.64-bit fixed point number\\n\\t */\\n\\tfunction fromUInt(uint256 x) internal pure returns (int128) {\\n\\t\\tunchecked {\\n\\t\\t\\trequire(x <= 0x7FFFFFFFFFFFFFFF);\\n\\t\\t\\treturn int128(int256(x << 64));\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Convert signed 64.64 fixed point number into unsigned 64-bit integer\\n\\t * number rounding down.  Revert on underflow.\\n\\t *\\n\\t * @param x signed 64.64-bit fixed point number\\n\\t * @return unsigned 64-bit integer number\\n\\t */\\n\\tfunction toUInt(int128 x) internal pure returns (uint64) {\\n\\t\\tunchecked {\\n\\t\\t\\trequire(x >= 0);\\n\\t\\t\\treturn uint64(uint128(x >> 64));\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Convert signed 128.128 fixed point number into signed 64.64-bit fixed point\\n\\t * number rounding down.  Revert on overflow.\\n\\t *\\n\\t * @param x signed 128.128-bin fixed point number\\n\\t * @return signed 64.64-bit fixed point number\\n\\t */\\n\\tfunction from128x128(int256 x) internal pure returns (int128) {\\n\\t\\tunchecked {\\n\\t\\t\\tint256 result = x >> 64;\\n\\t\\t\\trequire(result >= MIN_64x64 && result <= MAX_64x64);\\n\\t\\t\\treturn int128(result);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Convert signed 64.64 fixed point number into signed 128.128 fixed point\\n\\t * number.\\n\\t *\\n\\t * @param x signed 64.64-bit fixed point number\\n\\t * @return signed 128.128 fixed point number\\n\\t */\\n\\tfunction to128x128(int128 x) internal pure returns (int256) {\\n\\t\\tunchecked {\\n\\t\\t\\treturn int256(x) << 64;\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Calculate x + y.  Revert on overflow.\\n\\t *\\n\\t * @param x signed 64.64-bit fixed point number\\n\\t * @param y signed 64.64-bit fixed point number\\n\\t * @return signed 64.64-bit fixed point number\\n\\t */\\n\\tfunction add(int128 x, int128 y) internal pure returns (int128) {\\n\\t\\tunchecked {\\n\\t\\t\\tint256 result = int256(x) + y;\\n\\t\\t\\trequire(result >= MIN_64x64 && result <= MAX_64x64);\\n\\t\\t\\treturn int128(result);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Calculate x - y.  Revert on overflow.\\n\\t *\\n\\t * @param x signed 64.64-bit fixed point number\\n\\t * @param y signed 64.64-bit fixed point number\\n\\t * @return signed 64.64-bit fixed point number\\n\\t */\\n\\tfunction sub(int128 x, int128 y) internal pure returns (int128) {\\n\\t\\tunchecked {\\n\\t\\t\\tint256 result = int256(x) - y;\\n\\t\\t\\trequire(result >= MIN_64x64 && result <= MAX_64x64);\\n\\t\\t\\treturn int128(result);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Calculate x * y rounding down.  Revert on overflow.\\n\\t *\\n\\t * @param x signed 64.64-bit fixed point number\\n\\t * @param y signed 64.64-bit fixed point number\\n\\t * @return signed 64.64-bit fixed point number\\n\\t */\\n\\tfunction mul(int128 x, int128 y) internal pure returns (int128) {\\n\\t\\tunchecked {\\n\\t\\t\\tint256 result = (int256(x) * y) >> 64;\\n\\t\\t\\trequire(result >= MIN_64x64 && result <= MAX_64x64);\\n\\t\\t\\treturn int128(result);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Calculate x * y rounding towards zero, where x is signed 64.64 fixed point\\n\\t * number and y is signed 256-bit integer number.  Revert on overflow.\\n\\t *\\n\\t * @param x signed 64.64 fixed point number\\n\\t * @param y signed 256-bit integer number\\n\\t * @return signed 256-bit integer number\\n\\t */\\n\\tfunction muli(int128 x, int256 y) internal pure returns (int256) {\\n\\t\\tunchecked {\\n\\t\\t\\tif (x == MIN_64x64) {\\n\\t\\t\\t\\trequire(\\n\\t\\t\\t\\t\\ty >= -0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF &&\\n\\t\\t\\t\\t\\t\\ty <= 0x1000000000000000000000000000000000000000000000000\\n\\t\\t\\t\\t);\\n\\t\\t\\t\\treturn -y << 63;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tbool negativeResult = false;\\n\\t\\t\\t\\tif (x < 0) {\\n\\t\\t\\t\\t\\tx = -x;\\n\\t\\t\\t\\t\\tnegativeResult = true;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (y < 0) {\\n\\t\\t\\t\\t\\ty = -y; // We rely on overflow behavior here\\n\\t\\t\\t\\t\\tnegativeResult = !negativeResult;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tuint256 absoluteResult = mulu(x, uint256(y));\\n\\t\\t\\t\\tif (negativeResult) {\\n\\t\\t\\t\\t\\trequire(\\n\\t\\t\\t\\t\\t\\tabsoluteResult <=\\n\\t\\t\\t\\t\\t\\t\\t0x8000000000000000000000000000000000000000000000000000000000000000\\n\\t\\t\\t\\t\\t);\\n\\t\\t\\t\\t\\treturn -int256(absoluteResult); // We rely on overflow behavior here\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\trequire(\\n\\t\\t\\t\\t\\t\\tabsoluteResult <=\\n\\t\\t\\t\\t\\t\\t\\t0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n\\t\\t\\t\\t\\t);\\n\\t\\t\\t\\t\\treturn int256(absoluteResult);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Calculate x * y rounding down, where x is signed 64.64 fixed point number\\n\\t * and y is unsigned 256-bit integer number.  Revert on overflow.\\n\\t *\\n\\t * @param x signed 64.64 fixed point number\\n\\t * @param y unsigned 256-bit integer number\\n\\t * @return unsigned 256-bit integer number\\n\\t */\\n\\tfunction mulu(int128 x, uint256 y) internal pure returns (uint256) {\\n\\t\\tunchecked {\\n\\t\\t\\tif (y == 0) return 0;\\n\\n\\t\\t\\trequire(x >= 0);\\n\\n\\t\\t\\tuint256 lo = (uint256(int256(x)) *\\n\\t\\t\\t\\t(y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)) >> 64;\\n\\t\\t\\tuint256 hi = uint256(int256(x)) * (y >> 128);\\n\\n\\t\\t\\trequire(hi <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n\\t\\t\\thi <<= 64;\\n\\n\\t\\t\\trequire(\\n\\t\\t\\t\\thi <=\\n\\t\\t\\t\\t\\t0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF -\\n\\t\\t\\t\\t\\t\\tlo\\n\\t\\t\\t);\\n\\t\\t\\treturn hi + lo;\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Calculate x / y rounding towards zero.  Revert on overflow or when y is\\n\\t * zero.\\n\\t *\\n\\t * @param x signed 64.64-bit fixed point number\\n\\t * @param y signed 64.64-bit fixed point number\\n\\t * @return signed 64.64-bit fixed point number\\n\\t */\\n\\tfunction div(int128 x, int128 y) internal pure returns (int128) {\\n\\t\\tunchecked {\\n\\t\\t\\trequire(y != 0);\\n\\t\\t\\tint256 result = (int256(x) << 64) / y;\\n\\t\\t\\trequire(result >= MIN_64x64 && result <= MAX_64x64);\\n\\t\\t\\treturn int128(result);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Calculate x / y rounding towards zero, where x and y are signed 256-bit\\n\\t * integer numbers.  Revert on overflow or when y is zero.\\n\\t *\\n\\t * @param x signed 256-bit integer number\\n\\t * @param y signed 256-bit integer number\\n\\t * @return signed 64.64-bit fixed point number\\n\\t */\\n\\tfunction divi(int256 x, int256 y) internal pure returns (int128) {\\n\\t\\tunchecked {\\n\\t\\t\\trequire(y != 0);\\n\\n\\t\\t\\tbool negativeResult = false;\\n\\t\\t\\tif (x < 0) {\\n\\t\\t\\t\\tx = -x; // We rely on overflow behavior here\\n\\t\\t\\t\\tnegativeResult = true;\\n\\t\\t\\t}\\n\\t\\t\\tif (y < 0) {\\n\\t\\t\\t\\ty = -y; // We rely on overflow behavior here\\n\\t\\t\\t\\tnegativeResult = !negativeResult;\\n\\t\\t\\t}\\n\\t\\t\\tuint128 absoluteResult = divuu(uint256(x), uint256(y));\\n\\t\\t\\tif (negativeResult) {\\n\\t\\t\\t\\trequire(absoluteResult <= 0x80000000000000000000000000000000);\\n\\t\\t\\t\\treturn -int128(absoluteResult); // We rely on overflow behavior here\\n\\t\\t\\t} else {\\n\\t\\t\\t\\trequire(absoluteResult <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n\\t\\t\\t\\treturn int128(absoluteResult); // We rely on overflow behavior here\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\\n\\t * integer numbers.  Revert on overflow or when y is zero.\\n\\t *\\n\\t * @param x unsigned 256-bit integer number\\n\\t * @param y unsigned 256-bit integer number\\n\\t * @return signed 64.64-bit fixed point number\\n\\t */\\n\\tfunction divu(uint256 x, uint256 y) internal pure returns (int128) {\\n\\t\\tunchecked {\\n\\t\\t\\trequire(y != 0);\\n\\t\\t\\tuint128 result = divuu(x, y);\\n\\t\\t\\trequire(result <= uint128(MAX_64x64));\\n\\t\\t\\treturn int128(result);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Calculate -x.  Revert on overflow.\\n\\t *\\n\\t * @param x signed 64.64-bit fixed point number\\n\\t * @return signed 64.64-bit fixed point number\\n\\t */\\n\\tfunction neg(int128 x) internal pure returns (int128) {\\n\\t\\tunchecked {\\n\\t\\t\\trequire(x != MIN_64x64);\\n\\t\\t\\treturn -x;\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Calculate |x|.  Revert on overflow.\\n\\t *\\n\\t * @param x signed 64.64-bit fixed point number\\n\\t * @return signed 64.64-bit fixed point number\\n\\t */\\n\\tfunction abs(int128 x) internal pure returns (int128) {\\n\\t\\tunchecked {\\n\\t\\t\\trequire(x != MIN_64x64);\\n\\t\\t\\treturn x < 0 ? -x : x;\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Calculate 1 / x rounding towards zero.  Revert on overflow or when x is\\n\\t * zero.\\n\\t *\\n\\t * @param x signed 64.64-bit fixed point number\\n\\t * @return signed 64.64-bit fixed point number\\n\\t */\\n\\tfunction inv(int128 x) internal pure returns (int128) {\\n\\t\\tunchecked {\\n\\t\\t\\trequire(x != 0);\\n\\t\\t\\tint256 result = int256(0x100000000000000000000000000000000) / x;\\n\\t\\t\\trequire(result >= MIN_64x64 && result <= MAX_64x64);\\n\\t\\t\\treturn int128(result);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Calculate arithmetics average of x and y, i.e. (x + y) / 2 rounding down.\\n\\t *\\n\\t * @param x signed 64.64-bit fixed point number\\n\\t * @param y signed 64.64-bit fixed point number\\n\\t * @return signed 64.64-bit fixed point number\\n\\t */\\n\\tfunction avg(int128 x, int128 y) internal pure returns (int128) {\\n\\t\\tunchecked {\\n\\t\\t\\treturn int128((int256(x) + int256(y)) >> 1);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Calculate geometric average of x and y, i.e. sqrt (x * y) rounding down.\\n\\t * Revert on overflow or in case x * y is negative.\\n\\t *\\n\\t * @param x signed 64.64-bit fixed point number\\n\\t * @param y signed 64.64-bit fixed point number\\n\\t * @return signed 64.64-bit fixed point number\\n\\t */\\n\\tfunction gavg(int128 x, int128 y) internal pure returns (int128) {\\n\\t\\tunchecked {\\n\\t\\t\\tint256 m = int256(x) * int256(y);\\n\\t\\t\\trequire(m >= 0);\\n\\t\\t\\trequire(\\n\\t\\t\\t\\tm <\\n\\t\\t\\t\\t\\t0x4000000000000000000000000000000000000000000000000000000000000000\\n\\t\\t\\t);\\n\\t\\t\\treturn int128(sqrtu(uint256(m)));\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Calculate x^y assuming 0^0 is 1, where x is signed 64.64 fixed point number\\n\\t * and y is unsigned 256-bit integer number.  Revert on overflow.\\n\\t *\\n\\t * @param x signed 64.64-bit fixed point number\\n\\t * @param y uint256 value\\n\\t * @return signed 64.64-bit fixed point number\\n\\t */\\n\\tfunction pow(int128 x, uint256 y) internal pure returns (int128) {\\n\\t\\tunchecked {\\n\\t\\t\\tbool negative = x < 0 && y & 1 == 1;\\n\\n\\t\\t\\tuint256 absX = uint128(x < 0 ? -x : x);\\n\\t\\t\\tuint256 absResult;\\n\\t\\t\\tabsResult = 0x100000000000000000000000000000000;\\n\\n\\t\\t\\tif (absX <= 0x10000000000000000) {\\n\\t\\t\\t\\tabsX <<= 63;\\n\\t\\t\\t\\twhile (y != 0) {\\n\\t\\t\\t\\t\\tif (y & 0x1 != 0) {\\n\\t\\t\\t\\t\\t\\tabsResult = (absResult * absX) >> 127;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tabsX = (absX * absX) >> 127;\\n\\n\\t\\t\\t\\t\\tif (y & 0x2 != 0) {\\n\\t\\t\\t\\t\\t\\tabsResult = (absResult * absX) >> 127;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tabsX = (absX * absX) >> 127;\\n\\n\\t\\t\\t\\t\\tif (y & 0x4 != 0) {\\n\\t\\t\\t\\t\\t\\tabsResult = (absResult * absX) >> 127;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tabsX = (absX * absX) >> 127;\\n\\n\\t\\t\\t\\t\\tif (y & 0x8 != 0) {\\n\\t\\t\\t\\t\\t\\tabsResult = (absResult * absX) >> 127;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tabsX = (absX * absX) >> 127;\\n\\n\\t\\t\\t\\t\\ty >>= 4;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tabsResult >>= 64;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tuint256 absXShift = 63;\\n\\t\\t\\t\\tif (absX < 0x1000000000000000000000000) {\\n\\t\\t\\t\\t\\tabsX <<= 32;\\n\\t\\t\\t\\t\\tabsXShift -= 32;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (absX < 0x10000000000000000000000000000) {\\n\\t\\t\\t\\t\\tabsX <<= 16;\\n\\t\\t\\t\\t\\tabsXShift -= 16;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (absX < 0x1000000000000000000000000000000) {\\n\\t\\t\\t\\t\\tabsX <<= 8;\\n\\t\\t\\t\\t\\tabsXShift -= 8;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (absX < 0x10000000000000000000000000000000) {\\n\\t\\t\\t\\t\\tabsX <<= 4;\\n\\t\\t\\t\\t\\tabsXShift -= 4;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (absX < 0x40000000000000000000000000000000) {\\n\\t\\t\\t\\t\\tabsX <<= 2;\\n\\t\\t\\t\\t\\tabsXShift -= 2;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (absX < 0x80000000000000000000000000000000) {\\n\\t\\t\\t\\t\\tabsX <<= 1;\\n\\t\\t\\t\\t\\tabsXShift -= 1;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tuint256 resultShift = 0;\\n\\t\\t\\t\\twhile (y != 0) {\\n\\t\\t\\t\\t\\trequire(absXShift < 64);\\n\\n\\t\\t\\t\\t\\tif (y & 0x1 != 0) {\\n\\t\\t\\t\\t\\t\\tabsResult = (absResult * absX) >> 127;\\n\\t\\t\\t\\t\\t\\tresultShift += absXShift;\\n\\t\\t\\t\\t\\t\\tif (absResult > 0x100000000000000000000000000000000) {\\n\\t\\t\\t\\t\\t\\t\\tabsResult >>= 1;\\n\\t\\t\\t\\t\\t\\t\\tresultShift += 1;\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tabsX = (absX * absX) >> 127;\\n\\t\\t\\t\\t\\tabsXShift <<= 1;\\n\\t\\t\\t\\t\\tif (absX >= 0x100000000000000000000000000000000) {\\n\\t\\t\\t\\t\\t\\tabsX >>= 1;\\n\\t\\t\\t\\t\\t\\tabsXShift += 1;\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\ty >>= 1;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\trequire(resultShift < 64);\\n\\t\\t\\t\\tabsResult >>= 64 - resultShift;\\n\\t\\t\\t}\\n\\t\\t\\tint256 result = negative ? -int256(absResult) : int256(absResult);\\n\\t\\t\\trequire(result >= MIN_64x64 && result <= MAX_64x64);\\n\\t\\t\\treturn int128(result);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Calculate sqrt (x) rounding down.  Revert if x < 0.\\n\\t *\\n\\t * @param x signed 64.64-bit fixed point number\\n\\t * @return signed 64.64-bit fixed point number\\n\\t */\\n\\tfunction sqrt(int128 x) internal pure returns (int128) {\\n\\t\\tunchecked {\\n\\t\\t\\trequire(x >= 0);\\n\\t\\t\\treturn int128(sqrtu(uint256(int256(x)) << 64));\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Calculate binary logarithm of x.  Revert if x <= 0.\\n\\t *\\n\\t * @param x signed 64.64-bit fixed point number\\n\\t * @return signed 64.64-bit fixed point number\\n\\t */\\n\\tfunction log_2(int128 x) internal pure returns (int128) {\\n\\t\\tunchecked {\\n\\t\\t\\trequire(x > 0);\\n\\n\\t\\t\\tint256 msb = 0;\\n\\t\\t\\tint256 xc = x;\\n\\t\\t\\tif (xc >= 0x10000000000000000) {\\n\\t\\t\\t\\txc >>= 64;\\n\\t\\t\\t\\tmsb += 64;\\n\\t\\t\\t}\\n\\t\\t\\tif (xc >= 0x100000000) {\\n\\t\\t\\t\\txc >>= 32;\\n\\t\\t\\t\\tmsb += 32;\\n\\t\\t\\t}\\n\\t\\t\\tif (xc >= 0x10000) {\\n\\t\\t\\t\\txc >>= 16;\\n\\t\\t\\t\\tmsb += 16;\\n\\t\\t\\t}\\n\\t\\t\\tif (xc >= 0x100) {\\n\\t\\t\\t\\txc >>= 8;\\n\\t\\t\\t\\tmsb += 8;\\n\\t\\t\\t}\\n\\t\\t\\tif (xc >= 0x10) {\\n\\t\\t\\t\\txc >>= 4;\\n\\t\\t\\t\\tmsb += 4;\\n\\t\\t\\t}\\n\\t\\t\\tif (xc >= 0x4) {\\n\\t\\t\\t\\txc >>= 2;\\n\\t\\t\\t\\tmsb += 2;\\n\\t\\t\\t}\\n\\t\\t\\tif (xc >= 0x2) msb += 1; // No need to shift xc anymore\\n\\n\\t\\t\\tint256 result = (msb - 64) << 64;\\n\\t\\t\\tuint256 ux = uint256(int256(x)) << uint256(127 - msb);\\n\\t\\t\\tfor (int256 bit = 0x8000000000000000; bit > 0; bit >>= 1) {\\n\\t\\t\\t\\tux *= ux;\\n\\t\\t\\t\\tuint256 b = ux >> 255;\\n\\t\\t\\t\\tux >>= 127 + b;\\n\\t\\t\\t\\tresult += bit * int256(b);\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn int128(result);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Calculate natural logarithm of x.  Revert if x <= 0.\\n\\t *\\n\\t * @param x signed 64.64-bit fixed point number\\n\\t * @return signed 64.64-bit fixed point number\\n\\t */\\n\\tfunction ln(int128 x) internal pure returns (int128) {\\n\\t\\tunchecked {\\n\\t\\t\\trequire(x > 0);\\n\\n\\t\\t\\treturn\\n\\t\\t\\t\\tint128(\\n\\t\\t\\t\\t\\tint256(\\n\\t\\t\\t\\t\\t\\t(uint256(int256(log_2(x))) *\\n\\t\\t\\t\\t\\t\\t\\t0xB17217F7D1CF79ABC9E3B39803F2F6AF) >> 128\\n\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Calculate binary exponent of x.  Revert on overflow.\\n\\t *\\n\\t * @param x signed 64.64-bit fixed point number\\n\\t * @return signed 64.64-bit fixed point number\\n\\t */\\n\\tfunction exp_2(int128 x) internal pure returns (int128) {\\n\\t\\tunchecked {\\n\\t\\t\\trequire(x < 0x400000000000000000); // Overflow\\n\\n\\t\\t\\tif (x < -0x400000000000000000) return 0; // Underflow\\n\\n\\t\\t\\tuint256 result = 0x80000000000000000000000000000000;\\n\\n\\t\\t\\tif (x & 0x8000000000000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x16A09E667F3BCC908B2FB1366EA957D3E) >> 128;\\n\\t\\t\\tif (x & 0x4000000000000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x1306FE0A31B7152DE8D5A46305C85EDEC) >> 128;\\n\\t\\t\\tif (x & 0x2000000000000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x1172B83C7D517ADCDF7C8C50EB14A791F) >> 128;\\n\\t\\t\\tif (x & 0x1000000000000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x10B5586CF9890F6298B92B71842A98363) >> 128;\\n\\t\\t\\tif (x & 0x800000000000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x1059B0D31585743AE7C548EB68CA417FD) >> 128;\\n\\t\\t\\tif (x & 0x400000000000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x102C9A3E778060EE6F7CACA4F7A29BDE8) >> 128;\\n\\t\\t\\tif (x & 0x200000000000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x10163DA9FB33356D84A66AE336DCDFA3F) >> 128;\\n\\t\\t\\tif (x & 0x100000000000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x100B1AFA5ABCBED6129AB13EC11DC9543) >> 128;\\n\\t\\t\\tif (x & 0x80000000000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x10058C86DA1C09EA1FF19D294CF2F679B) >> 128;\\n\\t\\t\\tif (x & 0x40000000000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x1002C605E2E8CEC506D21BFC89A23A00F) >> 128;\\n\\t\\t\\tif (x & 0x20000000000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x100162F3904051FA128BCA9C55C31E5DF) >> 128;\\n\\t\\t\\tif (x & 0x10000000000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x1000B175EFFDC76BA38E31671CA939725) >> 128;\\n\\t\\t\\tif (x & 0x8000000000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x100058BA01FB9F96D6CACD4B180917C3D) >> 128;\\n\\t\\t\\tif (x & 0x4000000000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x10002C5CC37DA9491D0985C348C68E7B3) >> 128;\\n\\t\\t\\tif (x & 0x2000000000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x1000162E525EE054754457D5995292026) >> 128;\\n\\t\\t\\tif (x & 0x1000000000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x10000B17255775C040618BF4A4ADE83FC) >> 128;\\n\\t\\t\\tif (x & 0x800000000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x1000058B91B5BC9AE2EED81E9B7D4CFAB) >> 128;\\n\\t\\t\\tif (x & 0x400000000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x100002C5C89D5EC6CA4D7C8ACC017B7C9) >> 128;\\n\\t\\t\\tif (x & 0x200000000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x10000162E43F4F831060E02D839A9D16D) >> 128;\\n\\t\\t\\tif (x & 0x100000000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x100000B1721BCFC99D9F890EA06911763) >> 128;\\n\\t\\t\\tif (x & 0x80000000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x10000058B90CF1E6D97F9CA14DBCC1628) >> 128;\\n\\t\\t\\tif (x & 0x40000000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x1000002C5C863B73F016468F6BAC5CA2B) >> 128;\\n\\t\\t\\tif (x & 0x20000000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x100000162E430E5A18F6119E3C02282A5) >> 128;\\n\\t\\t\\tif (x & 0x10000000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x1000000B1721835514B86E6D96EFD1BFE) >> 128;\\n\\t\\t\\tif (x & 0x8000000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x100000058B90C0B48C6BE5DF846C5B2EF) >> 128;\\n\\t\\t\\tif (x & 0x4000000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x10000002C5C8601CC6B9E94213C72737A) >> 128;\\n\\t\\t\\tif (x & 0x2000000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x1000000162E42FFF037DF38AA2B219F06) >> 128;\\n\\t\\t\\tif (x & 0x1000000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x10000000B17217FBA9C739AA5819F44F9) >> 128;\\n\\t\\t\\tif (x & 0x800000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x1000000058B90BFCDEE5ACD3C1CEDC823) >> 128;\\n\\t\\t\\tif (x & 0x400000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x100000002C5C85FE31F35A6A30DA1BE50) >> 128;\\n\\t\\t\\tif (x & 0x200000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x10000000162E42FF0999CE3541B9FFFCF) >> 128;\\n\\t\\t\\tif (x & 0x100000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x100000000B17217F80F4EF5AADDA45554) >> 128;\\n\\t\\t\\tif (x & 0x80000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x10000000058B90BFBF8479BD5A81B51AD) >> 128;\\n\\t\\t\\tif (x & 0x40000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x1000000002C5C85FDF84BD62AE30A74CC) >> 128;\\n\\t\\t\\tif (x & 0x20000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x100000000162E42FEFB2FED257559BDAA) >> 128;\\n\\t\\t\\tif (x & 0x10000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x1000000000B17217F7D5A7716BBA4A9AE) >> 128;\\n\\t\\t\\tif (x & 0x8000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x100000000058B90BFBE9DDBAC5E109CCE) >> 128;\\n\\t\\t\\tif (x & 0x4000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x10000000002C5C85FDF4B15DE6F17EB0D) >> 128;\\n\\t\\t\\tif (x & 0x2000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x1000000000162E42FEFA494F1478FDE05) >> 128;\\n\\t\\t\\tif (x & 0x1000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x10000000000B17217F7D20CF927C8E94C) >> 128;\\n\\t\\t\\tif (x & 0x800000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x1000000000058B90BFBE8F71CB4E4B33D) >> 128;\\n\\t\\t\\tif (x & 0x400000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x100000000002C5C85FDF477B662B26945) >> 128;\\n\\t\\t\\tif (x & 0x200000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x10000000000162E42FEFA3AE53369388C) >> 128;\\n\\t\\t\\tif (x & 0x100000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x100000000000B17217F7D1D351A389D40) >> 128;\\n\\t\\t\\tif (x & 0x80000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x10000000000058B90BFBE8E8B2D3D4EDE) >> 128;\\n\\t\\t\\tif (x & 0x40000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x1000000000002C5C85FDF4741BEA6E77E) >> 128;\\n\\t\\t\\tif (x & 0x20000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x100000000000162E42FEFA39FE95583C2) >> 128;\\n\\t\\t\\tif (x & 0x10000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x1000000000000B17217F7D1CFB72B45E1) >> 128;\\n\\t\\t\\tif (x & 0x8000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x100000000000058B90BFBE8E7CC35C3F0) >> 128;\\n\\t\\t\\tif (x & 0x4000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x10000000000002C5C85FDF473E242EA38) >> 128;\\n\\t\\t\\tif (x & 0x2000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x1000000000000162E42FEFA39F02B772C) >> 128;\\n\\t\\t\\tif (x & 0x1000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x10000000000000B17217F7D1CF7D83C1A) >> 128;\\n\\t\\t\\tif (x & 0x800 > 0)\\n\\t\\t\\t\\tresult = (result * 0x1000000000000058B90BFBE8E7BDCBE2E) >> 128;\\n\\t\\t\\tif (x & 0x400 > 0)\\n\\t\\t\\t\\tresult = (result * 0x100000000000002C5C85FDF473DEA871F) >> 128;\\n\\t\\t\\tif (x & 0x200 > 0)\\n\\t\\t\\t\\tresult = (result * 0x10000000000000162E42FEFA39EF44D91) >> 128;\\n\\t\\t\\tif (x & 0x100 > 0)\\n\\t\\t\\t\\tresult = (result * 0x100000000000000B17217F7D1CF79E949) >> 128;\\n\\t\\t\\tif (x & 0x80 > 0)\\n\\t\\t\\t\\tresult = (result * 0x10000000000000058B90BFBE8E7BCE544) >> 128;\\n\\t\\t\\tif (x & 0x40 > 0)\\n\\t\\t\\t\\tresult = (result * 0x1000000000000002C5C85FDF473DE6ECA) >> 128;\\n\\t\\t\\tif (x & 0x20 > 0)\\n\\t\\t\\t\\tresult = (result * 0x100000000000000162E42FEFA39EF366F) >> 128;\\n\\t\\t\\tif (x & 0x10 > 0)\\n\\t\\t\\t\\tresult = (result * 0x1000000000000000B17217F7D1CF79AFA) >> 128;\\n\\t\\t\\tif (x & 0x8 > 0)\\n\\t\\t\\t\\tresult = (result * 0x100000000000000058B90BFBE8E7BCD6D) >> 128;\\n\\t\\t\\tif (x & 0x4 > 0)\\n\\t\\t\\t\\tresult = (result * 0x10000000000000002C5C85FDF473DE6B2) >> 128;\\n\\t\\t\\tif (x & 0x2 > 0)\\n\\t\\t\\t\\tresult = (result * 0x1000000000000000162E42FEFA39EF358) >> 128;\\n\\t\\t\\tif (x & 0x1 > 0)\\n\\t\\t\\t\\tresult = (result * 0x10000000000000000B17217F7D1CF79AB) >> 128;\\n\\n\\t\\t\\tresult >>= uint256(int256(63 - (x >> 64)));\\n\\t\\t\\trequire(result <= uint256(int256(MAX_64x64)));\\n\\n\\t\\t\\treturn int128(int256(result));\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Calculate natural exponent of x.  Revert on overflow.\\n\\t *\\n\\t * @param x signed 64.64-bit fixed point number\\n\\t * @return signed 64.64-bit fixed point number\\n\\t */\\n\\tfunction exp(int128 x) internal pure returns (int128) {\\n\\t\\tunchecked {\\n\\t\\t\\trequire(x < 0x400000000000000000); // Overflow\\n\\n\\t\\t\\tif (x < -0x400000000000000000) return 0; // Underflow\\n\\n\\t\\t\\treturn\\n\\t\\t\\t\\texp_2(\\n\\t\\t\\t\\t\\tint128(\\n\\t\\t\\t\\t\\t\\t(int256(x) * 0x171547652B82FE1777D0FFDA0D23A7D12) >> 128\\n\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\\n\\t * integer numbers.  Revert on overflow or when y is zero.\\n\\t *\\n\\t * @param x unsigned 256-bit integer number\\n\\t * @param y unsigned 256-bit integer number\\n\\t * @return unsigned 64.64-bit fixed point number\\n\\t */\\n\\tfunction divuu(uint256 x, uint256 y) private pure returns (uint128) {\\n\\t\\tunchecked {\\n\\t\\t\\trequire(y != 0);\\n\\n\\t\\t\\tuint256 result;\\n\\n\\t\\t\\tif (x <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\\n\\t\\t\\t\\tresult = (x << 64) / y;\\n\\t\\t\\telse {\\n\\t\\t\\t\\tuint256 msb = 192;\\n\\t\\t\\t\\tuint256 xc = x >> 192;\\n\\t\\t\\t\\tif (xc >= 0x100000000) {\\n\\t\\t\\t\\t\\txc >>= 32;\\n\\t\\t\\t\\t\\tmsb += 32;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (xc >= 0x10000) {\\n\\t\\t\\t\\t\\txc >>= 16;\\n\\t\\t\\t\\t\\tmsb += 16;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (xc >= 0x100) {\\n\\t\\t\\t\\t\\txc >>= 8;\\n\\t\\t\\t\\t\\tmsb += 8;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (xc >= 0x10) {\\n\\t\\t\\t\\t\\txc >>= 4;\\n\\t\\t\\t\\t\\tmsb += 4;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (xc >= 0x4) {\\n\\t\\t\\t\\t\\txc >>= 2;\\n\\t\\t\\t\\t\\tmsb += 2;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (xc >= 0x2) msb += 1; // No need to shift xc anymore\\n\\n\\t\\t\\t\\tresult = (x << (255 - msb)) / (((y - 1) >> (msb - 191)) + 1);\\n\\t\\t\\t\\trequire(result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n\\n\\t\\t\\t\\tuint256 hi = result * (y >> 128);\\n\\t\\t\\t\\tuint256 lo = result * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n\\n\\t\\t\\t\\tuint256 xh = x >> 192;\\n\\t\\t\\t\\tuint256 xl = x << 64;\\n\\n\\t\\t\\t\\tif (xl < lo) xh -= 1;\\n\\t\\t\\t\\txl -= lo; // We rely on overflow behavior here\\n\\t\\t\\t\\tlo = hi << 128;\\n\\t\\t\\t\\tif (xl < lo) xh -= 1;\\n\\t\\t\\t\\txl -= lo; // We rely on overflow behavior here\\n\\n\\t\\t\\t\\tassert(xh == hi >> 128);\\n\\n\\t\\t\\t\\tresult += xl / y;\\n\\t\\t\\t}\\n\\n\\t\\t\\trequire(result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n\\t\\t\\treturn uint128(result);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Calculate sqrt (x) rounding down, where x is unsigned 256-bit integer\\n\\t * number.\\n\\t *\\n\\t * @param x unsigned 256-bit integer number\\n\\t * @return unsigned 128-bit integer number\\n\\t */\\n\\tfunction sqrtu(uint256 x) private pure returns (uint128) {\\n\\t\\tunchecked {\\n\\t\\t\\tif (x == 0) return 0;\\n\\t\\t\\telse {\\n\\t\\t\\t\\tuint256 xx = x;\\n\\t\\t\\t\\tuint256 r = 1;\\n\\t\\t\\t\\tif (xx >= 0x100000000000000000000000000000000) {\\n\\t\\t\\t\\t\\txx >>= 128;\\n\\t\\t\\t\\t\\tr <<= 64;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (xx >= 0x10000000000000000) {\\n\\t\\t\\t\\t\\txx >>= 64;\\n\\t\\t\\t\\t\\tr <<= 32;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (xx >= 0x100000000) {\\n\\t\\t\\t\\t\\txx >>= 32;\\n\\t\\t\\t\\t\\tr <<= 16;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (xx >= 0x10000) {\\n\\t\\t\\t\\t\\txx >>= 16;\\n\\t\\t\\t\\t\\tr <<= 8;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (xx >= 0x100) {\\n\\t\\t\\t\\t\\txx >>= 8;\\n\\t\\t\\t\\t\\tr <<= 4;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (xx >= 0x10) {\\n\\t\\t\\t\\t\\txx >>= 4;\\n\\t\\t\\t\\t\\tr <<= 2;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (xx >= 0x8) {\\n\\t\\t\\t\\t\\tr <<= 1;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tr = (r + x / r) >> 1;\\n\\t\\t\\t\\tr = (r + x / r) >> 1;\\n\\t\\t\\t\\tr = (r + x / r) >> 1;\\n\\t\\t\\t\\tr = (r + x / r) >> 1;\\n\\t\\t\\t\\tr = (r + x / r) >> 1;\\n\\t\\t\\t\\tr = (r + x / r) >> 1;\\n\\t\\t\\t\\tr = (r + x / r) >> 1; // Seven iterations should be enough\\n\\t\\t\\t\\tuint256 r1 = x / r;\\n\\t\\t\\t\\treturn uint128(r < r1 ? r : r1);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assimilator\",\"type\":\"address\"}],\"name\":\"AssimilatorRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"curveFactory\",\"type\":\"address\"}],\"name\":\"CurveFactoryUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assimilator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"NewAssimilator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"assimilators\",\"outputs\":[{\"internalType\":\"contract AssimilatorV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curveFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getAssimilator\",\"outputs\":[{\"internalType\":\"contract AssimilatorV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IOracle\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenDecimals\",\"type\":\"uint256\"}],\"name\":\"newAssimilator\",\"outputs\":[{\"internalType\":\"contract AssimilatorV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"revokeAssimilator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_curveFactory\",\"type\":\"address\"}],\"name\":\"setCurveFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AssimilatorFactory", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}