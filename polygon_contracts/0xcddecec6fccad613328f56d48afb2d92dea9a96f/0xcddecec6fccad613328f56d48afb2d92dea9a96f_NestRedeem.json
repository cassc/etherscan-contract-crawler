{"SourceCode": "// File: OpenZeppelin/Context.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n// File: OpenZeppelin/Ownable.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n// File: OpenZeppelin/Address.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n// File: Interfaces/IERC20.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n// File: OpenZeppelin/SafeERC20.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n// File: Interfaces/IPie.sol\r\n\r\npragma solidity 0.8.1;\r\n\r\n\r\ninterface IPie is IERC20 {\r\n    function joinPool(uint256 _amount) external;\r\n    function exitPool(uint256 _amount) external;\r\n    function calcTokensForAmount(uint256 _amount) external view  returns(address[] memory tokens, uint256[] memory amounts);\r\n}\r\n// File: Interfaces/ILendingRegistry.sol\r\n\r\npragma solidity 0.8.1;\r\n\r\ninterface ILendingRegistry {\r\n    // Maps wrapped token to protocol\r\n    function wrappedToProtocol(address _wrapped) external view returns(bytes32);\r\n    // Maps wrapped token to underlying\r\n    function wrappedToUnderlying(address _wrapped) external view returns(address);\r\n    function underlyingToProtocolWrapped(address _underlying, bytes32 protocol) external view returns (address);\r\n    function protocolToLogic(bytes32 _protocol) external view returns (address);\r\n\r\n    /**\r\n        @notice Set which protocl a wrapped token belongs to\r\n        @param _wrapped Address of the wrapped token\r\n        @param _protocol Bytes32 key of the protocol\r\n    */\r\n    function setWrappedToProtocol(address _wrapped, bytes32 _protocol) external;\r\n\r\n    /**\r\n        @notice Set what is the underlying for a wrapped token\r\n        @param _wrapped Address of the wrapped token\r\n        @param _underlying Address of the underlying token\r\n    */\r\n    function setWrappedToUnderlying(address _wrapped, address _underlying) external;\r\n\r\n    /**\r\n        @notice Set the logic contract for the protocol\r\n        @param _protocol Bytes32 key of the procol\r\n        @param _logic Address of the lending logic contract for that protocol\r\n    */\r\n    function setProtocolToLogic(bytes32 _protocol, address _logic) external;\r\n    /**\r\n        @notice Set the wrapped token for the underlying deposited in this protocol\r\n        @param _underlying Address of the unerlying token\r\n        @param _protocol Bytes32 key of the protocol\r\n        @param _wrapped Address of the wrapped token\r\n    */\r\n    function setUnderlyingToProtocolWrapped(address _underlying, bytes32 _protocol, address _wrapped) external;\r\n\r\n    /**\r\n        @notice Get tx data to lend the underlying amount in a specific protocol\r\n        @param _underlying Address of the underlying token\r\n        @param _amount Amount to lend\r\n        @param _protocol Bytes32 key of the protocol\r\n        @return targets Addresses of the contracts to call\r\n        @return data Calldata for the calls\r\n    */\r\n    function getLendTXData(address _underlying, uint256 _amount, bytes32 _protocol) external view returns(address[] memory targets, bytes[] memory data);\r\n\r\n    /**\r\n        @notice Get the tx data to unlend the wrapped amount\r\n        @param _wrapped Address of the wrapped token\r\n        @param _amount Amount of wrapped token to unlend\r\n        @return targets Addresses of the contracts to call\r\n        @return data Calldata for the calls\r\n    */\r\n    function getUnlendTXData(address _wrapped, uint256 _amount, address _tokenHolder) external view returns(address[] memory targets, bytes[] memory data);\r\n}\r\n// File: Interfaces/ILendingLogic.sol\r\n\r\npragma solidity ^0.8.1;\r\n\r\ninterface ILendingLogic {\r\n    /**\r\n        @notice Get the APR based on underlying token.\r\n        @param _token Address of the underlying token\r\n        @return Interest with 18 decimals\r\n    */\r\n    function getAPRFromUnderlying(address _token) external view returns(uint256);\r\n\r\n    /**\r\n        @notice Get the APR based on wrapped token.\r\n        @param _token Address of the wrapped token\r\n        @return Interest with 18 decimals\r\n    */\r\n    function getAPRFromWrapped(address _token) external view returns(uint256);\r\n\r\n    /**\r\n        @notice Get the calls needed to lend.\r\n        @param _underlying Address of the underlying token\r\n        @param _amount Amount of the underlying token\r\n        @return targets Addresses of the contracts to call\r\n        @return data Calldata of the calls\r\n    */\r\n    function lend(address _underlying, uint256 _amount, address _tokenHolder) external view returns(address[] memory targets, bytes[] memory data);\r\n\r\n    /**\r\n        @notice Get the calls needed to unlend\r\n        @param _wrapped Address of the wrapped token\r\n        @param _amount Amount of the underlying tokens\r\n        @return targets Addresses of the contracts to call\r\n        @return data Calldata of the calls\r\n    */\r\n    function unlend(address _wrapped, uint256 _amount, address _tokenHolder) external view returns(address[] memory targets, bytes[] memory data);\r\n\r\n    /**\r\n        @notice Get the underlying wrapped exchange rate\r\n        @param _wrapped Address of the wrapped token\r\n        @return The exchange rate\r\n    */\r\n    function exchangeRate(address _wrapped) external returns(uint256);\r\n\r\n    /**\r\n        @notice Get the underlying wrapped exchange rate in a view (non state changing) way\r\n        @param _wrapped Address of the wrapped token\r\n        @return The exchange rate\r\n    */\r\n    function exchangeRateView(address _wrapped) external view returns(uint256);\r\n}\r\n// File: Interfaces/IUniRouter.sol\r\n\r\npragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniRouter is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n// File: Interfaces/IUniV3Router.sol\r\n\r\npragma solidity ^0.8.1;\r\n\r\ninterface uniV3Router {\r\n\r\n    struct ExactInputSingleParams {\r\n        address tokenIn;\r\n        address tokenOut;\r\n        uint24 fee;\r\n        address recipient;\r\n        uint256 deadline;\r\n        uint256 amountIn;\r\n        uint256 amountOutMinimum;\r\n        uint160 sqrtPriceLimitX96;\r\n    }\r\n\r\n    struct ExactOutputSingleParams {\r\n        address tokenIn;\r\n        address tokenOut;\r\n        uint24 fee;\r\n        address recipient;\r\n        uint256 deadline;\r\n        uint256 amountOut;\r\n        uint256 amountInMaximum;\r\n        uint160 sqrtPriceLimitX96;\r\n    }\r\n\r\n    struct ExactInputParams {\r\n        bytes path;\r\n        address recipient;\r\n        uint256 deadline;\r\n        uint256 amountIn;\r\n        uint256 amountOutMinimum;\r\n    }\r\n\r\n    struct ExactOutputParams {\r\n        bytes path;\r\n        address recipient;\r\n        uint256 deadline;\r\n        uint256 amountOut;\r\n        uint256 amountInMaximum;\r\n    }\r\n\r\n    function exactInputSingle(ExactInputSingleParams memory params) external returns (uint256 amountOut);\r\n\r\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external;\r\n\r\n    function exactOutput(ExactOutputParams memory params) external returns (uint256 amountIn);\r\n}\r\n\r\ninterface uniOracle {\r\n   function quoteExactOutputSingle(\r\n    address tokenIn,\r\n    address tokenOut,\r\n    uint24 fee,\r\n    uint256 amountOut,\r\n    uint160 sqrtPriceLimitX96\r\n  ) external returns (uint256 amountIn);\r\n\r\n  function quoteExactInputSingle(\r\n    address tokenIn,\r\n    address tokenOut,\r\n    uint24 fee,\r\n    uint256 amountIn,\r\n    uint160 sqrtPriceLimitX96\r\n  ) external returns (uint256 amountOut);\r\n}\r\n\r\n// File: Interfaces/IRecipe.sol\r\n\r\npragma solidity 0.8.1;\r\n\r\ninterface IRecipe {\r\n    function bake(\r\n        address _inputToken,\r\n        address _outputToken,\r\n        uint256 _maxInput,\r\n        bytes memory _data\r\n    ) external returns (uint256 inputAmountUsed, uint256 outputAmount);\r\n}\r\n// File: Interfaces/IBalancer.sol\r\n\r\n\r\npragma solidity ^0.8.1;\r\n\r\ninterface IBalancer{\r\n    enum SwapKind { GIVEN_IN, GIVEN_OUT }\r\n\r\n    struct BatchSwapStep {\r\n        bytes32 poolId;\r\n        uint256 assetInIndex;\r\n        uint256 assetOutIndex;\r\n        uint256 amount;\r\n        bytes userData;\r\n    }\r\n\r\n    //Balancer params\r\n    struct SingleSwap {\r\n        bytes32 poolId;\r\n        SwapKind kind;\r\n        address assetIn;\r\n        address assetOut;\r\n        uint256 amount;\r\n        bytes userData;\r\n    }\r\n\r\n    struct FundManagement {\r\n        address sender;\r\n        bool fromInternalBalance;\r\n        address payable recipient;\r\n        bool toInternalBalance;\r\n    }\r\n\r\n    function swap(\r\n        SingleSwap memory singleSwap,\r\n        FundManagement memory funds,\r\n        uint256 limit,\r\n        uint256 deadline\r\n    ) external payable returns (uint256);\r\n\r\n    function queryBatchSwap(\r\n        SwapKind kind,\r\n        BatchSwapStep[] memory swaps,\r\n        address[] memory assets,\r\n        FundManagement memory funds\r\n    ) external returns (int256[] memory assetDeltas);\r\n}\r\n// File: wETHRedeemer.sol\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\npragma solidity 0.8.1;\r\n\r\ncontract NestRedeem is Ownable {\r\n    using SafeERC20 for IERC20;\r\n\r\n    //Failing to query a price is expensive,\r\n    //so we save info about the DEX state to prevent querying the price if it is not viable\r\n    mapping(address => bytes32) balancerViable;\r\n    mapping(address => uint16) uniFee;\r\n\r\n    // Adds a custom hop before reaching the destination token\r\n    mapping(address => address) public customHops;\r\n\r\n    struct BestPrice{\r\n        uint price;\r\n        uint ammIndex;\r\n    }\r\n\r\n    IBalancer balancer = IBalancer(0xBA12222222228d8Ba445958a75a0704d566BF2C8);\r\n    uniOracle oracle = uniOracle(0xb27308f9F90D607463bb33eA1BeBb41C27CE5AB6);\r\n    uniV3Router uniRouter = uniV3Router(0xE592427A0AEce92De3Edee1F18E0157C05861564);\r\n    IUniRouter sushiRouter = IUniRouter(0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506);\r\n    IUniRouter quickRouter = IUniRouter(0xa5E0829CaCEd8fFDD4De3c43696c57F7D7A678ff);\r\n\r\n    IERC20 immutable WETH;\r\n    ILendingRegistry immutable lendingRegistry;\r\n\r\n    constructor(address _weth, address _lendingRegistry) {\r\n        WETH = IERC20(_weth);\r\n        lendingRegistry = ILendingRegistry(_lendingRegistry);\r\n    }\r\n\r\n    function redeemNestToWeth(address _nestAddress, uint256 _nestAmount) external {\r\n        require(_nestAmount >= 1e2, \"Min nest amount: 0.01\");\r\n\r\n        IPie pie = IPie(_nestAddress);\r\n        require(pie.balanceOf(msg.sender) >= _nestAmount, \"Insufficient nest balance\");\r\n\r\n        // Transfer nest tokens to redeem contract\r\n        pie.transferFrom(msg.sender, address(this), _nestAmount);\r\n        uint256 pieBalance = pie.balanceOf(address(this));\r\n\r\n        // Get tokens inside the index, as well as the amounts received.\r\n        (address[] memory tokens,) = pie.calcTokensForAmount(pieBalance);\r\n\r\n        // Dissolve index for the individual tokens\r\n        pie.exitPool(pieBalance);\r\n\r\n        // Exchange underlying tokens for WETH\r\n        for(uint256 i = 0; i < tokens.length; i++) {\r\n            tokensToWeth(tokens[i],IERC20(tokens[i]).balanceOf(address(this)));\r\n        }\r\n\r\n        // Transfer redeemed WETH to msg.sender\r\n        WETH.transfer(msg.sender, WETH.balanceOf(address(this)));\r\n    }\r\n\r\n    function tokensToWeth(address _token, uint256 _amount) internal {\r\n\r\n        // If they are lending tokens, unlend them\r\n        address underlying = lendingRegistry.wrappedToUnderlying(_token);\r\n        if (underlying != address(0)) {\r\n            // calc amount according to exchange rate\r\n            ILendingLogic lendingLogic = getLendingLogicFromWrapped(_token);\r\n            uint256 exchangeRate = lendingLogic.exchangeRate(_token); // wrapped to underlying exchangeRate\r\n\r\n            uint256 underlyingAmount = _amount * exchangeRate / 1e18;\r\n\r\n            // Unlend token\r\n            (address[] memory _targets, bytes[] memory _data) = lendingRegistry.getUnlendTXData(_token, _amount, address(this));\r\n            for(uint256 j = 0; j < _targets.length; j++) {\r\n                _targets[j].call(_data[j]);\r\n            }\r\n            _amount = underlyingAmount;\r\n            _token = underlying;\r\n        }\r\n\r\n        // If underlying token is wETH, no need to swap\r\n        if (_token == address(WETH)) return;\r\n\r\n        address customHopToken = customHops[_token];\r\n        //If we customHop token is set, we first swap from token -> hopToken -> WETH\r\n        if(customHopToken != address(0)) {\r\n            BestPrice memory hopOutPrice = getBestPrice(_token, customHopToken, _amount);\r\n            \r\n            BestPrice memory wethOutPrice = getBestPrice(customHopToken, address(WETH), hopOutPrice.price);\r\n            //Swap weth for hopToken\r\n            dexSwap(_token, customHopToken, _amount, hopOutPrice.ammIndex);\r\n            //Swap hopToken for outputToken\r\n            dexSwap(customHopToken, address(WETH), hopOutPrice.price, wethOutPrice.ammIndex);\r\n        }\r\n        // else normal swap\r\n        else{\r\n            BestPrice memory bestPrice = getBestPrice(_token, address(WETH), _amount);\r\n            \r\n            dexSwap(_token, address(WETH), _amount, bestPrice.ammIndex);\r\n        }\r\n    }\r\n\r\n    function getBestPrice(address _assetIn, address _assetOut, uint _amountIn) public returns (BestPrice memory){\r\n        uint uniAmount;\r\n        uint sushiAmount;\r\n        uint quickAmount;\r\n        uint balancerAmount;\r\n        BestPrice memory bestPrice;\r\n\r\n        //GET UNI PRICE\r\n        uint uniIndex;\r\n        (uniAmount,uniIndex) = getPriceUniV3(_assetIn,_assetOut,_amountIn,uniFee[_assetOut]);\r\n        bestPrice.price = uniAmount;\r\n        bestPrice.ammIndex = uniIndex;\r\n        \r\n        //GET SUSHI PRICE\r\n        try sushiRouter.getAmountsOut(_amountIn, getRoute(_assetIn, _assetOut)) returns(uint256[] memory amounts) {\r\n            sushiAmount = amounts[1];\r\n        } catch {\r\n            sushiAmount = 0;\r\n        }\r\n        if(bestPrice.price<sushiAmount){\r\n            bestPrice.price = sushiAmount;\r\n            bestPrice.ammIndex = 2;\r\n        }\r\n\r\n        //GET QUICKSWAP PRICE\r\n        try quickRouter.getAmountsOut(_amountIn, getRoute(_assetIn, _assetOut)) returns(uint256[] memory amounts) {\r\n            quickAmount = amounts[1];\r\n        } catch {\r\n            quickAmount = 0;\r\n        }\r\n        if(bestPrice.price<quickAmount){\r\n            bestPrice.price = quickAmount;\r\n            bestPrice.ammIndex = 3;\r\n        }\r\n\r\n        //GET BALANCER PRICE\r\n        if(balancerViable[_assetIn]!= \"\"){\r\n            balancerAmount = getPriceBalancer(_assetIn,_assetOut,_amountIn);\r\n            if(bestPrice.price<balancerAmount){\r\n                bestPrice.price = balancerAmount;\r\n                bestPrice.ammIndex = 4;\r\n            }\r\n        }\r\n\r\n        require(bestPrice.price > 0);\r\n\r\n        return bestPrice;\r\n    }\r\n\r\n    function dexSwap(address _assetIn, address _assetOut, uint _amountIn, uint _ammIndex) public {\r\n        //Uni1\r\n        if(_ammIndex == 0){\r\n            uniV3Router.ExactInputSingleParams memory params = uniV3Router.ExactInputSingleParams(\r\n                _assetIn,\r\n                _assetOut,\r\n                500,\r\n                address(this),\r\n                block.timestamp + 1,\r\n                _amountIn,\r\n                0,\r\n                0\r\n            );\r\n            IERC20(_assetIn).approve(address(uniRouter), 0);\r\n            IERC20(_assetIn).approve(address(uniRouter), type(uint256).max);\r\n            uniRouter.exactInputSingle(params);\r\n            return;\r\n        }\r\n        //Uni2\r\n        if(_ammIndex == 1){\r\n            uniV3Router.ExactInputSingleParams memory params = uniV3Router.ExactInputSingleParams(\r\n                _assetIn,\r\n                _assetOut,\r\n                3000,\r\n                address(this),\r\n                block.timestamp + 1,\r\n                _amountIn,\r\n                0,\r\n                0\r\n            );\r\n\r\n            IERC20(_assetIn).approve(address(uniRouter), 0);\r\n            IERC20(_assetIn).approve(address(uniRouter), type(uint256).max);\r\n            uniRouter.exactInputSingle(params);\r\n            return;\r\n        }\r\n        //Sushi\r\n        if(_ammIndex == 2){\r\n            IERC20(_assetIn).approve(address(sushiRouter), 0);\r\n            IERC20(_assetIn).approve(address(sushiRouter), type(uint256).max);\r\n            sushiRouter.swapExactTokensForTokens(_amountIn,0,getRoute(_assetIn, _assetOut),address(this),block.timestamp + 1);\r\n            return;\r\n        }\r\n        //Quickswap\r\n        if(_ammIndex == 3){\r\n            IERC20(_assetIn).approve(address(quickRouter), 0);\r\n            IERC20(_assetIn).approve(address(quickRouter), type(uint256).max);\r\n            quickRouter.swapExactTokensForTokens(_amountIn,0,getRoute(_assetIn, _assetOut),address(this),block.timestamp + 1);\r\n            return;\r\n        }\r\n\r\n        //Balancer\r\n        IBalancer.SwapKind kind = IBalancer.SwapKind.GIVEN_IN;\r\n        IBalancer.SingleSwap memory singleSwap = IBalancer.SingleSwap(\r\n            balancerViable[_assetIn],\r\n            kind,\r\n            _assetIn,\r\n            _assetOut,\r\n            _amountIn,\r\n            \"\"\r\n        );\r\n        IBalancer.FundManagement memory funds =  IBalancer.FundManagement(\r\n            address(this),\r\n            false,\r\n            payable(address(this)),\r\n            false\r\n        );\r\n\r\n        IERC20(_assetIn).approve(address(balancer), 0);\r\n        IERC20(_assetIn).approve(address(balancer), type(uint256).max);\r\n        balancer.swap(\r\n            singleSwap,\r\n            funds,\r\n            0,\r\n            block.timestamp + 1\r\n        );\r\n\r\n    }\r\n\r\n    function getPriceUniV3(address _assetIn, address _assetOut, uint _amountIn, uint16 _uniFee) internal returns(uint uniAmount, uint index){\r\n        //Uni provides pools with different fees. The most popular being 0.05% and 0.3%\r\n        //Unfortunately they have to be specified\r\n        if(_uniFee == 500){\r\n            try oracle.quoteExactInputSingle(_assetIn,_assetOut,500,_amountIn,0) returns(uint256 returnAmount) {\r\n                uniAmount = returnAmount;\r\n            } catch {\r\n                uniAmount = 0;\r\n            }\r\n            //index = 0; no need to set 0, as it is the default value\r\n        }\r\n        else if(_uniFee == 3000){\r\n            try oracle.quoteExactInputSingle(_assetIn,_assetOut,3000,_amountIn,0) returns(uint256 returnAmount) {\r\n                uniAmount = returnAmount;\r\n            } catch {\r\n                uniAmount = 0;\r\n            }\r\n            index = 1;\r\n        }\r\n        else{\r\n            try oracle.quoteExactInputSingle(_assetIn,_assetOut,500,_amountIn,0) returns(uint256 returnAmount) {\r\n                uniAmount = returnAmount;\r\n            } catch {\r\n                uniAmount = 0;\r\n            }\r\n            //index = 0\r\n            try oracle.quoteExactInputSingle(_assetIn,_assetOut,3000,_amountIn,0) returns(uint256 returnAmount) {\r\n                if(uniAmount>returnAmount){\r\n                    index = 1;\r\n                    uniAmount = returnAmount;\r\n                }\r\n            } catch {\r\n                //uniAmount is either already 0 or higher\r\n            }\r\n        }\r\n    }\r\n\r\n    function getPriceBalancer(address _assetIn, address _assetOut, uint _amountIn) internal returns(uint balancerAmount){\r\n        \r\n        //Get Balancer price\r\n        IBalancer.SwapKind kind = IBalancer.SwapKind.GIVEN_IN;\r\n\r\n        address[] memory assets = new address[](2);\r\n        assets[0] = _assetIn;\r\n        assets[1] = _assetOut;\r\n\r\n        IBalancer.BatchSwapStep[] memory swapStep = new IBalancer.BatchSwapStep[](1);\r\n        swapStep[0] = IBalancer.BatchSwapStep(balancerViable[_assetIn], 0, 1, _amountIn, \"\");\r\n\r\n        IBalancer.FundManagement memory funds = IBalancer.FundManagement(payable(msg.sender),false,payable(msg.sender),false);\r\n\r\n        try balancer.queryBatchSwap(kind,swapStep,assets,funds) returns(int[] memory amounts) {\r\n            balancerAmount = uint(amounts[1]);\r\n        } catch {\r\n            balancerAmount = 0;\r\n        }\r\n        \r\n    }\r\n\r\n    function getLendingLogicFromWrapped(address _wrapped) internal view returns(ILendingLogic) {\r\n        return ILendingLogic(\r\n            lendingRegistry.protocolToLogic(\r\n                lendingRegistry.wrappedToProtocol(\r\n                    _wrapped\r\n                )\r\n            )\r\n        );\r\n    }\r\n\r\n    function getRoute(address _inputToken, address _outputToken) internal pure returns(address[] memory route) {\r\n        route = new address[](2);\r\n        route[0] = _inputToken;\r\n        route[1] = _outputToken;\r\n\r\n        return route;\r\n    }\r\n\r\n    function setCustomHop(address _token, address _hop) external onlyOwner {\r\n        customHops[_token] = _hop;\r\n    }\r\n\r\n    function setUniPoolMapping(address _outputAsset, uint16 _Fee) external onlyOwner {\r\n        uniFee[_outputAsset] = _Fee;\r\n    }\r\n\r\n    function setBalancerPoolMapping(address _inputAsset, bytes32 _pool) external onlyOwner {\r\n        balancerViable[_inputAsset] = _pool;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lendingRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"customHops\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_assetIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_assetOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ammIndex\",\"type\":\"uint256\"}],\"name\":\"dexSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_assetIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_assetOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"}],\"name\":\"getBestPrice\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ammIndex\",\"type\":\"uint256\"}],\"internalType\":\"struct NestRedeem.BestPrice\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nestAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nestAmount\",\"type\":\"uint256\"}],\"name\":\"redeemNestToWeth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_inputAsset\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_pool\",\"type\":\"bytes32\"}],\"name\":\"setBalancerPoolMapping\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_hop\",\"type\":\"address\"}],\"name\":\"setCustomHop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_outputAsset\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_Fee\",\"type\":\"uint16\"}],\"name\":\"setUniPoolMapping\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "NestRedeem", "CompilerVersion": "v0.8.1+commit.df193b15", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f619000000000000000000000000c94bc5c62c53e88d67c3874f5e8f91c6a99656ca", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://7650651c406dbf6e5775d6274324c06d3ce6d5a2d9220bb7d664e9ddd43b5efc"}