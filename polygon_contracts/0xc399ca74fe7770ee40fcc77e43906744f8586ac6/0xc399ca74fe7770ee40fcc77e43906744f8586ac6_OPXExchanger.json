{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/OPXExchanger.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity >=0.7.0 <0.9.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\n\\r\\ncontract OPXExchanger is Initializable {\\r\\n    address public owner;\\r\\n    address public membershipContract;\\r\\n    address public feeTo;\\r\\n\\r\\n    address public UNISWAP_V2_ROUTER;\\r\\n    address public OPX;\\r\\n    address public WMATIC;\\r\\n    address public USDT;\\r\\n\\r\\n    uint128 public dailySellLimit;\\r\\n\\r\\n    uint128 public opxPool;\\r\\n    uint128 public usdtPool;\\r\\n    uint128 public sellDeductionPercent;\\r\\n    uint128 public maticPerOPXFee;\\r\\n\\r\\n    bool public maticPurchaseEnabled;\\r\\n\\r\\n    mapping(address => User) public users;\\r\\n\\r\\n    struct User {\\r\\n        uint128 totalPurchasedOPX;\\r\\n        uint128 totalSoldOPX;\\r\\n        uint32 limitLastSold;\\r\\n        uint128 limitSoldOPX;\\r\\n    }\\r\\n\\r\\n    function initialize(\\r\\n        address _opx,\\r\\n        address _wmatic,\\r\\n        address _usdt,\\r\\n        address _uniswapV2Router,\\r\\n        address _membershipContract,\\r\\n        address _feeTo\\r\\n    ) external initializer {\\r\\n        owner = msg.sender;\\r\\n        OPX = _opx;\\r\\n        WMATIC = _wmatic;\\r\\n        USDT = _usdt;\\r\\n        UNISWAP_V2_ROUTER = _uniswapV2Router;\\r\\n        membershipContract = _membershipContract;\\r\\n        feeTo = _feeTo;\\r\\n\\r\\n        uint128 tokensPerUSDT = uint128(\\r\\n            MembershipInterface(membershipContract).tokensPer1USD()\\r\\n        );\\r\\n\\r\\n        dailySellLimit = 10000 ether;\\r\\n\\r\\n        opxPool = tokensPerUSDT * 1_000_000 ether;\\r\\n        usdtPool = 1_000_000 * 1e6;\\r\\n\\r\\n        sellDeductionPercent = 10;\\r\\n        maticPerOPXFee = 0.1 ether;\\r\\n    }\\r\\n\\r\\n    function changeValue(uint256 index, uint256 value) external {\\r\\n        require(msg.sender == owner, \\\"Only owner can change value.\\\");\\r\\n        if (index == 1) {\\r\\n            opxPool = uint128(value);\\r\\n        } else if (index == 2) {\\r\\n            usdtPool = uint128(value);\\r\\n        } else if (index == 3) {\\r\\n            dailySellLimit = uint128(value);\\r\\n        } else if (index == 4) {\\r\\n            maticPurchaseEnabled = value == 1;\\r\\n        } else if (index == 5) {\\r\\n            sellDeductionPercent = uint128(value);\\r\\n        } else if (index == 6) {\\r\\n            maticPerOPXFee = uint128(value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function changeFeeTo(address _feeTo) external {\\r\\n        require(msg.sender == owner, \\\"Only owner can change feeTo.\\\");\\r\\n        feeTo = _feeTo;\\r\\n    }\\r\\n\\r\\n    function changeAddress(uint256 index, address addr) external {\\r\\n        require(msg.sender == owner, \\\"Only owner can change address.\\\");\\r\\n        if (index == 1) {\\r\\n            UNISWAP_V2_ROUTER = addr;\\r\\n        } else if (index == 2) {\\r\\n            OPX = addr;\\r\\n        } else if (index == 3) {\\r\\n            WMATIC = addr;\\r\\n        } else if (index == 4) {\\r\\n            USDT = addr;\\r\\n        } else if (index == 5) {\\r\\n            membershipContract = addr;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function manageFund(uint256 index, uint256 amount) external {\\r\\n        require(msg.sender == owner, \\\"Only owner can manage fund.\\\");\\r\\n        if (index == 1) {\\r\\n            ERC20(OPX).transfer(msg.sender, amount);\\r\\n        } else if (index == 2) {\\r\\n            ERC20(USDT).transfer(msg.sender, amount);\\r\\n        } else if (index == 3) {\\r\\n            payable(msg.sender).transfer(amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getRequiredUSDTForOPX(\\r\\n        uint256 amountIn\\r\\n    ) external view returns (uint256) {\\r\\n        uint256 k = opxPool * usdtPool;\\r\\n        uint256 newOPXPool = opxPool + amountIn;\\r\\n        uint256 newUSDTPool = k / newOPXPool;\\r\\n        return usdtPool - newUSDTPool;\\r\\n    }\\r\\n\\r\\n    function getRequiredOPXForUSDT(\\r\\n        uint256 amountIn\\r\\n    ) external view returns (uint256) {\\r\\n        uint256 k = opxPool * usdtPool;\\r\\n        uint256 newUSDTPool = usdtPool + amountIn;\\r\\n        uint256 newOPXPool = k / newUSDTPool;\\r\\n        return opxPool - newOPXPool;\\r\\n    }\\r\\n\\r\\n    function sellOPX(\\r\\n        uint256 amountIn,\\r\\n        uint256 expectedOut\\r\\n    ) external payable onlyActiveMembers {\\r\\n        require(\\r\\n            msg.value >= (maticPerOPXFee * amountIn) / 1 ether,\\r\\n            \\\"Transaction fee not enough\\\"\\r\\n        );\\r\\n\\r\\n        payable(feeTo).transfer(msg.value);\\r\\n\\r\\n        uint256 k = opxPool * usdtPool;\\r\\n        uint256 newOPXPool = opxPool + amountIn;\\r\\n        uint256 newUSDTPool = k / newOPXPool;\\r\\n\\r\\n        uint256 amountOut = usdtPool - newUSDTPool;\\r\\n\\r\\n        opxPool = uint128(newOPXPool);\\r\\n        usdtPool = uint128(newUSDTPool);\\r\\n\\r\\n        require(amountOut >= expectedOut, \\\"Unexpected loss of value.\\\");\\r\\n\\r\\n        require(amountIn > 1 ether, \\\"You must sell at least 1 OPX.\\\");\\r\\n\\r\\n        User storage user = users[msg.sender];\\r\\n\\r\\n        if (user.limitLastSold + 1 days < block.timestamp) {\\r\\n            user.limitSoldOPX = 0;\\r\\n            user.limitLastSold = uint32(block.timestamp);\\r\\n        }\\r\\n\\r\\n        if (amountIn + user.limitSoldOPX > dailySellLimit) {\\r\\n            amountIn = dailySellLimit - user.limitSoldOPX;\\r\\n        }\\r\\n\\r\\n        require(amountIn > 0, \\\"You have reached your daily sell limit.\\\");\\r\\n\\r\\n        ERC20(OPX).governanceTransfer(msg.sender, address(this), amountIn);\\r\\n\\r\\n        uint256 fee = ((amountOut * sellDeductionPercent) / 100);\\r\\n        ERC20(USDT).transfer(feeTo, fee);\\r\\n        ERC20(USDT).transfer(msg.sender, amountOut - fee);\\r\\n\\r\\n        user.totalSoldOPX += uint128(amountIn);\\r\\n        user.limitSoldOPX += uint128(amountIn);\\r\\n    }\\r\\n\\r\\n    function buyOPXWithUSDT(uint256 amountIn, uint256 expectedOut) external {\\r\\n        require(amountIn > 0.25 * 1e6, \\\"You must buy with atleast 0.25 USDT.\\\");\\r\\n\\r\\n        ERC20(USDT).transferFrom(msg.sender, address(this), amountIn);\\r\\n\\r\\n        uint256 k = opxPool * usdtPool;\\r\\n        uint256 newUSDTPool = usdtPool + amountIn;\\r\\n        uint256 newOPXPool = k / newUSDTPool;\\r\\n\\r\\n        uint256 amountOut = opxPool - newOPXPool;\\r\\n\\r\\n        require(amountOut >= expectedOut, \\\"Unexpected loss of value.\\\");\\r\\n\\r\\n        opxPool = uint128(newOPXPool);\\r\\n        usdtPool = uint128(newUSDTPool);\\r\\n\\r\\n        ERC20(OPX).transfer(msg.sender, amountOut);\\r\\n        users[msg.sender].totalPurchasedOPX += uint128(amountOut);\\r\\n    }\\r\\n\\r\\n    function buyOPXWithMatic(\\r\\n        uint256 _amountOutMin,\\r\\n        uint256 expectedOut\\r\\n    ) external payable {\\r\\n        require(maticPurchaseEnabled, \\\"Matic purchase is disabled.\\\");\\r\\n\\r\\n        require(msg.value > 1 ether, \\\"You must buy with atleast 1 MATIC.\\\");\\r\\n\\r\\n        uint256 k = opxPool * usdtPool;\\r\\n        uint256 newUSDTPool = usdtPool + msg.value;\\r\\n        uint256 newOPXPool = k / newUSDTPool;\\r\\n\\r\\n        uint256 amountOut = opxPool - newOPXPool;\\r\\n\\r\\n        require(amountOut >= expectedOut, \\\"Unexpected loss of value.\\\");\\r\\n\\r\\n        opxPool = uint128(newOPXPool);\\r\\n        usdtPool = uint128(newUSDTPool);\\r\\n\\r\\n        uint256 tokenIn = msg.value;\\r\\n\\r\\n        ERC20(WMATIC).deposit{value: tokenIn}();\\r\\n        ERC20(WMATIC).approve(UNISWAP_V2_ROUTER, tokenIn);\\r\\n\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = WMATIC;\\r\\n        path[1] = USDT;\\r\\n\\r\\n        IUniswapV2Router(UNISWAP_V2_ROUTER).swapExactTokensForTokens(\\r\\n            tokenIn,\\r\\n            _amountOutMin,\\r\\n            path,\\r\\n            address(this),\\r\\n            block.timestamp\\r\\n        );\\r\\n\\r\\n        ERC20(OPX).transfer(msg.sender, amountOut);\\r\\n        users[msg.sender].totalPurchasedOPX += uint128(amountOut);\\r\\n    }\\r\\n\\r\\n    function getAmountOutMin(\\r\\n        address _tokenIn,\\r\\n        address _tokenOut,\\r\\n        uint256 _amountIn\\r\\n    ) external view returns (uint256) {\\r\\n        address[] memory path;\\r\\n        if (_tokenIn == WMATIC || _tokenOut == WMATIC) {\\r\\n            path = new address[](2);\\r\\n            path[0] = _tokenIn;\\r\\n            path[1] = _tokenOut;\\r\\n        } else {\\r\\n            path = new address[](3);\\r\\n            path[0] = _tokenIn;\\r\\n            path[1] = WMATIC;\\r\\n            path[2] = _tokenOut;\\r\\n        }\\r\\n\\r\\n        uint256[] memory amountOutMins = IUniswapV2Router(UNISWAP_V2_ROUTER)\\r\\n            .getAmountsOut(_amountIn, path);\\r\\n        return amountOutMins[path.length - 1];\\r\\n    }\\r\\n\\r\\n    modifier onlyActiveMembers() {\\r\\n        (, , uint32 expiration, ) = MembershipInterface(membershipContract)\\r\\n            .users(msg.sender);\\r\\n        require(\\r\\n            expiration > block.timestamp,\\r\\n            \\\"You must be an active member to sell.\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface ERC20 {\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    function transfer(\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function governanceTransfer(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function deposit() external payable;\\r\\n\\r\\n    function approve(address spender, uint amount) external returns (bool);\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Router {\\r\\n    function getAmountsOut(\\r\\n        uint256 amountIn,\\r\\n        address[] memory path\\r\\n    ) external view returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapExactTokensForTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Pair {\\r\\n    function token0() external view returns (address);\\r\\n\\r\\n    function token1() external view returns (address);\\r\\n\\r\\n    function swap(\\r\\n        uint256 amount0Out,\\r\\n        uint256 amount1Out,\\r\\n        address to,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Factory {\\r\\n    function getPair(address token0, address token1) external returns (address);\\r\\n}\\r\\n\\r\\ninterface MembershipInterface {\\r\\n    function users(\\r\\n        address\\r\\n    ) external view returns (address, uint32, uint32, uint32);\\r\\n\\r\\n    function user_vip_expiration(address) external view returns (uint256);\\r\\n\\r\\n    function tokensPer1USD() external view returns (uint256);\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"viaIR\": true,\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 150\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"OPX\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNISWAP_V2_ROUTER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WMATIC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedOut\",\"type\":\"uint256\"}],\"name\":\"buyOPXWithMatic\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedOut\",\"type\":\"uint256\"}],\"name\":\"buyOPXWithUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"changeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeTo\",\"type\":\"address\"}],\"name\":\"changeFeeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"changeValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dailySellLimit\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"}],\"name\":\"getAmountOutMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"getRequiredOPXForUSDT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"getRequiredUSDTForOPX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_opx\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wmatic\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapV2Router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_membershipContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeTo\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"manageFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maticPerOPXFee\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maticPurchaseEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"membershipContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"opxPool\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellDeductionPercent\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedOut\",\"type\":\"uint256\"}],\"name\":\"sellOPX\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtPool\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"totalPurchasedOPX\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"totalSoldOPX\",\"type\":\"uint128\"},{\"internalType\":\"uint32\",\"name\":\"limitLastSold\",\"type\":\"uint32\"},{\"internalType\":\"uint128\",\"name\":\"limitSoldOPX\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "OPXExchanger", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "150", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}