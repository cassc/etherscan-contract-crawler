{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/C/Users/Leandro/Repositorios/bullrun-contracts/contracts/BullGovernance.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.4;\\r\\n\\r\\nimport \\\"./libs/IBEP20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\n\\r\\n    // Copied and modified from YAM code:\\r\\n    // https://github.com/yam-finance/yam-protocol/blob/master/contracts/token/YAMGovernanceStorage.sol\\r\\n    // https://github.com/yam-finance/yam-protocol/blob/master/contracts/token/YAMGovernance.sol\\r\\n    // Which is copied and modified from COMPOUND:\\r\\n    // https://github.com/compound-finance/compound-protocol/blob/master/contracts/Governance/Comp.sol\\r\\n\\r\\ncontract BullGovernance {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    /// @dev A record of each accounts delegate\\r\\n    mapping (address => address) internal _delegates;\\r\\n\\r\\n    /// @notice A checkpoint for marking number of votes from a given block\\r\\n    struct Checkpoint {\\r\\n        uint32 fromBlock;\\r\\n        uint256 votes;\\r\\n    }\\r\\n\\r\\n    /// @notice A record of votes checkpoints for each account, by index\\r\\n    mapping (address => mapping (uint32 => Checkpoint)) public checkpoints;\\r\\n\\r\\n    /// @notice The number of checkpoints for each account\\r\\n    mapping (address => uint32) public numCheckpoints;\\r\\n\\r\\n    /// @notice The EIP-712 typehash for the contract's domain\\r\\n    bytes32 public constant DOMAIN_TYPEHASH = keccak256(\\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\");\\r\\n\\r\\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract\\r\\n    bytes32 public constant DELEGATION_TYPEHASH = keccak256(\\\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\\\");\\r\\n\\r\\n    /// @notice A record of states for signing / validating signatures\\r\\n    mapping (address => uint) public nonces;\\r\\n\\r\\n      /// @notice An event thats emitted when an account changes its delegate\\r\\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\\r\\n\\r\\n    /// @notice An event thats emitted when a delegate account's vote balance changes\\r\\n    event DelegateVotesChanged(address indexed delegate, uint previousBalance, uint newBalance);\\r\\n\\r\\n    IBEP20 bullToken;\\r\\n\\r\\n    constructor(address _bullToken) {\\r\\n        bullToken = IBEP20(_bullToken); \\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Delegate votes from `msg.sender` to `delegatee`\\r\\n     * @param delegator The address to get delegatee for\\r\\n     */\\r\\n    function delegates(address delegator)\\r\\n        external\\r\\n        view\\r\\n        returns (address)\\r\\n    {\\r\\n        return _delegates[delegator];\\r\\n    }\\r\\n\\r\\n   /**\\r\\n    * @notice Delegate votes from `msg.sender` to `delegatee`\\r\\n    * @param delegatee The address to delegate votes to\\r\\n    */\\r\\n    function delegate(address delegatee) external {\\r\\n        return _delegate(msg.sender, delegatee);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Delegates votes from signatory to `delegatee`\\r\\n     * @param delegatee The address to delegate votes to\\r\\n     * @param nonce The contract state required to match the signature\\r\\n     * @param expiry The time at which to expire the signature\\r\\n     * @param v The recovery byte of the signature\\r\\n     * @param r Half of the ECDSA signature pair\\r\\n     * @param s Half of the ECDSA signature pair\\r\\n     */\\r\\n    function delegateBySig(\\r\\n        address delegatee,\\r\\n        uint nonce,\\r\\n        uint expiry,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    )\\r\\n        external\\r\\n    {\\r\\n        bytes32 domainSeparator = keccak256(\\r\\n            abi.encode(\\r\\n                DOMAIN_TYPEHASH,\\r\\n                keccak256(bytes(bullToken.name())),\\r\\n                getChainId(),\\r\\n                address(this)\\r\\n            )\\r\\n        );\\r\\n\\r\\n        bytes32 structHash = keccak256(\\r\\n            abi.encode(\\r\\n                DELEGATION_TYPEHASH,\\r\\n                delegatee,\\r\\n                nonce,\\r\\n                expiry\\r\\n            )\\r\\n        );\\r\\n\\r\\n        bytes32 digest = keccak256(\\r\\n            abi.encodePacked(\\r\\n                \\\"\\\\x19\\\\x01\\\",\\r\\n                domainSeparator,\\r\\n                structHash\\r\\n            )\\r\\n        );\\r\\n\\r\\n        address signatory = ecrecover(digest, v, r, s);\\r\\n        require(signatory != address(0), \\\"BULL::delegateBySig: invalid signature\\\");\\r\\n        require(nonce == nonces[signatory]++, \\\"BULL::delegateBySig: invalid nonce\\\");\\r\\n        require(block.timestamp <= expiry, \\\"BULL::delegateBySig: signature expired\\\");\\r\\n        return _delegate(signatory, delegatee);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the current votes balance for `account`\\r\\n     * @param account The address to get votes balance\\r\\n     * @return The number of current votes for `account`\\r\\n     */\\r\\n    function getCurrentVotes(address account)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        uint32 nCheckpoints = numCheckpoints[account];\\r\\n        return nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Determine the prior number of votes for an account as of a block number\\r\\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\\r\\n     * @param account The address of the account to check\\r\\n     * @param blockNumber The block number to get the vote balance at\\r\\n     * @return The number of votes the account had as of the given block\\r\\n     */\\r\\n    function getPriorVotes(address account, uint blockNumber)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        require(blockNumber < block.number, \\\"BULL::getPriorVotes: not yet determined\\\");\\r\\n\\r\\n        uint32 nCheckpoints = numCheckpoints[account];\\r\\n        if (nCheckpoints == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        // First check most recent balance\\r\\n        if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\\r\\n            return checkpoints[account][nCheckpoints - 1].votes;\\r\\n        }\\r\\n\\r\\n        // Next check implicit zero balance\\r\\n        if (checkpoints[account][0].fromBlock > blockNumber) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint32 lower = 0;\\r\\n        uint32 upper = nCheckpoints - 1;\\r\\n        while (upper > lower) {\\r\\n            uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\r\\n            Checkpoint memory cp = checkpoints[account][center];\\r\\n            if (cp.fromBlock == blockNumber) {\\r\\n                return cp.votes;\\r\\n            } else if (cp.fromBlock < blockNumber) {\\r\\n                lower = center;\\r\\n            } else {\\r\\n                upper = center - 1;\\r\\n            }\\r\\n        }\\r\\n        return checkpoints[account][lower].votes;\\r\\n    }\\r\\n\\r\\n    function _delegate(address delegator, address delegatee)\\r\\n        internal\\r\\n    {\\r\\n        address currentDelegate = _delegates[delegator];\\r\\n        uint256 delegatorBalance = bullToken.balanceOf(delegator); // balance of underlying BULLs (not scaled);\\r\\n        _delegates[delegator] = delegatee;\\r\\n\\r\\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\\r\\n\\r\\n        _moveDelegates(currentDelegate, delegatee, delegatorBalance);\\r\\n    }\\r\\n\\r\\n    function _moveDelegates(address srcRep, address dstRep, uint256 amount) internal {\\r\\n        if (srcRep != dstRep && amount > 0) {\\r\\n            if (srcRep != address(0)) {\\r\\n                // decrease old representative\\r\\n                uint32 srcRepNum = numCheckpoints[srcRep];\\r\\n                uint256 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;\\r\\n                uint256 srcRepNew = srcRepOld.sub(amount);\\r\\n                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\\r\\n            }\\r\\n\\r\\n            if (dstRep != address(0)) {\\r\\n                // increase new representative\\r\\n                uint32 dstRepNum = numCheckpoints[dstRep];\\r\\n                uint256 dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;\\r\\n                uint256 dstRepNew = dstRepOld.add(amount);\\r\\n                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _writeCheckpoint(\\r\\n        address delegatee,\\r\\n        uint32 nCheckpoints,\\r\\n        uint256 oldVotes,\\r\\n        uint256 newVotes\\r\\n    )\\r\\n        internal\\r\\n    {\\r\\n        uint32 blockNumber = safe32(block.number, \\\"BULL::_writeCheckpoint: block number exceeds 32 bits\\\");\\r\\n\\r\\n        if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {\\r\\n            checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\\r\\n        } else {\\r\\n            checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);\\r\\n            numCheckpoints[delegatee] = nCheckpoints + 1;\\r\\n        }\\r\\n\\r\\n        emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\\r\\n    }\\r\\n\\r\\n    function safe32(uint n, string memory errorMessage) internal pure returns (uint32) {\\r\\n        require(n < 2**32, errorMessage);\\r\\n        return uint32(n);\\r\\n    }\\r\\n\\r\\n    function getChainId() internal view returns (uint) {\\r\\n        uint256 chainId;\\r\\n        assembly { chainId := chainid() }\\r\\n        return chainId;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"/C/Users/Leandro/Repositorios/bullrun-contracts/contracts/BullMasterchef.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\r\\nimport \\\"./libs/SafeBEP20.sol\\\";\\r\\nimport \\\"./BullToken.sol\\\";\\r\\nimport \\\"./RewardDistribution.sol\\\";\\r\\nimport \\\"./interfaces/IBullReferral.sol\\\";\\r\\nimport \\\"./interfaces/IBullNFT.sol\\\";\\r\\n\\r\\n// Masterchef is the master of Bull. He can make Bull and he is a fair guy.\\r\\n//\\r\\n// Note that it's ownable and the owner wields tremendous power. The ownership\\r\\n// will be transferred to a governance smart contract once BULL is sufficiently\\r\\n// distributed and the community can show to govern itself.\\r\\n//\\r\\n// Have fun reading it. Hopefully it's bug-free. God bless.\\r\\ncontract Masterchef is ERC721Holder, Ownable, ReentrancyGuard {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeBEP20 for IBEP20;\\r\\n\\r\\n    // Info of each user.\\r\\n    struct UserInfo {\\r\\n        uint256 amount;         // How many LP tokens the user has provided.\\r\\n        uint256 rewardDebt;     // Reward debt. See explanation below.\\r\\n        uint256 rewardLockedUp;  // Reward locked up.\\r\\n        uint256 strength; // If the user don't despoit any nft, it's equal to amount.\\r\\n        uint256 nftId; // Nft of the user if has one.\\r\\n        uint64 nextHarvestUntil; // When can the user harvest again.\\r\\n        uint64 lastHarvest; // Last time the user deposited or harvested.\\r\\n        /** \\r\\n         * We do some fancy math here. Basically, any point in time, the amount of BULLs\\r\\n         * entitled to a user but is pending to be distributed is:\\r\\n         *\\r\\n         *   pending reward = (user.strength * pool.accBullPerShare) - user.rewardDebt + user.rewardLockedUp\\r\\n         *\\r\\n         * Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\\r\\n         *   1. The pool's `accBullPerShare` (and `lastRewardBlock`) gets updated.\\r\\n         *   2. User receives the pending reward sent to his/her address.\\r\\n         *   3. User's `amount` gets updated.\\r\\n         *   4. User's `strength`gets updated.\\r\\n         *   5. User's `rewardDebt` gets updated.\\r\\n         */\\r\\n    }\\r\\n\\r\\n    // Info of each pool.\\r\\n    struct PoolInfo {\\r\\n        IBEP20 lpToken;            // Address of LP token contract.\\r\\n        uint256 lastRewardBlock;   // Last block number that BULLs distribution occurs.\\r\\n        uint256 accBullPerShare;  // Accumulated BULLs per share, times 1e12. See below.\\r\\n        uint256 totalStrength;     // Represents the shares of the users.\\r\\n        uint32 allocPoint;        // How many allocation points assigned to this pool. BULLs to distribute per block.\\r\\n        uint32 harvestInterval;   // Harvest interval in seconds.\\r\\n        uint16 depositFeeBP;       // Deposit fee in basis points.\\r\\n    }\\r\\n\\r\\n    // The BULL TOKEN!\\r\\n    BullToken public immutable bull;\\r\\n    // Dev address.\\r\\n    address public devAddress;\\r\\n    // Deposit Fee address\\r\\n    address public feeAddress;\\r\\n    // BULL tokens created per block.\\r\\n    uint128 public bullPerBlock;\\r\\n    // Max harvest interval: 7 days.\\r\\n    uint256 public constant MAXIMUM_HARVEST_INTERVAL = 7 days;\\r\\n\\r\\n    // Info of each pool.\\r\\n    PoolInfo[] public poolInfo;\\r\\n    // Info of each user that stakes LP tokens.\\r\\n    mapping(uint16 => mapping(address => UserInfo)) public userInfo;\\r\\n    // Total allocation points. Must be the sum of all allocation points in all pools.\\r\\n    uint256 public totalAllocPoint = 0;\\r\\n    // The block number when BULL mining starts.\\r\\n    uint256 public immutable startBlock;\\r\\n    // Total locked up rewards.\\r\\n    uint256 public totalLockedUpRewards;\\r\\n    // Reward distribution contract for fees.\\r\\n    RewardDistribution public rewardDistribution;\\r\\n    // Bull referral contract address.\\r\\n    IBullReferral public immutable bullReferral;\\r\\n    // Referral commission rate in basis points.\\r\\n    uint16 public referralCommissionRate = 200;\\r\\n    // Max referral commission rate: 10%.\\r\\n    uint16 public constant MAXIMUM_REFERRAL_COMMISSION_RATE = 1000;\\r\\n    // NFTs boostsId bonus.\\r\\n    uint8 constant thePersistentBull = 4;\\r\\n    uint8 constant bullseye = 5;\\r\\n    uint8 constant missedBull = 6;\\r\\n    uint8 constant bullFarmer = 8;\\r\\n    // Conditions to mint new nfts\\r\\n    uint32 constant TWO_DAYS = 2 days;  \\r\\n    uint256 constant MINIMUM_REWARDS_PER_NFT = 100 * 10**18;\\r\\n    // NFT address to manage boosts by BullNFTs.\\r\\n    IBullNFT public immutable bullNFT;\\r\\n\\r\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\r\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\r\\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\\r\\n    event DepositNFT(address indexed user, uint256 indexed pid, uint256 nftId);\\r\\n    event WithdrawNFT(address indexed user, uint256 indexed pid, uint256 nftId);\\r\\n    event EmissionRateUpdated(address indexed caller, uint256 previousAmount, uint256 newAmount);\\r\\n    event ReferralCommissionPaid(address indexed user, address indexed referrer, uint256 commissionAmount);\\r\\n    event RewardLockedUp(address indexed user, uint256 indexed pid, uint256 amountLockedUp);\\r\\n    event RewardPaid(address indexed user, uint256 indexed pid, uint256 amountReward);\\r\\n\\r\\n    constructor(\\r\\n        BullToken _bull,\\r\\n        IBullNFT _bullNFT,\\r\\n        IBullReferral _bullReferral,\\r\\n        address _feeAddress,\\r\\n        uint128 _bullPerBlock,\\r\\n        uint256 _startBlock\\r\\n    ) {\\r\\n        bull = _bull;\\r\\n        bullNFT = _bullNFT;\\r\\n        bullReferral = _bullReferral;\\r\\n        devAddress = msg.sender;\\r\\n        feeAddress = _feeAddress;\\r\\n        bullPerBlock = _bullPerBlock;\\r\\n        startBlock = _startBlock;\\r\\n    }\\r\\n\\r\\n    /// @dev Update the reward distribution contract address.\\r\\n    function setRewardDistribution(RewardDistribution _rewardDistribution) external onlyOwner{\\r\\n        rewardDistribution = _rewardDistribution;\\r\\n    }\\r\\n\\r\\n    /// @return Return the amount of pools.\\r\\n    function poolLength() external view returns (uint256) {\\r\\n        return poolInfo.length;\\r\\n    }\\r\\n\\r\\n    /// @dev Avoid to create pool twice with same LP token address.\\r\\n    mapping(IBEP20 => bool) public poolExistence;\\r\\n    modifier nonDuplicated(IBEP20 _lpToken) {\\r\\n        require(!poolExistence[_lpToken], \\\"nonDuplicated: duplicated\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @dev Add a new lp to the pool. If _withRewards is true also add the same pool to rewardDistribution contract. Can only be called by the owner.\\r\\n    function add(uint32 _allocPoint, IBEP20 _lpToken, uint16 _depositFeeBP, uint32 _harvestInterval, bool _withRewards) external onlyOwner nonDuplicated(_lpToken) {\\r\\n        require(_depositFeeBP <= 1500, \\\"add: deposit fee can't be more than 15%\\\");\\r\\n        require(_harvestInterval <= MAXIMUM_HARVEST_INTERVAL, \\\"add: invalid harvest interval\\\");\\r\\n        _massUpdatePools();\\r\\n        uint256 lastRewardBlock = block.number > startBlock ? block.number : startBlock;\\r\\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\\r\\n        poolExistence[_lpToken] = true;\\r\\n        poolInfo.push(PoolInfo({\\r\\n            lpToken: _lpToken,\\r\\n            allocPoint: _allocPoint,\\r\\n            lastRewardBlock: lastRewardBlock,\\r\\n            accBullPerShare: 0,\\r\\n            depositFeeBP: _depositFeeBP,\\r\\n            harvestInterval: _harvestInterval,\\r\\n            totalStrength: 0\\r\\n        }));\\r\\n        if(_withRewards){\\r\\n            uint16 pid = uint16(poolInfo.length - 1);\\r\\n            rewardDistribution.add(_lpToken, pid);\\r\\n        }   \\r\\n    }\\r\\n\\r\\n    /// @dev Update the given pool's BULL allocation point and deposit fee. Can only be called by the owner.\\r\\n    function set(uint256 _pid, uint32 _allocPoint, uint16 _depositFeeBP, uint32 _harvestInterval) external onlyOwner {\\r\\n        require(_depositFeeBP <= 10000, \\\"set: invalid deposit fee basis points\\\");\\r\\n        require(_harvestInterval <= MAXIMUM_HARVEST_INTERVAL, \\\"set: invalid harvest interval\\\");\\r\\n        _massUpdatePools();\\r\\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);\\r\\n        poolInfo[_pid].allocPoint = _allocPoint;\\r\\n        poolInfo[_pid].depositFeeBP = _depositFeeBP;\\r\\n        poolInfo[_pid].harvestInterval = _harvestInterval;\\r\\n    }\\r\\n\\r\\n    /// @return Return the pending BULLs of the given _user.\\r\\n    function pendingBull(uint16 _pid, address _user) external view returns (uint256) {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        UserInfo storage user = userInfo[_pid][_user];\\r\\n        uint256 accBullPerShare = pool.accBullPerShare;\\r\\n        if (block.number > pool.lastRewardBlock && pool.totalStrength != 0) {\\r\\n            uint256 multiplier = block.number.sub(pool.lastRewardBlock);\\r\\n            uint256 bullReward = multiplier.mul(bullPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\\r\\n            accBullPerShare = accBullPerShare.add(bullReward.mul(1e12).div(pool.totalStrength));\\r\\n        }\\r\\n        uint256 pending = user.strength.mul(accBullPerShare).div(1e12).sub(user.rewardDebt);\\r\\n        return pending.add(user.rewardLockedUp);\\r\\n    }\\r\\n\\r\\n    /// @return Return if _user can harvest BULLs.\\r\\n    function canHarvest(uint16 _pid, address _user) public view returns (bool) {\\r\\n        UserInfo storage user = userInfo[_pid][_user];\\r\\n        return block.timestamp >= user.nextHarvestUntil;\\r\\n    }\\r\\n\\r\\n    /// @dev Update reward variables for all pools. Be careful of gas spending!\\r\\n    function _massUpdatePools() private {\\r\\n        uint256 length = poolInfo.length;\\r\\n        for (uint256 pid = 0; pid < length; ++pid) {\\r\\n            _updatePool(pid);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Update reward variables of the given pool to be up-to-date.\\r\\n    function _updatePool(uint256 _pid) private {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        if (block.number <= pool.lastRewardBlock) {\\r\\n            return;\\r\\n        }\\r\\n        if (pool.totalStrength == 0 || pool.allocPoint == 0) {\\r\\n            pool.lastRewardBlock = block.number;\\r\\n            return;\\r\\n        }\\r\\n        uint256 multiplier = block.number.sub(pool.lastRewardBlock);\\r\\n        uint256 bullReward = multiplier.mul(bullPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\\r\\n        bull.mint(devAddress, bullReward.div(10));\\r\\n        bull.mint(address(this), bullReward);\\r\\n        pool.accBullPerShare = pool.accBullPerShare.add(bullReward.mul(1e12).div(pool.totalStrength));\\r\\n        pool.lastRewardBlock = block.number;\\r\\n    }\\r\\n\\r\\n    /// @dev Deposit LP tokens to MasterChef for BULL allocation.\\r\\n    function deposit(uint16 _pid, uint256 _amount, address _referrer) external nonReentrant {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\r\\n        _updatePool(_pid);\\r\\n        if (_amount > 0 && _referrer != address(0) && _referrer != msg.sender) {\\r\\n            bullReferral.recordReferral(msg.sender, _referrer);\\r\\n        }\\r\\n        payOrLockupPendingBull(_pid);\\r\\n        if (_amount > 0) {\\r\\n            pool.lpToken.safeTransferFrom(address(msg.sender), address(this), _amount);\\r\\n            if (address(pool.lpToken) == address(bull)) {\\r\\n                uint256 transferTax = _amount.mul(bull.getTransferTax(msg.sender, msg.sender)).div(10000);\\r\\n                _amount = _amount.sub(transferTax);\\r\\n            }\\r\\n            if (pool.depositFeeBP > 0) {\\r\\n                uint256 depositFee = _amount.mul(pool.depositFeeBP).div(10000);\\r\\n                pool.lpToken.safeTransfer(feeAddress, depositFee);\\r\\n                user.amount = user.amount.add(_amount).sub(depositFee);\\r\\n            } else {\\r\\n                user.amount = user.amount.add(_amount);\\r\\n                if(rewardDistribution.poolExistence(_pid)){\\r\\n                    rewardDistribution.incrementBalance(_pid, _amount, msg.sender);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        _updateStrength(_pid);\\r\\n        user.rewardDebt = user.strength.mul(pool.accBullPerShare).div(1e12);\\r\\n        emit Deposit(msg.sender, _pid, _amount);\\r\\n    }\\r\\n\\r\\n    /// @dev Withdraw LP tokens from MasterChef.\\r\\n    function withdraw(uint16 _pid, uint256 _amount) external nonReentrant {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\r\\n        require(user.amount >= _amount, \\\"withdraw: not good\\\");\\r\\n        _updatePool(_pid);\\r\\n        payOrLockupPendingBull(_pid);\\r\\n        if (_amount > 0) {\\r\\n            user.amount = user.amount.sub(_amount);\\r\\n            pool.lpToken.safeTransfer(address(msg.sender), _amount);\\r\\n            if(rewardDistribution.poolExistence(_pid)){\\r\\n                rewardDistribution.reduceBalance(_pid, _amount, msg.sender);\\r\\n            }\\r\\n        }\\r\\n        _updateStrength(_pid);\\r\\n        user.rewardDebt = user.strength.mul(pool.accBullPerShare).div(1e12);\\r\\n        emit Withdraw(msg.sender, _pid, _amount);\\r\\n    }\\r\\n\\r\\n    /// @dev Withdraw without caring about rewards. EMERGENCY ONLY.\\r\\n    function emergencyWithdraw(uint16 _pid) external nonReentrant {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\r\\n        uint256 amount = user.amount;\\r\\n        user.amount = 0;\\r\\n        user.strength = 0;\\r\\n        user.rewardDebt = 0;\\r\\n        user.rewardLockedUp = 0;\\r\\n        user.nextHarvestUntil = 0;\\r\\n        pool.lpToken.safeTransfer(address(msg.sender), amount);\\r\\n        emit EmergencyWithdraw(msg.sender, _pid, amount);\\r\\n    }\\r\\n\\r\\n    /// @dev Safe bull transfer function, just in case if rounding error causes pool to not have enough BULLs.\\r\\n    function safeBullTransfer(address _to, uint256 _amount) internal {\\r\\n        uint256 bullBal = bull.balanceOf(address(this));\\r\\n        bool transferSuccess = false;\\r\\n        if (_amount > bullBal) {\\r\\n            transferSuccess = bull.transfer(_to, bullBal);\\r\\n        } else {\\r\\n            transferSuccess = bull.transfer(_to, _amount);\\r\\n        }\\r\\n        require(transferSuccess, \\\"safeBullTransfer: transfer failed\\\");\\r\\n    }\\r\\n\\r\\n    /// @dev Pay or lockup pending BULLs according to the harvestInterval of the pool and the nfts of the user.\\r\\n    function payOrLockupPendingBull(uint16 _pid) internal {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\r\\n\\r\\n        uint256 harvestInterval = pool.harvestInterval;\\r\\n\\r\\n        if(user.nftId > 0){\\r\\n            uint256 boostId = bullNFT.getBoost(user.nftId);\\r\\n            if(boostId == thePersistentBull){\\r\\n                harvestInterval = harvestInterval > bullNFT.getBonus(boostId) ? harvestInterval.sub(bullNFT.getBonus(boostId)) : 0;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (user.nextHarvestUntil == 0) {\\r\\n            user.nextHarvestUntil = uint64(block.timestamp.add(harvestInterval));\\r\\n        }\\r\\n\\r\\n        uint256 pending = user.strength.mul(pool.accBullPerShare).div(1e12).sub(user.rewardDebt);\\r\\n        if (canHarvest(_pid, msg.sender)) {\\r\\n            if (pending > 0 || user.rewardLockedUp > 0) {\\r\\n                uint256 totalRewards = pending.add(user.rewardLockedUp);\\r\\n\\r\\n                // reset lockup\\r\\n                totalLockedUpRewards = totalLockedUpRewards.sub(user.rewardLockedUp);\\r\\n                user.rewardLockedUp = 0;\\r\\n                user.nextHarvestUntil = uint64(block.timestamp.add(harvestInterval));\\r\\n\\r\\n                // send rewards\\r\\n                safeBullTransfer(msg.sender, totalRewards);\\r\\n                if(totalRewards >= MINIMUM_REWARDS_PER_NFT){\\r\\n                    checkMintNFT(_pid, msg.sender);\\r\\n                }\\r\\n                if(rewardDistribution.poolExistence(_pid)){\\r\\n                    rewardDistribution.harvest(_pid, msg.sender);\\r\\n                }\\r\\n                payReferralCommission(msg.sender, totalRewards);\\r\\n                emit RewardPaid(msg.sender, _pid, totalRewards);\\r\\n            }\\r\\n        } else if (pending > 0) {\\r\\n            user.rewardLockedUp = user.rewardLockedUp.add(pending);\\r\\n            totalLockedUpRewards = totalLockedUpRewards.add(pending);\\r\\n            emit RewardLockedUp(msg.sender, _pid, pending);\\r\\n        }\\r\\n        user.lastHarvest = uint64(block.timestamp);\\r\\n    }\\r\\n\\r\\n    /// @dev Check if the _user has the conditions to win a nft.\\r\\n    function checkMintNFT(uint16 _pid, address _user) private {\\r\\n        UserInfo storage user = userInfo[_pid][_user];\\r\\n        if(bullNFT.canMint(bullFarmer) && bullNFT.getAuthorizedMiner(bullFarmer) == address(this)){\\r\\n            if(block.timestamp.sub(user.lastHarvest) >= TWO_DAYS){\\r\\n                bullNFT.mint(bullFarmer, msg.sender);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Deposit NFT to masterchef to get some boost in farming.\\r\\n    function depositNFT(uint16 _pid, uint256 _nftId) external {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\r\\n        require(user.nftId == 0, \\\"user already has a NFT\\\");\\r\\n\\r\\n        uint256 boostId = bullNFT.getBoost(_nftId);\\r\\n        if (user.nftId == 0 &&\\r\\n            (boostId == bullseye ||\\r\\n             boostId == missedBull ||\\r\\n             boostId == bullFarmer ||\\r\\n             boostId == thePersistentBull)\\r\\n             ){\\r\\n            bullNFT.safeTransferFrom(address(msg.sender), address(this), _nftId);\\r\\n            user.nftId = _nftId;\\r\\n        }else {\\r\\n            revert(\\\"Invalid NFT\\\");\\r\\n        }\\r\\n\\r\\n        _updatePool(_pid);\\r\\n        payOrLockupPendingBull(_pid);\\r\\n        _updateStrength(_pid);\\t\\r\\n    \\r\\n        user.rewardDebt = user.strength.mul(pool.accBullPerShare).div(1e12);\\r\\n        emit DepositNFT(msg.sender, _pid, _nftId);\\r\\n    }\\r\\n\\r\\n    /// @dev Withdraw NFT from masterchef.\\r\\n    function withdrawNFT(uint16 _pid) external {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\r\\n        require(user.nftId > 0, \\\"user has no NFT\\\");\\r\\n        \\r\\n        _updatePool(_pid);\\r\\n        payOrLockupPendingBull(_pid);\\r\\n        \\r\\n        uint256 _nftId = user.nftId;\\r\\n        bullNFT.transferFrom(address(this), address(msg.sender), user.nftId);\\r\\n        user.nftId = 0;\\r\\n        _updateStrength(_pid);\\r\\n    \\r\\n        user.rewardDebt = user.strength.mul(pool.accBullPerShare).div(1e12);\\r\\n        emit WithdrawNFT(msg.sender, _pid, _nftId);\\r\\n    }\\r\\n\\r\\n    /// @dev Update the strength of the user. This is the portion from the pool of the user. \\r\\n    function _updateStrength(uint16 _pid) private {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\r\\n                \\r\\n        uint256 oldStrength = user.strength;\\r\\n\\r\\n        user.strength = user.amount;\\r\\n        \\r\\n        if (user.nftId > 0) {\\r\\n            uint bonus = bullNFT.getBonus(user.nftId);\\r\\n            user.strength = user.strength.add(user.strength.mul(bonus).div(10000));\\r\\n        }\\r\\n\\r\\n        pool.totalStrength = pool.totalStrength.add(user.strength).sub(oldStrength);\\r\\n    }\\r\\n\\r\\n    /// @dev Update dev address by the previous dev.\\r\\n    function setDevAddress(address _devAddress) external {\\r\\n        require(msg.sender == devAddress, \\\"setDevAddress: FORBIDDEN\\\");\\r\\n        require(_devAddress != address(0), \\\"setDevAddress: ZERO\\\");\\r\\n        devAddress = _devAddress;\\r\\n    }\\r\\n\\r\\n    /// @dev Update the fee address. \\r\\n    function setFeeAddress(address _feeAddress) external {\\r\\n        require(msg.sender == feeAddress, \\\"setFeeAddress: FORBIDDEN\\\");\\r\\n        require(_feeAddress != address(0), \\\"setFeeAddress: ZERO\\\");\\r\\n        feeAddress = _feeAddress;\\r\\n    }\\r\\n\\r\\n    /// @dev Update the emission of bull per block.\\r\\n    function updateEmissionRate(uint128 _bullPerBlock) external onlyOwner {\\r\\n        _massUpdatePools();\\r\\n        bullPerBlock = _bullPerBlock;\\r\\n        emit EmissionRateUpdated(msg.sender, bullPerBlock, _bullPerBlock);\\r\\n    }\\r\\n\\r\\n    /// @dev Update referral commission rate by the owner. Should be in basis points.\\r\\n    function setReferralCommissionRate(uint16 _referralCommissionRate) external onlyOwner {\\r\\n        require(_referralCommissionRate <= MAXIMUM_REFERRAL_COMMISSION_RATE, \\\"setReferralCommissionRate: invalid referral commission rate basis points\\\");\\r\\n        referralCommissionRate = _referralCommissionRate;\\r\\n    }\\r\\n\\r\\n    /// @dev Pay referral commission to the referrer who referred this user.\\r\\n    function payReferralCommission(address _user, uint256 _pending) internal {\\r\\n        if (referralCommissionRate > 0) {\\r\\n            address referrer = bullReferral.getReferrer(_user);\\r\\n            uint256 commissionAmount = _pending.mul(referralCommissionRate).div(10000);\\r\\n\\r\\n            if (referrer != address(0) && commissionAmount > 0) {\\r\\n                bull.mint(referrer, commissionAmount);\\r\\n                bullReferral.recordReferralCommission(referrer, commissionAmount);\\r\\n                emit ReferralCommissionPaid(_user, referrer, commissionAmount);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/C/Users/Leandro/Repositorios/bullrun-contracts/contracts/BullToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.4;\\r\\n\\r\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\r\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\r\\nimport \\\"./interfaces/IBullNFT.sol\\\";\\r\\nimport \\\"./libs/BEP20.sol\\\";\\r\\nimport \\\"./BullGovernance.sol\\\";\\r\\n\\r\\n/** \\r\\n *   @dev Main token of the protocol. Auto liquidity and burn. \\r\\n *   In each transaction it charges a fee (by default 5%) for the formation of new LP tokens and to burn a part of bull.\\r\\n */\\r\\n\\r\\n// BullToken with Governance.\\r\\ncontract BullToken is BEP20, BullGovernance {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    // Transfer tax rate in basis points. (default 5%)\\r\\n    uint16 public transferTaxRate = 500;\\r\\n    // Burn rate % of transfer tax. (default 20% x 5% = 1% of total amount).\\r\\n    uint16 public burnRate = 20;\\r\\n    // Max transfer tax rate: 10%.\\r\\n    uint16 public constant MAXIMUM_TRANSFER_TAX_RATE = 1000;\\r\\n    // Burn address\\r\\n    address public constant BURN_ADDRESS = 0x000000000000000000000000000000000000dEaD;\\r\\n\\r\\n    // Max balance amount rate in basis points. (default is 0.5% of total supply)\\r\\n    uint16 public maxBalanceAmountRate = 50;\\r\\n    // Addresses that excluded from antiWhale\\r\\n    mapping(address => bool) private _excludedFromAntiWhale;\\r\\n    // Addresses that excluded from antiWhale\\r\\n    mapping(address => bool) private _excludedFromTax;\\r\\n    // Automatic swap and liquify enabled\\r\\n    bool public swapAndLiquifyEnabled = false;\\r\\n    // Min amount to liquify. (default 500 BULLs)\\r\\n    uint256 public minAmountToLiquify = 500 ether;\\r\\n    // The swap router, modifiable\\r\\n    IUniswapV2Router02 public bullFinanceRouter;\\r\\n    // LP Locker\\r\\n    address public lpLocker;\\r\\n    // The trading pair\\r\\n    address public bullFinancePair;\\r\\n    // In swap and liquify\\r\\n    bool private _inSwapAndLiquify;\\r\\n    // The operator can only update the transfer tax rate\\r\\n    address public operator;\\r\\n    // NFT address to manage boosts by BullNFTs\\r\\n    IBullNFT public bullNFT;\\r\\n    // NFT boostIds\\r\\n    uint256 constant goldenBull = 1;\\r\\n    uint256 constant silverBull = 2;\\r\\n    uint256 constant bronzeBull = 3;\\r\\n\\r\\n    // Events\\r\\n    event OperatorTransferred(address indexed previousOperator, address indexed newOperator);\\r\\n    event TransferTaxRateUpdated(address indexed operator, uint256 previousRate, uint256 newRate);\\r\\n    event BurnRateUpdated(address indexed operator, uint256 previousRate, uint256 newRate);\\r\\n    event maxBalanceAmountRateUpdated(address indexed operator, uint256 previousRate, uint256 newRate);\\r\\n    event SwapAndLiquifyEnabledUpdated(address indexed operator, bool enabled);\\r\\n    event MinAmountToLiquifyUpdated(address indexed operator, uint256 previousAmount, uint256 newAmount);\\r\\n    event BullFinanceRouterUpdated(address indexed operator, address indexed router, address indexed pair);\\r\\n    event SwapAndLiquify(uint256 tokensSwapped, uint256 ethReceived, uint256 tokensIntoLiqudity);\\r\\n\\r\\n    modifier onlyOperator() {\\r\\n        require(operator == msg.sender, \\\"operator: caller is not the operator\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier antiWhale(address sender, address recipient, uint256 amount) {\\r\\n        if (maxBalanceAmount() > 0) {\\r\\n            if (\\r\\n                _excludedFromAntiWhale[recipient] == false && sender != owner()\\r\\n            ) {\\r\\n                require(balanceOf(recipient).add(amount) <= maxBalanceAmount(), \\\"BULL::antiWhale: Transfer would exceed the maxBalanceAmount of the recipient\\\");\\r\\n            }\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier lockTheSwap {\\r\\n        _inSwapAndLiquify = true;\\r\\n        _;\\r\\n        _inSwapAndLiquify = false;\\r\\n    }\\r\\n\\r\\n    modifier transferTaxFree {\\r\\n        uint16 _transferTaxRate = transferTaxRate;\\r\\n        transferTaxRate = 0;\\r\\n        _;\\r\\n        transferTaxRate = _transferTaxRate;\\r\\n    }\\r\\n\\r\\n    constructor() BEP20(\\\"BullRun Token\\\", \\\"BULL\\\") BullGovernance(address(this)) {\\r\\n        operator = _msgSender();\\r\\n        lpLocker = _msgSender();\\r\\n        emit OperatorTransferred(address(0), operator);\\r\\n\\r\\n        _excludedFromAntiWhale[msg.sender] = true;\\r\\n        _excludedFromAntiWhale[address(0)] = true;\\r\\n        _excludedFromAntiWhale[address(this)] = true;\\r\\n        _excludedFromAntiWhale[BURN_ADDRESS] = true;\\r\\n        _excludedFromTax[msg.sender] = true;\\r\\n    }\\r\\n\\r\\n    /// @dev Creates `_amount` token to `_to`. Must only be called by the owner (MasterChef).\\r\\n    function mint(address _to, uint256 _amount) external onlyOwner {\\r\\n        _mint(_to, _amount);\\r\\n        _moveDelegates(address(0), _delegates[_to], _amount);\\r\\n    }\\r\\n\\r\\n    function getTransferTax(address _sender, address _recipient) public view returns(uint256){\\r\\n        uint256 userTransferTaxRate = transferTaxRate;\\r\\n        // if the NFT contract are defined and the sender o receiver has some of this nfts, it has a discount in transfer tax\\r\\n        if(address(bullNFT) != address(0)){\\r\\n            if(bullNFT.hasBoost(_sender, goldenBull) || bullNFT.hasBoost(_recipient, goldenBull)){\\r\\n                userTransferTaxRate = userTransferTaxRate.sub(userTransferTaxRate.mul(bullNFT.getBonus(goldenBull)).div(10000));\\r\\n            }else if(bullNFT.hasBoost(_sender, silverBull) || bullNFT.hasBoost(_recipient, silverBull)){\\r\\n                userTransferTaxRate = userTransferTaxRate.sub(userTransferTaxRate.mul(bullNFT.getBonus(silverBull)).div(10000));\\r\\n            }else if(bullNFT.hasBoost(_sender, bronzeBull) || bullNFT.hasBoost(_recipient, bronzeBull)){\\r\\n                userTransferTaxRate = userTransferTaxRate.sub(userTransferTaxRate.mul(bullNFT.getBonus(bronzeBull)).div(10000));\\r\\n            }\\r\\n        }\\r\\n        return userTransferTaxRate;\\r\\n    }\\r\\n\\r\\n    /// @dev overrides transfer function to meet tokenomics of BULL\\r\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual override antiWhale(sender, recipient, amount) {\\r\\n        // swap and liquify\\r\\n        if (\\r\\n            swapAndLiquifyEnabled\\r\\n            && !_inSwapAndLiquify\\r\\n            && address(bullFinanceRouter) != address(0)\\r\\n            && bullFinancePair != address(0)\\r\\n            && sender != bullFinancePair\\r\\n            && sender != owner()\\r\\n        ) {\\r\\n            swapAndLiquify();\\r\\n        }\\r\\n\\r\\n        if (recipient == BURN_ADDRESS || transferTaxRate == 0 || _excludedFromTax[sender] || _excludedFromTax[recipient]) {\\r\\n            super._transfer(sender, recipient, amount);\\r\\n        } else {\\r\\n            uint256 userTransferTaxRate = getTransferTax(sender, recipient);\\r\\n\\r\\n            // default tax is 5% of every transfer\\r\\n            uint256 taxAmount = amount.mul(userTransferTaxRate).div(10000);\\r\\n            uint256 burnAmount = taxAmount.mul(burnRate).div(100);\\r\\n            uint256 liquidityAmount = taxAmount.sub(burnAmount);\\r\\n\\r\\n            // default 95% of transfer sent to recipient\\r\\n            uint256 sendAmount = amount.sub(taxAmount);\\r\\n\\r\\n            super._transfer(sender, BURN_ADDRESS, burnAmount);\\r\\n            super._transfer(sender, address(this), liquidityAmount);\\r\\n            super._transfer(sender, recipient, sendAmount);\\r\\n            amount = sendAmount;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Swap and liquify\\r\\n    function swapAndLiquify() private lockTheSwap transferTaxFree {\\r\\n        uint256 contractTokenBalance = balanceOf(address(this));\\r\\n        uint256 maxBalanceAmount = maxBalanceAmount();\\r\\n        contractTokenBalance = contractTokenBalance > maxBalanceAmount ? maxBalanceAmount : contractTokenBalance;\\r\\n\\r\\n        if (contractTokenBalance >= minAmountToLiquify) {\\r\\n            // only min amount to liquify\\r\\n            uint256 liquifyAmount = minAmountToLiquify;\\r\\n\\r\\n            // split the liquify amount into halves\\r\\n            uint256 half = liquifyAmount.div(2);\\r\\n            uint256 otherHalf = liquifyAmount.sub(half);\\r\\n\\r\\n            // capture the contract's current ETH balance.\\r\\n            // this is so that we can capture exactly the amount of ETH that the\\r\\n            // swap creates, and not make the liquidity event include any ETH that\\r\\n            // has been manually sent to the contract\\r\\n            uint256 initialBalance = address(this).balance;\\r\\n\\r\\n            // swap tokens for ETH\\r\\n            swapTokensForEth(half);\\r\\n\\r\\n            // how much ETH did we just swap into?\\r\\n            uint256 newBalance = address(this).balance.sub(initialBalance);\\r\\n\\r\\n            // add liquidity\\r\\n            addLiquidity(otherHalf, newBalance);\\r\\n\\r\\n            emit SwapAndLiquify(half, newBalance, otherHalf);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Swap tokens for eth\\r\\n    function swapTokensForEth(uint256 tokenAmount) private {\\r\\n        // generate the bullFinance pair path of token -> weth\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(this);\\r\\n        path[1] = bullFinanceRouter.WETH();\\r\\n\\r\\n        _approve(address(this), address(bullFinanceRouter), tokenAmount);\\r\\n\\r\\n        // make the swap\\r\\n        bullFinanceRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n            tokenAmount,\\r\\n            0, // accept any amount of ETH\\r\\n            path,\\r\\n            address(this),\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @dev Add liquidity\\r\\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\\r\\n        // approve token transfer to cover all possible scenarios\\r\\n        _approve(address(this), address(bullFinanceRouter), tokenAmount);\\r\\n\\r\\n        // add the liquidity\\r\\n        bullFinanceRouter.addLiquidityETH{value: ethAmount}(\\r\\n            address(this),\\r\\n            tokenAmount,\\r\\n            0, // slippage is unavoidable\\r\\n            0, // slippage is unavoidable\\r\\n            lpLocker,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the max transfer amount.\\r\\n     */\\r\\n    function maxBalanceAmount() public view returns (uint256) {\\r\\n        return totalSupply().mul(maxBalanceAmountRate).div(10000);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address is excluded from antiWhale or not.\\r\\n     */\\r\\n    function isExcludedFromAntiWhale(address _account) external view returns (bool) {\\r\\n        return _excludedFromAntiWhale[_account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address is excluded from tax or not.\\r\\n     */\\r\\n    function isExcludedFromTax(address _account) external view returns (bool) {\\r\\n        return _excludedFromTax[_account];\\r\\n    }\\r\\n\\r\\n    // To receive BNB from bullFinanceRouter when swapping\\r\\n    receive() external payable {}\\r\\n\\r\\n    /**\\r\\n     * @dev Update the transfer tax rate.\\r\\n     * Can only be called by the current operator.\\r\\n     */\\r\\n    function updateTransferTaxRate(uint16 _transferTaxRate) external onlyOperator {\\r\\n        require(_transferTaxRate <= MAXIMUM_TRANSFER_TAX_RATE, \\\"BULL::updateTransferTaxRate: Transfer tax rate must not exceed the maximum rate.\\\");\\r\\n        emit TransferTaxRateUpdated(msg.sender, transferTaxRate, _transferTaxRate);\\r\\n        transferTaxRate = _transferTaxRate;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Update the burn rate.\\r\\n     * Can only be called by the current operator.\\r\\n     */\\r\\n    function updateBurnRate(uint16 _burnRate) external onlyOperator {\\r\\n        require(_burnRate <= 100, \\\"BULL::updateBurnRate: Burn rate must not exceed the maximum rate.\\\");\\r\\n        emit BurnRateUpdated(msg.sender, burnRate, _burnRate);\\r\\n        burnRate = _burnRate;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Update the max balance amount rate.\\r\\n     * Can only be called by the current operator.\\r\\n     */\\r\\n    function updatemaxBalanceAmountRate(uint16 _maxBalanceAmountRate) external onlyOperator {\\r\\n        require(_maxBalanceAmountRate <= 10000, \\\"BULL::updatemaxBalanceAmountRate: Max transfer amount rate must not exceed the maximum rate.\\\");\\r\\n        emit maxBalanceAmountRateUpdated(msg.sender, maxBalanceAmountRate, _maxBalanceAmountRate);\\r\\n        maxBalanceAmountRate = _maxBalanceAmountRate;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Update the min amount to liquify.\\r\\n     * Can only be called by the current operator.\\r\\n     */\\r\\n    function updateMinAmountToLiquify(uint256 _minAmount) external onlyOperator {\\r\\n        emit MinAmountToLiquifyUpdated(msg.sender, minAmountToLiquify, _minAmount);\\r\\n        minAmountToLiquify = _minAmount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Exclude or include an address from antiWhale.\\r\\n     * Can only be called by the current operator.\\r\\n     */\\r\\n    function setExcludedFromAntiWhale(address _account, bool _excluded) external onlyOperator {\\r\\n        _excludedFromAntiWhale[_account] = _excluded;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Exclude or include an address from tax.\\r\\n     * Can only be called by the current operator.\\r\\n     */\\r\\n    function setExcludedFromTax(address _account, bool _excluded) external onlyOperator {\\r\\n        _excludedFromTax[_account] = _excluded;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Update the swapAndLiquifyEnabled.\\r\\n     * Can only be called by the current operator.\\r\\n     */\\r\\n    function updateSwapAndLiquifyEnabled(bool _enabled) external onlyOperator {\\r\\n        emit SwapAndLiquifyEnabledUpdated(msg.sender, _enabled);\\r\\n        swapAndLiquifyEnabled = _enabled;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Update the swap router.\\r\\n     * Can only be called by the current operator.\\r\\n     */\\r\\n    function updateBullFinanceRouter(address _router) external onlyOperator {\\r\\n        bullFinanceRouter = IUniswapV2Router02(_router);\\r\\n        bullFinancePair = IUniswapV2Factory(bullFinanceRouter.factory()).getPair(address(this), bullFinanceRouter.WETH());\\r\\n        require(bullFinancePair != address(0), \\\"BULL::updateBullFinanceRouter: Invalid pair address.\\\");\\r\\n        emit BullFinanceRouterUpdated(msg.sender, address(bullFinanceRouter), bullFinancePair);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Update the NFT contract.\\r\\n     * Can only be called by the current operator.\\r\\n     */\\r\\n    function updateBullNFTContract(address _bullNFT) external onlyOperator {\\r\\n        bullNFT = IBullNFT(_bullNFT);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Update the lpLocker.\\r\\n     * Can only be called by the current operator.\\r\\n     */\\r\\n    function updateLpLocker(address _lpLocker) external onlyOperator {\\r\\n        lpLocker = _lpLocker;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers operator of the contract to a new account (`newOperator`).\\r\\n     * Can only be called by the current operator.\\r\\n     */\\r\\n    function transferOperator(address newOperator) public onlyOperator {\\r\\n        require(newOperator != address(0), \\\"BULL::transferOperator: new operator is the zero address\\\");\\r\\n        emit OperatorTransferred(operator, newOperator);\\r\\n        operator = newOperator;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/C/Users/Leandro/Repositorios/bullrun-contracts/contracts/RewardDistribution.sol\": {\r\n      \"content\": \"\\r\\n// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\r\\nimport \\\"./libs/SafeBEP20.sol\\\";\\r\\nimport \\\"./libs/IBEP20.sol\\\";\\r\\n\\r\\n    /**\\r\\n        @dev This contract is intended to be handled by a masterchef contract. \\r\\n        Here you can deposit funds that will be distributed among the users of the masterchef.\\r\\n        In this case the purpose is to deposit part of the fees to deliver them to the users of certain native pools.\\r\\n     */\\r\\n\\r\\ncontract RewardDistribution is Ownable {\\r\\n    using SafeMath for uint256;\\r\\n    using Math for uint256;\\r\\n    using SafeBEP20 for IBEP20;\\r\\n\\r\\n    // Info of each user.\\r\\n    struct UserInfo {\\r\\n        uint256 amount;     // How many LP tokens the user has provided.\\r\\n        uint256 rewardDebt; // Reward debt. See explanation below.\\r\\n        /** \\r\\n         * We do some fancy math here. Basically, any point in time, the amount of rewards\\r\\n         * entitled to a user but is pending to be distributed is:\\r\\n         *\\r\\n         *   pending reward = (user.amount * pool.accRewardPerShare) - user.rewardDebt\\r\\n         *\\r\\n         * Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\\r\\n         *   1. The pool's `accRewardPerShare` (and `lastRewardBlock`) gets updated.\\r\\n         *   2. User receives the pending reward sent to his/her address.\\r\\n         *   3. User's `amount` gets updated.\\r\\n         *   4. User's `rewardDebt` gets updated.\\r\\n         */\\r\\n    }\\r\\n\\r\\n    // Info of each pool.\\r\\n    struct PoolInfo {\\r\\n        IBEP20 lpToken;           // Address of LP token contract.\\r\\n        uint256 lastRewardBlock;  // Last block number that Rewards distribution occurs.\\r\\n        uint256 accRewardTokenPerShare; // Accumulated Rewards per share, times 1e30. See below.\\r\\n        uint32 allocPoint;       // How many allocation points assigned to this pool. Rewards to distribute per block.\\r\\n\\r\\n    }\\r\\n\\r\\n    // Info of each pool.\\r\\n    mapping(uint16 => PoolInfo) public poolInfo;\\r\\n    // Pids of pools added from masterchef\\r\\n    uint16[] public poolPids;\\r\\n    // Info of each user that stakes LP tokens.\\r\\n    mapping(uint16 => mapping(address => UserInfo)) public userInfo;\\r\\n    // Total allocation poitns. Must be the sum of all allocation points in all pools.\\r\\n    uint256 private totalAllocPoint = 0;\\r\\n    // The block number when Reward distribution starts.\\r\\n    uint256 public startBlock;\\r\\n    // Reward tokens distributed per block\\r\\n    uint128 public rewardPerBlock;\\r\\n    // Last block when distribution rewards ends\\r\\n    uint256 public endBlockRewards;\\r\\n    // Reward token from fees to Liquidity providers\\r\\n    IBEP20 public immutable rewardToken;\\r\\n    // Rewards already assigned to be distributed\\r\\n    uint256 public assignedRewards;\\r\\n    // Masterchef\\r\\n    address public immutable masterchef;\\r\\n\\r\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\r\\n    event DepositRewards(uint256 amount);\\r\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\r\\n    event EmergencyRewardWithdraw(address indexed user, uint256 amount);\\r\\n    event Harvest(address indexed user, uint256 indexed pid, uint256 amount);\\r\\n\\r\\n    constructor(IBEP20 _rewardToken, address _masterchef, uint256 _startBlock, uint256 _endBlockRewards) {\\r\\n        rewardToken = _rewardToken;\\r\\n        masterchef = _masterchef;\\r\\n        startBlock = _startBlock;\\r\\n        endBlockRewards = _endBlockRewards;\\r\\n    }\\r\\n    \\r\\n    modifier onlyMasterchef(){\\r\\n        require(msg.sender == masterchef, \\\"You are not the masterchef\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwnerOrMasterchef(){\\r\\n        require(msg.sender == masterchef || msg.sender == owner());\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    mapping(uint256 => bool) public poolExistence;\\r\\n    modifier nonDuplicated(uint256 _pid) {\\r\\n        require(poolExistence[_pid] == false, \\\"nonDuplicated: duplicated\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @dev Add a new lp to the pool. Can only be called by the owner.\\r\\n    function add(IBEP20 _lpToken, uint16 _pid) external onlyOwnerOrMasterchef nonDuplicated(_pid) {\\r\\n        _massUpdatePools();\\r\\n        uint256 lastRewardBlock = block.number > startBlock ? block.number : startBlock;\\r\\n        totalAllocPoint = totalAllocPoint.add(100);\\r\\n        poolExistence[_pid] = true;\\r\\n        poolPids.push(_pid);\\r\\n        poolInfo[_pid] = (PoolInfo({\\r\\n            lpToken: _lpToken,\\r\\n            allocPoint: 100,\\r\\n            lastRewardBlock: lastRewardBlock,\\r\\n            accRewardTokenPerShare: 0\\r\\n        }));\\r\\n    }\\r\\n\\r\\n    /// @dev Return reward multiplier over the given _from to _to block.\\r\\n    function getMultiplier(uint256 _from, uint256 _to) public view returns (uint256) {\\r\\n        if (_to <= endBlockRewards) {\\r\\n            return _to.sub(_from);\\r\\n        } else if (_from >= endBlockRewards) {\\r\\n            return 0;\\r\\n        } else {\\r\\n            return endBlockRewards.sub(_from);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @return Returns the pending Reward of the _user.\\r\\n    function pendingReward(uint16 _pid, address _user) external view returns (uint256) {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        UserInfo storage user = userInfo[_pid][_user];\\r\\n        uint256 accRewardTokenPerShare = pool.accRewardTokenPerShare;\\r\\n        uint256 lpSupply = pool.lpToken.balanceOf(address(masterchef));\\r\\n        if (block.number > pool.lastRewardBlock && lpSupply != 0) {\\r\\n            uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\\r\\n            uint256 tokenReward = multiplier.mul(rewardPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\\r\\n            accRewardTokenPerShare = accRewardTokenPerShare.add(tokenReward.mul(1e30).div(lpSupply));\\r\\n        }\\r\\n        return user.amount.mul(accRewardTokenPerShare).div(1e30).sub(user.rewardDebt);\\r\\n    }\\r\\n\\r\\n    /// @dev Update reward variables of the given pool to be up-to-date.\\r\\n    function _updatePool(uint16 _pid) private {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        if (block.number <= pool.lastRewardBlock) {\\r\\n            return;\\r\\n        }\\r\\n        uint256 lpSupply = pool.lpToken.balanceOf(address(masterchef));\\r\\n        if (lpSupply == 0 || rewardPerBlock == 0) {\\r\\n            pool.lastRewardBlock = block.number;\\r\\n            return;\\r\\n        }\\r\\n        uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\\r\\n        uint256 tokenReward = multiplier.mul(rewardPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\\r\\n        pool.accRewardTokenPerShare = pool.accRewardTokenPerShare.add(tokenReward.mul(1e30).div(lpSupply));\\r\\n        assignedRewards = assignedRewards.add(tokenReward);\\r\\n        pool.lastRewardBlock = block.number;\\r\\n    }\\r\\n\\r\\n    /// @dev Update reward variables for all pools. Be careful of gas spending!\\r\\n    function _massUpdatePools() private {\\r\\n        uint256 length = poolPids.length;\\r\\n        for (uint16 pid = 0; pid < length; pid++) {\\r\\n            _updatePool(poolPids[pid]);\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    /// @param _to address to send reward token to\\r\\n    /// @param _amount value of reward token to transfer\\r\\n    function safeTransferReward(address _to, uint256 _amount) internal {\\r\\n        rewardToken.safeTransfer(_to, _amount);\\r\\n    }\\r\\n\\r\\n    /// Increment balance into the contract to calculate and earn rewards\\r\\n    /// It assumes that there is no fee involved. It's, the masterchef should send the amount after fees.\\r\\n    /// @param _amount The amount to increment the balance\\r\\n    /// @param _pid Pool identifier\\r\\n    function incrementBalance(uint16 _pid,uint256 _amount, address _user) external onlyMasterchef{\\r\\n        require(poolExistence[_pid], \\\"pool not found\\\");\\r\\n        require(_amount > 0, \\\"IncrementBalance error: amount should be more than zero.\\\");\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        UserInfo storage user = userInfo[_pid][_user];\\r\\n        _updatePool(_pid);\\r\\n        user.amount = user.amount.add(_amount);\\r\\n        user.rewardDebt = user.amount.mul(pool.accRewardTokenPerShare).div(1e30);\\r\\n        emit Deposit(_user, _pid, _amount);\\r\\n    }\\r\\n\\r\\n    /// Reduce balance into the contract\\r\\n    /// @param _amount The amount to reduce the balance\\r\\n    /// @param _pid Pool identifier\\r\\n    function reduceBalance(uint16 _pid, uint256 _amount, address _user) external onlyMasterchef{\\r\\n        require(_amount > 0, \\\"ReduceBalance error: amount should be more than zero.\\\");\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        UserInfo storage user = userInfo[_pid][_user];\\r\\n        _updatePool(_pid);\\r\\n        if(user.amount < _amount){\\r\\n            _amount = user.amount;\\r\\n        }\\r\\n        if(_amount == 0){\\r\\n            return;\\r\\n        }\\r\\n        user.amount = user.amount.sub(_amount);\\r\\n        user.rewardDebt = user.amount.mul(pool.accRewardTokenPerShare).div(1e30);\\r\\n        emit Withdraw(_user, _pid, _amount);\\r\\n    }\\r\\n\\r\\n    /// Wthdraw rewards\\r\\n    /// Separated logic of any other withdraw() or reduceBalance() function to be more adaptable to the masterchef condition, as harvest intervals\\r\\n    /// @param _pid Pool identifier\\r\\n    function harvest(uint16 _pid, address _user) external onlyMasterchef{\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        UserInfo storage user = userInfo[_pid][_user];\\r\\n        _updatePool(_pid);\\r\\n        uint256 pending = user.amount.mul(pool.accRewardTokenPerShare).div(1e30).sub(user.rewardDebt);\\r\\n        if(pending > 0) {\\r\\n            uint256 currentRewardBalance = rewardBalance();\\r\\n            if(currentRewardBalance > 0) {\\r\\n                if(pending > currentRewardBalance) {\\r\\n                    pending = currentRewardBalance;\\r\\n                }\\r\\n                require(assignedRewards >= pending, \\\"Ups harvest\\\");\\r\\n                assignedRewards = assignedRewards.sub(pending);\\r\\n                safeTransferReward(_user, pending);\\r\\n                user.rewardDebt = user.amount.mul(pool.accRewardTokenPerShare).div(1e30);\\r\\n                emit Harvest(_user, _pid, pending);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// Obtain the reward balance of this contract.\\r\\n    /// @return Returns reward balance of this contract.\\r\\n    function rewardBalance() public view returns (uint256) {\\r\\n        return rewardToken.balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    /* Owner Functions */\\r\\n\\r\\n    /// @dev Deposit new reward to be distrivuted.\\r\\n    function depositRewards(uint256 _newRewards) external onlyOwner{\\r\\n        rewardToken.safeTransferFrom(msg.sender, address(this), _newRewards);\\r\\n        _massUpdatePools();\\r\\n        updateRewardPerBlock();\\r\\n        emit DepositRewards(_newRewards);\\r\\n    }\\r\\n\\r\\n    /// @dev Calculate the reward per block according to the available reward and the end block rewards.\\r\\n    function updateRewardPerBlock() internal{\\r\\n        uint256 rewardsAvailable = rewardToken.balanceOf(address(this)).sub(assignedRewards);\\r\\n        require(block.number < endBlockRewards, \\\"Rewards distribution finished\\\");\\r\\n        rewardPerBlock = uint128(rewardsAvailable.div(endBlockRewards.sub(block.number.max(startBlock))));\\r\\n    }\\r\\n\\r\\n    /// @dev Update last block to distribute rewards.\\r\\n    function updateEndBlockRewards(uint256 _endBlockReward) external onlyOwner{\\r\\n        _massUpdatePools();\\r\\n        endBlockRewards = _endBlockReward;\\r\\n        updateRewardPerBlock();\\r\\n    }\\r\\n\\r\\n    /** @dev Withdraw reward tokens to owner. Function in case something goes wrong.\\r\\n      * Only affects reawrd tokens here, not users funds in the masterchef.\\r\\n      */\\r\\n    function emergencyWithdrawRewards(uint256 _amount) external onlyOwner{\\r\\n        require(_amount <= rewardBalance(), 'not enough rewards');\\r\\n        safeTransferReward(msg.sender, rewardToken.balanceOf(address(this)));\\r\\n        rewardPerBlock = 0;\\r\\n        emit EmergencyRewardWithdraw(msg.sender, _amount);\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"/C/Users/Leandro/Repositorios/bullrun-contracts/contracts/interfaces/IBullNFT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.4.0;\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\n\\r\\ninterface IBullNFT is IERC721{\\r\\n\\r\\n    /// @dev Mint a new nft with a given _boostId to the _to address.\\r\\n    function mint(uint256 _boostId, address _to) external;\\r\\n\\r\\n    /// @return Return true if the actual supply of nft with the given _boostId is lower than the masSupply of that type of nft.\\r\\n    function canMint(uint256 _boostId) external view returns(bool);\\r\\n\\r\\n    /// @return Return the remaining amount of nft with the given _boostId can be mined before reach the maxSupply.\\r\\n    function remainingMint(uint256 _boostId) external view returns(uint256);\\r\\n\\r\\n    /// @return Return true if a _user has some nft with the given _boostId.\\r\\n    function hasBoost(address _user, uint256 _boostId) external view returns(bool);\\r\\n\\r\\n    /// @return Return the boostId of the given _nftId. If the nft hasn't a boost, returns 0.\\r\\n    function getBoost(uint256 _nftId) external view returns (uint256);\\r\\n\\r\\n    /// @return Return the bonus attribute of the given _nftId.\\r\\n    function getBonus(uint256 _nftId) external view returns(uint256);\\r\\n\\r\\n    /// @return Return the address allowed to mind nfts with the given _boostId.\\r\\n    function getAuthorizedMiner(uint256 _boostId) external view returns(address);\\r\\n}\"\r\n    },\r\n    \"/C/Users/Leandro/Repositorios/bullrun-contracts/contracts/interfaces/IBullReferral.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\n// File: contracts/libs/IBullReferral.sol\\r\\n\\r\\npragma solidity >=0.4.0;\\r\\n\\r\\ninterface IBullReferral {\\r\\n    /**\\r\\n     * @dev Record referral.\\r\\n     */\\r\\n    function recordReferral(address user, address referrer) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Record referral commission.\\r\\n     */\\r\\n    function recordReferralCommission(address referrer, uint256 commission) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Get the referrer address that referred the user.\\r\\n     */\\r\\n    function getReferrer(address user) external view returns (address);\\r\\n}\"\r\n    },\r\n    \"/C/Users/Leandro/Repositorios/bullrun-contracts/contracts/libs/BEP20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\n// File: contracts/libs/BEP20.sol\\r\\n\\r\\npragma solidity >=0.4.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"./IBEP20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the {IBEP20} interface.\\r\\n *\\r\\n * This implementation is agnostic to the way tokens are created. This means\\r\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\r\\n * For a generic mechanism see {BEP20PresetMinterPauser}.\\r\\n *\\r\\n * TIP: For a detailed writeup see our guide\\r\\n * https://forum.zeppelin.solutions/t/how-to-implement-BEP20-supply-mechanisms/226[How\\r\\n * to implement supply mechanisms].\\r\\n *\\r\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\r\\n * of returning `false` on failure. This behavior is nonetheless conventional\\r\\n * and does not conflict with the expectations of BEP20 applications.\\r\\n *\\r\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\r\\n * This allows applications to reconstruct the allowance for all accounts just\\r\\n * by listening to said events. Other implementations of the EIP may not emit\\r\\n * these events, as it isn't required by the specification.\\r\\n *\\r\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\r\\n * functions have been added to mitigate the well-known issues around setting\\r\\n * allowances. See {IBEP20-approve}.\\r\\n */\\r\\ncontract BEP20 is Context, IBEP20, Ownable {\\r\\n    using SafeMath for uint256;\\r\\n    using Address for address;\\r\\n\\r\\n    mapping(address => uint256) private _balances;\\r\\n\\r\\n    mapping(address => mapping(address => uint256)) private _allowances;\\r\\n\\r\\n    uint256 private _totalSupply;\\r\\n\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n    uint8 private _decimals;\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\r\\n     * a default value of 18.\\r\\n     *\\r\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\r\\n     *\\r\\n     * All three of these values are immutable: they can only be set once during\\r\\n     * construction.\\r\\n     */\\r\\n    constructor(string memory name, string memory symbol) public {\\r\\n        _name = name;\\r\\n        _symbol = symbol;\\r\\n        _decimals = 18;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the bep token owner.\\r\\n     */\\r\\n    function getOwner() external override view returns (address) {\\r\\n        return owner();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the token name.\\r\\n     */\\r\\n    function name() public override view returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the token decimals.\\r\\n     */\\r\\n    function decimals() public override view returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the token symbol.\\r\\n     */\\r\\n    function symbol() public override view returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {BEP20-totalSupply}.\\r\\n     */\\r\\n    function totalSupply() public override view returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {BEP20-balanceOf}.\\r\\n     */\\r\\n    function balanceOf(address account) public override view returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {BEP20-transfer}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - the caller must have a balance of at least `amount`.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\\r\\n        _transfer(_msgSender(), recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {BEP20-allowance}.\\r\\n     */\\r\\n    function allowance(address owner, address spender) public override view returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {BEP20-approve}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) public override returns (bool) {\\r\\n        _approve(_msgSender(), spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {BEP20-transferFrom}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\r\\n     * required by the EIP. See the note at the beginning of {BEP20};\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - `sender` and `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     * - the caller must have allowance for `sender`'s tokens of at least\\r\\n     * `amount`.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) public override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n        _approve(\\r\\n            sender,\\r\\n            _msgSender(),\\r\\n            _allowances[sender][_msgSender()].sub(amount, \\\"BEP20: transfer amount exceeds allowance\\\")\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {BEP20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\\r\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {BEP20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     * - `spender` must have allowance for the caller of at least\\r\\n     * `subtractedValue`.\\r\\n     */\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\\r\\n        _approve(\\r\\n            _msgSender(),\\r\\n            spender,\\r\\n            _allowances[_msgSender()][spender].sub(subtractedValue, \\\"BEP20: decreased allowance below zero\\\")\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Creates `amount` tokens and assigns them to `msg.sender`, increasing\\r\\n     * the total supply.\\r\\n     *\\r\\n     * Requirements\\r\\n     *\\r\\n     * - `msg.sender` must be the token owner\\r\\n     */\\r\\n    function mint(uint256 amount) public onlyOwner returns (bool) {\\r\\n        _mint(_msgSender(), amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\r\\n     *\\r\\n     * This is internal function is equivalent to {transfer}, and can be used to\\r\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `sender` cannot be the zero address.\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     */\\r\\n    function _transfer(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        require(sender != address(0), \\\"BEP20: transfer from the zero address\\\");\\r\\n        require(recipient != address(0), \\\"BEP20: transfer to the zero address\\\");\\r\\n\\r\\n        _balances[sender] = _balances[sender].sub(amount, \\\"BEP20: transfer amount exceeds balance\\\");\\r\\n        _balances[recipient] = _balances[recipient].add(amount);\\r\\n        emit Transfer(sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\r\\n     * the total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `from` set to the zero address.\\r\\n     *\\r\\n     * Requirements\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     */\\r\\n    function _mint(address account, uint256 amount) internal {\\r\\n        require(account != address(0), \\\"BEP20: mint to the zero address\\\");\\r\\n\\r\\n        _totalSupply = _totalSupply.add(amount);\\r\\n        _balances[account] = _balances[account].add(amount);\\r\\n        emit Transfer(address(0), account, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\r\\n     * total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `to` set to the zero address.\\r\\n     *\\r\\n     * Requirements\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     * - `account` must have at least `amount` tokens.\\r\\n     */\\r\\n    function _burn(address account, uint256 amount) internal {\\r\\n        require(account != address(0), \\\"BEP20: burn from the zero address\\\");\\r\\n\\r\\n        _balances[account] = _balances[account].sub(amount, \\\"BEP20: burn amount exceeds balance\\\");\\r\\n        _totalSupply = _totalSupply.sub(amount);\\r\\n        emit Transfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\r\\n     *\\r\\n     * This is internal function is equivalent to `approve`, and can be used to\\r\\n     * e.g. set automatic allowances for certain subsystems, etc.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `owner` cannot be the zero address.\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function _approve(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        require(owner != address(0), \\\"BEP20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"BEP20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\\r\\n     * from the caller's allowance.\\r\\n     *\\r\\n     * See {_burn} and {_approve}.\\r\\n     */\\r\\n    function _burnFrom(address account, uint256 amount) internal {\\r\\n        _burn(account, amount);\\r\\n        _approve(\\r\\n            account,\\r\\n            _msgSender(),\\r\\n            _allowances[account][_msgSender()].sub(amount, \\\"BEP20: burn amount exceeds allowance\\\")\\r\\n        );\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"/C/Users/Leandro/Repositorios/bullrun-contracts/contracts/libs/IBEP20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\n// File: contracts/libs/IBEP20.sol\\r\\n\\r\\npragma solidity >=0.4.0;\\r\\n\\r\\ninterface IBEP20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the token decimals.\\r\\n     */\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the token symbol.\\r\\n     */\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the token name.\\r\\n     */\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the bep token owner.\\r\\n     */\\r\\n    function getOwner() external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address _owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\"\r\n    },\r\n    \"/C/Users/Leandro/Repositorios/bullrun-contracts/contracts/libs/SafeBEP20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\n// File: contracts/libs/SafeBEP20.sol\\r\\n\\r\\npragma solidity >=0.6.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"./IBEP20.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title SafeBEP20\\r\\n * @dev Wrappers around BEP20 operations that throw on failure (when the token\\r\\n * contract returns false). Tokens that return no value (and instead revert or\\r\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\r\\n * successful.\\r\\n * To use this library you can add a `using SafeBEP20 for IBEP20;` statement to your contract,\\r\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\r\\n */\\r\\nlibrary SafeBEP20 {\\r\\n    using SafeMath for uint256;\\r\\n    using Address for address;\\r\\n\\r\\n    function safeTransfer(\\r\\n        IBEP20 token,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        IBEP20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deprecated. This function has issues similar to the ones found in\\r\\n     * {IBEP20-approve}, and its usage is discouraged.\\r\\n     *\\r\\n     * Whenever possible, use {safeIncreaseAllowance} and\\r\\n     * {safeDecreaseAllowance} instead.\\r\\n     */\\r\\n    function safeApprove(\\r\\n        IBEP20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        // safeApprove should only be called when setting an initial allowance,\\r\\n        // or when resetting it to zero. To increase and decrease it, use\\r\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\r\\n        // solhint-disable-next-line max-line-length\\r\\n        require(\\r\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeBEP20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\r\\n    }\\r\\n\\r\\n    function safeIncreaseAllowance(\\r\\n        IBEP20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n    }\\r\\n\\r\\n    function safeDecreaseAllowance(\\r\\n        IBEP20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(\\r\\n            value,\\r\\n            \\\"SafeBEP20: decreased allowance below zero\\\"\\r\\n        );\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function _callOptionalReturn(IBEP20 token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\r\\n        // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeBEP20: low-level call failed\\\");\\r\\n        if (returndata.length > 0) {\\r\\n            // Return data is optional\\r\\n            // solhint-disable-next-line max-line-length\\r\\n            require(abi.decode(returndata, (bool)), \\\"SafeBEP20: BEP20 operation did not succeed\\\");\\r\\n        }\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n  /**\\n   * @dev Implementation of the {IERC721Receiver} interface.\\n   *\\n   * Accepts all token transfers.\\n   * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n   */\\ncontract ERC721Holder is IERC721Receiver {\\n\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address, address, uint256, bytes memory) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract BullToken\",\"name\":\"_bull\",\"type\":\"address\"},{\"internalType\":\"contract IBullNFT\",\"name\":\"_bullNFT\",\"type\":\"address\"},{\"internalType\":\"contract IBullReferral\",\"name\":\"_bullReferral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"_bullPerBlock\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"}],\"name\":\"DepositNFT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"EmissionRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"commissionAmount\",\"type\":\"uint256\"}],\"name\":\"ReferralCommissionPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountLockedUp\",\"type\":\"uint256\"}],\"name\":\"RewardLockedUp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountReward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"}],\"name\":\"WithdrawNFT\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAXIMUM_HARVEST_INTERVAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAXIMUM_REFERRAL_COMMISSION_RATE\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_allocPoint\",\"type\":\"uint32\"},{\"internalType\":\"contract IBEP20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_depositFeeBP\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"_harvestInterval\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"_withRewards\",\"type\":\"bool\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bull\",\"outputs\":[{\"internalType\":\"contract BullToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bullNFT\",\"outputs\":[{\"internalType\":\"contract IBullNFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bullPerBlock\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bullReferral\",\"outputs\":[{\"internalType\":\"contract IBullReferral\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_pid\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"canHarvest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_pid\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_pid\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"}],\"name\":\"depositNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_pid\",\"type\":\"uint16\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_pid\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingBull\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolExistence\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accBullPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStrength\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"allocPoint\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"harvestInterval\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"depositFeeBP\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referralCommissionRate\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardDistribution\",\"outputs\":[{\"internalType\":\"contract RewardDistribution\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_allocPoint\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"_depositFeeBP\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"_harvestInterval\",\"type\":\"uint32\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devAddress\",\"type\":\"address\"}],\"name\":\"setDevAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"}],\"name\":\"setFeeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_referralCommissionRate\",\"type\":\"uint16\"}],\"name\":\"setReferralCommissionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract RewardDistribution\",\"name\":\"_rewardDistribution\",\"type\":\"address\"}],\"name\":\"setRewardDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLockedUpRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_bullPerBlock\",\"type\":\"uint128\"}],\"name\":\"updateEmissionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardLockedUp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"strength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"nextHarvestUntil\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"lastHarvest\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_pid\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_pid\",\"type\":\"uint16\"}],\"name\":\"withdrawNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Masterchef", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000edd4b24be3c43de98989c233e67db29dc6554fc6000000000000000000000000b86553ea267814bc73c676f78f6e0387fa093eb600000000000000000000000066351a42d6e4851b21e2b2cf1d4334eb264d4ac5000000000000000000000000f04b8222d883108432bff41981bfec3533429827000000000000000000000000000000000000000000000000a090e5b3134500000000000000000000000000000000000000000000000000000000000000fae920", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}