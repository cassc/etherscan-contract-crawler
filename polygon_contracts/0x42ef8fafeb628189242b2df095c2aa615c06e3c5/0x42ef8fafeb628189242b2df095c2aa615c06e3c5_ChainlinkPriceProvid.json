{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/providers/ChainlinkPriceProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./PriceProvider.sol\\\";\\r\\nimport \\\"../interfaces/IAggregatorV3Interface.sol\\\";\\r\\n\\r\\ncontract ChainlinkPriceProvider is PriceProvider {\\r\\n    address immutable USD = 0x0000000000000000000000000000000000000840;\\r\\n    event CoinPairSet(address coin, address pair, address caller);\\r\\n    event CoinPairRevoked(address coin, address caller);\\r\\n\\r\\n    constructor(\\r\\n        address priceOracle,\\r\\n        uint256 providerNativeFiat //iso4217NumericCode\\r\\n    ) PriceProvider(priceOracle, providerNativeFiat) {\\r\\n        // set up at once the pair of fiatUSDCoin\\r\\n        // (address of Coin 0x0000000000000000000000000000000000000840)\\r\\n        // it has to have the address of Pair:0x0000000000000000000000000000000000000840\\r\\n        // to return the price = 1 for USD fiat\\r\\n        _registerCoinPair(USD, USD);\\r\\n    }\\r\\n\\r\\n    mapping(address coinAddress => address usdPriceFeedAddress) coinPair;\\r\\n\\r\\n    function setCoinPair(\\r\\n        address coinAddress,\\r\\n        address pairToUSD\\r\\n    ) external onlyTechnicalRole {\\r\\n        _registerCoinPair(coinAddress, pairToUSD);\\r\\n    }\\r\\n\\r\\n    function revokeCoinPair(address coinAddress) external onlyTechnicalRole {\\r\\n        _revokeCoinPair(coinAddress);\\r\\n    }\\r\\n\\r\\n    function getCoinPair(address coinAddress) public view returns (address) {\\r\\n        return coinPair[coinAddress];\\r\\n    }\\r\\n\\r\\n    function providerIncludesCoin(\\r\\n        address coinToCheck\\r\\n    ) public view override returns (bool isIncluded) {\\r\\n        isIncluded = coinPair[coinToCheck] != address(0);\\r\\n    }\\r\\n\\r\\n    function _registerCoinPair(\\r\\n        address coinAddress,\\r\\n        address pairToUSD\\r\\n    ) internal override {\\r\\n        coinPair[coinAddress] = pairToUSD;\\r\\n        emit CoinPairSet(coinAddress, pairToUSD, _msgSender());\\r\\n    }\\r\\n\\r\\n    function _revokeCoinPair(address coinAddress) internal override {\\r\\n        delete coinPair[coinAddress];\\r\\n        emit CoinPairRevoked(coinAddress, _msgSender());\\r\\n    }\\r\\n\\r\\n    function _getCoinPriceInProviderFiat(\\r\\n        address coin\\r\\n    )\\r\\n        internal\\r\\n        view\\r\\n        override\\r\\n        returns (\\r\\n            bool priceProvided,\\r\\n            uint256 priceInProviderFiat,\\r\\n            uint256 priceDecimals,\\r\\n            uint256 providerNativeFiat\\r\\n        )\\r\\n    {\\r\\n        if (coin == USD) {\\r\\n            priceInProviderFiat = 1000000;\\r\\n            priceDecimals = 6;\\r\\n        } else {\\r\\n            IAggregatorV3Interface pF = IAggregatorV3Interface(\\r\\n                getCoinPair(coin)\\r\\n            );\\r\\n            (, int price, , , ) = pF.latestRoundData();\\r\\n            priceInProviderFiat = uint256(price);\\r\\n            priceDecimals = uint256(pF.decimals());\\r\\n        }\\r\\n\\r\\n        priceProvided = true;\\r\\n        providerNativeFiat = PROVIDER_FIAT;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/providers/PriceProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../interfaces/IPriceOracle.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\n\\r\\ncontract PriceProvider is Context {\\r\\n    uint256 immutable PROVIDER_FIAT;\\r\\n    address ORACLE;\\r\\n\\r\\n    error AccessDenied(address deniedAccount);\\r\\n\\r\\n    event PriceOracleSet(address oracle, address caller);\\r\\n\\r\\n    modifier onlyTechnicalRole() {\\r\\n        if (!IPriceOracle(ORACLE).hasTechnicalRole(_msgSender()))\\r\\n            revert AccessDenied(_msgSender());\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(address priceOracle, uint256 providerNativeFiat) {\\r\\n        _setOracle(priceOracle);\\r\\n        PROVIDER_FIAT = providerNativeFiat;\\r\\n    }\\r\\n\\r\\n    function setOracle(address newPriceOracle) external onlyTechnicalRole {\\r\\n        _setOracle(newPriceOracle);\\r\\n    }\\r\\n\\r\\n    function providerFiat() external view returns (uint256) {\\r\\n        return PROVIDER_FIAT;\\r\\n    }\\r\\n\\r\\n    function getCoinPriceInProviderFiat(\\r\\n        address targetCoin\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            bool priceProvided,\\r\\n            uint256 priceInProviderFiat,\\r\\n            uint256 priceDecimals,\\r\\n            uint256 providerNativeFiat\\r\\n        )\\r\\n    {\\r\\n        if (providerIncludesCoin(targetCoin))\\r\\n            (\\r\\n                priceProvided,\\r\\n                priceInProviderFiat,\\r\\n                priceDecimals,\\r\\n                providerNativeFiat\\r\\n            ) = _getCoinPriceInProviderFiat(targetCoin);\\r\\n    }\\r\\n\\r\\n    function providerIncludesCoin(\\r\\n        address coinToCheck\\r\\n    ) public view virtual returns (bool isIncluded) {}\\r\\n\\r\\n    function _getCoinPriceInProviderFiat(\\r\\n        address targetCoin\\r\\n    )\\r\\n        internal\\r\\n        view\\r\\n        virtual\\r\\n        returns (\\r\\n            bool priceProvided,\\r\\n            uint256 priceInProviderFiat,\\r\\n            uint256 priceDecimals,\\r\\n            uint256 providerNativeFiat\\r\\n        )\\r\\n    {}\\r\\n\\r\\n    function _registerCoinPair(\\r\\n        address coinAddress,\\r\\n        address pair\\r\\n    ) internal virtual {}\\r\\n\\r\\n    function _registerCoinPair(\\r\\n        address coinAddress,\\r\\n        string memory pair\\r\\n    ) internal virtual {}\\r\\n\\r\\n    function _registerCoinPair(\\r\\n        address coinAddress,\\r\\n        uint256 pair\\r\\n    ) internal virtual {}\\r\\n\\r\\n    function _revokeCoinPair(address coinAddress) internal virtual {}\\r\\n\\r\\n    function _setOracle(address newOracle) internal {\\r\\n        ORACLE = newOracle;\\r\\n        emit PriceOracleSet(newOracle, _msgSender());\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/interfaces/IPriceOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IPriceOracle {\\r\\n    function hasTechnicalRole(address account) external view returns (bool);\\r\\n\\r\\n    function getPriceProvidersList() external view returns (address[] memory);\\r\\n\\r\\n    function numberOfProviders() external view returns (uint256);\\r\\n\\r\\n    function numberOfProvidersByFiat(\\r\\n        uint256 iso4217NumericCode\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function getPriceProvidersListByFiat(\\r\\n        uint256 iso4217NumericCode\\r\\n    ) external view returns (address[] memory);\\r\\n\\r\\n    function coinExistsInOracle(\\r\\n        address coin\\r\\n    ) external view returns (bool isCoinExists);\\r\\n\\r\\n    function getCoinPrice(\\r\\n        uint256 fiatForPrice,\\r\\n        address targetCoin,\\r\\n        address relatedCoin\\r\\n    ) external view returns (bool priceProvided, uint256 price);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/interfaces/IAggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IAggregatorV3Interface {\\r\\n  function decimals() external view returns (uint8);\\r\\n  \\r\\n  function latestRoundData()\\r\\n    external\\r\\n    view\\r\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceOracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"providerNativeFiat\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"deniedAccount\",\"type\":\"address\"}],\"name\":\"AccessDenied\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"coin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"CoinPairRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"coin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"CoinPairSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"PriceOracleSet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"coinAddress\",\"type\":\"address\"}],\"name\":\"getCoinPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"targetCoin\",\"type\":\"address\"}],\"name\":\"getCoinPriceInProviderFiat\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"priceProvided\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"priceInProviderFiat\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceDecimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"providerNativeFiat\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"providerFiat\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"coinToCheck\",\"type\":\"address\"}],\"name\":\"providerIncludesCoin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isIncluded\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"coinAddress\",\"type\":\"address\"}],\"name\":\"revokeCoinPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"coinAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pairToUSD\",\"type\":\"address\"}],\"name\":\"setCoinPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPriceOracle\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ChainlinkPriceProvider", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000004e9651ad369d8f986935852c945338f76b5fb3600000000000000000000000000000000000000000000000000000000000000348", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}