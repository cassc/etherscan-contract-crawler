{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/PhiShop.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\n//                 ____    ____\\n//                /\\\\___\\\\  /\\\\___\\\\\\n//       ________/ /   /_ \\\\/___/\\n//      /\\\\_______\\\\/   /__\\\\___\\\\\\n//     / /       /       /   /\\n//    / /   /   /   /   /   /\\n//   / /   /___/___/___/___/\\n//  / /   /\\n//  \\\\/___/\\n\\npragma solidity ^0.8.16;\\nimport { IFreeObject } from \\\"./interfaces/IFreeObject.sol\\\";\\nimport { IPremiumObject } from \\\"./interfaces/IPremiumObject.sol\\\";\\nimport { IWallPaper } from \\\"./interfaces/IWallPaper.sol\\\";\\nimport { IBasePlate } from \\\"./interfaces/IBasePlate.sol\\\";\\nimport { IPhiMap } from \\\"./interfaces/IPhiMap.sol\\\";\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\n/// @title PhiShop Contract\\ncontract PhiShop is ReentrancyGuard {\\n    /* --------------------------------- ****** --------------------------------- */\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   CONFIG                                   */\\n    /* -------------------------------------------------------------------------- */\\n    address public immutable freeObjectAddress;\\n    address public immutable premiumObjectAddress;\\n    address public immutable wallPaperAddress;\\n    address public immutable basePlateAddress;\\n    address public immutable mapAddress;\\n    /* --------------------------------- ****** --------------------------------- */\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   EVENTS                                   */\\n    /* -------------------------------------------------------------------------- */\\n    event LogShopBuyObject(address sender, address receiverAddress, uint256 buyCount, uint256 buyValue);\\n    event ShopDepositSuccess(address sender, string name, uint256 depositAmount);\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   ERRORS                                   */\\n    /* -------------------------------------------------------------------------- */\\n    error NotPhilandOwner(address sender, address owner);\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                               INITIALIZATION                               */\\n    /* -------------------------------------------------------------------------- */\\n    // initialize contract while deployment with contract's collection name and token\\n    constructor(\\n        address _freeObjectAddress,\\n        address _premiumObjectAddress,\\n        address _wallPaperAddress,\\n        address _basePlateAddress,\\n        address _mapAddress\\n    ) {\\n        require(_freeObjectAddress != address(0), \\\"cant set address 0\\\");\\n        require(_premiumObjectAddress != address(0), \\\"cant set address 0\\\");\\n        require(_wallPaperAddress != address(0), \\\"cant set address 0\\\");\\n        require(_basePlateAddress != address(0), \\\"cant set address 0\\\");\\n        require(_mapAddress != address(0), \\\"cant set address 0\\\");\\n        freeObjectAddress = _freeObjectAddress;\\n        premiumObjectAddress = _premiumObjectAddress;\\n        wallPaperAddress = _wallPaperAddress;\\n        basePlateAddress = _basePlateAddress;\\n        mapAddress = _mapAddress;\\n    }\\n\\n    /* --------------------------------- ****** --------------------------------- */\\n    /* -------------------------------------------------------------------------- */\\n    /*                               PUBLIC FUNCTION                              */\\n    /* -------------------------------------------------------------------------- */\\n    /*\\n     * @title shopBuyObject\\n     * @param receiverAddress : receive address\\n     * @param ftokenIds : free object tokenId list\\n     * @param ptokenIds : premium object tokenId list\\n     * @param wtokenIds : wallpaper tokenId list\\n     */\\n    function shopBuyObject(\\n        address receiverAddress,\\n        uint256[] memory ftokenIds,\\n        uint256[] memory ptokenIds,\\n        uint256[] memory wtokenIds,\\n        uint256[] memory btokenIds\\n    ) external payable nonReentrant {\\n        // check if the function caller is not an zero account address\\n        require(msg.sender != address(0), \\\"invalid address\\\");\\n\\n        if (ftokenIds.length != 0) {\\n            IFreeObject _fobject = IFreeObject(freeObjectAddress);\\n            _fobject.batchGetFreeObjectFromShop(receiverAddress, ftokenIds);\\n        }\\n        if (ptokenIds.length != 0) {\\n            IPremiumObject _pobject = IPremiumObject(premiumObjectAddress);\\n            uint256 pPrice = _pobject.getObjectsPrice(ptokenIds);\\n            _pobject.batchBuyObjectFromShop{ value: pPrice }(receiverAddress, ptokenIds);\\n        }\\n        if (wtokenIds.length != 0) {\\n            IWallPaper _wobject = IWallPaper(wallPaperAddress);\\n            uint256 wPrice = _wobject.getObjectsPrice(wtokenIds);\\n            _wobject.batchWallPaperFromShop{ value: wPrice }(receiverAddress, wtokenIds);\\n        }\\n        if (btokenIds.length != 0) {\\n            IBasePlate _bobject = IBasePlate(basePlateAddress);\\n            uint256 bPrice = _bobject.getObjectsPrice(btokenIds);\\n            _bobject.batchBasePlateFromShop{ value: bPrice }(receiverAddress, btokenIds);\\n        }\\n        emit LogShopBuyObject(\\n            msg.sender,\\n            receiverAddress,\\n            ftokenIds.length + ptokenIds.length + wtokenIds.length + btokenIds.length,\\n            msg.value\\n        );\\n    }\\n\\n    /*\\n     * @title shopBuyAndDepositObject\\n     * @param receiverAddress : receive address\\n     * @param ftokenIds : free object tokenId list\\n     * @param ptokenIds : premium object tokenId list\\n     * @param wtokenIds : wallpaper tokenId list\\n     * @param depositContractAddresses : array of deposit contract addresses\\n     * @param depositTokenIds :  array of deposit token ids\\n     * @param depositAmounts :  array of deposit amounts\\n     */\\n    function shopBuyAndDepositObject(\\n        string memory name,\\n        uint256[] memory ftokenIds,\\n        uint256[] memory ptokenIds,\\n        uint256[] memory wtokenIds,\\n        uint256[] memory btokenIds,\\n        address[] memory depositContractAddresses,\\n        uint256[] memory depositTokenIds,\\n        uint256[] memory depositAmounts\\n    ) external payable nonReentrant {\\n        // check if the function caller is not an zero account address\\n        require(msg.sender != address(0), \\\"invalid address\\\");\\n\\n        IPhiMap _map = IPhiMap(mapAddress);\\n\\n        if (_map.ownerOfPhiland(name) != msg.sender) {\\n            revert NotPhilandOwner({ sender: msg.sender, owner: _map.ownerOfPhiland(name) });\\n        }\\n\\n        if (ftokenIds.length != 0) {\\n            IFreeObject _fobject = IFreeObject(freeObjectAddress);\\n            _fobject.batchGetFreeObjectFromShop(msg.sender, ftokenIds);\\n        }\\n        if (ptokenIds.length != 0) {\\n            IPremiumObject _pobject = IPremiumObject(premiumObjectAddress);\\n            uint256 pPrice = _pobject.getObjectsPrice(ptokenIds);\\n            _pobject.batchBuyObjectFromShop{ value: pPrice }(msg.sender, ptokenIds);\\n        }\\n        if (wtokenIds.length != 0) {\\n            IWallPaper _wobject = IWallPaper(wallPaperAddress);\\n            uint256 wPrice = _wobject.getObjectsPrice(wtokenIds);\\n            _wobject.batchWallPaperFromShop{ value: wPrice }(msg.sender, wtokenIds);\\n        }\\n        if (btokenIds.length != 0) {\\n            IBasePlate _bobject = IBasePlate(basePlateAddress);\\n            uint256 bPrice = _bobject.getObjectsPrice(btokenIds);\\n            _bobject.batchBasePlateFromShop{ value: bPrice }(msg.sender, btokenIds);\\n        }\\n\\n        emit LogShopBuyObject(\\n            msg.sender,\\n            msg.sender,\\n            ftokenIds.length + ptokenIds.length + wtokenIds.length + btokenIds.length,\\n            msg.value\\n        );\\n\\n        _map.batchDepositObjectFromShop(name, msg.sender, depositContractAddresses, depositTokenIds, depositAmounts);\\n        emit ShopDepositSuccess(msg.sender, name, depositAmounts.length);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFreeObject.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.16;\\n\\ninterface IFreeObject {\\n    struct Size {\\n        uint8 x;\\n        uint8 y;\\n        uint8 z;\\n    }\\n\\n    function getSize(uint256 tokenId) external view returns (Size memory);\\n\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    function setOwner(address newOwner) external;\\n\\n    function batchGetFreeObjectFromShop(address to, uint256[] memory tokenIds) external;\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPremiumObject.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.16;\\n\\ninterface IPremiumObject {\\n    struct Size {\\n        uint8 x;\\n        uint8 y;\\n        uint8 z;\\n    }\\n\\n    function getSize(uint256 tokenId) external view returns (Size memory);\\n\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    function setOwner(address newOwner) external;\\n\\n    function getObjectsPrice(uint256[] memory tokenIds) external view returns (uint256);\\n\\n    function batchBuyObjectFromShop(address to, uint256[] memory tokenIds) external payable;\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IWallPaper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.16;\\n\\ninterface IWallPaper {\\n    struct Size {\\n        uint8 x;\\n        uint8 y;\\n        uint8 z;\\n    }\\n\\n    function getSize(uint256 tokenId) external view returns (Size memory);\\n\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    function setOwner(address newOwner) external;\\n\\n    function getObjectsPrice(uint256[] memory tokenIds) external view returns (uint256);\\n\\n    function batchWallPaperFromShop(address to, uint256[] memory tokenIds) external payable;\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IBasePlate.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.16;\\n\\ninterface IBasePlate {\\n    struct Size {\\n        uint8 x;\\n        uint8 y;\\n        uint8 z;\\n    }\\n\\n    function getSize(uint256 tokenId) external view returns (Size memory);\\n\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    function setOwner(address newOwner) external;\\n\\n    function getObjectsPrice(uint256[] memory tokenIds) external view returns (uint256);\\n\\n    function batchBasePlateFromShop(address to, uint256[] memory tokenIds) external payable;\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPhiMap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.16;\\n\\ninterface IPhiMap {\\n    struct Object {\\n        address contractAddress;\\n        uint256 tokenId;\\n        uint8 xStart;\\n        uint8 yStart;\\n    }\\n    struct Link {\\n        string title;\\n        string url;\\n        // uint256 data;\\n    }\\n\\n    function create(string calldata name, address caller) external;\\n\\n    function changePhilandOwner(string calldata name, address caller) external;\\n\\n    function ownerOfPhiland(string memory name) external returns (address);\\n\\n    function mapInitialization(string memory name) external;\\n\\n    function save(\\n        string memory name,\\n        uint256[] memory removeIndexArray,\\n        Object[] memory objectDatas,\\n        Link[] memory links,\\n        address wcontractAddress,\\n        uint256 wtokenId\\n        // address bcontractAddress,\\n        // uint256 btokenId\\n    ) external;\\n\\n    function batchDepositObject(\\n        string memory name,\\n        address[] memory contractAddresses,\\n        uint256[] memory tokenIds,\\n        uint256[] memory amounts\\n    ) external;\\n\\n    function batchDepositObjectFromShop(\\n        string memory name,\\n        address msgSender,\\n        address[] memory contractAddresses,\\n        uint256[] memory tokenIds,\\n        uint256[] memory amounts\\n    ) external;\\n\\n    function batchWithdrawObject(\\n        string memory name,\\n        address[] memory contractAddresses,\\n        uint256[] memory tokenIds,\\n        uint256[] memory amounts\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 800\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_freeObjectAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_premiumObjectAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wallPaperAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_basePlateAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mapAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"NotPhilandOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiverAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyValue\",\"type\":\"uint256\"}],\"name\":\"LogShopBuyObject\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"}],\"name\":\"ShopDepositSuccess\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"basePlateAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freeObjectAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mapAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"premiumObjectAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"ftokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ptokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"wtokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"btokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"depositContractAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"depositTokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"depositAmounts\",\"type\":\"uint256[]\"}],\"name\":\"shopBuyAndDepositObject\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ftokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ptokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"wtokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"btokenIds\",\"type\":\"uint256[]\"}],\"name\":\"shopBuyObject\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wallPaperAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "PhiShop", "CompilerVersion": "v0.8.16+commit.07a7930e", "OptimizationUsed": "1", "Runs": "800", "ConstructorArguments": "000000000000000000000000017bd973fe4d3e0f81bab69bccccb44679d86eab000000000000000000000000312e2f8ad479bedd32c7a752bcb68fa24550caf7000000000000000000000000ffed52afd3287f791496f8e8490f11d3db6d54f0000000000000000000000000e83d625e021f8238f418c068d256fecede705970000000000000000000000000e8b6395d223c9d3d85e162f2cb2023bc9088a908", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}