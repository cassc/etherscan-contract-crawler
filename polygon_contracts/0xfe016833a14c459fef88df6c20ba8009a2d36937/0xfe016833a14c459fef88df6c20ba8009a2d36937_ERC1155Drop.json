{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/ERC1155Drop.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.19;\\n\\nimport \\\"./IERC1155Drop.sol\\\";\\nimport \\\"../openzeppelin-contracts/contracts/access/Ownable.sol\\\";\\nimport \\\"../openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\nimport \\\"../openzeppelin-contracts/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../openzeppelin-contracts/contracts/utils/Address.sol\\\";\\n\\ncontract ERC1155Drop is IERC1155Drop, Ownable, IERC165, IERC1155Receiver {\\n\\n    /**\\n     * @dev Data holder for individual drops\\n     * @param arrayIndex Links back to the index if this drop's tokenId in the _tokenIds array.\\n     *        This is required to efficiently remove a specific drop again, otherwise we would need to perform a linear search in `_tokenIds`\\n     * @param price This drop's price in Wei per token\\n     * @param maxClaimable The maximum amount of tokens of this id that can be purchased\\n     * @param currentClaimed Tracks the amount that has already been purchased\\n     * @param startTime The unix timestamp in seconds after which this drop becomes active\\n     * @param endTime The unix timestamp in seconds after which this drop closes and no longer allows purchases. Alternatively we use 0 as special value to mark an open-ended sale\\n     */\\n    struct DropData {\\n        uint256 arrayIndex;\\n        uint256 price;\\n        uint256 maxClaimable;\\n        uint256 currentClaimed;\\n        uint64 startTime;\\n        uint64 endTime;\\n    }\\n\\n    /**\\n     * @dev Contains all token ids currently set up in this drop. This helps enumerating them for frontend display\\n     *      This must be synchronized with the related _drops mapping\\n     */\\n    uint256[] private _tokenIds;\\n\\n    /**\\n     * @dev Contains drop configurations, i.e. price, amount, time bounds for each drop uniquely identified by the token id\\n     *      This must be synchronized with the related _tokenIds array\\n     */\\n    mapping(uint256 => DropData)  private _drops;\\n\\n    /**\\n     * @dev The ERC1155 token contract containing all tokens being dropped, this is used to eventually transfer tokens upon purchase and to retrieve metadata\\n     *      We don't need to know the precise implementation, only that it's an ERC1155 contract with the metadata extension\\n     */\\n    IERC1155MetadataURI private token;\\n\\n    /**\\n     * @dev The address eventually receiving all payments made to purchase tokens in this drop. This can be a simple address but will most likely be a PaymentSplitter\\n     *      to securely share revenue between all involved parties\\n     */\\n    address payable private paymentReceiver;\\n\\n    /**\\n     * @dev Constructor; validates the initial setup of the token contract and payment receiver. Neither of these can be changed  later on\\n     * @param _token The address of the ERC1155 token being dropped\\n     * @param _paymentReceiver The address/contract eventually receiving all MATIC that was received from purchases.\\n     */\\n    constructor(address _token, address payable _paymentReceiver) {\\n        require(_paymentReceiver != address(0x0), \\\"payment receiver can not be 0x0\\\");\\n        token = IERC1155MetadataURI(_token);\\n        require(token.supportsInterface(type(IERC1155MetadataURI).interfaceId), \\\"token does not implement metadata interface\\\");\\n        paymentReceiver = _paymentReceiver;\\n    }\\n\\n    /**\\n     * @dev Function to call when purchasing tokens. A MATIC value must be attached to the transaction.\\n     *      It is validated that this value matches the exact overall price determined by the token ids and amounts specified, i.e. it is not acceptable to overpay and expect \\\"change\\\"\\n     * @param recipient The address to transfer tokens to\\n     * @param tokenIds The token IDs to purchase\\n     * @param amounts The amounts of each token ID to purchase\\n     */\\n    function purchase(address recipient, uint256[] calldata tokenIds, uint256[] calldata amounts) override external payable {\\n        require(tokenIds.length == amounts.length, \\\"Invalid array sizes\\\");\\n        uint256 totalPrice = 0;\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            uint256 amount = amounts[i];\\n            DropData storage drop = _getDropData(tokenIds[i]);\\n            processPurchase(drop, amount);\\n            totalPrice += amount * drop.price;\\n        }\\n        require(totalPrice == msg.value, \\\"payment did not match total price of purchases\\\");\\n        token.safeBatchTransferFrom(address(this), recipient, tokenIds, amounts, \\\"\\\");\\n        emit TokensPurchased(recipient, msg.sender, tokenIds, amounts);\\n    }\\n\\n    /**\\n     * @dev Process a single item of a batch purchase.\\n     *      This method validates the purchase, i.e. time bounds and max amount and updates the drop config to reflect the new `currentClaimed` amount\\n     * @param drop The drop configuration for the token being purchased\\n     * @param amount The amount of tokens being purchased\\n     */\\n    function processPurchase(DropData storage drop, uint256 amount) private {\\n        require(amount > 0, \\\"Can not buy amount of 0\\\");\\n        require(drop.maxClaimable > 0, \\\"Drop does not exist\\\");\\n        uint256 remaining = drop.maxClaimable - drop.currentClaimed;\\n        require(amount <= remaining, \\\"Claim limit reached\\\");\\n        require(block.timestamp >= drop.startTime, \\\"Drop has not started yet\\\");\\n        require(drop.endTime == 0 || block.timestamp < drop.endTime, \\\"Drop has finished\\\");\\n        drop.currentClaimed += amount;\\n    }\\n\\n    /**\\n     * @dev Read metadata about the drops\\n     * @return An array containing data about all drops currently configured\\n     */\\n    function dropData() external view override returns (DropDataView[] memory) {\\n        DropDataView[] memory data = new DropDataView[](_tokenIds.length);\\n        for (uint256 i = 0; i < _tokenIds.length; i++) {\\n            uint256 tokenId = _tokenIds[i];\\n            data[i] = dropData(tokenId);\\n        }\\n        return data;\\n    }\\n\\n    /**\\n     * @dev Read metadata about a single drop.  Reverts if no drop for the specified token id exists\\n     * @param tokenId The id of the drop to query\\n     * @return Metadata about the drop.\\n     */\\n    function dropData(uint256 tokenId) public view returns (DropDataView memory) {\\n        DropData memory entry = _getDropData(tokenId);\\n        return DropDataView(\\n            tokenId,\\n            entry.price,\\n            entry.maxClaimable,\\n            entry.currentClaimed,\\n            entry.startTime,\\n            entry.endTime,\\n            token.uri(tokenId)\\n        );\\n    }\\n\\n    /**\\n     * @dev Get the address of the ERC1155 contract being dropped, all token ids are scoped to that contract.\\n     * @return The address of the token contract\\n     */\\n    function getToken() external view override returns (address) {\\n        return address(token);\\n    }\\n\\n    /**\\n     * @dev Implementation of `IERC1155Receiver` interface. This is required to fund this contract with tokens.\\n     *      We only need the `from` param, all others are ignored, but we need to keep the type declaration to be compatible with the interface definition.\\n     * @param from The address from which we received the tokens. We require this to be 0x0 in order to only accept tokens directly minted to this contract\\n     */\\n    function onERC1155Received(\\n        address /*operator*/,\\n        address from,\\n        uint256 /*id*/,\\n        uint256 /*value*/,\\n        bytes calldata /*data*/\\n    ) external view returns (bytes4) {\\n        require(msg.sender == address(token), \\\"Only accepting tokens from this drop\\\");\\n        require(from == address(0), \\\"Only accepting fresh mints\\\");\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    /**\\n     * @dev Implementation of `IERC1155Receiver` interface. This is required to fund this contract with tokens.\\n     *      We only need the `from` param, all others are ignored, but we need to keep the type declaration to be compatible with the interface definition.\\n     * @param from The address from which we received the tokens. We require this to be 0x0 in order to only accept tokens directly minted to this contract\\n     */\\n    function onERC1155BatchReceived(\\n        address /*operator*/,\\n        address from,\\n        uint256[] calldata /*ids*/,\\n        uint256[] calldata /*values*/,\\n        bytes calldata /*data*/\\n    ) external view returns (bytes4) {\\n        require(msg.sender == address(token), \\\"Only accepting tokens from this drop\\\");\\n        require(from == address(0), \\\"Only accepting fresh mints\\\");\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n\\n    /**\\n     * @dev Required to fully implement the IERC1155Receiver interface, see onERC1155Received and onERC1155BatchReceived\\n     * @param interfaceId The ERC165 interface id being checked\\n     */\\n    function supportsInterface(bytes4 interfaceId) external pure returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId ||\\n        interfaceId == type(IERC1155Receiver).interfaceId;\\n    }\\n\\n    /**\\n    * @dev Sets up a new tokenId to be dropped. This validates that the drop contract is sufficiently funded.\\n    *      That means before setting up a drop, the token contract must mint the appropriate amount of tokens to the drop\\n    * @param tokenId The tokenId in the token contract, this will be used when transferring tokens upon purchase\\n    * @param price The system token (MATIC for polygon) price in Wei per unit of this token. Must be > 0\\n    * @param maxClaimable The maximum amount of tokens that can be purchased by users. This methods validates that the drops balance for the tokenIds is at least that amount\\n    * @param startTime A unix timestamp in seconds after which the drop becomes enabled\\n    * @param endTime A unix timestamp in seconds after which the drop becomes disabled again. Alternatively 0 can be used to denote an open ended drop\\n    */\\n    function createDrop(uint256 tokenId, uint256 price, uint256 maxClaimable, uint64 startTime, uint64 endTime) external onlyOwner {\\n        require(_drops[tokenId].maxClaimable == 0, \\\"drop for this tokenId already exists\\\");\\n        require(price > 0, \\\"Can not set price to 0\\\");\\n        require(maxClaimable > 0, \\\"Can not set maxClaimable to 0\\\");\\n        require(endTime == 0 || startTime <= endTime, \\\"end time is before start\\\");\\n        require(token.balanceOf(address(this), tokenId) >= maxClaimable, \\\"Drop does not hold enough tokens of this id. Please first supply a sufficient amount\\\");\\n        uint256 index = _tokenIds.length;\\n        _tokenIds.push(tokenId);\\n        _drops[tokenId] = DropData(\\n            index,\\n            price,\\n            maxClaimable,\\n            0,\\n            startTime,\\n            endTime\\n        );\\n    }\\n    /**\\n    * @dev Update the configuration for an existing drop. Does the same validation steps as `createDrop`. Requires the drop, identified by the tokenId, to exist.\\n    * @param tokenId The tokenId in the token contract. This also serves as unique key to identify this drop configuration\\n    * @param price The system token (MATIC for polygon) price in Wei per unit of this token. Must be > 0\\n    * @param maxClaimable The maximum amount of tokens that can be purchased by users. This methods validates that the drops balance for the tokenIds is at least that amount\\n    * @param startTime A unix timestamp in seconds after which the drop becomes enabled\\n    * @param endTime A unix timestamp in seconds after which the drop becomes disabled again. Alternatively 0 can be used to denote an open ended drop\\n    */\\n    function updateDrop(uint256 tokenId, uint256 price, uint256 maxClaimable, uint64 startTime, uint64 endTime) external onlyOwner {\\n        DropData storage drop = _getDropData(tokenId);\\n        require(price > 0, \\\"Can not set price to 0\\\");\\n        require(endTime == 0 || startTime <= endTime, \\\"end time is before start\\\");\\n        require(maxClaimable > 0, \\\"Can not set maxClaimable to 0\\\");\\n        // if we are increasing the maxClaimable amount, check again that we have enough tokens left to cover for the new amount\\n        if (maxClaimable > drop.maxClaimable) {\\n            uint256 newRemaining = maxClaimable - drop.currentClaimed;\\n            require(token.balanceOf(address(this), tokenId) >= newRemaining, \\\"Insufficient balance to cover for drop, mint additional tokens\\\");\\n        }\\n        drop.price = price;\\n        drop.maxClaimable = maxClaimable;\\n        drop.startTime = startTime;\\n        drop.endTime = endTime;\\n    }\\n\\n    /**\\n     * @dev Completely removes a drop, it will no longer be visible\\n     * @param tokenId The token id of the drop that should be removed\\n     */\\n    function removeDrop(uint256 tokenId) external onlyOwner {\\n        DropData storage data = _getDropData(tokenId);\\n        uint256 indexToRemove = data.arrayIndex;\\n        //removing an element that is not the last one. To avoid leaving gaps, reorder the array to move the last element to the gap\\n        if (indexToRemove != _tokenIds.length - 1) {\\n            uint256 lastTokenId = _tokenIds[_tokenIds.length - 1];\\n            DropData storage lastElement = _getDropData(lastTokenId);\\n            _tokenIds[indexToRemove] = lastTokenId;\\n            lastElement.arrayIndex = indexToRemove;\\n        }\\n        //unfortunately we can't use the storage pointer here\\n        delete _drops[tokenId];\\n        _tokenIds.pop();\\n    }\\n\\n    /**\\n     * @dev Get a drop configuration by its id and validate that it exists (by asserting that maxClaiming > 0; this is ensured during setup and modification of a drop config)\\n     * @param tokenId The id for which the configuration should be obtained\\n     */\\n    function _getDropData(uint256 tokenId) private view returns (DropData storage) {\\n        DropData storage data = _drops[tokenId];\\n        require(data.maxClaimable > 0, \\\"No drop exists for this token id\\\");\\n        return data;\\n    }\\n\\n    /**\\n     * @dev Claim payments in MATIC/ETH and send them to the dedicated payment receiver set up during deployment.\\n     *      Since the receiver is predetermined, it's fine to make this public. This also ensures that all parties receiving revenue shares\\n     *      can claim their share and don't have to rely on the owner eventually calling this function.\\n    */\\n    function claimPayments() external {\\n        uint256 sysTokenBalance = address(this).balance;\\n        Address.sendValue(paymentReceiver, sysTokenBalance);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/IERC1155Drop.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.19;\\n\\ninterface IERC1155Drop {\\n\\n    /**\\n     * @dev Data structure to contain information about a single purchaseable token\\n     * @param tokenId The token's ERC1155 token id\\n     * @param price the price per unit denominated in Wei, so a price of 1 Matic would be 10^18\\n     * @param maxClaimable The maximum amount of tokens allow to be purchased\\n     * @param currentClaim The amount of tokens that have already been purchased\\n     * @param startTime A unix timestamp in seconds after which the token can be purchased\\n     * @param endTime A unix timestamp in seconds after which the drop closes and is no longer purchasable\\n     * @param metaDataUri The metadata for this token type according to https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions .\\n     *        If the uri contains the \\\"{id}\\\" placeholder, it must be replaced with the tokenId formatted as hex (without 0x prefix) and padded with leading 0s to be 64 chars\\n     *        e.g. metadata uri = https://example.com/{id}.json ; tokenId = 42 -> https://example.com/000000000000000000000000000000000000000000000000000000000000002A.json\\n     */\\n    struct DropDataView {\\n        uint256 tokenId;\\n        uint256 price;\\n        uint256 maxClaimable;\\n        uint256 currentClaimed;\\n        uint256 startTime;\\n        uint256 endTime;\\n        string metaDataUri;\\n    }\\n\\n    /**\\n     * @dev Emitted whenever a new purchase is made. Parameters correspond directly to those passed to `purchase`\\n     * @param recipient The address that received the purchased tokens\\n     * @param payer The address that paid for this purchase, might be different from the recipient in case of CC purchases\\n     * @param tokenIds The token ids that have been purchases in a batch\\n     * @param amounts The amount of each token id in `tokenIds` that has been purchased, matched by array index\\n     */\\n    event TokensPurchased(address recipient, address payer, uint256[] tokenIds, uint256[] amounts);\\n\\n    /**\\n     * @dev Emitted whenever a new drop has been created (i.e. for a new token id)\\n     * @param tokenId The (token)id of the newly created drop\\n     */\\n    event DropCreated(uint256 indexed tokenId);\\n    /**\\n     * @dev Emitted whenever an existing drop has been modified\\n     * @param tokenId The (token)id of the modified drop\\n     */\\n    event DropModified(uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Action to purchase tokens\\n     * @param recipient The address to transfer tokens to\\n     * @param tokenIds The token IDs to purchase\\n     * @param amounts The amounts of each token ID to purchase\\n     */\\n    function purchase(address recipient, uint256[] calldata tokenIds, uint256[] calldata amounts) external payable;\\n\\n    /**\\n     * @dev Read metadata about the drops\\n     * @return An array containing data about all drops currently configured\\n     */\\n    function dropData() external view returns (DropDataView[] memory);\\n\\n    /**\\n     * @dev Get the address of the ERC1155 contract being dropped, all token ids are scoped to that contract.\\n     * @return The address of the token contract\\n     */\\n    function getToken() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"openzeppelin-contracts/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-contracts/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"openzeppelin-contracts/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-contracts/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_paymentReceiver\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"DropCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"DropModified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"TokensPurchased\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claimPayments\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxClaimable\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"startTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"endTime\",\"type\":\"uint64\"}],\"name\":\"createDrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dropData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxClaimable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"metaDataUri\",\"type\":\"string\"}],\"internalType\":\"struct IERC1155Drop.DropDataView[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"dropData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxClaimable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"metaDataUri\",\"type\":\"string\"}],\"internalType\":\"struct IERC1155Drop.DropDataView\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"purchase\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"removeDrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxClaimable\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"startTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"endTime\",\"type\":\"uint64\"}],\"name\":\"updateDrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ERC1155Drop", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "000000000000000000000000a88dc7efcc8cd6e1b1637689c063ad63119fe59500000000000000000000000038589dcacb36cd2c9aafd3af4e478dac30bd8695", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}