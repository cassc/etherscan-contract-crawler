{"SourceCode": "{\"Tdex.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity \\u003e=0.8.0 \\u003c0.9.0;\\n\\nimport \\\"./TokenConfig.sol\\\";\\n\\nabstract contract ERC20 {\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n}\\n\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\nlibrary SafeMath {\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003c= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003e 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n\\n        return c;\\n    }\\n\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a \\u003e= b) return a;\\n        return b;\\n    }\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(a \\u003e=0 \\u0026\\u0026 b\\u003e=0, \\\"SafeMath: Cannot have negative numbers\\\");\\n        if (a \\u003c= b) return a;\\n        return b;\\n    }\\n}\\n\\nlibrary TransferHelper {\\n    function safeApprove(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes(\\u0027approve(address,uint256)\\u0027)));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success \\u0026\\u0026 (data.length == 0 || abi.decode(data, (bool))), \\u0027TransferHelper: APPROVE_FAILED\\u0027);\\n    }\\n\\n    function safeTransfer(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes(\\u0027transfer(address,uint256)\\u0027)));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success \\u0026\\u0026 (data.length == 0 || abi.decode(data, (bool))), \\u0027TransferHelper: TRANSFER_FAILED\\u0027);\\n    }\\n\\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\\n        // bytes4(keccak256(bytes(\\u0027transferFrom(address,address,uint256)\\u0027)));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success \\u0026\\u0026 (data.length == 0 || abi.decode(data, (bool))), \\u0027TransferHelper: TRANSFER_FROM_FAILED\\u0027);\\n    }\\n\\n    function safeTransferETH(address to, uint value) internal {\\n        (bool success,) = to.call{value : value}(new bytes(0));\\n        require(success, \\u0027TransferHelper: ETH_TRANSFER_FAILED\\u0027);\\n    }\\n}\\n\\nstruct Dish {\\n    uint256 price;\\n    uint256 number;\\n}\\n\\nenum OrderType { Buy, Sell }\\nenum OrderStatus { None, Waiting, Finished, Cancelled }\\n\\nstruct Order {\\n    uint256 orderId;\\n    uint256 price;\\n    uint256 tokenTotal;\\n    uint256 tokenSurplus;\\n    uint256 tokenFee;\\n    uint256 usdtSurplus;\\n    uint256 usdtFee;\\n    uint256 createnTime;\\n    uint256 endTime;\\n    OrderType orderType;\\n    OrderStatus status;\\n    address sender;\\n}\\n\\nstruct Match {\\n    uint256 matchId;\\n    uint256 buyOrderId;\\n    uint256 sellOrderId;\\n    uint256 price;\\n    uint256 tokenDeal;\\n    uint256 usdtDeal;\\n    uint256 tokenFee;\\n    uint256 usdtFee;\\n    uint256 time;\\n}\\n\\ninterface OrderInterface {\\n\\n    function getOrder(address _tokenContract, uint256 _orderId) external view returns (Order memory);\\n\\n    function getMatch(address _tokenContract, uint256 _matchId) external view returns (Match memory);\\n\\n    function getPrice(address _tokenContract) external view returns (uint256 price);\\n\\n    function getLastMatchId(address _tokenContract) external view returns (uint256 matchId);\\n\\n    function getLastOrderId(address _tokenContract) external view returns (uint256 orderId);\\n\\n    function getBuyOrderPriceListLength(address _tokenContract) external view returns (uint);\\n\\n    function getBuyOrderPriceList(address _tokenContract, uint256 start, uint256 end) external view returns (uint256[] memory);\\n\\n    function getBuyOrderPriceListPublished(address _tokenContract, uint count) external view returns (uint256[] memory);\\n\\n    function getBuyOrderPriceOrderIdList(address _tokenContract, uint256 _price) external view returns (uint256[] memory);\\n\\n    function getSellOrderPriceListLength(address _tokenContract) external view returns (uint);\\n\\n    function getSellOrderPriceList(address _tokenContract, uint256 start, uint256 end) external view returns (uint256[] memory);\\n\\n    function getSellOrderPriceListPublished(address _tokenContract, uint count) external view returns (uint256[] memory);\\n\\n    function getBuyOrderPriceTokenNumber(address _tokenContract, uint256 _price) external view returns (uint256);\\n\\n    function getSellOrderPriceTokenNumber(address _tokenContract, uint256 _price) external view returns (uint256);\\n\\n    function getSellOrderPriceOrderIdList(address _tokenContract, uint256 _price) external view returns (uint256[] memory);\\n\\n    function getOrderMatching(address _tokenContract, uint256 _orderId) external view returns (uint256[] memory);\\n\\n    function getOrderUnmatchedListLength(address _tokenContract, address _sender) external view returns (uint);\\n\\n    function getOrderFinishedListLength(address _tokenContract, address _sender) external view returns (uint);\\n\\n    function getOrderUnmatchedList(address _tokenContract, address _sender, uint256 start, uint256 end) external view returns (uint256[] memory);\\n\\n    function getOrderFinishedList(address _tokenContract, address _sender, uint256 start, uint256 end) external view returns (uint256[] memory);\\n}\\n\\ninterface DexInterface {\\n\\n    function createOrder(address _tokenContract, address _sender, uint256 _price, uint256 _token, uint256 _usdt, uint8 _type) external returns (uint256);\\n\\n    function removeOrder(address _tokenContract, uint256 _orderId, address _sender) external returns (bool);\\n\\n    function orderManager() external view returns (address);\\n\\n    function books() external view returns (address);\\n}\\n\\ninterface TokenInterface {\\n\\n    function getToken(address _tokenContract) external view returns (Token memory token);\\n\\n    function getTokenMapLength() external view returns (uint length);\\n\\n    function getTokenAddressList(uint256 start, uint256 end) external view returns (address[] memory list);\\n}\\n\\ninterface __tdexDelegate {\\n\\n    function __buy(address __tokenContract, address __sender) external;\\n\\n    function __sell(address __tokenContract, address __sender) external;\\n}\\n\\n/**\\n * @title Storage\\n * @dev Store \\u0026 retrieve value in a variable\\n */\\ncontract TDEX {\\n\\n    address private _owner;\\n\\n    address private _dexInterface = address(0);\\n\\n    address private _tokenManager = address(0);\\n\\n    address private _delegate = address(0);\\n\\n    Token private USDT;\\n\\n    Token private ETH;\\n\\n    event CreateOrder(address indexed tokenContract, uint256 indexed orderId, address sender, OrderType ordertType, uint256 price, uint256 value);\\n\\n    event CancelOrder(address indexed tokenContract, uint256 indexed orderId, address sender);\\n\\n    constructor () {\\n        _owner = msg.sender;\\n        USDT = T.USDT();\\n        ETH = T.ETH();\\n    }\\n\\n    modifier onlyOwner() {\\n        require(_owner == msg.sender, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    function init(address __dexInterface) external onlyOwner\\n    {\\n        require(_dexInterface == address(0), \\\"Can only be assigned once\\\");\\n        _dexInterface = __dexInterface;\\n    }\\n\\n    function setTokenManager(address ___tokenManager) external onlyOwner\\n    {\\n        _tokenManager = ___tokenManager;\\n    }\\n\\n    function setDelegate(address __delegate) external onlyOwner\\n    {\\n        _delegate = __delegate;\\n    }\\n\\n    function getToken(address _tokenContract) external view returns (\\n        address tokenContract,\\n        string memory symbol,\\n        string memory name,\\n        uint decimals)\\n    {\\n        Token memory token = TokenInterface(_tokenManager).getToken(_tokenContract);\\n\\n        tokenContract = token.tokenContract;\\n        symbol = token.symbol;\\n        name = token.name;\\n        decimals = token.decimals;\\n    }\\n\\n    function getTokenAddressListLength() external view returns (uint length)\\n    {\\n        return TokenInterface(_tokenManager).getTokenMapLength();\\n    }\\n\\n    function getTokenAddressList(uint256 start, uint256 end) external view returns (address[] memory list)\\n    {\\n        return TokenInterface(_tokenManager).getTokenAddressList(start, end);\\n    }\\n\\n    /**********************************************************/\\n\\n    function _buy(address _tokenContract, uint256 _price, uint256 _token_amount, address _sender) internal returns (uint256)\\n    {\\n        if (_delegate != address(0)) __tdexDelegate(_delegate).__buy(_tokenContract, _sender);\\n\\n        require(_token_amount \\u003e 0, \\\"The quantity cannot be 0\\\");\\n\\n        Token memory token = TokenInterface(_tokenManager).getToken(_tokenContract);\\n        require(token.decimals \\u003e 0, \\\"This contract address is not supported\\\");\\n        require(_price \\u003e 0, \\\"No, no price\\\");\\n\\n        uint256 _usdt_amount = SafeMath.div(SafeMath.mul(_token_amount, _price), PDEC);\\n\\n        require(_usdt_amount \\u003c= 100000 * 10 ** USDT.decimals, \\\"Maximum single transaction amount 100000 USDT\\\");\\n\\n        TransferHelper.safeTransferFrom(USDT.tokenContract, _sender, _dexInterface, _usdt_amount);\\n\\n        uint256 orderId = DexInterface(_dexInterface).createOrder(_tokenContract, _sender, _price, _token_amount, _usdt_amount, 0);\\n\\n        emit CreateOrder(_tokenContract, orderId, _sender, OrderType.Buy, _price, _token_amount);\\n\\n        return orderId;\\n    }\\n\\n    function Buy(address _tokenContract, uint256 _price, uint256 _token_amount) external returns (uint256 orderId)\\n    {\\n        require(_tokenContract != ETH.tokenContract, \\\"Does not support ETH\\\");\\n        return _buy(_tokenContract, _price, _token_amount, msg.sender);\\n    }\\n\\n    function BuyETH(uint256 _price, uint256 _token_amount) external returns (uint256 orderId)\\n    {\\n        return _buy(ETH.tokenContract, _price, _token_amount, msg.sender);\\n    }\\n\\n    function _sell(address _tokenContract, uint256 _price, uint256 _token_amount, address _sender) internal returns (uint256)\\n    {\\n        if (_delegate != address(0)) __tdexDelegate(_delegate).__sell(_tokenContract, _sender);\\n\\n        require(_token_amount \\u003e 0, \\\"The quantity cannot be 0\\\");\\n\\n        Token memory token = TokenInterface(_tokenManager).getToken(_tokenContract);\\n        require(token.decimals \\u003e 0, \\\"This contract address is not supported\\\");\\n        require(_price \\u003e 0, \\\"No, no price\\\");\\n\\n        uint256 _usdt_amount = SafeMath.div(SafeMath.mul(_token_amount, _price), PDEC);\\n        require(_usdt_amount \\u003c= 100000 * 10 ** USDT.decimals, \\\"Maximum single transaction amount 100000 USDT\\\");\\n\\n        if (_tokenContract == ETH.tokenContract)\\n        {\\n            TransferHelper.safeTransferETH(_dexInterface, _token_amount);\\n        }\\n        else\\n        {\\n            TransferHelper.safeTransferFrom(_tokenContract, _sender, _dexInterface, _token_amount);\\n        }\\n\\n        uint256 orderId = DexInterface(_dexInterface).createOrder(_tokenContract, _sender, _price, _token_amount, _usdt_amount, 1);\\n\\n        emit CreateOrder(_tokenContract, orderId, _sender, OrderType.Sell, _price, _token_amount);\\n\\n        return orderId;\\n    }\\n\\n    function Sell(address _tokenContract, uint256 _price, uint256 _token_amount) external returns (uint256 orderId)\\n    {\\n        require(_tokenContract != ETH.tokenContract, \\\"Does not support ETH\\\");\\n        return _sell(_tokenContract, _price, _token_amount, msg.sender);\\n    }\\n\\n    function SellETH(uint256 _price) external payable returns (uint256 orderId)\\n    {\\n        return _sell(ETH.tokenContract, _price, msg.value, msg.sender);\\n    }\\n\\n    function Cancel(address _tokenContract, uint256 _orderId) external returns (bool)\\n    {\\n        Token memory token = TokenInterface(_tokenManager).getToken(_tokenContract);\\n        require(token.decimals \\u003e 0, \\\"This contract address is not supported\\\");\\n\\n        bool result = DexInterface(_dexInterface).removeOrder(_tokenContract, _orderId, msg.sender);\\n\\n        emit CancelOrder(_tokenContract, _orderId, msg.sender);\\n\\n        return result;\\n    }\\n\\n    function CancelRoot(address _tokenContract, uint256 _orderId, address _sender) external onlyOwner returns (bool)\\n    {\\n        Token memory token = TokenInterface(_tokenManager).getToken(_tokenContract);\\n        require(token.decimals \\u003e 0, \\\"This contract address is not supported\\\");\\n\\n        bool result = DexInterface(_dexInterface).removeOrder(_tokenContract, _orderId, _sender);\\n\\n        emit CancelOrder(_tokenContract, _orderId, _sender);\\n\\n        return result;\\n    }\\n\\n    /**********************************************************/\\n\\n    function balanceOf(address _tokenContract, address _sender) external view returns (uint256)\\n    {\\n        uint256 balance;\\n        if (_tokenContract == ETH.tokenContract)\\n        {\\n            balance = _sender.balance;\\n        }\\n        else\\n        {\\n            balance = IERC20(_tokenContract).balanceOf(_sender);\\n        }\\n        return balance;\\n    }\\n\\n    function getOrderManager() internal view returns (OrderInterface)\\n    {\\n        return OrderInterface(DexInterface(_dexInterface).orderManager());\\n    }\\n\\n    function getPrice(address _tokenContract) external view returns (uint256 price)\\n    {\\n        return getOrderManager().getPrice(_tokenContract);\\n    }\\n\\n    function getLastMatchId(address _tokenContract) external view returns (uint256 matchId)\\n    {\\n        return getOrderManager().getLastMatchId(_tokenContract);\\n    }\\n\\n    function getLastOrderId(address _tokenContract) external view returns (uint256 orderId)\\n    {\\n        return getOrderManager().getLastOrderId(_tokenContract);\\n    }\\n\\n    function getOrder(address _tokenContract, uint256 _orderId) external view returns (\\n        uint256 price,\\n        uint256 tokenTotal,\\n        uint256 tokenSurplus,\\n        uint256 tokenFee,\\n        uint256 usdtSurplus,\\n        uint256 usdtFee,\\n        uint256 createnTime,\\n        uint256 endTime,\\n        uint8 orderType,\\n        uint8 status,\\n        address sender\\n    )\\n    {\\n        Order memory order = getOrderManager().getOrder(_tokenContract, _orderId);\\n        price = order.price;\\n        tokenTotal = order.tokenTotal;\\n        tokenSurplus = order.tokenSurplus;\\n        tokenFee = order.tokenFee;\\n        usdtSurplus = order.usdtSurplus;\\n        usdtFee = order.usdtFee;\\n        createnTime = order.createnTime;\\n        endTime = order.endTime;\\n        orderType = uint8(order.orderType);\\n        status = uint8(order.status);\\n        sender = order.sender;\\n    }\\n\\n    function getMatch(address _tokenContract, uint256 _matchId) external view returns (\\n        uint256 matchId,\\n        uint256 buyOrderId,\\n        uint256 sellOrderId,\\n        uint256 price,\\n        uint256 tokenDeal,\\n        uint256 usdtDeal,\\n        uint256 tokenFee,\\n        uint256 usdtFee,\\n        uint256 time\\n    )\\n    {\\n        Match memory _match = getOrderManager().getMatch(_tokenContract, _matchId);\\n\\n        matchId = _match.matchId;\\n        buyOrderId = _match.buyOrderId;\\n        sellOrderId = _match.sellOrderId;\\n        price = _match.price;\\n        tokenDeal = _match.tokenDeal;\\n        usdtDeal = _match.usdtDeal;\\n        tokenFee = _match.tokenFee;\\n        usdtFee = _match.usdtFee;\\n        time = _match.time;\\n    }\\n\\n    function getBuyOrderPriceListLength(address _tokenContract) external view returns (uint length)\\n    {\\n        return getOrderManager().getBuyOrderPriceListLength(_tokenContract);\\n    }\\n\\n    function getBuyOrderPriceList(address _tokenContract, uint256 start, uint256 end) external view returns (uint256[] memory list)\\n    {\\n        return getOrderManager().getBuyOrderPriceList(_tokenContract, start, end);\\n    }\\n\\n    function getBuyOrderPriceTokenNumber(address _tokenContract, uint256 _price) external view returns (uint256 number)\\n    {\\n        return getOrderManager().getBuyOrderPriceTokenNumber(_tokenContract, _price);\\n    }\\n\\n    function getBuyOrderPriceListPublished(address _tokenContract, uint count) external view returns (uint256[] memory list)\\n    {\\n        return getOrderManager().getBuyOrderPriceListPublished(_tokenContract, count);\\n    }\\n\\n    function getBuyOrderPublished(address _tokenContract, uint count) external view returns (Dish[] memory list)\\n    {\\n        OrderInterface orderManager = getOrderManager();\\n        uint256[] memory priceList = orderManager.getBuyOrderPriceListPublished(_tokenContract, count);\\n        list = new Dish[](count);\\n        for (uint i=0; i\\u003ccount; i++)\\n        {\\n            uint256 price = priceList[i];\\n            uint256 number = orderManager.getBuyOrderPriceTokenNumber(_tokenContract, price);\\n            list[i] = Dish(price, number);\\n        }\\n    }\\n\\n    function getBuyOrderPriceOrderIdList(address _tokenContract, uint256 _price) external view returns (uint256[] memory list)\\n    {\\n        return getOrderManager().getBuyOrderPriceOrderIdList(_tokenContract, _price);\\n    }\\n\\n    function getSellOrderPriceListLength(address _tokenContract) external view returns (uint length)\\n    {\\n        return getOrderManager().getSellOrderPriceListLength(_tokenContract);\\n    }\\n\\n    function getSellOrderPriceList(address _tokenContract, uint256 start, uint256 end) external view returns (uint256[] memory list)\\n    {\\n        return getOrderManager().getSellOrderPriceList(_tokenContract, start, end);\\n    }\\n\\n    function getSellOrderPriceTokenNumber(address _tokenContract, uint256 _price) external view returns (uint256 number)\\n    {\\n        return getOrderManager().getSellOrderPriceTokenNumber(_tokenContract, _price);\\n    }\\n\\n    function getSellOrderPriceListPublished(address _tokenContract, uint count) external view returns (uint256[] memory list)\\n    {\\n        return getOrderManager().getSellOrderPriceListPublished(_tokenContract, count);\\n    }\\n\\n    function getSellOrderPublished(address _tokenContract, uint count) external view returns (Dish[] memory list)\\n    {\\n        OrderInterface orderManager = getOrderManager();\\n        uint256[] memory priceList = orderManager.getSellOrderPriceListPublished(_tokenContract, count);\\n        list = new Dish[](count);\\n        for (uint i=0; i\\u003ccount; i++)\\n        {\\n            uint256 price = priceList[i];\\n            uint256 number = orderManager.getSellOrderPriceTokenNumber(_tokenContract, price);\\n            list[i] = Dish(price, number);\\n        }\\n    }\\n\\n    function getSellOrderPriceOrderIdList(address _tokenContract, uint256 _price) external view returns (uint256[] memory list)\\n    {\\n        return getOrderManager().getSellOrderPriceOrderIdList(_tokenContract, _price);\\n    }\\n\\n    function getOrderMatching(address _tokenContract, uint256 _orderId) external view returns (uint256[] memory matchingList)\\n    {\\n        return getOrderManager().getOrderMatching(_tokenContract, _orderId);\\n    }\\n\\n    function getOrderUnmatchedListLength(address _tokenContract, address _sender) external view returns (uint length)\\n    {\\n        return getOrderManager().getOrderUnmatchedListLength(_tokenContract, _sender);\\n    }\\n\\n    function getOrderFinishedListLength(address _tokenContract, address _sender) external view returns (uint length)\\n    {\\n        return getOrderManager().getOrderFinishedListLength(_tokenContract, _sender);\\n    }\\n\\n    function getOrderUnmatchedList(address _tokenContract, address _sender, uint256 start, uint256 end) external view returns (uint256[] memory list)\\n    {\\n        return getOrderManager().getOrderUnmatchedList(_tokenContract, _sender, start, end);\\n    }\\n\\n    function getOrderFinishedList(address _tokenContract, address _sender, uint256 start, uint256 end) external view returns (uint256[] memory list)\\n    {\\n        return getOrderManager().getOrderFinishedList(_tokenContract, _sender, start, end);\\n    }\\n}\\n\"},\"TokenConfig.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity \\u003e=0.8.0 \\u003c0.9.0;\\n\\nuint256 constant PDEC = 1e30;\\n\\nstruct Token {\\n    address tokenContract;\\n    string symbol;\\n    string name;\\n    uint decimals;\\n}\\n\\nlibrary T {\\n\\n    function USDT() internal pure returns (Token memory)\\n    {\\n        return Token({\\n            symbol: \\\"USDT\\\",\\n            name: \\\"Tether USD\\\",\\n            tokenContract: 0xc2132D05D31c914a87C6611C10748AEb04B58e8F,\\n            decimals: 6\\n        });\\n    }\\n\\n    function ETH() internal pure returns (Token memory)\\n    {\\n        return Token({\\n            symbol: \\\"MATIC\\\",\\n            name: \\\"Matic Token\\\",\\n            tokenContract: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE,\\n            decimals: 18\\n        });\\n    }\\n}\\n\"}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"CancelOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum OrderType\",\"name\":\"ordertType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"CreateOrder\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_token_amount\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_token_amount\",\"type\":\"uint256\"}],\"name\":\"BuyETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_orderId\",\"type\":\"uint256\"}],\"name\":\"Cancel\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_orderId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"CancelRoot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_token_amount\",\"type\":\"uint256\"}],\"name\":\"Sell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"SellETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"getBuyOrderPriceList\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"list\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"}],\"name\":\"getBuyOrderPriceListLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"getBuyOrderPriceListPublished\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"list\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"getBuyOrderPriceOrderIdList\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"list\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"getBuyOrderPriceTokenNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"getBuyOrderPublished\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"internalType\":\"struct Dish[]\",\"name\":\"list\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"}],\"name\":\"getLastMatchId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"matchId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"}],\"name\":\"getLastOrderId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_matchId\",\"type\":\"uint256\"}],\"name\":\"getMatch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"matchId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyOrderId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellOrderId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenDeal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdtDeal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdtFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_orderId\",\"type\":\"uint256\"}],\"name\":\"getOrder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenSurplus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdtSurplus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdtFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createnTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"orderType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"getOrderFinishedList\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"list\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"getOrderFinishedListLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_orderId\",\"type\":\"uint256\"}],\"name\":\"getOrderMatching\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"matchingList\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"getOrderUnmatchedList\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"list\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"getOrderUnmatchedListLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"getSellOrderPriceList\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"list\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"}],\"name\":\"getSellOrderPriceListLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"getSellOrderPriceListPublished\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"list\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"getSellOrderPriceOrderIdList\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"list\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"getSellOrderPriceTokenNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"getSellOrderPublished\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"internalType\":\"struct Dish[]\",\"name\":\"list\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"}],\"name\":\"getToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"getTokenAddressList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"list\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenAddressListLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"__dexInterface\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"__delegate\",\"type\":\"address\"}],\"name\":\"setDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"___tokenManager\",\"type\":\"address\"}],\"name\":\"setTokenManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TDEX", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://46a912d34f63a36f8db25e86d36c32d96d3d096ee16e53424ae187fec646b01e"}