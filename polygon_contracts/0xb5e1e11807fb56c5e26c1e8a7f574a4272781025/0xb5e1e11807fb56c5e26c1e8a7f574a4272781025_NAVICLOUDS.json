{"SourceCode": "// SPDX-License-Identifier: GPLv3\r\n\r\npragma solidity ^0.8.18;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\ncontract NAVICLOUDS {\r\n    using SafeMath for uint256; \r\n    uint256 private constant timeStep = 1 days;\r\n    uint256 private constant dayPerCycle = 10 days; \r\n    uint256 private constant maxAddFreeze = 30 days;\r\n    uint256 private constant initDayNewbies = 3;\r\n    uint256 private constant incInterval = 2;\r\n    uint256 private constant incNumber = 1;\r\n    uint256 private constant unlimitDay = 3650;\r\n    uint256 private constant maxSearchDepth = 3000;\r\n    uint256 private constant baseDividend = 10000;\r\n    uint256 private constant incomeFeePercents = 700;\r\n    uint256 private constant bonusPercents = 500;\r\n    uint256 private constant transferFeePercents = 1000;\r\n    uint256 private constant activationPercents = 3000;\r\n    uint256 private constant baseActivationPercents = 2500;\r\n    uint256 private constant baseFundPercents = 7500;\r\n    uint256 private constant dayRewardPercents = 150;\r\n\r\n    uint256[5] private levelTeam = [0, 0, 0, 50, 200];\r\n    uint256[5] private levelInvite = [0, 0, 0, 10000e6, 60000e6];\r\n    uint256[5] private levelDeposit = [50e6, 500e6, 1000e6, 2000e6, 3000e6];\r\n    uint256[5] private balReached = [50e10, 100e10, 200e10, 500e10, 1000e10];\r\n    uint256[5] private balFreeze = [35e10, 70e10, 100e10, 300e10, 500e10];\r\n    uint256[5] private balUnfreeze = [80e10, 150e10, 200e10, 500e10, 1000e10];\r\n    uint256[20] private invitePercents = [500, 100, 200, 300, 100, 100, 100, 100, 50, 50, 50, 50, 30, 30, 30, 30, 30, 30, 30, 30];\r\n\r\n    IERC20 private usdt;\r\n    address private feeReceiver;\r\n    address private defaultRefer;\r\n    uint256 private startTime;\r\n    uint256 private totalUsers;\r\n    uint256 private totalDeposit;\r\n    uint256 private freezedTimes;\r\n    bool private isFreezing;\r\n    address[] private depositors;\r\n\r\n    mapping(uint256=>bool) private balStatus;\r\n    mapping(uint256=>address[]) private dayNewbies;\r\n    mapping(uint256=>uint256) private freezeTime;\r\n    mapping(uint256=>uint256) private unfreezeTime;\r\n    mapping(uint256=>uint256) private dayDeposits;\r\n    mapping(address=>mapping(uint256=>bool)) private isUnfreezedReward;\r\n    \r\n    struct UserInfo {\r\n        address referrer;\r\n        uint256 level;\r\n        uint256 maxDeposit;\r\n        uint256 maxDepositable;\r\n        uint256 teamNum;\r\n        uint256 teamTotalDeposit;\r\n        uint256 totalFreezed;\r\n        uint256 totalRevenue;\r\n        uint256 unfreezeIndex;\r\n        uint256 startTime;\r\n        uint256 totalUsdt;\r\n        bool isMaxFreezing;\r\n    }\r\n\r\n    struct RewardInfo{\r\n        uint256 capitals;\r\n        uint256 statics;\r\n        uint256 invited;\r\n        uint256 bonusFreezed;\r\n        uint256 bonusReleased;\r\n        uint256 l5Freezed;\r\n        uint256 l5Released;\r\n        uint256 activation;\r\n        uint256 lastWithdaw;\r\n    }\r\n\r\n    struct OrderInfo {\r\n        uint256 amount;\r\n        uint256 start;\r\n        uint256 unfreeze;\r\n        bool isUnfreezed;\r\n    }\r\n    \r\n    mapping(address=>UserInfo) private userInfo;\r\n    mapping(address=>RewardInfo) private rewardInfo;\r\n    mapping(address=>OrderInfo[]) private orderInfos;\r\n    mapping(address=>mapping(uint256=>uint256)) private userCycleMax;\r\n    mapping(address=>mapping(uint256=>address[])) private teamUsers;\r\n\r\n    event Register(address user, address referral);\r\n    event Deposit(address user, uint256 types, uint256 amount, bool isFreezing);\r\n    event TransferByActivation(address user, uint256 subBal, address receiver, uint256 amount);\r\n    event Withdraw(address user, uint256 incomeFee, uint256 activation, uint256 withdraw);\r\n    event DepositFund(address user, uint256 amount);\r\n    event TransferFund(address user, address receiver, uint256 amount);\r\n\r\n    constructor(address _usdtAddr, address _defaultRefer, address _feeReceiver, uint256 _startTime) \r\n    {\r\n        usdt = IERC20(_usdtAddr);\r\n        defaultRefer = _defaultRefer;\r\n        feeReceiver = _feeReceiver;\r\n        startTime = _startTime;\r\n    }\r\n\r\n    function register(address _referral) external {\r\n        require(userInfo[_referral].maxDeposit > 0 || _referral == defaultRefer, \"invalid refer\");\r\n        require(userInfo[msg.sender].referrer == address(0), \"referrer bonded\");\r\n        userInfo[msg.sender].referrer = _referral;\r\n        emit Register(msg.sender, _referral);\r\n    }\r\n\r\n    function deposit(uint256 _amount) external {\r\n        _deposit(msg.sender, _amount, 0);\r\n    }\r\n\r\n    function depositByActivation(uint256 _amount) public {\r\n        _deposit(msg.sender, _amount, 1);\r\n\r\n    }\r\n\r\n    function renew() public {\r\n        _deposit(msg.sender, 0, 2);\r\n    }\r\n\r\n    function _deposit(address _userAddr, uint256 _amount, uint256 _types) private {\r\n        require(block.timestamp >= startTime, \"not start\");\r\n        UserInfo storage user = userInfo[_userAddr];\r\n        require(user.referrer != address(0), \"not register\");\r\n        RewardInfo storage userRewards = rewardInfo[_userAddr];\r\n        if(_types == 0){\r\n            usdt.transferFrom(_userAddr, address(this), _amount);\r\n            _balActived();\r\n        }else if(_types == 1){\r\n            require(user.level == 0, \"actived\");\r\n            require(_amount.mod(levelDeposit[0]) == 0, \"amount err\");\r\n\r\n            uint256 baseActivationBal = _amount.mul(baseActivationPercents).div(baseDividend);\r\n            uint256 baseFundBal = _amount.mul(baseFundPercents).div(baseDividend);\r\n\r\n            require(userRewards.activation >= baseActivationBal, \"insufficient activation balance\");\r\n            require(user.totalUsdt >= baseFundBal, \"insufficient fund balance\");\r\n\r\n            userRewards.activation = userRewards.activation.sub(baseActivationBal);\r\n            user.totalUsdt = user.totalUsdt.sub(baseFundBal);\r\n            \r\n        }else{\r\n            require(user.level > 0, \"newbie\");\r\n            _amount = orderInfos[_userAddr][user.unfreezeIndex].amount;\r\n        }\r\n\r\n        uint256 curCycle = getCurCycle();\r\n        (uint256 userCurMin, uint256 userCurMax) = getUserCycleDepositable(_userAddr, curCycle);        \r\n        require(_amount >= userCurMin && _amount <= userCurMax && _amount.mod(levelDeposit[0]) == 0, \"amount err\");\r\n        if(isFreezing && !isUnfreezedReward[_userAddr][freezedTimes]) isUnfreezedReward[_userAddr][freezedTimes] = true;\r\n        \r\n        uint256 curDay = getCurDay();\r\n        dayDeposits[curDay] = dayDeposits[curDay].add(_amount);\r\n        totalDeposit = totalDeposit.add(_amount);\r\n        depositors.push(_userAddr);\r\n\r\n        if(user.level == 0){\r\n            if(curDay < unlimitDay) require(dayNewbies[curDay].length < getMaxDayNewbies(curDay), \"reach max\");\r\n            dayNewbies[curDay].push(_userAddr);\r\n            totalUsers = totalUsers + 1;\r\n            user.startTime = block.timestamp;\r\n            if(_types == 0 || _types == 1) {\r\n                userRewards.bonusFreezed = _amount.mul(bonusPercents).div(baseDividend);\r\n                user.totalRevenue = user.totalRevenue.add(userRewards.bonusFreezed);\r\n            }\r\n        }\r\n        _updateUplineReward(_userAddr, _amount);\r\n        _unfreezeCapitalOrReward(_userAddr, _amount, _types);\r\n        bool isMaxFreezing = _addNewOrder(_userAddr, _amount, user.isMaxFreezing);\r\n        user.isMaxFreezing = isMaxFreezing;\r\n        _updateUserMax(_userAddr, _amount, userCurMax, curCycle);\r\n        _updateLevel(_userAddr);\r\n        if(isFreezing) _setFreezeReward();\r\n        emit Deposit(_userAddr, _types, _amount, isFreezing);\r\n    }\r\n\r\n    function _updateUplineReward(address _userAddr, uint256 _amount) private {\r\n        address upline = userInfo[_userAddr].referrer;\r\n        for(uint256 i = 0; i < invitePercents.length; i++){\r\n            if(upline != address(0)){\r\n                if(!isFreezing || isUnfreezedReward[upline][freezedTimes]){\r\n                    OrderInfo[] storage upOrders = orderInfos[upline];\r\n                    if(upOrders.length > 0){\r\n                        uint256 latestUnFreezeTime = getOrderUnfreezeTime(upline, upOrders.length - 1);\r\n                        uint256 maxFreezing = latestUnFreezeTime > block.timestamp ? upOrders[upOrders.length - 1].amount : 0;\r\n                        uint256 newAmount = maxFreezing < _amount ? maxFreezing : _amount;\r\n                        if(newAmount > 0){\r\n                            RewardInfo storage upRewards = rewardInfo[upline];\r\n                            uint256 reward = newAmount.mul(invitePercents[i]).div(baseDividend);\r\n                            if(i == 0 || (i < 4 && userInfo[upline].level >= 4)){\r\n                                upRewards.invited = upRewards.invited.add(reward);\r\n                                userInfo[upline].totalRevenue = userInfo[upline].totalRevenue.add(reward);\r\n                            }else if(userInfo[upline].level >= 5){\r\n                                upRewards.l5Freezed = upRewards.l5Freezed.add(reward);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                if(upline == defaultRefer) break;\r\n                upline = userInfo[upline].referrer;\r\n            }else{\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function _unfreezeCapitalOrReward(address _userAddr, uint256 _amount, uint256 _types) private {\r\n        (uint256 unfreezed, uint256 rewards) = _unfreezeOrder(_userAddr, _amount);\r\n        if(_types == 0){\r\n            require(_amount > unfreezed, \"renew only\");\r\n        }else if(_types >= 2){\r\n            require(_amount == unfreezed, \"renew err\");\r\n        }\r\n\r\n        UserInfo storage user = userInfo[_userAddr];\r\n        RewardInfo storage userRewards = rewardInfo[_userAddr];\r\n        if(unfreezed > 0){\r\n            user.unfreezeIndex = user.unfreezeIndex + 1;\r\n            if(userRewards.bonusFreezed > 0){\r\n                userRewards.bonusReleased = userRewards.bonusFreezed;\r\n                userRewards.bonusFreezed = 0;\r\n            }\r\n\r\n            if(rewards > 0) userRewards.statics = userRewards.statics.add(rewards);\r\n            if(_types < 2) userRewards.capitals = userRewards.capitals.add(unfreezed);\r\n        }\r\n        else\r\n        {\r\n            uint256 l5Freezed = userRewards.l5Freezed;\r\n            if(l5Freezed > 0){\r\n                rewards = _amount <= l5Freezed ? _amount : l5Freezed;\r\n                userRewards.l5Freezed = l5Freezed.sub(rewards);\r\n                userRewards.l5Released = userRewards.l5Released.add(rewards);\r\n            }\r\n        }\r\n        user.totalRevenue = user.totalRevenue.add(rewards);\r\n        _updateFreezeAndTeamDeposit(_userAddr, _amount, unfreezed);\r\n    }\r\n\r\n    function _unfreezeOrder(address _userAddr, uint256 _amount) private returns(uint256 unfreezed, uint256 rewards){\r\n        if(orderInfos[_userAddr].length > 0){\r\n            UserInfo storage user = userInfo[_userAddr];\r\n            OrderInfo storage order = orderInfos[_userAddr][user.unfreezeIndex];\r\n            uint256 orderUnfreezeTime = getOrderUnfreezeTime(_userAddr, user.unfreezeIndex);            \r\n            if(user.level > 0 && user.level < 5) require(block.timestamp >= orderUnfreezeTime, \"freezing\");\r\n            if(order.isUnfreezed == false && block.timestamp >= orderUnfreezeTime && _amount >= order.amount){\r\n                order.isUnfreezed = true;\r\n                unfreezed = order.amount;\r\n                rewards = order.amount.mul(dayRewardPercents).mul(dayPerCycle).div(timeStep).div(baseDividend);\r\n                if(isFreezing){\r\n                    uint256 userMaxFreezedTwice = user.totalFreezed.mul(2);\r\n                    if(userMaxFreezedTwice > user.totalRevenue){\r\n                        uint256 leftCapital = userMaxFreezedTwice.sub(user.totalRevenue);\r\n                        if(rewards > leftCapital){\r\n                            rewards = leftCapital;\r\n                        }\r\n                    }else{\r\n                        rewards = 0;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function _updateFreezeAndTeamDeposit(address _userAddr, uint256 _amount, uint256 _unfreezed) private {\r\n        UserInfo storage user = userInfo[_userAddr];\r\n        if(_amount > _unfreezed){\r\n            uint256 incAmount = _amount.sub(_unfreezed);\r\n            user.totalFreezed = user.totalFreezed.add(incAmount);\r\n            address upline = user.referrer;\r\n            for(uint256 i = 0; i < invitePercents.length; i++){\r\n                if(upline != address(0)){\r\n                    UserInfo storage upUser = userInfo[upline];\r\n                    if(user.level == 0 && _userAddr != upline){\r\n                        upUser.teamNum = upUser.teamNum + 1;\r\n                        teamUsers[upline][i].push(_userAddr);\r\n                    }\r\n                    upUser.teamTotalDeposit = upUser.teamTotalDeposit.add(incAmount);\r\n                    if(upline == defaultRefer) break;\r\n                    upline = upUser.referrer;\r\n                }else{\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function _addNewOrder(address _userAddr, uint256 _amount, bool _isMaxFreezing) private returns(bool isMaxFreezing){\r\n        uint256 addFreeze;\r\n        OrderInfo[] storage orders = orderInfos[_userAddr];\r\n        if(_isMaxFreezing){\r\n            isMaxFreezing = true;\r\n        }\r\n        else\r\n        {\r\n            addFreeze = (orders.length).mul(timeStep);\r\n            if(addFreeze > maxAddFreeze)\r\n            {\r\n                isMaxFreezing = true;                \r\n            } \r\n        }\r\n        uint256 unfreeze = isMaxFreezing ? block.timestamp.add(dayPerCycle).add(maxAddFreeze) : block.timestamp.add(dayPerCycle).add(addFreeze);\r\n        orders.push(OrderInfo(_amount, block.timestamp, unfreeze, false));\r\n    }\r\n\r\n    function _updateUserMax(address _userAddr, uint256 _amount, uint256 _userCurMax, uint256 _curCycle) internal {\r\n        UserInfo storage user = userInfo[_userAddr];\r\n        if(_amount > user.maxDeposit) user.maxDeposit = _amount;\r\n        userCycleMax[_userAddr][_curCycle] = _userCurMax;\r\n        uint256 nextMaxDepositable;\r\n        if(_amount == _userCurMax)\r\n        {\r\n            uint256 curMaxDepositable = getCurMaxDepositable();\r\n            if(_userCurMax >= curMaxDepositable)\r\n            {\r\n                nextMaxDepositable = curMaxDepositable;\r\n            }\r\n            else\r\n            {\r\n                if(_userCurMax < levelDeposit[3])\r\n                {\r\n                    nextMaxDepositable = _userCurMax.add(levelDeposit[1]);\r\n                }\r\n                else\r\n                {\r\n                    nextMaxDepositable = _userCurMax.add(levelDeposit[1]);\r\n                }\r\n            }\r\n        }\r\n        else\r\n        {\r\n            nextMaxDepositable = _userCurMax;\r\n        }\r\n        userCycleMax[_userAddr][_curCycle + 1] = nextMaxDepositable;\r\n        user.maxDepositable = nextMaxDepositable;\r\n    }\r\n\r\n    function _updateLevel(address _userAddr) private {\r\n        UserInfo storage user = userInfo[_userAddr];\r\n        for(uint256 i = user.level; i < levelDeposit.length; i++){\r\n            if(user.maxDeposit >= levelDeposit[i]){\r\n                if(i < 3){\r\n                    user.level = i + 1;\r\n                }\r\n                else\r\n                {\r\n                    (uint256 maxTeam, uint256 otherTeam, ) = getTeamDeposit(_userAddr);\r\n                    if(maxTeam >= levelInvite[i] && otherTeam >= levelInvite[i] && user.teamNum >= levelTeam[i]){\r\n                        user.level = i + 1;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function withdraw() external {\r\n        RewardInfo storage userRewards = rewardInfo[msg.sender];        \r\n        uint256 rewardsStatic = userRewards.statics.add(userRewards.invited).add(userRewards.bonusReleased).add(userRewards.l5Released);        \r\n        uint256 incomeFee = rewardsStatic.mul(incomeFeePercents).div(baseDividend);\r\n        usdt.transfer(feeReceiver, incomeFee);\r\n        uint256 leftReward = rewardsStatic.sub(incomeFee);\r\n        uint256 activation = leftReward.mul(activationPercents).div(baseDividend);\r\n        uint256 withdrawable = leftReward.sub(activation);\r\n        uint256 capitals = userRewards.capitals;\r\n        userRewards.capitals = 0;\r\n        userRewards.statics = 0;\r\n        userRewards.invited = 0;\r\n        userRewards.bonusReleased = 0;\r\n        userRewards.l5Released = 0;        \r\n        userRewards.activation = userRewards.activation.add(activation);\r\n        userRewards.lastWithdaw = block.timestamp;\r\n        withdrawable = withdrawable.add(capitals);\r\n        usdt.transfer(msg.sender, withdrawable);\r\n        if(!isFreezing) _setFreezeReward();\r\n        emit Withdraw(msg.sender, incomeFee, activation, withdrawable);\r\n    }\r\n\r\n    function transferByActivation(address _receiver, uint256 _amount) external {\r\n        uint256 minTransfer = levelDeposit[0];\r\n        require(_amount >= minTransfer && _amount.mod(minTransfer) == 0, \"amount err\");\r\n        uint256 subBal = _amount.add(_amount.mul(transferFeePercents).div(baseDividend));\r\n        RewardInfo storage userRewards = rewardInfo[msg.sender];\r\n        require(userRewards.activation >= subBal, \"insufficient activation balance\");\r\n        userRewards.activation = userRewards.activation.sub(subBal);\r\n        rewardInfo[_receiver].activation = rewardInfo[_receiver].activation.add(_amount);\r\n        emit TransferByActivation(msg.sender, subBal, _receiver, _amount);\r\n    }\r\n\r\n    function depositFund(uint256 _amount) external {\r\n        uint256 minTransfer = 1e6;\r\n        require(_amount >= minTransfer && _amount.mod(minTransfer) == 0, \"amount err\");        \r\n        usdt.transferFrom(msg.sender, address(this), _amount);\r\n\t\tuserInfo[msg.sender].totalUsdt = userInfo[msg.sender].totalUsdt.add(_amount);\r\n        emit DepositFund(msg.sender, _amount);\r\n    }\r\n\r\n    function transferFund(address _receiver, uint256 _amount) external {\r\n        uint256 minTransfer = 25e6;\r\n        require(_amount >= minTransfer && _amount.mod(minTransfer) == 0, \"amount err\");\r\n        require(userInfo[msg.sender].totalUsdt >= _amount, \"insufficient USDT fund balance\");\r\n        userInfo[msg.sender].totalUsdt = userInfo[msg.sender].totalUsdt.sub(_amount);\r\n        userInfo[_receiver].totalUsdt = userInfo[_receiver].totalUsdt.add(_amount);\r\n        emit TransferFund(msg.sender, _receiver, _amount);\r\n    }\r\n\r\n    function _balActived() private {\r\n        uint256 bal = usdt.balanceOf(address(this));\r\n        for(uint256 i = balReached.length; i > 0; i--){\r\n            if(bal >= balReached[i - 1]){\r\n                balStatus[balReached[i - 1]] = true;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function _setFreezeReward() private {\r\n        uint256 bal = usdt.balanceOf(address(this));\r\n        for(uint256 i = balReached.length; i > 0; i--){\r\n            if(balStatus[balReached[i - 1]])\r\n            {\r\n                if(!isFreezing)\r\n                {\r\n                    if(bal < balFreeze[i - 1])\r\n                    {\r\n                        isFreezing = true; \r\n                        freezedTimes = freezedTimes + 1;                       \r\n                        freezeTime[freezedTimes] = block.timestamp;\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    if(bal >= balUnfreeze[i - 1])\r\n                    {\r\n                        isFreezing = false;\r\n                        unfreezeTime[freezedTimes] = block.timestamp;\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function getOrderUnfreezeTime(address _userAddr, uint256 _index) public view returns(uint256 orderUnfreezeTime) {\r\n        OrderInfo storage order = orderInfos[_userAddr][_index];\r\n        orderUnfreezeTime = order.unfreeze;\r\n    }\r\n\r\n    function getUserCycleDepositable(address _userAddr, uint256 _cycle) public view returns(uint256 cycleMin, uint256 cycleMax) {\r\n        UserInfo storage user = userInfo[_userAddr];\r\n        if(user.maxDeposit > 0)\r\n        {\r\n            cycleMin = user.maxDeposit;\r\n            cycleMax = userCycleMax[_userAddr][_cycle];\r\n            if(cycleMax == 0) cycleMax = user.maxDepositable;\r\n            uint256 curMaxDepositable = getCurMaxDepositable();\r\n            if(user.startTime < freezeTime[freezedTimes]) cycleMax = curMaxDepositable;            \r\n        }\r\n        else\r\n        {\r\n            cycleMin = levelDeposit[0];\r\n            cycleMax = levelDeposit[1];\r\n        }\r\n    }\r\n\r\n    function getTeamDeposit(address _userAddr) public view returns(uint256 maxTeam, uint256 otherTeam, uint256 totalTeam){\r\n        address[] memory directTeamUsers = teamUsers[_userAddr][0];\r\n        for(uint256 i = 0; i < directTeamUsers.length; i++){\r\n            UserInfo storage user = userInfo[directTeamUsers[i]];\r\n            uint256 userTotalTeam = user.teamTotalDeposit.add(user.totalFreezed);\r\n            totalTeam = totalTeam.add(userTotalTeam);\r\n            if(userTotalTeam > maxTeam) maxTeam = userTotalTeam;\r\n            if(i >= maxSearchDepth) break;\r\n        }\r\n        otherTeam = totalTeam.sub(maxTeam);\r\n    }\r\n\r\n    function getCurDay() public view returns(uint256) {\r\n        return (block.timestamp.sub(startTime)).div(timeStep);\r\n    }\r\n\r\n    function getCurCycle() public view returns(uint256) {\r\n        return (block.timestamp.sub(startTime)).div(dayPerCycle);\r\n    }\r\n\r\n    function getCurMaxDepositable() public view returns(uint256) {\r\n        return levelDeposit[4];\r\n    }\r\n\r\n    function getMaxDayNewbies(uint256 _day) public pure returns(uint256) {\r\n        return initDayNewbies + _day.mul(incNumber).div(incInterval);\r\n    }\r\n\r\n    function getOrderLength(address _userAddr) public view returns(uint256) {\r\n        return orderInfos[_userAddr].length;\r\n    }\r\n\r\n    function getLatestDepositors(uint256 _length) public view returns(address[] memory latestDepositors) {\r\n        uint256 totalCount = depositors.length;\r\n        if(_length > totalCount) _length = totalCount;\r\n        latestDepositors = new address[](_length);\r\n        for(uint256 i = totalCount; i > totalCount - _length; i--){\r\n            latestDepositors[totalCount - i] = depositors[i - 1];\r\n        }\r\n    }\r\n\r\n    function getTeamUsers(address _userAddr, uint256 _layer) public view returns(address[] memory) {\r\n        return teamUsers[_userAddr][_layer];\r\n    }\r\n\r\n    function getDayInfos(uint256 _day) external view returns(address[] memory newbies, uint256 deposits){\r\n        return (dayNewbies[_day], dayDeposits[_day]);\r\n    }\r\n\r\n    function getBalStatus(uint256 _bal) external view returns(bool) {\r\n        return balStatus[_bal];\r\n    }\r\n\r\n    function getUserCycleMax(address _userAddr, uint256 _cycle) external view returns(uint256){\r\n        return userCycleMax[_userAddr][_cycle];\r\n    }\r\n\r\n    function getUserInfos(address _userAddr) external view returns(UserInfo memory user, RewardInfo memory reward, OrderInfo[] memory orders, bool unfreeze) {\r\n        user = userInfo[_userAddr];\r\n        reward = rewardInfo[_userAddr];\r\n        orders = orderInfos[_userAddr];\r\n        unfreeze = isUnfreezedReward[_userAddr][freezedTimes];\r\n    }\r\n\r\n    function getContractInfos() external view returns(address[3] memory infos0, uint256[7] memory infos1, bool freezing) {\r\n        infos0[0] = address(usdt);\r\n        infos0[1] = feeReceiver;\r\n        infos0[2] = defaultRefer;\r\n        infos1[0] = startTime;\r\n        infos1[2] = totalUsers;\r\n        infos1[3] = totalDeposit;\r\n        infos1[4] = freezedTimes;\r\n        infos1[5] = freezeTime[freezedTimes];\r\n        infos1[6] = unfreezeTime[freezedTimes];\r\n        freezing = isFreezing;\r\n    }   \r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdtAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_defaultRefer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"types\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isFreezing\",\"type\":\"bool\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositFund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"}],\"name\":\"Register\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"subBal\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferByActivation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferFund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"incomeFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"activation\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdraw\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositByActivation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bal\",\"type\":\"uint256\"}],\"name\":\"getBalStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractInfos\",\"outputs\":[{\"internalType\":\"address[3]\",\"name\":\"infos0\",\"type\":\"address[3]\"},{\"internalType\":\"uint256[7]\",\"name\":\"infos1\",\"type\":\"uint256[7]\"},{\"internalType\":\"bool\",\"name\":\"freezing\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurCycle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurMaxDepositable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_day\",\"type\":\"uint256\"}],\"name\":\"getDayInfos\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"newbies\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"deposits\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_length\",\"type\":\"uint256\"}],\"name\":\"getLatestDepositors\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"latestDepositors\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_day\",\"type\":\"uint256\"}],\"name\":\"getMaxDayNewbies\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddr\",\"type\":\"address\"}],\"name\":\"getOrderLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getOrderUnfreezeTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"orderUnfreezeTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddr\",\"type\":\"address\"}],\"name\":\"getTeamDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTeam\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"otherTeam\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalTeam\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_layer\",\"type\":\"uint256\"}],\"name\":\"getTeamUsers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_cycle\",\"type\":\"uint256\"}],\"name\":\"getUserCycleDepositable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cycleMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleMax\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_cycle\",\"type\":\"uint256\"}],\"name\":\"getUserCycleMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddr\",\"type\":\"address\"}],\"name\":\"getUserInfos\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxDepositable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"teamNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"teamTotalDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalFreezed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRevenue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unfreezeIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalUsdt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isMaxFreezing\",\"type\":\"bool\"}],\"internalType\":\"struct NAVICLOUDS.UserInfo\",\"name\":\"user\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"capitals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"statics\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"invited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonusFreezed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonusReleased\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"l5Freezed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"l5Released\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"activation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastWithdaw\",\"type\":\"uint256\"}],\"internalType\":\"struct NAVICLOUDS.RewardInfo\",\"name\":\"reward\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unfreeze\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isUnfreezed\",\"type\":\"bool\"}],\"internalType\":\"struct NAVICLOUDS.OrderInfo[]\",\"name\":\"orders\",\"type\":\"tuple[]\"},{\"internalType\":\"bool\",\"name\":\"unfreeze\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referral\",\"type\":\"address\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renew\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferByActivation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "NAVICLOUDS", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000c2132d05d31c914a87c6611c10748aeb04b58e8f000000000000000000000000613b4af9151e88428e07060390e7d98f1d16dfc3000000000000000000000000e74b16a10df0b6c15ab4ee51b9d9a0503987b3c60000000000000000000000000000000000000000000000000000000064b10788", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e12d314baedd532148db784316313e902d0f1d2ae5e2af1816ac99663adf5cea"}