{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 30000\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"contracts/PandaUtils.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\ninterface ERC721 {\\n    function balanceOf(address) external view returns (uint);\\n\\n    function ownerOf(uint) external view returns (address);\\n\\n    function send(uint16 _dstChainId, bytes calldata _toAddress, uint _tokenId, address _refundAddress, address _zroPaymentAddress, bytes calldata _adapterParams) external payable;\\n}\\n\\ncontract PandaUtils {\\n    ERC721 public pandas;\\n\\n    constructor(ERC721 _pandas) {\\n        pandas = _pandas;\\n    }\\n\\n    function viewBalance(address nft, address holder) external view returns (uint) {\\n        return ERC721(nft).balanceOf(holder);\\n    }\\n\\n    function sendBatch(uint16 _dstChainId, bytes calldata _toAddress, uint[] memory _tokenIds, address _refundAddress, address _zroPaymentAddress, bytes calldata _adapterParams) external payable {\\n        uint msgVal = msg.value / _tokenIds.length;\\n        for (uint i = 0; i < _tokenIds.length; i++) {\\n            require(pandas.ownerOf(_tokenIds[i]) == msg.sender, \\\"caller is not the owner\\\");\\n            pandas.send{value: msgVal}(_dstChainId, _toAddress, _tokenIds[i], _refundAddress, _zroPaymentAddress, _adapterParams);\\n        }\\n    }\\n\\n    //if collection size is too large. receiving context deadline exceeded (ie. arbitrum)\\n    function viewOwnedIdsBatch(address nft, address holder, uint startTokenId, uint endTokenId) external view returns (uint[] memory returnData) {\\n        uint balance = ERC721(nft).balanceOf(holder);\\n        returnData = new uint[](balance);\\n        uint pos = 0;\\n        for (uint i = startTokenId; i <= endTokenId; i++) {\\n            try ERC721(nft).ownerOf(i) returns (address owner) {\\n                if (owner == holder) {\\n                    returnData[pos] = i;\\n                    pos++;\\n                }\\n                if (pos >= balance) {\\n                    i = endTokenId + 1;\\n                }\\n            } catch {}\\n        }\\n    }\\n\\n    function viewOwnedIds(address nft, address holder, uint supply) external view returns (uint[] memory returnData) {\\n        uint balance = ERC721(nft).balanceOf(holder);\\n        returnData = new uint[](balance);\\n        uint pos = 0;\\n        for (uint i = 0; i < supply; i++) {\\n            try ERC721(nft).ownerOf(i) returns (address owner) {\\n                if (owner == holder) {\\n                    returnData[pos] = i;\\n                    pos++;\\n                }\\n                if (pos >= balance) {\\n                    i = supply;\\n                }\\n            } catch {}\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract ERC721\",\"name\":\"_pandas\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"pandas\",\"outputs\":[{\"internalType\":\"contract ERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_toAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_refundAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_zroPaymentAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_adapterParams\",\"type\":\"bytes\"}],\"name\":\"sendBatch\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"viewBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"}],\"name\":\"viewOwnedIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"returnData\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTokenId\",\"type\":\"uint256\"}],\"name\":\"viewOwnedIdsBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"returnData\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "PandaUtils", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "30000", "ConstructorArguments": "000000000000000000000000acf63e56fd08970b43401492a02f6f38b6635c91", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}