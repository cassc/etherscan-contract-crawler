{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/MarketplaceMaterial.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"./utils/IBalanceVault.sol\\\";\\nimport \\\"./utils/IMaterialVault.sol\\\";\\n\\n/**\\n * @dev Smart Contract let user buy and sell their mateirals.\\n * Has a function to initialize values in upgradable Smart Contract.\\n * Has a function to set and get publication fee when user creates a order in marketpalce.\\n * Has a function to set share owner will get when user successfully sell an material.\\n * Has a function to create order to sell material on marketpalce.\\n * Has a function to cancel order on marketplace.\\n * Has a function to execute(buy) order in marketplace.\\n * The purpose of this function is for user to able to buy or sell material in our platform.\\n */\\ncontract MarketplaceMaterial is Ownable, AccessControl, ReentrancyGuard {\\n\\n    /**\\n     * @dev use interface to set vault\\n     * IBalanceVault - set intetface for vaultBalance\\n     * IMaterialVault - set intetface for vaultMaterial\\n    */\\n    address public _Owner;\\n    IBalanceVault public vaultBalance;\\n    IMaterialVault public vaultMaterial;\\n\\n    bool internal _paused;\\n\\n    struct Order {\\n        bytes32 id;\\n        address seller;\\n        uint256 materialId;\\n        uint256 materialAmount;\\n        uint256 price;\\n    } \\n\\n    mapping (address => mapping(bytes32 => Order)) public orderByOrderId;\\n    uint256 public ownerCutPerMillion;\\n    uint256 public publicationFeeInWei;\\n  \\n    bytes32 public constant VAULT_ADMIN = keccak256(\\\"VAULT_ADMIN\\\");\\n    \\n    /**\\n     * @dev Declare event for use emit `SetVaultBalanceAddressMaterial`, `SetVaultMaterialAddressMaterial`, `OrderCreatedMaterial`, `OrderCancelledMaterial`, `OrderExecutedMaterial`, `OrderDetailMaterial`, `MarketplacePaused`, `MarketplaceUnpaused`, `ChangePublicationFeeMaterial`, `ChangeOwnerCutPerMillionMaterial`.\\n     */\\n    event SetVaultBalanceAddressMaterial(address indexed vaultAddress);\\n    event SetVaultMaterialAddressMaterial(address indexed vaultAddress);\\n    event OrderCreatedMaterial(bytes32 orderId, address indexed seller, uint256 materialId, uint256 materialAmount, uint256 nakaAmountTomaterial);\\n    event OrderCancelledMaterial(bytes32 orderId, address indexed seller, uint256 materialId, uint256 materialAmount);\\n    event OrderExecutedMaterial(bytes32 orderId, address indexed buyer, address indexed seller, uint256 materialId, uint256 materialAmount, uint256 buyItemAmount ,uint256 totalPriceNaka,uint256 ownerCutPerMillion);\\n    event OrderDetailMaterial(bytes32 orderId, address indexed seller, uint256 materialId, uint256 materialAmount, uint256 nakaAmount);\\n    event ChangePublicationFeeMaterial(uint256 newPublicationFeeInWei);\\n    event ChangeOwnerCutPerMillionMaterial(uint256 newOwnerCutPerMillion);\\n   \\n  \\n    event MarketplaceMaterialPaused();\\n    event MarketplaceMaterialUnpaused();\\n\\n    /*\\n     * Network: Polygon Mainnet\\n     */\\n    /** \\n    * @dev Sets the value of the `admin`, `tokenAddress`, `publicationFeeInWeiNFT` and `ownerCutPerMillionNFT`.\\n    * @param _vaultBalanceAddress - balance vault address.\\n    * @param _vaultMaterialAddress - material vault address.\\n    * @param _publicationFee - publication fee when create order.\\n    * @param _ownerCutPerMillion - share sent to owner when order successfully executed.\\n    * @param _owner - admin address.\\n    */\\n    constructor(\\n         address _vaultBalanceAddress,\\n         address _vaultMaterialAddress,\\n         uint256 _publicationFee,\\n         uint256 _ownerCutPerMillion,\\n         address _owner\\n    ) {\\n        vaultBalance = IBalanceVault(_vaultBalanceAddress);\\n        emit SetVaultBalanceAddressMaterial(address(vaultBalance));\\n\\n        vaultMaterial = IMaterialVault(_vaultMaterialAddress);\\n        emit SetVaultMaterialAddressMaterial(address(vaultMaterial));\\n\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _Owner = _owner;\\n\\n        publicationFeeInWei = _publicationFee;\\n        setOwnerCutPerMillion(publicationFeeInWei);\\n        \\n        ownerCutPerMillion = _ownerCutPerMillion;\\n        setOwnerCutPerMillion(ownerCutPerMillion);\\n   }\\n\\n    /**\\n    * @dev Modifier to only allow the function to be executed when it isn't paused.\\n    */\\n    modifier whenMarketplaceMaterialNotPaused() {\\n        require(!_paused, \\\"[Marketplace.whenMarketplaceMaterialNotPaused] Not Paused\\\");\\n        _;\\n    }\\n\\n    /**\\n    * @dev Modifier to only allow the function to be executed when it is paused.\\n    */\\n    modifier whenMarketplaceMaterialPaused() {\\n        require(_paused, \\\"[Marketplace.whenMarketplaceMaterialPaused] Paused\\\");\\n        _;\\n    }\\n   \\n    /**\\n     * @dev Set publication fee that will be sent to admin when create order on marketplace\\n     * Emit value of publication fee.\\n     * Can only be called by owner.\\n     * @param _publicationFee - publication fee\\n     */\\n    function setPublicationFee(uint256 _publicationFee) external onlyOwner {\\n        publicationFeeInWei = _publicationFee;\\n        emit ChangePublicationFeeMaterial(publicationFeeInWei);\\n    }\\n\\n    /**\\n     * @dev Get publicationFeeInWei's value.\\n     */\\n    function getPublicationFee() external view returns (uint256) {\\n        return publicationFeeInWei;\\n    }\\n  \\n    /**\\n     * @dev Set share per million that will be sent to admin when an order is successfully executed.\\n     * Emit value of ownerCutPerMillionNFT.\\n     * Can only be called by owner.\\n     * @param _ownerCutPerMillion - share that will be cut per million\\n     */\\n    function setOwnerCutPerMillion(uint256 _ownerCutPerMillion) public onlyOwner {\\n        require(_ownerCutPerMillion < 1000000, \\\"The owner cut should be between 0 and 999,999\\\");\\n\\n        ownerCutPerMillion = _ownerCutPerMillion;\\n        emit ChangeOwnerCutPerMillionMaterial(ownerCutPerMillion);\\n    }\\n\\n    /**\\n     * @dev Get ownerCutPerMillion's value.\\n     */\\n    function getOwnerCutPerMillion() external view returns(uint256) {\\n        return ownerCutPerMillion;\\n    }\\n\\n    /**\\n     * @dev Create order on marketplace for selling material.\\n     * Emit details of createded Order.\\n     * @param _materialId - material id of specific material.\\n     * @param _materialAmount - amount of material to sell.\\n     * @param _nakaAmount - Naka token amount of each materials user want to sell.\\n     * @return order - creaded order\\n     */\\n    function createOrderMaterial (uint256 _materialId, uint256 _materialAmount, uint256 _nakaAmount) public whenMarketplaceMaterialNotPaused returns (Order memory) {\\n            bytes32 _orderId = keccak256(\\n                abi.encodePacked(\\n                block.timestamp,\\n                _materialId,\\n                msg.sender,\\n                _nakaAmount\\n            )\\n        );\\n\\n        vaultMaterial.decreaseMaterialUserSingle(msg.sender, _materialId, _materialAmount);\\n\\n        if (publicationFeeInWei >= 0) {\\n            vaultBalance.decreaseBalance(msg.sender,publicationFeeInWei);\\n            vaultBalance.increaseBalance(_Owner,publicationFeeInWei);\\n        }\\n\\n        Order memory order = orderByOrderId[msg.sender][_orderId] = Order({\\n            id: _orderId,\\n            seller: msg.sender,\\n            materialId: _materialId,\\n            materialAmount:_materialAmount,\\n            price: _nakaAmount\\n        });\\n\\n        emit OrderCreatedMaterial(_orderId, msg.sender, _materialId, _materialAmount, _nakaAmount);\\n\\n        return order;\\n    }\\n\\n    /**\\n     * @dev Cancel order on marketplace.\\n     * Emit details of canceled Order.\\n     * @param _sellerAccount - seller's address\\n     * @param _orderId - order id in marketpalce\\n     * @return order - cancelled order\\n     */\\n    function cancelOrderMaterial(address _sellerAccount ,bytes32 _orderId) public whenMarketplaceMaterialNotPaused returns (Order memory) {\\n        Order memory order = orderByOrderId[_sellerAccount][_orderId] ;\\n\\n        require(order.id != 0, \\\"Asset not published\\\");\\n        require(order.seller == msg.sender, \\\"Unauthorized user\\\");\\n\\n        vaultMaterial.increaseMaterialUserSingle(order.seller, order.materialId, order.materialAmount);\\n        delete orderByOrderId[order.seller][_orderId];\\n\\n        emit OrderCancelledMaterial(order.id, order.seller, order.materialId, order.materialAmount);\\n\\n        return order;\\n    }\\n   \\n    /**\\n     * @dev Execute order on marketplace.\\n     * Emit details of executed Order.\\n     * @param _sellerAccount - seller's address\\n     * @param _orderId - order id in marketpalce\\n     * @param _materialAmount - materialAmount to buy\\n     * @return order - cancelled order\\n     */\\n    function executeOrderMaterial(address _sellerAccount, bytes32 _orderId , uint256 _materialAmount) public whenMarketplaceMaterialNotPaused returns (Order memory) {\\n        uint saleShareAmount = 0;\\n        \\n        Order memory order = orderByOrderId[_sellerAccount][_orderId];\\n        require(order.id != 0, \\\"Asset not published\\\");\\n        require (order.materialAmount >= _materialAmount, \\\"Item in order not enough\\\");\\n        order.materialAmount -= _materialAmount;\\n        orderByOrderId[_sellerAccount][_orderId] = Order({\\n            id: order.id,\\n            seller: order.seller,\\n            materialId: order.materialId,\\n            materialAmount: order.materialAmount,\\n            price: order.price\\n        });\\n        uint totalPrice  = order.price * _materialAmount;\\n        vaultBalance.decreaseBalance(msg.sender,totalPrice);\\n        vaultMaterial.increaseMaterialUserSingle(msg.sender,order.materialId,_materialAmount);\\n        vaultBalance.increaseBalance(order.seller,totalPrice);\\n        \\n        \\n        if (ownerCutPerMillion >= 0) {\\n            saleShareAmount = (totalPrice *(ownerCutPerMillion))/(1000000);\\n            vaultBalance.decreaseBalance(order.seller,saleShareAmount);\\n            vaultBalance.increaseBalance(_Owner,saleShareAmount);\\n        }\\n\\n        if(order.materialAmount == 0){\\n            delete orderByOrderId[_sellerAccount][_orderId];\\n        }\\n\\n        emit OrderExecutedMaterial(order.id, msg.sender, order.seller, order.materialId, order.materialAmount, _materialAmount ,totalPrice, saleShareAmount);\\n        return order;\\n    }\\n\\n    /**\\n     * @dev Get info of an order\\n     * Emit order detail\\n     * @param _sellerAccount - seller's address\\n     * @param _orderId - order id in marketpalce\\n     * @return order - cancelled order\\n     */\\n    function getOrderInfoMaterial(address _sellerAccount, bytes32 _orderId) external returns (Order memory) {\\n        Order memory order = orderByOrderId[_sellerAccount][_orderId];\\n\\n        require(order.id != 0, \\\"Asset not published\\\");\\n\\n        emit OrderDetailMaterial(order.id, order.seller, order.materialId, order.materialAmount, order.price);\\n\\n        return order;\\n    }\\n\\n    function multiGrantRole(bytes32 _role,address [] memory _workerAddress) external onlyOwner{\\n        uint256 _length = _workerAddress.length;\\n           for (uint256 i = 0; i < _length; i++){\\n                grantRole(_role, _workerAddress[i]);\\n           }\\n    }\\n\\n    /**\\n    * @dev Function to pause functions in this contract.\\n    * can only be called by the creator of contract.\\n    */\\n    function pauseMarketplace() external onlyOwner whenMarketplaceMaterialNotPaused {\\n        _paused = true;\\n        emit MarketplaceMaterialPaused();\\n    }\\n\\n    /**\\n    * @dev Function to unpause functions in this contract.\\n    * can only be called by the creator of contract.\\n    */\\n    function unpauseMarketplace() external onlyOwner whenMarketplaceMaterialPaused {\\n        _paused = false;\\n        emit MarketplaceMaterialUnpaused();\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/IBalanceVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\ninterface IBalanceVault{\\n    function depositNaka(uint256 _nakaAmount) external;\\n\\n    function withdrawNaka(uint256 _nakaAmount) external;\\n\\n    function increaseBalance(address _userAddress, uint256 _nakaAmount) external;\\n\\n    function decreaseBalance(address _userAddress, uint256 _nakaAmount) external;\\n\\n    function getBalance(address _address) external view returns (uint256);\\n}\"\r\n    },\r\n    \"contracts/utils/IMaterialVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\ninterface IMaterialVault{\\n    function increaseMaterialUserSingle(address _addressUser, uint256 _materialId, uint256 _materialAmount) external;\\n\\n    function increaseMaterialUser(address _addressUser, uint256[] memory _materialIds, uint256[] memory  _materialAmounts) external;\\n\\n    function decreaseMaterialUserSingle(address _addressUser, uint256 _materialId, uint256 _materialAmount) external;\\n\\n    function decreaseMaterialUser(address _addressUser, uint256[] memory _materialIds, uint256[] memory _materialAmounts) external;\\n\\n    function moveMaterialOutSingle(address _addressUserReceiver, uint256 _materialId, uint256 _materialAmount) external;\\n\\n    function moveMaterialOut(uint256[] memory _materialIds, uint256[] memory _materialAmounts) external;\\n\\n    function transferMaterialUserSingle(address _addressUserSender, address _addressUserReceiver, uint256 _materialId, uint256 _materialAmount) external;\\n\\n    function transferMaterialUser(address _addressUserSender, address _addressUserReceiver, uint256[] memory _materialIds, uint256[] memory _materialAmounts) external;\\n\\n    function moveMaterialToUserSingle(address _addressUserReceiver, uint256 _materialId, uint256 _materialAmount) external;\\n\\n    function moveMaterialToUser(address _addressUserReceiver, uint256[] memory _materialIds, uint256[] memory _materialAmounts) external;\\n\\n    function getMaterialAmountbyUser(address _addressUser, uint256 _materialId) external view returns (uint256);\\n\\n    function getAllMaterialAmountbyUser(address _addressUser) external view returns (uint256[] memory);\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultBalanceAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vaultMaterialAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_publicationFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ownerCutPerMillion\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newOwnerCutPerMillion\",\"type\":\"uint256\"}],\"name\":\"ChangeOwnerCutPerMillionMaterial\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPublicationFeeInWei\",\"type\":\"uint256\"}],\"name\":\"ChangePublicationFeeMaterial\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MarketplaceMaterialPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MarketplaceMaterialUnpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"materialId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"materialAmount\",\"type\":\"uint256\"}],\"name\":\"OrderCancelledMaterial\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"materialId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"materialAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nakaAmountTomaterial\",\"type\":\"uint256\"}],\"name\":\"OrderCreatedMaterial\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"materialId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"materialAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nakaAmount\",\"type\":\"uint256\"}],\"name\":\"OrderDetailMaterial\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"materialId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"materialAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyItemAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalPriceNaka\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ownerCutPerMillion\",\"type\":\"uint256\"}],\"name\":\"OrderExecutedMaterial\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vaultAddress\",\"type\":\"address\"}],\"name\":\"SetVaultBalanceAddressMaterial\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vaultAddress\",\"type\":\"address\"}],\"name\":\"SetVaultMaterialAddressMaterial\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VAULT_ADMIN\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_Owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sellerAccount\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_orderId\",\"type\":\"bytes32\"}],\"name\":\"cancelOrderMaterial\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"materialId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"materialAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct MarketplaceMaterial.Order\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_materialId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_materialAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nakaAmount\",\"type\":\"uint256\"}],\"name\":\"createOrderMaterial\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"materialId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"materialAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct MarketplaceMaterial.Order\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sellerAccount\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_orderId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_materialAmount\",\"type\":\"uint256\"}],\"name\":\"executeOrderMaterial\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"materialId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"materialAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct MarketplaceMaterial.Order\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sellerAccount\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_orderId\",\"type\":\"bytes32\"}],\"name\":\"getOrderInfoMaterial\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"materialId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"materialAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct MarketplaceMaterial.Order\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwnerCutPerMillion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPublicationFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_role\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"_workerAddress\",\"type\":\"address[]\"}],\"name\":\"multiGrantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"orderByOrderId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"materialId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"materialAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerCutPerMillion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseMarketplace\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicationFeeInWei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ownerCutPerMillion\",\"type\":\"uint256\"}],\"name\":\"setOwnerCutPerMillion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_publicationFee\",\"type\":\"uint256\"}],\"name\":\"setPublicationFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpauseMarketplace\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultBalance\",\"outputs\":[{\"internalType\":\"contract IBalanceVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultMaterial\",\"outputs\":[{\"internalType\":\"contract IMaterialVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "MarketplaceMaterial", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000eea606456d3376aa32eb180d999be489fed1f4ab0000000000000000000000001f02bde0a0b585d23eb9030de2173ee36036b7cf00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f478d89fde97e9719a5edd0e461dfabaccfc3f7d", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}