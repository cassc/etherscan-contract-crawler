{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"Lootbox.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n\\n/**\\n * Authors: Moonstream Engineering (engineering@moonstream.to)\\n * GitHub: https://github.com/bugout-dev/dao\\n */\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"TerminusFacet.sol\\\";\\nimport \\\"IERC20.sol\\\";\\nimport \\\"IERC1155.sol\\\";\\nimport \\\"Ownable.sol\\\";\\nimport \\\"Pausable.sol\\\";\\nimport \\\"ReentrancyGuard.sol\\\";\\nimport \\\"ERC1155Holder.sol\\\";\\n\\nimport \\\"ControllableWithTerminus.sol\\\";\\nimport \\\"LootboxRandomness.sol\\\";\\n\\n/**\\n * @title Moonstream Lootbox managing contract\\n * @author Moonstream Engineering (engineering@moonstream.to)\\n * @notice You can create lootboxes represented by terminus pools that includes ERC20 and ERC1155 tokens\\n */\\ncontract Lootbox is\\n    ERC1155Holder,\\n    ControllableWithTerminus,\\n    LootboxRandomness,\\n    Pausable,\\n    ReentrancyGuard\\n{\\n    address public terminusAddress;\\n    address public administratorTerminusAddress;\\n    uint256 private _totalLootboxCount;\\n\\n    uint256 public ERC20_REWARD_TYPE = 20;\\n    uint256 public ERC1155_REWARD_TYPE = 1155;\\n    uint256 public TERMINUS_MINTABLE_REWARD_TYPE = 1;\\n\\n    uint256 public ORDINARY_LOOTBOX_TYPE = 0;\\n    uint256 public RANDOM_LOOTBOX_TYPE_1 = 1;\\n\\n    /**\\n     * @dev Lootbox item structure\\n     * @notice Only for erc20 and erc1155 tokens\\n     */\\n\\n    struct LootboxItem {\\n        uint256 rewardType; // reward type: 20 for ERC20, 1155 for ERC1155\\n        address tokenAddress; // address of the token\\n        uint256 tokenId; // id of the token, any number for erc20\\n        uint256 amount; // amount of the token\\n        uint256 weight; // weight of item (only for random lootboxes)\\n    }\\n\\n    // Mapping from lootbox id to lootbox items (access by index)\\n    mapping(uint256 => mapping(uint256 => LootboxItem)) private lootboxItems;\\n    // Mapping from lootbox id to lootbox item count\\n    mapping(uint256 => uint256) private lootboxItemCounts;\\n\\n    mapping(uint256 => uint256) public terminusPoolIdbyLootboxId;\\n    mapping(uint256 => uint256) public lootboxIdbyTerminusPoolId;\\n\\n    mapping(uint256 => uint256) public lootboxTypebyLootboxId;\\n    // 0 => ordinary lootbox\\n    // 1 => random lootbox\\n\\n    event LootboxCreated(uint256 indexed lootboxId);\\n    event LootboxItemAdded(uint256 indexed lootboxId, LootboxItem lootboxItem);\\n    event LootboxItemRemoved(\\n        uint256 indexed lootboxId,\\n        LootboxItem lootboxItem\\n    );\\n    // How to call the user who opened the lootbox?\\n    event LootboxOpened(\\n        uint256 indexed lootboxId,\\n        address opener,\\n        uint256 lootboxItemCount\\n    );\\n\\n    /**\\n     * @dev Initializes the Lootbox contract with the terminus address and administrator pool id.\\n     * @param _terminusAddress The address of the Terminus contract.\\n     * @param _administratorPoolId The id of the administrator terminus pool.\\n     */\\n    constructor(\\n        address _terminusAddress,\\n        address _administratorTerminusAddress,\\n        uint256 _administratorPoolId,\\n        address _VRFCoordinatorAddress,\\n        address _LinkTokenAddress,\\n        uint256 _ChainlinkVRFFee,\\n        bytes32 _ChainlinkVRFKeyhash\\n    )\\n        ControllableWithTerminus(\\n            _administratorTerminusAddress,\\n            _administratorPoolId\\n        )\\n        LootboxRandomness(\\n            _VRFCoordinatorAddress,\\n            _LinkTokenAddress,\\n            _ChainlinkVRFFee,\\n            _ChainlinkVRFKeyhash\\n        )\\n    {\\n        terminusAddress = _terminusAddress;\\n        administratorTerminusAddress = _administratorTerminusAddress;\\n    }\\n\\n    function mintLootbox(\\n        uint256 lootboxId,\\n        address recipient,\\n        uint256 amount,\\n        bytes memory data\\n    ) public onlyAdministrator nonReentrant {\\n        uint256 lootboxTerminusPoolId = terminusPoolIdbyLootboxId[lootboxId];\\n        TerminusFacet terminusContract = TerminusFacet(terminusAddress);\\n        terminusContract.mint(recipient, lootboxTerminusPoolId, amount, data);\\n    }\\n\\n    function batchMintLootboxes(\\n        uint256 lootboxId,\\n        address[] memory toAddresses,\\n        uint256[] memory amounts\\n    ) public onlyAdministrator nonReentrant {\\n        uint256 lootboxTerminusPoolId = terminusPoolIdbyLootboxId[lootboxId];\\n        TerminusFacet terminusContract = TerminusFacet(terminusAddress);\\n\\n        terminusContract.poolMintBatch(\\n            lootboxTerminusPoolId,\\n            toAddresses,\\n            amounts\\n        );\\n    }\\n\\n    function batchMintLootboxesConstant(\\n        uint256 lootboxId,\\n        address[] memory toAddresses,\\n        uint256 amount\\n    ) public onlyAdministrator nonReentrant {\\n        uint256 lootboxTerminusPoolId = terminusPoolIdbyLootboxId[lootboxId];\\n        TerminusFacet terminusContract = TerminusFacet(terminusAddress);\\n\\n        for (uint256 i = 0; i < toAddresses.length; i++) {\\n            terminusContract.mint(\\n                toAddresses[i],\\n                lootboxTerminusPoolId,\\n                amount,\\n                \\\"\\\"\\n            );\\n        }\\n    }\\n\\n    function getLootboxURI(\\n        uint256 lootboxId\\n    ) public view returns (string memory) {\\n        uint256 lootboxTerminusPoolId = terminusPoolIdbyLootboxId[lootboxId];\\n        TerminusFacet terminusContract = TerminusFacet(terminusAddress);\\n        return terminusContract.uri(lootboxTerminusPoolId);\\n    }\\n\\n    function setLootboxURI(\\n        uint256 lootboxId,\\n        string memory uri\\n    ) public onlyAdministrator {\\n        uint256 lootboxTerminusPoolId = terminusPoolIdbyLootboxId[lootboxId];\\n        TerminusFacet terminusContract = TerminusFacet(terminusAddress);\\n        terminusContract.setURI(lootboxTerminusPoolId, uri);\\n    }\\n\\n    function getLootboxBalance(\\n        uint256 lootboxId,\\n        address owner\\n    ) public view returns (uint256) {\\n        uint256 lootboxTerminusPoolId = terminusPoolIdbyLootboxId[lootboxId];\\n        TerminusFacet terminusContract = TerminusFacet(terminusAddress);\\n        return terminusContract.balanceOf(owner, lootboxTerminusPoolId);\\n    }\\n\\n    /**\\n     * @dev Returns a initialized Terminus contract from the terminusAddress\\n     */\\n    function getTerminusContract() private view returns (TerminusFacet) {\\n        return TerminusFacet(terminusAddress);\\n    }\\n\\n    /**\\n     * @dev Returns the total lootbox count\\n     */\\n    function totalLootboxCount() public view returns (uint256) {\\n        return _totalLootboxCount;\\n    }\\n\\n    /**\\n     * @dev Returns the lootbox item count for a lootbox id\\n     * @param lootboxId The id of the lootbox\\n     */\\n    function lootboxItemCount(uint256 lootboxId) public view returns (uint256) {\\n        return lootboxItemCounts[lootboxId];\\n    }\\n\\n    /**\\n     * @dev Returns the lootbox item for a lootbox id and item index\\n     * @param lootboxId The id of the lootbox\\n     * @param itemIndex The index of the item in the lootbox\\n     */\\n    function getLootboxItemByIndex(\\n        uint256 lootboxId,\\n        uint256 itemIndex\\n    ) public view returns (LootboxItem memory) {\\n        return lootboxItems[lootboxId][itemIndex];\\n    }\\n\\n    /**\\n     * @dev creates a new lootbox with the given terminus pool id and lootbox items\\n     * @param items The lootbox items\\n     * @param terminusPoolId The terminus pool id\\n     */\\n    function createLootboxWithTerminusPool(\\n        LootboxItem[] memory items,\\n        uint256 terminusPoolId,\\n        uint256 lootboxType\\n    ) public {\\n        require(\\n            lootboxType == ORDINARY_LOOTBOX_TYPE ||\\n                lootboxType == RANDOM_LOOTBOX_TYPE_1,\\n            \\\"Unknown lootbox type\\\"\\n        );\\n\\n        uint256 lootboxId = _totalLootboxCount + 1;\\n        _totalLootboxCount++;\\n\\n        TerminusFacet terminusContract = TerminusFacet(terminusAddress);\\n\\n        require(\\n            lootboxIdbyTerminusPoolId[terminusPoolId] == 0,\\n            \\\"Another lootbox already exists formeaning this terminus pool\\\"\\n        );\\n\\n        require(\\n            terminusContract.terminusPoolController(terminusPoolId) ==\\n                address(this),\\n            \\\"The terminus pool is not controlled by Lootbox contract, please transfer the control to the contract.\\\"\\n        );\\n\\n        lootboxIdbyTerminusPoolId[terminusPoolId] = lootboxId;\\n        terminusPoolIdbyLootboxId[lootboxId] = terminusPoolId;\\n        emit LootboxCreated(lootboxId);\\n\\n        // Add the lootbox items\\n        for (uint256 i = 0; i < items.length; i++) {\\n            if (lootboxType == RANDOM_LOOTBOX_TYPE_1) {\\n                require(\\n                    items[i].weight > 0,\\n                    \\\"Lootbox item weight must be greater than 0\\\"\\n                );\\n            }\\n            lootboxItems[lootboxId][i] = items[i];\\n            emit LootboxItemAdded(lootboxId, items[i]);\\n        }\\n\\n        // Add the lootbox item count\\n        lootboxItemCounts[lootboxId] = items.length;\\n        lootboxTypebyLootboxId[lootboxId] = lootboxType;\\n    }\\n\\n    function createLootbox(\\n        LootboxItem[] memory items,\\n        uint256 lootboxType\\n    ) public onlyAdministrator {\\n        TerminusFacet terminusContract = TerminusFacet(terminusAddress);\\n        IERC20 terminusPaymentToken = IERC20(terminusContract.paymentToken());\\n        uint256 poolBaseFee = terminusContract.poolBasePrice();\\n\\n        require(\\n            (terminusPaymentToken.balanceOf(address(this)) >= poolBaseFee),\\n            \\\"Not enough funds to create a new lootbox. Please transfer more funds to the contract.\\\"\\n        );\\n\\n        terminusPaymentToken.approve(terminusAddress, poolBaseFee);\\n\\n        uint256 terminusPoolId = terminusContract.createPoolV1(\\n            10 ** 18 * 10 ** 18,\\n            true,\\n            true\\n        );\\n\\n        createLootboxWithTerminusPool(items, terminusPoolId, lootboxType);\\n    }\\n\\n    /**\\n     * @dev Adds an item to a lootbox\\n     * @param lootboxId The id of the lootbox\\n     * @param item The item to add to the lootbox\\n     */\\n    function addLootboxItem(\\n        uint256 lootboxId,\\n        LootboxItem memory item\\n    ) public onlyAdministrator {\\n        uint256 lootboxType = lootboxTypebyLootboxId[lootboxId];\\n        if (lootboxType == RANDOM_LOOTBOX_TYPE_1) {\\n            require(item.weight > 0, \\\"Item weight must be greater than 0\\\");\\n        }\\n        uint256 itemIndex = lootboxItemCounts[lootboxId];\\n        lootboxItems[lootboxId][itemIndex] = item;\\n        lootboxItemCounts[lootboxId]++;\\n\\n        emit LootboxItemAdded(lootboxId, item);\\n    }\\n\\n    /**\\n     * @dev Removes an item from a lootbox\\n     * @param lootboxId The id of the lootbox\\n     * @param itemIndex The index of the item in the lootbox\\n     */\\n    function removeLootboxItem(\\n        uint256 lootboxId,\\n        uint256 itemIndex\\n    ) public onlyAdministrator {\\n        //swap the item at the index with the last item in the array\\n        uint256 lastItemIndex = lootboxItemCounts[lootboxId] - 1;\\n\\n        LootboxItem memory lastItem = lootboxItems[lootboxId][lastItemIndex];\\n        lootboxItems[lootboxId][lastItemIndex] = lootboxItems[lootboxId][\\n            itemIndex\\n        ];\\n\\n        lootboxItems[lootboxId][itemIndex] = lastItem;\\n        delete lootboxItems[lootboxId][lastItemIndex]; //10k gas refund\\n        lootboxItemCounts[lootboxId]--;\\n    }\\n\\n    function _sendItem(\\n        uint256 lootboxId,\\n        uint256 itemIndex,\\n        uint256 count\\n    ) internal {\\n        LootboxItem memory item = lootboxItems[lootboxId][itemIndex];\\n        if (item.rewardType == ERC20_REWARD_TYPE) {\\n            IERC20(item.tokenAddress).transfer(msg.sender, item.amount * count);\\n        } else if (item.rewardType == ERC1155_REWARD_TYPE) {\\n            IERC1155(item.tokenAddress).safeTransferFrom(\\n                address(this),\\n                msg.sender,\\n                item.tokenId,\\n                item.amount * count,\\n                \\\"\\\"\\n            );\\n        } else if (item.rewardType == TERMINUS_MINTABLE_REWARD_TYPE) {\\n            TerminusFacet terminusFacetContract = TerminusFacet(\\n                item.tokenAddress\\n            );\\n            terminusFacetContract.mint(\\n                msg.sender,\\n                item.tokenId,\\n                item.amount * count,\\n                \\\"\\\"\\n            );\\n        } else {\\n            revert(\\\"Unsupported reward type\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev user opens a lootbox and gets a lootbox items from it\\n     * @param lootboxId The id of the lootbox\\n     * @param count The number of lootboxes to open\\n     */\\n    function openLootbox(\\n        uint256 lootboxId,\\n        uint256 count\\n    ) public whenNotPaused nonReentrant {\\n        uint256 terminusPoolForLootbox = terminusPoolIdbyLootboxId[lootboxId];\\n        TerminusFacet terminusContract = getTerminusContract();\\n\\n        require(count > 0, \\\"Count must be greater than 0\\\");\\n        require(\\n            terminusContract.balanceOf(msg.sender, terminusPoolForLootbox) >=\\n                count,\\n            \\\"You don't have enough lootbox tokens\\\"\\n        );\\n\\n        terminusContract.burn(msg.sender, terminusPoolForLootbox, count);\\n        if (lootboxTypebyLootboxId[lootboxId] == ORDINARY_LOOTBOX_TYPE) {\\n            for (uint256 i = 0; i < lootboxItemCounts[lootboxId]; i++) {\\n                _sendItem(lootboxId, i, count);\\n            }\\n        } else if (lootboxTypebyLootboxId[lootboxId] == RANDOM_LOOTBOX_TYPE_1) {\\n            require(count == 1, \\\"Count must be 1 for random lootbox\\\");\\n            _startRandomLootboxOpening(lootboxId);\\n        } else {\\n            revert(\\\"Unknown lootbox type\\\");\\n        }\\n    }\\n\\n    function completeRandomLootboxOpening() public nonReentrant {\\n        bytes32 currentOpeningRequestId = CurrentOpeningforUser[msg.sender];\\n        LootboxOpening memory opening = ActiveLootboxOpenings[\\n            currentOpeningRequestId\\n        ];\\n\\n        require(\\n            opening.status != 0,\\n            \\\"There is no active opening for this user\\\"\\n        );\\n        require(opening.status == 2, \\\"Lootbox opening is not ready\\\");\\n\\n        uint256 weightSums = 0;\\n        uint256 currentLootboxItemCount = lootboxItemCounts[opening.lootboxId];\\n        for (uint256 i = 0; i < currentLootboxItemCount; i++) {\\n            weightSums += lootboxItems[opening.lootboxId][i].weight;\\n        }\\n\\n        uint256 randomNumber = opening.randomness % weightSums;\\n\\n        uint256 currentWeightSum = 0;\\n\\n        for (uint256 i = 0; i < currentLootboxItemCount; i++) {\\n            currentWeightSum += lootboxItems[opening.lootboxId][i].weight;\\n            if (randomNumber < currentWeightSum) {\\n                _sendItem(opening.lootboxId, i, 1);\\n                break;\\n            }\\n        }\\n        delete ActiveLootboxOpenings[currentOpeningRequestId];\\n        delete CurrentOpeningforUser[msg.sender];\\n    }\\n\\n    /**\\n     * @dev Owner withdraws erc20 tokens from the contract\\n     * @param tokenAddress The address of the erc20 token contract\\n     * @param amount The amount to withdraw\\n     */\\n    function withdrawERC20(\\n        address tokenAddress,\\n        uint256 amount\\n    ) external onlyOwner {\\n        IERC20 erc20Contract = IERC20(tokenAddress);\\n        erc20Contract.transfer(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Owner withdraws erc1155 tokens from the contract\\n     * @param tokenAddress The address of the erc1155 token contract\\n     * @param tokenId The id of the erc1155 token\\n     * @param amount The amount to withdraw\\n     */\\n\\n    function withdrawERC1155(\\n        address tokenAddress,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) external onlyOwner {\\n        address _owner = owner();\\n        IERC1155 erc1155Contract = IERC1155(tokenAddress);\\n        erc1155Contract.safeTransferFrom(\\n            address(this),\\n            _owner,\\n            tokenId,\\n            amount,\\n            \\\"\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Transfer controll of the terminus pools from contract to owner\\n     * @param poolIds The array of terminus pool ids\\n     */\\n    function surrenderTerminusPools(\\n        uint256[] calldata poolIds\\n    ) external onlyOwner {\\n        address _owner = owner();\\n        TerminusFacet terminusContract = TerminusFacet(terminusAddress);\\n        for (uint256 i = 0; i < poolIds.length; i++) {\\n            terminusContract.setPoolController(poolIds[i], _owner);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfer control of the terminus contract from contract to owner\\n     */\\n    function surrenderTerminusControl() external onlyOwner {\\n        address _owner = owner();\\n        TerminusFacet terminusContract = TerminusFacet(terminusAddress);\\n        terminusContract.setController(_owner);\\n    }\\n\\n    /**\\n     * @dev pause the contract\\n     * @notice only pauses the openLootbox function\\n     */\\n    function pause() external onlyOwner {\\n        require(!paused(), \\\"Already paused\\\");\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev unpause the contract\\n     */\\n    function unpause() external onlyOwner {\\n        require(paused(), \\\"Already unpaused\\\");\\n        _unpause();\\n    }\\n}\\n\"\r\n    },\r\n    \"TerminusFacet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n\\n/**\\n * Authors: Moonstream Engineering (engineering@moonstream.to)\\n * GitHub: https://github.com/bugout-dev/dao\\n *\\n * This is an implementation of the Terminus decentralized authorization contract.\\n *\\n * Terminus users can create authorization pools. Each authorization pool has the following properties:\\n * 1. Controller: The address that controls the pool. Initially set to be the address of the pool creator.\\n * 2. Pool URI: Metadata URI for the authorization pool.\\n * 3. Pool capacity: The total number of tokens that can be minted in that authorization pool.\\n * 4. Pool supply: The number of tokens that have actually been minted in that authorization pool.\\n * 5. Transferable: A boolean value which denotes whether or not tokens from that pool can be transfered\\n *    between addresses. (Note: Implemented by TerminusStorage.poolNotTransferable since we expect most\\n *    pools to be transferable. This negation is better for storage + gas since false is default value\\n *    in map to bool.)\\n * 6. Burnable: A boolean value which denotes whether or not tokens from that pool can be burned.\\n */\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC20.sol\\\";\\nimport \\\"ERC1155WithTerminusStorage.sol\\\";\\nimport \\\"LibTerminus.sol\\\";\\nimport \\\"LibDiamond.sol\\\";\\n\\ncontract TerminusFacet is ERC1155WithTerminusStorage {\\n    constructor() {\\n        LibTerminus.TerminusStorage storage ts = LibTerminus.terminusStorage();\\n        ts.controller = msg.sender;\\n    }\\n\\n    event PoolMintBatch(\\n        uint256 indexed id,\\n        address indexed operator,\\n        address from,\\n        address[] toAddresses,\\n        uint256[] amounts\\n    );\\n\\n    function setController(address newController) external {\\n        LibTerminus.enforceIsController();\\n        LibTerminus.setController(newController);\\n    }\\n\\n    function poolMintBatch(\\n        uint256 id,\\n        address[] memory toAddresses,\\n        uint256[] memory amounts\\n    ) public {\\n        require(\\n            toAddresses.length == amounts.length,\\n            \\\"TerminusFacet: _poolMintBatch -- toAddresses and amounts length mismatch\\\"\\n        );\\n        address operator = _msgSender();\\n        require(\\n            isApprovedForPool(id, operator),\\n            \\\"TerminusFacet: poolMintBatch -- caller is neither owner nor approved\\\"\\n        );\\n\\n        LibTerminus.TerminusStorage storage ts = LibTerminus.terminusStorage();\\n\\n        uint256 i = 0;\\n        uint256 totalAmount = 0;\\n\\n        for (i = 0; i < toAddresses.length; i++) {\\n            address to = toAddresses[i];\\n            uint256 amount = amounts[i];\\n            require(\\n                to != address(0),\\n                \\\"TerminusFacet: _poolMintBatch -- cannot mint to zero address\\\"\\n            );\\n            totalAmount += amount;\\n            ts.poolBalances[id][to] += amount;\\n            emit TransferSingle(operator, address(0), to, id, amount);\\n        }\\n\\n        require(\\n            ts.poolSupply[id] + totalAmount <= ts.poolCapacity[id],\\n            \\\"TerminusFacet: _poolMintBatch -- Minted tokens would exceed pool capacity\\\"\\n        );\\n        ts.poolSupply[id] += totalAmount;\\n\\n        emit PoolMintBatch(id, operator, address(0), toAddresses, amounts);\\n    }\\n\\n    function terminusController() external view returns (address) {\\n        return LibTerminus.terminusStorage().controller;\\n    }\\n\\n    function paymentToken() external view returns (address) {\\n        return LibTerminus.terminusStorage().paymentToken;\\n    }\\n\\n    function setPaymentToken(address newPaymentToken) external {\\n        LibTerminus.enforceIsController();\\n        LibTerminus.TerminusStorage storage ts = LibTerminus.terminusStorage();\\n        ts.paymentToken = newPaymentToken;\\n    }\\n\\n    function poolBasePrice() external view returns (uint256) {\\n        return LibTerminus.terminusStorage().poolBasePrice;\\n    }\\n\\n    function setPoolBasePrice(uint256 newBasePrice) external {\\n        LibTerminus.enforceIsController();\\n        LibTerminus.TerminusStorage storage ts = LibTerminus.terminusStorage();\\n        ts.poolBasePrice = newBasePrice;\\n    }\\n\\n    function _paymentTokenContract() internal view returns (IERC20) {\\n        address paymentTokenAddress = LibTerminus\\n            .terminusStorage()\\n            .paymentToken;\\n        require(\\n            paymentTokenAddress != address(0),\\n            \\\"TerminusFacet: Payment token has not been set\\\"\\n        );\\n        return IERC20(paymentTokenAddress);\\n    }\\n\\n    function withdrawPayments(address toAddress, uint256 amount) external {\\n        LibTerminus.enforceIsController();\\n        require(\\n            _msgSender() == toAddress,\\n            \\\"TerminusFacet: withdrawPayments -- Controller can only withdraw to self\\\"\\n        );\\n        IERC20 paymentTokenContract = _paymentTokenContract();\\n        paymentTokenContract.transfer(toAddress, amount);\\n    }\\n\\n    function contractURI() public view returns (string memory) {\\n        return LibTerminus.terminusStorage().contractURI;\\n    }\\n\\n    function setContractURI(string memory _contractURI) external {\\n        LibTerminus.enforceIsController();\\n        LibTerminus.TerminusStorage storage ts = LibTerminus.terminusStorage();\\n        ts.contractURI = _contractURI;\\n    }\\n\\n    function setURI(uint256 poolID, string memory poolURI) external {\\n        LibTerminus.enforcePoolIsController(poolID, _msgSender());\\n        LibTerminus.TerminusStorage storage ts = LibTerminus.terminusStorage();\\n        ts.poolURI[poolID] = poolURI;\\n    }\\n\\n    function totalPools() external view returns (uint256) {\\n        return LibTerminus.terminusStorage().currentPoolID;\\n    }\\n\\n    function setPoolController(uint256 poolID, address newController) external {\\n        LibTerminus.enforcePoolIsController(poolID, msg.sender);\\n        LibTerminus.setPoolController(poolID, newController);\\n    }\\n\\n    function terminusPoolController(uint256 poolID)\\n        external\\n        view\\n        returns (address)\\n    {\\n        return LibTerminus.terminusStorage().poolController[poolID];\\n    }\\n\\n    function terminusPoolCapacity(uint256 poolID)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return LibTerminus.terminusStorage().poolCapacity[poolID];\\n    }\\n\\n    function terminusPoolSupply(uint256 poolID)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return LibTerminus.terminusStorage().poolSupply[poolID];\\n    }\\n\\n    function poolIsTransferable(uint256 poolID) external view returns (bool) {\\n        return !LibTerminus.terminusStorage().poolNotTransferable[poolID];\\n    }\\n\\n    function poolIsBurnable(uint256 poolID) external view returns (bool) {\\n        return LibTerminus.terminusStorage().poolBurnable[poolID];\\n    }\\n\\n    function setPoolTransferable(uint256 poolID, bool transferable) external {\\n        LibTerminus.enforcePoolIsController(poolID, msg.sender);\\n        LibTerminus.TerminusStorage storage ts = LibTerminus.terminusStorage();\\n        ts.poolNotTransferable[poolID] = !transferable;\\n    }\\n\\n    function setPoolBurnable(uint256 poolID, bool burnable) external {\\n        LibTerminus.enforcePoolIsController(poolID, msg.sender);\\n        LibTerminus.TerminusStorage storage ts = LibTerminus.terminusStorage();\\n        ts.poolBurnable[poolID] = burnable;\\n    }\\n\\n    function createSimplePool(uint256 _capacity) external returns (uint256) {\\n        LibTerminus.enforceIsController();\\n        LibTerminus.TerminusStorage storage ts = LibTerminus.terminusStorage();\\n        uint256 requiredPayment = ts.poolBasePrice;\\n        IERC20 paymentTokenContract = _paymentTokenContract();\\n        require(\\n            paymentTokenContract.allowance(_msgSender(), address(this)) >=\\n                requiredPayment,\\n            \\\"TerminusFacet: createSimplePool -- Insufficient allowance on payment token\\\"\\n        );\\n        paymentTokenContract.transferFrom(\\n            msg.sender,\\n            address(this),\\n            requiredPayment\\n        );\\n        return LibTerminus.createSimplePool(_capacity);\\n    }\\n\\n    function createPoolV1(\\n        uint256 _capacity,\\n        bool _transferable,\\n        bool _burnable\\n    ) external returns (uint256) {\\n        LibTerminus.enforceIsController();\\n        LibTerminus.TerminusStorage storage ts = LibTerminus.terminusStorage();\\n        // TODO(zomglings): Implement requiredPayment update based on pool features.\\n        uint256 requiredPayment = ts.poolBasePrice;\\n        IERC20 paymentTokenContract = _paymentTokenContract();\\n        require(\\n            paymentTokenContract.allowance(_msgSender(), address(this)) >=\\n                requiredPayment,\\n            \\\"TerminusFacet: createPoolV1 -- Insufficient allowance on payment token\\\"\\n        );\\n        paymentTokenContract.transferFrom(\\n            msg.sender,\\n            address(this),\\n            requiredPayment\\n        );\\n        uint256 poolID = LibTerminus.createSimplePool(_capacity);\\n        if (!_transferable) {\\n            ts.poolNotTransferable[poolID] = true;\\n        }\\n        if (_burnable) {\\n            ts.poolBurnable[poolID] = true;\\n        }\\n        return poolID;\\n    }\\n\\n    function mint(\\n        address to,\\n        uint256 poolID,\\n        uint256 amount,\\n        bytes memory data\\n    ) external {\\n        require(\\n            isApprovedForPool(poolID, msg.sender),\\n            \\\"TerminusFacet: mint -- caller is neither owner nor approved\\\"\\n        );\\n        _mint(to, poolID, amount, data);\\n    }\\n\\n    function mintBatch(\\n        address to,\\n        uint256[] memory poolIDs,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) external {\\n        for (uint256 i = 0; i < poolIDs.length; i++) {\\n            require(\\n                isApprovedForPool(poolIDs[i], msg.sender),\\n                \\\"TerminusFacet: mintBatch -- caller is neither owner nor approved\\\"\\n            );\\n        }\\n        _mintBatch(to, poolIDs, amounts, data);\\n    }\\n\\n    function burn(\\n        address from,\\n        uint256 poolID,\\n        uint256 amount\\n    ) external {\\n        address operator = _msgSender();\\n        require(\\n            operator == from || isApprovedForPool(poolID, operator),\\n            \\\"TerminusFacet: burn -- caller is neither owner nor approved\\\"\\n        );\\n        _burn(from, poolID, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"ERC1155WithTerminusStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n\\n/**\\n * Authors: Moonstream Engineering (engineering@moonstream.to)\\n * GitHub: https://github.com/bugout-dev/dao\\n *\\n * An ERC1155 implementation which uses the Moonstream DAO common storage structure for proxies.\\n * EIP1155: https://eips.ethereum.org/EIPS/eip-1155\\n *\\n * The Moonstream contract is used to delegate calls from an EIP2535 Diamond proxy.\\n *\\n * This implementation is adapted from the OpenZeppelin ERC1155 implementation:\\n * https://github.com/OpenZeppelin/openzeppelin-contracts/tree/6bd6b76d1156e20e45d1016f355d154141c7e5b9/contracts/token/ERC1155\\n */\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"IERC1155.sol\\\";\\nimport \\\"IERC1155Receiver.sol\\\";\\nimport \\\"IERC1155MetadataURI.sol\\\";\\nimport \\\"Address.sol\\\";\\nimport \\\"Context.sol\\\";\\nimport \\\"ERC165.sol\\\";\\nimport \\\"LibTerminus.sol\\\";\\n\\ncontract ERC1155WithTerminusStorage is\\n    Context,\\n    ERC165,\\n    IERC1155,\\n    IERC1155MetadataURI\\n{\\n    using Address for address;\\n\\n    constructor() {}\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165, IERC165)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    function uri(uint256 poolID)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (string memory)\\n    {\\n        return LibTerminus.terminusStorage().poolURI[poolID];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        require(\\n            account != address(0),\\n            \\\"ERC1155WithTerminusStorage: balance query for the zero address\\\"\\n        );\\n        return LibTerminus.terminusStorage().poolBalances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(\\n            accounts.length == ids.length,\\n            \\\"ERC1155WithTerminusStorage: accounts and ids length mismatch\\\"\\n        );\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved)\\n        public\\n        virtual\\n        override\\n    {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        return\\n            LibTerminus.terminusStorage().globalOperatorApprovals[account][\\n                operator\\n            ];\\n    }\\n\\n    function isApprovedForPool(uint256 poolID, address operator)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return LibTerminus._isApprovedForPool(poolID, operator);\\n    }\\n\\n    function approveForPool(uint256 poolID, address operator) external {\\n        LibTerminus.enforcePoolIsController(poolID, _msgSender());\\n        LibTerminus._approveForPool(poolID, operator);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() ||\\n                isApprovedForAll(from, _msgSender()) ||\\n                isApprovedForPool(id, _msgSender()),\\n            \\\"ERC1155WithTerminusStorage: caller is not owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155WithTerminusStorage: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(\\n            to != address(0),\\n            \\\"ERC1155WithTerminusStorage: transfer to the zero address\\\"\\n        );\\n        LibTerminus.TerminusStorage storage ts = LibTerminus.terminusStorage();\\n        require(\\n            !ts.poolNotTransferable[id],\\n            \\\"ERC1155WithTerminusStorage: _safeTransferFrom -- pool is not transferable\\\"\\n        );\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(\\n            operator,\\n            from,\\n            to,\\n            _asSingletonArray(id),\\n            _asSingletonArray(amount),\\n            data\\n        );\\n\\n        uint256 fromBalance = ts.poolBalances[id][from];\\n        require(\\n            fromBalance >= amount,\\n            \\\"ERC1155WithTerminusStorage: insufficient balance for transfer\\\"\\n        );\\n        unchecked {\\n            ts.poolBalances[id][from] = fromBalance - amount;\\n        }\\n        ts.poolBalances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(\\n            ids.length == amounts.length,\\n            \\\"ERC1155WithTerminusStorage: ids and amounts length mismatch\\\"\\n        );\\n        require(\\n            to != address(0),\\n            \\\"ERC1155WithTerminusStorage: transfer to the zero address\\\"\\n        );\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        LibTerminus.TerminusStorage storage ts = LibTerminus.terminusStorage();\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            require(\\n                !ts.poolNotTransferable[id],\\n                \\\"ERC1155WithTerminusStorage: _safeBatchTransferFrom -- pool is not transferable\\\"\\n            );\\n\\n            uint256 fromBalance = ts.poolBalances[id][from];\\n            require(\\n                fromBalance >= amount,\\n                \\\"ERC1155WithTerminusStorage: insufficient balance for transfer\\\"\\n            );\\n            unchecked {\\n                ts.poolBalances[id][from] = fromBalance - amount;\\n            }\\n            ts.poolBalances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(\\n            operator,\\n            from,\\n            to,\\n            ids,\\n            amounts,\\n            data\\n        );\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(\\n            to != address(0),\\n            \\\"ERC1155WithTerminusStorage: mint to the zero address\\\"\\n        );\\n        LibTerminus.TerminusStorage storage ts = LibTerminus.terminusStorage();\\n        require(\\n            ts.poolSupply[id] + amount <= ts.poolCapacity[id],\\n            \\\"ERC1155WithTerminusStorage: _mint -- Minted tokens would exceed pool capacity\\\"\\n        );\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(\\n            operator,\\n            address(0),\\n            to,\\n            _asSingletonArray(id),\\n            _asSingletonArray(amount),\\n            data\\n        );\\n\\n        ts.poolSupply[id] += amount;\\n        ts.poolBalances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(\\n            operator,\\n            address(0),\\n            to,\\n            id,\\n            amount,\\n            data\\n        );\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(\\n            to != address(0),\\n            \\\"ERC1155WithTerminusStorage: mint to the zero address\\\"\\n        );\\n        require(\\n            ids.length == amounts.length,\\n            \\\"ERC1155WithTerminusStorage: ids and amounts length mismatch\\\"\\n        );\\n\\n        LibTerminus.TerminusStorage storage ts = LibTerminus.terminusStorage();\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            require(\\n                ts.poolSupply[ids[i]] + amounts[i] <= ts.poolCapacity[ids[i]],\\n                \\\"ERC1155WithTerminusStorage: _mintBatch -- Minted tokens would exceed pool capacity\\\"\\n            );\\n        }\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            ts.poolSupply[ids[i]] += amounts[i];\\n            ts.poolBalances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(\\n            operator,\\n            address(0),\\n            to,\\n            ids,\\n            amounts,\\n            data\\n        );\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(\\n            from != address(0),\\n            \\\"ERC1155WithTerminusStorage: burn from the zero address\\\"\\n        );\\n        LibTerminus.TerminusStorage storage ts = LibTerminus.terminusStorage();\\n        require(\\n            ts.poolBurnable[id],\\n            \\\"ERC1155WithTerminusStorage: _burn -- pool is not burnable\\\"\\n        );\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(\\n            operator,\\n            from,\\n            address(0),\\n            _asSingletonArray(id),\\n            _asSingletonArray(amount),\\n            \\\"\\\"\\n        );\\n\\n        uint256 fromBalance = ts.poolBalances[id][from];\\n        require(\\n            fromBalance >= amount,\\n            \\\"ERC1155WithTerminusStorage: burn amount exceeds balance\\\"\\n        );\\n        unchecked {\\n            ts.poolBalances[id][from] = fromBalance - amount;\\n            ts.poolSupply[id] -= amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(\\n            from != address(0),\\n            \\\"ERC1155WithTerminusStorage: burn from the zero address\\\"\\n        );\\n        require(\\n            ids.length == amounts.length,\\n            \\\"ERC1155WithTerminusStorage: ids and amounts length mismatch\\\"\\n        );\\n\\n        address operator = _msgSender();\\n\\n        LibTerminus.TerminusStorage storage ts = LibTerminus.terminusStorage();\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            require(\\n                ts.poolBurnable[ids[i]],\\n                \\\"ERC1155WithTerminusStorage: _burnBatch -- pool is not burnable\\\"\\n            );\\n        }\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = ts.poolBalances[id][from];\\n            require(\\n                fromBalance >= amount,\\n                \\\"ERC1155WithTerminusStorage: burn amount exceeds balance\\\"\\n            );\\n            unchecked {\\n                ts.poolBalances[id][from] = fromBalance - amount;\\n                ts.poolSupply[id] -= amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(\\n            owner != operator,\\n            \\\"ERC1155WithTerminusStorage: setting approval status for self\\\"\\n        );\\n        LibTerminus.TerminusStorage storage ts = LibTerminus.terminusStorage();\\n        ts.globalOperatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try\\n                IERC1155Receiver(to).onERC1155Received(\\n                    operator,\\n                    from,\\n                    id,\\n                    amount,\\n                    data\\n                )\\n            returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\n                        \\\"ERC1155WithTerminusStorage: ERC1155Receiver rejected tokens\\\"\\n                    );\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\n                    \\\"ERC1155WithTerminusStorage: transfer to non ERC1155Receiver implementer\\\"\\n                );\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try\\n                IERC1155Receiver(to).onERC1155BatchReceived(\\n                    operator,\\n                    from,\\n                    ids,\\n                    amounts,\\n                    data\\n                )\\n            returns (bytes4 response) {\\n                if (\\n                    response != IERC1155Receiver.onERC1155BatchReceived.selector\\n                ) {\\n                    revert(\\n                        \\\"ERC1155WithTerminusStorage: ERC1155Receiver rejected tokens\\\"\\n                    );\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\n                    \\\"ERC1155WithTerminusStorage: transfer to non ERC1155Receiver implementer\\\"\\n                );\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element)\\n        private\\n        pure\\n        returns (uint256[] memory)\\n    {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\"\r\n    },\r\n    \"IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"IERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"IERC1155MetadataURI.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"LibTerminus.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n\\n/**\\n * Authors: Moonstream Engineering (engineering@moonstream.to)\\n * GitHub: https://github.com/bugout-dev/dao\\n *\\n * Common storage structure and internal methods for Moonstream DAO Terminus contracts.\\n * As Terminus is an extension of ERC1155, this library can also be used to implement bare ERC1155 contracts\\n * using the common storage pattern (e.g. for use in diamond proxies).\\n */\\n\\n// TODO(zomglings): Should we support EIP1761 in addition to ERC1155 or roll our own scopes and feature flags?\\n// https://eips.ethereum.org/EIPS/eip-1761\\n\\npragma solidity ^0.8.9;\\n\\nlibrary LibTerminus {\\n    bytes32 constant TERMINUS_STORAGE_POSITION =\\n        keccak256(\\\"moonstreamdao.eth.storage.terminus\\\");\\n\\n    struct TerminusStorage {\\n        // Terminus administration\\n        address controller;\\n        bool isTerminusActive;\\n        uint256 currentPoolID;\\n        address paymentToken;\\n        uint256 poolBasePrice;\\n        // Terminus pools\\n        mapping(uint256 => address) poolController;\\n        mapping(uint256 => string) poolURI;\\n        mapping(uint256 => uint256) poolCapacity;\\n        mapping(uint256 => uint256) poolSupply;\\n        mapping(uint256 => mapping(address => uint256)) poolBalances;\\n        mapping(uint256 => bool) poolNotTransferable;\\n        mapping(uint256 => bool) poolBurnable;\\n        mapping(address => mapping(address => bool)) globalOperatorApprovals;\\n        mapping(uint256 => mapping(address => bool)) globalPoolOperatorApprovals;\\n        // Contract metadata\\n        string contractURI;\\n    }\\n\\n    function terminusStorage()\\n        internal\\n        pure\\n        returns (TerminusStorage storage es)\\n    {\\n        bytes32 position = TERMINUS_STORAGE_POSITION;\\n        assembly {\\n            es.slot := position\\n        }\\n    }\\n\\n    event ControlTransferred(\\n        address indexed previousController,\\n        address indexed newController\\n    );\\n\\n    event PoolControlTransferred(\\n        uint256 indexed poolID,\\n        address indexed previousController,\\n        address indexed newController\\n    );\\n\\n    function setController(address newController) internal {\\n        TerminusStorage storage ts = terminusStorage();\\n        address previousController = ts.controller;\\n        ts.controller = newController;\\n        emit ControlTransferred(previousController, newController);\\n    }\\n\\n    function enforceIsController() internal view {\\n        TerminusStorage storage ts = terminusStorage();\\n        require(msg.sender == ts.controller, \\\"LibTerminus: Must be controller\\\");\\n    }\\n\\n    function setTerminusActive(bool active) internal {\\n        TerminusStorage storage ts = terminusStorage();\\n        ts.isTerminusActive = active;\\n    }\\n\\n    function setPoolController(uint256 poolID, address newController) internal {\\n        TerminusStorage storage ts = terminusStorage();\\n        address previousController = ts.poolController[poolID];\\n        ts.poolController[poolID] = newController;\\n        emit PoolControlTransferred(poolID, previousController, newController);\\n    }\\n\\n    function createSimplePool(uint256 _capacity) internal returns (uint256) {\\n        TerminusStorage storage ts = terminusStorage();\\n        uint256 poolID = ts.currentPoolID + 1;\\n        setPoolController(poolID, msg.sender);\\n        ts.poolCapacity[poolID] = _capacity;\\n        ts.currentPoolID++;\\n        return poolID;\\n    }\\n\\n    function enforcePoolIsController(uint256 poolID, address maybeController)\\n        internal\\n        view\\n    {\\n        TerminusStorage storage ts = terminusStorage();\\n        require(\\n            ts.poolController[poolID] == maybeController,\\n            \\\"LibTerminus: Must be pool controller\\\"\\n        );\\n    }\\n\\n    function _isApprovedForPool(uint256 poolID, address operator)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        LibTerminus.TerminusStorage storage ts = LibTerminus.terminusStorage();\\n        if (operator == ts.poolController[poolID]) {\\n            return true;\\n        } else if (ts.globalPoolOperatorApprovals[poolID][operator]) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function _approveForPool(uint256 poolID, address operator) internal {\\n        LibTerminus.TerminusStorage storage ts = LibTerminus.terminusStorage();\\n        ts.globalPoolOperatorApprovals[poolID][operator] = true;\\n    }\\n}\\n\"\r\n    },\r\n    \"LibDiamond.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Adapted from the Diamond 3 reference implementation by Nick Mudge:\\n// https://github.com/mudgen/diamond-3-hardhat\\n\\nimport { IDiamondCut } from \\\"IDiamondCut.sol\\\";\\n\\nlibrary LibDiamond {\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\n    }\\n\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    // Internal function version of diamondCut\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else {\\n                revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n            }\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress != _facetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\n            removeFunction(ds, oldFacetAddress, selector);\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        // if function does not exist then do nothing and return\\n        require(_facetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            removeFunction(ds, oldFacetAddress, selector);\\n        }\\n    }\\n\\n    function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\\n        enforceHasContractCode(_facetAddress, \\\"LibDiamondCut: New facet has no code\\\");\\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\\n        ds.facetAddresses.push(_facetAddress);\\n    }\\n\\n\\n    function addFunction(DiamondStorage storage ds, bytes4 _selector, uint96 _selectorPosition, address _facetAddress) internal {\\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n    }\\n\\n    function removeFunction(DiamondStorage storage ds, address _facetAddress, bytes4 _selector) internal {\\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\n        // an immutable function is a function defined directly in a diamond\\n        require(_facetAddress != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\\n        }\\n        // delete the last selector\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n        delete ds.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\\n            }\\n            ds.facetAddresses.pop();\\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n        }\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            require(_calldata.length == 0, \\\"LibDiamondCut: _init is address(0) but_calldata is not empty\\\");\\n        } else {\\n            require(_calldata.length > 0, \\\"LibDiamondCut: _calldata is empty but _init is not address(0)\\\");\\n            if (_init != address(this)) {\\n                enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");\\n            }\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    revert(string(error));\\n                } else {\\n                    revert(\\\"LibDiamondCut: _init function reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\"\r\n    },\r\n    \"IDiamondCut.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Adapted from the Diamond 3 reference implementation by Nick Mudge:\\n// https://github.com/mudgen/diamond-3-hardhat\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {\\n        Add,\\n        Replace,\\n        Remove\\n    }\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\"\r\n    },\r\n    \"Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"ERC1155Holder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"ERC1155Receiver.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\"\r\n    },\r\n    \"ERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC1155/utils/ERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC1155Receiver.sol\\\";\\nimport \\\"ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\"\r\n    },\r\n    \"ControllableWithTerminus.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n\\n/**\\n * Authors: Moonstream Engineering (engineering@moonstream.to)\\n * GitHub: https://github.com/bugout-dev/dao\\n */\\n\\npragma solidity ^0.8.9;\\nimport \\\"TerminusFacet.sol\\\";\\nimport \\\"Ownable.sol\\\";\\n\\nabstract contract ControllableWithTerminus is Ownable {\\n    TerminusFacet private terminus;\\n    uint256 public administratorPoolId;\\n\\n    constructor(address _terminusContractAddress, uint256 _administratorPoolId)\\n    {\\n        terminus = TerminusFacet(_terminusContractAddress);\\n        administratorPoolId = _administratorPoolId;\\n    }\\n\\n    /**\\n     * @dev throws if called by account that doesn't hold the administrator pool token\\n     * or is the contract owner\\n     */\\n    modifier onlyAdministrator() {\\n        require(\\n            terminus.balanceOf(msg.sender, administratorPoolId) > 0 ||\\n                msg.sender == owner(),\\n            \\\"Lootbox.sol: Sender is not an administrator\\\"\\n        );\\n        _;\\n    }\\n\\n    function changeAdministratorPoolId(uint256 _administratorPoolId)\\n        public\\n        onlyOwner\\n    {\\n        administratorPoolId = _administratorPoolId;\\n    }\\n\\n    function grantAdminRole(address to) public onlyOwner {\\n        require(\\n            address(this) ==\\n                terminus.terminusPoolController(administratorPoolId),\\n            \\\"The contract is not the pool controller for the administrator pool. Please transfer the controller role to the contract.\\\"\\n        );\\n        terminus.mint(to, administratorPoolId, 1, \\\"\\\");\\n    }\\n\\n    function revokeAdminRole(address from) public onlyOwner {\\n        TerminusFacet terminusContract = TerminusFacet(terminus);\\n        require(\\n            address(this) ==\\n                terminusContract.terminusPoolController(administratorPoolId),\\n            \\\"The contract is not the pool controller for the administrator pool. Please transfer the controller role to the contract.\\\"\\n        );\\n\\n        uint256 balance = terminusContract.balanceOf(from, administratorPoolId);\\n        terminusContract.burn(from, administratorPoolId, balance);\\n    }\\n}\\n\"\r\n    },\r\n    \"LootboxRandomness.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n\\n/**\\n * Authors: Moonstream Engineering (engineering@moonstream.to)\\n * GitHub: https://github.com/bugout-dev/dao\\n */\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"VRFConsumerBase.sol\\\";\\n\\nabstract contract LootboxRandomness is VRFConsumerBase {\\n    uint256 ChainlinkVRFFee;\\n    bytes32 ChainlinkVRFKeyhash;\\n\\n    struct LootboxOpening {\\n        // Statuses:\\n        // 1 -> offered\\n        // 2 -> randomness fulfilled\\n        // 3 -> completed\\n        uint32 status;\\n        address user; // address which is openening the lootbox\\n        uint256 lootboxId;\\n        uint256 randomness;\\n    }\\n\\n    event LootboxOpeningBegan(address lootboxOwner, uint256 lootboxId);\\n    event LootboxOpeningCompleted(\\n        address lootboxOwner,\\n        uint256 lootboxId,\\n        bytes32 requestId,\\n        uint256 randomness\\n    );\\n\\n    mapping(bytes32 => LootboxOpening) public ActiveLootboxOpenings;\\n    mapping(address => bytes32) public CurrentOpeningforUser;\\n\\n    constructor(\\n        address _VRFCoordinatorAddress,\\n        address _LinkTokenAddress,\\n        uint256 _ChainlinkVRFFee,\\n        bytes32 _ChainlinkVRFKeyhash\\n    ) VRFConsumerBase(_VRFCoordinatorAddress, _LinkTokenAddress) {\\n        ChainlinkVRFFee = _ChainlinkVRFFee;\\n        ChainlinkVRFKeyhash = _ChainlinkVRFKeyhash;\\n    }\\n\\n    function getChainlinkVRFFee() public view returns (uint256) {\\n        return ChainlinkVRFFee;\\n    }\\n\\n    function getChainlinkVRFKeyhash() public view returns (bytes32) {\\n        return ChainlinkVRFKeyhash;\\n    }\\n\\n    function fulfillRandomness(bytes32 requestId, uint256 randomness)\\n        internal\\n        override\\n    {\\n        LootboxOpening storage currentLootboxOpening = ActiveLootboxOpenings[\\n            requestId\\n        ];\\n        if (currentLootboxOpening.status != 1) {\\n            return;\\n        }\\n        currentLootboxOpening.status = 2;\\n        currentLootboxOpening.randomness = randomness;\\n    }\\n\\n    function _startRandomLootboxOpening(uint256 lootboxId) internal {\\n        require(\\n            CurrentOpeningforUser[msg.sender] == 0,\\n            \\\"LootboxRandomness: _startRandomLootboxOpening -- Sender already has an incompleted opening\\\"\\n        );\\n\\n        emit LootboxOpeningBegan(msg.sender, lootboxId);\\n\\n        LootboxOpening memory currentlootboxOpening;\\n        currentlootboxOpening.status = 1;\\n        currentlootboxOpening.user = msg.sender;\\n        currentlootboxOpening.lootboxId = lootboxId;\\n\\n        bytes32 requestId = requestRandomness(\\n            ChainlinkVRFKeyhash,\\n            ChainlinkVRFFee\\n        );\\n\\n        ActiveLootboxOpenings[requestId] = currentlootboxOpening;\\n        CurrentOpeningforUser[msg.sender] = requestId;\\n    }\\n}\\n\"\r\n    },\r\n    \"VRFConsumerBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"LinkTokenInterface.sol\\\";\\n\\nimport \\\"VRFRequestIDBase.sol\\\";\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator, _link) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash), and have told you the minimum LINK\\n * @dev price for VRF service. Make sure your contract has sufficient LINK, and\\n * @dev call requestRandomness(keyHash, fee, seed), where seed is the input you\\n * @dev want to generate randomness from.\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomness method.\\n *\\n * @dev The randomness argument to fulfillRandomness is the actual random value\\n * @dev generated from your seed.\\n *\\n * @dev The requestId argument is generated from the keyHash and the seed by\\n * @dev makeRequestId(keyHash, seed). If your contract could have concurrent\\n * @dev requests open, you can use the requestId to track which seed is\\n * @dev associated with which randomness. See VRFRequestIDBase.sol for more\\n * @dev details. (See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.)\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ. (Which is critical to making unpredictable randomness! See the\\n * @dev next section.)\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the ultimate input to the VRF is mixed with the block hash of the\\n * @dev block in which the request is made, user-provided seeds have no impact\\n * @dev on its economic security properties. They are only included for API\\n * @dev compatability with previous versions of this contract.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request.\\n */\\nabstract contract VRFConsumerBase is VRFRequestIDBase {\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBase expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomness the VRF output\\n   */\\n  function fulfillRandomness(bytes32 requestId, uint256 randomness) internal virtual;\\n\\n  /**\\n   * @dev In order to keep backwards compatibility we have kept the user\\n   * seed field around. We remove the use of it because given that the blockhash\\n   * enters later, it overrides whatever randomness the used seed provides.\\n   * Given that it adds no security, and can easily lead to misunderstandings,\\n   * we have removed it from usage and can now provide a simpler API.\\n   */\\n  uint256 private constant USER_SEED_PLACEHOLDER = 0;\\n\\n  /**\\n   * @notice requestRandomness initiates a request for VRF output given _seed\\n   *\\n   * @dev The fulfillRandomness method receives the output, once it's provided\\n   * @dev by the Oracle, and verified by the vrfCoordinator.\\n   *\\n   * @dev The _keyHash must already be registered with the VRFCoordinator, and\\n   * @dev the _fee must exceed the fee specified during registration of the\\n   * @dev _keyHash.\\n   *\\n   * @dev The _seed parameter is vestigial, and is kept only for API\\n   * @dev compatibility with older versions. It can't *hurt* to mix in some of\\n   * @dev your own randomness, here, but it's not necessary because the VRF\\n   * @dev oracle will mix the hash of the block containing your request into the\\n   * @dev VRF seed it ultimately uses.\\n   *\\n   * @param _keyHash ID of public key against which randomness is generated\\n   * @param _fee The amount of LINK to send with the request\\n   *\\n   * @return requestId unique ID for this request\\n   *\\n   * @dev The returned requestId can be used to distinguish responses to\\n   * @dev concurrent requests. It is passed as the first argument to\\n   * @dev fulfillRandomness.\\n   */\\n  function requestRandomness(bytes32 _keyHash, uint256 _fee) internal returns (bytes32 requestId) {\\n    LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, USER_SEED_PLACEHOLDER));\\n    // This is the seed passed to VRFCoordinator. The oracle will mix this with\\n    // the hash of the block containing this request to obtain the seed/input\\n    // which is finally passed to the VRF cryptographic machinery.\\n    uint256 vRFSeed = makeVRFInputSeed(_keyHash, USER_SEED_PLACEHOLDER, address(this), nonces[_keyHash]);\\n    // nonces[_keyHash] must stay in sync with\\n    // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above\\n    // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).\\n    // This provides protection against the user repeating their input seed,\\n    // which would result in a predictable/duplicate output, if multiple such\\n    // requests appeared in the same block.\\n    nonces[_keyHash] = nonces[_keyHash] + 1;\\n    return makeRequestId(_keyHash, vRFSeed);\\n  }\\n\\n  LinkTokenInterface internal immutable LINK;\\n  address private immutable vrfCoordinator;\\n\\n  // Nonces for each VRF key from which randomness has been requested.\\n  //\\n  // Must stay in sync with VRFCoordinator[_keyHash][this]\\n  mapping(bytes32 => uint256) /* keyHash */ /* nonce */\\n    private nonces;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   * @param _link address of LINK token contract\\n   *\\n   * @dev https://docs.chain.link/docs/link-token-contracts\\n   */\\n  constructor(address _vrfCoordinator, address _link) {\\n    vrfCoordinator = _vrfCoordinator;\\n    LINK = LinkTokenInterface(_link);\\n  }\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomness(bytes32 requestId, uint256 randomness) external {\\n    require(msg.sender == vrfCoordinator, \\\"Only VRFCoordinator can fulfill\\\");\\n    fulfillRandomness(requestId, randomness);\\n  }\\n}\\n\"\r\n    },\r\n    \"LinkTokenInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool success);\\n}\\n\"\r\n    },\r\n    \"VRFRequestIDBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract VRFRequestIDBase {\\n  /**\\n   * @notice returns the seed which is actually input to the VRF coordinator\\n   *\\n   * @dev To prevent repetition of VRF output due to repetition of the\\n   * @dev user-supplied seed, that seed is combined in a hash with the\\n   * @dev user-specific nonce, and the address of the consuming contract. The\\n   * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in\\n   * @dev the final seed, but the nonce does protect against repetition in\\n   * @dev requests which are included in a single block.\\n   *\\n   * @param _userSeed VRF seed input provided by user\\n   * @param _requester Address of the requesting contract\\n   * @param _nonce User-specific nonce at the time of the request\\n   */\\n  function makeVRFInputSeed(\\n    bytes32 _keyHash,\\n    uint256 _userSeed,\\n    address _requester,\\n    uint256 _nonce\\n  ) internal pure returns (uint256) {\\n    return uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));\\n  }\\n\\n  /**\\n   * @notice Returns the id for this request\\n   * @param _keyHash The serviceAgreement ID to be used for this request\\n   * @param _vRFInputSeed The seed to be passed directly to the VRF\\n   * @return The id for this request\\n   *\\n   * @dev Note that _vRFInputSeed is not the seed passed by the consuming\\n   * @dev contract, but the one generated by makeVRFInputSeed\\n   */\\n  function makeRequestId(bytes32 _keyHash, uint256 _vRFInputSeed) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"libraries\": {\r\n      \"Lootbox.sol\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_terminusAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_administratorTerminusAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_administratorPoolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_VRFCoordinatorAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_LinkTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ChainlinkVRFFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_ChainlinkVRFKeyhash\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lootboxId\",\"type\":\"uint256\"}],\"name\":\"LootboxCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lootboxId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rewardType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct Lootbox.LootboxItem\",\"name\":\"lootboxItem\",\"type\":\"tuple\"}],\"name\":\"LootboxItemAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lootboxId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rewardType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct Lootbox.LootboxItem\",\"name\":\"lootboxItem\",\"type\":\"tuple\"}],\"name\":\"LootboxItemRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lootboxId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"opener\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lootboxItemCount\",\"type\":\"uint256\"}],\"name\":\"LootboxOpened\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lootboxOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lootboxId\",\"type\":\"uint256\"}],\"name\":\"LootboxOpeningBegan\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lootboxOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lootboxId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"randomness\",\"type\":\"uint256\"}],\"name\":\"LootboxOpeningCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"ActiveLootboxOpenings\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"status\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lootboxId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"randomness\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"CurrentOpeningforUser\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERC1155_REWARD_TYPE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERC20_REWARD_TYPE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ORDINARY_LOOTBOX_TYPE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RANDOM_LOOTBOX_TYPE_1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TERMINUS_MINTABLE_REWARD_TYPE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lootboxId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rewardType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"internalType\":\"struct Lootbox.LootboxItem\",\"name\":\"item\",\"type\":\"tuple\"}],\"name\":\"addLootboxItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"administratorPoolId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"administratorTerminusAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lootboxId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"toAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"batchMintLootboxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lootboxId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"toAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"batchMintLootboxesConstant\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_administratorPoolId\",\"type\":\"uint256\"}],\"name\":\"changeAdministratorPoolId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"completeRandomLootboxOpening\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rewardType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"internalType\":\"struct Lootbox.LootboxItem[]\",\"name\":\"items\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"lootboxType\",\"type\":\"uint256\"}],\"name\":\"createLootbox\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rewardType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"internalType\":\"struct Lootbox.LootboxItem[]\",\"name\":\"items\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"terminusPoolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lootboxType\",\"type\":\"uint256\"}],\"name\":\"createLootboxWithTerminusPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainlinkVRFFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainlinkVRFKeyhash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lootboxId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getLootboxBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lootboxId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"itemIndex\",\"type\":\"uint256\"}],\"name\":\"getLootboxItemByIndex\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rewardType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"internalType\":\"struct Lootbox.LootboxItem\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lootboxId\",\"type\":\"uint256\"}],\"name\":\"getLootboxURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"grantAdminRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lootboxIdbyTerminusPoolId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lootboxId\",\"type\":\"uint256\"}],\"name\":\"lootboxItemCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lootboxTypebyLootboxId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lootboxId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mintLootbox\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lootboxId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"openLootbox\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"randomness\",\"type\":\"uint256\"}],\"name\":\"rawFulfillRandomness\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lootboxId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"itemIndex\",\"type\":\"uint256\"}],\"name\":\"removeLootboxItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"revokeAdminRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lootboxId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"setLootboxURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"surrenderTerminusControl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"poolIds\",\"type\":\"uint256[]\"}],\"name\":\"surrenderTerminusPools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"terminusAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"terminusPoolIdbyLootboxId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLootboxCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawERC1155\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Lootbox", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000009bb8b28b715c9d0c0098816e9fafdd258554de8d000000000000000000000000062bec5e84289da2cd6147e0e4da402b33b8f796000000000000000000000000000000000000000000000000000000000000000b0000000000000000000000003d2341adb2d31f1c5530cdc622016af293177ae0000000000000000000000000b0897686c545045afc77cf20ec7a532e3120e0f100000000000000000000000000000000000000000000000000005af3107a4000f86195cf7690c55907b2b611ebb7343a6f649bff128701cc542f0569e2c549da", "EVMVersion": "Default", "Library": "", "LicenseType": "Apache-2.0", "Proxy": "0", "Implementation": "", "SwarmSource": ""}