{"SourceCode": "// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     *\r\n     * Furthermore, `isContract` will also return true if the target contract within\r\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\r\n     * which only has an effect at the end of a transaction.\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\r\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\r\n     *\r\n     * _Available since v4.8._\r\n     */\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        if (success) {\r\n            if (returndata.length == 0) {\r\n                // only check isContract if the call was successful and the return data is empty\r\n                // otherwise we already know that it was a contract\r\n                require(isContract(target), \"Address: call to non-contract\");\r\n            }\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason or using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length > 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert(errorMessage);\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/ERC165Checker.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/introspection/ERC165Checker.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Library used to query support of an interface declared via {IERC165}.\r\n *\r\n * Note that these functions return the actual result of the query: they do not\r\n * `revert` if an interface is not supported. It is up to the caller to decide\r\n * what to do in these cases.\r\n */\r\nlibrary ERC165Checker {\r\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\r\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\r\n\r\n    /**\r\n     * @dev Returns true if `account` supports the {IERC165} interface.\r\n     */\r\n    function supportsERC165(address account) internal view returns (bool) {\r\n        // Any contract that implements ERC165 must explicitly indicate support of\r\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\r\n        return\r\n            supportsERC165InterfaceUnchecked(account, type(IERC165).interfaceId) &&\r\n            !supportsERC165InterfaceUnchecked(account, _INTERFACE_ID_INVALID);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if `account` supports the interface defined by\r\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\r\n     *\r\n     * See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\r\n        // query support of both ERC165 as per the spec and support of _interfaceId\r\n        return supportsERC165(account) && supportsERC165InterfaceUnchecked(account, interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns a boolean array where each value corresponds to the\r\n     * interfaces passed in and whether they're supported or not. This allows\r\n     * you to batch check interfaces for a contract where your expectation\r\n     * is that some interfaces may not be supported.\r\n     *\r\n     * See {IERC165-supportsInterface}.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function getSupportedInterfaces(\r\n        address account,\r\n        bytes4[] memory interfaceIds\r\n    ) internal view returns (bool[] memory) {\r\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\r\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\r\n\r\n        // query support of ERC165 itself\r\n        if (supportsERC165(account)) {\r\n            // query support of each interface in interfaceIds\r\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\r\n                interfaceIdsSupported[i] = supportsERC165InterfaceUnchecked(account, interfaceIds[i]);\r\n            }\r\n        }\r\n\r\n        return interfaceIdsSupported;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if `account` supports all the interfaces defined in\r\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\r\n     *\r\n     * Batch-querying can lead to gas savings by skipping repeated checks for\r\n     * {IERC165} support.\r\n     *\r\n     * See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\r\n        // query support of ERC165 itself\r\n        if (!supportsERC165(account)) {\r\n            return false;\r\n        }\r\n\r\n        // query support of each interface in interfaceIds\r\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\r\n            if (!supportsERC165InterfaceUnchecked(account, interfaceIds[i])) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        // all interfaces supported\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Query if a contract implements an interface, does not check ERC165 support\r\n     * @param account The address of the contract to query for support of an interface\r\n     * @param interfaceId The interface identifier, as specified in ERC-165\r\n     * @return true if the contract at account indicates support of the interface with\r\n     * identifier interfaceId, false otherwise\r\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\r\n     * the behavior of this method is undefined. This precondition can be checked\r\n     * with {supportsERC165}.\r\n     *\r\n     * Some precompiled contracts will falsely indicate support for a given interface, so caution\r\n     * should be exercised when using this function.\r\n     *\r\n     * Interface identification is specified in ERC-165.\r\n     */\r\n    function supportsERC165InterfaceUnchecked(address account, bytes4 interfaceId) internal view returns (bool) {\r\n        // prepare call\r\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\r\n\r\n        // perform static call\r\n        bool success;\r\n        uint256 returnSize;\r\n        uint256 returnValue;\r\n        assembly {\r\n            success := staticcall(30000, account, add(encodedParams, 0x20), mload(encodedParams), 0x00, 0x20)\r\n            returnSize := returndatasize()\r\n            returnValue := mload(0x00)\r\n        }\r\n\r\n        return success && returnSize >= 0x20 && returnValue > 0;\r\n    }\r\n}\r\n\r\n// File: RewardStrategy.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\ninterface RewardStrategy is IERC165 {\r\n    function updateWeight(address _investor, uint oldWeight, uint oldTotalWeight, uint newWeight) external;\r\n}\r\n// File: @openzeppelin/contracts/utils/introspection/ERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/security/Pausable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        _requireNotPaused();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        _requirePaused();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the contract is paused.\r\n     */\r\n    function _requireNotPaused() internal view virtual {\r\n        require(!paused(), \"Pausable: paused\");\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the contract is not paused.\r\n     */\r\n    function _requirePaused() internal view virtual {\r\n        require(paused(), \"Pausable: not paused\");\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\n// File: Staking.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract Staking is Ownable, Pausable {\r\n    using ERC165Checker for address;\r\n\r\n    struct User {\r\n        uint128 staked;\r\n        uint128 weight;\r\n        uint32 lockedUntil;\r\n        uint32 boost; // 50% = 5000\r\n        bool locked;\r\n    }\r\n\r\n    mapping(address => User) public users;\r\n    mapping(address => bool) public authorizedBridges;\r\n\r\n    uint128 public totalStaked; // Used for GUI\r\n    uint128 public totalWeight; // Used by reward pools\r\n\r\n    uint256 public stakingLimitPerWallet;\r\n\r\n    uint16 public lockDurationInDays;\r\n    uint8 public lockBoostFactor;\r\n    IERC20 public stakedToken;\r\n\r\n    RewardStrategy[] private rewards;\r\n\r\n    event Stacked(address indexed to, uint amount, bool locked);\r\n    event Unstacked(address indexed to, uint amount);\r\n    event Compound(address indexed to, uint amount, address indexed contractAddress);\r\n\r\n    event RewardContractAdded(address reward);\r\n    event RewardContractRemoved(address reward);\r\n\r\n    event BridgeAdded(address bridge);\r\n    event BridgeRemoved(address bridge);\r\n\r\n    event UpdatedWalletBoost(address indexed to, uint32 newBoost);\r\n    event UpdatedStakingLimit(uint256 newLimit);\r\n    event UpdatedLockBoostFactor(uint8 boostFactor);\r\n    event UpdatedLockDurationInDays(uint16 lockDurationInDays);\r\n\r\n    constructor(address tokenAddr, address owner) {\r\n      stakedToken = IERC20(payable(tokenAddr));\r\n      _transferOwnership(owner);\r\n      lockBoostFactor = 3;\r\n      lockDurationInDays = 30;\r\n      stakingLimitPerWallet = 10_000_000 ether;\r\n    }\r\n\r\n    function stake(uint128 amount, bool locked) external whenNotPaused {\r\n      User storage user = users[msg.sender];\r\n\r\n      require(user.staked + amount <= stakingLimitPerWallet, \"Wallet limit\");\r\n\r\n      // Update staked\r\n      user.staked += amount;\r\n      totalStaked += amount;\r\n\r\n      // Apply locking rules\r\n      if (locked) {\r\n        user.lockedUntil = uint32(block.timestamp + (lockDurationInDays * 1 days));\r\n      } else {\r\n        require(user.lockedUntil < block.timestamp, \"Cannot stake unlocked\");\r\n      }\r\n\r\n      // Calculate new weight\r\n      uint128 newWeight = calculateWeight(user.staked, user.boost, locked);\r\n\r\n      // Notify all registered pools\r\n      for(uint i; i < rewards.length; i++) {\r\n        rewards[i].updateWeight(msg.sender, user.weight, totalWeight, newWeight);\r\n      }\r\n\r\n      // update state\r\n      totalWeight = totalWeight - user.weight + newWeight;\r\n      user.weight = newWeight;\r\n      user.locked = locked;\r\n\r\n      // Transfer stake\r\n      stakedToken.transferFrom(msg.sender, address(this), amount);\r\n      emit Stacked(msg.sender, amount, locked);\r\n    }\r\n\r\n    function unstake(uint128 amount) external whenNotPaused {\r\n      User storage user = users[msg.sender];\r\n\r\n      // Checks\r\n      require(user.lockedUntil < block.timestamp, \"Still locked\");\r\n\r\n      // Update staked\r\n      // No need to check amount since it will fail if greater than staked\r\n      user.staked -= amount;\r\n      totalStaked -= amount;\r\n\r\n      uint128 newWeight = calculateWeight(user.staked, user.boost, false);\r\n\r\n      // Notify all registered pools\r\n      for(uint i; i < rewards.length; i++) {\r\n        rewards[i].updateWeight(msg.sender, user.weight, totalWeight, newWeight);\r\n      }\r\n\r\n      // Set new weight\r\n      totalWeight = totalWeight - user.weight + newWeight;\r\n      user.weight = newWeight;\r\n      user.locked = false;\r\n\r\n      // Redeem staked tokens\r\n      stakedToken.transfer(msg.sender, amount);\r\n      emit Unstacked(msg.sender, amount);\r\n    }\r\n\r\n    function updateBoost(address userAddress, uint32 newBoost) external {\r\n      require(newBoost <= 5000, \"Boost limit\");\r\n      require(authorizedBridges[msg.sender], \"Only Bridge\");\r\n\r\n      User storage user = users[userAddress];\r\n\r\n      // Calculate new weight\r\n      uint128 newWeight = calculateWeight(user.staked, newBoost, user.locked);\r\n\r\n      // Notify all registered pools\r\n      for(uint i; i < rewards.length; i++) {\r\n        rewards[i].updateWeight(msg.sender, user.weight, totalWeight, newWeight);\r\n      }\r\n\r\n      totalWeight = totalWeight - user.weight + newWeight;\r\n      user.weight = newWeight;\r\n      user.boost = newBoost;\r\n\r\n      emit UpdatedWalletBoost(userAddress, newBoost);\r\n    }\r\n\r\n    function calculateWeight(uint staked, uint boost, bool locked) private view returns (uint128) {\r\n      if (locked) {\r\n        return uint128((lockBoostFactor * staked * (10000 + boost)) / 10000);\r\n      } else {\r\n        return uint128((staked * (10000 + boost)) / 10000);\r\n      }\r\n    }\r\n\r\n    function compound(address userAddress, uint128 amount) external {\r\n      // Check only contract can call it\r\n      bool allowed = false;\r\n      for(uint i; i < rewards.length; i++) {\r\n        if (address(rewards[i]) == msg.sender) {\r\n          allowed = true;\r\n          break;\r\n        }\r\n      }\r\n      require(allowed, \"Only reward\");\r\n\r\n      User storage user = users[userAddress];\r\n\r\n      // Update staked\r\n      user.staked += amount;\r\n      totalStaked += amount;\r\n\r\n      // Calculate new weight\r\n      uint128 newWeight = calculateWeight(user.staked, user.boost, user.locked);\r\n\r\n      // Notify all registered pools\r\n      for(uint i; i < rewards.length; i++) {\r\n        rewards[i].updateWeight(userAddress, user.weight, totalWeight, newWeight);\r\n      }\r\n\r\n      // update state\r\n      totalWeight = totalWeight - user.weight + newWeight;\r\n      user.weight = newWeight;\r\n\r\n      // Transfer stake\r\n      stakedToken.transferFrom(msg.sender, address(this), amount);\r\n      emit Compound(userAddress, amount, msg.sender);\r\n    }\r\n\r\n    function balanceOf(address account) external view returns (uint256) {\r\n      return users[account].staked;\r\n    }\r\n\r\n    function weight(address _investor) external view returns (uint) {\r\n      return users[_investor].weight;\r\n    }\r\n\r\n    // Admin features\r\n\r\n    function addBridge(address bridge) external onlyOwner {\r\n      authorizedBridges[bridge] = true;\r\n      emit BridgeAdded(bridge);\r\n    }\r\n\r\n    function removeBridge(address bridge) external onlyOwner {\r\n      authorizedBridges[bridge] = false;\r\n      emit BridgeRemoved(bridge);\r\n    }\r\n\r\n    function addRewardContract(address _reward) external onlyOwner {\r\n      require(_reward.supportsInterface(type(RewardStrategy).interfaceId), \"Reward interface not supported\");\r\n      for (uint i; i < rewards.length; i++) {\r\n        if (address(rewards[i]) == _reward) {\r\n            revert(\"Already added\");\r\n        }\r\n      }\r\n      rewards.push(RewardStrategy(_reward));\r\n      emit RewardContractAdded(_reward);\r\n    }\r\n\r\n    function isRewardContractConnected(address _reward) external view returns (bool) {\r\n      for (uint i; i < rewards.length; i++) {\r\n        if (address(rewards[i]) == _reward) {\r\n            return true;\r\n        }\r\n      }\r\n      return false;\r\n    }\r\n\r\n    function removeRewardContract(address _reward) external onlyOwner {\r\n      for (uint i; i < rewards.length; i++) {\r\n        if (address(rewards[i]) == _reward) {\r\n            rewards[i] = rewards[rewards.length-1];\r\n            rewards.pop();\r\n            emit RewardContractRemoved(_reward);\r\n        }\r\n      }\r\n    }\r\n\r\n    function updatestakingLimitPerWallet(uint256 newLimit) external onlyOwner {\r\n      stakingLimitPerWallet = newLimit;\r\n      emit UpdatedStakingLimit(newLimit);\r\n    }\r\n\r\n    function updateLockBoostFactor(uint8 _boostFactor) external onlyOwner {\r\n      lockBoostFactor = _boostFactor;\r\n      emit UpdatedLockBoostFactor(_boostFactor);\r\n    }\r\n\r\n    function updateLockDurationInDays(uint16 _boostLockInDays) external onlyOwner {\r\n      lockDurationInDays = _boostLockInDays;\r\n      emit UpdatedLockDurationInDays(_boostLockInDays);\r\n    }\r\n\r\n    // Circuit breaker\r\n    // Can pause the contract\r\n    function pause() external onlyOwner {\r\n      _pause();\r\n    }\r\n\r\n    function unpause() external onlyOwner {\r\n      _unpause();\r\n    }\r\n\r\n    // Can rescue the funds if needed\r\n    function rescueFunds() external onlyOwner {\r\n      stakedToken.transfer(owner(), stakedToken.balanceOf(address(this)));\r\n    }\r\n}\r\n// File: BaseReward.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\nabstract contract BaseReward is RewardStrategy, Ownable, Pausable, ERC165 {\r\n\r\n  Staking public stakingContract;\r\n\r\n  constructor(address _stakingContract, address owner) {\r\n    stakingContract = Staking(_stakingContract);\r\n    _transferOwnership(owner);\r\n  }\r\n\r\n  modifier onlyStaking() {\r\n    require(msg.sender == address(stakingContract), \"Only staking\");\r\n    _;\r\n  }\r\n\r\n  function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n      //bytes4(keccak256('updateWeight(address,uint,uint,uint)'));\r\n      return super.supportsInterface(interfaceId) ||\r\n              interfaceId == type(RewardStrategy).interfaceId;\r\n  }\r\n\r\n  function rescueToken(address token) public onlyOwner {\r\n    IERC20(token).transfer(owner(), IERC20(token).balanceOf(address(this)));\r\n  }\r\n\r\n  // Circuit breaker\r\n  // Can pause the contract\r\n  function pause() external onlyOwner {\r\n    _pause();\r\n  }\r\n\r\n  function unpause() external onlyOwner {\r\n    _unpause();\r\n  }\r\n}\r\n// File: ERC20PoolReward.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\ncontract ERC20PoolReward is BaseReward {\r\n\r\n    struct User {\r\n        uint debt;\r\n        uint accReward;\r\n        uint claimed;\r\n    }\r\n    string public constant rewardStrategy = \"ER20PoolReward\";\r\n\r\n    IERC20 public token;\r\n    uint public totalAmount;\r\n    uint public startDate;\r\n    uint public endDate;\r\n\r\n    mapping(address => User) private users;\r\n    uint private accPerShare;\r\n    uint private lastUpdate;\r\n    uint private tokenPerSecond;\r\n\r\n    event Claimed(address indexed to, uint amount);\r\n    event Distribute(address _token, uint _amount, uint _startDate, uint _endDate);\r\n\r\n    constructor(address _stakingContract, address owner)\r\n      BaseReward(_stakingContract, owner) {\r\n    }\r\n\r\n    function distribute(address _token, uint _amount, uint _startDate, uint _endDate) external onlyOwner {\r\n      require(totalAmount == 0, \"Only once\");\r\n      require(_amount > 0, \"Invalid amount\");\r\n      require(_endDate > _startDate, \"End < Start\");\r\n      require(block.timestamp <= _startDate, \"Now > Start\");\r\n      require(stakingContract.isRewardContractConnected(address(this)), 'Not connected');\r\n\r\n      token = IERC20(_token);\r\n      totalAmount = _amount;\r\n      startDate = _startDate;\r\n      endDate = _endDate;\r\n      tokenPerSecond = totalAmount * 10**18 / (endDate - startDate);\r\n\r\n      token.transferFrom(msg.sender, address(this), _amount);\r\n      emit Distribute(_token, _amount, _startDate, _endDate);\r\n    }\r\n\r\n    function claimable(address _investor) public view returns (uint _amount) {\r\n      User memory user = users[_investor];\r\n      return _reward(stakingContract.weight(_investor)) - user.debt + user.accReward - user.claimed;\r\n    }\r\n\r\n    function claim() external whenNotPaused {\r\n      uint _claimable = claimable(msg.sender) ;\r\n      if (_claimable > 0){\r\n        token.transfer(msg.sender, _claimable);\r\n        users[msg.sender].claimed += _claimable;\r\n      }\r\n      emit Claimed(msg.sender, _claimable);\r\n    }\r\n\r\n    function compound() external whenNotPaused {\r\n      uint _claimable = claimable(msg.sender) ;\r\n      if (_claimable > 0){\r\n        require(address(token) == address(stakingContract.stakedToken()), \"Same tokens\");\r\n        token.approve(address(stakingContract), _claimable);\r\n        stakingContract.compound(msg.sender, uint128(_claimable));\r\n        users[msg.sender].claimed += _claimable;\r\n      }\r\n    }\r\n\r\n    function updateWeight(address _investor, uint oldWeight, uint oldTotalWeight, uint newWeight)\r\n      external override onlyStaking {\r\n\r\n      if (startDate == 0) return;\r\n\r\n      uint _now = block.timestamp;\r\n      if (_now < startDate) return;\r\n\r\n      User storage user = users[_investor];\r\n\r\n      // Store pending rewards\r\n      uint pending = _reward(oldWeight) - user.debt;\r\n      if (pending > 0) {\r\n        user.accReward += pending;\r\n      }\r\n\r\n      // Update accumulator\r\n      uint _lastUpdate = lastUpdate == 0 ? startDate : lastUpdate;\r\n      lastUpdate = _now;\r\n      uint _end = _now > endDate ? endDate : _now;\r\n      if (_lastUpdate < _end && oldTotalWeight > 0) {\r\n        accPerShare += tokenPerSecond * (_end - _lastUpdate) / oldTotalWeight;\r\n      }\r\n\r\n      // Update users debt\r\n      user.debt = _reward(newWeight);\r\n    }\r\n\r\n    function _reward(uint weight) internal view returns (uint _amount) {\r\n      uint _now = block.timestamp;\r\n      if (_now < startDate || startDate == 0) return 0;\r\n      uint _end = _now > endDate ? endDate : _now;\r\n      uint _lastUpdate = lastUpdate == 0 ? startDate : lastUpdate;\r\n\r\n      uint _accPerShare = accPerShare;\r\n      if (_lastUpdate < _end) {\r\n        uint _weight = stakingContract.totalWeight();\r\n        if (_weight > 0) _accPerShare += tokenPerSecond * (_end - _lastUpdate) / _weight;\r\n      }\r\n\r\n      return _accPerShare * weight / 10**18;\r\n    }\r\n\r\n    // Can rescue the funds if needed\r\n    function rescueFunds() external onlyOwner {\r\n      super.rescueToken(address(token));\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_startDate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_endDate\",\"type\":\"uint256\"}],\"name\":\"Distribute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_investor\",\"type\":\"address\"}],\"name\":\"claimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"compound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endDate\",\"type\":\"uint256\"}],\"name\":\"distribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rescueFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"rescueToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardStrategy\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingContract\",\"outputs\":[{\"internalType\":\"contract Staking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_investor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"oldWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"oldTotalWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newWeight\",\"type\":\"uint256\"}],\"name\":\"updateWeight\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ERC20PoolReward", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000000f6297bf8fbcfa704da0d6d45440a5d8578791920000000000000000000000003786dda890e791a91b50d476c9f4158a6f07afe5", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0c63d7bcfa0a4805a18c1f01f816ca4486d278aac8dadd72133f1397edb43871"}