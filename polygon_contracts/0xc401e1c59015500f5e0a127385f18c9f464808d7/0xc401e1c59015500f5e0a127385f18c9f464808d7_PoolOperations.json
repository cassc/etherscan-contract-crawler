{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ITest1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\ninterface ITest1 {\\n    function getBaseProvider(address token) external view returns (address);\\n\\n    function getRandomProvider(address token, uint256 randomWord) external returns (address);\\n\\n    function getUserBalance(address account, address token) external view returns (uint256);\\n\\n    function getTotalFunds(address token) external view returns (uint256);\\n\\n    function getUserTips(address account, address token) external view returns (uint256);\\n\\n    function getTotalUserTips(address token) external view returns (uint256);\\n\\n    function getUserStaked(address account, address token) external view returns (uint256);\\n\\n    function getTotalStakes(address token) external view returns (uint256);\\n\\n    function getDepositerHLBalance(address depositer, address token) external view returns (uint256);\\n\\n    function getTotalHL(address token) external view returns (uint256);\\n\\n    function getProviderPayout(address account, address token) external view returns (uint256);\\n\\n    function getTotalPayout(address token) external view returns (uint256);\\n\\n    function getBalancedStatus(address token) external view returns (bool);\\n\\n    function setCoreOwnership(address newOwner) external;\\n\\n    function disableCoreOwnership(address owwner) external;\\n\\n    function setTrustedForwarder(address trustedForwarder) external;\\n\\n    function addTokens(address token) external;\\n\\n    function disableToken(address token) external;\\n\\n    function setBaseProvider(address account, address token) external;\\n\\n    function handleBalance(address bettor, address token, uint256 amount, uint256 operator) external;\\n\\n    function handleUserTips(address bettor, address token, uint256 amount, uint256 operator) external;\\n\\n    function handleStakes(address bettor, address token, uint256 amount, uint256 operator) external;\\n\\n    function handleHL(address bettor, address token, uint256 amount, uint256 operator) external;\\n\\n    function handlePayout(address bettor, address token, uint256 amount, uint256 operator) external;\\n}\\n\"\r\n    },\r\n    \"contracts/PoolOperations.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"./ITest1.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\ncontract PoolOperations is ReentrancyGuard {\\n    // Type Declarations\\n    enum PoolStatus {\\n        Active,\\n        Full,\\n        Settled\\n    }\\n    struct Pool {\\n        bytes32 poolId;\\n        uint totalPoolAmt;\\n        uint totalSpots;\\n        uint spotsLeft;\\n        uint entryAmt;\\n        bytes32 poolType;\\n        PoolStatus status;\\n        uint8 teamLimit;\\n    }\\n\\n    mapping(bytes32 => mapping(address => bytes32[])) poolToPlayerToTeams;\\n    mapping(bytes32 => mapping(address => uint)) poolToPlayerToStakes;\\n    mapping(bytes32 => mapping(address => bool)) settledPlayers;\\n\\n    // Pool Contract Variables\\n    address private poolsOwner;\\n    ITest1 private immutable Core;\\n\\n    mapping(bytes32 => Pool) public pools;\\n\\n    event PoolCreated(Pool indexed _pool);\\n    event UserParticipated(bytes32 indexed _pool, address indexed _participant, address indexed _token, uint8 _index);\\n    event PoolUserSettled(bytes32 indexed _pool, address indexed _user, uint8 indexed _result, address _token, uint _stake, uint _winAmount);\\n    event PoolStatusChanged(bytes32 indexed _pool, PoolStatus _status);\\n\\n    constructor(address owner, address payable core) {\\n        poolsOwner = owner;\\n        Core = ITest1(core);\\n    }\\n\\n    modifier onlyPoolsOwner() {\\n        if (msg.sender != poolsOwner) {\\n            revert(\\\"Pools__OnlyOwnerMethod\\\");\\n        }\\n        _;\\n    }\\n\\n    function transferPoolsOwnership(address _newOwner) public onlyPoolsOwner {\\n        if (_newOwner == address(0)) {\\n            revert(\\\"Incorrect address\\\");\\n        }\\n        //require(_newOwner != address(0), \\\"Incorect address\\\");\\n        poolsOwner = _newOwner;\\n    }\\n\\n    function setCoreOwnershipInPools(address newOwner) public onlyPoolsOwner {\\n        Core.setCoreOwnership(newOwner);\\n    }\\n\\n    function disableCoreOwnershipInPools(address owner) public onlyPoolsOwner {\\n        Core.disableCoreOwnership(owner);\\n    }\\n\\n    function createPool(bytes32 _poolKey, uint _totalPoolAmt, uint _totalSpots, uint _entryAmt, bytes32 _poolType, uint8 _maxParticipation) public onlyPoolsOwner {\\n        pools[_poolKey] = Pool(_poolKey, _totalPoolAmt, _totalSpots, _totalSpots, _entryAmt, _poolType, PoolStatus.Active, _maxParticipation);\\n        emit PoolCreated(pools[_poolKey]);\\n    }\\n\\n    function participate(bytes32 _poolId, address _token, bytes32 _teamId, uint8 _index) public nonReentrant {\\n        if (pools[_poolId].status != PoolStatus.Active) revert(\\\"Pool is not currently Active.\\\");\\n        if (pools[_poolId].entryAmt > Core.getUserBalance(msg.sender, _token)) revert(\\\"Insufficient Funds.\\\");\\n        if (pools[_poolId].spotsLeft == 0) revert(\\\"No spots left in the pool.\\\");\\n        if (poolToPlayerToTeams[_poolId][msg.sender].length == pools[_poolId].teamLimit) revert(\\\"Already participated with max teams.\\\");\\n\\n        uint256 tips = Core.getUserTips(msg.sender, _token);\\n        uint256 tipsToSubtract;\\n\\n        pools[_poolId].spotsLeft--;\\n        poolToPlayerToTeams[_poolId][msg.sender].push(_teamId);\\n        poolToPlayerToStakes[_poolId][msg.sender] += pools[_poolId].entryAmt;\\n\\n        if (pools[_poolId].spotsLeft == 0) {\\n            pools[_poolId].status = PoolStatus.Full;\\n            emit PoolStatusChanged(_poolId, pools[_poolId].status);\\n        }\\n        if (tips > 0) {\\n            tipsToSubtract = (tips >= pools[_poolId].entryAmt) ? pools[_poolId].entryAmt : tips;\\n            uint256 stakeLeft = pools[_poolId].entryAmt - tipsToSubtract;\\n            Core.handleUserTips(msg.sender, _token, tipsToSubtract, 0);\\n            if (stakeLeft > 0) Core.handleBalance(msg.sender, _token, stakeLeft, 0);\\n        } else {\\n            Core.handleBalance(msg.sender, _token, pools[_poolId].entryAmt, 0);\\n        }\\n        Core.handleStakes(msg.sender, _token, pools[_poolId].entryAmt, 1);\\n        // Core.handleBalance(msg.sender, _token, pools[_poolId].entryAmt, 0);\\n\\n        if (!Core.getBalancedStatus(_token)) revert(\\\"Pools__ContractIsNotBalanced\\\");\\n\\n        emit UserParticipated(_poolId, msg.sender, _token, _index);\\n    }\\n\\n    function settlePoolUser(bytes32 _poolId, address _user, uint8 _result, address _token, uint _stake, uint _winAmount) public onlyPoolsOwner {\\n        if (poolToPlayerToTeams[_poolId][_user].length == 0) revert(\\\"No a participant.\\\");\\n        if (settledPlayers[_poolId][_user]) revert(\\\"Already Settled.\\\");\\n\\n        if (Core.getUserStaked(_user, _token) < _stake) revert(\\\"Less stake balance.\\\");\\n        Core.handleStakes(_user, _token, _stake, 0);\\n        Core.handleHL(Core.getBaseProvider(_token), _token, _stake, 1);\\n\\n        //win\\n        if (_result == 1) {\\n            if (Core.getTotalHL(_token) < _winAmount) revert(\\\"Less hl balance.\\\");\\n            Core.handleBalance(_user, _token, _winAmount, 1);\\n            Core.handleHL(Core.getBaseProvider(_token), _token, _winAmount, 0);\\n        }\\n\\n        if (!Core.getBalancedStatus(_token)) revert(\\\"Pools__ContractIsNotBalanced\\\");\\n        settledPlayers[_poolId][_user] == true;\\n\\n        if (pools[_poolId].status != PoolStatus.Settled) {\\n            pools[_poolId].status = PoolStatus.Settled;\\n            emit PoolStatusChanged(_poolId, pools[_poolId].status);\\n        }\\n\\n        emit PoolUserSettled(_poolId, _user, _result, _token, _stake, _winAmount);\\n    }\\n\\n    function settleEmptyPool(bytes32 _poolId) public onlyPoolsOwner {\\n        if (pools[_poolId].totalSpots != pools[_poolId].spotsLeft) revert(\\\"Pools has players.\\\");\\n        pools[_poolId].status = PoolStatus.Settled;\\n        emit PoolStatusChanged(_poolId, pools[_poolId].status);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"core\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"totalPoolAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSpots\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spotsLeft\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"entryAmt\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"poolType\",\"type\":\"bytes32\"},{\"internalType\":\"enum PoolOperations.PoolStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"teamLimit\",\"type\":\"uint8\"}],\"indexed\":true,\"internalType\":\"struct PoolOperations.Pool\",\"name\":\"_pool\",\"type\":\"tuple\"}],\"name\":\"PoolCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_pool\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"enum PoolOperations.PoolStatus\",\"name\":\"_status\",\"type\":\"uint8\"}],\"name\":\"PoolStatusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_pool\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"_result\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_stake\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_winAmount\",\"type\":\"uint256\"}],\"name\":\"PoolUserSettled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_pool\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_participant\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_index\",\"type\":\"uint8\"}],\"name\":\"UserParticipated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_poolKey\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_totalPoolAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalSpots\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_entryAmt\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_poolType\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"_maxParticipation\",\"type\":\"uint8\"}],\"name\":\"createPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"disableCoreOwnershipInPools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_poolId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_teamId\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"_index\",\"type\":\"uint8\"}],\"name\":\"participate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"totalPoolAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSpots\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spotsLeft\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"entryAmt\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"poolType\",\"type\":\"bytes32\"},{\"internalType\":\"enum PoolOperations.PoolStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"teamLimit\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setCoreOwnershipInPools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_poolId\",\"type\":\"bytes32\"}],\"name\":\"settleEmptyPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_poolId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_result\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_winAmount\",\"type\":\"uint256\"}],\"name\":\"settlePoolUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferPoolsOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PoolOperations", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000b8d69eabe08648abc51d3c2156fe0930362bec620000000000000000000000007c401171b160021d40f38bd87d14c0aa6de0eae8", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}