{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/DrakonyxCollection.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.11;\\n\\nimport \\\"./CardNFTV1.sol\\\";\\nimport \\\"./GameTreasury.sol\\\";\\nimport \\\"./TreasuryReserve.sol\\\";\\nimport \\\"./ICollection.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n\\n/**\\n * @title Drakonyx Collection\\n *\\n * @dev Represents a collection of card NFT in the game.\\n */\\ncontract DrakonyxCollection is\\n    Initializable,\\n    ICollection,\\n    AccessControlUpgradeable,\\n    OwnableUpgradeable\\n{\\n    /**\\n     * @notice AccessControl role that allows support actions\\n     */\\n    bytes32 private constant SUPPORT = keccak256(\\\"SUPPORT\\\");\\n\\n    using Address for address;\\n    using Address for address payable;\\n\\n    /**\\n     * @notice Card NFT used in the game\\n     */\\n    CardNFTV1 public card;\\n\\n    /**\\n     * @notice GameTreasury used in the game\\n     */\\n    GameTreasury public gametreasury;\\n\\n    /**\\n     * @notice TreasuryReserve used in the game\\n     */\\n    TreasuryReserve public treasuryreserve;\\n\\n    /**\\n     * @notice Stores Collection ID.\\n     *\\n     */\\n    uint8 public collectionId;\\n\\n    /**\\n     * @notice Stores Full Deck Buyback Value\\n     *\\n     */\\n    uint256 public buyBackValue; // 100.000 Matic\\n\\n    /**\\n     * @notice Switcher for making 4 aces mandatory for claim bayback\\n     *\\n     */\\n    bool public buybackMandatoryAces;\\n\\n    /**\\n     * @notice Switcher fo mint\\n     *\\n     */\\n    bool public mintingPaused;\\n    /**\\n     * @notice Stores the value of each card\\n     */\\n    uint32[] public cardValue;\\n\\n    /**\\n     * @notice Stores the Mint Fee.\\n     *\\n     */\\n    uint256 public mintBasePrice;\\n\\n    /**\\n     * @notice Stores the Mint Fee Percent.\\n     *\\n     */\\n    uint16 public mintFeePercent;\\n\\n    /**\\n     * @notice Stores the Upgrade Fee.\\n     *\\n     */\\n    uint16 public upgradeFee;\\n\\n    /**\\n     * @notice Stores Seller the Marketplace Fee.\\n     *\\n     */\\n    uint32 public marketplaceSellerFeePercent;\\n    /**\\n     * @notice Stores the Marketplace Fee.\\n     *\\n     */\\n    uint32 public marketplaceBuyerFeePercent;\\n\\n    /**\\n     * @notice Stores the partner Fee for Marketplace.\\n     *\\n     */\\n    uint32 public partnerMarketplaceFeePercent;\\n\\n    /**\\n     * @notice Stores the partner Fee.\\n     *\\n     */\\n    uint32 public partnerFeePercent;\\n\\n    /**\\n     * @notice Stores the partner Fee.\\n     *\\n     */\\n    uint32 public partnerCommissionPercent;\\n\\n    /**\\n     * @notice Stores the partner Fee.\\n     *\\n     */\\n    address payable public partnerDAOAddress;\\n\\n    /**\\n     * @notice Stores Free Mint Count.\\n     *\\n     */\\n    uint32 public freeMintCount;\\n\\n    /**\\n     * @notice Stores Total Mint Count.\\n     *\\n     */\\n    uint16 public totalMintedCountForJoker;\\n\\n    /**\\n     * @notice Stores Gained Jokers count.\\n     *\\n     */\\n    uint8 public jokersCount;\\n\\n    /**\\n     * @notice Stores Minted Jokers count.\\n     *\\n     */\\n    uint8 public jokersMinedCount;\\n\\n    /**\\n     * @notice DAO address where fees are paid\\n     */\\n    address payable public daoAddress;\\n\\n    /**\\n     * @notice gameTreasury address where funds are sent\\n     */\\n    address payable public gameTreasury;\\n\\n    //coupon signer address\\n    address public couponSigner;\\n\\n    /**\\n     * @notice Checks whether a provided card type is\\n     *         valid (in range [1, 53])\\n     *\\n     * @param _cardType the card type to check\\n     */\\n    modifier validCardType(uint8 _cardType) {\\n        require(_cardType >= 1 && _cardType <= 53, \\\"1-53\\\");\\n        _;\\n    }\\n   \\n\\n    /**\\n     * @dev Fired in _mintCards()\\n     *\\n     * @param by address initiating the mint\\n     * @param tokenIds tokens minted\\n     * @param tokenIds card types minted\\n     * @param collection card collection\\n     */\\n    event Mint(\\n        address by,\\n        uint160[] tokenIds,\\n        uint8[] cardTypes,\\n        uint8 collection\\n    );\\n    /**\\n     * @dev Fired in MintSpecCard()\\n     *\\n     * @param by address initiating the mint\\n     * @param cardId card ID\\n     * @param tokenId card tokenId\\n     * @param collection card collection\\n     */\\n    event MintSpecCard(\\n        address by,\\n        uint160 cardId,\\n        uint160 tokenId,\\n        uint8 collection\\n    );\\n\\n    /**\\n     * @dev Fired in upgradeCards()\\n     *\\n     * @param by address which executed the burn\\n     * @param fromCollection collection of the card that was burned\\n     * @param txId ED transaction\\n     */\\n    \\n    event Upgrade(\\n        address by,\\n        uint8 fromCollection,\\n        uint160 txId\\n    );\\n\\n    /**\\n     * @dev Fired in BountyClaimed()\\n     *\\n     * @param by address which executed the burn\\n     * @param buyback buyback\\n     * @param txId ED transaction\\n     */\\n    event BountyClaimed(\\n        address by,\\n        uint256 buyback,\\n        uint160 txId\\n    );\\n    \\n     /**\\n     * @dev Fired in TransferEDCard()\\n     *\\n     * @param by address which executed the burn\\n     * @param _to to address\\n     * @param _cardId to address\\n     * @param txId ED transaction\\n     */\\n    event CardTransfered(\\n        address by,\\n        address _to,\\n        uint160 _cardId,\\n        uint160 txId\\n    );\\n\\n    /**\\n     * @dev Fired in depositForFreeMint()\\n     *\\n     * @param by address\\n     * @param amount  amount for free mint\\n     * @param mintCount added mint free mint count\\n     * @param freeMintCount total free mint count\\n     * @param collectionId collectionId\\n     */\\n    event DepositedForFreeMint(\\n        address by,\\n        uint256 amount,\\n        uint32 mintCount,\\n        uint32 freeMintCount,\\n        uint8 collectionId\\n    );\\n\\n    /**\\n     * @dev Fired in setMarketplaceSellerFeePercent()\\n     *\\n     * @param by address\\n     * @param oldValue  old value\\n     * @param newValue new value\\n     */\\n    event MarketplaceSellerFeeChanged(\\n        address by,\\n        uint32 oldValue,\\n        uint32 newValue\\n    );\\n\\n    /**\\n     * @dev Fired in setMarketplaceBuyerFeePercent()\\n     *\\n     * @param by address\\n     * @param oldValue  old value\\n     * @param newValue new value\\n     */\\n    event MarketplaceBuyerFeeChanged(\\n        address by,\\n        uint32 oldValue,\\n        uint32 newValue\\n    );\\n\\n\\n   /**\\n     * @dev Fired in buyCards()\\n     *\\n     * @param buyer address\\n     * @param cost  cost\\n     * @param collectionMintFee Fee\\n     * @param partnerFee partner Fee\\n     * @param costWithoutFees base cost\\n     * @param amount bought cards amount\\n     * @param freeMint is Free mint\\n    */\\n    event BuyCards(\\n         address buyer,\\n         uint256 cost,\\n         uint256 collectionMintFee,\\n         uint256 partnerFee,\\n         uint256 costWithoutFees,\\n         uint8 collectionId,\\n         uint8 amount,\\n         bool freeMint\\n    );\\n\\n\\n    /**\\n     * @notice Initiates the game\\n     *\\n     * @param _card Card Nft smart contract address\\n     * @param _daoAddress DAO Smart contract address\\n     * @param _gameTreasury Game Treasury Smart contract address\\n     * @param _treasuryReserve Reserve Treasury Smart contract address\\n     * @param _partnerDAOAddress Partner DAO Smart contract address\\n     * @param _couponSigner Coupon Signer address\\n     */\\n    function initialize(\\n        address _card,\\n        address payable _daoAddress,\\n        address payable _gameTreasury,\\n        address payable _treasuryReserve,\\n        address payable _partnerDAOAddress,\\n        address _couponSigner\\n    ) public initializer {\\n        OwnableUpgradeable.__Ownable_init();\\n        card = CardNFTV1(_card);\\n        gametreasury = GameTreasury(_gameTreasury);\\n        treasuryreserve = TreasuryReserve(_treasuryReserve);\\n        daoAddress = _daoAddress;\\n        gameTreasury = _gameTreasury;\\n        partnerDAOAddress = _partnerDAOAddress;\\n        couponSigner = _couponSigner;\\n\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _setupRole(SUPPORT, msg.sender);\\n\\n        collectionId = 5;\\n        buyBackValue = 1000 * 10 ** 18; // 1000 Matic\\n        mintBasePrice = 9708853404000000;\\n        \\n        buybackMandatoryAces = false;\\n        mintingPaused = false;\\n        cardValue = [\\n            0, //Joker\\n            200, // Ace of Diamonds\\n            200, // Ace of Spades\\n            200, // Ace of Hearts\\n            200, // Ace of Clubs\\n            700, // 2 of Diamonds\\n            700, // 2 of Spades\\n            700, // 2 of Hearts\\n            700, // 2 of Clubs\\n            1600, // 3 of Diamonds\\n            1600, // 3 of Spades\\n            1600, // 3 of Hearts\\n            1600, // 3 of Clubs\\n            2500, // 4 of Diamonds\\n            2500, // 4 of Spades\\n            2500, // 4 of Hearts\\n            2500, // 4 of Clubs\\n            6000, // 5 of Diamonds\\n            6000, // 5 of Spades\\n            6000, // 5 of Hearts\\n            6000, // 5 of Clubs\\n            14000, // 6 of Diamonds\\n            14000, // 6 of Spades\\n            14000, // 6 of Hearts\\n            14000, // 6 of Clubs\\n            25000, // 7 of Diamonds\\n            25000, // 7 of Spades\\n            25000, // 7 of Hearts\\n            25000, // 7 of Clubs\\n            100000, // 8 of Diamonds\\n            100000, // 8 of Spades\\n            100000, // 8 of Hearts\\n            100000, // 8 of Clubs\\n            250000, // 9 of Diamonds\\n            250000, // 9 of Spades\\n            250000, // 9 of Hearts\\n            250000, // 9 of Clubs\\n            600000, // 10 of Diamonds\\n            600000, // 10 of Spades\\n            600000, // 10 of Hearts\\n            600000, // 10 of Clubs\\n            2000000, // Jack of Diamonds\\n            2000000, // Jack of Spades\\n            2000000, // Jack of Hearts\\n            2000000, // Jack of Clubs\\n            6000000, // Queen of Diamonds\\n            6000000, // Queen of Spades\\n            6000000, // Queen of Hearts\\n            6000000, // Queen of Clubs\\n            16000000, // King of Diamonds\\n            16000000, // King of Spades\\n            16000000, // King of Hearts\\n            16000000, // King of Clubs\\n            0 // Joker\\n        ];\\n        mintFeePercent = 2_000;\\n        upgradeFee = 2_000;\\n        marketplaceSellerFeePercent = 5_000;\\n        marketplaceBuyerFeePercent = 5_000;\\n        partnerMarketplaceFeePercent = 0;\\n        partnerFeePercent = 0;\\n        partnerCommissionPercent = 0;\\n        freeMintCount = 0;\\n        totalMintedCountForJoker = 0;\\n        jokersCount = 0;\\n        jokersMinedCount = 0;\\n    }\\n\\n    // constructor() {\\n    //     _disableInitializers();\\n    // }\\n\\n   /**\\n     * @notice Calculates the cost needed to mint random cards\\n     *\\n     * @dev Used by the integration library to calculate how much Ether\\n     *      to send to the game treasury for free mint.\\n     *\\n     * @param _mintCount  amount of mints\\n     */\\n    function depositForFreeMint(uint32 _mintCount) public payable {\\n        require(_mintCount >= 1 && _mintCount <= 1000, \\\"w Count\\\");\\n\\n        uint256 costWithoutFees = mintBasePrice * _mintCount;\\n        uint256 collectionMintFee = (costWithoutFees * mintFeePercent) / 100_000;\\n\\n        uint256 cost = costWithoutFees + collectionMintFee;\\n        require(msg.value >= cost, \\\"not e-gh\\\");\\n        freeMintCount += _mintCount;\\n\\n        gameTreasury.sendValue(msg.value);\\n        emit DepositedForFreeMint(\\n            msg.sender,\\n            msg.value,\\n            _mintCount,\\n            freeMintCount,\\n            collectionId\\n        );\\n    }\\n\\n    /**\\n     * @notice Calculates the cost needed to mint random cards\\n     *\\n     * @param _freeMint Is coupon for free mint\\n     * @param _coupon Coupon for discount or free mint\\n     * @param _availableAmount Discount percent or free mint amount\\n     * @return cost the total cost for the mint\\n     * @return collectionMintFee\\n     * @return partnerFee\\n     */\\n    function mintCardsCost(\\n        uint _amount,\\n        Coupon memory _coupon,\\n        uint8 _availableAmount,\\n         bool _freeMint\\n    )\\n        public\\n        view\\n        returns (uint256 cost, uint256 collectionMintFee, uint256 partnerFee, uint256 costWithoutFees)\\n    {\\n        // Validate amount info\\n        require(_amount >= 1 && _amount <= 100, \\\"w a-t\\\");\\n        costWithoutFees = mintBasePrice * _amount;\\n\\n        collectionMintFee = (costWithoutFees * mintFeePercent) / 100_000;\\n\\n        //here we should check if minter has a discount\\n        uint256 collectionMintFeeWithDiscount = collectionMintFee;\\n        if (!_freeMint) {\\n            // collectionMintFeeWithDiscount that should be paid to Collection Dao\\n            collectionMintFeeWithDiscount = checkDiscount(\\n                collectionMintFee,\\n                _coupon,\\n                _availableAmount\\n            );\\n        }\\n        partnerFee =\\n            (collectionMintFeeWithDiscount * partnerFeePercent) /\\n            100_000;\\n\\n        collectionMintFee = collectionMintFeeWithDiscount - partnerFee;\\n\\n        cost = costWithoutFees + collectionMintFeeWithDiscount;\\n        if (_freeMint) {\\n            bytes32 digest = keccak256(\\n                abi.encodePacked(collectionId, _availableAmount, msg.sender)\\n            );\\n            if (_isVerifiedCoupon(digest, _coupon)) {\\n                cost = 0;\\n            }\\n        } \\n    }\\n    struct Commit {\\n        bytes32 commit;\\n        uint64 block;\\n        bool revealed;\\n        uint8 amount;\\n        uint256 cost;\\n        uint256 partnerFee;\\n        uint256 collectionMintFee;\\n    }\\n    mapping(address => Commit) public commits;\\n    /**\\n     * @notice Mint Jokers\\n     *\\n     * @param _amount of cards to be minted in range [1, 25]\\n     * @param _coupon coupon\\n     * @param _availableAmount available jokers amount for address\\n     */\\n    function mintJoker(\\n        uint8 _amount,\\n        Coupon memory _coupon,\\n        uint8 _availableAmount\\n    ) public {\\n        require(_amount >= 1 && _amount <= 100, \\\"w a-t\\\");\\n        require(_amount <= jokersCount, \\\"not e-gh j\\\");\\n\\n        bytes32 digest = keccak256(\\n            abi.encode(collectionId, _availableAmount, msg.sender)\\n        );\\n        require(_isVerifiedCoupon(digest, _coupon), \\\"w c-n\\\");\\n        jokersCount -= _amount;\\n        //get the hash of the block that happened after they committed\\n        uint160[] memory tokenIds = new uint160[](_amount);\\n        uint8[] memory cardTypes = new uint8[](_amount);\\n        for (uint8 i; i < _amount; ) {\\n            uint160 tokenId = uint160(\\n                uint256(\\n                    keccak256(\\n                        abi.encodePacked(\\n                            _amount,\\n                            block.timestamp,\\n                            block.number,\\n                            msg.sender,\\n                            i\\n                        )\\n                    )\\n                )\\n            );\\n            // Add token ID to list\\n            tokenIds[i] = tokenId;\\n            cardTypes[i] = 53;\\n            // Mint card with type card_index to user\\n            card.mint(msg.sender, tokenId, 53, collectionId, false);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        // Emit event\\n        emit Mint(msg.sender, tokenIds, cardTypes, collectionId);\\n    }\\n\\n    /**\\n     * @notice buyCards\\n     *\\n     * @param _amount Amount of Cards\\n     * @param _coupon Coupon for discount or free mint\\n     * @param _availableAmount Discount percent or free mint amount\\n     * @param _freeMint Is coupon for free mint\\n     */\\n    function buyCards(\\n        uint8 _amount, \\n        Coupon memory _coupon,\\n        uint8 _availableAmount,\\n        bool _freeMint\\n        ) public payable{\\n\\n        if (_freeMint) {\\n            require(_amount >= 1 && _amount <= freeMintCount, \\\"w a-t\\\");\\n            require(_amount <= _availableAmount, \\\"m a-t\\\");\\n            freeMintCount -= _amount;\\n        }\\n\\n        (\\n            uint256 cost,\\n            uint256 collectionMintFee,\\n            uint256 partnerFee,\\n            uint256 costWithoutFees\\n        ) = mintCardsCost(_amount, _coupon, _availableAmount, _freeMint);\\n\\n        // Check whether user sent enough funds\\n        require(msg.value >= cost, \\\"not e-gh\\\");\\n\\n        if (partnerFee > 0) {\\n            //Send % to partner DAO\\n            if(_freeMint){\\n                gametreasury.mintFee(partnerDAOAddress, partnerFee);\\n            }else{\\n                partnerDAOAddress.sendValue(partnerFee);\\n            }\\n           \\n        }\\n         if (collectionMintFee > 0) {\\n            // Send mint fee to DAO\\n            if(_freeMint){\\n                gametreasury.mintFee(daoAddress, collectionMintFee);\\n            }else{\\n                daoAddress.sendValue(collectionMintFee);\\n            }\\n        }\\n        if (cost > 0) {\\n            gameTreasury.sendValue(costWithoutFees);\\n        }\\n\\n         if(msg.value > cost) {\\n            payable(msg.sender).call{value: (msg.value - cost)}(\\\"\\\");\\n         }\\n\\n        //send buy cards event\\n        emit BuyCards(\\n            msg.sender,\\n            cost,\\n            collectionMintFee,\\n            partnerFee,\\n            costWithoutFees,\\n            collectionId,\\n            _amount,\\n            _freeMint\\n        );\\n    \\n    }\\n\\n    /**\\n     * @notice Mint Card\\n     *\\n     * @param _cardId Card \\n     */\\n    function mintSpecCard(uint160 _cardId, uint8 _cardType, uint256 _editionNumber, uint256 _serialNumber, Coupon memory _coupon) public  validCardType(_cardType){\\n        uint160 tokenId = uint160(\\n            uint256(\\n                keccak256(\\n                    abi.encodePacked(\\n                        _cardId,\\n                        block.timestamp,\\n                        block.number,\\n                        msg.sender\\n                    )\\n                )\\n            )\\n        );\\n        require(\\n            _isVerifiedMintCoupon(_cardType, _editionNumber, _serialNumber, _coupon),\\n            \\\"Not valid coupon\\\"\\n        );\\n        card.mintSpecCard(msg.sender, collectionId, tokenId, _cardType, _editionNumber, _serialNumber);\\n        // Emit event\\n       \\n        emit MintSpecCard(msg.sender, _cardId, tokenId, collectionId);\\n    }\\n\\n    /**\\n     * @notice Allows a user to sacrifice a number of cards he owns\\n     *         in order to get a card of higher value\\n     *\\n     * @param _tokenIds the token ids of the cards to be sacrificed\\n     * @param _payValue the card type of the new card to be minted\\n     * @param _refundValue Collection id\\n     * @param _cardsTypeValueDiffCost Coupon for discount\\n     * @param _upgradeFeeCostWithDiscount Discount value\\n     * @param _txId Discount value\\n     */\\n    function upgradeCards(\\n        uint160[] calldata _tokenIds,\\n        uint256 _payValue,\\n        uint256 _refundValue,\\n        uint256 _cardsTypeValueDiffCost,\\n        uint256 _upgradeFeeCostWithDiscount,\\n        uint160 _txId,\\n        Coupon memory _coupon\\n    ) public payable{\\n\\n        require(msg.value >= _payValue, \\\"not e-h\\\");\\n\\n        bytes32 digest = keccak256(\\n           abi.encode(_payValue, _refundValue,  _cardsTypeValueDiffCost, _upgradeFeeCostWithDiscount, msg.sender)\\n        );\\n        address signer = ecrecover(digest, _coupon.v, _coupon.r, _coupon.s);\\n        \\n        require(signer == couponSigner, \\\"wrong params\\\");\\n       \\n        if(_tokenIds.length > 0){\\n            card.burnBatch(msg.sender, _tokenIds, 0);\\n        }\\n        \\n        \\n        if (_payValue > 0) {\\n            daoAddress.sendValue(_payValue);\\n        } else {\\n            // Send upgrade fee to DAO From Treasury\\n            gametreasury.upgradeCommission(\\n                daoAddress,\\n                _upgradeFeeCostWithDiscount\\n            );\\n        }\\n        //claim commissions\\n        _claimUpgradeCommission(\\n            _cardsTypeValueDiffCost,\\n            _refundValue\\n        );\\n\\n        //Emit event\\n        emit Upgrade(\\n            msg.sender,\\n            collectionId,\\n           _txId\\n        );\\n    }\\n\\n\\n    struct CommissionInfo {\\n        uint256 upgradeCommission;\\n        uint256 upgradeCommissionPrtner;\\n        uint256 upgradeCommissionFromTreasuryReserve;\\n        uint256 upgradeCommissionPrtnerReserve;\\n        uint256 claimCommission;\\n        uint256 claimCommissionWithDiscount;\\n        uint256 partnerClaimCommission;\\n    }\\n\\n    /**\\n     * @notice  Send upgrade cacheback and claim upgrade commissin to DAO\\n     *\\n     * @param _cardsTypeValueDiffCost Cost of upgrade diff\\n     * @param _refundValue Value that user gets\\n     */\\n    function _claimUpgradeCommission(\\n        uint256 _cardsTypeValueDiffCost,\\n        uint256 _refundValue\\n    ) private {\\n        CommissionInfo memory commissioninfo;\\n\\n        //cache back to player\\n        if (_refundValue > 0) {\\n            if (gametreasury.balance() < _refundValue) {\\n                commissioninfo.upgradeCommissionFromTreasuryReserve =\\n                    _refundValue -\\n                    gametreasury.balance();\\n                treasuryreserve.giveUpgradeCacheBack(\\n                    msg.sender,\\n                    commissioninfo.upgradeCommissionFromTreasuryReserve\\n                );\\n                _refundValue -= commissioninfo\\n                    .upgradeCommissionFromTreasuryReserve;\\n            }\\n            if (_refundValue > 0) {\\n                gametreasury.giveUpgradeCacheBack(msg.sender, _refundValue);\\n            }\\n\\n            commissioninfo.upgradeCommission = _cardsTypeValueDiffCost;\\n            commissioninfo.upgradeCommissionPrtner =\\n                (commissioninfo.upgradeCommission * partnerCommissionPercent) /\\n                100_000;\\n\\n            commissioninfo.upgradeCommission -= commissioninfo\\n                .upgradeCommissionPrtner;\\n            if (gametreasury.balance() < commissioninfo.upgradeCommission) {\\n                commissioninfo.upgradeCommissionFromTreasuryReserve =\\n                    commissioninfo.upgradeCommission -\\n                    gametreasury.balance();\\n                treasuryreserve.upgradeCommission(\\n                    daoAddress,\\n                    commissioninfo.upgradeCommissionFromTreasuryReserve\\n                );\\n                commissioninfo.upgradeCommission -= commissioninfo\\n                    .upgradeCommissionFromTreasuryReserve;\\n            }\\n\\n            if (commissioninfo.upgradeCommission > 0) {\\n                gametreasury.upgradeCommission(\\n                    daoAddress,\\n                    commissioninfo.upgradeCommission\\n                );\\n            }\\n\\n            if (commissioninfo.upgradeCommissionPrtner > 0) {\\n                if (\\n                    gametreasury.balance() <\\n                    commissioninfo.upgradeCommissionPrtner\\n                ) {\\n                    commissioninfo.upgradeCommissionPrtnerReserve =\\n                        commissioninfo.upgradeCommissionPrtner -\\n                        gametreasury.balance();\\n                    treasuryreserve.upgradeCommission(\\n                        partnerDAOAddress,\\n                        commissioninfo.upgradeCommissionPrtnerReserve\\n                    );\\n                    commissioninfo.upgradeCommissionPrtner -= commissioninfo\\n                        .upgradeCommissionPrtnerReserve;\\n                }\\n                if (commissioninfo.upgradeCommissionPrtner > 0) {\\n                    gametreasury.upgradeCommission(\\n                        partnerDAOAddress,\\n                        commissioninfo.upgradeCommissionPrtner\\n                    );\\n                }\\n            }\\n        }\\n    }\\n\\n  /**\\n     * @notice Claim Bounty\\n     *\\n     * @param _tokenIds  token ids of the cards to be burn\\n     * @param _floorValue  Bounty floorValue\\n     * @param _bonusEarned  Bounty bonus percent\\n     * @param _bounty  Bounty value\\n     * @param _txId  ED transaction ID\\n     */\\n    function claimBounty( \\n        uint160[] calldata _tokenIds,\\n        uint256 _floorValue,\\n        uint256 _bonusEarned,\\n        uint256 _bounty,\\n        uint160 _txId,\\n        Coupon memory _coupon\\n    ) public {\\n        bytes32 digest = keccak256(\\n           abi.encode(_floorValue, _bonusEarned,  _bounty, msg.sender)\\n        );\\n        address signer = ecrecover(digest, _coupon.v, _coupon.r, _coupon.s);\\n        \\n        require(signer == couponSigner, \\\"wrong params\\\");\\n       \\n        if(_tokenIds.length > 0){\\n            card.burnBatch(msg.sender, _tokenIds, 0);\\n        }\\n        \\n        CommissionInfo memory commissioninfo;\\n        uint256 buyback = _bounty;\\n\\n        commissioninfo.claimCommission = (_floorValue * 2) - buyback;\\n        commissioninfo.partnerClaimCommission =\\n            (commissioninfo.claimCommission * partnerCommissionPercent) /\\n            100_000;\\n        if (buyback > 0) {\\n            uint256 buybackFromTreasuryReserve = 0;\\n            if (gametreasury.balance() < buyback) {\\n                buybackFromTreasuryReserve = buyback - gametreasury.balance();\\n                treasuryreserve.buyBackPayout(\\n                    msg.sender,\\n                    buybackFromTreasuryReserve\\n                );\\n                buyback -= buybackFromTreasuryReserve;\\n            }\\n            if (buyback > 0) {\\n                gametreasury.buyBackPayout(msg.sender, buyback);\\n            }\\n            _claimBuyBackCommission(\\n                commissioninfo.claimCommission,\\n                commissioninfo.partnerClaimCommission\\n            );\\n        }\\n        card.increaseCollectionBuyBacks(collectionId);\\n\\n        // Emit BountyClaimed event\\n        emit BountyClaimed(msg.sender, buyback, _txId);\\n    }\\n\\n   \\n    /**\\n     * @notice Claim commission for buyback\\n     *\\n     * @param _claimCommission commission value\\n     * @param _partnerClaimCommission partner commission value\\n     */\\n    function _claimBuyBackCommission(\\n        uint256 _claimCommission,\\n        uint256 _partnerClaimCommission\\n    ) private {\\n        // send money to dao if player had not collected 100% of bonus\\n        if (_claimCommission > 0) {\\n            if (gametreasury.balance() < _claimCommission) {\\n                uint256 claimCommissionFromTreasuryReserve = _claimCommission -\\n                    gametreasury.balance();\\n                treasuryreserve.claimCommission(\\n                    daoAddress,\\n                    claimCommissionFromTreasuryReserve\\n                );\\n                _claimCommission -= claimCommissionFromTreasuryReserve;\\n            }\\n            if (_claimCommission > 0) {\\n                gametreasury.claimCommission(daoAddress, _claimCommission);\\n            }\\n        }\\n\\n        if (_partnerClaimCommission > 0) {\\n            if (gametreasury.balance() < _partnerClaimCommission) {\\n                uint256 partnerClaimCommissionFromTreasuryReserve = _partnerClaimCommission -\\n                        gametreasury.balance();\\n                treasuryreserve.claimCommission(\\n                    partnerDAOAddress,\\n                    partnerClaimCommissionFromTreasuryReserve\\n                );\\n                _partnerClaimCommission -= partnerClaimCommissionFromTreasuryReserve;\\n            }\\n            if (_claimCommission > 0) {\\n                gametreasury.claimCommission(\\n                    partnerDAOAddress,\\n                    _partnerClaimCommission\\n                );\\n            }\\n        }\\n    }\\n\\n\\n    /**\\n     * @notice Transfer ED card\\n     *\\n     * @param _cardId  ED card Id\\n     * @param _to recieved address\\n     */\\n    function transferEDCard(uint160 _cardId, address _to, uint160 _txId, Coupon memory _coupon) public {\\n\\n        bytes32 digest = keccak256(\\n           abi.encode(_cardId, _to, msg.sender)\\n        );\\n        address signer = ecrecover(digest, _coupon.v, _coupon.r, _coupon.s);\\n        require(signer == couponSigner, \\\"wrong params\\\");\\n        // Emit CardTransfered event\\n        emit CardTransfered(msg.sender, _to, _cardId, _txId);\\n        \\n    }\\n   \\n    /**\\n     * @notice check if user has discount on fee\\n     *\\n     * @param _fee default fee\\n     * @param _coupon coupon of discount\\n     * @param _discount discount value\\n     *\\n     * @return fee discounted fee\\n     */\\n    function checkDiscount (uint256 _fee, Coupon memory _coupon, uint8 _discount) public view returns (uint256 fee) {\\n        bytes32 digest = keccak256(\\n            abi.encode(collectionId, _discount, msg.sender)\\n        );\\n        fee = _fee;\\n        if(_isVerifiedCoupon(digest, _coupon)){\\n            fee = _fee - (_fee * _discount / 100);\\n        }\\n        return fee;\\n    }\\n\\n    /**\\n     * @notice check if user has discount on fee\\n     *\\n     * @param _editionNumber default fee\\n     * @param _serialNumber coupon of discount\\n     * @param _coupon discount value\\n     *\\n     * @return fee discounted fee\\n     */\\n    function _isVerifiedMintCoupon (uint8 _cardType, uint256 _editionNumber, uint256 _serialNumber, Coupon memory _coupon) internal view returns (bool) {\\n        bytes32 digest = keccak256(\\n            abi.encode(collectionId, _cardType,  _editionNumber, _serialNumber, msg.sender)\\n        );\\n        address signer = ecrecover(digest, _coupon.v, _coupon.r, _coupon.s);\\n        return signer == couponSigner;\\n    }\\n    \\n\\n\\n    /**\\n     * @notice check that the coupon sent was signed by the admin signer\\n     *\\n     * @param _digest Coupon data digest\\n     * @param _coupon Coupon of discount or free mint\\n     *\\n     * @return bool success if valid signer\\n     */\\n\\n    function _isVerifiedCoupon(bytes32 _digest, Coupon memory _coupon) internal view returns (bool) {\\n        address signer = ecrecover(_digest, _coupon.v, _coupon.r, _coupon.s);\\n        require(signer != address(0), 'w s');\\n        return signer == couponSigner;\\n     }\\n\\n    /**\\n     * @notice Updates partnerFeePercent\\n     *\\n     * @param _newFee new partnerFee\\n     */\\n    function setPartnerFee(uint32 _newFee) external onlyOwner {\\n        // Update partnerFee\\n        require(_newFee < 100_000, \\\"w fee\\\");\\n        partnerFeePercent = _newFee;\\n    }\\n\\n    /**\\n     * @notice Updates partnerCommissionPercent\\n     *\\n     * @param _newCommission new partnerFee\\n     */\\n    function setPartnerCommission(uint32 _newCommission) external onlyOwner {\\n        // Update partnerFee\\n        require(_newCommission < 100_000, \\\"w fee\\\");\\n        partnerCommissionPercent = _newCommission;\\n    }\\n\\n    /**\\n     * @notice Updates freeMintCount\\n     *\\n     * @param _newfreeMintCount new freeMintCount\\n     */\\n    function setFreeMintCount(uint32 _newfreeMintCount) external onlyOwner {\\n        freeMintCount = _newfreeMintCount;\\n    }\\n\\n    /**\\n     * @notice Updates couponSigner\\n     *\\n     * @param _couponSigner new coupon signer address\\n     */\\n    function setCouponSigner(address _couponSigner) external onlyOwner {\\n        require(\\n        _couponSigner != address(0),\\n        \\\"w add\\\"\\n        );\\n        couponSigner = _couponSigner;\\n    }\\n\\n    /**\\n     * @notice Updates buybackMandatoryAces\\n     *\\n     * @param _buybackMandatoryAces new buybackMandatoryAces\\n     */\\n    function setBuybackMandatoryAces(\\n        bool _buybackMandatoryAces\\n    ) external onlyOwner {\\n        buybackMandatoryAces = _buybackMandatoryAces;\\n    }\\n\\n     /**\\n     * @notice Updates buyBackValue\\n     *\\n     * @param _newbuybackValues new buyBackValue\\n     */\\n    function setBuybackValue(\\n        uint256 _newbuybackValues\\n    ) external onlyOwner {\\n        buyBackValue = _newbuybackValues;\\n    }\\n\\n\\n /**\\n     * @notice Updates mintBasePrice\\n     *\\n     * @param _newBasePrice new _newBasePrice\\n     */\\n    function setBasePrice(\\n        uint256 _newBasePrice\\n    ) external onlyOwner {\\n        mintBasePrice = _newBasePrice;\\n    }\\n\\n    /**\\n     * @notice Updates mintingPaused\\n     *\\n     * @param _mintingPaused new mintingPaused\\n     */\\n    function togglePause(bool _mintingPaused) external onlyOwner {\\n        mintingPaused = _mintingPaused;\\n    }\\n\\n    /**\\n     * @notice Updates marketplaceSellerFeePercent\\n     *\\n     * @param _marketplaceSellerFeePercent new marketplaceSellerFeePercent\\n     */\\n    function setMarketplaceSellerFeePercent(\\n        uint32 _marketplaceSellerFeePercent\\n    ) external onlyOwner {\\n        require(\\n            _marketplaceSellerFeePercent >= 0 &&\\n                _marketplaceSellerFeePercent <= 100_000,\\n            \\\"w %\\\"\\n        );\\n        emit MarketplaceSellerFeeChanged(\\n            msg.sender,\\n            marketplaceSellerFeePercent,\\n            _marketplaceSellerFeePercent\\n        );\\n        marketplaceSellerFeePercent = _marketplaceSellerFeePercent;\\n    }\\n\\n    /**\\n     * @notice Updates marketplaceBuyerFeePercent\\n     *\\n     * @param _marketplaceBuyerFeePercent new marketplaceBuyerFeePercent\\n     */\\n    function setMarketplaceBuyerFeePercent(\\n        uint32 _marketplaceBuyerFeePercent\\n    ) external onlyOwner {\\n        require(\\n            _marketplaceBuyerFeePercent >= 0 &&\\n                _marketplaceBuyerFeePercent <= 100_000,\\n            \\\"w %\\\"\\n        );\\n        emit MarketplaceBuyerFeeChanged(\\n            msg.sender,\\n            marketplaceBuyerFeePercent,\\n            _marketplaceBuyerFeePercent\\n        );\\n        marketplaceBuyerFeePercent = _marketplaceBuyerFeePercent;\\n    }\\n    \\n}\"\r\n    },\r\n    \"contracts/CardNFTV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nimport \\\"base64-sol/base64.sol\\\";\\n\\n/**\\n * @title Eternity deck card\\n *\\n * @dev Represents a card NFT in the game.\\n */\\ncontract CardNFTV1 is\\n    Initializable,\\n    ERC721Upgradeable,\\n    ERC721EnumerableUpgradeable,\\n    AccessControlUpgradeable,\\n    OwnableUpgradeable\\n{\\n    using Address for address;\\n    using Strings for uint256;\\n    using Strings for uint16;\\n    using Strings for uint8;\\n\\n    /**\\n     * @notice AccessControl role that allows to mint tokens\\n     *\\n     * @dev Used in mint(), safeMint(), mintBatch(), safeMintBatch()\\n     */\\n    bytes32 private constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n\\n    /**\\n     * @notice AccessControl role that allows to burn tokens\\n     *\\n     * @dev Used in burn(), burnBatch()\\n     */\\n    bytes32 private constant BURNER_ROLE = keccak256(\\\"BURNER_ROLE\\\");\\n\\n    /**\\n     * @notice AccessControl role that allows to change the baseURI\\n     *\\n     * @dev Used in setBaseURI()\\n     */\\n    bytes32 private constant URI_MANAGER_ROLE = keccak256(\\\"URI_MANAGER_ROLE\\\");\\n\\n    /**\\n     * @notice Stores the amount of cards that were burned in\\n     *         the duration of the game.\\n     *\\n     * @dev Is increased by 1 when a card is burned\\n     */\\n    uint256 public totalBurned;\\n\\n    /**\\n     * @dev Represents a card\\n     */\\n    struct Card {\\n        uint8 cardType;\\n        uint8 cardCollection;\\n        uint256 serialNumber;\\n        uint256 editionNumber;\\n    }\\n\\n    /**\\n     * @dev Represents a collection\\n     */\\n\\n    struct Collection {\\n        address collectionAddress; // the address of the collection\\n        uint256 collectionBuyBack;\\n        address payable partnerDaoAddress;\\n        uint256 colMinted;\\n        uint256 colBurned;\\n        uint128 totalCardValue;\\n        uint64 totalBuyBacksClaimed;\\n    }\\n\\n    /**\\n     * @notice Stores information about each card\\n     */\\n    mapping(uint256 => Card) public cardInfo;\\n\\n    /**\\n     * @notice Stores the number of cards minted for each card type\\n     *\\n     * @dev Is increased by 1 when a new card of certain type is minted\\n     *\\n     * @dev Returns 0 for values not in range [1, 53]\\n     */\\n    mapping(uint8 => uint256) public cardPopulation;\\n\\n    /**\\n     * @notice Stores the number of cards in existence on each collection\\n     *         for each card type\\n     *\\n     * @dev Is increased by 1 when a new card of certain type in a collection\\n     *      is minted\\n     *\\n     * @dev Returns 0 for values not in range [1, 53]\\n     */\\n    mapping(uint8 => mapping(uint8 => uint256)) public cardCollectionPopulation;\\n\\n    /**\\n     * @notice Stores the number of card population, burned, minted on each collection\\n     *\\n     *\\n     * @dev Is increased by 1 when a new card in a collection\\n     *      is minted or burned\\n     *\\n     * @dev Returns 0 for values not in range [1, 53]\\n     */\\n    mapping(uint8 => Collection) public cardCollectionInfo;\\n\\n    /**\\n     * @notice Stores how many cards of a type were minted\\n     *         and owned by an address\\n     *\\n     * @dev Used to efficiently store both numbers into\\n     *      one 256-bit unsigned integer using packing\\n     */\\n    struct AddressCardType {\\n        uint128 minted;\\n        uint128 owned;\\n    }\\n\\n    /**\\n     * @notice Stores how many cards of each type were minted\\n     *         and owned by an address\\n     */\\n    mapping(address => mapping(uint8 => AddressCardType))\\n        public cardTypeByAddress;\\n\\n    mapping(uint8 => string) public collectionUri;\\n    /**\\n     * @dev Fired in mint(), safeMint()\\n     *\\n     * @param by address which executed the mint\\n     * @param to address which received the mint card\\n     * @param tokenId minted card id\\n     * @param cardType type of card that was minted in range [1, 53]\\n     * @param cardCollection collection of the card that was minted\\n     * @param upgrade if card is minted by upgrade\\n     */\\n    event CardMinted(\\n        address indexed by,\\n        address indexed to,\\n        uint160 tokenId,\\n        uint8 cardType,\\n        uint8 cardCollection,\\n        bool upgrade\\n    );\\n\\n    /**\\n     * @dev Fired in burn()\\n     *\\n     * @param by address which executed the burn\\n     * @param from address whose card was burned\\n     * @param tokenId burned card id\\n     * @param cardType type of card that was burned in range [1, 53]\\n     * @param cardCollection collection of the card that was burned\\n     * @param burnType burn card type: 0 - upgrade or 1 - buyback\\n     */\\n    event CardBurned(\\n        address indexed by,\\n        address indexed from,\\n        uint160 tokenId,\\n        uint8 cardType,\\n        uint8 cardCollection,\\n        uint8 burnType\\n    );\\n\\n    /**\\n     * @dev Fired in setBaseURI()\\n     *\\n     * @param by an address which executed update\\n     * @param oldVal old _baseURI value\\n     * @param newVal new _baseURI value\\n     */\\n    event BaseURIChanged(address by, string oldVal, string newVal);\\n\\n    /**\\n     * @dev Fired in addCollection()\\n     *\\n     * @param collection the id of collection\\n     * @param collectionAddress the contract address of collection\\n     * @param collectionPartnerDaoAddress collection partner DAO address\\n     */\\n    event CollectionAdded(\\n        uint8 collection,\\n        address collectionAddress,\\n        address collectionPartnerDaoAddress\\n    );\\n\\n    /**\\n     * @notice Instantiates the contract and gives all roles\\n     *         to contract deployer\\n     */\\n    function initialize() public initializer {\\n        __ERC721_init(\\\"Eternity Deck Card\\\", \\\"EDC\\\");\\n        OwnableUpgradeable.__Ownable_init();\\n        __ERC721Enumerable_init();\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _setupRole(MINTER_ROLE, msg.sender);\\n        _setupRole(BURNER_ROLE, msg.sender);\\n        _setupRole(URI_MANAGER_ROLE, msg.sender);\\n\\n        totalBurned = 0;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(\\n        uint256 _tokenId\\n    ) public view virtual override returns (string memory) {\\n        require(\\n            _exists(_tokenId),\\n            \\\"ERC721Metadata: URI query for nonexistent token\\\"\\n        );\\n\\n        string memory name = string(\\n            abi.encodePacked(\\n                '\\\"name\\\": \\\"Eternity Deck: Collection ',\\n                cardInfo[_tokenId].cardCollection.toString(),\\n                \\\" \\\",\\n                \\\"Edition \\\",\\n                cardInfo[_tokenId].editionNumber.toString(),\\n                '\\\",'\\n            )\\n        );\\n        string\\n            memory description = '\\\"description\\\": \\\"Represents a card in the eternity deck game\\\",';\\n        string memory imageUrl = string(\\n            abi.encodePacked(\\n                '\\\"image_url\\\": \\\"',\\n                collectionUri[cardInfo[_tokenId].cardCollection],\\n                cardInfo[_tokenId].cardType.toString(),\\n                '.png\\\",'\\n            )\\n        );\\n\\n        string memory cardTypeAttribute = string(\\n            abi.encodePacked(\\n                \\\"{\\\",\\n                '\\\"trait_type\\\": \\\"Card Type\\\",',\\n                '\\\"value\\\":',\\n                cardInfo[_tokenId].cardType.toString(),\\n                \\\"},\\\"\\n            )\\n        );\\n\\n        string memory cardCollectionAttribute = string(\\n            abi.encodePacked(\\n                \\\"{\\\",\\n                '\\\"trait_type\\\": \\\"Card Collection\\\",',\\n                '\\\"value\\\":',\\n                cardInfo[_tokenId].cardCollection.toString(),\\n                \\\"},\\\"\\n            )\\n        );\\n\\n        string memory serialNumberAttribute = string(\\n            abi.encodePacked(\\n                \\\"{\\\",\\n                '\\\"trait_type\\\": \\\"Serial Number\\\",',\\n                '\\\"value\\\":',\\n                cardInfo[_tokenId].serialNumber.toString(),\\n                \\\"},\\\"\\n            )\\n        );\\n\\n        string memory editionNumberAttribute = string(\\n            abi.encodePacked(\\n                \\\"{\\\",\\n                '\\\"trait_type\\\": \\\"Edition Number\\\",',\\n                '\\\"value\\\":',\\n                cardInfo[_tokenId].editionNumber.toString(),\\n                \\\"}\\\"\\n            )\\n        );\\n\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"data:application/json;base64,\\\",\\n                    Base64.encode(\\n                        bytes(\\n                            abi.encodePacked(\\n                                \\\"{\\\",\\n                                name,\\n                                description,\\n                                imageUrl,\\n                                '\\\"attributes\\\": [',\\n                                cardTypeAttribute,\\n                                cardCollectionAttribute,\\n                                serialNumberAttribute,\\n                                editionNumberAttribute,\\n                                \\\"]\\\",\\n                                \\\"}\\\"\\n                            )\\n                        )\\n                    )\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @dev Checks whether a provided card type is\\n     *         valid (in range [1, 53])\\n     *\\n     * @param _cardType the card type to check\\n     */\\n    modifier validCardType(uint8 _cardType) {\\n        require(\\n            _cardType >= 1 && _cardType <= 53,\\n            \\\"card type must be in range [1, 53]\\\"\\n        );\\n        _;\\n    }\\n\\n    string internal theBaseURI;\\n\\n    function _baseURI() internal view virtual override returns (string memory) {\\n        return theBaseURI;\\n    }\\n\\n    /**\\n     * @notice Updates base URI used to construct ERC721Metadata.tokenURI for Collection\\n     *\\n     * @dev Access restricted by `URI_MANAGER_ROLE` AccessControl role\\n     * @param _collectionId ID of the Collection\\n     * @param _newBaseURI new Base URI\\n     */\\n    function setBaseURIForCollection(\\n        uint8 _collectionId,\\n        string calldata _newBaseURI\\n    ) external onlyRole(URI_MANAGER_ROLE) {\\n        // Update base uri of the collection\\n        collectionUri[_collectionId] = _newBaseURI;\\n    }\\n\\n    /**\\n     * @notice Checks if specified token exists\\n     *\\n     * @dev Returns whether the specified token ID has an ownership\\n     *      information associated with it\\n     *\\n     * @param _tokenId ID of the token to query existence for\\n     * @return whether the token exists (true - exists, false - doesn't exist)\\n     */\\n    function exists(uint160 _tokenId) external view returns (bool) {\\n        // Delegate to internal OpenZeppelin function\\n        return _exists(_tokenId);\\n    }\\n\\n    /**\\n     * @notice Burns token with token ID specified\\n     *\\n     * @dev Access restricted by `BURNER_ROLE` AccessControl role\\n     *\\n     * @param _to address that owns token to burn\\n     * @param _tokenId ID of the token to burn\\n     * @param _type upgrade or buyback\\n     */\\n    function burn(\\n        address _to,\\n        uint160 _tokenId,\\n        uint8 _type\\n    ) external onlyRole(BURNER_ROLE) {\\n        // Require _to be the owner of the token to be burned\\n        require(ownerOf(_tokenId) == _to, \\\"_to does not own token\\\");\\n\\n        // Get card type and collection\\n        uint8 _cardType = cardInfo[_tokenId].cardType;\\n        uint8 _cardCollection = cardInfo[_tokenId].cardCollection;\\n\\n        // Emit burned event\\n        emit CardBurned(\\n            msg.sender,\\n            _to,\\n            _tokenId,\\n            _cardType,\\n            _cardCollection,\\n            _type\\n        );\\n\\n        // Delegate to internal OpenZeppelin burn function\\n        // Calls beforeTokenTransfer() which decreases owned\\n        // card count of _to address for this card type\\n        _burn(_tokenId);\\n\\n        // Delete card information\\n        // Must be reset after call to _burn() as that function\\n        // calls _beforeTokenTransfer() which uses this information\\n        delete cardInfo[_tokenId];\\n\\n        unchecked {\\n            cardCollectionInfo[_cardCollection].colBurned += 1;\\n            // Increase amount of cards burned by 1\\n            totalBurned += 1;\\n        }\\n    }\\n\\n    /**\\n     * @notice Burns tokens starting with token ID specified\\n     *\\n     * @dev Token IDs to be burned: [_tokenId, _tokenId + n)\\n     *\\n     * @dev n must be greater or equal 1: `n > 0`\\n     *\\n     * @dev Access restricted by `BURNER_ROLE` AccessControl role\\n     *\\n     * @param _to address that owns token to burn\\n     * @param _tokenIds IDs of the tokens to burn\\n     * @param _type Type of action\\n     */\\n    function burnBatch(\\n        address _to,\\n        uint160[] calldata _tokenIds,\\n        uint8 _type\\n    ) external onlyRole(BURNER_ROLE) {\\n\\n        uint256 tokenIdsLen = _tokenIds.length;\\n        // Cannot burn 0 tokens\\n        require(tokenIdsLen != 0, \\\"cannot burn 0 tokens\\\");\\n\\n        for (uint8 i = 0; i < tokenIdsLen;) {\\n            uint160 tokenId = _tokenIds[i];\\n\\n            // Require _to be the owner of the token to be burned\\n            require(ownerOf(tokenId) == _to, \\\"_to does not own token\\\");\\n\\n            // Get card type and collection\\n            uint8 _cardType = cardInfo[tokenId].cardType;\\n            uint8 _cardCollection = cardInfo[tokenId].cardCollection;\\n\\n            // Emit burn event\\n            emit CardBurned(\\n                msg.sender,\\n                _to,\\n                tokenId,\\n                _cardType,\\n                _cardCollection,\\n                _type\\n            );\\n\\n            // Delegate to internal OpenZeppelin burn function\\n            // Calls beforeTokenTransfer() which decreases owned\\n            // card count of _to address for this card type\\n            _burn(tokenId);\\n\\n            // Delete the card\\n            // Must be reset after call to _burn() as that function\\n            // calls _beforeTokenTransfer() which uses this information\\n            delete cardInfo[tokenId];\\n\\n            unchecked {\\n                cardCollectionInfo[_cardCollection].colBurned += 1;\\n                ++i;\\n            }\\n        }\\n\\n        // Increase amount of cards burned\\n        unchecked {\\n            totalBurned += tokenIdsLen;\\n        }\\n    }\\n\\n\\n    function mintSpecCard(\\n        address _to,\\n        uint8 _cardCollection,\\n        uint160 _tokenId,\\n        uint8 _cardType,\\n        uint256 _editionNumber,\\n        uint256 _serialNumber\\n    ) public validCardType(_cardType) onlyRole(MINTER_ROLE) {\\n        require(\\n            cardCollectionInfo[_cardCollection].collectionAddress != address(0),\\n            \\\"collection  doesn't exists\\\"\\n        );\\n\\n        // Save the card info\\n        // Must be saved before call to _mint() as that function\\n        // calls _beforeTokenTransfer() which uses this information\\n        cardInfo[_tokenId] = Card({\\n            cardType: _cardType,\\n            cardCollection: _cardCollection,\\n            serialNumber: _serialNumber,\\n            editionNumber: _editionNumber\\n        });\\n\\n         _mint(_to, _tokenId);\\n\\n        // Increase the population of card type\\n        // and collection-scoped population\\n        unchecked {\\n            cardPopulation[_cardType] += 1;\\n            cardCollectionPopulation[_cardCollection][_cardType] += 1;\\n            cardCollectionInfo[_cardCollection].colMinted += 1;\\n        }\\n\\n        // Emit minted event\\n        emit CardMinted(\\n            msg.sender,\\n            _to,\\n            _tokenId,\\n            _cardType,\\n            _cardCollection,\\n            false\\n        );\\n    }\\n\\n    /**\\n     * @notice Creates new token with token ID specified\\n     *         and assigns an ownership `_to` for this token\\n     *\\n     * @dev Unsafe: doesn't execute `onERC721Received` on the receiver.\\n     *      Prefer the use of `safeMint` instead of `mint`.\\n     *\\n     * @dev Access restricted by `MINTER_ROLE` AccessControl role\\n     *\\n     * @param _to an address to mint token to\\n     * @param _tokenId ID of the token to mint\\n     * @param _cardType type of card to mint in range [1, 53]\\n     * @param _cardCollection the collection of the card to mint\\n     * @param _upgrade if mint done with upgrade\\n     */\\n\\n    function mint(\\n        address _to,\\n        uint160 _tokenId,\\n        uint8 _cardType,\\n        uint8 _cardCollection,\\n        bool _upgrade\\n    ) public validCardType(_cardType) onlyRole(MINTER_ROLE) {\\n        require(\\n            cardCollectionInfo[_cardCollection].collectionAddress != address(0),\\n            \\\"collection  doesn't exists\\\"\\n        );\\n\\n        // Save the card info\\n        // Must be saved before call to _mint() as that function\\n        // calls _beforeTokenTransfer() which uses this information\\n        cardInfo[_tokenId] = Card({\\n            cardType: _cardType,\\n            cardCollection: _cardCollection,\\n            serialNumber: cardPopulation[_cardType] + 1,\\n            editionNumber: cardCollectionPopulation[_cardCollection][_cardType] + 1\\n        });\\n\\n        // Delegate to internal OpenZeppelin function\\n        // Calls beforeTokenTransfer() which increases minted\\n        // and owned card count of _to address for this card type\\n        _mint(_to, _tokenId);\\n\\n        // Increase the population of card type\\n        // and collection-scoped population\\n        unchecked {\\n            cardPopulation[_cardType] += 1;\\n            cardCollectionPopulation[_cardCollection][_cardType] += 1;\\n            cardCollectionInfo[_cardCollection].colMinted += 1;\\n        }\\n\\n        // Emit minted event\\n        emit CardMinted(\\n            msg.sender,\\n            _to,\\n            _tokenId,\\n            _cardType,\\n            _cardCollection,\\n            _upgrade\\n        );\\n    }\\n\\n    /**\\n     * @notice Creates new tokens starting with token ID specified\\n     *         and assigns an ownership `_to` for these tokens\\n     *\\n     * @dev Token IDs to be minted: [_tokenId, _tokenId + n)\\n     *\\n     * @dev n must be greater or equal 1: `n > 0`\\n     *\\n     * @dev Unsafe: doesn't execute `onERC721Received` on the receiver.\\n     *      Prefer the use of `safeMintBatch` instead of `mintBatch`.\\n     *\\n     * @dev Access restricted by `MINTER_ROLE` AccessControl role\\n     *\\n     * @param _to an address to mint tokens to\\n     * @param _tokenId ID of the first token to mint\\n     * @param _n how many tokens to mint, sequentially increasing the _tokenId\\n     * @param _cardType type of card to mint in range [1, 53]\\n     * @param _cardCollection the collection of the card to mint\\n     */\\n    function mintBatch(\\n        address _to,\\n        uint160 _tokenId,\\n        uint128 _n,\\n        uint8 _cardType,\\n        uint8 _cardCollection\\n    ) public onlyRole(MINTER_ROLE) validCardType(_cardType) {\\n        bool _upgrade = false;\\n\\n        // Cannot mint 0 tokens\\n        require(_n > 0, \\\"_n cannot be zero\\\");\\n\\n        require(\\n            cardCollectionInfo[_cardCollection].collectionAddress != address(0),\\n            \\\"collection  doesn't exists\\\"\\n        );\\n\\n        for (uint256 i = 0; i < _n;) {\\n            // Save the card type and collection of the card\\n            // Must be saved before call to _mint() as that function\\n            // calls _beforeTokenTransfer() which uses this information\\n            cardInfo[_tokenId + i] = Card({\\n                cardType: _cardType,\\n                cardCollection: _cardCollection,\\n                serialNumber: cardPopulation[_cardType] + i + 1,\\n                editionNumber: cardCollectionPopulation[_cardCollection][ _cardType] + i + 1\\n            });\\n\\n            // Delegate to internal OpenZeppelin mint function\\n            // Calls beforeTokenTransfer() which increases minted\\n            // and owned card count of _to address for this card type\\n            _mint(_to, _tokenId + i);\\n\\n            // Emit mint event\\n            emit CardMinted(\\n                msg.sender,\\n                _to,\\n                _tokenId,\\n                _cardType,\\n                _cardCollection,\\n                _upgrade\\n            );\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        // Increase the population of card type\\n        // and collection-scoped population\\n        // by amount of cards minted\\n        unchecked {\\n            cardPopulation[_cardType] += _n;\\n            cardCollectionPopulation[_cardCollection][_cardType] += _n;\\n            cardCollectionInfo[_cardCollection].colMinted += _n;\\n        }\\n           \\n    }\\n\\n    /**\\n     * @notice Creates new token with token ID specified\\n     *         and assigns an ownership `_to` for this token\\n     *\\n     * @dev Checks if `_to` is a smart contract (code size > 0). If so, it calls\\n     *      `onERC721Received` on `_to` and throws if the return value is not\\n     *      `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`.\\n     *\\n     * @dev Access restricted by `MINTER_ROLE` AccessControl role\\n     *\\n     * @param _to an address to mint token to\\n     * @param _tokenId ID of the token to mint\\n     * @param _cardType type of card to mint in range [1, 53]\\n     * @param _cardCollection the collection of the card to mint\\n     * @param _data additional data with no specified format, sent in call to `_to`\\n     */\\n    function safeMint(\\n        address _to,\\n        uint160 _tokenId,\\n        uint8 _cardType,\\n        uint8 _cardCollection,\\n        bytes calldata _data\\n    ) external {\\n        // Delegate to internal mint function (includes AccessControl role check,\\n        // card type validation and event emission)\\n        mint(_to, _tokenId, _cardType, _cardCollection, false);\\n\\n        // If a contract, check if it can receive ERC721 tokens (safe to send)\\n        if (_to.isContract()) {\\n            // Try calling the onERC721Received function on the to address\\n            try\\n                IERC721ReceiverUpgradeable(_to).onERC721Received(\\n                    msg.sender,\\n                    address(0),\\n                    _tokenId,\\n                    _data\\n                )\\n            returns (bytes4 retval) {\\n                require(\\n                    retval ==\\n                        IERC721ReceiverUpgradeable.onERC721Received.selector,\\n                    \\\"invalid onERC721Received response\\\"\\n                );\\n                // If onERC721Received function reverts\\n            } catch (bytes memory reason) {\\n                // If there is no revert reason, assume function\\n                // does not exist and revert with appropriate reason\\n                if (reason.length == 0) {\\n                    revert(\\\"mint to non ERC721Receiver implementer\\\");\\n                    // If there is a reason, revert with the same reason\\n                } else {\\n                    // using assembly to get the reason from memory\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Creates new tokens starting with token ID specified\\n     *         and assigns an ownership `_to` for these tokens\\n     *\\n     * @dev Token IDs to be minted: [_tokenId, _tokenId + n)\\n     *\\n     * @dev n must be greater or equal 1: `n > 0`\\n     *\\n     * @dev Checks if `_to` is a smart contract (code size > 0). If so, it calls\\n     *      `onERC721Received` on `_to` and throws if the return value is not\\n     *      `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`.\\n     *\\n     * @dev Access restricted by `MINTER_ROLE` AccessControl role\\n     *\\n     * @param _to an address to mint token to\\n     * @param _tokenId ID of the token to mint\\n     * @param _n how many tokens to mint, sequentially increasing the _tokenId\\n     * @param _cardType type of card to mint in range [1, 53]\\n     * @param _cardCollection the collection of the card to mint\\n     * @param _data additional data with no specified format, sent in call to `_to`\\n     */\\n    function safeMintBatch(\\n        address _to,\\n        uint160 _tokenId,\\n        uint128 _n,\\n        uint8 _cardType,\\n        uint8 _cardCollection,\\n        bytes memory _data\\n    ) public {\\n        // Delegate to internal unsafe batch mint function (includes AccessControl role check,\\n        // card type validation and event emission)\\n        mintBatch(_to, _tokenId, _n, _cardType, _cardCollection);\\n\\n        // If a contract, check if it can receive ERC721 tokens (safe to send)\\n        if (_to.isContract()) {\\n            // For each token minted\\n            for (uint256 i = 0; i < _n;) {\\n                // Try calling the onERC721Received function on the to address\\n                try\\n                    IERC721ReceiverUpgradeable(_to).onERC721Received(\\n                        msg.sender,\\n                        address(0),\\n                        _tokenId + i,\\n                        _data\\n                    )\\n                returns (bytes4 retval) {\\n                    require(\\n                        retval ==\\n                            IERC721ReceiverUpgradeable\\n                                .onERC721Received\\n                                .selector,\\n                        \\\"invalid onERC721Received response\\\"\\n                    );\\n                    // If onERC721Received function reverts\\n                } catch (bytes memory reason) {\\n                    // If there is no revert reason, assume function\\n                    // does not exist and revert with appropriate reason\\n                    if (reason.length == 0) {\\n                        revert(\\\"mint to non ERC721Receiver implementer\\\");\\n                        // If there is a reason, revert with the same reason\\n                    } else {\\n                       // using assembly to get the reason from memory\\n                        assembly {\\n                            revert(add(32, reason), mload(reason))\\n                        }\\n                    }\\n                }\\n                unchecked {\\n                    ++i;\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Creates new tokens starting with token ID specified\\n     *         and assigns an ownership `_to` for these tokens\\n     *\\n     * @dev Token IDs to be minted: [_tokenId, _tokenId + n)\\n     *\\n     * @dev n must be greater or equal 1: `n > 0`\\n     *\\n     * @dev Checks if `_to` is a smart contract (code size > 0). If so, it calls\\n     *      `onERC721Received` on `_to` and throws if the return value is not\\n     *      `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`.\\n     *\\n     * @dev Access restricted by `MINTER_ROLE` AccessControl role\\n     *\\n     * @param _to an address to mint token to\\n     * @param _tokenId ID of the token to mint\\n     * @param _n how many tokens to mint, sequentially increasing the _tokenId\\n     * @param _cardType type of card to mint in range [1, 53]\\n     * @param _cardCollection the collection of the card to mint\\n     */\\n    function safeMintBatch(\\n        address _to,\\n        uint160 _tokenId,\\n        uint128 _n,\\n        uint8 _cardType,\\n        uint8 _cardCollection\\n    ) external {\\n        // Delegate to internal safe batch mint function (includes AccessControl role check\\n        // and card type validation)\\n        safeMintBatch(_to, _tokenId, _n, _cardType, _cardCollection, \\\"\\\");\\n    }\\n\\n    /**\\n     * @inheritdoc ERC721EnumerableUpgradeable\\n     */\\n    function supportsInterface(\\n        bytes4 _interfaceId\\n    )\\n        public\\n        view\\n        override(\\n            ERC721Upgradeable,\\n            ERC721EnumerableUpgradeable,\\n            AccessControlUpgradeable\\n        )\\n        returns (bool)\\n    {\\n        return super.supportsInterface(_interfaceId);\\n    }\\n\\n    /**\\n     * @inheritdoc ERC721EnumerableUpgradeable\\n     *\\n     * @dev Adjusts owned count for `_from` and `_to` addresses\\n     */\\n    function _beforeTokenTransfer(\\n        address _from,\\n        address _to,\\n        uint256 _tokenId,\\n        uint256 _batchSize\\n    )\\n        internal\\n        virtual\\n        override(ERC721Upgradeable, ERC721EnumerableUpgradeable)\\n    {\\n        // Delegate to inheritance chain\\n        super._beforeTokenTransfer(_from, _to, _tokenId, _batchSize);\\n\\n        // Get card type of card being transferred\\n        uint8 _cardType = cardInfo[_tokenId].cardType;\\n\\n        // Get card type by address values for to and from\\n        AddressCardType storage actFrom = cardTypeByAddress[_from][_cardType];\\n        AddressCardType storage actTo = cardTypeByAddress[_to][_cardType];\\n\\n        // Check if from address is not zero address\\n        // (when it is zero address, the token is being minted)\\n        if (_from != address(0)) {\\n            // Decrease owned card count of from address\\n            actFrom.owned--;\\n        } else {\\n            // If card is being minted, increase to minted count\\n            actTo.minted++;\\n        }\\n\\n        // Check if to address is not zero address\\n        // (when it is zero address, the token is being burned)\\n        if (_to != address(0)) {\\n            // Increase owned card count of to address\\n            actTo.owned++;\\n        }\\n    }\\n\\n    /**\\n     * @notice Gets the total cards minted by card type\\n     *\\n     * @dev External function only to be used by the front-end\\n     */\\n    function totalCardTypesMinted() external view returns (uint256[] memory) {\\n        uint256[] memory cardIds = new uint256[](54);\\n\\n        for (uint8 i = 1; i <= 53;) {\\n            cardIds[i] = cardPopulation[i];\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        return (cardIds);\\n    }\\n\\n    /**\\n     * @notice Gets the cards of an account\\n     *\\n     * @dev External function only to be used by the front-end\\n     */\\n    function cardsOfAccount()\\n        external\\n        view\\n        returns (uint256[] memory, Card[] memory)\\n    {\\n        uint256 n = balanceOf(msg.sender);\\n\\n        uint256[] memory cardIds = new uint256[](n);\\n        Card[] memory cards = new Card[](n);\\n\\n        for (uint32 i = 0; i < n;) {\\n            uint256 tokenId = tokenOfOwnerByIndex(msg.sender, i);\\n\\n            cardIds[i] = tokenId;\\n            cards[i] = cardInfo[tokenId];\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        return (cardIds, cards);\\n    }\\n\\n    /**\\n     * @notice Add new collection to cardCollectionInfo mapping\\n     *\\n     *\\n     * Emits a {DaoAddressChanged} event\\n     * Emits a {CollectionAdded} event\\n     *\\n     * @param _collection collection id\\n     * @param _collectionAddress Collection Smart contract address\\n     * @param _collectionBuyBack Collection BuyBack value\\n     * @param _collectionPartnerDaoAddress Partner Dao Address\\n     */\\n    function addCollection(\\n        uint8 _collection,\\n        address _collectionAddress,\\n        uint256 _collectionBuyBack,\\n        address payable _collectionPartnerDaoAddress\\n    ) external onlyOwner {\\n        // verify ollection address is set\\n        require(\\n            _collectionAddress != address(0),\\n            \\\"collection address is not set\\\"\\n        );\\n        if (cardCollectionInfo[_collection].collectionAddress != address(0)) {\\n            cardCollectionInfo[_collection]\\n                .collectionAddress = _collectionAddress;\\n            cardCollectionInfo[_collection]\\n                .partnerDaoAddress = _collectionPartnerDaoAddress;\\n            cardCollectionInfo[_collection]\\n                .collectionBuyBack = _collectionBuyBack;\\n            cardCollectionInfo[_collection]\\n                .totalCardValue = 0;\\n        } else {\\n            cardCollectionInfo[_collection] = Collection({\\n                collectionAddress: _collectionAddress,\\n                collectionBuyBack: _collectionBuyBack,\\n                partnerDaoAddress: _collectionPartnerDaoAddress,\\n                colMinted: 0,\\n                colBurned: 0,\\n                totalCardValue: 0,\\n                totalBuyBacksClaimed: 0\\n            });\\n        }\\n\\n        // emit collection added event\\n        emit CollectionAdded(\\n            _collection,\\n            _collectionAddress,\\n            _collectionPartnerDaoAddress\\n        );\\n    }\\n\\n    /**\\n     * @notice Increase the totalBuyBacksClaimed of collection\\n     *\\n     * @param _collection collection id\\n     */\\n    function increaseCollectionBuyBacks(\\n        uint8 _collection\\n    ) external onlyRole(MINTER_ROLE) {\\n        require(_collection > 0 &&  _collection < 200, \\\"invalid collection [0,200]\\\");\\n        cardCollectionInfo[_collection].totalBuyBacksClaimed++;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/GameTreasury.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.11;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\n\\n/**\\n * @title Eternity deck Game Treasury\\n *\\n */\\n\\ncontract GameTreasury is\\n    Initializable,\\n    AccessControlUpgradeable,\\n    OwnableUpgradeable\\n{\\n    /**\\n     * @notice AccessControl role that allows transfer amount to an address\\n     *\\n     * @dev Used in all transfer functions\\n     */\\n    bytes32 private constant TREASURER_ROLE = keccak256(\\\"TREASURER_ROLE\\\");\\n\\n    event Deposited(address indexed payee, uint256 weiAmount);\\n\\n    function initialize() public initializer {\\n        OwnableUpgradeable.__Ownable_init();\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _setupRole(TREASURER_ROLE, msg.sender);\\n    }\\n\\n    /**\\n     * @notice is called for all messages sent to current contract\\n     */\\n    fallback() external payable {}\\n\\n    /**\\n     * @notice is called for transfer funds\\n     */\\n    receive() external payable {}\\n\\n    /**\\n     * @notice Send bayback value\\n     *\\n     * @param _to address of the player\\n     * @param _amount amount of the buyback\\n     *\\n     */\\n    function buyBackPayout(\\n        address _to,\\n        uint256 _amount\\n    ) external onlyRole(TREASURER_ROLE) {\\n        require(_to != address(0), \\\"zero address not accepted\\\");\\n        require(_amount <= address(this).balance, \\\"not enough funds\\\");\\n        // Give prize to user\\n        (bool success, ) = payable(_to).call{value: _amount}(\\\"\\\");\\n        require(success, \\\"Transfer failed.\\\");\\n    }\\n\\n    /**\\n     * @notice Send upgrade cashback value\\n     *\\n     * @param _to address of the player\\n     * @param _amount amount of the cashback\\n     *\\n     */\\n    function giveUpgradeCacheBack(\\n        address _to,\\n        uint256 _amount\\n    ) external onlyRole(TREASURER_ROLE) {\\n        require(_to != address(0), \\\"zero address not accepted\\\");\\n        require(_amount <= address(this).balance, \\\"not enough funds\\\");\\n        // Give change back to user\\n        (bool success, ) = payable(_to).call{value: _amount}(\\\"\\\");\\n        require(success, \\\"Transfer failed.\\\");\\n    }\\n\\n    /**\\n     * @notice Send upgrade commission\\n     *\\n     * @param _to address\\n     * @param _amount amount of the commission\\n     *\\n     */\\n    function upgradeCommission(\\n        address _to,\\n        uint256 _amount\\n    ) external onlyRole(TREASURER_ROLE) {\\n        require(_to != address(0), \\\"zero address not accepted\\\");\\n        require(_amount <= address(this).balance, \\\"not enough funds\\\");\\n        (bool success, ) = payable(_to).call{value: _amount}(\\\"\\\");\\n        require(success, \\\"Transfer failed.\\\");\\n    }\\n\\n    /**\\n     * @notice Send mint fee\\n     *\\n     * @param _to address\\n     * @param _amount amount of the commission\\n     *\\n     */\\n    function mintFee(\\n        address _to,\\n        uint256 _amount\\n    ) external onlyRole(TREASURER_ROLE) {\\n        require(_to != address(0), \\\"zero address not accepted\\\");\\n        require(_amount <= address(this).balance, \\\"not enough funds\\\");\\n        (bool success, ) = payable(_to).call{value: _amount}(\\\"\\\");\\n        require(success, \\\"Transfer failed.\\\");\\n    }\\n\\n    /**\\n     * @notice Claim buyback commission\\n     *\\n     * @param _to address\\n     * @param _amount amount of the commission\\n     *\\n     */\\n    function claimCommission(\\n        address _to,\\n        uint256 _amount\\n    ) external onlyRole(TREASURER_ROLE) {\\n        require(_to != address(0), \\\"zero address not accepted\\\");\\n        require(_amount <= address(this).balance, \\\"not enough funds\\\");\\n        (bool success, ) = payable(_to).call{value: _amount}(\\\"\\\");\\n        require(success, \\\"Transfer failed.\\\");\\n    }\\n\\n    /**\\n     * @notice Send refund for commit\\n     *\\n     * @param _to address\\n     * @param _amount amount of the commission\\n     *\\n     */\\n    function refundCommit(\\n        address _to,\\n        uint256 _amount\\n    ) external onlyRole(TREASURER_ROLE) {\\n        require(_to != address(0), \\\"zero address not accepted\\\");\\n        require(_amount <= address(this).balance, \\\"not enough funds\\\");\\n        (bool success, ) = payable(_to).call{value: _amount}(\\\"\\\");\\n        require(success, \\\"Transfer failed.\\\");\\n    }\\n\\n    /**\\n     * @notice Send money to current contact\\n     */\\n    function liquidityDeposit() public payable {\\n        require(msg.value > 0, \\\"invalid amount\\\");\\n        emit Deposited(msg.sender, msg.value);\\n    }\\n\\n    /**\\n     * @notice Check balance of the current contract\\n     *\\n     */\\n    function balance() public view returns (uint256) {\\n        return address(this).balance;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/TreasuryReserve.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\n/**\\n * @title Eternity deck Treasury Reserve\\n *---------------------------------------------------------------------------\\n */\\n\\ncontract TreasuryReserve is AccessControl, Ownable {\\n    /**\\n     * @notice AccessControl role that allows to claim prize\\n     *\\n     * @dev Used in givePrize()\\n     */\\n    bytes32 private constant TREASURER_ROLE = keccak256(\\\"TREASURER_ROLE\\\");\\n\\n    event Deposited(address indexed payee, uint256 weiAmount);\\n\\n    /**\\n     * @dev Fired in withdraw()\\n     * @param value value being withdrawn\\n     */\\n    event Withdraw(uint256 value);\\n\\n    constructor() {\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _setupRole(TREASURER_ROLE, msg.sender);\\n    }\\n\\n    /**\\n     * @dev is used as this may run out of gas when called via `.transfer()`\\n     */\\n    fallback() external payable {}\\n\\n    /**\\n     * @dev is used as this may run out of gas when called via `.transfer()`\\n     */\\n    receive() external payable {}\\n\\n    /**\\n     * @notice Send bayback value\\n     *\\n     * @param _to address of the player\\n     * @param _amount value of the buyback\\n     *\\n     */\\n    function buyBackPayout(\\n        address _to,\\n        uint256 _amount\\n    ) external onlyRole(TREASURER_ROLE) {\\n        require(_to != address(0), \\\"zero address not accepted\\\");\\n        require(_amount <= address(this).balance, \\\"not enough funds\\\");\\n        // Give prize to user\\n        (bool success, ) = payable(_to).call{value: _amount}(\\\"\\\");\\n        require(success, \\\"Transfer failed.\\\");\\n    }\\n\\n    /**\\n     * @notice Send upgrade cashback value\\n     *\\n     * @param _to address of the player\\n     * @param _amount value of the cashback\\n     *\\n     */\\n    function giveUpgradeCacheBack(\\n        address _to,\\n        uint256 _amount\\n    ) external onlyRole(TREASURER_ROLE) {\\n        require(_to != address(0), \\\"zero address not accepted\\\");\\n        require(_amount <= address(this).balance, \\\"not enough funds\\\");\\n        // Give cacheBack to user\\n        (bool success, ) = payable(_to).call{value: _amount}(\\\"\\\");\\n        require(success, \\\"Transfer failed.\\\");\\n    }\\n\\n    /**\\n     * @notice Send upgrade commission\\n     *\\n     * @param _to address\\n     * @param _amount value of the commission\\n     *\\n     */\\n    function upgradeCommission(\\n        address _to,\\n        uint256 _amount\\n    ) external onlyRole(TREASURER_ROLE) {\\n        require(_to != address(0), \\\"zero address not accepted\\\");\\n        require(_amount <= address(this).balance, \\\"not enough funds\\\");\\n        (bool success, ) = payable(_to).call{value: _amount}(\\\"\\\");\\n        require(success, \\\"Transfer failed.\\\");\\n    }\\n\\n    /**\\n     * @notice Claim buyback commission\\n     *\\n     * @param _to address\\n     * @param _amount value of the commission\\n     *\\n     */\\n    function claimCommission(\\n        address _to,\\n        uint256 _amount\\n    ) external onlyRole(TREASURER_ROLE) {\\n        require(_to != address(0), \\\"zero address not accepted\\\");\\n        require(_amount <= address(this).balance, \\\"not enough funds\\\");\\n        (bool success, ) = payable(_to).call{value: _amount}(\\\"\\\");\\n        require(success, \\\"Transfer failed.\\\");\\n    }\\n\\n    /**\\n     * @notice Send money to current contact\\n     *\\n     */\\n    function liquidityDeposit() public payable {\\n        require(msg.value > 0, \\\"invalid amount\\\");\\n        emit Deposited(msg.sender, msg.value);\\n    }\\n\\n    /**\\n     * @notice Allows withdraw funds from the current contract\\n     *\\n     * @param _to address to withdraw funds\\n     * @param _amount amount to withdraw\\n     *\\n     */\\n    function withdraw(\\n        address _to,\\n        uint256 _amount\\n    ) external payable onlyOwner {\\n        require(_to != address(0), \\\"zero address not accepted\\\");\\n        require(_amount <= address(this).balance, \\\"not enough funds\\\");\\n        (bool success, ) = payable(_to).call{value: _amount}(\\\"\\\");\\n        require(success, \\\"can not withdraw\\\");\\n        emit Withdraw(_amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ICollection.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.11;\\n\\n/**\\n  * @notice Collection interface for getting collection fees data\\n   * Collection should have public marketplaceSellerFeePercent value\\n   * Collection should have public marketplaceBuyerFeePercent value\\n   * Collection should have public partnerMarketplaceFeePercent value\\n   *\\n   * EXAMPLE:\\n   * \\n   * uint32 public marketplaceSellerFeePercent = 5_000;\\n   * \\n   * uint32 public marketplaceBuyerFeePercent = 5_000;\\n   * \\n   * uint32 public partnerMarketplaceFeePercent = 10_000;\\n   *\\n   */\\n   \\ninterface ICollection {\\n    struct Coupon {\\n      bytes32 r;\\n      bytes32 s;\\n      uint8 v;\\n    }\\n    function marketplaceSellerFeePercent() external view returns(uint32);\\n    function marketplaceBuyerFeePercent() external view returns(uint32);\\n    function partnerMarketplaceFeePercent() external view returns(uint32);\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256, /* firstTokenId */\\n        uint256 batchSize\\n    ) internal virtual {\\n        if (batchSize > 1) {\\n            if (from != address(0)) {\\n                _balances[from] -= batchSize;\\n            }\\n            if (to != address(0)) {\\n                _balances[to] += batchSize;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[44] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721EnumerableUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721EnumerableUpgradeable is Initializable, ERC721Upgradeable, IERC721EnumerableUpgradeable {\\n    function __ERC721Enumerable_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC721Enumerable_init_unchained() internal onlyInitializing {\\n    }\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165Upgradeable, ERC721Upgradeable) returns (bool) {\\n        return interfaceId == type(IERC721EnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Upgradeable.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721EnumerableUpgradeable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, firstTokenId, batchSize);\\n\\n        if (batchSize > 1) {\\n            // Will only trigger during construction. Batch transferring (minting) is not available afterwards.\\n            revert(\\\"ERC721Enumerable: consecutive transfers not supported\\\");\\n        }\\n\\n        uint256 tokenId = firstTokenId;\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721Upgradeable.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721Upgradeable.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[46] private __gap;\\n}\\n\"\r\n    },\r\n    \"base64-sol/base64.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides functions for encoding/decoding base64\\nlibrary Base64 {\\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n    bytes  internal constant TABLE_DECODE = hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\n                                            hex\\\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\\\"\\n                                            hex\\\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\\\"\\n                                            hex\\\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\\\";\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n\\n        // load the table into memory\\n        string memory table = TABLE_ENCODE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n                // read 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n\\n        return result;\\n    }\\n\\n    function decode(string memory _data) internal pure returns (bytes memory) {\\n        bytes memory data = bytes(_data);\\n\\n        if (data.length == 0) return new bytes(0);\\n        require(data.length % 4 == 0, \\\"invalid base64 decoder input\\\");\\n\\n        // load the table into memory\\n        bytes memory table = TABLE_DECODE;\\n\\n        // every 4 characters represent 3 bytes\\n        uint256 decodedLen = (data.length / 4) * 3;\\n\\n        // add some extra buffer at the end required for the writing\\n        bytes memory result = new bytes(decodedLen + 32);\\n\\n        assembly {\\n            // padding with '='\\n            let lastBytes := mload(add(data, mload(data)))\\n            if eq(and(lastBytes, 0xFF), 0x3d) {\\n                decodedLen := sub(decodedLen, 1)\\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\\n                    decodedLen := sub(decodedLen, 1)\\n                }\\n            }\\n\\n            // set the actual output length\\n            mstore(result, decodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 4 characters at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               // read 4 characters\\n               dataPtr := add(dataPtr, 4)\\n               let input := mload(dataPtr)\\n\\n               // write 3 bytes\\n               let output := add(\\n                   add(\\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\\n                   add(\\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\\n                    )\\n                )\\n                mstore(resultPtr, shl(232, output))\\n                resultPtr := add(resultPtr, 3)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721EnumerableUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyback\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"txId\",\"type\":\"uint160\"}],\"name\":\"BountyClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collectionMintFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"partnerFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"costWithoutFees\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"collectionId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"amount\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"freeMint\",\"type\":\"bool\"}],\"name\":\"BuyCards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"_cardId\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"txId\",\"type\":\"uint160\"}],\"name\":\"CardTransfered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"mintCount\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"freeMintCount\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"collectionId\",\"type\":\"uint8\"}],\"name\":\"DepositedForFreeMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"oldValue\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"newValue\",\"type\":\"uint32\"}],\"name\":\"MarketplaceBuyerFeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"oldValue\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"newValue\",\"type\":\"uint32\"}],\"name\":\"MarketplaceSellerFeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint160[]\",\"name\":\"tokenIds\",\"type\":\"uint160[]\"},{\"indexed\":false,\"internalType\":\"uint8[]\",\"name\":\"cardTypes\",\"type\":\"uint8[]\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"collection\",\"type\":\"uint8\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"cardId\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"tokenId\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"collection\",\"type\":\"uint8\"}],\"name\":\"MintSpecCard\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"fromCollection\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"txId\",\"type\":\"uint160\"}],\"name\":\"Upgrade\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBackValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_amount\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"}],\"internalType\":\"struct ICollection.Coupon\",\"name\":\"_coupon\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"_availableAmount\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"_freeMint\",\"type\":\"bool\"}],\"name\":\"buyCards\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buybackMandatoryAces\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"card\",\"outputs\":[{\"internalType\":\"contract CardNFTV1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cardValue\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"}],\"internalType\":\"struct ICollection.Coupon\",\"name\":\"_coupon\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"_discount\",\"type\":\"uint8\"}],\"name\":\"checkDiscount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160[]\",\"name\":\"_tokenIds\",\"type\":\"uint160[]\"},{\"internalType\":\"uint256\",\"name\":\"_floorValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bonusEarned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bounty\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"_txId\",\"type\":\"uint160\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"}],\"internalType\":\"struct ICollection.Coupon\",\"name\":\"_coupon\",\"type\":\"tuple\"}],\"name\":\"claimBounty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectionId\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"commits\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"commit\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"block\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"revealed\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"amount\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"partnerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collectionMintFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"couponSigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_mintCount\",\"type\":\"uint32\"}],\"name\":\"depositForFreeMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freeMintCount\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gameTreasury\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gametreasury\",\"outputs\":[{\"internalType\":\"contract GameTreasury\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_card\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_daoAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_gameTreasury\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_treasuryReserve\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_partnerDAOAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_couponSigner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"jokersCount\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"jokersMinedCount\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketplaceBuyerFeePercent\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketplaceSellerFeePercent\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintBasePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"}],\"internalType\":\"struct ICollection.Coupon\",\"name\":\"_coupon\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"_availableAmount\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"_freeMint\",\"type\":\"bool\"}],\"name\":\"mintCardsCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collectionMintFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"partnerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"costWithoutFees\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintFeePercent\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_amount\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"}],\"internalType\":\"struct ICollection.Coupon\",\"name\":\"_coupon\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"_availableAmount\",\"type\":\"uint8\"}],\"name\":\"mintJoker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"_cardId\",\"type\":\"uint160\"},{\"internalType\":\"uint8\",\"name\":\"_cardType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_editionNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_serialNumber\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"}],\"internalType\":\"struct ICollection.Coupon\",\"name\":\"_coupon\",\"type\":\"tuple\"}],\"name\":\"mintSpecCard\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintingPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"partnerCommissionPercent\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"partnerDAOAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"partnerFeePercent\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"partnerMarketplaceFeePercent\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newBasePrice\",\"type\":\"uint256\"}],\"name\":\"setBasePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_buybackMandatoryAces\",\"type\":\"bool\"}],\"name\":\"setBuybackMandatoryAces\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newbuybackValues\",\"type\":\"uint256\"}],\"name\":\"setBuybackValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_couponSigner\",\"type\":\"address\"}],\"name\":\"setCouponSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_newfreeMintCount\",\"type\":\"uint32\"}],\"name\":\"setFreeMintCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_marketplaceBuyerFeePercent\",\"type\":\"uint32\"}],\"name\":\"setMarketplaceBuyerFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_marketplaceSellerFeePercent\",\"type\":\"uint32\"}],\"name\":\"setMarketplaceSellerFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_newCommission\",\"type\":\"uint32\"}],\"name\":\"setPartnerCommission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_newFee\",\"type\":\"uint32\"}],\"name\":\"setPartnerFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_mintingPaused\",\"type\":\"bool\"}],\"name\":\"togglePause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMintedCountForJoker\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"_cardId\",\"type\":\"uint160\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint160\",\"name\":\"_txId\",\"type\":\"uint160\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"}],\"internalType\":\"struct ICollection.Coupon\",\"name\":\"_coupon\",\"type\":\"tuple\"}],\"name\":\"transferEDCard\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryreserve\",\"outputs\":[{\"internalType\":\"contract TreasuryReserve\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160[]\",\"name\":\"_tokenIds\",\"type\":\"uint160[]\"},{\"internalType\":\"uint256\",\"name\":\"_payValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_refundValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cardsTypeValueDiffCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_upgradeFeeCostWithDiscount\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"_txId\",\"type\":\"uint160\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"}],\"internalType\":\"struct ICollection.Coupon\",\"name\":\"_coupon\",\"type\":\"tuple\"}],\"name\":\"upgradeCards\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upgradeFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "DrakonyxCollection", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}