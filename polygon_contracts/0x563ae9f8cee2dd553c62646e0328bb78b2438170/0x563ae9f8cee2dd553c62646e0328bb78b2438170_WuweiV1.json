{"SourceCode": "pragma solidity ^0.8.0;\r\n\r\n//@crzypatchwork @hicetnunc2000 GPL-3.0\r\n//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@@@@  @@@@@@@@@@@@@@@@@@@@@@@   @@@  &@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@@                    @@@@,%&&&&&&&  &&&&&&%*@@@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@.  @  @@@  @@@ /@@@ @@@@@@@@@@@@@@@  @@@@@@/ &@@@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@                        @@@@@@@@@/             @@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@@@  @@@  @@@ /@@@ @@@@@@@@@@@@  @@@@@@@@@@@  @@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@@@  @@@  @@@ /@@@ @@@@@@@@@@                   %@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@                       @@@   @@@@@@@@@/@@  @@@  @@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@@  @@@  @@@  @@@@  ,@@@@@@@@  @@@ @@@  @@/ @@  @@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@  @@@@  @@@@  @@@@@  @@@@@@  @@@@  @@% @@@@@  #@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@@@@@@@ %@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@     @@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n\r\ninterface ERC1155Interface {\r\n    \r\n    function safeTransferFrom(        \r\n        address,\r\n        address,\r\n        uint256,\r\n        uint256,\r\n        bytes calldata\r\n    ) external;\r\n\r\n    function royaltyInfo(\r\n        uint256,\r\n        uint256\r\n    ) external returns (address, uint256);\r\n\r\n    function supportsInterface(\r\n        bytes4\r\n    ) external returns (bool);\r\n            \r\n}\r\n\r\ninterface ERC20Interface {\r\n    function transfer(address, uint256) external returns (bool);\r\n    function transferFrom(address, address, uint256) external returns (bool);\r\n}\r\n\r\nstruct SwapStructV1 {\r\n    \r\n    address erc1155;\r\n    address issuer; // swap issuer as msg.sender\r\n    uint256 amount;\r\n    uint256 value;\r\n    uint256 tokenId;\r\n    bool active;\r\n    \r\n}\r\n\r\nstruct SwapStructV2 {\r\n\r\n    address erc20;\r\n    address issuer;\r\n    uint256 amount;\r\n    uint256 value;\r\n    bool active;\r\n\r\n}\r\n\r\n// https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.5.0/contracts/security/ReentrancyGuard.sol\r\n\r\ncontract ReEntrancyGuard {\r\n\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        _status = _ENTERED;\r\n        _;\r\n\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\ncontract WuweiV1 is ReEntrancyGuard {\r\n\r\n    bytes4 private constant _INTERFACE_ID_ROYALTIES_EIP2981 = 0x2a55205a;\r\n\r\n    event swapLog(address erc1155, uint256 amount, uint256 value, uint256 tokenId, uint256 op, uint256 indexed swapId);\r\n\r\n    uint256 public nonce;\r\n    uint256 public fee;\r\n    address public manager;\r\n    mapping(uint256 => SwapStructV1) public swaps;\r\n\r\n    constructor(address _manager, uint256 _fee) public { manager = _manager; fee = _fee; }\r\n    \r\n    // management\r\n    \r\n    function updateFee(uint256 _fee) public { require(msg.sender == manager); fee = _fee; }\r\n    \r\n    function updateManager(address _manager) public { require(msg.sender == manager); manager = _manager; }\r\n    \r\n    // erc1155 approval must be given\r\n    \r\n    function swap(uint256 _id, uint256 _amount, uint256 _value, address _erc1155) public nonReentrant {\r\n        \r\n        require(((_value == 0) || (_value >= 10000)) && ((_amount > 0) && (_amount <= 10000)));\r\n\r\n        nonce++;\r\n\r\n        // mapping\r\n        swaps[nonce] = SwapStructV1(_erc1155, msg.sender, _amount, _value, _id, true);\r\n\r\n        // transfer erc1155 to escrow\r\n        ERC1155Interface(_erc1155).safeTransferFrom(msg.sender, address(this), _id, _amount, '0x00');\r\n\r\n        // event\r\n        emit swapLog(_erc1155, _amount, _value, _id, 0, nonce);\r\n\r\n    }\r\n    \r\n    function cancelSwap(uint256 _swapId) public nonReentrant {\r\n        require((swaps[_swapId].issuer == msg.sender) && (swaps[_swapId].active));\r\n        \r\n        // mapping\r\n        swaps[_swapId].active = false;\r\n        uint256 _amount = swaps[_swapId].amount;\r\n\r\n        swaps[_swapId].amount = 0;\r\n        swaps[_swapId].value = 0;\r\n        \r\n        // transfer erc1155 out of escrow\r\n        ERC1155Interface(swaps[_swapId].erc1155).safeTransferFrom(address(this), msg.sender, swaps[_swapId].tokenId, _amount, '0x00');\r\n        \r\n        // event\r\n        emit swapLog(swaps[_swapId].erc1155, _amount, 0, swaps[_swapId].tokenId, 2, _swapId);\r\n    }\r\n    \r\n    function collect(uint256 _swapId, uint256 _amount) public payable nonReentrant {\r\n        \r\n        require(\r\n            (swaps[_swapId].amount > 0) && \r\n            ((msg.value == 0) || (msg.value >= 10000)) &&\r\n            (swaps[_swapId].active) &&\r\n            (msg.sender != swaps[_swapId].issuer) &&\r\n            (_amount <= swaps[_swapId].amount) &&\r\n            (msg.value == swaps[_swapId].value * _amount)\r\n            );\r\n\r\n        // storage changes/retrancy measures\r\n\r\n        swaps[_swapId].amount -= _amount;\r\n\r\n        if (swaps[_swapId].amount == 0) swaps[_swapId].active = false;\r\n\r\n        uint256 auxFee = ((fee * msg.value) / 10000);\r\n\r\n        if (msg.value != 0) {\r\n            \r\n            if (ERC1155Interface(swaps[_swapId].erc1155).supportsInterface(_INTERFACE_ID_ROYALTIES_EIP2981)) {\r\n\r\n                // EIP2981\r\n\r\n                (address creator, uint256 royalties) = ERC1155Interface(swaps[_swapId].erc1155).royaltyInfo(swaps[_swapId].tokenId, msg.value);\r\n\r\n                // royalties, management fees and market value distribution\r\n                if (fee != 0) manager.call{ value : auxFee }(\"\");    \r\n                creator.call{ value : royalties }(\"\");\r\n                swaps[_swapId].issuer.call{ value : msg.value - (royalties + auxFee) }(\"\");\r\n\r\n            } else {\r\n\r\n                if (fee != 0) manager.call{ value : auxFee }(\"\");\r\n                swaps[_swapId].issuer.call{ value : msg.value - auxFee }(\"\");\r\n\r\n            }\r\n\r\n        }\r\n        \r\n        // transfer erc1155\r\n        ERC1155Interface(swaps[_swapId].erc1155).safeTransferFrom(address(this), msg.sender, swaps[_swapId].tokenId, _amount, '0x00');\r\n        \r\n        emit swapLog(swaps[_swapId].erc1155, _amount, swaps[_swapId].value * _amount, swaps[_swapId].tokenId, 1, _swapId);\r\n\r\n    }\r\n    \r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"erc1155\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"op\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"swapId\",\"type\":\"uint256\"}],\"name\":\"swapLog\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_swapId\",\"type\":\"uint256\"}],\"name\":\"cancelSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_swapId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"collect\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_erc1155\",\"type\":\"address\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"swaps\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"erc1155\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"updateFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"updateManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "WuweiV1", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000001d30962acfe7f27b865a438915109b3a504737020000000000000000000000000000000000000000000000000000000000000064", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a3342e43e9e4b80ed345687fd7b44544763fa8a77efd2ead31dcb57e79d97e69"}