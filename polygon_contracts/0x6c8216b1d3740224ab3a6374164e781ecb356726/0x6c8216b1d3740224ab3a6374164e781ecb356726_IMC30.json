{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ncontract IMC30 {\r\n    address public owner;\r\n    uint256 public totalCapital;\r\n    uint256 public teamRewardPercentage = 5;\r\n    uint256 public companyRewardPercentage = 15;\r\n    uint256 public wholeCapitalRewardPercentage = 8;\r\n    uint256 public teamBusinessRewardPercentage = 150;\r\n    uint256 public companyTeamBusinessRewardPercentage = 200;\r\n\r\n    mapping(address => uint256) public uplinerRewards;\r\n    mapping(address => uint256) public balances;\r\n    mapping(address => address[]) public referrals; // Track up to 3 referrals for each user\r\n\r\n    struct Investment {\r\n        uint256 amount;\r\n        uint256 startDate;\r\n    }\r\n\r\n    mapping(address => Investment) public investments;\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only the contract owner can call this function\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) external onlyOwner {\r\n        owner = _newOwner;\r\n    }\r\n\r\n    function distributeRewards(uint256 sellingAmount, uint256 businessAmount) external onlyOwner {\r\n        require(block.timestamp >= investments[msg.sender].startDate + 30 days, \"30 days have not passed yet\");\r\n\r\n        uint256 teamReward = (totalCapital * teamRewardPercentage * sellingAmount) / 10000;\r\n        uint256 companyReward = (totalCapital * companyRewardPercentage * businessAmount) / 10000;\r\n        uint256 teamBusinessReward = (totalCapital * teamBusinessRewardPercentage * businessAmount) / 10000;\r\n        uint256 companyTeamBusinessReward = (totalCapital * companyTeamBusinessRewardPercentage * businessAmount) / 10000;\r\n\r\n        address[] memory teamMembers = getTeamMembers();\r\n        uint256 rewardPerMember = teamReward / teamMembers.length;\r\n        for (uint256 i = 0; i < teamMembers.length; i++) {\r\n            address member = teamMembers[i];\r\n            balances[member] += rewardPerMember;\r\n        }\r\n\r\n        address companyAddress = getCompanyAddress();\r\n        address ownerAddress = getOwnerAddress();\r\n        balances[companyAddress] += companyReward;\r\n        balances[ownerAddress] += teamBusinessReward + companyTeamBusinessReward;\r\n\r\n        totalCapital -= sellingAmount + businessAmount;\r\n    }\r\n\r\n    function getTeamMembers() internal view returns (address[] memory) {\r\n        // Implement your logic to get the team members' addresses\r\n    }\r\n\r\n    function getCompanyAddress() internal pure returns (address) {\r\n        // Implement your logic to return the company's address\r\n    }\r\n\r\n    function getOwnerAddress() internal view returns (address) {\r\n        return owner;\r\n    }\r\n\r\n    function invest(address referrer) external payable {\r\n        uint256 minInvestment = 20 ether;\r\n        uint256 maxInvestment = 200000 ether;\r\n\r\n        require(msg.value >= minInvestment, \"Minimum investment amount not met\");\r\n        require(msg.value <= maxInvestment, \"Maximum investment amount exceeded\");\r\n\r\n        uint256 adminReward = (msg.value * 10) / 100;\r\n\r\n        investments[msg.sender] = Investment({\r\n            amount: msg.value,\r\n            startDate: block.timestamp\r\n        });\r\n\r\n        balances[msg.sender] += msg.value;\r\n        totalCapital += msg.value;\r\n        uplinerRewards[owner] += adminReward;\r\n\r\n        // Record the referrer for the user\r\n        if (referrer != address(0) && referrals[referrer].length < 3) {\r\n            referrals[referrer].push(msg.sender);\r\n        }\r\n\r\n        distributeReferralRewards(msg.value, referrer);\r\n    }\r\n\r\n    function distributeReferralRewards(uint256 investmentAmount, address referrer) internal {\r\n        address currentReferrer = referrer;\r\n        uint256 level = 1;\r\n\r\n        while (currentReferrer != address(0) && level <= 10) {\r\n            uint256 rewardPercentage = getRewardPercentage(level);\r\n            uint256 referralReward = (investmentAmount * rewardPercentage) / 100;\r\n\r\n            uplinerRewards[currentReferrer] += referralReward;\r\n\r\n            // Automatically transfer the referral bonus to the referrer\r\n            payable(currentReferrer).transfer(referralReward);\r\n\r\n            level++;\r\n            currentReferrer = getUpliner(currentReferrer);\r\n        }\r\n    }\r\n\r\n    function getUpliner(address user) internal view returns (address) {\r\n        // Implement your logic to retrieve the upliner for the given user\r\n    }\r\n\r\n    function getRewardPercentage(uint256 level) internal pure returns (uint256) {\r\n        // Define the reward percentages for each level\r\n        if (level == 1) return 10;\r\n        if (level == 2) return 5;\r\n        if (level == 3) return  1;  //2.5% reward\r\n        if (level == 4) return  1;  //1.5 reward\r\n        if (level == 5) return  1;  // 0.3 reward\r\n        if (level == 6) return  1; // 0.2 reward\r\n        if (level == 7) return  1;  // 0.2 reward\r\n        if (level == 8) return  1; //0.2 reward\r\n        if (level == 9) return  1;  // 0.1 reward\r\n        if (level == 10) return 1;  //0.1 reward\r\n        return 0;\r\n    }\r\n\r\n    // Function to allow users to withdraw their balances\r\n    function withdraw() external {\r\n        address user = msg.sender;\r\n        uint256 balance = balances[user];\r\n\r\n        require(balance > 0, \"No balance to withdraw\");\r\n\r\n        // Ensure that the user's balance is not negative\r\n        require(balance <= address(this).balance, \"Insufficient contract balance\");\r\n\r\n        // Reset the user's balance\r\n        balances[user] = 0;\r\n\r\n        // Transfer the balance to the user\r\n        payable(user).transfer(balance);\r\n    }\r\n\r\n    // Function to allow the admin (contract owner) to withdraw available funds\r\n    function withdrawFunds(uint256 amount) external onlyOwner {\r\n        require(amount <= address(this).balance, \"Insufficient contract balance\");\r\n        \r\n        // Transfer the specified amount to the contract owner\r\n        payable(owner).transfer(amount);\r\n    }\r\n\r\n    function getContractBalance() external view returns (uint256) {\r\n        return address(this).balance;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"companyRewardPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"companyTeamBusinessRewardPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sellingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"businessAmount\",\"type\":\"uint256\"}],\"name\":\"distributeRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"invest\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"investments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"referrals\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamBusinessRewardPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamRewardPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCapital\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"uplinerRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wholeCapitalRewardPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "IMC30", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://9777f8cd90637495af156e4577a11ce30f58481383aa56ef6e63eca5eaa9f498"}