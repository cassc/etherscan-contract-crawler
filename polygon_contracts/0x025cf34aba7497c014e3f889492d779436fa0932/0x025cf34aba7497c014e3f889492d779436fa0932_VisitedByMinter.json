{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"lib/openzeppelin-contracts/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/proxy/utils/UUPSUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../ERC1967/ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is IERC1822Proxiable, ERC1967Upgrade {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256, /* firstTokenId */\\n        uint256 batchSize\\n    ) internal virtual {\\n        if (batchSize > 1) {\\n            if (from != address(0)) {\\n                _balances[from] -= batchSize;\\n            }\\n            if (to != address(0)) {\\n                _balances[to] += batchSize;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Base64.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Base64.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n *\\n * _Available since v4.5._\\n */\\nlibrary Base64 {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        string memory result = new string(4 * ((data.length + 2) / 3));\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Counters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/access/IAccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/beacon/IBeaconUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC721/ERC721Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is\\n    Initializable,\\n    ContextUpgradeable,\\n    ERC165Upgradeable,\\n    IERC721Upgradeable,\\n    IERC721MetadataUpgradeable\\n{\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165Upgradeable, IERC165Upgradeable)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, data) returns (\\n                bytes4 retval\\n            ) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256, /* firstTokenId */\\n        uint256 batchSize\\n    ) internal virtual {\\n        if (batchSize > 1) {\\n            if (from != address(0)) {\\n                _balances[from] -= batchSize;\\n            }\\n            if (to != address(0)) {\\n                _balances[to] += batchSize;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[44] private __gap;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC721/IERC721ReceiverUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC721/IERC721Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/CountersUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/StringsUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/math/MathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/PoVAttributeParser.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.13;\\n\\nimport { UUPSUpgradeable } from \\\"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport { Initializable } from \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\n\\nimport { RoleControl } from \\\"@src-root/lib/RoleControl.sol\\\";\\nimport { VisitedByTypes } from \\\"@src-root/lib/VisitedByTypes.sol\\\";\\n\\n// create a contract that extends the OpenZeppelin AccessControl contract\\ncontract PoVAttributeParser is Initializable, UUPSUpgradeable, RoleControl, VisitedByTypes {\\n    function initialize() public initializer {\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n    }\\n\\n    function parse(uint16 attribute) public pure returns (SpotAttribute memory) {\\n        SpotAttribute memory spotAttribute;\\n        spotAttribute.deviceType = deviceType((attribute >> 12) & 0x0f);\\n        spotAttribute.subType = subType((attribute >> 8) & 0x0f);\\n        spotAttribute.timestampType = timestampType((attribute >> 4) & 0x0f);\\n        spotAttribute.signatureType = signatureType(attribute & 0x0f);\\n        return spotAttribute;\\n    }\\n\\n    function deviceType(uint16 attribute) public pure returns (bytes16) {\\n        // Device Type\\n        bytes16[16] memory deviceTypeTable = [\\n            bytes16(\\\"NfcCard\\\"), // 0x00\\n            bytes16(\\\"Ble\\\"), // 0x01\\n            bytes16(\\\"WiFi\\\"), // 0x02\\n            bytes16(\\\"\\\"), // 0x03\\n            bytes16(\\\"\\\"), // 0x04\\n            bytes16(\\\"\\\"), // 0x05\\n            bytes16(\\\"\\\"), // 0x06\\n            bytes16(\\\"\\\"), // 0x07\\n            bytes16(\\\"\\\"), // 0x08\\n            bytes16(\\\"\\\"), // 0x09\\n            bytes16(\\\"\\\"), // 0x0a\\n            bytes16(\\\"\\\"), // 0x0b\\n            bytes16(\\\"\\\"), // 0x0c\\n            bytes16(\\\"\\\"), // 0x0d\\n            bytes16(\\\"\\\"), // 0x0e\\n            bytes16(\\\"\\\") // 0x0f\\n        ];\\n\\n        return deviceTypeTable[attribute];\\n    }\\n\\n    function subType(uint16 attribute) public pure returns (bytes16) {\\n        // subType\\n        bytes16[16] memory subTypeTable = [\\n            bytes16(\\\"\\\"), // 0x00\\n            bytes16(\\\"\\\"), // 0x01\\n            bytes16(\\\"\\\"), // 0x02\\n            bytes16(\\\"\\\"), // 0x03\\n            bytes16(\\\"\\\"), // 0x04\\n            bytes16(\\\"\\\"), // 0x05\\n            bytes16(\\\"\\\"), // 0x06\\n            bytes16(\\\"\\\"), // 0x07\\n            bytes16(\\\"\\\"), // 0x08\\n            bytes16(\\\"\\\"), // 0x09\\n            bytes16(\\\"\\\"), // 0x0a\\n            bytes16(\\\"\\\"), // 0x0b\\n            bytes16(\\\"\\\"), // 0x0c\\n            bytes16(\\\"\\\"), // 0x0d\\n            bytes16(\\\"\\\"), // 0x0e\\n            bytes16(\\\"\\\") // 0x0f\\n        ];\\n\\n        return subTypeTable[attribute];\\n    }\\n\\n    function timestampType(uint16 attribute) public pure returns (bytes16) {\\n        // timestamper\\n        bytes16[16] memory timestampTypeTable = [\\n            bytes16(\\\"User\\\"), // 0x00\\n            bytes16(\\\"GPS\\\"), // 0x01\\n            bytes16(\\\"RTC\\\"), // 0x02\\n            bytes16(\\\"\\\"), // 0x03\\n            bytes16(\\\"\\\"), // 0x04\\n            bytes16(\\\"\\\"), // 0x05\\n            bytes16(\\\"\\\"), // 0x06\\n            bytes16(\\\"\\\"), // 0x07\\n            bytes16(\\\"\\\"), // 0x08\\n            bytes16(\\\"\\\"), // 0x09\\n            bytes16(\\\"\\\"), // 0x0a\\n            bytes16(\\\"\\\"), // 0x0b\\n            bytes16(\\\"\\\"), // 0x0c\\n            bytes16(\\\"\\\"), // 0x0d\\n            bytes16(\\\"\\\"), // 0x0e\\n            bytes16(\\\"\\\") // 0x0f\\n        ];\\n\\n        return timestampTypeTable[attribute];\\n    }\\n\\n    function signatureType(uint16 attribute) public pure returns (bytes16) {\\n        // Device Type\\n        bytes16[16] memory signatureTypeTable = [\\n            bytes16(\\\"Simplify\\\"), // 0x00\\n            bytes16(\\\"Strict\\\"), // 0x01\\n            bytes16(\\\"\\\"), // 0x02\\n            bytes16(\\\"\\\"), // 0x03\\n            bytes16(\\\"\\\"), // 0x04\\n            bytes16(\\\"\\\"), // 0x05\\n            bytes16(\\\"\\\"), // 0x06\\n            bytes16(\\\"\\\"), // 0x07\\n            bytes16(\\\"\\\"), // 0x08\\n            bytes16(\\\"\\\"), // 0x09\\n            bytes16(\\\"\\\"), // 0x0a\\n            bytes16(\\\"\\\"), // 0x0b\\n            bytes16(\\\"\\\"), // 0x0c\\n            bytes16(\\\"\\\"), // 0x0d\\n            bytes16(\\\"\\\"), // 0x0e\\n            bytes16(\\\"\\\") // 0x0f\\n        ];\\n\\n        return signatureTypeTable[attribute];\\n    }\\n\\n    /**\\n     * @dev change contract admin\\n     * @notice msg.sender should be contract admin.\\n     * @param admin address, new admin address\\n     */\\n    function changeContractAdministrator(address admin) public onlyAdmin {\\n        addAdmin(admin);\\n        deleteAdmin(msg.sender);\\n    }\\n\\n    // ================================================================\\n    //  override functions\\n    // ================================================================\\n    // solhint-disable-next-line no-empty-blocks\\n    function _authorizeUpgrade(address) internal override onlyAdmin {}\\n}\\n\"\r\n    },\r\n    \"src/PoVFactoryRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.13;\\n\\nimport { UUPSUpgradeable } from \\\"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport { Counters } from \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport { Initializable } from \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\n\\nimport { VisitedBy } from \\\"@src-root/VisitedBy.sol\\\";\\nimport { VSIT } from \\\"@src-root/token/VSIT.sol\\\";\\nimport { VisitedByTypes } from \\\"@src-root/lib/VisitedByTypes.sol\\\";\\nimport { RoleControl } from \\\"@src-root/lib/RoleControl.sol\\\";\\nimport { IPoVFactory } from \\\"@src-root/lib/interface/IPoVFactory.sol\\\";\\nimport { PoV5192Factory } from \\\"@src-root/pov/ERC5192/PoV5192Factory.sol\\\";\\n\\ncontract PoVFactoryRegistry is Initializable, UUPSUpgradeable, RoleControl, VisitedByTypes {\\n    // ================================================================\\n    //  usings\\n    // ================================================================\\n    using Counters for Counters.Counter;\\n    using Address for address;\\n\\n    // ================================================================\\n    //  structs\\n    // ================================================================\\n\\n    /**\\n     * @dev Factory record\\n     * @param factory IPoVFactory\\n     * @param factory ID uint256\\n     * @param author address of spot owner\\n     * @param cost uint256 cost\\n     * @param status uint16 status\\n     * @param tag uint80 tag\\n     */\\n    struct PoVFactoryRecord {\\n        IPoVFactory factory;\\n        uint256 factoryID;\\n        address author;\\n        uint256 cost;\\n        uint16 status;\\n        uint80 tag;\\n    }\\n\\n    // total spot count\\n    Counters.Counter private _totalFactoryCount;\\n\\n    // ================================================================\\n    //  events\\n    // ================================================================\\n\\n    event Register(uint256 indexed factoryID, address indexed author);\\n\\n    event ChangeStatus(uint256 indexed factoryID, uint16 indexed status);\\n\\n    // ================================================================\\n    //  variables\\n    // ================================================================\\n    VSIT private _vsit;\\n\\n    // ================================================================\\n    //  mappings\\n    // ================================================================\\n\\n    // povFactoryID -> PoVFactoryRecord\\n    mapping(uint256 => PoVFactoryRecord) private povFactoryMapping;\\n\\n    // ================================================================\\n    //  modifiers\\n    // ================================================================\\n\\n    modifier onlyRegisteredID(uint256 povFactoryID) {\\n        require(address(0) != address(povFactoryMapping[povFactoryID].factory), \\\"not registered\\\");\\n        _;\\n    }\\n\\n    modifier isPaused(uint256 povFactoryID) {\\n        require(((povFactoryMapping[povFactoryID].status & 0x1) == 0x0), \\\"paused\\\");\\n        _;\\n    }\\n\\n    modifier onlyAuthor(uint256 povFactoryID) {\\n        // Check if the spot is owned by the sender\\n        require(msg.sender == povFactoryMapping[povFactoryID].author, \\\"only author\\\");\\n        _;\\n    }\\n\\n    // ================================================================\\n    //  initializer\\n    // ================================================================\\n    function initialize(PoV5192Factory poV5192Factory, address _vsitTokenAddress) public initializer {\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n        _vsit = VSIT(_vsitTokenAddress);\\n\\n        // initial factories\\n        _register(IPoVFactory(address(poV5192Factory)), msg.sender, 0, 0x3 /* official SBT */);\\n    }\\n\\n    // ================================================================\\n    //  User functions\\n    // ================================================================\\n    /**\\n     * @dev create new pov\\n     * @notice you can register PoV for your resolver.\\n     * @param id uint256, povFactoryID\\n     * @param povOwner pov owner address\\n     * @param resolver address, resolver address\\n     * @param poVInfo pov info\\n     * @param extraParam bytes, extra param for create new PoV\\n     * @return address, new pov address\\n     */\\n    function createNewPoV(uint256 id, address povOwner, address resolver, PoVInfo memory poVInfo, bytes calldata extraParam) external payable onlyRegisteredID(id) returns (address) {\\n        if (0 < povFactoryMapping[id].cost) {\\n            // author fee\\n            _vsit.payFee(povOwner, povFactoryMapping[id].author, povFactoryMapping[id].cost);\\n        }\\n\\n        return povFactoryMapping[id].factory.createNewPoV(povOwner, resolver, poVInfo, povFactoryMapping[id].tag, extraParam);\\n    }\\n\\n    function name(uint256 id) external view returns (string memory) {\\n        return povFactoryMapping[id].factory.name();\\n    }\\n\\n    function tag(uint256 id) external view returns (bytes16[6] memory) {\\n        return tagAsReadable(povFactoryMapping[id].tag);\\n    }\\n\\n    function tagAsReadable(uint80 _tag) public pure returns (bytes16[6] memory) {\\n        bytes16[6] memory tagsAsBytes16;\\n        uint256 saveIdx = 0;\\n\\n        // tag table\\n        bytes16[80] memory tagTbl = [\\n            bytes16(\\\"Official\\\"), // 0x00\\n            bytes16(\\\"SBT\\\"), // 0x01\\n            bytes16(\\\"NFT\\\"), // 0x02\\n            bytes16(\\\"\\\"), // 0x03\\n            bytes16(\\\"\\\"), // 0x04\\n            bytes16(\\\"\\\"), // 0x05\\n            bytes16(\\\"\\\"), // 0x06\\n            bytes16(\\\"\\\"), // 0x07\\n            bytes16(\\\"\\\"), // 0x08\\n            bytes16(\\\"\\\"), // 0x09\\n            bytes16(\\\"\\\"), // 0x0a\\n            bytes16(\\\"\\\"), // 0x0b\\n            bytes16(\\\"\\\"), // 0x0c\\n            bytes16(\\\"\\\"), // 0x0d\\n            bytes16(\\\"\\\"), // 0x0e\\n            bytes16(\\\"\\\"), // 0x0f\\n            bytes16(\\\"\\\"), // 0x10\\n            bytes16(\\\"\\\"), // 0x11\\n            bytes16(\\\"\\\"), // 0x12\\n            bytes16(\\\"\\\"), // 0x13\\n            bytes16(\\\"\\\"), // 0x14\\n            bytes16(\\\"\\\"), // 0x15\\n            bytes16(\\\"\\\"), // 0x16\\n            bytes16(\\\"\\\"), // 0x17\\n            bytes16(\\\"\\\"), // 0x18\\n            bytes16(\\\"\\\"), // 0x19\\n            bytes16(\\\"\\\"), // 0x1a\\n            bytes16(\\\"\\\"), // 0x1b\\n            bytes16(\\\"\\\"), // 0x1c\\n            bytes16(\\\"\\\"), // 0x1d\\n            bytes16(\\\"\\\"), // 0x1e\\n            bytes16(\\\"\\\"), // 0x1f\\n            bytes16(\\\"\\\"), // 0x20\\n            bytes16(\\\"\\\"), // 0x21\\n            bytes16(\\\"\\\"), // 0x22\\n            bytes16(\\\"\\\"), // 0x23\\n            bytes16(\\\"\\\"), // 0x24\\n            bytes16(\\\"\\\"), // 0x25\\n            bytes16(\\\"\\\"), // 0x26\\n            bytes16(\\\"\\\"), // 0x27\\n            bytes16(\\\"\\\"), // 0x28\\n            bytes16(\\\"\\\"), // 0x29\\n            bytes16(\\\"\\\"), // 0x2a\\n            bytes16(\\\"\\\"), // 0x2b\\n            bytes16(\\\"\\\"), // 0x2c\\n            bytes16(\\\"\\\"), // 0x2d\\n            bytes16(\\\"\\\"), // 0x2e\\n            bytes16(\\\"\\\"), // 0x2f\\n            bytes16(\\\"\\\"), // 0x30\\n            bytes16(\\\"\\\"), // 0x31\\n            bytes16(\\\"\\\"), // 0x32\\n            bytes16(\\\"\\\"), // 0x33\\n            bytes16(\\\"\\\"), // 0x34\\n            bytes16(\\\"\\\"), // 0x35\\n            bytes16(\\\"\\\"), // 0x36\\n            bytes16(\\\"\\\"), // 0x37\\n            bytes16(\\\"\\\"), // 0x38\\n            bytes16(\\\"\\\"), // 0x39\\n            bytes16(\\\"\\\"), // 0x3a\\n            bytes16(\\\"\\\"), // 0x3b\\n            bytes16(\\\"\\\"), // 0x3c\\n            bytes16(\\\"\\\"), // 0x3d\\n            bytes16(\\\"\\\"), // 0x3e\\n            bytes16(\\\"\\\"), // 0x3f\\n            bytes16(\\\"\\\"), // 0x40\\n            bytes16(\\\"\\\"), // 0x41\\n            bytes16(\\\"\\\"), // 0x42\\n            bytes16(\\\"\\\"), // 0x43\\n            bytes16(\\\"\\\"), // 0x44\\n            bytes16(\\\"\\\"), // 0x45\\n            bytes16(\\\"\\\"), // 0x46\\n            bytes16(\\\"\\\"), // 0x47\\n            bytes16(\\\"\\\"), // 0x48\\n            bytes16(\\\"\\\"), // 0x49\\n            bytes16(\\\"\\\"), // 0x4a\\n            bytes16(\\\"\\\"), // 0x4b\\n            bytes16(\\\"\\\"), // 0x4c\\n            bytes16(\\\"\\\"), // 0x4d\\n            bytes16(\\\"\\\"), // 0x4e\\n            bytes16(\\\"\\\") // 0x4f\\n        ];\\n\\n        for (uint256 i = 0; i < tagTbl.length; i++) {\\n            if (bytes16(\\\"\\\") == tagTbl[i]) {\\n                break;\\n            }\\n            if (0 != (_tag & (1 << i))) {\\n                tagsAsBytes16[saveIdx] = tagTbl[i];\\n                saveIdx++;\\n                if (6 <= saveIdx) {\\n                    break;\\n                }\\n            }\\n        }\\n        return tagsAsBytes16;\\n    }\\n\\n    function statusAsReadable(uint16 status) public pure returns (bytes16[] memory) {\\n        bytes16[] memory tagsAsBytes16;\\n        uint256 saveIdx = 0;\\n\\n        // status\\n        bytes16[16] memory statusTbl = [\\n            bytes16(\\\"paused\\\"), // 0x00\\n            bytes16(\\\"verified\\\"), // 0x01\\n            bytes16(\\\"\\\"), // 0x02\\n            bytes16(\\\"\\\"), // 0x03\\n            bytes16(\\\"\\\"), // 0x04\\n            bytes16(\\\"\\\"), // 0x05\\n            bytes16(\\\"\\\"), // 0x06\\n            bytes16(\\\"\\\"), // 0x07\\n            bytes16(\\\"\\\"), // 0x08\\n            bytes16(\\\"\\\"), // 0x09\\n            bytes16(\\\"\\\"), // 0x0a\\n            bytes16(\\\"\\\"), // 0x0b\\n            bytes16(\\\"\\\"), // 0x0c\\n            bytes16(\\\"\\\"), // 0x0d\\n            bytes16(\\\"\\\"), // 0x0e\\n            bytes16(\\\"\\\") // 0x0f\\n        ];\\n\\n        for (uint256 i = 0; i < statusTbl.length; i++) {\\n            if (bytes16(\\\"\\\") == statusTbl[i]) {\\n                break;\\n            }\\n            if (0 != (status & (1 << i))) {\\n                tagsAsBytes16[saveIdx] = statusTbl[i];\\n                saveIdx++;\\n            }\\n        }\\n        return tagsAsBytes16;\\n    }\\n\\n    /**\\n     * @dev total Factory count\\n     * @return uint256, total Factory count\\n     */\\n    function total() public view returns (uint256) {\\n        return _totalFactoryCount.current();\\n    }\\n\\n    /**\\n     * @dev get PoVFactory record\\n     * @notice return is 0x0 if spot is not registered.\\n     * @param id uint256, povFactoryID\\n     * @return PoVFactoryRecord, spot info\\n     */\\n    function getPoVFactoryRecord(uint256 id) public view returns (PoVFactoryRecord memory) {\\n        return povFactoryMapping[id];\\n    }\\n\\n    /**\\n     * @dev get spot pause/unpaused status\\n     * @notice return is false if spot is not registered.\\n     * @param id uint256, povFactoryID\\n     */\\n    function paused(uint256 id) public view returns (bool) {\\n        return (povFactoryMapping[id].status & 0x1) == 0x1;\\n    }\\n\\n    /**\\n     * @dev get spot valid status\\n     * @notice return is false if spot is not registered.\\n     * @param id uint256, povFactoryID\\n     */\\n    function isRegistered(uint256 id) public view returns (bool) {\\n        return address(0) != address(povFactoryMapping[id].factory);\\n    }\\n\\n    /*\\n     * @dev get spot author\\n     * @param id uint256, povFactoryID\\n     * @return address, author\\n     */\\n    function costOf(uint256 id) public view returns (uint256) {\\n        if (false == isRegistered(id)) revert(\\\"not registered\\\");\\n        return povFactoryMapping[id].cost;\\n    }\\n\\n    // ================================================================\\n    //  Owner functions\\n    // ================================================================\\n    /**\\n     * @dev Register new factory to registry\\n     * @notice msg.sender should be contract owner.\\n     * @param factory IPoVFactory, factory\\n     * @param author address, author who created povFactory\\n     * @param cost uint256, cost as wei\\n     * @param factoryTag uint80, factoryTag\\n     * @return uint256, factoryID\\n     */\\n    function register(IPoVFactory factory, address author, uint256 cost, uint80 factoryTag) public onlyAdmin returns (uint256) {\\n        if (10 ether < cost) revert(\\\"cost is too high\\\");\\n        return _register(factory, author, cost, factoryTag);\\n    }\\n\\n    /**\\n     * @dev pause factory\\n     * @notice msg.sender should be contract owner.\\n     * @param id uint256, povFactoryID\\n     */\\n    function pause(uint256 id) public onlyRegisteredID(id) onlyAdmin {\\n        povFactoryMapping[id].status = povFactoryMapping[id].status | 0x1;\\n\\n        emit ChangeStatus(povFactoryMapping[id].factoryID, povFactoryMapping[id].status);\\n    }\\n\\n    /**\\n     * @dev unpause factory\\n     * @notice msg.sender should be contract owner.\\n     * @param id uint256, povFactoryID\\n     */\\n    function unpause(uint256 id) public onlyRegisteredID(id) onlyAdmin {\\n        povFactoryMapping[id].status = povFactoryMapping[id].status & 0xFFFE;\\n\\n        emit ChangeStatus(povFactoryMapping[id].factoryID, povFactoryMapping[id].status);\\n    }\\n\\n    /**\\n     * @dev change contract admin\\n     * @notice msg.sender should be contract admin.\\n     * @param admin address, new admin address\\n     */\\n    function changeContractAdministrator(address admin) public onlyAdmin {\\n        addAdmin(admin);\\n        deleteAdmin(msg.sender);\\n\\n        emit ChangeContractOwner(msg.sender, admin);\\n    }\\n\\n    // ================================================================\\n    //  override functions\\n    // ================================================================\\n    // solhint-disable-next-line no-empty-blocks\\n    function _authorizeUpgrade(address) internal override onlyAdmin {}\\n\\n    // ================================================================\\n    //  internal functions\\n    // ================================================================\\n    /**\\n     * @dev Register new factory to registry\\n     * @notice msg.sender should be contract owner.\\n     * @param factory IPoVFactory, factory\\n     * @param author address, author who created povFactory\\n     * @param factoryTag uint80, factoryTag\\n     * @return uint256, factoryID\\n     */\\n    function _register(IPoVFactory factory, address author, uint256 cost, uint80 factoryTag) internal returns (uint256) {\\n        uint256 factoryID = _totalFactoryCount.current();\\n        _totalFactoryCount.increment();\\n\\n        povFactoryMapping[factoryID] = PoVFactoryRecord({ factory: factory, factoryID: factoryID, author: author, cost: cost, status: 0x00, tag: factoryTag });\\n\\n        emit Register(factoryID, author);\\n        return factoryID;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/SpotRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.13;\\n\\nimport { Base64 } from \\\"@openzeppelin/contracts/utils/Base64.sol\\\";\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport { ERC5192Upgradeable, ERC721Upgradeable } from \\\"./lib/ERC5192Upgradeable.sol\\\";\\nimport { IERC721ReceiverUpgradeable } from \\\"@openzeppelin-contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\\\";\\nimport { UUPSUpgradeable } from \\\"@openzeppelin-contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport { RoleControlUpgradeable, AccessControlUpgradeable } from \\\"@src-root/lib/RoleControlUpgradeable.sol\\\";\\nimport { CountersUpgradeable } from \\\"@openzeppelin-contracts-upgradeable/utils/CountersUpgradeable.sol\\\";\\n\\nimport { VisitedBy } from \\\"@src-root/VisitedBy.sol\\\";\\nimport { PoVFactoryRegistry } from \\\"@src-root/PoVFactoryRegistry.sol\\\";\\nimport { SpotResolverFactory } from \\\"@src-root/SpotResolverFactory.sol\\\";\\nimport { PoVAttributeParser } from \\\"@src-root/PoVAttributeParser.sol\\\";\\nimport { SpotResolver } from \\\"@src-root/SpotResolver.sol\\\";\\nimport { SpotResolverFactory } from \\\"@src-root/SpotResolverFactory.sol\\\";\\nimport { VisitedByTypes } from \\\"@src-root/lib/VisitedByTypes.sol\\\";\\n\\ncontract SpotRegistry is\\n    RoleControlUpgradeable,\\n    ERC5192Upgradeable,\\n    IERC721ReceiverUpgradeable,\\n    UUPSUpgradeable,\\n    VisitedByTypes\\n{\\n    // ================================================================\\n    //  usings\\n    // ================================================================\\n    using CountersUpgradeable for CountersUpgradeable.Counter;\\n    using Address for address;\\n\\n    // ================================================================\\n    //  structs\\n    // ================================================================\\n\\n    /**\\n     * @dev Spot record\\n     * @param resolver address of resolver\\n     * @param spotOwner address of spot owner\\n     * @param isPaused is paused\\n     */\\n    struct SpotRecord {\\n        address resolver;\\n        address spotOwner;\\n        bool isPaused;\\n    }\\n\\n    // total spot count\\n    CountersUpgradeable.Counter private _totalSpotCount;\\n\\n    // ================================================================\\n    //  events\\n    // ================================================================\\n\\n    event Pause(address indexed spotAddress, bool indexed paused);\\n\\n    event ChangeSpotOwner(address indexed oldOwner, address indexed newOwner);\\n\\n    // ================================================================\\n    //  variables\\n    // ================================================================\\n    VisitedBy private _visitedBy;\\n    PoVFactoryRegistry private _poVFactoryRegistry;\\n    SpotResolverFactory private _spotResolverFactory;\\n    PoVAttributeParser private _poVAttributeParser;\\n\\n    // ================================================================\\n    //  mappings\\n    // ================================================================\\n\\n    // spot address -> SpotRecord\\n    mapping(address => SpotRecord) private spotMapping;\\n\\n    // resolver address -> is registered\\n    mapping(address => bool) private resolversMapping;\\n\\n    // ================================================================\\n    //  modifiers\\n    // ================================================================\\n\\n    modifier isRegstered(address spotAddress) {\\n        require(address(0) != spotMapping[spotAddress].resolver, \\\"spot is not registerd.\\\");\\n        _;\\n    }\\n\\n    modifier isNotRegstered(address spotAddress) {\\n        require(address(0) == spotMapping[spotAddress].resolver, \\\"spot is already registerd.\\\");\\n\\n        _;\\n    }\\n\\n    modifier onlySpotOwner(address spotAddress) {\\n        SpotRecord memory _spotInfo = spotMapping[spotAddress];\\n\\n        // Check if the spot is owned by the sender\\n        require(msg.sender == _spotInfo.spotOwner, \\\"sender is not the spot owner.\\\");\\n        _;\\n    }\\n    modifier onlyVisitedBy() {\\n        require(msg.sender == address(_visitedBy), \\\"only visitedBy\\\");\\n        _;\\n    }\\n\\n    // ================================================================\\n    //  initializer\\n    // ================================================================\\n    function initialize(\\n        VisitedBy visitedBy,\\n        PoVFactoryRegistry poVFactoryRegistry,\\n        PoVAttributeParser poVAttributeParser,\\n        SpotResolverFactory spotResolverFactory\\n    ) public initializer {\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n        ERC721Upgradeable.__ERC721_init(\\\"CommunSPot\\\", \\\"CSP\\\");\\n        _visitedBy = visitedBy;\\n        _poVFactoryRegistry = poVFactoryRegistry;\\n        _poVAttributeParser = poVAttributeParser;\\n        _spotResolverFactory = spotResolverFactory;\\n    }\\n\\n    // ================================================================\\n    //  User functions\\n    // ================================================================\\n    /**\\n     * @dev total spot count\\n     * @return uint256, total spot count\\n     */\\n    function totalSpot() public view returns (uint256) {\\n        return _totalSpotCount.current();\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n        address spotAddress = tokenIdToSpotAddress(tokenId);\\n\\n        SpotRecord memory spotRecord = spotMapping[spotAddress];\\n        SpotResolver spotResolver = SpotResolver(spotRecord.resolver);\\n\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"data:application/json;base64,\\\",\\n                    Base64.encode(abi.encodePacked(spotResolver.contractURI()))\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @dev get resolver address\\n     * @notice return is 0x0 if spot is not registered.\\n     * @param spotAddress address, spot address provided by spot device\\n     * @return address, resolver address\\n     */\\n    function getResolver(address spotAddress) public view returns (address) {\\n        return spotMapping[spotAddress].resolver;\\n    }\\n\\n    /**\\n     * @dev is spot owner address\\n     * @notice return is 0x0 if spot is not registered.\\n     * @param spotAddress address, spot address provided by spot device\\n     * @param owner address, owner address\\n     * @return bool, is owner\\n     */\\n    function isSpotOwner(address spotAddress, address owner) public view returns (bool) {\\n        return spotMapping[spotAddress].spotOwner == owner;\\n    }\\n\\n    /**\\n     * @dev resolver is registered or not\\n     * @param resolverAddress address, resolver address\\n     * @return bool, is registered\\n     */\\n    function isResolver(address resolverAddress) public view returns (bool) {\\n        return resolversMapping[resolverAddress];\\n    }\\n\\n    /**\\n     * @dev get spot pause/unpaused status\\n     * @notice return is false if spot is not registered.\\n     * @param spotAddress address, spot address provided by spot device\\n     */\\n    function isPaused(address spotAddress) public view returns (bool) {\\n        return spotMapping[spotAddress].isPaused;\\n    }\\n\\n    // ================================================================\\n    //  VisitedBy functions\\n    // ================================================================\\n    /**\\n     * @dev Register new spot to registry\\n     * @notice msg.sender should be contract owner.\\n     * @param spotOwner address, spot owner address( who is the owner of spot device )\\n     * @param spotAddress address, spot address provided by spot device\\n     * @param spotInfo SpotInfo, spot info\\n     */\\n    function register(\\n        address spotOwner,\\n        address spotAddress,\\n        SpotInfo memory spotInfo\\n    ) public isNotRegstered(spotAddress) onlyVisitedBy returns (address) {\\n        address _spotOwner = spotOwner;\\n        if (_spotOwner == address(0)) {\\n            _spotOwner = msg.sender;\\n        }\\n\\n        address spotResolverAddress = _spotResolverFactory.createNewSpotResolver(\\n            msg.sender,\\n            _spotOwner,\\n            spotAddress,\\n            spotInfo\\n        );\\n        SpotResolver spotResolver = SpotResolver(spotResolverAddress);\\n\\n        _register(_spotOwner, spotAddress, spotResolverAddress);\\n\\n        return spotResolverAddress;\\n    }\\n\\n    /**\\n     * @dev Register new spot to registry for Custom Resolver\\n     * @notice msg.sender should be contract owner.\\n     * @param spotOwner address, spot owner address( who is the owner of spot device )\\n     * @param spotAddress address, spot address provided by spot device\\n     * @param spotResolver address, spot resolver address\\n     */\\n    function register(\\n        address spotOwner,\\n        address spotAddress,\\n        address spotResolver\\n    ) public isNotRegstered(spotAddress) onlyVisitedBy {\\n        if (Address.isContract(spotResolver) == false) revert(\\\"Invalid address\\\");\\n        address _spotOwner = spotOwner;\\n        if (_spotOwner == address(0)) {\\n            _spotOwner = msg.sender;\\n        }\\n        _register(_spotOwner, spotAddress, spotResolver);\\n    }\\n\\n    // ================================================================\\n    //  Owner functions\\n    // ================================================================\\n    /**\\n     * @dev pause spot\\n     * @notice msg.sender should be contract owner.\\n     * @param spotAddress address, spot address provided by spot device\\n     */\\n    function pauseMint(address spotAddress) public isRegstered(spotAddress) onlyAdmin {\\n        spotMapping[spotAddress].isPaused = true;\\n\\n        emit Pause(spotAddress, true);\\n    }\\n\\n    /**\\n     * @dev unpause spot\\n     * @notice msg.sender should be contract owner.\\n     * @param spotAddress address, spot address provided by spot device\\n     */\\n    function unpauseMint(address spotAddress) public isRegstered(spotAddress) onlyAdmin {\\n        spotMapping[spotAddress].isPaused = false;\\n\\n        emit Pause(spotAddress, false);\\n    }\\n\\n    /**\\n     * @dev change spot owner\\n     * @notice msg.sender should be contract owner.\\n     * @param spotAddress address, spot address provided by spot device\\n     * @param newSpotOwner address, new spot owner address\\n     */\\n    function changeSpotOwner(address spotAddress, address newSpotOwner) public onlyAdmin {\\n        address _oldOwner = spotMapping[spotAddress].spotOwner;\\n        spotMapping[spotAddress].spotOwner = newSpotOwner;\\n\\n        super._transfer(_oldOwner, newSpotOwner, spotAddressToTokenId(spotAddress));\\n\\n        emit ChangeSpotOwner(_oldOwner, newSpotOwner);\\n    }\\n\\n    /**\\n     * @dev change contract admin\\n     * @notice msg.sender should be contract admin.\\n     * @param admin address, new admin address\\n     */\\n    function changeContractAdministrator(address admin) public onlyAdmin {\\n        addAdmin(admin);\\n        deleteAdmin(msg.sender);\\n\\n        emit ChangeContractOwner(msg.sender, admin);\\n    }\\n\\n    // ================================================================\\n    //  override functions\\n    // ================================================================\\n    // solhint-disable-next-line no-empty-blocks\\n    function _authorizeUpgrade(address) internal override onlyAdmin {}\\n\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(ERC5192Upgradeable, AccessControlUpgradeable) returns (bool) {\\n        return\\n            super.supportsInterface(interfaceId) ||\\n            interfaceId == type(IERC721ReceiverUpgradeable).interfaceId;\\n    }\\n\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes calldata\\n    ) external pure returns (bytes4) {\\n        return IERC721ReceiverUpgradeable.onERC721Received.selector;\\n    }\\n\\n    // ================================================================\\n    //  internal functions\\n    // ================================================================\\n    /**\\n     * @dev Register new spot to registry\\n     * @notice msg.sender should be contract owner.\\n     * @param spotOwner address, spot owner address( who is the owner of spot device )\\n     * @param spotAddress address, spot address provided by spot device\\n     * @param resolverAddress address, resolver address\\n     */\\n    function _register(address spotOwner, address spotAddress, address resolverAddress) internal {\\n        uint256 tokenId = spotAddressToTokenId(spotAddress);\\n        super._mint(spotOwner, tokenId);\\n        spotMapping[spotAddress] = SpotRecord({\\n            resolver: resolverAddress,\\n            spotOwner: spotOwner,\\n            isPaused: false\\n        });\\n        resolversMapping[resolverAddress] = true;\\n        _totalSpotCount.increment();\\n    }\\n\\n    /**\\n     * @dev Unregister spot from registry\\n     * @notice msg.sender should be contract owner.\\n     * @param spotAddress address, spot address provided by spot device\\n     */\\n    function _unregister(address spotAddress) internal {\\n        uint256 tokenId = spotAddressToTokenId(spotAddress);\\n        super._burn(tokenId);\\n        SpotRecord memory spotRecord = spotMapping[spotAddress];\\n        resolversMapping[spotRecord.resolver] = false;\\n        _totalSpotCount.decrement();\\n    }\\n\\n    /**\\n     * @dev convert spot address to token id\\n     * @param spotAddress address, spot address provided by spot device\\n     * @return uint256, token id\\n     */\\n    function spotAddressToTokenId(address spotAddress) public pure returns (uint256) {\\n        return uint256(uint160(spotAddress));\\n    }\\n\\n    /**\\n     * @dev convert token id to spot address\\n     * @param tokenId uint256, token id\\n     * @return address, spot address\\n     */\\n    function tokenIdToSpotAddress(uint256 tokenId) public pure returns (address) {\\n        return address(uint160(tokenId));\\n    }\\n}\\n\"\r\n    },\r\n    \"src/SpotResolver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.13;\\n\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport { Counters } from \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport { Strings } from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport { Base64 } from \\\"@openzeppelin/contracts/utils/Base64.sol\\\";\\n\\nimport { VisitedByTypes } from \\\"@src-root/lib/VisitedByTypes.sol\\\";\\nimport { PoV } from \\\"@src-root/lib/PoV.sol\\\";\\nimport { PoVFactoryRegistry } from \\\"@src-root/PoVFactoryRegistry.sol\\\";\\nimport { VisitedBy } from \\\"@src-root/VisitedBy.sol\\\";\\nimport { RoleControl } from \\\"@src-root/lib/RoleControl.sol\\\";\\nimport { PoVAttributeParser } from \\\"@src-root/PoVAttributeParser.sol\\\";\\n\\ncontract SpotResolver is RoleControl, VisitedByTypes {\\n    // ================================================================\\n    //  usings\\n    // ================================================================\\n    using Counters for Counters.Counter;\\n    using Strings for uint256;\\n    using Address for address;\\n\\n    // ================================================================\\n    //  events\\n    // ================================================================\\n\\n    event Pause(uint256 indexed povId, bool status);\\n\\n    event MetadataUpdate(uint256 _tokenId);\\n\\n    event ChangeExperience(address indexed visitor, uint256 experience);\\n\\n    // ================================================================\\n    //  variables\\n    // ================================================================\\n\\n    /// spot address\\n    address private _spotAddress;\\n\\n    // Contract address\\n    // To restrict minting function to this address\\n    address private _spotOwner;\\n\\n    // Contract address\\n    // To restrict minting function to this address\\n    VisitedBy private _visitedBy;\\n\\n    /// count of pov\\n    Counters.Counter private _povCount;\\n\\n    /// latitude and longitude precision\\n    int64 public constant POSITION_PRECISION = 100000000;\\n\\n    /// invalid latitude and longitude\\n    int64 public constant INVALID_POSITION = 100000000000;\\n\\n    SpotInfo private _spotInfo;\\n\\n    PoVFactoryRegistry private _poVFactoryRegistry;\\n\\n    PoVAttributeParser private _poVAttributeParser;\\n\\n    bytes32 public constant SPOT_FORWARDER_ROLE = keccak256(\\\"SPOT_FORWARDER_ROLE\\\");\\n\\n    // ================================================================\\n    //  mappings\\n    // ================================================================\\n\\n    /// pov mapping\\n    mapping(uint16 => address) private _povAddressOf;\\n\\n    /// paused mapping\\n    mapping(uint16 => bool) private _pausedStatusOf;\\n\\n    // visitor address to experience of spot\\n    mapping(address => uint256) private _spotExperienceOf;\\n\\n    // ================================================================\\n    //  modifiers\\n    // ================================================================\\n    modifier onlyAdminOrSpotOwner() {\\n        require(_spotOwner == msg.sender || isAdmin(msg.sender), \\\"SpotResolver: only admin or spot owner\\\");\\n        _;\\n    }\\n\\n    modifier onlySpotOwner() {\\n        require(_spotOwner == msg.sender, \\\"SpotResolver: only spot owner\\\");\\n        _;\\n    }\\n\\n    modifier onlyVisitedByContract() {\\n        require(address(_visitedBy) == msg.sender, \\\"SpotResolver: only visitedBy\\\");\\n        _;\\n    }\\n\\n    // ================================================================\\n    //  constructors\\n    // ================================================================\\n\\n    /**\\n     * @dev constructor\\n     * @notice create special PoV contract for each spot\\n     * @param admin address,  address of admin\\n     * @param spotOwner address,  address of spot owner\\n     * @param spotAddress address,  address of spot\\n     * @param visitedBy address,  address of visitedBy contract\\n     * @param poVFactoryRegistry address,  address of PoVFactoryRegistry contract\\n     * @param poVAttributeParser address,  address of PoVAttributeParser contract\\n     * @param spotInfo SpotInfo,  spot info\\n     */\\n    constructor(address admin, address spotOwner, address spotAddress, VisitedBy visitedBy, PoVFactoryRegistry poVFactoryRegistry, PoVAttributeParser poVAttributeParser, SpotInfo memory spotInfo) {\\n        _setupRole(DEFAULT_ADMIN_ROLE, admin);\\n        _spotOwner = spotOwner;\\n        _spotAddress = spotAddress;\\n        _visitedBy = visitedBy;\\n        _poVFactoryRegistry = poVFactoryRegistry;\\n        _poVAttributeParser = poVAttributeParser;\\n\\n        _spotInfo = spotInfo;\\n\\n        address _povAddress = _poVFactoryRegistry.createNewPoV(\\n            0,\\n            _spotOwner,\\n            address(this),\\n            PoVInfo({\\n                name: \\\"\\\",\\n                description: \\\"\\\",\\n                imageUrl: \\\"\\\",\\n                website: \\\"\\\",\\n                provider: spotInfo.provider,\\n                latitude: INVALID_POSITION,\\n                longitude: INVALID_POSITION,\\n                start: 0,\\n                end: 0,\\n                baseURI: \\\"\\\",\\n                tag1: \\\"\\\",\\n                tag2: \\\"\\\",\\n                tag3: \\\"\\\"\\n            }),\\n            \\\"\\\"\\n        );\\n        if (address(0) == _povAddress) revert(\\\"failure create PoV contract\\\");\\n\\n        _addCustomPoV(_povAddress);\\n    }\\n\\n    // ================================================================\\n    //  User functions\\n    // ================================================================\\n    /**\\n     * @dev get PoV address\\n     * @notice return is 0x0 if PoV is not added.\\n     * @param attribute uint16, PoV attribute\\n     * @return SpotAttribute memory, spot attribute\\n     */\\n    function parsePoVAttribute(uint16 attribute) public view returns (SpotAttribute memory) {\\n        return _poVAttributeParser.parse(attribute);\\n    }\\n\\n    /**\\n     * @dev get PoV address\\n     * @notice return is 0x0 if PoV is not added.\\n     * @param povId uint16, PoV id\\n     * @return address, PoV address\\n     */\\n    function getPovAddress(uint16 povId) public view returns (address) {\\n        return _povAddressOf[povId];\\n    }\\n\\n    /**\\n     * @dev get experience of spot\\n     * @notice return is 0x0 if PoV is not added.\\n     * @param visitor address, caller of this function\\n     * @return uint256, spot experience\\n     */\\n    function spotExperienceOf(address visitor) public view returns (uint256) {\\n        return _spotExperienceOf[visitor];\\n    }\\n\\n    /**\\n     * @dev Returns Total PoVs\\n     * @return PoV Count uint16, total PoV count\\n     */\\n    function getTotalPoV() public view returns (uint16) {\\n        return uint16(_povCount.current());\\n    }\\n\\n    /**\\n     * @dev Returns spot owner address\\n     * @return spotOwner address, spot owner address\\n     */\\n    function spotOwnerOf() public view returns (address) {\\n        return _spotOwner;\\n    }\\n\\n    /**\\n     * @dev Returns spot address\\n     * @return spotAddress address, spot address\\n     */\\n    function spotAddressOf() public view returns (address) {\\n        return _spotAddress;\\n    }\\n\\n    /**\\n     * @dev Returns the spot metadata\\n     * @return metadata string, metadata of spot\\n     */\\n    function contractURI() public view returns (string memory) {\\n        bytes memory spotMetadata1 = abi.encodePacked(\\n            '{\\\"name\\\":\\\"',\\n            string(abi.encodePacked(_spotInfo.name)),\\n            '\\\",',\\n            '\\\"description\\\":\\\"',\\n            string(abi.encodePacked(_spotInfo.description)),\\n            '\\\",',\\n            '\\\"image\\\":\\\"',\\n            string(abi.encodePacked(_spotInfo.imageUrl)),\\n            '\\\",'\\n        );\\n        bytes memory spotMetadata2 = abi.encodePacked(\\n            '\\\"external_link\\\":\\\"',\\n            string(abi.encodePacked(_spotInfo.website)),\\n            '\\\",',\\n            '\\\"provider\\\":\\\"',\\n            string(abi.encodePacked(_spotInfo.provider)),\\n            '\\\",',\\n            '\\\"baseURI\\\":\\\"',\\n            string(abi.encodePacked(_spotInfo.baseURI)),\\n            '\\\",'\\n        );\\n        bytes memory spotMetadata3 = abi.encodePacked('\\\"seller_fee_basis_points\\\":0,', '\\\"fee_recipient\\\":\\\"', Strings.toHexString(uint160(_spotOwner), 20), '\\\",');\\n\\n        // ===============================================================================\\n        // Attributes\\n        // ===============================================================================\\n        bytes memory _attributeStart = abi.encodePacked(\\n            '\\\"attributes\\\":[{\\\"trait_type\\\":\\\"provider\\\",\\\"value\\\":\\\"',\\n            string(abi.encodePacked(_spotInfo.provider)),\\n            '\\\"},{\\\"trait_type\\\":\\\"spot\\\",\\\"value\\\":\\\"',\\n            Strings.toHexString(uint160(_spotAddress), 20),\\n            '\\\"},'\\n        );\\n        bytes memory _attributeTag = abi.encodePacked(\\n            '{\\\"trait_type\\\":\\\"userTag1\\\",\\\"value\\\":\\\"',\\n            _spotInfo.tag1,\\n            '\\\"},{\\\"trait_type\\\":\\\"userTag2\\\",\\\"value\\\":\\\"',\\n            _spotInfo.tag2,\\n            '\\\"},{\\\"trait_type\\\":\\\"userTag3\\\",\\\"value\\\":\\\"',\\n            _spotInfo.tag3,\\n            '\\\"}]}'\\n        );\\n\\n        return string(abi.encodePacked(spotMetadata1, spotMetadata2, spotMetadata3, _attributeStart, _attributeTag));\\n    }\\n\\n    /**\\n     * @dev Returns the paused status of PoV\\n     * @param povId uint16, PoV id\\n     * @return paused status of PoV\\n     */\\n    function getPaused(uint16 povId) public view returns (bool) {\\n        return _pausedStatusOf[povId];\\n    }\\n\\n    function getTagAsReadable(uint80 tag) public view returns (bytes16[6] memory) {\\n        return _poVFactoryRegistry.tagAsReadable(tag);\\n    }\\n\\n    // ================================================================\\n    //  visited contract functions\\n    // ================================================================\\n    /**\\n     * @dev mint new PoV with povId\\n     * @notice msg.sender should be visited contract.\\n     * @param to address, minter address\\n     * @param tokenId uint256, PoV token id\\n     * @param extended bytes32, extended data\\n     * @param userData bytes, user data\\n     */\\n    function mint(address to, uint256 tokenId, bytes32 extended, bytes32 userData) public onlyVisitedByContract returns (address) {\\n        // povId : 0xVVVV............................................................\\n        uint16 povId = uint16(bytes2(extended));\\n\\n        if (address(0) == _povAddressOf[povId]) revert(\\\"Not available PoV ID\\\");\\n        if (_pausedStatusOf[povId]) revert(\\\"PoV is paused\\\");\\n\\n        PoV pov = PoV(_povAddressOf[povId]);\\n        pov.mint(to, tokenId, extended, userData);\\n\\n        _spotExperienceOf[to]++;\\n        emit ChangeExperience(to, _spotExperienceOf[to]);\\n\\n        return _povAddressOf[povId];\\n    }\\n\\n    // ================================================================\\n    //  visitedBy functions\\n    // ================================================================\\n    /**\\n     * @dev Add new pov\\n     * @notice msg.sender should be spot owner or admin.\\n     * @param povFactoryID uint256, PoV factory ID\\n     * @param povInfo PoVInfo, PoV info\\n     * @param extraParam bytes, extra param(used for factory awesome feature ;')\\n     * @return uint256, PoV id\\n     */\\n    function add(uint256 povFactoryID, PoVInfo memory povInfo, bytes calldata extraParam) public onlyVisitedByContract returns (uint16) {\\n        return _add(povFactoryID, povInfo, extraParam);\\n    }\\n\\n    /**\\n     * @dev Burn PoV token\\n     * @notice msg.sender should be spot owner or admin.\\n     * @param povId uint16, PoV id\\n     * @param tokenId uint256, PoV token id\\n     */\\n    function burn(uint16 povId, uint256 tokenId) public onlyVisitedByContract {\\n        if (address(0) == _povAddressOf[povId]) revert(\\\"Not available PoV ID\\\");\\n\\n        PoV pov = PoV(_povAddressOf[povId]);\\n        pov.burn(tokenId);\\n    }\\n\\n    /**\\n     * @dev set Spot info\\n     * @notice msg.sender should be spot owner or admin.\\n     * @param spotInfo SpotInfo, spot Info\\n     */\\n    function setSpotInfo(SpotInfo memory spotInfo) public onlyVisitedByContract {\\n        _spotInfo = spotInfo;\\n        emit MetadataUpdate(uint256(uint160(_spotAddress)));\\n    }\\n\\n    /**\\n     * @dev set Spot info\\n     * @notice msg.sender should be spot owner or admin.\\n     * @param povId uint16, PoV id\\n     * @param poVInfo PoVInfo, pov Info\\n     */\\n    function setPoVInfo(uint16 povId, PoVInfo memory poVInfo) public onlyVisitedByContract {\\n        PoV pov = PoV(_povAddressOf[povId]);\\n        pov.setPoVInfo(poVInfo);\\n    }\\n\\n    // ================================================================\\n    //  admin or spot owner functions\\n    // ================================================================\\n    /**\\n     * @dev set complaint for the visitor\\n     * @notice msg.sender should be spot owner or admin.\\n     * @param visitor address, visitor address\\n     */\\n    function setComplaint(address visitor) public onlyAdminOrSpotOwner {\\n        if (0 == _spotExperienceOf[visitor]) revert(\\\"Not visited yet\\\");\\n\\n        _visitedBy.setComplaint(msg.sender, visitor);\\n    }\\n\\n    // ================================================================\\n    //  spot owner functions\\n    // ================================================================\\n\\n    /**\\n     * @dev clear experience of visitor\\n     * @notice msg.sender should be contract owner.\\n     * @param visitor address, visitor address\\n     */\\n    function clearExperience(address visitor) public onlySpotOwner {\\n        _clearExperience(visitor);\\n    }\\n\\n    /**\\n     * @dev set paused status of PoV\\n     * @notice msg.sender should be contract owner.\\n     * @param povId uint16, PoV id\\n     * @param status bool, paused status\\n     */\\n    function setPaused(uint16 povId, bool status) public onlySpotOwner {\\n        _pausedStatusOf[povId] = status;\\n        emit Pause(povId, status);\\n    }\\n\\n    /**\\n     * @dev change spot owner\\n     * @notice msg.sender should be contract owner.\\n     * @param newSpotOwner address, new spot owner address\\n     */\\n    function changeSpotOwner(address newSpotOwner) public onlySpotOwner {\\n        _spotOwner = newSpotOwner;\\n    }\\n\\n    // ================================================================\\n    //  admin functions\\n    // ================================================================\\n\\n    /**\\n     * @dev Add new pov for custom PoV contract\\n     * @notice msg.sender should be spot owner or admin.\\n     * @param povAddress address, address of pov\\n     */\\n    function addCustomPoV(address povAddress) public onlyAdmin returns (uint16) {\\n        return _addCustomPoV(povAddress);\\n    }\\n\\n    /**\\n     * @dev Sets the contract address to allow it to mint token\\n     * @param resolver address, resolver contract address\\n     */\\n    function setResolver(address resolver) external onlyAdmin {\\n        for (uint16 i = 0; i < _povCount.current(); i++) {\\n            PoV pov = PoV(_povAddressOf[i]);\\n            pov.setResolver(resolver);\\n        }\\n    }\\n\\n    /**\\n     * @dev change contract admin\\n     * @notice msg.sender should be contract admin.\\n     * @param admin address, new admin address\\n     */\\n    function changeContractAdministrator(address admin) public onlyAdmin {\\n        addAdmin(admin);\\n        deleteAdmin(msg.sender);\\n\\n        emit ChangeContractOwner(msg.sender, admin);\\n    }\\n\\n    // ================================================================\\n    //  internal functions\\n    // ================================================================\\n    /**\\n     * @dev Add new pov(internal)\\n     * @param povFactoryID uint256, PoV factory id\\n     * @param povInfo PoVInfo, PoV info\\n     * @param extraParam bytes, extra param(used for factory awesome feature ;')\\n     * @return povId uint16, PoV id\\n     */\\n    function _add(uint256 povFactoryID, PoVInfo memory povInfo, bytes calldata extraParam) internal returns (uint16) {\\n        if (false == _poVFactoryRegistry.isRegistered(povFactoryID)) revert(\\\"Not available PoV factory ID\\\");\\n\\n        if (65535 <= _povCount.current()) revert(\\\"PoV count is over\\\");\\n        uint16 povId = uint16(_povCount.current());\\n        _povCount.increment();\\n        if (address(0) != _povAddressOf[povId]) revert(\\\"Already added PoV ID\\\");\\n\\n        address _povAddress = _poVFactoryRegistry.createNewPoV(povFactoryID, _spotOwner, address(this), povInfo, extraParam);\\n        if (address(0) == _povAddress) revert(\\\"failure create PoV contract\\\");\\n\\n        _povAddressOf[povId] = _povAddress;\\n\\n        return povId;\\n    }\\n\\n    /**\\n     * @dev Add new pov for custom PoV contract (internal)\\n     * @notice msg.sender should be spot owner or admin.\\n     * @param povAddress address, address of pov\\n     * @return povId uint256, PoV id\\n     */\\n    function _addCustomPoV(address povAddress) internal returns (uint16) {\\n        if (65535 <= _povCount.current()) revert(\\\"PoV count is over\\\");\\n        uint16 povId = uint16(_povCount.current());\\n        _povCount.increment();\\n\\n        if (address(0) != _povAddressOf[povId]) revert(\\\"Already added PoV ID\\\");\\n        if (address(0) == povAddress) revert(\\\"Invalid pov address\\\");\\n        if (Address.isContract(povAddress) == false) revert(\\\"Invalid pov address\\\");\\n\\n        _povAddressOf[povId] = povAddress;\\n\\n        return povId;\\n    }\\n\\n    /**\\n     * @dev clear experience of visitor(internal)\\n     * @notice msg.sender should be contract owner.\\n     * @param visitor address, visitor address\\n     */\\n    function _clearExperience(address visitor) internal {\\n        if (0 == _spotExperienceOf[visitor]) revert(\\\"visitor has no experience.\\\");\\n\\n        _spotExperienceOf[visitor] = 0;\\n        emit ChangeExperience(visitor, _spotExperienceOf[visitor]);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/SpotResolverFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.13;\\n\\nimport { UUPSUpgradeable } from \\\"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport { Counters } from \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport { Initializable } from \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport { VisitedBy } from \\\"@src-root/VisitedBy.sol\\\";\\nimport { SpotResolver } from \\\"@src-root/SpotResolver.sol\\\";\\nimport { PoVFactoryRegistry } from \\\"@src-root/PoVFactoryRegistry.sol\\\";\\nimport { PoVAttributeParser } from \\\"@src-root/PoVAttributeParser.sol\\\";\\nimport { VisitedByTypes } from \\\"@src-root/lib/VisitedByTypes.sol\\\";\\nimport { RoleControl } from \\\"@src-root/lib/RoleControl.sol\\\";\\nimport { ISpotResolverFactory } from \\\"@src-root/lib/interface/ISpotResolverFactory.sol\\\";\\n\\ncontract SpotResolverFactory is\\n    Initializable,\\n    UUPSUpgradeable,\\n    RoleControl,\\n    VisitedByTypes,\\n    ISpotResolverFactory\\n{\\n    VisitedBy private _visitedBy;\\n    PoVFactoryRegistry private _poVFactoryRegistry;\\n    PoVAttributeParser private _poVAttributeParser;\\n\\n    function initialize(\\n        VisitedBy visitedBy,\\n        PoVFactoryRegistry poVFactoryRegistry,\\n        PoVAttributeParser poVAttributeParser\\n    ) public initializer {\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n        _visitedBy = visitedBy;\\n        _poVFactoryRegistry = poVFactoryRegistry;\\n        _poVAttributeParser = poVAttributeParser;\\n    }\\n\\n    // ================================================================\\n    //  user functions\\n    // ================================================================\\n    /**\\n     * @dev create new Spot resolver\\n     * @notice you can register Spot for your resolver.\\n     * @param admin address, admin address\\n     * @param spotOwner address, Spot owner\\n     * @param spotAddress address, Spot address\\n     * @param spotInfo SpotInfo\\n     * @return address, new Spot resolver address\\n     */\\n    function createNewSpotResolver(\\n        address admin,\\n        address spotOwner,\\n        address spotAddress,\\n        SpotInfo memory spotInfo\\n    ) external override returns (address) {\\n        SpotResolver spotResolver = new SpotResolver(\\n            admin,\\n            spotOwner,\\n            spotAddress,\\n            _visitedBy,\\n            _poVFactoryRegistry,\\n            _poVAttributeParser,\\n            spotInfo\\n        );\\n        if (address(0) == address(spotResolver)) revert(\\\"Spot5192: createNewSpot failed\\\");\\n        return address(spotResolver);\\n    }\\n\\n    function name() external pure override returns (string memory) {\\n        return \\\"Spot5192\\\";\\n    }\\n\\n    // ================================================================\\n    //  override  functions\\n    // ================================================================\\n    function _authorizeUpgrade(address) internal override onlyAdmin {}\\n}\\n\"\r\n    },\r\n    \"src/SpotVerifier.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.13;\\n\\nimport { UUPSUpgradeable } from \\\"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport { Initializable } from \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport { SpotRegistry } from \\\"@src-root/SpotRegistry.sol\\\";\\nimport { SpotResolver } from \\\"@src-root/SpotResolver.sol\\\";\\nimport { VisitedByTypes } from \\\"@src-root/lib/VisitedByTypes.sol\\\";\\nimport { RoleControl } from \\\"@src-root/lib/RoleControl.sol\\\";\\n\\ncontract SpotVerifier is Initializable, UUPSUpgradeable, RoleControl, VisitedByTypes {\\n    // ================================================================\\n    //  variables\\n    // ================================================================\\n    address private _visitedByAddress;\\n\\n    bytes7 private constant _MSG_SALT = 0x18434d4d4e1310; // \\\"\\\\x18CMMN\\\\x13\\\\x10\\\"\\n\\n    // ================================================================\\n    //  modifiers\\n    // ================================================================\\n    modifier onlyVisitedByContract() {\\n        require(_visitedByAddress == msg.sender, \\\"Not visitedBy contract.\\\");\\n        _;\\n    }\\n\\n    // ================================================================\\n    //  initializer\\n    // ================================================================\\n    function initialize(address visitedByAddress) public initializer {\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n        _visitedByAddress = visitedByAddress;\\n    }\\n\\n    // ================================================================\\n    //  User functions\\n    // ================================================================\\n\\n    /**\\n     * @dev verify Proof of Visit NFT\\n     * @notice msg.sender should be contract owner.\\n     * @param visitor address, visitor address\\n     * @param spotSignature bytes, spot signature for PoV\\n     * @param extended bytes32, extended data\\n     * @return address, spot address for PoV. If not found, return address(0).\\n     */\\n    function verify(\\n        address visitor,\\n        bytes calldata spotSignature,\\n        bytes32 extended\\n    ) public view onlyVisitedByContract returns (address) {\\n        return _recoverSpotAddress(visitor, spotSignature, extended);\\n    }\\n\\n    // ================================================================\\n    //  internal functions\\n    // ================================================================\\n\\n    /**\\n     * @dev recover spot address from signature with extended data\\n     * @notice msg.sender should be contract owner.\\n     * @param minter address, minter wallet address\\n     * @param signature bytes, spot signature for PoV\\n     * @return extended bytes32, extended data\\n     */\\n    function _recoverSpotAddress(\\n        address minter,\\n        bytes calldata signature,\\n        bytes32 extended\\n    ) internal pure returns (address) {\\n        return _recoverSigner(sha256(abi.encodePacked(_MSG_SALT, minter, extended)), signature);\\n    }\\n\\n    /// _recoverSigner\\n    function _recoverSigner(bytes32 msgHash, bytes calldata sig) internal pure returns (address) {\\n        (uint8 v, bytes32 r, bytes32 s) = _splitSignature(sig);\\n        return ecrecover(msgHash, v, r, s);\\n    }\\n\\n    /// _splitSignature is signature methods.\\n    function _splitSignature(bytes memory sig)\\n        internal\\n        pure\\n        returns (\\n            uint8 v,\\n            bytes32 r,\\n            bytes32 s\\n        )\\n    {\\n        require(sig.length == 65, \\\"signature length must be 65\\\");\\n\\n        /* solhint-disable no-inline-assembly */\\n        assembly {\\n            r := mload(add(sig, 32))\\n            s := mload(add(sig, 64))\\n            v := byte(0, mload(add(sig, 96)))\\n        }\\n        /* solhint-enable no-inline-assembly */\\n\\n        if (v < 27) {\\n            v += 27;\\n        }\\n\\n        require(v == 27 || v == 28, \\\"parameter v must be 27 or 28\\\");\\n\\n        return (v, r, s);\\n    }\\n\\n    /**\\n     * @dev change contract admin\\n     * @notice msg.sender should be contract admin.\\n     * @param admin address, new admin address\\n     */\\n    function changeContractAdministrator(address admin) public onlyAdmin {\\n        addAdmin(admin);\\n        deleteAdmin(msg.sender);\\n\\n        emit ChangeContractOwner(msg.sender, admin);\\n    }\\n\\n    // ================================================================\\n    //  override functions\\n    // ================================================================\\n    // solhint-disable-next-line no-empty-blocks\\n    function _authorizeUpgrade(address) internal override onlyAdmin {}\\n}\\n\"\r\n    },\r\n    \"src/VisitedBy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.13;\\n\\nimport { IERC721 } from \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport { UUPSUpgradeable } from \\\"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport { Initializable } from \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport { VSIT } from \\\"@src-root/token/VSIT.sol\\\";\\nimport { VisitorRegistry } from \\\"@src-root/gasless/VisitorRegistry.sol\\\";\\nimport { SpotRegistry } from \\\"@src-root/SpotRegistry.sol\\\";\\nimport { SpotVerifier } from \\\"@src-root/SpotVerifier.sol\\\";\\nimport { SpotResolver } from \\\"@src-root/SpotResolver.sol\\\";\\nimport { PoV } from \\\"@src-root/lib/PoV.sol\\\";\\nimport { VisitedByTypes } from \\\"@src-root/lib/VisitedByTypes.sol\\\";\\nimport { RoleControl } from \\\"@src-root/lib/RoleControl.sol\\\";\\n\\ncontract VisitedBy is Initializable, UUPSUpgradeable, RoleControl, VisitedByTypes {\\n    // ================================================================\\n    //  events\\n    // ================================================================\\n\\n    // visitor events\\n    event Visited(\\n        address indexed visitor,\\n        address indexed resolver,\\n        address indexed pov,\\n        uint256 tokenId\\n    );\\n    event ChangeExperience(address indexed visitor, uint256 experience);\\n    event NewComplaint(address indexed visitor, address indexed resolver);\\n\\n    // spot events\\n    event SpotRegister(\\n        address indexed spotAddress,\\n        address indexed resolver,\\n        address indexed spotOwner\\n    );\\n    event SpotUnregister(\\n        address indexed spotAddress,\\n        address indexed resolver,\\n        address indexed spotOwner\\n    );\\n    event SpotInfoUpdate(address indexed spotAddress, address indexed resolverAddress);\\n\\n    // PoV events\\n    event PoVAdd(address indexed spotAddress, uint256 indexed povId, address indexed povAddress);\\n    event PoVBurn(uint256 indexed povId, address indexed povAddress, uint256 tokenId);\\n    event PoVInfoUpdate(\\n        address indexed spotAddress,\\n        address indexed resolverAddress,\\n        uint16 indexed povId\\n    );\\n\\n    // ================================================================\\n    //  mappings\\n    // ================================================================\\n\\n    // visitor address to experience\\n    mapping(address => uint256) private _experienceOf;\\n\\n    // visitor address to complaint array\\n    mapping(address => address[]) private _complaintOf;\\n\\n    // ================================================================\\n    //  variables\\n    // ================================================================\\n    VisitorRegistry private _visitorRegistry;\\n    SpotRegistry private _spotRegistry;\\n    SpotVerifier private _spotVerifier;\\n    VSIT private _vsit;\\n\\n    uint64 public constant SECRET_TIMESTAMP = 0x0;\\n    uint256 public constant SECRET_TIMESTAMP_FEE = 10 * 10 ** 18;\\n\\n    uint256 public constant COMPLAIN_LIMIT = 5;\\n\\n    bytes32 public constant FORWARDER_ROLE = keccak256(\\\"FORWARDER_ROLE\\\");\\n\\n    IERC721 public campaignNFT = IERC721(address(0x0));\\n    uint64 public campaignNFTStart = 0;\\n    uint64 public campaignNFTEnd = 0;\\n\\n    // ================================================================\\n    //  modifiers\\n    // ================================================================\\n    modifier onlyForwarder() {\\n        if (\\n            (false == hasRole(FORWARDER_ROLE, msg.sender)) &&\\n            (false == hasRole(DEFAULT_ADMIN_ROLE, msg.sender))\\n        ) revert(\\\"Only forwarder\\\");\\n        _;\\n    }\\n\\n    // ================================================================\\n    //  initializer\\n    // ================================================================\\n    function initialize(\\n        address visitorRegistryAddress,\\n        address spotRegistryAddress,\\n        address spotVerifierAddress,\\n        address vsitAddress\\n    ) public initializer {\\n        // SETUP role Hierarchy:\\n        // DEFAULT_ADMIN_ROLE > FORWARDER_ROLE > no role\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n        _setRoleAdmin(FORWARDER_ROLE, DEFAULT_ADMIN_ROLE);\\n        _visitorRegistry = VisitorRegistry(visitorRegistryAddress);\\n        _spotRegistry = SpotRegistry(spotRegistryAddress);\\n        _spotVerifier = SpotVerifier(spotVerifierAddress);\\n        _vsit = VSIT(vsitAddress);\\n    }\\n\\n    // ================================================================\\n    //  User functions\\n    // ================================================================\\n    /**\\n     * @dev mint Proof of Visit NFT with custom extended data\\n     * @notice msg.sender should be contract owner.\\n     * @param spotSignature bytes, spot signature for PoV\\n     * @param extended bytes32, extended data\\n     * @param userData bytes, user data\\n     * @return resolver address, resolvers address\\n     */\\n    function mint(\\n        bytes calldata spotSignature,\\n        bytes32 extended,\\n        bytes32 userData\\n    ) public returns (address) {\\n        address spotAddress = _spotVerifier.verify(msg.sender, spotSignature, extended);\\n\\n        return\\n            _mint(\\n                _visitorRegistry.resolve(msg.sender),\\n                spotAddress,\\n                extended,\\n                _tokenIdOf(spotSignature),\\n                userData\\n            );\\n    }\\n\\n    /**\\n     * @dev verify Proof of Visit NFT with custom extended data\\n     * @param visitor address, visitor address\\n     * @param spotSignature bytes, spot signature for PoV\\n     * @param extended bytes32, extended data\\n     * @return resolver address, resolvers address\\n     */\\n    function verify(\\n        address visitor,\\n        bytes calldata spotSignature,\\n        bytes32 extended\\n    ) external view returns (address) {\\n        address spotAddress = _spotVerifier.verify(visitor, spotSignature, extended);\\n        address resolverAddress = _spotRegistry.getResolver(spotAddress);\\n\\n        return resolverAddress;\\n    }\\n\\n    /**\\n     * @dev estimate reward for Proof of Visit with custom extended data\\n     * @param visitor address, visitor address\\n     * @param spotSignature bytes, spot signature for PoV\\n     * @param extended bytes32, extended data\\n     * @return resolver address, resolvers address\\n     */\\n    function estimateReward(\\n        address visitor,\\n        bytes calldata spotSignature,\\n        bytes32 extended\\n    ) external view returns (uint256) {\\n        address spotAddress = _spotVerifier.verify(visitor, spotSignature, extended);\\n        address resolverAddress = _spotRegistry.getResolver(spotAddress);\\n        if (address(0x0) == resolverAddress) revert(\\\"Resolver not found\\\");\\n        uint16 povId = uint16(bytes2(extended));\\n        address povAddress = SpotResolver(resolverAddress).getPovAddress(povId);\\n        if (address(0x0) == povAddress) revert(\\\"PoV not found\\\");\\n\\n        uint256 _visitedExperience = _experienceOf[visitor];\\n        uint256 _spotExperience = SpotResolver(resolverAddress).spotExperienceOf(visitor);\\n        uint256 _povExperience = PoV(povAddress).getExperience(visitor);\\n\\n        return\\n            _calcReward(visitor, _visitedExperience + 1, _spotExperience + 1, _povExperience + 1);\\n    }\\n\\n    /**\\n     * @dev Returns VSIT token contract address\\n\\n     * @return vsitAddress address, Token contract address\\n     */\\n    function vsitContract() external view returns (address) {\\n        return address(_vsit);\\n    }\\n\\n    /**\\n     * @dev Returns the experience of `account`.\\n     * @return PoVs array address[], address array of PoVs\\n     */\\n    function experienceOf(address visitor) external view returns (uint256) {\\n        return _experienceOf[visitor];\\n    }\\n\\n    /**\\n     * @dev Returns the complainers of `account`.\\n     * @param visitor address, visitor address\\n     * @return complainers count array address[], complainers count array of PoV\\n     */\\n    function complaintOf(address visitor) external view returns (address[] memory) {\\n        return _complaintOf[visitor];\\n    }\\n\\n    /**\\n     * @dev Returns the complainers of `account`.\\n     * @param forwarder address, forwarder address\\n     * @return bool, true if visitor is user wallet\\n     */\\n    function isForwarder(address forwarder) external view returns (bool) {\\n        return hasRole(FORWARDER_ROLE, forwarder);\\n    }\\n\\n    // ???????????????????????????????????????????????????????????????????????\\n    //?  Forwarder functions\\n    // ???????????????????????????????????????????????????????????????????????\\n    // ================================================================\\n    //  Visitor functions\\n    // ================================================================\\n    /**\\n     * @dev mint Proof of Visit NFT with custom extended data\\n     * @notice msg.sender should be forwarder.\\n     * @param to address, address to mint\\n     * @param spotSignature bytes, spot signature for PoV\\n     * @param extended bytes32, extended data\\n     * @param userData bytes, user data\\n     * @return resolver address, resolvers address\\n     */\\n    function mint(\\n        address to,\\n        bytes calldata spotSignature,\\n        bytes32 extended,\\n        bytes32 userData\\n    ) public onlyForwarder returns (address) {\\n        address spotAddress = _spotVerifier.verify(to, spotSignature, extended);\\n\\n        return\\n            _mint(\\n                _visitorRegistry.resolve(to),\\n                spotAddress,\\n                extended,\\n                _tokenIdOf(spotSignature),\\n                userData\\n            );\\n    }\\n\\n    // ================================================================\\n    //  Spot Owner functions\\n    // ================================================================\\n    /**\\n     * @dev Add new pov\\n     * @notice msg.sender should be spot owner or admin.\\n     * @param spotAddress address, spot address\\n     * @param povFactoryID uint256, PoV factory ID\\n     * @param povInfo PoVInfo, PoV info\\n     * @param extraParam bytes, extra param(used for factory awesome feature ;')\\n     * @return uint256, PoV id\\n     */\\n    function add(\\n        address spotAddress,\\n        uint256 povFactoryID,\\n        PoVInfo memory povInfo,\\n        bytes calldata extraParam\\n    ) public onlyForwarder returns (uint16) {\\n        address resolverAddress = _spotRegistry.getResolver(spotAddress);\\n        if (address(0) == resolverAddress) revert(\\\"invalid spot address.\\\");\\n\\n        SpotResolver resolver = SpotResolver(resolverAddress);\\n        uint16 povId = resolver.add(povFactoryID, povInfo, extraParam);\\n\\n        emit PoVAdd(spotAddress, povId, resolver.getPovAddress(povId));\\n\\n        return povId;\\n    }\\n\\n    /**\\n     * @dev set Spot info\\n     * @notice msg.sender should be spot owner or admin.\\n     * @param spotInfo SpotInfo, spot Info\\n     */\\n    function setSpotInfo(address spotAddress, SpotInfo memory spotInfo) public onlyForwarder {\\n        address resolverAddress = _spotRegistry.getResolver(spotAddress);\\n        if (address(0) == resolverAddress) revert(\\\"invalid spot address.\\\");\\n\\n        SpotResolver resolver = SpotResolver(resolverAddress);\\n        resolver.setSpotInfo(spotInfo);\\n\\n        emit SpotInfoUpdate(spotAddress, resolverAddress);\\n    }\\n\\n    /**\\n     * @dev set Spot info\\n     * @notice msg.sender should be spot owner or admin.\\n     * @param povId uint16, PoV id\\n     * @param poVInfo PoVInfo, pov Info\\n     */\\n    function setPoVInfo(\\n        address spotAddress,\\n        uint16 povId,\\n        PoVInfo memory poVInfo\\n    ) public onlyForwarder {\\n        address resolverAddress = _spotRegistry.getResolver(spotAddress);\\n        if (address(0) == resolverAddress) revert(\\\"invalid spot address.\\\");\\n\\n        SpotResolver resolver = SpotResolver(resolverAddress);\\n        resolver.setPoVInfo(povId, poVInfo);\\n\\n        emit PoVInfoUpdate(spotAddress, resolverAddress, povId);\\n    }\\n\\n    // ================================================================\\n    //  Owner functions\\n    // ================================================================\\n    /**\\n     * @dev Burn new pov\\n     * @notice msg.sender should be spot owner or admin.\\n     * @param spotAddress address, spot address\\n     * @param povId uint16, PoV ID\\n     * @param tokenId uint256, PoV token ID\\n     */\\n    function burn(address spotAddress, uint16 povId, uint256 tokenId) public onlyAdmin {\\n        address resolverAddress = _spotRegistry.getResolver(spotAddress);\\n        if (address(0) == resolverAddress) revert(\\\"invalid spot address.\\\");\\n\\n        SpotResolver resolver = SpotResolver(resolverAddress);\\n\\n        address povAddress = resolver.getPovAddress(povId);\\n        if (address(0) == povAddress) revert(\\\"Not available PoV ID\\\");\\n\\n        _vsit.payFee(PoV(povAddress).ownerOf(tokenId), address(_vsit), 10 ether);\\n        resolver.burn(povId, tokenId);\\n\\n        emit PoVBurn(povId, resolver.getPovAddress(povId), tokenId);\\n    }\\n\\n    /**\\n     * @dev Register new spot to registry\\n     * @notice msg.sender should be contract owner.\\n     * @param spotOwner address, spot owner address( who is the owner of spot device )\\n     * @param spotAddress address, spot address provided by spot device\\n     * @param spotInfo SpotInfo, spot info\\n     */\\n    function register(\\n        address spotOwner,\\n        address spotAddress,\\n        SpotInfo memory spotInfo\\n    ) public onlyAdmin returns (address) {\\n        address _resolver = _spotRegistry.register(spotOwner, spotAddress, spotInfo);\\n\\n        emit SpotRegister(spotAddress, _resolver, spotOwner);\\n        emit PoVAdd(spotAddress, 0, SpotResolver(_resolver).getPovAddress(0));\\n        return _resolver;\\n    }\\n\\n    /**\\n     * @dev Register new spot to registry for Custom Resolver\\n     * @notice msg.sender should be contract owner.\\n     * @param spotOwner address, spot owner address( who is the owner of spot device )\\n     * @param spotAddress address, spot address provided by spot device\\n     * @param spotResolver address, spot resolver address\\n     */\\n    function register(\\n        address spotOwner,\\n        address spotAddress,\\n        address spotResolver\\n    ) public onlyAdmin {\\n        _spotRegistry.register(spotOwner, spotAddress, spotResolver);\\n        emit SpotRegister(spotAddress, spotResolver, spotOwner);\\n        emit PoVAdd(spotAddress, 0, SpotResolver(spotResolver).getPovAddress(0));\\n    }\\n\\n    /**\\n     * @dev Add new pov for custom PoV contract\\n     * @notice msg.sender should be spot owner or admin.\\n     * @param spotAddress address, spot address provided by spot device\\n     * @param povAddress address, address of pov\\n     */\\n    function addCustomPoV(\\n        address spotAddress,\\n        address povAddress\\n    ) public onlyAdmin returns (uint16) {\\n        address resolverAddress = _spotRegistry.getResolver(spotAddress);\\n        if (address(0) == resolverAddress) revert(\\\"invalid signature or caller.\\\");\\n\\n        SpotResolver resolver = SpotResolver(resolverAddress);\\n        uint16 povId = resolver.addCustomPoV(povAddress);\\n\\n        emit PoVAdd(spotAddress, povId, resolver.getPovAddress(povId));\\n\\n        return povId;\\n    }\\n\\n    /**\\n     * @dev add forwarder account wallet\\n     * @notice msg.sender should be contract owner.\\n     * @param forwarder address, visitor address\\n     */\\n    function addForwarder(address forwarder) public onlyAdmin {\\n        grantRole(FORWARDER_ROLE, forwarder);\\n    }\\n\\n    /**\\n     * @dev delete forwarder account wallet\\n     * @notice msg.sender should be contract owner.\\n     * @param forwarder address, visitor address\\n     */\\n    function deleteForwarder(address forwarder) public onlyAdmin {\\n        revokeRole(FORWARDER_ROLE, forwarder);\\n    }\\n\\n    /**\\n     * @dev clear experience of visitor\\n     * @notice msg.sender should be contract owner.\\n     * @param visitor address, visitor address\\n     */\\n    function clearExperience(address visitor) public onlyAdmin {\\n        _clearExperience(visitor);\\n    }\\n\\n    /**\\n     * @dev add contract admin\\n     * @notice msg.sender should be contract admin.\\n     * @param admin address, new admin address\\n     */\\n    function addAdministrator(address admin) public onlyAdmin {\\n        addAdmin(admin);\\n    }\\n\\n    /**\\n     * @dev delete contract admin\\n     * @notice msg.sender should be contract admin.\\n     * @param admin address, delete admin address\\n     */\\n    function deleteAdministrator(address admin) public onlyAdmin {\\n        deleteAdmin(admin);\\n    }\\n\\n    /**\\n     * @dev set campaign NFT\\n     * @notice msg.sender should be contract admin.\\n     * @param nft IERC721, campaign NFT contract\\n     * @param start uint64, campaign start time\\n     * @param end uint64, campaign end time\\n     */\\n    function setCampaignNFT(IERC721 nft, uint64 start, uint64 end) external onlyAdmin {\\n        if (nft.supportsInterface(0x80ac58cd) == false) revert(\\\"not support ERC721 interface.\\\");\\n\\n        campaignNFT = nft;\\n        campaignNFTStart = start;\\n        campaignNFTEnd = end;\\n    }\\n\\n    // ================================================================\\n    //  Resolver functions\\n    // ================================================================\\n    /**\\n     * @dev Returns the complainers of `account`.\\n     * @param complainant address, complainant address\\n     * @param visitor address, visitor address\\n     */\\n    function setComplaint(address complainant, address visitor) external {\\n        if (false == _spotRegistry.isResolver(msg.sender)) revert(\\\"is not Resolver.\\\");\\n\\n        for (uint256 i = 0; i < _complaintOf[visitor].length; i++) {\\n            if (_complaintOf[visitor][i] == complainant) revert(\\\"already complaint.\\\");\\n        }\\n        _complaintOf[visitor].push(complainant);\\n        if (_complaintOf[visitor].length >= COMPLAIN_LIMIT) {\\n            // deprivation experience of `visitor`\\n            delete _complaintOf[visitor];\\n\\n            // burn VSIT\\n            _vsit.payFee(visitor, address(_vsit), _vsit.balanceOf(visitor));\\n        }\\n\\n        emit NewComplaint(visitor, msg.sender);\\n    }\\n\\n    // ================================================================\\n    //  override functions\\n    // ================================================================\\n    // solhint-disable-next-line no-empty-blocks\\n    function _authorizeUpgrade(address) internal override onlyAdmin {}\\n\\n    // ================================================================\\n    //  internal functions\\n    // ================================================================\\n\\n    /**\\n     * @dev mint (internal)\\n     * @param spotAddress address, spot address(from SpotVerifier)\\n     * @param to address, receiver address\\n     * @param extended bytes32, extended data\\n     * @param tokenId uint256, PoV token id\\n     * @param userData bytes, user data\\n     * @return resolver address, resolvers address\\n     */\\n    function _mint(\\n        address to,\\n        address spotAddress,\\n        bytes32 extended,\\n        uint256 tokenId,\\n        bytes32 userData\\n    ) internal returns (address) {\\n        if (SECRET_TIMESTAMP == uint64(uint80(bytes10(extended)) & 0xFFFFFFFFFFFFFFFF)) {\\n            // timestamp is secret\\n            if (_vsit.balanceOf(to) < SECRET_TIMESTAMP_FEE) revert(\\\"not enough VSIT.\\\");\\n            _vsit.payFee(to, address(_vsit), SECRET_TIMESTAMP_FEE);\\n        }\\n        address resolverAddress = _spotRegistry.getResolver(spotAddress);\\n        if (address(0) == resolverAddress) revert(\\\"invalid signature or caller.\\\");\\n        if (_spotRegistry.isPaused(spotAddress)) revert(\\\"spot is paused.\\\");\\n\\n        SpotResolver resolver = SpotResolver(resolverAddress);\\n        address _pov = resolver.mint(to, tokenId, extended, userData);\\n\\n        emit Visited(to, resolverAddress, _pov, tokenId);\\n\\n        _distributeRewards(to, resolverAddress, _pov);\\n\\n        return resolverAddress;\\n    }\\n\\n    function _distributeRewards(address to, address resolverAddress, address povAddress) internal {\\n        // exchange reward\\n        _experienceOf[to] += 1;\\n\\n        SpotResolver resolver = SpotResolver(resolverAddress);\\n        PoV pov = PoV(povAddress);\\n        uint256 _visitedExperience = _experienceOf[to];\\n        uint256 _spotExperience = resolver.spotExperienceOf(to);\\n        uint256 _povExperience = pov.getExperience(to);\\n\\n        uint256 _reward = _calcReward(to, _visitedExperience, _spotExperience, _povExperience);\\n\\n        // mint VSIT\\n        if (0 != _reward) _vsit.mint(to, _reward);\\n\\n        emit ChangeExperience(to, _experienceOf[to]);\\n    }\\n\\n    function _calcReward(\\n        address to,\\n        uint256 visitedExperience,\\n        uint256 spotExperience,\\n        uint256 povExperience\\n    ) internal view returns (uint256) {\\n        uint256 reward = 0;\\n\\n        if (visitedExperience < 10) {\\n            // reward of first visit\\n            if (0 != visitedExperience) {\\n                reward = reward + (10 ** 18 / visitedExperience); // max 2.93 ether\\n            }\\n        }\\n        if (spotExperience < 10) {\\n            // reward of first visit spot\\n            if (0 != spotExperience) {\\n                reward = reward + (10 ** 18 / spotExperience); // max 2.93 ether\\n            }\\n        }\\n        if (povExperience < 10) {\\n            // reward of first visit PoV\\n            if (0 != povExperience) {\\n                reward = reward + (10 ** 18 / povExperience); // max 2.93 ether\\n            }\\n        }\\n        if (0 == reward) {\\n            // reward of luck\\n            reward = 1000000000; // 1 gwei\\n        }\\n\\n        if (address(campaignNFT) != address(0)) {\\n            if (campaignNFT.balanceOf(to) > 0) {\\n                if (\\n                    campaignNFTStart <= uint64(block.timestamp) &&\\n                    uint64(block.timestamp) <= campaignNFTEnd\\n                ) {\\n                    // reward of campaign 3x\\n                    reward = reward * 3; // max 26.36 ether\\n                }\\n            }\\n        }\\n\\n        return reward;\\n    }\\n\\n    /**\\n     * @dev mint (internal)\\n     * @param spotSignature bytes calldata, spot signature from Spot device(as random k value)\\n     * @return tokenId uint256, PoV token id\\n     */\\n    function _tokenIdOf(bytes calldata spotSignature) internal pure returns (uint256) {\\n        return uint256(keccak256(abi.encodePacked(spotSignature)));\\n    }\\n\\n    /**\\n     * @dev clear experience of visitor(internal)\\n     * @notice msg.sender should be contract owner.\\n     * @param visitor address, visitor address\\n     */\\n    function _clearExperience(address visitor) internal {\\n        _experienceOf[visitor] = 0;\\n\\n        emit ChangeExperience(visitor, 0);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/gasless/VisitedByMinter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.13;\\n\\nimport { VisitedBy } from \\\"@src-root/VisitedBy.sol\\\";\\nimport { VisitedByTypes } from \\\"@src-root/lib/VisitedByTypes.sol\\\";\\n\\ncontract VisitedByMinter is VisitedByTypes {\\n    string public constant name = \\\"xyz.commun.VisitedByMinter\\\";\\n    bytes32 internal DOMAIN_SEPARATOR;\\n    address private _visitedBy;\\n\\n    uint256 private constant MAX_BATCH_SIZE = 100;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    constructor(address visitedBy) {\\n        uint256 chainId;\\n        /* solhint-disable no-inline-assembly */\\n        assembly {\\n            chainId := chainid()\\n        }\\n        /* solhint-enable no-inline-assembly */\\n        DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                keccak256(\\n                    \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n                ),\\n                keccak256(bytes(name)),\\n                keccak256(bytes(\\\"1\\\")),\\n                chainId,\\n                address(0x0000000000000000000000000000000000000000)\\n            )\\n        );\\n        _visitedBy = visitedBy;\\n    }\\n\\n    // keccak256(\\\"mint(address,bytes32,bytes32,uint8,bytes32,bytes32,uint256,uint256)\\\")\\n    bytes32 public constant PERMIT_TYPEHASH =\\n        keccak256(\\\"MintPermit(address,bytes32,bytes32,uint8,bytes32,bytes32,uint256,uint256)\\\");\\n\\n    // computes the hash of a permit\\n    function getStructHash(MintPermit memory _permit) internal pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    PERMIT_TYPEHASH,\\n                    _permit.visitor,\\n                    _permit.spotSignatureR,\\n                    _permit.spotSignatureS,\\n                    _permit.spotSignatureV,\\n                    _permit.extended,\\n                    _permit.userData,\\n                    _permit.nonce,\\n                    _permit.deadline\\n                )\\n            );\\n    }\\n\\n    // computes the hash of the fully encoded EIP-712 message for the domain, which can be used to recover the signer\\n    function getTypedDataHash(MintPermit memory _permit) public view returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", DOMAIN_SEPARATOR, getStructHash(_permit)));\\n    }\\n\\n    function execute(\\n        MintPermit memory _permit,\\n        uint8 visitorV,\\n        bytes32 visitorR,\\n        bytes32 visitorS\\n    ) public returns (address) {\\n        if (_permit.deadline < block.timestamp) revert(\\\"mint: expired\\\");\\n        if (_permit.nonce != nonces[_permit.visitor]) revert(\\\"mint: invalid nonce\\\");\\n        if (_permit.visitor != ecrecover(getTypedDataHash(_permit), visitorV, visitorR, visitorS))\\n            revert(\\\"mint: invalid signature\\\");\\n        nonces[_permit.visitor] = _permit.nonce + 1;\\n\\n        // execute mint\\n        return\\n            VisitedBy(_visitedBy).mint(\\n                _permit.visitor,\\n                abi.encodePacked(\\n                    _permit.spotSignatureR,\\n                    _permit.spotSignatureS,\\n                    _permit.spotSignatureV\\n                ),\\n                _permit.extended,\\n                _permit.userData\\n            );\\n    }\\n\\n    function batchExecute(\\n        MintRequest[] memory _requests\\n    ) public returns (address[] memory _addresses) {\\n        if (MAX_BATCH_SIZE < _requests.length) revert(\\\"batchExecute: too many requests\\\");\\n        _addresses = new address[](_requests.length);\\n        for (uint256 i = 0; i < _requests.length; i++) {\\n            _addresses[i] = execute(\\n                _requests[i].permit,\\n                _requests[i].visitorV,\\n                _requests[i].visitorR,\\n                _requests[i].visitorS\\n            );\\n        }\\n    }\\n\\n    function getNonce(address _visitor) public view returns (uint256) {\\n        return nonces[_visitor];\\n    }\\n\\n    function getBatchNonce(\\n        address[] memory _visitors\\n    ) public view returns (uint256[] memory _nonces) {\\n        if (MAX_BATCH_SIZE < _visitors.length) revert(\\\"getBatchNonce: too many requests\\\");\\n        _nonces = new uint256[](_visitors.length);\\n        for (uint256 i = 0; i < _visitors.length; i++) {\\n            _nonces[i] = nonces[_visitors[i]];\\n        }\\n    }\\n\\n    function getVisitedBy() public view returns (address) {\\n        return _visitedBy;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/gasless/VisitorRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.13;\\n\\nimport { VisitedBy } from \\\"@src-root/VisitedBy.sol\\\";\\nimport { VisitedByTypes } from \\\"@src-root/lib/VisitedByTypes.sol\\\";\\n\\ncontract VisitorRegistry is VisitedByTypes {\\n    string public constant name = \\\"xyz.commun.VisitorRegistry\\\";\\n\\n    bytes32 internal DOMAIN_SEPARATOR;\\n\\n    uint256 private constant MAX_BATCH_SIZE = 100;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    mapping(address => address) private resolver;\\n\\n    constructor() {\\n        uint256 chainId;\\n        /* solhint-disable no-inline-assembly */\\n        assembly {\\n            chainId := chainid()\\n        }\\n        /* solhint-enable no-inline-assembly */\\n        DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                keccak256(\\n                    \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n                ),\\n                keccak256(bytes(name)),\\n                keccak256(bytes(\\\"1\\\")),\\n                chainId,\\n                address(0x0000000000000000000000000000000000000000)\\n            )\\n        );\\n    }\\n\\n    // keccak256(\\\"register(address,address,uint256,uint256)\\\")\\n    bytes32 public constant PERMIT_TYPEHASH =\\n        keccak256(\\n            \\\"VisitorRegisterPermit(address visitor,address owner,uint256 nonce,uint256 deadline)\\\"\\n        );\\n\\n    // computes the hash of a permit\\n    function getStructHash(VisitorRegisterPermit memory _permit) internal pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    PERMIT_TYPEHASH,\\n                    _permit.visitor,\\n                    _permit.owner,\\n                    _permit.nonce,\\n                    _permit.deadline\\n                )\\n            );\\n    }\\n\\n    // computes the hash of the fully encoded EIP-712 message for the domain, which can be used to recover the signer\\n    function getTypedDataHash(VisitorRegisterPermit memory _permit) public view returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", DOMAIN_SEPARATOR, getStructHash(_permit)));\\n    }\\n\\n    function register(\\n        VisitorRegisterPermit memory _permit,\\n        uint8 visitorV,\\n        bytes32 visitorR,\\n        bytes32 visitorS,\\n        uint8 ownerV,\\n        bytes32 ownerR,\\n        bytes32 ownerS\\n    ) public {\\n        if (resolver[_permit.visitor] != address(0)) revert(\\\"register: already registered\\\");\\n        if (_permit.deadline < block.timestamp) revert(\\\"register: expired\\\");\\n        if (_permit.nonce != nonces[_permit.visitor]) revert(\\\"register: invalid nonce\\\");\\n        if (_permit.visitor != ecrecover(getTypedDataHash(_permit), visitorV, visitorR, visitorS))\\n            revert(\\\"register: invalid visitor signature\\\");\\n        if (_permit.owner != ecrecover(getTypedDataHash(_permit), ownerV, ownerR, ownerS))\\n            revert(\\\"register: invalid owner signature\\\");\\n        nonces[_permit.visitor] = _permit.nonce + 1;\\n\\n        resolver[_permit.visitor] = _permit.owner;\\n    }\\n\\n    function batchRegister(VisitorRegisterRequest[] memory _requests) public {\\n        if (MAX_BATCH_SIZE < _requests.length) revert(\\\"batchRegister: too many requests\\\");\\n        for (uint256 i = 0; i < _requests.length; i++) {\\n            register(\\n                _requests[i].permit,\\n                _requests[i].visitorV,\\n                _requests[i].visitorR,\\n                _requests[i].visitorS,\\n                _requests[i].ownerV,\\n                _requests[i].ownerR,\\n                _requests[i].ownerS\\n            );\\n        }\\n    }\\n\\n    function resolve(address _visitor) public view returns (address) {\\n        address owner = resolver[_visitor];\\n        if (owner == address(0)) return _visitor;\\n        return owner;\\n    }\\n\\n    function batchResolve(address[] memory _visitors) public view returns (address[] memory) {\\n        if (MAX_BATCH_SIZE < _visitors.length) revert(\\\"batchRegister: too many requests\\\");\\n        address[] memory owners = new address[](_visitors.length);\\n        for (uint256 i = 0; i < _visitors.length; i++) {\\n            owners[i] = resolve(_visitors[i]);\\n        }\\n        return owners;\\n    }\\n\\n    function getNonce(address _visitor) public view returns (uint256) {\\n        return nonces[_visitor];\\n    }\\n\\n    function batchGetNonce(address[] memory _visitors) public view returns (uint256[] memory) {\\n        if (MAX_BATCH_SIZE < _visitors.length) revert(\\\"batchRegister: too many requests\\\");\\n        uint256[] memory nonces_ = new uint256[](_visitors.length);\\n        for (uint256 i = 0; i < _visitors.length; i++) {\\n            nonces_[i] = getNonce(_visitors[i]);\\n        }\\n        return nonces_;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/lib/ERC5192Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.13;\\n\\nimport { ERC721Upgradeable } from \\\"@openzeppelin-contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\\\";\\n\\nimport { IERC5192Upgradeable, IERC165Upgradeable } from \\\"@src-root/lib/interface/IERC5192Upgradeable.sol\\\";\\n\\ncontract ERC5192Upgradeable is ERC721Upgradeable, IERC5192Upgradeable {\\n    // ================================================================\\n    //  mappings\\n    // ================================================================\\n    /// lock mapping\\n    mapping(uint256 => bool) private _lockStatus;\\n\\n    // ================================================================\\n    //  user functions\\n    // ================================================================\\n\\n    /**\\n     * @dev Returns locked token\\n     * @param tokenId uint256, token id\\n     */\\n    function locked(uint256 tokenId) external view override returns (bool) {\\n        return _lockStatus[tokenId];\\n    }\\n\\n    // ================================================================\\n    //  override functions\\n    // ================================================================\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165Upgradeable, ERC721Upgradeable) returns (bool) {\\n        return interfaceId == type(IERC5192Upgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    // ================================================================\\n    //  prohibited functions\\n    // ================================================================\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address, uint256) public virtual override {\\n        require(msg.sender == address(0), \\\"ERC5192: Not transferable.\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256) public view virtual override returns (address) {\\n        require(msg.sender == address(0), \\\"ERC5192: Not transferable.\\\");\\n\\n        return address(0);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address, bool) public virtual override {\\n        require(msg.sender == address(0), \\\"ERC5192: Not transferable.\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address, address) public view virtual override returns (bool) {\\n        require(msg.sender == address(0), \\\"ERC5192: Not transferable.\\\");\\n\\n        return false;\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address,\\n        address,\\n        uint256\\n    ) public virtual override {\\n        require(msg.sender == address(0), \\\"ERC5192: Not transferable.\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address,\\n        address,\\n        uint256\\n    ) public virtual override {\\n        require(msg.sender == address(0), \\\"ERC5192: Not transferable.\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override {\\n        require(msg.sender == address(0), \\\"ERC5192: Not transferable.\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"src/lib/PoV.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.13;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { Counters } from \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport { Strings } from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport { Base64 } from \\\"@openzeppelin/contracts/utils/Base64.sol\\\";\\nimport { ERC721 } from \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport { IERC721Receiver } from \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\n\\nimport { IPoV } from \\\"@src-root/lib/interface/IPoV.sol\\\";\\nimport { SpotResolver } from \\\"@src-root/SpotResolver.sol\\\";\\n\\nabstract contract PoV is ERC721, IERC721Receiver, IPoV, Ownable {\\n    // ================================================================\\n    //  usings\\n    // ================================================================\\n    using Counters for Counters.Counter;\\n    using Strings for uint256;\\n\\n    // ================================================================\\n    //  events\\n    // ================================================================\\n    /// Emitted when metadata is updated\\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\\n\\n    // ================================================================\\n    //  variables\\n    // ================================================================\\n    /// PoV - Info\\n    PoVInfo internal _povInfo;\\n\\n    /// IERC721Metadata - name\\n    string private _name;\\n\\n    /// IERC721Metadata - symbol\\n    string private _symbol;\\n\\n    uint80 _tag;\\n\\n    /// Contract address\\n    /// To restrict minting function to this address\\n    address private _resolverContractAddress;\\n\\n    // total supply count\\n    Counters.Counter public totalSupply;\\n\\n    /// latitude and longitude precision\\n    int256 public constant POSITION_PRECISION = 100000000;\\n\\n    // ================================================================\\n    //  mappings\\n    // ================================================================\\n\\n    /// PoV - userdata\\n    mapping(uint256 => bytes32) private _userData;\\n\\n    /// PoV - extended\\n    mapping(uint256 => bytes32) private _extended;\\n\\n    /// PoV - experience\\n    mapping(address => uint256) private _experience;\\n\\n    // ================================================================\\n    //  modifiers\\n    // ================================================================\\n\\n    modifier onlyFromResolverContract() {\\n        require(_resolverContractAddress == msg.sender, \\\"PoV: only from resolver contract\\\");\\n        _;\\n    }\\n\\n    // ================================================================\\n    //  constructors\\n    // ================================================================\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     * @notice should be called from child contract\\n     * @param resolverContractAddress address, resolver contract address\\n     */\\n    function _povInit(\\n        address spotOwner,\\n        address resolverContractAddress,\\n        PoVInfo memory povInfo,\\n        uint80 tag\\n    ) internal virtual {\\n        _transferOwnership(spotOwner);\\n        _povInfo = povInfo;\\n        _name = string(abi.encodePacked(_povInfo.name, \\\" - \\\", _povInfo.provider));\\n        _symbol = _initialSymbol();\\n        _resolverContractAddress = resolverContractAddress;\\n        _tag = tag;\\n    }\\n\\n    // ================================================================\\n    //  resolver functions\\n    // ================================================================\\n    function mint(\\n        address to,\\n        uint256 tokenId,\\n        bytes32 extended,\\n        bytes32 userData\\n    ) public virtual override onlyFromResolverContract {\\n        _mint(to, tokenId, extended, userData);\\n        totalSupply.increment();\\n    }\\n\\n    function burn(uint256 tokenId) public virtual override onlyFromResolverContract {\\n        _burn(tokenId);\\n        totalSupply.decrement();\\n    }\\n\\n    /**\\n     * @dev Sets the contract address to allow it to mint token\\n     * @param resolver address, resolver contract address\\n     */\\n    function setResolver(address resolver) external onlyFromResolverContract {\\n        _resolverContractAddress = resolver;\\n    }\\n\\n    /**\\n     * @dev set PoV info\\n     * @notice msg.sender should be pov owner or admin.\\n     * @param poVInfo PoVInfo, PoV info\\n     */\\n    function setPoVInfo(PoVInfo memory poVInfo) external onlyFromResolverContract {\\n        _povInfo = poVInfo;\\n        emit BatchMetadataUpdate(\\n            0x0,\\n            0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n        );\\n    }\\n\\n    // ================================================================\\n    //  user functions\\n    // ================================================================\\n\\n    /**\\n     * @dev See {ERC721-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        if (address(0) == ownerOf(tokenId)) revert(\\\"PoV: URI query for nonexistent token\\\");\\n\\n        // ===============================================================================\\n        // Properties\\n        // ===============================================================================\\n        // separate metadata for avoiding stack too deep error\\n        bytes memory _properties = abi.encodePacked(\\n            '{\\\"name\\\":\\\"',\\n            string(abi.encodePacked(_povInfo.name)),\\n            '\\\",\\\"description\\\":\\\"',\\n            string(abi.encodePacked(_povInfo.description)),\\n            '\\\",\\\"image\\\":\\\"',\\n            string(abi.encodePacked(_povInfo.imageUrl)),\\n            '\\\",\\\"external_url\\\":\\\"',\\n            string(abi.encodePacked(_povInfo.website)),\\n            '\\\",'\\n        );\\n        bytes memory _extraProperties = abi.encodePacked(\\n            '\\\"baseURI\\\":\\\"',\\n            string(abi.encodePacked(_povInfo.baseURI)),\\n            '\\\",',\\n            '\\\"userData\\\":\\\"',\\n            Strings.toHexString(uint256(getUserData(tokenId))),\\n            '\\\",'\\n        );\\n\\n        // ===============================================================================\\n        // Attributes\\n        // ===============================================================================\\n        bytes memory _attributeStart = abi.encodePacked(\\n            '\\\"attributes\\\":[{\\\"trait_type\\\":\\\"provider\\\",\\\"value\\\":\\\"',\\n            string(abi.encodePacked(_povInfo.provider)),\\n            '\\\"},{\\\"trait_type\\\":\\\"spot\\\",\\\"value\\\":\\\"',\\n            Strings.toHexString(uint160(getResolver()), 20),\\n            '\\\"},'\\n        );\\n\\n        // ----------------------------------------\\n        // position\\n        // ----------------------------------------\\n        if (\\n            (SpotResolver(_resolverContractAddress).INVALID_POSITION() != _povInfo.latitude) &&\\n            (SpotResolver(_resolverContractAddress).INVALID_POSITION() != _povInfo.longitude)\\n        ) {\\n            _attributeStart = abi.encodePacked(\\n                _attributeStart,\\n                '{\\\"display_type\\\": \\\"number\\\",\\\"trait_type\\\":\\\"latitude\\\",\\\"value\\\":',\\n                _int2string(_povInfo.latitude),\\n                '},{\\\"display_type\\\": \\\"number\\\",\\\"trait_type\\\":\\\"longitude\\\",\\\"value\\\":',\\n                _int2string(_povInfo.longitude),\\n                \\\"},\\\"\\n            );\\n        }\\n\\n        // ----------------------------------------\\n        // timestamp\\n        // ----------------------------------------\\n        // timestamp : 0x....VVVVVVVVVVVVVVVV............................................\\n        uint64 _timestamp = uint64(uint80(bytes10(getExtended(tokenId))) & 0xFFFFFFFFFFFFFFFF);\\n        if (0 != _timestamp) {\\n            _attributeStart = abi.encodePacked(\\n                _attributeStart,\\n                '{\\\"display_type\\\": \\\"date\\\",\\\"trait_type\\\":\\\"visitedAt\\\",\\\"value\\\":',\\n                Strings.toString(_timestamp),\\n                \\\"},\\\"\\n            );\\n        }\\n        if (0 != _povInfo.start) {\\n            _attributeStart = abi.encodePacked(\\n                _attributeStart,\\n                '{\\\"display_type\\\": \\\"date\\\",\\\"trait_type\\\":\\\"start\\\",\\\"value\\\":',\\n                Strings.toString(_povInfo.start),\\n                \\\"},\\\"\\n            );\\n        }\\n        if (0 != _povInfo.end) {\\n            _attributeStart = abi.encodePacked(\\n                _attributeStart,\\n                '{\\\"display_type\\\": \\\"date\\\",\\\"trait_type\\\":\\\"end\\\",\\\"value\\\":',\\n                Strings.toString(_povInfo.end),\\n                \\\"},\\\"\\n            );\\n        }\\n\\n        // ----------------------------------------\\n        // tag\\n        // ----------------------------------------\\n        bytes memory _attributeTag = abi.encodePacked(\\n            '{\\\"trait_type\\\":\\\"userTag1\\\",\\\"value\\\":\\\"',\\n            _povInfo.tag1,\\n            '\\\"},{\\\"trait_type\\\":\\\"userTag2\\\",\\\"value\\\":\\\"',\\n            _povInfo.tag2,\\n            '\\\"},{\\\"trait_type\\\":\\\"userTag3\\\",\\\"value\\\":\\\"',\\n            _povInfo.tag3,\\n            '\\\"},'\\n        );\\n        bytes16[6] memory _tags = SpotResolver(_resolverContractAddress).getTagAsReadable(_tag);\\n        for (uint256 i = 0; i < _tags.length; i++) {\\n            if (_tags[i] != 0x0) {\\n                _attributeTag = abi.encodePacked(\\n                    _attributeTag,\\n                    '{\\\"value\\\":\\\"',\\n                    _bytesToString(abi.encodePacked(_tags[i])),\\n                    '\\\"},'\\n                );\\n            }\\n        }\\n\\n        // ----------------------------------------\\n        // attribute\\n        // ----------------------------------------\\n        // attribute : 0x....................VV..........................................\\n\\n        SpotAttribute memory _spotAttribute = SpotResolver(_resolverContractAddress)\\n            .parsePoVAttribute(uint16(uint96(bytes12(getExtended(tokenId))) & 0xFFFF));\\n\\n        bytes memory _attributePoV = abi.encodePacked(\\n            '{\\\"trait_type\\\":\\\"Device Type\\\",\\\"value\\\":\\\"',\\n            _bytesToString(abi.encodePacked(_spotAttribute.deviceType)),\\n            '\\\"},{\\\"trait_type\\\":\\\"Sub Type\\\",\\\"value\\\":\\\"',\\n            _bytesToString(abi.encodePacked(_spotAttribute.subType)),\\n            '\\\"},{\\\"trait_type\\\":\\\"Timestamp Type\\\",\\\"value\\\":\\\"',\\n            _bytesToString(abi.encodePacked(_spotAttribute.timestampType)),\\n            '\\\"},{\\\"trait_type\\\":\\\"Signature Type\\\",\\\"value\\\":\\\"',\\n            _bytesToString(abi.encodePacked(_spotAttribute.signatureType)),\\n            '\\\"}]}'\\n        );\\n\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"data:application/json;base64,\\\",\\n                    Base64.encode(\\n                        abi.encodePacked(\\n                            _properties,\\n                            _extraProperties,\\n                            _attributeStart,\\n                            _attributeTag,\\n                            _attributePoV\\n                        )\\n                    )\\n                )\\n            );\\n    }\\n\\n    function contractURI() public view virtual returns (string memory) {\\n        SpotResolver _resolver = SpotResolver(_resolverContractAddress);\\n        // ===============================================================================\\n        // Properties\\n        // ===============================================================================\\n        // separate metadata for avoiding stack too deep error\\n        bytes memory _properties = abi.encodePacked(\\n            '{\\\"name\\\":\\\"',\\n            string(abi.encodePacked(_povInfo.name)),\\n            '\\\",\\\"description\\\":\\\"',\\n            string(abi.encodePacked(_povInfo.description)),\\n            '\\\",\\\"image\\\":\\\"',\\n            string(abi.encodePacked(_povInfo.imageUrl)),\\n            '\\\",\\\"external_url\\\":\\\"',\\n            string(abi.encodePacked(_povInfo.website)),\\n            '\\\",'\\n        );\\n        bytes memory _extraProperties = abi.encodePacked(\\n            '\\\"seller_fee_basis_points\\\":0,',\\n            '\\\"fee_recipient\\\":\\\"',\\n            Strings.toHexString(uint160(_resolver.spotOwnerOf()), 20),\\n            '\\\",'\\n        );\\n\\n        // ===============================================================================\\n        // Attributes\\n        // ===============================================================================\\n        bytes memory _attributeStart = abi.encodePacked(\\n            '\\\"attributes\\\":[{\\\"trait_type\\\":\\\"provider\\\",\\\"value\\\":\\\"',\\n            string(abi.encodePacked(_povInfo.provider)),\\n            '\\\"},{\\\"trait_type\\\":\\\"spot\\\",\\\"value\\\":\\\"',\\n            Strings.toHexString(uint160(getResolver()), 20),\\n            '\\\"},'\\n        );\\n        // ----------------------------------------\\n        // timestamp\\n        // ----------------------------------------\\n        // timestamp : 0x....VVVVVVVVVVVVVVVV............................................\\n        if (0 != _povInfo.start) {\\n            _attributeStart = abi.encodePacked(\\n                _attributeStart,\\n                '{\\\"display_type\\\": \\\"date\\\",\\\"trait_type\\\":\\\"start\\\",\\\"value\\\":',\\n                Strings.toString(_povInfo.start),\\n                \\\"},\\\"\\n            );\\n        }\\n        if (0 != _povInfo.end) {\\n            _attributeStart = abi.encodePacked(\\n                _attributeStart,\\n                '{\\\"display_type\\\": \\\"date\\\",\\\"trait_type\\\":\\\"end\\\",\\\"value\\\":',\\n                Strings.toString(_povInfo.end),\\n                \\\"},\\\"\\n            );\\n        }\\n\\n        // ----------------------------------------\\n        // tag\\n        // ----------------------------------------\\n        bytes memory _attributeTag = abi.encodePacked(\\n            '{\\\"trait_type\\\":\\\"userTag1\\\",\\\"value\\\":\\\"',\\n            _povInfo.tag1,\\n            '\\\"},{\\\"trait_type\\\":\\\"userTag2\\\",\\\"value\\\":\\\"',\\n            _povInfo.tag2,\\n            '\\\"},{\\\"trait_type\\\":\\\"userTag3\\\",\\\"value\\\":\\\"',\\n            _povInfo.tag3,\\n            '\\\"},'\\n        );\\n        bytes16[6] memory _tags = _resolver.getTagAsReadable(_tag);\\n        for (uint256 i = 0; i < _tags.length; i++) {\\n            if (_tags[i] != 0x0) {\\n                _attributeTag = abi.encodePacked(\\n                    _attributeTag,\\n                    '{\\\"value\\\":\\\"',\\n                    _bytesToString(abi.encodePacked(_tags[i])),\\n                    '\\\"},'\\n                );\\n            }\\n        }\\n\\n        // ----------------------------------------\\n        // position\\n        // ----------------------------------------\\n        string memory _latitude = _int2string(_povInfo.latitude);\\n        string memory _longitude = _int2string(_povInfo.longitude);\\n\\n        bytes memory _attributePosision = abi.encodePacked(\\n            '{\\\"display_type\\\": \\\"number\\\",\\\"trait_type\\\":\\\"latitude\\\",\\\"value\\\":',\\n            _latitude,\\n            '},{\\\"display_type\\\": \\\"number\\\",\\\"trait_type\\\":\\\"longitude\\\",\\\"value\\\":',\\n            _longitude,\\n            \\\"}]}\\\"\\n        );\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"data:application/json;base64,\\\",\\n                    Base64.encode(\\n                        abi.encodePacked(\\n                            _properties,\\n                            _extraProperties,\\n                            _attributeStart,\\n                            _attributeTag,\\n                            _attributePosision\\n                        )\\n                    )\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @dev Returns PoV of latitude and longitude\\n     * @return latitude int64, latitude of PoV\\n     * @return longitude int64, longitude of PoV\\n     */\\n    function getPosition() external view returns (int64, int64) {\\n        return (_povInfo.latitude, _povInfo.longitude);\\n    }\\n\\n    /**\\n     * @dev Returns user data\\n     * @param tokenId uint256, token id\\n     * @return userData bytes32, user data\\n     */\\n    function getUserData(uint256 tokenId) public view returns (bytes32) {\\n        return _userData[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns extended data\\n     * @param tokenId uint256, token id\\n     * @return extended uint256, extended\\n     */\\n    function getExtended(uint256 tokenId) public view returns (bytes32) {\\n        return _extended[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns PoV experience\\n     * @param visitor address, visitor address\\n     * @return experience uint256, pov experience\\n     */\\n    function getExperience(address visitor) public view returns (uint256) {\\n        return _experience[visitor];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns resolver contract address\\n     */\\n    function getResolver() public view returns (address) {\\n        return _resolverContractAddress;\\n    }\\n\\n    // ================================================================\\n    //  owner functions\\n    // ================================================================\\n\\n    /**\\n     * @dev set Name of pov\\n     * @notice msg.sender should be pov owner or admin.\\n     * @param __name string calldata, name of pov\\n     */\\n    function setName(string calldata __name) public onlyOwner {\\n        _povInfo.name = __name;\\n        emit BatchMetadataUpdate(\\n            0x0,\\n            0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n        );\\n    }\\n\\n    /**\\n     * @dev set Description of pov\\n     * @notice msg.sender should be pov owner or admin.\\n     * @param description string calldata, description of pov\\n     */\\n    function setDescription(string calldata description) public onlyOwner {\\n        _povInfo.description = description;\\n        emit BatchMetadataUpdate(\\n            0x0,\\n            0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n        );\\n    }\\n\\n    /**\\n     * @dev set Image Url of pov\\n     * @notice msg.sender should be pov owner or admin.\\n     * @param imageUrl string calldata, image of pov\\n     */\\n    function setImage(string calldata imageUrl) public onlyOwner {\\n        _povInfo.imageUrl = imageUrl;\\n        emit BatchMetadataUpdate(\\n            0x0,\\n            0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n        );\\n    }\\n\\n    /**\\n     * @dev set website of pov\\n     * @notice msg.sender should be pov owner or admin.\\n     * @param website string calldata, website of pov\\n     */\\n    function setWebsite(string calldata website) public onlyOwner {\\n        _povInfo.website = website;\\n        emit BatchMetadataUpdate(\\n            0x0,\\n            0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n        );\\n    }\\n\\n    /**\\n     * @dev set provider of pov\\n     * @notice msg.sender should be pov owner or admin.\\n     * @param provider string calldata, provider of pov\\n     */\\n    function setProvider(string calldata provider) public onlyOwner {\\n        _povInfo.provider = provider;\\n        emit BatchMetadataUpdate(\\n            0x0,\\n            0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n        );\\n    }\\n\\n    /**\\n     * @dev set BaseURI of pov\\n     * @notice msg.sender should be pov owner or admin.\\n     * @param baseURI string calldata memory, baseURI of pov\\n     */\\n    function setBaseURI(string calldata baseURI) public onlyOwner {\\n        _povInfo.baseURI = baseURI;\\n        emit BatchMetadataUpdate(\\n            0x0,\\n            0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n        );\\n    }\\n\\n    function changePosition(int64 latitude, int64 longitude) public onlyOwner {\\n        if (latitude < -9000000000 || latitude > 9000000000) revert(\\\"PoV: invalid latitude\\\");\\n        if (longitude < -18000000000 || longitude > 18000000000) revert(\\\"PoV: invalid longitude\\\");\\n        _povInfo.latitude = latitude;\\n        _povInfo.longitude = longitude;\\n        emit BatchMetadataUpdate(\\n            0x0,\\n            0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n        );\\n    }\\n\\n    // ================================================================\\n    //  internal functions\\n    // ================================================================\\n    /**\\n     * @dev mint token (internal)\\n     * @param to address, holder address\\n     * @param tokenId uint256, token id\\n     * @param extended bytes, extended data\\n     * @param userData bytes, user data\\n     */\\n    function _mint(\\n        address to,\\n        uint256 tokenId,\\n        bytes32 extended,\\n        bytes32 userData\\n    ) internal virtual {\\n        if (_povInfo.start != 0 && block.timestamp < uint256(_povInfo.start))\\n            revert(\\\"PoV: Not started yet\\\");\\n        if (_povInfo.end != 0 && uint256(_povInfo.end) < block.timestamp)\\n            revert(\\\"PoV: Already ended\\\");\\n\\n        super._mint(to, tokenId);\\n\\n        _userData[tokenId] = userData;\\n        _extended[tokenId] = extended;\\n        _experience[to] += 1;\\n    }\\n\\n    /**\\n     * @dev burn token (internal)\\n     * @param tokenId uint256, token id\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        address owner = ownerOf(tokenId);\\n\\n        super._burn(tokenId);\\n\\n        delete _userData[tokenId];\\n        delete _extended[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns initial symbol\\n     */\\n    function _initialSymbol() internal pure returns (string memory) {\\n        return \\\"POV\\\";\\n    }\\n\\n    function _int2string(int256 i) internal pure returns (string memory) {\\n        if (i == 0) return \\\"0\\\";\\n        bool negative = i < 0;\\n        uint256 abs = uint256(negative ? -i : i);\\n\\n        return string(abi.encodePacked(negative ? \\\"-\\\" : \\\"\\\", Strings.toString(abs)));\\n    }\\n\\n    /**\\n     * @dev Returns string from bytes\\n     */\\n    function _bytesToString(bytes memory bytesData) internal pure returns (string memory) {\\n        // string size\\n        uint8 size = 0;\\n        for (uint256 i = 0; i < bytesData.length; i++) {\\n            if (bytesData[i] == 0x0) {\\n                size = uint8(i);\\n                break;\\n            }\\n        }\\n        bytes memory _str = new bytes(size);\\n        for (uint256 i = 0; i < size; i++) {\\n            _str[i] = bytesData[i];\\n        }\\n\\n        return string(_str);\\n    }\\n\\n    // ================================================================\\n    //  override functions\\n    // ================================================================\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(ERC721) returns (bool) {\\n        return\\n            interfaceId == type(IPoV).interfaceId ||\\n            interfaceId == type(IERC721Receiver).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes calldata\\n    ) external pure returns (bytes4) {\\n        return IERC721Receiver.onERC721Received.selector;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/lib/RoleControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.13;\\n\\n// Import the OpenZeppelin AccessControl contract\\nimport { AccessControl } from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\n// create a contract that extends the OpenZeppelin AccessControl contract\\ncontract RoleControl is AccessControl {\\n    // Create a bool check to see if a account address has the role admin\\n    function isAdmin(address account) public view virtual returns (bool) {\\n        return hasRole(DEFAULT_ADMIN_ROLE, account);\\n    }\\n\\n    // Create a modifier that can be used in other contract to make a pre-check\\n    // That makes sure that the sender of the transaction (msg.sender)  is a admin\\n    modifier onlyAdmin() {\\n        require(isAdmin(msg.sender), \\\"Restricted to admins.\\\");\\n        _;\\n    }\\n\\n    // Add a user address as a admin\\n    function addAdmin(address account) public virtual onlyAdmin {\\n        grantRole(DEFAULT_ADMIN_ROLE, account);\\n    }\\n\\n    // Delete a user address as a admin\\n    function deleteAdmin(address account) public virtual onlyAdmin {\\n        revokeRole(DEFAULT_ADMIN_ROLE, account);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/lib/RoleControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.13;\\n\\n// Import the OpenZeppelin AccessControl contract\\nimport { AccessControlUpgradeable } from \\\"@openzeppelin-contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\n\\n// create a contract that extends the OpenZeppelin AccessControl contract\\ncontract RoleControlUpgradeable is AccessControlUpgradeable {\\n    // Create a bool check to see if a account address has the role admin\\n    function isAdmin(address account) public view virtual returns (bool) {\\n        return hasRole(DEFAULT_ADMIN_ROLE, account);\\n    }\\n\\n    // Create a modifier that can be used in other contract to make a pre-check\\n    // That makes sure that the sender of the transaction (msg.sender)  is a admin\\n    modifier onlyAdmin() {\\n        require(isAdmin(msg.sender), \\\"Restricted to admins.\\\");\\n        _;\\n    }\\n\\n    // Add a user address as a admin\\n    function addAdmin(address account) public virtual onlyAdmin {\\n        grantRole(DEFAULT_ADMIN_ROLE, account);\\n    }\\n\\n    // Delete a user address as a admin\\n    function deleteAdmin(address account) public virtual onlyAdmin {\\n        revokeRole(DEFAULT_ADMIN_ROLE, account);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/lib/VisitedByTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.13;\\n\\ninterface VisitedByTypes {\\n    event ChangeContractOwner(address indexed oldOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Mint Request\\n     * @param permit MintPermit, permit\\n     * @param visitorV uint8, visitor signature v\\n     * @param visitorR bytes32, visitor signature r\\n     * @param visitorS bytes32, visitor signature s\\n     */\\n    struct MintRequest {\\n        MintPermit permit;\\n        uint8 visitorV;\\n        bytes32 visitorR;\\n        bytes32 visitorS;\\n    }\\n\\n    /**\\n     * @dev Mint Permit\\n     * @param visitor address, visitor address\\n     * @param spotSignatureR bytes32, spot signature r\\n     * @param spotSignatureS bytes32, spot signature s\\n     * @param spotSignatureV uint8, spot signature v\\n     * @param extended bytes32, extended data\\n     * @param userData bytes32, user data\\n     * @param nonce uint256, nonce\\n     * @param deadline uint256, deadline\\n     */\\n    struct MintPermit {\\n        address visitor;\\n        bytes32 spotSignatureR;\\n        bytes32 spotSignatureS;\\n        uint8 spotSignatureV;\\n        bytes32 extended;\\n        bytes32 userData;\\n        uint256 nonce;\\n        uint256 deadline;\\n    }\\n\\n    /**\\n     * @dev Visitor Register Request\\n     * @param permit VisitorRegisterPermit, permit\\n     * @param visitorV uint8, visitor signature v\\n     * @param visitorR bytes32, visitor signature r\\n     * @param visitorS bytes32, visitor signature s\\n     * @param ownerV uint8, owner signature v\\n     * @param ownerR bytes32, owner signature r\\n     * @param ownerS bytes32, owner signature s\\n     */\\n    struct VisitorRegisterRequest {\\n        VisitorRegisterPermit permit;\\n        uint8 visitorV;\\n        bytes32 visitorR;\\n        bytes32 visitorS;\\n        uint8 ownerV;\\n        bytes32 ownerR;\\n        bytes32 ownerS;\\n    }\\n\\n    /**\\n     * @dev Visitor Register Permit\\n     * @param visitor address, visitor address\\n     * @param owner address, owner address\\n     * @param nonce uint256, nonce\\n     * @param deadline uint256, deadline\\n     */\\n    struct VisitorRegisterPermit {\\n        address visitor;\\n        address owner;\\n        uint256 nonce;\\n        uint256 deadline;\\n    }\\n\\n    /**\\n     * @dev Spot Information\\n     * @param name string, name of pov\\n     * @param description string, description of pov\\n     * @param image string, image of pov\\n     * @param website string, url of pov website\\n     * @param provider string, owner of pov\\n     * @param baseURI string, baseURI of pov. if you want to use more information, you should set baseURI on this data.\\n     * @param tag1 string, tag1 of pov by user\\n     * @param tag2 string, tag2 of pov by user\\n     * @param tag3 string, tag3 of pov by user\\n     */\\n    struct SpotInfo {\\n        string name;\\n        string description;\\n        string imageUrl;\\n        string website;\\n        string provider;\\n        string baseURI;\\n        string tag1;\\n        string tag2;\\n        string tag3;\\n    }\\n\\n    /**\\n     * @dev PoV Information\\n     * @param name string, name of pov\\n     * @param description string, description of pov\\n     * @param imageUrl string, image of pov\\n     * @param website string, url of pov website\\n     * @param provider string, owner of pov\\n     * @param latitude int64, latitude of pov\\n     * @param longitude int64, longitude of pov\\n     * @param start uint64, start of pov (unix time) 0 is no limit\\n     * @param end uint64, end of pov (unix time) 0 is no limit\\n     * @param baseURI string, baseURI of pov. if you want to use more information, you should set baseURI on this data.\\n     * @param tag1 string, tag1 of pov by user\\n     * @param tag2 string, tag2 of pov by user\\n     * @param tag3 string, tag3 of pov by user\\n     */\\n    struct PoVInfo {\\n        string name;\\n        string description;\\n        string imageUrl;\\n        string website;\\n        string provider;\\n        int64 latitude;\\n        int64 longitude;\\n        uint64 start;\\n        uint64 end;\\n        string baseURI;\\n        string tag1;\\n        string tag2;\\n        string tag3;\\n    }\\n\\n    /**\\n     * @dev Add PoV Request\\n     * @param permit AddPoVPermit, permit\\n     * @param ownerV uint8, owner signature v\\n     * @param ownerR bytes32, owner signature r\\n     * @param ownerS bytes32, owner signature s\\n     */\\n    struct AddPoVRequest {\\n        AddPoVPermit permit;\\n        uint8 ownerV;\\n        bytes32 ownerR;\\n        bytes32 ownerS;\\n    }\\n\\n    /**\\n     * @dev Add PoV Permit\\n     * @param spotAddress address, spot address\\n     * @param povFactoryID uint256, pov factory id\\n     * @param povInfo PoVInfo, pov information\\n     * @param extraParam bytes, extra parameter\\n     * @param nonce uint256, nonce\\n     * @param deadline uint256, deadline\\n     */\\n    struct AddPoVPermit {\\n        address spotAddress;\\n        uint256 povFactoryID;\\n        PoVInfo povInfo;\\n        bytes extraParam;\\n        uint256 nonce;\\n        uint256 deadline;\\n    }\\n\\n    /**\\n     * @dev set Spot info Request\\n     * @param permit SetSpotInfoPermit, permit\\n     * @param ownerV uint8, owner signature v\\n     * @param ownerR bytes32, owner signature r\\n     * @param ownerS bytes32, owner signature s\\n     */\\n    struct SetSpotInfoRequest {\\n        SetSpotInfoPermit permit;\\n        uint8 ownerV;\\n        bytes32 ownerR;\\n        bytes32 ownerS;\\n    }\\n\\n    /**\\n     * @dev Add Spot Permit\\n     * @param povID uint16, pov id\\n     * @param spotInfo SpotInfo, spot information\\n     * @param nonce uint256, nonce\\n     * @param deadline uint256, deadline\\n     */\\n    struct SetSpotInfoPermit {\\n        address spotAddress;\\n        uint16 povID;\\n        SpotInfo spotInfo;\\n        uint256 nonce;\\n        uint256 deadline;\\n    }\\n\\n    /**\\n     * @dev set PoV info Request\\n     * @param permit SetPoVInfoPermit, permit\\n     * @param ownerV uint8, owner signature v\\n     * @param ownerR bytes32, owner signature r\\n     * @param ownerS bytes32, owner signature s\\n     */\\n    struct SetPoVInfoRequest {\\n        SetPoVInfoPermit permit;\\n        uint8 ownerV;\\n        bytes32 ownerR;\\n        bytes32 ownerS;\\n    }\\n\\n    /**\\n     * @dev Add PoV Permit\\n     * @param povID uint16, pov id\\n     * @param povInfo PoVInfo, pov information\\n     * @param nonce uint256, nonce\\n     * @param deadline uint256, deadline\\n     */\\n    struct SetPoVInfoPermit {\\n        address spotAddress;\\n        uint16 povID;\\n        PoVInfo povInfo;\\n        uint256 nonce;\\n        uint256 deadline;\\n    }\\n\\n    /**\\n     * @dev Spot Attribute\\n     * @param deviceType bytes16, device type\\n     * @param subType bytes16, sub type\\n     * @param timestampType bytes16, timestamp type\\n     * @param signatureType bytes32, signature type\\n     */\\n    struct SpotAttribute {\\n        bytes16 deviceType;\\n        bytes16 subType;\\n        bytes16 timestampType;\\n        bytes32 signatureType;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/lib/interface/IERC5192.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.13;\\nimport { IERC165 } from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\ninterface IERC5192 is IERC165 {\\n    /// @notice Emitted when the locking status is changed to locked.\\n    /// @dev If a token is minted and the status is locked, this event should be emitted.\\n    /// @param tokenId The identifier for a token.\\n    event Locked(uint256 tokenId);\\n\\n    /// @notice Emitted when the locking status is changed to unlocked.\\n    /// @dev If a token is minted and the status is unlocked, this event should be emitted.\\n    /// @param tokenId The identifier for a token.\\n    event Unlocked(uint256 tokenId);\\n\\n    /// @notice Returns the locking status of an Soulbound Token\\n    /// @dev SBTs assigned to zero address are considered invalid, and queries\\n    /// about them do throw.\\n    /// @param tokenId The identifier for an SBT.\\n    function locked(uint256 tokenId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"src/lib/interface/IERC5192Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.13;\\nimport { IERC165Upgradeable } from \\\"@openzeppelin-contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\\\";\\n\\ninterface IERC5192Upgradeable is IERC165Upgradeable {\\n    /// @notice Emitted when the locking status is changed to locked.\\n    /// @dev If a token is minted and the status is locked, this event should be emitted.\\n    /// @param tokenId The identifier for a token.\\n    event Locked(uint256 tokenId);\\n\\n    /// @notice Emitted when the locking status is changed to unlocked.\\n    /// @dev If a token is minted and the status is unlocked, this event should be emitted.\\n    /// @param tokenId The identifier for a token.\\n    event Unlocked(uint256 tokenId);\\n\\n    /// @notice Returns the locking status of an Soulbound Token\\n    /// @dev SBTs assigned to zero address are considered invalid, and queries\\n    /// about them do throw.\\n    /// @param tokenId The identifier for an SBT.\\n    function locked(uint256 tokenId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"src/lib/interface/IPoV.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.13;\\n\\nimport { IERC721Metadata } from \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\n\\nimport { VisitedByTypes } from \\\"@src-root/lib/VisitedByTypes.sol\\\";\\n\\ninterface IPoV is VisitedByTypes {\\n    // ================================================================\\n    //  interfaces\\n    // ================================================================\\n    /**\\n     * @dev Mint token\\n     * @param to address, holder address\\n     * @param tokenId uint256, token id\\n     * @param userData bytes, user data\\n     */\\n    function mint(address to, uint256 tokenId, bytes32 extended, bytes32 userData) external;\\n\\n    /**\\n     * @dev Burn token\\n     * @param tokenId uint256, token id\\n     */\\n    function burn(uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns user data\\n     * @param tokenId uint256, token id\\n     * @return userData bytes32, user data\\n     */\\n    function getUserData(uint256 tokenId) external view returns (bytes32);\\n\\n    /**\\n     * @dev Returns extended data\\n     * @param tokenId uint256, token id\\n     * @return extended uint256, extended\\n     */\\n    function getExtended(uint256 tokenId) external view returns (bytes32);\\n\\n    /**\\n     * @dev Returns PoV experience\\n     * @param visitor address, visitor address\\n     * @return experience uint256, pov experience\\n     */\\n    function getExperience(address visitor) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns resolver contract address\\n     */\\n    function getResolver() external view returns (address);\\n\\n    /**\\n     * @dev Sets the contract address to allow it to mint token\\n     * @param resolver address, resolver contract address\\n     */\\n    function setResolver(address resolver) external;\\n\\n    /**\\n     * @dev set PoV info\\n     * @notice msg.sender should be pov owner or admin.\\n     * @param poVInfo PoVInfo, PoV info\\n     */\\n    function setPoVInfo(PoVInfo memory poVInfo) external;\\n}\\n\"\r\n    },\r\n    \"src/lib/interface/IPoVFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.13;\\n\\nimport { VisitedByTypes } from \\\"@src-root/lib/VisitedByTypes.sol\\\";\\n\\ninterface IPoVFactory is VisitedByTypes {\\n    /**\\n     * @dev create new pov\\n     * @notice msg.sender should be spot owner or admin.\\n     * @param povOwner address, pov owner\\n     * @param resolver address, resolver address\\n     * @param poVInfo pov info\\n     * @param tag uint80, tag\\n     * @param extraParam bytes, extra param(used for factory awesome feature ;')\\n     * @return address, new pov address\\n     */\\n    function createNewPoV(\\n        address povOwner,\\n        address resolver,\\n        PoVInfo memory poVInfo,\\n        uint80 tag,\\n        bytes calldata extraParam\\n    ) external returns (address);\\n\\n    function name() external pure returns (string memory);\\n}\\n\"\r\n    },\r\n    \"src/lib/interface/ISpotResolverFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.13;\\n\\nimport { VisitedByTypes } from \\\"@src-root/lib/VisitedByTypes.sol\\\";\\nimport { SpotResolver } from \\\"@src-root/SpotResolver.sol\\\";\\n\\ninterface ISpotResolverFactory is VisitedByTypes {\\n    /**\\n     * @dev create new Spot resolver\\n     * @notice you can register Spot for your resolver.\\n     * @param admin address, admin address\\n     * @param spotOwner address, Spot owner\\n     * @param spotAddress address, Spot address\\n     * @param spotInfo SpotInfo\\n     * @return address, new Spot resolver address\\n     */\\n    function createNewSpotResolver(\\n        address admin,\\n        address spotOwner,\\n        address spotAddress,\\n        SpotInfo memory spotInfo\\n    ) external returns (address);\\n\\n    function name() external pure returns (string memory);\\n}\\n\"\r\n    },\r\n    \"src/pov/ERC5192/PoV5192.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.13;\\n\\nimport { IERC5192, IERC165 } from \\\"@src-root/lib/interface/IERC5192.sol\\\";\\nimport { PoV, ERC721 } from \\\"@src-root/lib/PoV.sol\\\";\\n\\ncontract PoV5192 is IERC5192, PoV {\\n    // ================================================================\\n    //  mappings\\n    // ================================================================\\n    /// lock mapping\\n    mapping(uint256 => bool) private _lockStatus;\\n\\n    // ================================================================\\n    //  constructors\\n    // ================================================================\\n\\n    constructor(\\n        address spotOwner,\\n        address resolverContractAddress,\\n        PoVInfo memory povInfo,\\n        uint80 tag\\n    ) ERC721(\\\"\\\", \\\"\\\") {\\n        _povInit(spotOwner, resolverContractAddress, povInfo, tag);\\n    }\\n\\n    // ================================================================\\n    //  user functions\\n    // ================================================================\\n\\n    /**\\n     * @dev Returns locked token\\n     * @param tokenId uint256, token id\\n     */\\n    function locked(uint256 tokenId) external view override(IERC5192) returns (bool) {\\n        return _lockStatus[tokenId];\\n    }\\n\\n    // ================================================================\\n    //  override  functions\\n    // ================================================================\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(PoV, IERC165) returns (bool) {\\n        return interfaceId == type(IERC5192).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    // ================================================================\\n    //  prohibited functions\\n    // ================================================================\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address, uint256) public virtual override {\\n        require(msg.sender == address(0), \\\"PoV5192: Not transferable.\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256) public view virtual override returns (address) {\\n        require(msg.sender == address(0), \\\"PoV5192: Not transferable.\\\");\\n\\n        return address(0);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address, bool) public virtual override {\\n        require(msg.sender == address(0), \\\"PoV5192: Not transferable.\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address, address) public view virtual override returns (bool) {\\n        require(msg.sender == address(0), \\\"PoV5192: Not transferable.\\\");\\n\\n        return false;\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address,\\n        address,\\n        uint256\\n    ) public virtual override {\\n        require(msg.sender == address(0), \\\"PoV5192: Not transferable.\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address,\\n        address,\\n        uint256\\n    ) public virtual override {\\n        require(msg.sender == address(0), \\\"PoV5192: Not transferable.\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override {\\n        require(msg.sender == address(0), \\\"PoV5192: Not transferable.\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"src/pov/ERC5192/PoV5192Factory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.13;\\n\\nimport { IPoVFactory } from \\\"@src-root/lib/interface/IPoVFactory.sol\\\";\\nimport { PoV5192 } from \\\"@src-root/pov/ERC5192/PoV5192.sol\\\";\\n\\ncontract PoV5192Factory is IPoVFactory {\\n    // ================================================================\\n    //  user functions\\n    // ================================================================\\n    /**\\n     * @dev create new pov\\n     * @notice you can register PoV for your resolver.\\n     * @param povOwner pov owner address\\n     * @param resolver address, resolver address\\n     * @param poVInfo pov info\\n     * @param tag uint80, tag\\n     * @return address, new pov address\\n     */\\n    function createNewPoV(\\n        address povOwner,\\n        address resolver,\\n        PoVInfo memory poVInfo,\\n        uint80 tag,\\n        bytes calldata\\n    ) external override returns (address) {\\n        PoV5192 pov = new PoV5192(povOwner, resolver, poVInfo, tag);\\n        return address(pov);\\n    }\\n\\n    function name() external pure override returns (string memory) {\\n        return \\\"PoV5192\\\";\\n    }\\n}\\n\"\r\n    },\r\n    \"src/token/VSIT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.13;\\n\\nimport { ERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport { RoleControl } from \\\"@src-root/lib/RoleControl.sol\\\";\\n\\n/**\\n * @title ViSItedToken\\n * ViSItedToken - a contract for ViSItedToken\\n */\\ncontract VSIT is ERC20, RoleControl {\\n    uint256 public constant TOKEN_CAP = 20000000000000000000000000; // 20,000,000 VSIT\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    bytes32 public constant CHARGER_ROLE = keccak256(\\\"CHARGER_ROLE\\\");\\n\\n    modifier onlyMinter() {\\n        require(hasRole(MINTER_ROLE, msg.sender), \\\"VSIT: must have minter role to mint\\\");\\n        _;\\n    }\\n\\n    modifier onlyCharger() {\\n        require(hasRole(CHARGER_ROLE, msg.sender), \\\"VSIT: must have charger role to charge\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Constructor that gives msg.sender all of existing tokens.\\n     */\\n    constructor(address admin, uint256 initialSupply) ERC20(\\\"ViSItedToken\\\", \\\"VSIT\\\") {\\n        _setupRole(DEFAULT_ADMIN_ROLE, admin);\\n        _mint(admin, initialSupply);\\n    }\\n\\n    function mint(address visitor, uint256 amount) public onlyMinter returns (bool) {\\n        if (TOKEN_CAP < totalSupply() + amount) {\\n            return false;\\n        }\\n        _mint(visitor, amount);\\n        return true;\\n    }\\n\\n    function burn(uint256 amount) public onlyAdmin {\\n        _burn(msg.sender, amount);\\n    }\\n\\n    /**\\n     * @dev pay fee\\n     * @param from address\\n     * @param fee uint256\\n     */\\n    function payFee(address from, address to, uint256 fee) public onlyCharger {\\n        _transfer(from, to, (fee * 19) / 20);\\n\\n        // burn 5% of fee\\n        _burn(from, (fee) / 20);\\n    }\\n\\n    function addMinter(address minter) public onlyAdmin {\\n        grantRole(MINTER_ROLE, minter);\\n    }\\n\\n    function deleteMinter(address minter) public onlyAdmin {\\n        revokeRole(MINTER_ROLE, minter);\\n    }\\n\\n    function addCharger(address charger) public onlyAdmin {\\n        grantRole(CHARGER_ROLE, charger);\\n    }\\n\\n    function deleteCharger(address charger) public onlyAdmin {\\n        revokeRole(CHARGER_ROLE, charger);\\n    }\\n\\n    function claim() public onlyAdmin {\\n        _transfer(address(this), msg.sender, balanceOf(address(this)));\\n    }\\n\\n    function claimable() public view returns (uint256) {\\n        return balanceOf(address(this));\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\r\n      \"@openzeppelin/=lib/openzeppelin-contracts/\",\r\n      \"@src-root/=src/\",\r\n      \"@test-root/=test/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"visitedBy\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"ChangeContractOwner\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"visitor\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"spotSignatureR\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"spotSignatureS\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"spotSignatureV\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"extended\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"userData\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct VisitedByTypes.MintPermit\",\"name\":\"permit\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"visitorV\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"visitorR\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"visitorS\",\"type\":\"bytes32\"}],\"internalType\":\"struct VisitedByTypes.MintRequest[]\",\"name\":\"_requests\",\"type\":\"tuple[]\"}],\"name\":\"batchExecute\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"visitor\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"spotSignatureR\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"spotSignatureS\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"spotSignatureV\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"extended\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"userData\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct VisitedByTypes.MintPermit\",\"name\":\"_permit\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"visitorV\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"visitorR\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"visitorS\",\"type\":\"bytes32\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_visitors\",\"type\":\"address[]\"}],\"name\":\"getBatchNonce\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_nonces\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_visitor\",\"type\":\"address\"}],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"visitor\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"spotSignatureR\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"spotSignatureS\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"spotSignatureV\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"extended\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"userData\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct VisitedByTypes.MintPermit\",\"name\":\"_permit\",\"type\":\"tuple\"}],\"name\":\"getTypedDataHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVisitedBy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "VisitedByMinter", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000db094a695a40744edc078bb6ea79371ffae33977", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}