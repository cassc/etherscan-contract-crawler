{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.3) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/exchange/EndemicExchange.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nimport \\\"./mixins/auction/EndemicDutchAuction.sol\\\";\\nimport \\\"./mixins/auction/EndemicReserveAuction.sol\\\";\\nimport \\\"./mixins/EndemicOffer.sol\\\";\\nimport \\\"./mixins/EndemicSale.sol\\\";\\n\\ncontract EndemicExchange is\\n    EndemicDutchAuction,\\n    EndemicReserveAuction,\\n    EndemicOffer,\\n    EndemicSale,\\n    OwnableUpgradeable\\n{\\n    /**\\n     * @notice Initialized Endemic exchange contract\\n     * @dev Only called once\\n     * @param _royaltiesProvider - royalyies provider contract\\n     * @param _paymentManager - payment manager contract address\\n     * @param _feeRecipientAddress - address to receive exchange fees\\n     * @param _approvedSigner - address to sign reserve auction orders\\n     */\\n    function __EndemicExchange_init(\\n        address _royaltiesProvider,\\n        address _paymentManager,\\n        address _feeRecipientAddress,\\n        address _approvedSigner\\n    ) external initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n\\n        _updateDistributorConfiguration(_feeRecipientAddress);\\n        _updateExchangeConfiguration(\\n            _royaltiesProvider,\\n            _paymentManager,\\n            _approvedSigner\\n        );\\n    }\\n\\n    /**\\n     * @notice Updated contract internal configuration, callable by exchange owner\\n     * @param _royaltiesProvider - royalyies provider contract\\n     * @param _paymentManager - payment manager contract address\\n     * @param _feeRecipientAddress - address to receive exchange fees\\n     * @param _approvedSigner - address to sign reserve auction orders\\n     */\\n    function updateConfiguration(\\n        address _royaltiesProvider,\\n        address _paymentManager,\\n        address _feeRecipientAddress,\\n        address _approvedSigner\\n    ) external onlyOwner {\\n        _updateDistributorConfiguration(_feeRecipientAddress);\\n        _updateExchangeConfiguration(\\n            _royaltiesProvider,\\n            _paymentManager,\\n            _approvedSigner\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/exchange/mixins/auction/EndemicDutchAuction.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\nimport \\\"../EndemicExchangeCore.sol\\\";\\nimport \\\"../EndemicFundsDistributor.sol\\\";\\nimport \\\"../EndemicEIP712.sol\\\";\\nimport \\\"../EndemicNonceManager.sol\\\";\\n\\nabstract contract EndemicDutchAuction is\\n    ReentrancyGuardUpgradeable,\\n    EndemicFundsDistributor,\\n    EndemicExchangeCore,\\n    EndemicEIP712,\\n    EndemicNonceManager\\n{\\n    using ECDSA for bytes32;\\n\\n    bytes32 private constant AUCTION_TYPEHASH =\\n        keccak256(\\n            \\\"DutchAuction(uint256 orderNonce,address nftContract,uint256 tokenId,address paymentErc20TokenAddress,uint256 startingPrice,uint256 endingPrice,uint256 startingAt,uint256 duration)\\\"\\n        );\\n\\n    struct DutchAuction {\\n        address seller;\\n        uint256 orderNonce;\\n        address nftContract;\\n        uint256 tokenId;\\n        address paymentErc20TokenAddress;\\n        uint256 startingPrice;\\n        uint256 endingPrice;\\n        uint256 startingAt;\\n        uint256 duration;\\n    }\\n\\n    function bidForDutchAuction(\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s,\\n        DutchAuction calldata auction\\n    ) external payable nonReentrant {\\n        if (block.timestamp < auction.startingAt) revert AuctionNotStarted();\\n        if (auction.seller == msg.sender) revert InvalidCaller();\\n        if (auction.startingPrice <= auction.endingPrice) {\\n            revert InvalidConfiguration();\\n        }\\n        if (auction.duration == 0) {\\n            revert InvalidDuration();\\n        }\\n\\n        _verifySignature(auction, v, r, s);\\n\\n        _requireSupportedPaymentMethod(auction.paymentErc20TokenAddress);\\n\\n        _invalidateNonce(auction.seller, auction.orderNonce);\\n\\n        uint256 currentPrice = _calculateCurrentPrice(\\n            auction.startingPrice,\\n            auction.endingPrice,\\n            auction.startingAt,\\n            auction.duration\\n        );\\n\\n        if (currentPrice == 0) revert InvalidPrice();\\n\\n        (\\n            uint256 makerCut,\\n            uint256 takerCut,\\n            address royaltiesRecipient,\\n            uint256 royaltieFee,\\n            uint256 totalCut\\n        ) = _calculateFees(\\n                auction.paymentErc20TokenAddress,\\n                auction.nftContract,\\n                auction.tokenId,\\n                currentPrice\\n            );\\n\\n        currentPrice = _determinePriceByPaymentMethod(\\n            auction.paymentErc20TokenAddress,\\n            currentPrice,\\n            takerCut\\n        );\\n\\n        _requireSufficientCurrencySupplied(\\n            currentPrice + takerCut,\\n            auction.paymentErc20TokenAddress,\\n            msg.sender\\n        );\\n\\n        IERC721(auction.nftContract).transferFrom(\\n            auction.seller,\\n            msg.sender,\\n            auction.tokenId\\n        );\\n\\n        _distributeFunds(\\n            currentPrice,\\n            makerCut,\\n            totalCut,\\n            royaltieFee,\\n            royaltiesRecipient,\\n            auction.seller,\\n            msg.sender,\\n            auction.paymentErc20TokenAddress\\n        );\\n\\n        emit AuctionSuccessful(\\n            auction.nftContract,\\n            auction.tokenId,\\n            currentPrice,\\n            auction.seller,\\n            msg.sender,\\n            totalCut,\\n            auction.paymentErc20TokenAddress\\n        );\\n    }\\n\\n    function getCurrentPrice(\\n        uint256 startingPrice,\\n        uint256 endingPrice,\\n        uint256 startingAt,\\n        uint256 duration\\n    ) external view returns (uint256) {\\n        return\\n            _calculateCurrentPrice(\\n                startingPrice,\\n                endingPrice,\\n                startingAt,\\n                duration\\n            );\\n    }\\n\\n    function _determinePriceByPaymentMethod(\\n        address paymentErc20TokenAddress,\\n        uint256 currentPriceWithoutFees,\\n        uint256 takerCut\\n    ) internal view returns (uint256) {\\n        //if auction is in ERC20 we use price calculated in moment of method execution\\n        if (paymentErc20TokenAddress != ZERO_ADDRESS) {\\n            return currentPriceWithoutFees;\\n        }\\n\\n        //auction is in ether so we use amount of supplied ethers without taker cut as auction price\\n        uint256 suppliedEtherWithoutFees = msg.value - takerCut;\\n\\n        //amount of supplied ether without buyer fees must not be smaller than the current price without buyer fees\\n        if (suppliedEtherWithoutFees < currentPriceWithoutFees) {\\n            revert UnsufficientCurrencySupplied();\\n        }\\n\\n        return suppliedEtherWithoutFees;\\n    }\\n\\n    function _calculateCurrentPrice(\\n        uint256 startingPrice,\\n        uint256 endingPrice,\\n        uint256 startingAt,\\n        uint256 duration\\n    ) internal view returns (uint256) {\\n        uint256 secondsPassed = 0;\\n\\n        if (block.timestamp > startingAt) {\\n            secondsPassed = block.timestamp - startingAt;\\n        }\\n\\n        // NOTE: We don't use SafeMath (or similar) in this function because\\n        //  all of our public functions carefully cap the maximum values for\\n        //  time (at 64-bits) and currency (at 128-bits). _duration is\\n        //  also known to be non-zero (see the require() statement in\\n        //  _addAuction())\\n        if (secondsPassed >= duration) {\\n            // We've reached the end of the dynamic pricing portion\\n            // of the auction, just return the end price.\\n            return endingPrice;\\n        } else {\\n            // Starting price can be higher than ending price (and often is!), so\\n            // this delta can be negative.\\n            int256 totalPriceChange = int256(endingPrice) -\\n                int256(startingPrice);\\n\\n            // This multiplication can't overflow, _secondsPassed will easily fit within\\n            // 64-bits, and totalPriceChange will easily fit within 128-bits, their product\\n            // will always fit within 256-bits.\\n            int256 currentPriceChange = (totalPriceChange *\\n                int256(secondsPassed)) / int256(duration);\\n\\n            // currentPriceChange can be negative, but if so, will have a magnitude\\n            // less that _startingPrice. Thus, this result will always end up positive.\\n            return uint256(int256(startingPrice) + currentPriceChange);\\n        }\\n    }\\n\\n    function _verifySignature(\\n        DutchAuction calldata auction,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal view {\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                _buildDomainSeparator(),\\n                keccak256(\\n                    abi.encode(\\n                        AUCTION_TYPEHASH,\\n                        auction.orderNonce,\\n                        auction.nftContract,\\n                        auction.tokenId,\\n                        auction.paymentErc20TokenAddress,\\n                        auction.startingPrice,\\n                        auction.endingPrice,\\n                        auction.startingAt,\\n                        auction.duration\\n                    )\\n                )\\n            )\\n        );\\n\\n        if (digest.recover(v, r, s) != auction.seller) {\\n            revert InvalidSignature();\\n        }\\n    }\\n\\n    /**\\n     * @notice See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[1000] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/exchange/mixins/auction/EndemicReserveAuction.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\nimport \\\"../EndemicExchangeCore.sol\\\";\\nimport \\\"../EndemicFundsDistributor.sol\\\";\\nimport \\\"../EndemicEIP712.sol\\\";\\nimport \\\"../EndemicNonceManager.sol\\\";\\n\\nabstract contract EndemicReserveAuction is\\n    EndemicFundsDistributor,\\n    EndemicExchangeCore,\\n    EndemicEIP712,\\n    EndemicNonceManager\\n{\\n    using ECDSA for bytes32;\\n\\n    bytes32 private constant RESERVE_AUCTION_TYPEHASH =\\n        keccak256(\\n            \\\"ReserveAuction(uint256 orderNonce,address nftContract,uint256 tokenId,address paymentErc20TokenAddress,uint256 price,bool isBid)\\\"\\n        );\\n\\n    bytes32 private constant RESERVE_AUCTION_APPROVAL_TYPEHASH =\\n        keccak256(\\n            \\\"ReserveAuctionApproval(address auctionSigner,address bidSigner,uint256 auctionNonce,uint256 bidNonce,address nftContract,uint256 tokenId,address paymentErc20TokenAddress,uint256 auctionPrice,uint256 bidPrice)\\\"\\n        );\\n\\n    struct ReserveAuction {\\n        address signer;\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n        uint256 orderNonce;\\n        address nftContract;\\n        uint256 tokenId;\\n        address paymentErc20TokenAddress;\\n        uint256 price;\\n        bool isBid;\\n    }\\n\\n    struct AuctionFees {\\n        uint256 bidPrice;\\n        uint256 takerFee;\\n        uint256 takerCut;\\n        uint256 makerCut;\\n        uint256 totalCut;\\n        uint256 royaltieFee;\\n        address royaltiesRecipient;\\n    }\\n\\n    function finalizeReserveAuction(\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s,\\n        ReserveAuction calldata auction,\\n        ReserveAuction calldata bid\\n    ) external onlySupportedERC20Payments(auction.paymentErc20TokenAddress) {\\n        if (\\n            auction.isBid ||\\n            !bid.isBid ||\\n            auction.nftContract != bid.nftContract ||\\n            auction.tokenId != bid.tokenId ||\\n            auction.paymentErc20TokenAddress != bid.paymentErc20TokenAddress ||\\n            auction.signer == bid.signer\\n        ) revert InvalidConfiguration();\\n\\n        _verifyApprovalSignature(v, r, s, auction, bid);\\n        _verifySignature(auction);\\n        _verifySignature(bid);\\n\\n        AuctionFees memory auctionFees = _calculateAuctionFees(auction, bid);\\n\\n        if (auction.price + auctionFees.takerCut > bid.price) {\\n            revert UnsufficientCurrencySupplied();\\n        }\\n\\n        _invalidateNonce(auction.signer, auction.orderNonce);\\n        _invalidateNonce(bid.signer, bid.orderNonce);\\n\\n        IERC721(auction.nftContract).transferFrom(\\n            auction.signer,\\n            bid.signer,\\n            auction.tokenId\\n        );\\n\\n        _distributeFunds(\\n            auctionFees.bidPrice,\\n            auctionFees.makerCut,\\n            auctionFees.totalCut,\\n            auctionFees.royaltieFee,\\n            auctionFees.royaltiesRecipient,\\n            auction.signer,\\n            bid.signer,\\n            auction.paymentErc20TokenAddress\\n        );\\n\\n        emit AuctionSuccessful(\\n            auction.nftContract,\\n            auction.tokenId,\\n            auctionFees.bidPrice,\\n            auction.signer,\\n            bid.signer,\\n            auctionFees.totalCut,\\n            auction.paymentErc20TokenAddress\\n        );\\n    }\\n\\n    function _calculateAuctionFees(\\n        ReserveAuction calldata auction,\\n        ReserveAuction calldata bid\\n    ) internal view returns (AuctionFees memory data) {\\n        (data.takerFee, ) = paymentManager.getPaymentMethodFees(\\n            auction.paymentErc20TokenAddress\\n        );\\n        data.bidPrice = (bid.price * MAX_FEE) / (data.takerFee + MAX_FEE);\\n        data.takerCut = _calculateCut(data.takerFee, auction.price);\\n\\n        (\\n            data.makerCut,\\n            ,\\n            data.royaltiesRecipient,\\n            data.royaltieFee,\\n            data.totalCut\\n        ) = _calculateFees(\\n            auction.paymentErc20TokenAddress,\\n            auction.nftContract,\\n            auction.tokenId,\\n            data.bidPrice\\n        );\\n    }\\n\\n    function _verifySignature(ReserveAuction calldata data) internal view {\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                _buildDomainSeparator(),\\n                keccak256(\\n                    abi.encode(\\n                        RESERVE_AUCTION_TYPEHASH,\\n                        data.orderNonce,\\n                        data.nftContract,\\n                        data.tokenId,\\n                        data.paymentErc20TokenAddress,\\n                        data.price,\\n                        data.isBid\\n                    )\\n                )\\n            )\\n        );\\n\\n        if (digest.recover(data.v, data.r, data.s) != data.signer) {\\n            revert InvalidSignature();\\n        }\\n    }\\n\\n    function _verifyApprovalSignature(\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s,\\n        ReserveAuction calldata auction,\\n        ReserveAuction calldata bid\\n    ) internal view {\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                _buildDomainSeparator(),\\n                keccak256(\\n                    abi.encode(\\n                        RESERVE_AUCTION_APPROVAL_TYPEHASH,\\n                        auction.signer,\\n                        bid.signer,\\n                        auction.orderNonce,\\n                        bid.orderNonce,\\n                        auction.nftContract,\\n                        auction.tokenId,\\n                        auction.paymentErc20TokenAddress,\\n                        auction.price,\\n                        bid.price\\n                    )\\n                )\\n            )\\n        );\\n\\n        if (digest.recover(v, r, s) != approvedSigner) {\\n            revert InvalidSignature();\\n        }\\n    }\\n\\n    /**\\n     * @notice See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[500] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/exchange/mixins/EndemicEIP712.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nabstract contract EndemicEIP712 {\\n    bytes32 private constant EIP712_DOMAIN_TYPEHASH =\\n        keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract,bytes32 salt)\\\"\\n        );\\n\\n    bytes32 private constant SALT_HASH = keccak256(\\\"Endemic Exchange Salt\\\");\\n\\n    string private constant DOMAIN_NAME = \\\"Endemic Exchange\\\";\\n\\n    error InvalidSignature();\\n\\n    function _buildDomainSeparator() internal view returns (bytes32) {\\n        return keccak256(\\n            abi.encode(\\n                EIP712_DOMAIN_TYPEHASH,\\n                keccak256(bytes(DOMAIN_NAME)),\\n                keccak256(bytes(\\\"1\\\")),\\n                block.chainid,\\n                address(this),\\n                SALT_HASH\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @notice See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[1000] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/exchange/mixins/EndemicExchangeCore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"../../royalties/interfaces/IRoyaltiesProvider.sol\\\";\\nimport \\\"../../manager/interfaces/IPaymentManager.sol\\\";\\n\\nabstract contract EndemicExchangeCore {\\n    IRoyaltiesProvider public royaltiesProvider;\\n    IPaymentManager public paymentManager;\\n    address public approvedSigner;\\n\\n    uint16 internal constant MAX_FEE = 10000;\\n    address internal constant ZERO_ADDRESS =\\n        address(0x0000000000000000000000000000000000001010);\\n\\n    error InvalidAddress();\\n    error UnsufficientCurrencySupplied();\\n    error InvalidPaymentMethod();\\n    error InvalidCaller();\\n    error InvalidPrice();\\n    error InvalidConfiguration();\\n    error AuctionNotStarted();\\n    error InvalidDuration();\\n\\n    /// @notice Fired when auction is successfully completed\\n    event AuctionSuccessful(\\n        address indexed nftContract,\\n        uint256 indexed tokenId,\\n        uint256 indexed totalPrice,\\n        address seller,\\n        address winner,\\n        uint256 totalFees,\\n        address paymentErc20TokenAddress\\n    );\\n\\n    modifier onlySupportedERC20Payments(address paymentErc20TokenAddress) {\\n        if (\\n            paymentErc20TokenAddress == ZERO_ADDRESS ||\\n            !paymentManager.isPaymentMethodSupported(paymentErc20TokenAddress)\\n        ) revert InvalidPaymentMethod();\\n\\n        _;\\n    }\\n\\n    function _calculateFees(\\n        address paymentMethodAddress,\\n        address nftContract,\\n        uint256 tokenId,\\n        uint256 price\\n    )\\n        internal\\n        view\\n        returns (\\n            uint256 makerCut,\\n            uint256 takerCut,\\n            address royaltiesRecipient,\\n            uint256 royaltieFee,\\n            uint256 totalCut\\n        )\\n    {\\n        (uint256 takerFee, uint256 makerFee) = paymentManager\\n            .getPaymentMethodFees(paymentMethodAddress);\\n\\n        takerCut = _calculateCut(takerFee, price);\\n        makerCut = _calculateCut(makerFee, price);\\n\\n        (royaltiesRecipient, royaltieFee) = royaltiesProvider\\n            .calculateRoyaltiesAndGetRecipient(nftContract, tokenId, price);\\n\\n        totalCut = takerCut + makerCut;\\n    }\\n\\n    function _calculateOfferFees(\\n        address paymentMethodAddress,\\n        address nftContract,\\n        uint256 tokenId,\\n        uint256 price\\n    )\\n        internal\\n        view\\n        returns (\\n            uint256 makerCut,\\n            address royaltiesRecipient,\\n            uint256 royaltieFee,\\n            uint256 totalCut,\\n            uint256 listingPrice\\n        )\\n    {\\n        (uint256 takerFee, uint256 makerFee) = paymentManager\\n            .getPaymentMethodFees(paymentMethodAddress);\\n\\n        listingPrice = (price * MAX_FEE) / (takerFee + MAX_FEE);\\n\\n        uint256 takerCut = price - listingPrice;\\n        makerCut = _calculateCut(makerFee, listingPrice);\\n\\n        (royaltiesRecipient, royaltieFee) = royaltiesProvider\\n            .calculateRoyaltiesAndGetRecipient(\\n                nftContract,\\n                tokenId,\\n                listingPrice\\n            );\\n\\n        totalCut = takerCut + makerCut;\\n    }\\n\\n    function _calculateTakerCut(\\n        address paymentErc20TokenAddress,\\n        uint256 price\\n    ) internal view returns (uint256) {\\n        (uint256 takerFee, ) = paymentManager.getPaymentMethodFees(\\n            paymentErc20TokenAddress\\n        );\\n\\n        return _calculateCut(takerFee, price);\\n    }\\n\\n    function _calculateCut(\\n        uint256 fee,\\n        uint256 amount\\n    ) internal pure returns (uint256) {\\n        return (amount * fee) / MAX_FEE;\\n    }\\n\\n    function _requireSupportedPaymentMethod(\\n        address paymentMethodAddress\\n    ) internal view {\\n        if (paymentMethodAddress == ZERO_ADDRESS) return;\\n\\n        if (!paymentManager.isPaymentMethodSupported(paymentMethodAddress)) {\\n            revert InvalidPaymentMethod();\\n        }\\n    }\\n\\n    function _requireSufficientCurrencySupplied(\\n        uint256 sufficientAmount,\\n        address paymentMethodAddress,\\n        address buyer\\n    ) internal view {\\n        if (paymentMethodAddress == ZERO_ADDRESS) {\\n            _requireSufficientEtherSupplied(sufficientAmount);\\n        } else {\\n            _requireSufficientErc20AmountAvailable(\\n                sufficientAmount,\\n                paymentMethodAddress,\\n                buyer\\n            );\\n        }\\n    }\\n\\n    function _requireSufficientEtherSupplied(\\n        uint256 sufficientAmount\\n    ) internal view {\\n        if (msg.value < sufficientAmount) {\\n            revert UnsufficientCurrencySupplied();\\n        }\\n    }\\n\\n    function _requireSufficientErc20AmountAvailable(\\n        uint256 sufficientAmount,\\n        address paymentMethodAddress,\\n        address buyer\\n    ) internal view {\\n        IERC20 ERC20PaymentToken = IERC20(paymentMethodAddress);\\n\\n        uint256 contractAllowance = ERC20PaymentToken.allowance(\\n            buyer,\\n            address(this)\\n        );\\n        if (contractAllowance < sufficientAmount) {\\n            revert UnsufficientCurrencySupplied();\\n        }\\n\\n        uint256 buyerBalance = ERC20PaymentToken.balanceOf(buyer);\\n        if (buyerBalance < sufficientAmount) {\\n            revert UnsufficientCurrencySupplied();\\n        }\\n    }\\n\\n    function _updateExchangeConfiguration(\\n        address _royaltiesProvider,\\n        address _paymentManager,\\n        address _approvedSigner\\n    ) internal {\\n        if (\\n            _royaltiesProvider == ZERO_ADDRESS ||\\n            _paymentManager == ZERO_ADDRESS\\n        ) revert InvalidAddress();\\n\\n        royaltiesProvider = IRoyaltiesProvider(_royaltiesProvider);\\n        paymentManager = IPaymentManager(_paymentManager);\\n        approvedSigner = _approvedSigner;\\n    }\\n\\n    /**\\n     * @notice See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[999] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/exchange/mixins/EndemicFundsDistributor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nabstract contract EndemicFundsDistributor {\\n    address public feeRecipientAddress;\\n\\n    error FeeTransferFailed();\\n    error RoyaltiesTransferFailed();\\n    error FundsTransferFailed();\\n\\n    function _distributeFunds(\\n        uint256 price,\\n        uint256 makerCut,\\n        uint256 totalCut,\\n        uint256 royaltieFee,\\n        address royaltiesRecipient,\\n        address seller,\\n        address buyer,\\n        address paymentErc20TokenAddress\\n    ) internal {\\n        uint256 sellerProceeds = price - makerCut - royaltieFee;\\n\\n        if (\\n            paymentErc20TokenAddress ==\\n            address(0x0000000000000000000000000000000000001010)\\n        ) {\\n            _distributeEtherFunds(\\n                royaltieFee,\\n                totalCut,\\n                sellerProceeds,\\n                royaltiesRecipient,\\n                seller\\n            );\\n        } else {\\n            _distributeErc20Funds(\\n                royaltieFee,\\n                totalCut,\\n                sellerProceeds,\\n                royaltiesRecipient,\\n                seller,\\n                buyer,\\n                paymentErc20TokenAddress\\n            );\\n        }\\n    }\\n\\n    function _distributeEtherFunds(\\n        uint256 royaltieFee,\\n        uint256 totalCut,\\n        uint256 sellerProceeds,\\n        address royaltiesRecipient,\\n        address seller\\n    ) internal {\\n        if (royaltieFee > 0) {\\n            _transferEtherRoyalties(royaltiesRecipient, royaltieFee);\\n        }\\n\\n        if (totalCut > 0) {\\n            _transferEtherFees(totalCut);\\n        }\\n\\n        _transferEtherFunds(seller, sellerProceeds);\\n    }\\n\\n    function _distributeErc20Funds(\\n        uint256 royaltieFee,\\n        uint256 totalCut,\\n        uint256 sellerProceeds,\\n        address royaltiesRecipient,\\n        address seller,\\n        address buyer,\\n        address paymentErc20TokenAddress\\n    ) internal {\\n        IERC20 ERC20PaymentToken = IERC20(paymentErc20TokenAddress);\\n\\n        if (royaltieFee > 0) {\\n            _transferErc20Royalties(\\n                ERC20PaymentToken,\\n                buyer,\\n                royaltiesRecipient,\\n                royaltieFee\\n            );\\n        }\\n\\n        if (totalCut > 0) {\\n            _transferErc20Fees(ERC20PaymentToken, buyer, totalCut);\\n        }\\n\\n        _transferErc20Funds(ERC20PaymentToken, buyer, seller, sellerProceeds);\\n    }\\n\\n    function _transferEtherFees(uint256 value) internal {\\n        (bool success, ) = payable(feeRecipientAddress).call{value: value}(\\\"\\\");\\n\\n        if (!success) revert FeeTransferFailed();\\n    }\\n\\n    function _transferErc20Fees(\\n        IERC20 ERC20PaymentToken,\\n        address sender,\\n        uint256 value\\n    ) internal {\\n        bool success = ERC20PaymentToken.transferFrom(\\n            sender,\\n            feeRecipientAddress,\\n            value\\n        );\\n\\n        if (!success) revert FeeTransferFailed();\\n    }\\n\\n    function _transferEtherRoyalties(\\n        address royaltiesRecipient,\\n        uint256 royaltiesCut\\n    ) internal {\\n        (bool success, ) = payable(royaltiesRecipient).call{\\n            value: royaltiesCut\\n        }(\\\"\\\");\\n\\n        if (!success) revert RoyaltiesTransferFailed();\\n    }\\n\\n    function _transferErc20Royalties(\\n        IERC20 ERC20PaymentToken,\\n        address royaltiesSender,\\n        address royaltiesRecipient,\\n        uint256 royaltiesCut\\n    ) internal {\\n        bool success = ERC20PaymentToken.transferFrom(\\n            royaltiesSender,\\n            royaltiesRecipient,\\n            royaltiesCut\\n        );\\n\\n        if (!success) revert RoyaltiesTransferFailed();\\n    }\\n\\n    function _transferEtherFunds(address recipient, uint256 value) internal {\\n        (bool success, ) = payable(recipient).call{value: value}(\\\"\\\");\\n\\n        if (!success) revert FundsTransferFailed();\\n    }\\n\\n    function _transferErc20Funds(\\n        IERC20 ERC20PaymentToken,\\n        address sender,\\n        address recipient,\\n        uint256 value\\n    ) internal {\\n        bool success = ERC20PaymentToken.transferFrom(sender, recipient, value);\\n\\n        if (!success) revert FundsTransferFailed();\\n    }\\n\\n    function _updateDistributorConfiguration(\\n        address _feeRecipientAddress\\n    ) internal {\\n        feeRecipientAddress = _feeRecipientAddress;\\n    }\\n\\n    /**\\n     * @notice See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[1000] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/exchange/mixins/EndemicNonceManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\ncontract EndemicNonceManager {\\n    mapping(address user => mapping(uint256 nonce => bool executed)) internal executedUserNonces;\\n\\n    event NonceCanceled(address indexed user, uint256 nonce);\\n\\n    error NonceUsed();\\n\\n    function cancelNonce(uint256 nonce) external {\\n        _invalidateNonce(msg.sender, nonce);\\n\\n        emit NonceCanceled(msg.sender, nonce);\\n    }\\n\\n    function _invalidateNonce(address user, uint256 nonce) internal {\\n        if (executedUserNonces[user][nonce]) revert NonceUsed();\\n\\n        executedUserNonces[user][nonce] = true;\\n    }\\n\\n    /**\\n     * @notice See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[1000] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/exchange/mixins/EndemicOffer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\nimport \\\"./EndemicFundsDistributor.sol\\\";\\nimport \\\"./EndemicExchangeCore.sol\\\";\\nimport \\\"./EndemicEIP712.sol\\\";\\nimport \\\"./EndemicNonceManager.sol\\\";\\n\\nabstract contract EndemicOffer is\\n    ReentrancyGuardUpgradeable,\\n    EndemicFundsDistributor,\\n    EndemicExchangeCore,\\n    EndemicEIP712,\\n    EndemicNonceManager\\n{\\n    using ECDSA for bytes32;\\n\\n    bytes32 private constant OFFER_TYPEHASH =\\n        keccak256(\\n            \\\"Offer(uint256 orderNonce,address nftContract,uint256 tokenId,address paymentErc20TokenAddress,uint256 price,uint256 expiresAt,bool isForCollection)\\\"\\n        );\\n\\n    struct Offer {\\n        address bidder;\\n        uint256 orderNonce;\\n        address nftContract;\\n        uint256 tokenId;\\n        address paymentErc20TokenAddress;\\n        uint256 price;\\n        uint256 expiresAt;\\n        bool isForCollection;\\n    }\\n\\n    event OfferAccepted(\\n        address indexed nftContract,\\n        uint256 indexed tokenId,\\n        address bidder,\\n        address indexed seller,\\n        uint256 price,\\n        uint256 totalFees,\\n        address paymentErc20TokenAddress\\n    );\\n\\n    error InvalidOffer();\\n    error OfferExpired();\\n\\n    function acceptNftOffer(\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s,\\n        Offer calldata offer\\n    )\\n        external\\n        nonReentrant\\n        onlySupportedERC20Payments(offer.paymentErc20TokenAddress)\\n    {\\n        if (offer.isForCollection) revert InvalidOffer();\\n        if (block.timestamp > offer.expiresAt) revert OfferExpired();\\n        if (offer.bidder == msg.sender) revert InvalidCaller();\\n\\n        _verifySignature(v, r, s, offer);\\n\\n        _invalidateNonce(offer.bidder, offer.orderNonce);\\n\\n        _acceptOffer(offer, offer.tokenId);\\n    }\\n\\n    function acceptCollectionOffer(\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s,\\n        Offer calldata offer,\\n        uint256 tokenId\\n    )\\n        external\\n        nonReentrant\\n        onlySupportedERC20Payments(offer.paymentErc20TokenAddress)\\n    {\\n        if (!offer.isForCollection) revert InvalidOffer();\\n        if (block.timestamp > offer.expiresAt) revert OfferExpired();\\n        if (offer.bidder == msg.sender) revert InvalidCaller();\\n\\n        _verifySignature(v, r, s, offer);\\n\\n        _invalidateNonce(offer.bidder, offer.orderNonce);\\n\\n        _acceptOffer(offer, tokenId);\\n    }\\n\\n    function _acceptOffer(Offer calldata offer, uint256 tokenId) internal {\\n        (\\n            uint256 makerCut,\\n            address royaltiesRecipient,\\n            uint256 royaltiesFee,\\n            uint256 totalCut,\\n            uint256 listingPrice\\n        ) = _calculateOfferFees(\\n                offer.paymentErc20TokenAddress,\\n                offer.nftContract,\\n                tokenId,\\n                offer.price\\n            );\\n\\n        IERC721(offer.nftContract).transferFrom(\\n            msg.sender,\\n            offer.bidder,\\n            tokenId\\n        );\\n\\n        _distributeFunds(\\n            listingPrice,\\n            makerCut,\\n            totalCut,\\n            royaltiesFee,\\n            royaltiesRecipient,\\n            msg.sender,\\n            offer.bidder,\\n            offer.paymentErc20TokenAddress\\n        );\\n\\n        emit OfferAccepted(\\n            offer.nftContract,\\n            tokenId,\\n            offer.bidder,\\n            msg.sender,\\n            listingPrice,\\n            totalCut,\\n            offer.paymentErc20TokenAddress\\n        );\\n    }\\n\\n    function _verifySignature(\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s,\\n        Offer calldata offer\\n    ) internal view {\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                _buildDomainSeparator(),\\n                keccak256(\\n                    abi.encode(\\n                        OFFER_TYPEHASH,\\n                        offer.orderNonce,\\n                        offer.nftContract,\\n                        offer.tokenId,\\n                        offer.paymentErc20TokenAddress,\\n                        offer.price,\\n                        offer.expiresAt,\\n                        offer.isForCollection\\n                    )\\n                )\\n            )\\n        );\\n\\n        if (digest.recover(v, r, s) != offer.bidder) {\\n            revert InvalidSignature();\\n        }\\n    }\\n\\n    /**\\n     * @notice See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[500] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/exchange/mixins/EndemicSale.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\nimport \\\"./EndemicFundsDistributor.sol\\\";\\nimport \\\"./EndemicExchangeCore.sol\\\";\\nimport \\\"./EndemicEIP712.sol\\\";\\nimport \\\"./EndemicNonceManager.sol\\\";\\n\\nabstract contract EndemicSale is\\n    ReentrancyGuardUpgradeable,\\n    EndemicFundsDistributor,\\n    EndemicExchangeCore,\\n    EndemicEIP712,\\n    EndemicNonceManager\\n{\\n    using ECDSA for bytes32;\\n\\n    bytes32 private constant SALE_TYPEHASH =\\n        keccak256(\\n            \\\"Sale(uint256 orderNonce,address nftContract,uint256 tokenId,address paymentErc20TokenAddress,uint256 price,address buyer,uint256 expiresAt)\\\"\\n        );\\n\\n    struct Sale {\\n        address seller;\\n        uint256 orderNonce;\\n        address nftContract;\\n        uint256 tokenId;\\n        address paymentErc20TokenAddress;\\n        uint256 price;\\n        address buyer;\\n        uint256 expiresAt;\\n    }\\n\\n    event SaleSuccess(\\n        address indexed nftContract,\\n        uint256 indexed tokenId,\\n        address indexed seller,\\n        address buyer,\\n        uint256 price,\\n        uint256 totalFees,\\n        address paymentErc20TokenAddress\\n    );\\n\\n    error SaleExpired();\\n\\n    function buyFromSale(\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s,\\n        Sale calldata sale\\n    ) external payable nonReentrant {\\n        if (block.timestamp > sale.expiresAt) revert SaleExpired();\\n\\n        if (\\n            (sale.buyer != address(0) && sale.buyer != msg.sender) ||\\n            sale.seller == msg.sender\\n        ) {\\n            revert InvalidCaller();\\n        }\\n\\n        _verifySignature(v, r, s, sale);\\n\\n        uint256 takerCut = _calculateTakerCut(\\n            sale.paymentErc20TokenAddress,\\n            sale.price\\n        );\\n\\n        _requireSupportedPaymentMethod(sale.paymentErc20TokenAddress);\\n        _requireSufficientCurrencySupplied(\\n            sale.price + takerCut,\\n            sale.paymentErc20TokenAddress,\\n            msg.sender\\n        );\\n\\n        _invalidateNonce(sale.seller, sale.orderNonce);\\n\\n        _finalizeSale(\\n            sale.nftContract,\\n            sale.tokenId,\\n            sale.paymentErc20TokenAddress,\\n            sale.seller,\\n            sale.price\\n        );\\n    }\\n\\n    function _finalizeSale(\\n        address nftContract,\\n        uint256 tokenId,\\n        address paymentErc20TokenAddress,\\n        address seller,\\n        uint256 price\\n    ) internal {\\n        (\\n            uint256 makerCut,\\n            ,\\n            address royaltiesRecipient,\\n            uint256 royaltieFee,\\n            uint256 totalCut\\n        ) = _calculateFees(\\n                paymentErc20TokenAddress,\\n                nftContract,\\n                tokenId,\\n                price\\n            );\\n\\n        IERC721(nftContract).transferFrom(seller, msg.sender, tokenId);\\n\\n        _distributeFunds(\\n            price,\\n            makerCut,\\n            totalCut,\\n            royaltieFee,\\n            royaltiesRecipient,\\n            seller,\\n            msg.sender,\\n            paymentErc20TokenAddress\\n        );\\n\\n        emit SaleSuccess(\\n            nftContract,\\n            tokenId,\\n            seller,\\n            msg.sender,\\n            price,\\n            totalCut,\\n            paymentErc20TokenAddress\\n        );\\n    }\\n\\n    function _verifySignature(\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s,\\n        Sale calldata sale\\n    ) internal view {\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                _buildDomainSeparator(),\\n                keccak256(\\n                    abi.encode(\\n                        SALE_TYPEHASH,\\n                        sale.orderNonce,\\n                        sale.nftContract,\\n                        sale.tokenId,\\n                        sale.paymentErc20TokenAddress,\\n                        sale.price,\\n                        sale.buyer,\\n                        sale.expiresAt\\n                    )\\n                )\\n            )\\n        );\\n\\n        if (digest.recover(v, r, s) != sale.seller) {\\n            revert InvalidSignature();\\n        }\\n    }\\n\\n    /**\\n     * @notice See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[1000] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/manager/interfaces/IPaymentManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\ninterface IPaymentManager {\\n    function getPaymentMethodFees(address paymentMethodAddress)\\n        external\\n        view\\n        returns (uint256 takerFee, uint256 makerFee);\\n\\n    function isPaymentMethodSupported(address paymentMethodAddress)\\n        external\\n        view\\n        returns (bool);\\n\\n    function updateSupportedPaymentMethod(\\n        address paymentMethodAddress,\\n        bool isEnabled\\n    ) external;\\n\\n    function updatePaymentMethodFees(\\n        address paymentMethodAddress,\\n        uint256 makerFee,\\n        uint256 takerFee\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/royalties/interfaces/IRoyaltiesProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\ninterface IRoyaltiesProvider {\\n    function calculateRoyaltiesAndGetRecipient(\\n        address nftContract,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) external view returns (address, uint256);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"AuctionNotStarted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeeTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FundsTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidConfiguration\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidDuration\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidOffer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPaymentMethod\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPrice\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSignature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NonceUsed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OfferExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RoyaltiesTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SaleExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnsufficientCurrencySupplied\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"totalPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalFees\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"paymentErc20TokenAddress\",\"type\":\"address\"}],\"name\":\"AuctionSuccessful\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"NonceCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalFees\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"paymentErc20TokenAddress\",\"type\":\"address\"}],\"name\":\"OfferAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalFees\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"paymentErc20TokenAddress\",\"type\":\"address\"}],\"name\":\"SaleSuccess\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_royaltiesProvider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_paymentManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeRecipientAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_approvedSigner\",\"type\":\"address\"}],\"name\":\"__EndemicExchange_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"orderNonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymentErc20TokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiresAt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isForCollection\",\"type\":\"bool\"}],\"internalType\":\"struct EndemicOffer.Offer\",\"name\":\"offer\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"acceptCollectionOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"orderNonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymentErc20TokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiresAt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isForCollection\",\"type\":\"bool\"}],\"internalType\":\"struct EndemicOffer.Offer\",\"name\":\"offer\",\"type\":\"tuple\"}],\"name\":\"acceptNftOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approvedSigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"orderNonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymentErc20TokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startingPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endingPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startingAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"internalType\":\"struct EndemicDutchAuction.DutchAuction\",\"name\":\"auction\",\"type\":\"tuple\"}],\"name\":\"bidForDutchAuction\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"orderNonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymentErc20TokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expiresAt\",\"type\":\"uint256\"}],\"internalType\":\"struct EndemicSale.Sale\",\"name\":\"sale\",\"type\":\"tuple\"}],\"name\":\"buyFromSale\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"cancelNonce\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRecipientAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"orderNonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymentErc20TokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isBid\",\"type\":\"bool\"}],\"internalType\":\"struct EndemicReserveAuction.ReserveAuction\",\"name\":\"auction\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"orderNonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymentErc20TokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isBid\",\"type\":\"bool\"}],\"internalType\":\"struct EndemicReserveAuction.ReserveAuction\",\"name\":\"bid\",\"type\":\"tuple\"}],\"name\":\"finalizeReserveAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startingPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endingPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startingAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"getCurrentPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paymentManager\",\"outputs\":[{\"internalType\":\"contract IPaymentManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltiesProvider\",\"outputs\":[{\"internalType\":\"contract IRoyaltiesProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_royaltiesProvider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_paymentManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeRecipientAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_approvedSigner\",\"type\":\"address\"}],\"name\":\"updateConfiguration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "EndemicExchange", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}