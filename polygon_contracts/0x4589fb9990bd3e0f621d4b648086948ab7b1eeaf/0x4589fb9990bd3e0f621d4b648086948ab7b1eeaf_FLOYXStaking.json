{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/FloyxStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport \\\"./IFloyx.sol\\\";\\r\\nimport \\\"./utils/Ownable.sol\\\";\\r\\nimport \\\"./utils/SafeMath.sol\\\";\\r\\nimport \\\"./utils/ReentrancyGuard.sol\\\";\\r\\n\\r\\nerror StakeTimeNotEnded();\\r\\nerror YouAlreadyStacked();\\r\\nerror InvalidStakingPeriod();\\r\\nerror InsufficientApproval();\\r\\nerror NoStakedTokens();\\r\\n\\r\\n/**\\r\\n * @title FLOYXStaking\\r\\n * @dev A smart contract for staking FLOYX tokens and earning rewards.\\r\\n */\\r\\ncontract FLOYXStaking is Ownable, ReentrancyGuard {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    IFloyx private immutable floyxToken;\\r\\n\\r\\n    struct UserInfo {\\r\\n        uint256 amount;\\r\\n        uint256 stakingEndTime;\\r\\n        uint256 stakingPeriod;\\r\\n        bool initialized;\\r\\n    }\\r\\n\\r\\n    mapping(address => UserInfo) public userInfo;\\r\\n    mapping(uint256 => address[]) private stakedUsersByPeriod;\\r\\n\\r\\n    uint256 public totalStaked;\\r\\n    uint256 private minStakeAmount;\\r\\n    uint256 private rewardRate1;\\r\\n    uint256 private rewardRate2;\\r\\n    uint256 private rewardRate3;\\r\\n    uint256 private period1;\\r\\n    uint256 private period2;\\r\\n    uint256 private period3;\\r\\n    bool public pause;\\r\\n\\r\\n    event Staked(address indexed user, uint256 amount, uint256 stakingPeriod);\\r\\n    event Withdrawn(address indexed user, uint256 amount, uint256 reward);\\r\\n\\r\\n    /**\\r\\n     * @dev Constructor to initialize the contract.\\r\\n     * @param _floyxToken The address of the FLOYX token contract.\\r\\n     */\\r\\n    constructor(address _floyxToken) {\\r\\n        floyxToken = IFloyx(_floyxToken);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the staking periods for the contract.\\r\\n     * @param _lockPeriod1 Duration of staking period 1\\r\\n     * @param _lockPeriod2 Duration of staking period 2\\r\\n     * @param _lockPeriod3 Duration of staking period 3\\r\\n     */\\r\\n\\r\\n    function setPeriodForStake(\\r\\n        uint256 _lockPeriod1,\\r\\n        uint256 _lockPeriod2,\\r\\n        uint256 _lockPeriod3\\r\\n    ) external onlyOwner {\\r\\n        period1 = _lockPeriod1;\\r\\n        period2 = _lockPeriod2;\\r\\n        period3 = _lockPeriod3;\\r\\n    }\\r\\n\\r\\n    /** @dev sets the mminStakeAmount for the contract.\\r\\n     * @param _minStakeAmount is the amount which will be minumum which user can stake\\r\\n     */\\r\\n\\r\\n    function setMinStakeAmount(uint256 _minStakeAmount) external onlyOwner {\\r\\n        minStakeAmount = _minStakeAmount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the reward rates for each staking period.\\r\\n     * @param _rewardRate1 Reward rate for staking period 1 (in percentage).\\r\\n     * @param _rewardRate2 Reward rate for staking period 2 (in percentage).\\r\\n     * @param _rewardRate3 Reward rate for staking period 3 (in percentage).\\r\\n     */\\r\\n\\r\\n    function setReward(\\r\\n        uint256 _rewardRate1,\\r\\n        uint256 _rewardRate2,\\r\\n        uint256 _rewardRate3\\r\\n    ) external onlyOwner {\\r\\n        rewardRate1 = _rewardRate1;\\r\\n        rewardRate2 = _rewardRate2;\\r\\n        rewardRate3 = _rewardRate3;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Pauses or unpauses staking.\\r\\n     * @param _paused Boolean flag to pause/unpause staking.\\r\\n     */\\r\\n\\r\\n    function pauseStake(bool _paused) external onlyOwner {\\r\\n        pause = _paused;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Allows a user to stake tokens for a specified period.\\r\\n     * @param _amount The amount of tokens to stake.\\r\\n     * @param stakingPeriod The chosen staking period in days.\\r\\n     */\\r\\n\\r\\n    function stake(\\r\\n        uint256 _amount,\\r\\n        uint256 stakingPeriod\\r\\n    ) external nonReentrant {\\r\\n        if (\\r\\n            !(stakingPeriod == period1 ||\\r\\n                stakingPeriod == period2 ||\\r\\n                stakingPeriod == period3)\\r\\n        ) {\\r\\n            revert InvalidStakingPeriod();\\r\\n        }\\r\\n\\r\\n        if (minStakeAmount > _amount) {\\r\\n            revert(\\\"Amount must be greater than minStakeAmount\\\");\\r\\n        }\\r\\n\\r\\n        uint256 amount = _amount.mul(1e18);\\r\\n        bool approval = floyxToken.approve(address(this), amount);\\r\\n        if (!approval) {\\r\\n            revert InsufficientApproval();\\r\\n        }\\r\\n        bool success = floyxToken.transferFrom(\\r\\n            msg.sender,\\r\\n            address(this),\\r\\n            amount\\r\\n        );\\r\\n        if (!success) {\\r\\n            revert(\\\"token transfer failed\\\");\\r\\n        }\\r\\n        UserInfo storage user = userInfo[msg.sender];\\r\\n        stakedUsersByPeriod[stakingPeriod].push(msg.sender);\\r\\n        if (user.initialized) {\\r\\n            revert YouAlreadyStacked();\\r\\n        }\\r\\n        user.amount = user.amount.add(amount);\\r\\n        user.stakingEndTime = getCurrentTime().add(stakingPeriod);\\r\\n        user.stakingPeriod = stakingPeriod;\\r\\n        user.initialized = true;\\r\\n        totalStaked = totalStaked.add(amount);\\r\\n        emit Staked(msg.sender, amount, stakingPeriod);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Allows a user to withdraw their staked tokens and rewards.\\r\\n     * @param _wallet The address of the user's wallet.\\r\\n     */\\r\\n\\r\\n    function withdraw(address _wallet) external nonReentrant {\\r\\n        UserInfo storage user = userInfo[_wallet];\\r\\n        if (user.amount == 0) {\\r\\n            revert NoStakedTokens();\\r\\n        }\\r\\n        if (getCurrentTime() < user.stakingEndTime) {\\r\\n            revert StakeTimeNotEnded();\\r\\n        }\\r\\n        uint256 amountToWithdraw = user.amount;\\r\\n        uint256 reward = calculateReward(_wallet);\\r\\n        uint256 amount = amountToWithdraw.add(reward);\\r\\n        // Update the total staked amount\\r\\n        totalStaked = totalStaked.sub(amountToWithdraw);\\r\\n        // Transfer staked tokens and rewards to the user\\r\\n        bool success = floyxToken.transfer(_wallet, amount);\\r\\n        if (!success) {\\r\\n            revert(\\\"token transfer failed\\\");\\r\\n        }\\r\\n        emit Withdrawn(_wallet, amount, reward);\\r\\n        delete userInfo[_wallet];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Calculates the reward amount for a user based on their staking period.\\r\\n     * @param _account The address of the user's wallet.\\r\\n     * @return The calculated reward amount.\\r\\n     */\\r\\n\\r\\n    function calculateReward(address _account) internal view returns (uint256) {\\r\\n        UserInfo storage user = userInfo[_account];\\r\\n        uint256 _amount = user.amount;\\r\\n        uint256 _period = user.stakingPeriod;\\r\\n        uint256 rewardAmount;\\r\\n        if (_period == period1) {\\r\\n            rewardAmount = _amount.mul(rewardRate1).div(100);\\r\\n        } else if (_period == period2) {\\r\\n            rewardAmount = _amount.mul(rewardRate2).div(100);\\r\\n        } else if (_period == period3) {\\r\\n            rewardAmount = _amount.mul(rewardRate3).div(100);\\r\\n        } else {\\r\\n            revert InvalidStakingPeriod();\\r\\n        }\\r\\n        return rewardAmount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Gets the reward amount for a user without withdrawing.\\r\\n     * @param _account The address of the user's wallet.\\r\\n     * @return The calculated reward amount.\\r\\n     */\\r\\n\\r\\n    function getUserRewardAmount(\\r\\n        address _account\\r\\n    ) external view returns (uint256) {\\r\\n        UserInfo storage user = userInfo[_account];\\r\\n        if (!user.initialized) {\\r\\n            return 0;\\r\\n        }\\r\\n        return calculateReward(_account);\\r\\n    }\\r\\n\\r\\n    function getCurrentTime() internal view returns (uint256) {\\r\\n        return block.timestamp;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Gets the staked amount for a user.\\r\\n     * @param _account The address of the user's wallet.\\r\\n     * @return The staked amount.\\r\\n     */\\r\\n\\r\\n    function getStakedAmount(address _account) external view returns (uint256) {\\r\\n        UserInfo storage user = userInfo[_account];\\r\\n        return user.amount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Gets the end time of the staking period for a user.\\r\\n     * @param _account The address of the user's wallet.\\r\\n     * @return The end time of the staking period.\\r\\n     */\\r\\n\\r\\n    function getStakingEndTime(\\r\\n        address _account\\r\\n    ) external view returns (uint256) {\\r\\n        UserInfo storage user = userInfo[_account];\\r\\n        return user.stakingEndTime;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Gets the unallocated amount of FLOYX tokens in the contract.\\r\\n     * @return The unallocated amount of FLOYX tokens.\\r\\n     */\\r\\n\\r\\n    function getUnallocatedAmount() public view returns (uint256) {\\r\\n        return floyxToken.balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Calculates the remaining tokens available for rewards.\\r\\n     * @return The remaining tokens available for rewards.\\r\\n     */\\r\\n\\r\\n    function rewardPool() external view returns (uint256) {\\r\\n        uint256 _amount = getUnallocatedAmount();\\r\\n        return _amount.sub(totalStaked);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Allows the owner to withdraw unallocated tokens from the contract.\\r\\n     * @param _wallet The address where the tokens will be transferred.\\r\\n     * @param _amount The amount of tokens to withdraw.\\r\\n     */\\r\\n\\r\\n    function withdrawUnAllocatedAmount(\\r\\n        address _wallet,\\r\\n        uint256 _amount\\r\\n    ) external onlyOwner nonReentrant {\\r\\n        if (_amount > getUnallocatedAmount()) {\\r\\n            revert(\\\"not sufficient amount available!\\\");\\r\\n        }\\r\\n        bool success = floyxToken.transfer(_wallet, _amount);\\r\\n        if (!success) {\\r\\n            revert(\\\"token transfer failed\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Gets the total staked amount for a specific staking period.\\r\\n     * @param _stakingPeriodInDays The duration of the staking period in days.\\r\\n     * @return The total staked amount for the specified period.\\r\\n     */\\r\\n\\r\\n    function getTotalStakedByPeriod(\\r\\n        uint256 _stakingPeriodInDays\\r\\n    ) external view returns (uint256) {\\r\\n        uint256 totalStakedByPeriod = 0;\\r\\n        address[] memory users = stakedUsersByPeriod[_stakingPeriodInDays];\\r\\n\\r\\n        for (uint256 i = 0; i < users.length; i++) {\\r\\n            address user = users[i];\\r\\n            UserInfo storage userInfos = userInfo[user];\\r\\n            totalStakedByPeriod = totalStakedByPeriod.add(userInfos.amount);\\r\\n        }\\r\\n        return totalStakedByPeriod;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/IFloyx.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\r\\n\\r\\npragma solidity 0.8.18;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IFloyx {\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function mint(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    function transferOwnership(address newOwner) external;\\r\\n\\r\\n    function burn(uint256 amount) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/utils/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\r\\n\\r\\npragma solidity 0.8.18;\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(\\r\\n        address indexed previousOwner,\\r\\n        address indexed newOwner\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _transferOwnership(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        _checkOwner();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if the sender is not the owner.\\r\\n     */\\r\\n    function _checkOwner() internal view virtual {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby disabling any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(\\r\\n            newOwner != address(0),\\r\\n            \\\"Ownable: new owner is the zero address\\\"\\r\\n        );\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\r\\n\\r\\npragma solidity 0.8.18;\\r\\n\\r\\n/**\\r\\n * @dev Contract module that helps prevent reentrant calls to a function.\\r\\n *\\r\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\r\\n * available, which can be applied to functions to make sure there are no nested\\r\\n * (reentrant) calls to them.\\r\\n *\\r\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\r\\n * `nonReentrant` may not call one another. This can be worked around by making\\r\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\r\\n * points to them.\\r\\n *\\r\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\r\\n * to protect against it, check out our blog post\\r\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\r\\n */\\r\\nabstract contract ReentrancyGuard {\\r\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\r\\n    // word because each write operation emits an extra SLOAD to first read the\\r\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\r\\n    // back. This is the compiler's defense against contract upgrades and\\r\\n    // pointer aliasing, and it cannot be disabled.\\r\\n\\r\\n    // The values being non-zero value makes deployment a bit more expensive,\\r\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\r\\n    // amount. Since refunds are capped to a percentage of the total\\r\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\r\\n    // increase the likelihood of the full refund coming into effect.\\r\\n    uint256 private constant _NOT_ENTERED = 1;\\r\\n    uint256 private constant _ENTERED = 2;\\r\\n\\r\\n    uint256 private _status;\\r\\n\\r\\n    constructor() {\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\r\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\r\\n     * function is not supported. It is possible to prevent this from happening\\r\\n     * by making the `nonReentrant` function external, and making it call a\\r\\n     * `private` function that does the actual work.\\r\\n     */\\r\\n    modifier nonReentrant() {\\r\\n        _nonReentrantBefore();\\r\\n        _;\\r\\n        _nonReentrantAfter();\\r\\n    }\\r\\n\\r\\n    function _nonReentrantBefore() private {\\r\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\r\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\r\\n\\r\\n        // Any calls to nonReentrant after this point will fail\\r\\n        _status = _ENTERED;\\r\\n    }\\r\\n\\r\\n    function _nonReentrantAfter() private {\\r\\n        // By storing the original value once again, a refund is triggered (see\\r\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\r\\n     * `nonReentrant` function in the call stack.\\r\\n     */\\r\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\r\\n        return _status == _ENTERED;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/utils/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\r\\n\\r\\npragma solidity 0.8.18;\\r\\n\\r\\n// CAUTION\\r\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\r\\n// because it relies on the compiler's built in overflow checks.\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity's arithmetic operations.\\r\\n *\\r\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\r\\n * now has built in overflow checking.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryAdd(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            uint256 c = a + b;\\r\\n            if (c < a) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function trySub(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b > a) return (false, 0);\\r\\n            return (true, a - b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMul(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n            // benefit is lost if 'b' is also tested.\\r\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n            if (a == 0) return (true, 0);\\r\\n            uint256 c = a * b;\\r\\n            if (c / a != b) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryDiv(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a / b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMod(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a % b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a + b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a * b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a % b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b <= a, errorMessage);\\r\\n            return a - b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a / b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting with custom message when dividing by zero.\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a % b;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_floyxToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidStakingPeriod\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoStakedTokens\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StakeTimeNotEnded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"YouAlreadyStacked\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakingPeriod\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getStakedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getStakingEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakingPeriodInDays\",\"type\":\"uint256\"}],\"name\":\"getTotalStakedByPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnallocatedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getUserRewardAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"pauseStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minStakeAmount\",\"type\":\"uint256\"}],\"name\":\"setMinStakeAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockPeriod1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockPeriod2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockPeriod3\",\"type\":\"uint256\"}],\"name\":\"setPeriodForStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardRate1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardRate2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardRate3\",\"type\":\"uint256\"}],\"name\":\"setReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingPeriod\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingPeriod\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawUnAllocatedAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "FLOYXStaking", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000007067bebfa1720132dfb9373d65b522afbe3a201e", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}