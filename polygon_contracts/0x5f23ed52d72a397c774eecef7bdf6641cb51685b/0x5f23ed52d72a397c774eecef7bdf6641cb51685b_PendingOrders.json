{"SourceCode": "// File: IPredictionPool.sol\r\n\r\npragma solidity ^0.7.4;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ninterface IPredictionPool {\r\n\r\n    function buyWhite(uint256 maxPrice, uint256 payment) external;\r\n\r\n\r\n\r\n    function buyBlack(uint256 maxPrice, uint256 payment) external;\r\n\r\n\r\n\r\n    function sellWhite(uint256 tokensAmount, uint256 minPrice) external;\r\n\r\n\r\n\r\n    function sellBlack(uint256 tokensAmount, uint256 minPrice) external;\r\n\r\n\r\n\r\n    function changeGovernanceAddress(address governanceAddress) external;\r\n\r\n\r\n\r\n    function _whitePrice() external returns (uint256);\r\n\r\n\r\n\r\n    function _blackPrice() external returns (uint256);\r\n\r\n\r\n\r\n    function _whiteBought() external returns (uint256);\r\n\r\n\r\n\r\n    function _blackBought() external returns (uint256);\r\n\r\n\r\n\r\n    function _whiteToken() external returns (address);\r\n\r\n\r\n\r\n    function _blackToken() external returns (address);\r\n\r\n\r\n\r\n    function _thisCollateralization() external returns (address);\r\n\r\n\r\n\r\n    function _eventStarted() external view returns (bool);\r\n\r\n\r\n\r\n    // solhint-disable-next-line func-name-mixedcase\r\n\r\n    function FEE() external returns (uint256);\r\n\r\n\r\n\r\n    function init(\r\n\r\n        address governanceWalletAddress,\r\n\r\n        address eventContractAddress,\r\n\r\n        address controllerWalletAddress,\r\n\r\n        address ordererAddress,\r\n\r\n        bool onlyOrderer\r\n\r\n    ) external;\r\n\r\n\r\n\r\n    function changeFees(\r\n\r\n        uint256 fee,\r\n\r\n        uint256 governanceFee,\r\n\r\n        uint256 controllerFee,\r\n\r\n        uint256 bwAdditionFee\r\n\r\n    ) external;\r\n\r\n\r\n\r\n    function changeOrderer(address newOrderer) external;\r\n\r\n\r\n\r\n    function setOnlyOrderer(bool only) external;\r\n\r\n}\r\n\r\n\r\n// File: Common/Ownable.sol\r\n\r\npragma solidity ^0.7.4;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n\r\n * @title Ownable\r\n\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n\r\n */\r\n\r\nabstract contract Ownable {\r\n\r\n    address private _owner;\r\n\r\n\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n\r\n     * account.\r\n\r\n     */\r\n\r\n    constructor () {\r\n\r\n        _owner = msg.sender;\r\n\r\n        emit OwnershipTransferred(address(0), _owner);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @return the address of the owner.\r\n\r\n     */\r\n\r\n    function owner() public view returns (address) {\r\n\r\n        return _owner;\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Throws if called by any account other than the owner.\r\n\r\n     */\r\n\r\n    modifier onlyOwner() {\r\n\r\n        require(isOwner());\r\n\r\n        _;\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n\r\n     */\r\n\r\n    function isOwner() public view returns (bool) {\r\n\r\n        return msg.sender == _owner;\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n\r\n     * @notice Renouncing to ownership will leave the contract without an owner.\r\n\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n\r\n     * modifier anymore.\r\n\r\n     */\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n\r\n        emit OwnershipTransferred(_owner, address(0));\r\n\r\n        _owner = address(0);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n\r\n     * @param newOwner The address to transfer ownership to.\r\n\r\n     */\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n\r\n        _transferOwnership(newOwner);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Transfers control of the contract to a newOwner.\r\n\r\n     * @param newOwner The address to transfer ownership to.\r\n\r\n     */\r\n\r\n    function _transferOwnership(address newOwner) internal {\r\n\r\n        require(newOwner != address(0));\r\n\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n\r\n        _owner = newOwner;\r\n\r\n    }\r\n\r\n}\r\n// File: Common/IERC20.sol\r\n\r\npragma solidity ^0.7.4;\r\n\r\n\r\n\r\n\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n}\r\n// File: SafeMath.sol\r\n\r\npragma solidity >=0.5.16;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n\r\n * checks.\r\n\r\n *\r\n\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n\r\n * error, which is the standard behavior in high level programming languages.\r\n\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n\r\n * operation overflows.\r\n\r\n *\r\n\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n\r\n * class of bugs, so it's recommended to use it always.\r\n\r\n */\r\n\r\nlibrary SafeMath {\r\n\r\n    /**\r\n\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n\r\n     * overflow.\r\n\r\n     *\r\n\r\n     * Counterpart to Solidity's `+` operator.\r\n\r\n     *\r\n\r\n     * Requirements:\r\n\r\n     * - Addition cannot overflow.\r\n\r\n     */\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n        uint256 c = a + b;\r\n\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n\r\n\r\n        return c;\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n\r\n     * overflow (when the result is negative).\r\n\r\n     *\r\n\r\n     * Counterpart to Solidity's `-` operator.\r\n\r\n     *\r\n\r\n     * Requirements:\r\n\r\n     * - Subtraction cannot overflow.\r\n\r\n     */\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n\r\n     * overflow (when the result is negative).\r\n\r\n     *\r\n\r\n     * Counterpart to Solidity's `-` operator.\r\n\r\n     *\r\n\r\n     * Requirements:\r\n\r\n     * - Subtraction cannot overflow.\r\n\r\n     */\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\r\n        require(b <= a, errorMessage);\r\n\r\n        uint256 c = a - b;\r\n\r\n\r\n\r\n        return c;\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n\r\n     * overflow.\r\n\r\n     *\r\n\r\n     * Counterpart to Solidity's `*` operator.\r\n\r\n     *\r\n\r\n     * Requirements:\r\n\r\n     * - Multiplication cannot overflow.\r\n\r\n     */\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n\r\n        // benefit is lost if 'b' is also tested.\r\n\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n\r\n        if (a == 0) {\r\n\r\n            return 0;\r\n\r\n        }\r\n\r\n\r\n\r\n        uint256 c = a * b;\r\n\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n\r\n\r\n        return c;\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n\r\n     * division by zero. The result is rounded towards zero.\r\n\r\n     *\r\n\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n\r\n     *\r\n\r\n     * Requirements:\r\n\r\n     * - The divisor cannot be zero.\r\n\r\n     */\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n\r\n     * division by zero. The result is rounded towards zero.\r\n\r\n     *\r\n\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n\r\n     *\r\n\r\n     * Requirements:\r\n\r\n     * - The divisor cannot be zero.\r\n\r\n     */\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\r\n        // Solidity only automatically asserts when dividing by 0\r\n\r\n        require(b > 0, errorMessage);\r\n\r\n        uint256 c = a / b;\r\n\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n\r\n\r\n        return c;\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n\r\n     * Reverts when dividing by zero.\r\n\r\n     *\r\n\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n\r\n     *\r\n\r\n     * Requirements:\r\n\r\n     * - The divisor cannot be zero.\r\n\r\n     */\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n\r\n     * Reverts with custom message when dividing by zero.\r\n\r\n     *\r\n\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n\r\n     *\r\n\r\n     * Requirements:\r\n\r\n     * - The divisor cannot be zero.\r\n\r\n     */\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\r\n        require(b != 0, errorMessage);\r\n\r\n        return a % b;\r\n\r\n    }\r\n\r\n}\r\n// File: DSMath.sol\r\n\r\n\r\n\r\n// See <http://www.gnu.org/licenses/>\r\n\r\n\r\n\r\npragma solidity >0.4.13;\r\n\r\n\r\n\r\ncontract DSMath {\r\n\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n\r\n        require((z = x + y) >= x, \"ds-math-add-overflow\");\r\n\r\n    }\r\n\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n\r\n        require((z = x - y) <= x, \"ds-math-sub-underflow\");\r\n\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n\r\n        require(y == 0 || (z = x * y) / y == x, \"ds-math-mul-overflow\");\r\n\r\n    }\r\n\r\n\r\n\r\n    function min(uint x, uint y) internal pure returns (uint z) {\r\n\r\n        return x <= y ? x : y;\r\n\r\n    }\r\n\r\n    function max(uint x, uint y) internal pure returns (uint z) {\r\n\r\n        return x >= y ? x : y;\r\n\r\n    }\r\n\r\n    function imin(int x, int y) internal pure returns (int z) {\r\n\r\n        return x <= y ? x : y;\r\n\r\n    }\r\n\r\n    function imax(int x, int y) internal pure returns (int z) {\r\n\r\n        return x >= y ? x : y;\r\n\r\n    }\r\n\r\n\r\n\r\n    uint constant WAD = 10 ** 18;\r\n\r\n    uint constant RAY = 10 ** 27;\r\n\r\n\r\n\r\n    //rounds to zero if x*y < WAD / 2\r\n\r\n    function wmul(uint x, uint y) internal pure returns (uint z) {\r\n\r\n        z = add(mul(x, y), WAD / 2) / WAD;\r\n\r\n    }\r\n\r\n    //rounds to zero if x*y < WAD / 2\r\n\r\n    function rmul(uint x, uint y) internal pure returns (uint z) {\r\n\r\n        z = add(mul(x, y), RAY / 2) / RAY;\r\n\r\n    }\r\n\r\n    //rounds to zero if x*y < WAD / 2\r\n\r\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\r\n\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n\r\n    }\r\n\r\n    //rounds to zero if x*y < RAY / 2\r\n\r\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\r\n\r\n        z = add(mul(x, RAY), y / 2) / y;\r\n\r\n    }\r\n\r\n\r\n\r\n    // This famous algorithm is called \"exponentiation by squaring\"\r\n\r\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\r\n\r\n    //\r\n\r\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\r\n\r\n    //\r\n\r\n    // These facts are why it works:\r\n\r\n    //\r\n\r\n    //  If n is even, then x^n = (x^2)^(n/2).\r\n\r\n    //  If n is odd,  then x^n = x * x^(n-1),\r\n\r\n    //   and applying the equation for even x gives\r\n\r\n    //    x^n = x * (x^2)^((n-1) / 2).\r\n\r\n    //\r\n\r\n    //  Also, EVM division is flooring and\r\n\r\n    //    floor[(n-1) / 2] = floor[n / 2].\r\n\r\n    //\r\n\r\n    function rpow(uint x, uint n) internal pure returns (uint z) {\r\n\r\n        z = n % 2 != 0 ? x : RAY;\r\n\r\n\r\n\r\n        for (n /= 2; n != 0; n /= 2) {\r\n\r\n            x = rmul(x, x);\r\n\r\n\r\n\r\n            if (n % 2 != 0) {\r\n\r\n                z = rmul(z, x);\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n// File: PendingOrders.sol\r\n\r\npragma solidity ^0.7.4;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract PendingOrders is DSMath, Ownable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n\r\n\r\n    struct Order {\r\n\r\n        /* solhint-disable prettier/prettier */\r\n\r\n        address orderer;    // address of user placing order\r\n\r\n        uint256 amount;     // amount of collateral tokens\r\n\r\n        bool isWhite;       // TRUE for white side, FALSE for black side\r\n\r\n        uint256 eventId;    // order target eventId\r\n\r\n        bool isPending;     // TRUE when placed, FALSE when canceled\r\n\r\n        /* solhint-enable prettier/prettier */\r\n\r\n    }\r\n\r\n\r\n\r\n    // ordersCount count number of orders so far, and is id of very last order\r\n\r\n    uint256 public _ordersCount;\r\n\r\n\r\n\r\n    IERC20 public _collateralToken;\r\n\r\n    IPredictionPool public _predictionPool;\r\n\r\n\r\n\r\n    address public _eventContractAddress;\r\n\r\n\r\n\r\n    // mapping from order ID to Order detail\r\n\r\n    mapping(uint256 => Order) public _orders;\r\n\r\n\r\n\r\n    // mapping from user address to order IDs for that user\r\n\r\n    mapping(address => uint256[]) public _ordersOfUser;\r\n\r\n\r\n\r\n    struct Detail {\r\n\r\n        /* solhint-disable prettier/prettier */\r\n\r\n        uint256 amount;\r\n\r\n        uint256 whiteCollateral;    // total amount of collateral for white side of the event\r\n\r\n        uint256 blackCollateral;    // total amount of collateral for black side of the event\r\n\r\n        uint256 whitePriceBefore;   // price of white token before the event\r\n\r\n        uint256 blackPriceBefore;   // price of black token before the event\r\n\r\n        uint256 whitePriceAfter;    // price of white token after the event\r\n\r\n        uint256 blackPriceAfter;    // price of black token after the event\r\n\r\n        bool isExecuted;            // FALSE before the event, TRUE after the event end\r\n\r\n        bool isStarted;             // FALSE before the event, TRUE after the event start\r\n\r\n        /* solhint-enable prettier/prettier */\r\n\r\n    }\r\n\r\n\r\n\r\n    // mapping from event ID to detail for that event\r\n\r\n    mapping(uint256 => Detail) public _detailForEvent;\r\n\r\n\r\n\r\n    event OrderCreated(uint256 id, address user, uint256 amount);\r\n\r\n    event OrderCanceled(uint256 id, address user);\r\n\r\n    event CollateralWithdrew(uint256 amount, address user);\r\n\r\n    event ContractOwnerChanged(address owner);\r\n\r\n    event EventContractAddressChanged(address eventContract);\r\n\r\n    event FeeWithdrawAddressChanged(address feeAddress);\r\n\r\n    event FeeWithdrew(uint256 amount);\r\n\r\n    event FeeChanged(uint256 number);\r\n\r\n    event AmountExecuted(uint256 amount);\r\n\r\n\r\n\r\n    constructor(\r\n\r\n        address predictionPoolAddress,\r\n\r\n        address collateralTokenAddress,\r\n\r\n        address eventContractAddress\r\n\r\n    ) {\r\n\r\n        require(\r\n\r\n            predictionPoolAddress != address(0),\r\n\r\n            \"SECONDARY POOL ADDRESS SHOULD NOT BE NULL\"\r\n\r\n        );\r\n\r\n        require(\r\n\r\n            collateralTokenAddress != address(0),\r\n\r\n            \"COLLATERAL TOKEN ADDRESS SHOULD NOT BE NULL\"\r\n\r\n        );\r\n\r\n        require(\r\n\r\n            eventContractAddress != address(0),\r\n\r\n            \"EVENT ADDRESS SHOULD NOT BE NULL\"\r\n\r\n        );\r\n\r\n        _predictionPool = IPredictionPool(predictionPoolAddress);\r\n\r\n        _collateralToken = IERC20(collateralTokenAddress);\r\n\r\n        _eventContractAddress = eventContractAddress;\r\n\r\n\r\n\r\n        _collateralToken.approve(\r\n\r\n            address(_predictionPool._thisCollateralization()),\r\n\r\n            type(uint256).max\r\n\r\n        );\r\n\r\n        IERC20(_predictionPool._whiteToken()).approve(\r\n\r\n            _predictionPool._thisCollateralization(),\r\n\r\n            type(uint256).max\r\n\r\n        );\r\n\r\n        IERC20(_predictionPool._blackToken()).approve(\r\n\r\n            _predictionPool._thisCollateralization(),\r\n\r\n            type(uint256).max\r\n\r\n        );\r\n\r\n    }\r\n\r\n\r\n\r\n    // Modifier to ensure call has been made by event contract\r\n\r\n    modifier onlyEventContract() {\r\n\r\n        require(\r\n\r\n            msg.sender == _eventContractAddress,\r\n\r\n            \"CALLER SHOULD BE EVENT CONTRACT\"\r\n\r\n        );\r\n\r\n        _;\r\n\r\n    }\r\n\r\n\r\n\r\n    function createOrder(\r\n\r\n        uint256 _amount,\r\n\r\n        bool _isWhite,\r\n\r\n        uint256 _eventId\r\n\r\n    ) external {\r\n\r\n        require(!_detailForEvent[_eventId].isStarted, \"EVENT ALREADY STARTED\");\r\n\r\n        require(\r\n\r\n            _collateralToken.balanceOf(msg.sender) >= _amount,\r\n\r\n            \"NOT ENOUGH COLLATERAL IN USER ACCOUNT\"\r\n\r\n        );\r\n\r\n        require(\r\n\r\n            _collateralToken.allowance(msg.sender, address(this)) >= _amount,\r\n\r\n            \"NOT ENOUGHT DELEGATED TOKENS\"\r\n\r\n        );\r\n\r\n        require(\r\n\r\n            _ordersOfUser[msg.sender].length <= 10,\r\n\r\n            \"CANNOT HAVE MORE THAN 10 ORDERS FOR A USER SIMULTANEOUSLY\"\r\n\r\n        );\r\n\r\n\r\n\r\n        _orders[_ordersCount] = Order(\r\n\r\n            msg.sender,\r\n\r\n            _amount,\r\n\r\n            _isWhite,\r\n\r\n            _eventId,\r\n\r\n            true\r\n\r\n        );\r\n\r\n\r\n\r\n        /* solhint-disable prettier/prettier */\r\n\r\n        _isWhite\r\n\r\n            ? _detailForEvent[_eventId].whiteCollateral = _detailForEvent[_eventId].whiteCollateral.add(_amount)\r\n\r\n            : _detailForEvent[_eventId].blackCollateral = _detailForEvent[_eventId].blackCollateral.add(_amount);\r\n\r\n        /* solhint-enable prettier/prettier */\r\n\r\n        _ordersOfUser[msg.sender].push(_ordersCount);\r\n\r\n\r\n\r\n        _collateralToken.transferFrom(msg.sender, address(this), _amount);\r\n\r\n        emit OrderCreated(_ordersCount, msg.sender, _amount);\r\n\r\n        _ordersCount += 1;\r\n\r\n    }\r\n\r\n\r\n\r\n    function ordersOfUser(address user)\r\n\r\n        external\r\n\r\n        view\r\n\r\n        returns (uint256[] memory)\r\n\r\n    {\r\n\r\n        return _ordersOfUser[user];\r\n\r\n    }\r\n\r\n\r\n\r\n    function cancelOrder(uint256 orderId) external {\r\n\r\n        Order memory order = _orders[orderId];\r\n\r\n        require(msg.sender == order.orderer, \"NOT YOUR ORDER\");\r\n\r\n\r\n\r\n        require(order.isPending, \"ORDER HAS ALREADY BEEN CANCELED\");\r\n\r\n\r\n\r\n        require(\r\n\r\n            !_detailForEvent[order.eventId].isExecuted,\r\n\r\n            \"The order cannot be canceled - ALREADY EXECUTED\"\r\n\r\n        );\r\n\r\n\r\n\r\n        require(\r\n\r\n            !_detailForEvent[order.eventId].isStarted,\r\n\r\n            \"The order cannot be canceled - EVENT IN PROGRESS\"\r\n\r\n        );\r\n\r\n\r\n\r\n        /* solhint-disable prettier/prettier */\r\n\r\n        order.isWhite\r\n\r\n            ? _detailForEvent[order.eventId].whiteCollateral = _detailForEvent[order.eventId].whiteCollateral.sub(order.amount)\r\n\r\n            : _detailForEvent[order.eventId].blackCollateral = _detailForEvent[order.eventId].blackCollateral.sub(order.amount);\r\n\r\n        /* solhint-enable prettier/prettier */\r\n\r\n        _orders[orderId].isPending = false;\r\n\r\n        _collateralToken.transfer(order.orderer, order.amount);\r\n\r\n        emit OrderCanceled(orderId, msg.sender);\r\n\r\n    }\r\n\r\n\r\n\r\n    function eventStart(uint256 _eventId) external onlyEventContract {\r\n\r\n        // solhint-disable-next-line var-name-mixedcase\r\n\r\n        uint256 MAX_PRICE = 100 * WAD;\r\n\r\n        uint256 forWhite = _detailForEvent[_eventId].whiteCollateral;\r\n\r\n        uint256 forBlack = _detailForEvent[_eventId].blackCollateral;\r\n\r\n        if (forWhite > 0) {\r\n\r\n            _predictionPool.buyWhite(MAX_PRICE, forWhite);\r\n\r\n            // solhint-disable-next-line prettier/prettier\r\n\r\n            _detailForEvent[_eventId].whitePriceBefore = _predictionPool._whitePrice();\r\n\r\n        }\r\n\r\n        if (forBlack > 0) {\r\n\r\n            _predictionPool.buyBlack(MAX_PRICE, forBlack);\r\n\r\n            // solhint-disable-next-line prettier/prettier\r\n\r\n            _detailForEvent[_eventId].blackPriceBefore = _predictionPool._blackPrice();\r\n\r\n        }\r\n\r\n        _detailForEvent[_eventId].isStarted = true;\r\n\r\n    }\r\n\r\n\r\n\r\n    function eventEnd(uint256 _eventId) external onlyEventContract {\r\n\r\n        // solhint-disable-next-line var-name-mixedcase\r\n\r\n        uint256 MIN_PRICE = 0;\r\n\r\n        uint256 ownWhite = IERC20(_predictionPool._whiteToken()).balanceOf(\r\n\r\n            address(this)\r\n\r\n        );\r\n\r\n        uint256 ownBlack = IERC20(_predictionPool._blackToken()).balanceOf(\r\n\r\n            address(this)\r\n\r\n        );\r\n\r\n\r\n\r\n        if (ownWhite > 0) {\r\n\r\n            _predictionPool.sellWhite(ownWhite, MIN_PRICE);\r\n\r\n            // solhint-disable-next-line prettier/prettier\r\n\r\n            _detailForEvent[_eventId].whitePriceAfter = _predictionPool._whitePrice();\r\n\r\n        }\r\n\r\n        if (ownBlack > 0) {\r\n\r\n            _predictionPool.sellBlack(ownBlack, MIN_PRICE);\r\n\r\n            // solhint-disable-next-line prettier/prettier\r\n\r\n            _detailForEvent[_eventId].blackPriceAfter = _predictionPool._blackPrice();\r\n\r\n        }\r\n\r\n        _detailForEvent[_eventId].isExecuted = true;\r\n\r\n    }\r\n\r\n\r\n\r\n    function withdrawCollateral() external returns (uint256) {\r\n\r\n        require(_ordersOfUser[msg.sender].length > 0, \"Account has no orders\");\r\n\r\n\r\n\r\n        // total amount of collateral token that should be returned to user\r\n\r\n        // feeAmount should be subtracted before actual return\r\n\r\n        uint256 totalWithdrawAmount;\r\n\r\n\r\n\r\n        uint256 i = 0;\r\n\r\n        while (i < _ordersOfUser[msg.sender].length) {\r\n\r\n            uint256 _oId = _ordersOfUser[msg.sender][i]; // order ID\r\n\r\n            Order memory order = _orders[_oId];\r\n\r\n            uint256 _eId = order.eventId; // event ID\r\n\r\n            Detail memory eventDetail = _detailForEvent[_eId];\r\n\r\n\r\n\r\n            // calculate and sum up collaterals to be returned\r\n\r\n            // exclude canceled orders, only include executed orders\r\n\r\n            if (order.isPending && eventDetail.isExecuted) {\r\n\r\n                uint256 withdrawAmount = 0;\r\n\r\n                uint256 priceAfter = 0;\r\n\r\n                uint256 priceBefore = 0;\r\n\r\n\r\n\r\n                if (order.isWhite) {\r\n\r\n                    priceBefore = eventDetail.whitePriceBefore;\r\n\r\n                    priceAfter = eventDetail.whitePriceAfter;\r\n\r\n                } else {\r\n\r\n                    priceBefore = eventDetail.blackPriceBefore;\r\n\r\n                    priceAfter = eventDetail.blackPriceAfter;\r\n\r\n                }\r\n\r\n\r\n\r\n                withdrawAmount = order.amount.sub(\r\n\r\n                    wmul(order.amount, _predictionPool.FEE())\r\n\r\n                );\r\n\r\n                withdrawAmount = wdiv(withdrawAmount, priceBefore);\r\n\r\n                withdrawAmount = wmul(withdrawAmount, priceAfter);\r\n\r\n                withdrawAmount = withdrawAmount.sub(\r\n\r\n                    wmul(withdrawAmount, _predictionPool.FEE())\r\n\r\n                );\r\n\r\n                totalWithdrawAmount = totalWithdrawAmount.add(withdrawAmount);\r\n\r\n            }\r\n\r\n\r\n\r\n            // pop IDs of canceled or executed orders from ordersOfUser array\r\n\r\n            if (!_orders[_oId].isPending || eventDetail.isExecuted) {\r\n\r\n                delete _ordersOfUser[msg.sender][i];\r\n\r\n                _ordersOfUser[msg.sender][i] = _ordersOfUser[msg.sender][\r\n\r\n                    _ordersOfUser[msg.sender].length - 1\r\n\r\n                ];\r\n\r\n                _ordersOfUser[msg.sender].pop();\r\n\r\n\r\n\r\n                delete _orders[_oId];\r\n\r\n            } else {\r\n\r\n                i++;\r\n\r\n            }\r\n\r\n        }\r\n\r\n\r\n\r\n        if (totalWithdrawAmount > 0) {\r\n\r\n            _collateralToken.transfer(msg.sender, totalWithdrawAmount.sub(1));\r\n\r\n        }\r\n\r\n\r\n\r\n        emit CollateralWithdrew(totalWithdrawAmount, msg.sender);\r\n\r\n\r\n\r\n        return totalWithdrawAmount;\r\n\r\n    }\r\n\r\n\r\n\r\n    function changeContractOwner(address _newOwnerAddress) external onlyOwner {\r\n\r\n        require(\r\n\r\n            _newOwnerAddress != address(0),\r\n\r\n            \"NEW OWNER ADDRESS SHOULD NOT BE NULL\"\r\n\r\n        );\r\n\r\n        transferOwnership(_newOwnerAddress);\r\n\r\n        emit ContractOwnerChanged(_newOwnerAddress);\r\n\r\n    }\r\n\r\n\r\n\r\n    function changeEventContractAddress(address _newEventAddress)\r\n\r\n        external\r\n\r\n        onlyOwner\r\n\r\n    {\r\n\r\n        require(\r\n\r\n            _newEventAddress != address(0),\r\n\r\n            \"NEW EVENT ADDRESS SHOULD NOT BE NULL\"\r\n\r\n        );\r\n\r\n        _eventContractAddress = _newEventAddress;\r\n\r\n        emit EventContractAddressChanged(_eventContractAddress);\r\n\r\n    }\r\n\r\n\r\n\r\n    function emergencyWithdrawCollateral() public onlyOwner {\r\n\r\n        uint256 balance = _collateralToken.balanceOf(address(this));\r\n\r\n        require(\r\n\r\n            _collateralToken.transfer(msg.sender, balance),\r\n\r\n            \"Unable to transfer\"\r\n\r\n        );\r\n\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"predictionPoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"eventContractAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AmountExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"CollateralWithdrew\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ContractOwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"eventContract\",\"type\":\"address\"}],\"name\":\"EventContractAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"FeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeAddress\",\"type\":\"address\"}],\"name\":\"FeeWithdrawAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FeeWithdrew\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"OrderCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"OrderCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_collateralToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_detailForEvent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"whiteCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blackCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"whitePriceBefore\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blackPriceBefore\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"whitePriceAfter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blackPriceAfter\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isExecuted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isStarted\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_eventContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_orders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"orderer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isWhite\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPending\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_ordersCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_ordersOfUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_predictionPool\",\"outputs\":[{\"internalType\":\"contract IPredictionPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"cancelOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwnerAddress\",\"type\":\"address\"}],\"name\":\"changeContractOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newEventAddress\",\"type\":\"address\"}],\"name\":\"changeEventContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isWhite\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_eventId\",\"type\":\"uint256\"}],\"name\":\"createOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdrawCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_eventId\",\"type\":\"uint256\"}],\"name\":\"eventEnd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_eventId\",\"type\":\"uint256\"}],\"name\":\"eventStart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"ordersOfUser\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PendingOrders", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000dae2f8d931e6710cb5233ffeaabf554b43e1e67000000000000000000000000bb5fcfcc96e9e8e22a1a7c12abba67fdd0f84665000000000000000000000000fd24d008ef2e29d97a99cccbbbd62208ce271753", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://2db1a6ebbee1e829b35629875986fd923bc532025db6320b0bbf8b73c824dd5a"}