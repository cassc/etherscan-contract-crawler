{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Swap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts@4.9.0/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts@4.9.0/token/ERC20/IERC20.sol\\\";\\n\\n// TODO:\u5b50\u306e\u30b3\u30f3\u30c8\u30e9\u30af\u30c8\u304b\u3089paraswap\u306efee\u3092claim\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u305d\u3046\\n\\ncontract SwapContract is Ownable{\\n    event gotTokenTransferProxy(address tokenTransferProxyAddr);\\n    event withdrawn(address tokenAddress, uint256 amount);\\n    event swapped(bool result, uint beforeBalance, uint afterBalance);\\n    event approved(bool result, address token, address self, address target, uint256 amount);\\n    error SwapError(uint256 diffAmount);\\n    constructor() payable {}\\n\\n    // 1000000000000000000\\n    function withdraw(uint amount) external onlyOwner{\\n        require(address(this).balance >= amount, \\\"balance is insufficient\\\");\\n        payable(msg.sender).transfer(amount);\\n        emit withdrawn(address(0), amount);\\n    }\\n    function arbSwap(address proxyContract, address targetToken, bytes memory tx1, bytes memory tx2) external payable onlyOwner {\\n        require(msg.value > 0, \\\"msg.value is too small\\\");\\n        require(tx1.length >= 4, \\\"tx1 is too short\\\");\\n        require(tx2.length >= 4, \\\"tx2 is too short\\\");\\n\\n        // \u30c8\u30fc\u30af\u30f3\u8ee2\u9001\u30d7\u30ed\u30ad\u30b7\u3092\u53d6\u5f97\\n        address tokenTransferProxyAddr = getTokenTransferProxy(proxyContract);\\n        emit gotTokenTransferProxy(tokenTransferProxyAddr);\\n\\n        // approve\\n        bool approveResult = approveToken(targetToken, tokenTransferProxyAddr);\\n        emit approved(approveResult, targetToken, address(this), tokenTransferProxyAddr, type(uint256).max);\\n\\n        (bool success1, bytes memory resultData1) = proxyContract.call{value: msg.value}(tx1);\\n        if (!success1) {\\n            _revertWithData(resultData1);\\n        }\\n        (bool success2, bytes memory resultData2) = proxyContract.call(tx2);\\n        if (!success2){\\n            _revertWithData(resultData2);\\n        }\\n        bool isGoodArb = (address(this).balance >= msg.value);\\n        uint afterBalance = address(this).balance;\\n        emit swapped(isGoodArb, msg.value, afterBalance);\\n        if (!isGoodArb){\\n            revert SwapError(afterBalance - msg.value);\\n        }\\n\\n        // \u9001\u4fe11\\n        payable(msg.sender).transfer(afterBalance);\\n     \\n        // \u9001\u4fe12\\n        IERC20 token = IERC20(targetToken);\\n        uint256 tokenBalance = token.balanceOf(address(this));\\n        if (tokenBalance > 0){\\n            token.transfer(msg.sender, tokenBalance);\\n            emit withdrawn(targetToken, tokenBalance);\\n        }\\n        emit withdrawn(address(0), afterBalance);\\n    }\\n\\n    function getBalance() external view returns (uint) {\\n        return address(this).balance;\\n    }\\n    function getTokenTransferProxy(address proxyContract) internal view returns (address){\\n        // \u30c8\u30fc\u30af\u30f3\u8ee2\u9001\u30d7\u30ed\u30ad\u30b7\u3092\u53d6\u5f97\\n        bytes memory getTokenTransferProxyData = abi.encodeWithSignature(\\\"getTokenTransferProxy()\\\");\\n        (bool successTTP, bytes memory resultTTP) = proxyContract.staticcall(getTokenTransferProxyData);\\n        if (!successTTP) {\\n            _revertWithData(resultTTP);\\n        }\\n        address tokenTransferProxyAddr = abi.decode(resultTTP, (address));\\n        return tokenTransferProxyAddr;\\n    }\\n    function getAllowance(address tokenAddress, address proxyContract) external onlyOwner view returns (uint) {\\n        address tokenTransferProxyAddr = getTokenTransferProxy(proxyContract);\\n        IERC20 token = IERC20(tokenAddress);\\n        uint256 alreadyApproved = token.allowance(address(this), tokenTransferProxyAddr);\\n        return alreadyApproved;\\n    }\\n    function approveToken(address tokenAddress, address approveTarget) internal onlyOwner returns (bool)  {\\n        IERC20 token = IERC20(tokenAddress);\\n        uint256 alreadyApproved = token.allowance(address(this), approveTarget);\\n        if(alreadyApproved >= type(uint256).max) {\\n            return false;\\n        }\\n        bool approveResult = token.approve(approveTarget, type(uint256).max);\\n        require(approveResult, \\\"approve error.\\\");\\n        return true;\\n    }\\n    function _revertWithData(bytes memory data) private pure {\\n        assembly { revert(add(data, 32), mload(data)) }\\n    }\\n    function _returnWithData(bytes memory data) private pure {\\n        assembly { return(add(data, 32), mload(data)) }\\n    }\\n    receive() external payable {}\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts@4.9.0/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts@4.9.0/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts@4.9.0/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"diffAmount\",\"type\":\"uint256\"}],\"name\":\"SwapError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"self\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenTransferProxyAddr\",\"type\":\"address\"}],\"name\":\"gotTokenTransferProxy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"beforeBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"afterBalance\",\"type\":\"uint256\"}],\"name\":\"swapped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proxyContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"targetToken\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"tx1\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"tx2\",\"type\":\"bytes\"}],\"name\":\"arbSwap\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"proxyContract\",\"type\":\"address\"}],\"name\":\"getAllowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SwapContract", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}