{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/OPXStaking_updated.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity >=0.7.0 <0.9.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\n\\r\\ncontract OPXStaking2 is Initializable {\\r\\n    address public owner;\\r\\n    address public TOKEN_CONTRACT_ADDRESS;\\r\\n    address public MAIN_CONTRACT_ADDRESS;\\r\\n\\r\\n    mapping(address => bool) public isGovernor;\\r\\n\\r\\n    event OwnershipTransferred(\\r\\n        address indexed previousOwner,\\r\\n        address indexed newOwner\\r\\n    );\\r\\n\\r\\n    TRC20 internal token20;\\r\\n    CLUB internal club;\\r\\n\\r\\n    uint256 public immatureUnstakeDeduction;\\r\\n    bool public online;\\r\\n\\r\\n    bool public immatureUnstakeEnabled;\\r\\n\\r\\n    Package[] public packages;\\r\\n\\r\\n    mapping(address => mapping(uint256 => Staker)) public stakes;\\r\\n\\r\\n    address feeTo;\\r\\n\\r\\n    mapping(address => StakerStats) public stakerStats;\\r\\n\\r\\n    struct Package {\\r\\n        uint256 amount;\\r\\n        uint256 trxAmount;\\r\\n        uint16 numDays;\\r\\n        uint8 growth;\\r\\n        uint8 tier;\\r\\n        uint8 minimumCyclecount;\\r\\n        bool hidden;\\r\\n        bool nonActiveCanSubscribe;\\r\\n        uint96 stakeFee;\\r\\n        uint96 harvestFee;\\r\\n        uint96 unstakeFee;\\r\\n        uint8[] activePackagesRequired;\\r\\n    }\\r\\n\\r\\n    struct StakerStats {\\r\\n        uint96 totalStaked;\\r\\n        uint96 totalRewards;\\r\\n        uint96 claimedRewards;\\r\\n    }\\r\\n\\r\\n    struct Staker {\\r\\n        uint64 endDate;\\r\\n        uint64 lastClaim;\\r\\n    }\\r\\n\\r\\n    function initialize(\\r\\n        address _owner,\\r\\n        address tokenAddress,\\r\\n        address clubAddress,\\r\\n        address _feeToo\\r\\n    ) external initializer {\\r\\n        owner = _owner;\\r\\n        MAIN_CONTRACT_ADDRESS = clubAddress;\\r\\n        TOKEN_CONTRACT_ADDRESS = tokenAddress;\\r\\n\\r\\n        online = true;\\r\\n        immatureUnstakeDeduction = 70;\\r\\n\\r\\n        token20 = TRC20(TOKEN_CONTRACT_ADDRESS);\\r\\n        club = CLUB(MAIN_CONTRACT_ADDRESS);\\r\\n\\r\\n        feeTo = _feeToo;\\r\\n    }\\r\\n\\r\\n    function setAddress(\\r\\n        uint256 n,\\r\\n        address addr\\r\\n    ) external onlyOwner returns (bool) {\\r\\n        if (n == 1) {\\r\\n            TOKEN_CONTRACT_ADDRESS = addr;\\r\\n            token20 = TRC20(TOKEN_CONTRACT_ADDRESS);\\r\\n        } else if (n == 2) {\\r\\n            MAIN_CONTRACT_ADDRESS = addr;\\r\\n            club = CLUB(MAIN_CONTRACT_ADDRESS);\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function isSubscribedToTier(\\r\\n        address addr,\\r\\n        uint256 tier\\r\\n    ) internal view returns (bool) {\\r\\n        uint256 length = packages.length;\\r\\n        for (uint256 i = 0; i < length; ++i) {\\r\\n            if (\\r\\n                packages[i].tier == tier &&\\r\\n                stakes[addr][i].endDate > block.timestamp\\r\\n            ) return true;\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    function getPackage(\\r\\n        address user,\\r\\n        uint256 index\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (Package memory, uint8[] memory, bool, uint64, uint64)\\r\\n    {\\r\\n        bool canSubscribe = true;\\r\\n\\r\\n        uint256 vip_expiration = club.user_vip_expiration(user);\\r\\n\\r\\n        if (vip_expiration <= block.timestamp) {\\r\\n            for (\\r\\n                uint256 i = 0;\\r\\n                i < packages[index].activePackagesRequired.length;\\r\\n                ++i\\r\\n            ) {\\r\\n                if (\\r\\n                    !isSubscribedToTier(\\r\\n                        user,\\r\\n                        packages[index].activePackagesRequired[i]\\r\\n                    )\\r\\n                ) {\\r\\n                    canSubscribe = false;\\r\\n                    break;\\r\\n                }\\r\\n            }\\r\\n            if (canSubscribe) {\\r\\n                if (!packages[index].nonActiveCanSubscribe) {\\r\\n                    (, , uint32 expiration, ) = club.users(user);\\r\\n                    if (expiration < block.timestamp) {\\r\\n                        canSubscribe = false;\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return (\\r\\n            packages[index],\\r\\n            packages[index].activePackagesRequired,\\r\\n            canSubscribe,\\r\\n            stakes[user][index].endDate,\\r\\n            stakes[user][index].lastClaim\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function makeStake(uint256 index) external payable returns (bool) {\\r\\n        require(online, \\\"Contract is offline.\\\");\\r\\n\\r\\n        require(packages.length > index, \\\"Out of bound.\\\");\\r\\n        Package memory package = packages[index];\\r\\n\\r\\n        require(!package.hidden, \\\"Package is already hidden.\\\");\\r\\n        require(\\r\\n            stakes[msg.sender][index].endDate == 0,\\r\\n            \\\"Claim the package first before staking again.\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            msg.value >= package.trxAmount + package.stakeFee,\\r\\n            \\\"Insufficient amount\\\"\\r\\n        );\\r\\n\\r\\n        payable(feeTo).transfer(package.stakeFee);\\r\\n\\r\\n        uint256 vip_expiration = club.user_vip_expiration(msg.sender);\\r\\n\\r\\n        if (vip_expiration <= block.timestamp) {\\r\\n            if (!package.nonActiveCanSubscribe) {\\r\\n                (, , uint32 expiration, ) = club.users(msg.sender);\\r\\n                require(\\r\\n                    expiration > block.timestamp,\\r\\n                    \\\"Only active members can stake.\\\"\\r\\n                );\\r\\n            }\\r\\n\\r\\n            require(\\r\\n                club.getUserDownlinesLength(msg.sender) >=\\r\\n                    package.minimumCyclecount,\\r\\n                \\\"Minimum cyclecount not met.\\\"\\r\\n            );\\r\\n\\r\\n            uint256 length = package.activePackagesRequired.length;\\r\\n            for (uint256 i = 0; i < length; ++i) {\\r\\n                require(\\r\\n                    isSubscribedToTier(\\r\\n                        msg.sender,\\r\\n                        package.activePackagesRequired[i]\\r\\n                    ),\\r\\n                    \\\"Requirements not met.\\\"\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n\\r\\n        token20.governanceTransfer(msg.sender, address(this), package.amount);\\r\\n\\r\\n        uint256 maturityDate = block.timestamp + (package.numDays * 1 days);\\r\\n        stakes[msg.sender][index].endDate = uint64(maturityDate);\\r\\n\\r\\n        stakerStats[msg.sender].totalStaked += uint96(package.amount);\\r\\n        stakerStats[msg.sender].totalRewards +=\\r\\n            uint96(package.amount) +\\r\\n            uint96((package.amount * package.growth) / 100);\\r\\n\\r\\n        emit Staked(msg.sender, index, maturityDate);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function claim(uint256 index) public payable returns (bool) {\\r\\n        Package memory package = packages[index];\\r\\n        require(msg.value >= package.harvestFee, \\\"Insufficient unstake fee.\\\");\\r\\n        require(packages.length > index, \\\"Out of bound.\\\");\\r\\n\\r\\n        payable(feeTo).transfer(package.harvestFee);\\r\\n\\r\\n        require(\\r\\n            stakes[msg.sender][index].endDate != 0,\\r\\n            \\\"You haven't bought this package yet.\\\"\\r\\n        );\\r\\n        require(\\r\\n            block.timestamp < stakes[msg.sender][index].endDate,\\r\\n            \\\"Unstake the package.\\\"\\r\\n        );\\r\\n\\r\\n        uint256 duration = package.numDays * 1 days;\\r\\n\\r\\n        uint256 startDate = stakes[msg.sender][index].endDate - duration;\\r\\n\\r\\n        uint256 lastClaimTime = startDate > stakes[msg.sender][index].lastClaim\\r\\n            ? startDate\\r\\n            : stakes[msg.sender][index].lastClaim;\\r\\n\\r\\n        require(\\r\\n            block.timestamp - lastClaimTime > 1 days,\\r\\n            \\\"You can only claim daily.\\\"\\r\\n        );\\r\\n\\r\\n        uint256 totalReturn = package.amount +\\r\\n            ((package.amount * package.growth) / 100);\\r\\n\\r\\n        uint256 transferAmount = (totalReturn *\\r\\n            (block.timestamp - lastClaimTime)) / duration;\\r\\n\\r\\n        token20.transfer(msg.sender, transferAmount);\\r\\n\\r\\n        stakes[msg.sender][index].lastClaim = uint64(block.timestamp);\\r\\n\\r\\n        stakerStats[msg.sender].claimedRewards += uint96(transferAmount);\\r\\n\\r\\n        emit Claim(msg.sender, index);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function unstake(uint256 index) public payable returns (bool) {\\r\\n        require(packages.length > index, \\\"Out of bound.\\\");\\r\\n        Package memory package = packages[index];\\r\\n\\r\\n        require(\\r\\n            stakes[msg.sender][index].endDate != 0,\\r\\n            \\\"You haven't bought this package yet.\\\"\\r\\n        );\\r\\n        require(msg.value >= package.unstakeFee, \\\"Insufficient unstake fee.\\\");\\r\\n        payable(feeTo).transfer(package.unstakeFee);\\r\\n\\r\\n        require(\\r\\n            stakes[msg.sender][index].endDate < block.timestamp,\\r\\n            \\\"You can't unstake yet.\\\"\\r\\n        );\\r\\n\\r\\n        uint256 duration = package.numDays * 1 days;\\r\\n\\r\\n        uint256 startDate = stakes[msg.sender][index].endDate - duration;\\r\\n\\r\\n        uint256 lastClaimTime = startDate > stakes[msg.sender][index].lastClaim\\r\\n            ? startDate\\r\\n            : stakes[msg.sender][index].lastClaim;\\r\\n\\r\\n        uint256 time = block.timestamp > stakes[msg.sender][index].endDate\\r\\n            ? stakes[msg.sender][index].endDate\\r\\n            : block.timestamp;\\r\\n\\r\\n        payable(msg.sender).transfer(package.trxAmount);\\r\\n\\r\\n        uint256 totalReturn = package.amount +\\r\\n            ((package.amount * package.growth) / 100);\\r\\n\\r\\n        uint256 transferAmount = (totalReturn * (time - lastClaimTime)) /\\r\\n            duration;\\r\\n\\r\\n        token20.transfer(msg.sender, transferAmount);\\r\\n\\r\\n        stakerStats[msg.sender].claimedRewards += uint96(transferAmount);\\r\\n\\r\\n        stakes[msg.sender][index].endDate = 0;\\r\\n\\r\\n        emit Unstaked(msg.sender, index);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    event Staked(\\r\\n        address indexed staker,\\r\\n        uint256 indexed id,\\r\\n        uint256 maturityDate\\r\\n    );\\r\\n    event Unstaked(address indexed staker, uint256 indexed id);\\r\\n    event Claim(address indexed staker, uint256 indexed id);\\r\\n\\r\\n    // Operators\\r\\n\\r\\n    function addPackage(\\r\\n        uint256 amount,\\r\\n        uint256 trxAmount,\\r\\n        uint8 growth,\\r\\n        uint16 numDays,\\r\\n        uint8 tier,\\r\\n        uint8 minimumCyclecount,\\r\\n        uint8[] memory activePackagesRequired,\\r\\n        bool nonActiveCanSubscribe,\\r\\n        uint96 stakeFee,\\r\\n        uint96 harvestFee,\\r\\n        uint96 unstakeFee\\r\\n    ) public onlyGovernors returns (bool) {\\r\\n        packages.push(\\r\\n            Package(\\r\\n                amount,\\r\\n                trxAmount,\\r\\n                numDays,\\r\\n                growth,\\r\\n                tier,\\r\\n                minimumCyclecount,\\r\\n                false,\\r\\n                nonActiveCanSubscribe,\\r\\n                stakeFee,\\r\\n                harvestFee,\\r\\n                unstakeFee,\\r\\n                activePackagesRequired\\r\\n            )\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function tweakPackage(\\r\\n        uint256 packageID,\\r\\n        uint256 index,\\r\\n        uint256 newValue\\r\\n    ) public onlyGovernors {\\r\\n        if (index == 1) {\\r\\n            packages[packageID].amount = newValue;\\r\\n        } else if (index == 2) {\\r\\n            packages[packageID].trxAmount = newValue;\\r\\n        } else if (index == 3) {\\r\\n            packages[packageID].growth = uint8(newValue);\\r\\n        } else if (index == 4) {\\r\\n            packages[packageID].numDays = uint16(newValue);\\r\\n        } else if (index == 5) {\\r\\n            packages[packageID].tier = uint8(newValue);\\r\\n        } else if (index == 6) {\\r\\n            packages[packageID].minimumCyclecount = uint8(newValue);\\r\\n        } else if (index == 7) {\\r\\n            packages[packageID].hidden = newValue == 1;\\r\\n        } else if (index == 8) {\\r\\n            packages[packageID].nonActiveCanSubscribe = newValue == 1;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function tweakPackageMultiple(\\r\\n        uint256 packageID,\\r\\n        uint256[] memory indexes,\\r\\n        uint256[] memory values\\r\\n    ) public onlyGovernors returns (bool) {\\r\\n        uint256 length = indexes.length;\\r\\n        uint256 index;\\r\\n        for (uint256 i = 0; i < length; ++i) {\\r\\n            index = indexes[i];\\r\\n            if (index == 1) {\\r\\n                packages[packageID].amount = values[i];\\r\\n            } else if (index == 2) {\\r\\n                packages[packageID].trxAmount = values[i];\\r\\n            } else if (index == 3) {\\r\\n                packages[packageID].growth = uint8(values[i]);\\r\\n            } else if (index == 4) {\\r\\n                packages[packageID].numDays = uint16(values[i]);\\r\\n            } else if (index == 5) {\\r\\n                packages[packageID].tier = uint8(values[i]);\\r\\n            } else if (index == 6) {\\r\\n                packages[packageID].minimumCyclecount = uint8(values[i]);\\r\\n            } else if (index == 7) {\\r\\n                packages[packageID].hidden = values[i] == 1;\\r\\n            } else if (index == 8) {\\r\\n                packages[packageID].nonActiveCanSubscribe = values[i] == 1;\\r\\n            } else if (index == 9) {\\r\\n                packages[packageID].stakeFee = uint96(values[i]);\\r\\n            } else if (index == 10) {\\r\\n                packages[packageID].harvestFee = uint96(values[i]);\\r\\n            } else if (index == 11) {\\r\\n                packages[packageID].unstakeFee = uint96(values[i]);\\r\\n            }\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function tweakActivePackagesRequired(\\r\\n        uint256 packageID,\\r\\n        uint8[] memory activePackagesRequired\\r\\n    ) public onlyGovernors returns (bool) {\\r\\n        packages[packageID].activePackagesRequired = activePackagesRequired;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function setOnline(bool value) public onlyGovernors returns (bool) {\\r\\n        online = value;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function tweakSettings(uint256 index, uint256 value) public onlyGovernors {\\r\\n        if (index == 1) {\\r\\n            immatureUnstakeDeduction = value;\\r\\n        } else if (index == 2) {\\r\\n            immatureUnstakeEnabled = value == 1;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function withdrawToken(uint256 amount) external onlyOwner returns (bool) {\\r\\n        token20.transfer(msg.sender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function withdrawTrx(uint256 amount) external onlyOwner returns (bool) {\\r\\n        payable(owner).transfer(amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(msg.sender == owner);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyGovernors() {\\r\\n        require(\\r\\n            isGovernor[msg.sender] == true || msg.sender == owner,\\r\\n            \\\"Not a governor.\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function giveGovernance(address governor) public onlyOwner {\\r\\n        isGovernor[governor] = true;\\r\\n    }\\r\\n\\r\\n    function revokeGovernance(address governor) public onlyOwner {\\r\\n        isGovernor[governor] = false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\\r\\n     * @param newOwner The address to transfer ownership to.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public onlyOwner {\\r\\n        require(newOwner != address(0));\\r\\n        emit OwnershipTransferred(owner, newOwner);\\r\\n        owner = newOwner;\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface TRC20 {\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function transfer(\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function governanceTransfer(\\r\\n        address owner,\\r\\n        address buyer,\\r\\n        uint256 numTokens\\r\\n    ) external returns (bool);\\r\\n}\\r\\n\\r\\ninterface CLUB {\\r\\n    function users(\\r\\n        address\\r\\n    ) external view returns (address, uint32, uint32, uint32);\\r\\n\\r\\n    function getUserDownlinesLength(address) external view returns (uint256);\\r\\n\\r\\n    function user_vip_expiration(address) external view returns (uint256);\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"viaIR\": true,\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 150\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAIN_CONTRACT_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN_CONTRACT_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"trxAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"growth\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"numDays\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"tier\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"minimumCyclecount\",\"type\":\"uint8\"},{\"internalType\":\"uint8[]\",\"name\":\"activePackagesRequired\",\"type\":\"uint8[]\"},{\"internalType\":\"bool\",\"name\":\"nonActiveCanSubscribe\",\"type\":\"bool\"},{\"internalType\":\"uint96\",\"name\":\"stakeFee\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"harvestFee\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"unstakeFee\",\"type\":\"uint96\"}],\"name\":\"addPackage\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPackage\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"trxAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"numDays\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"growth\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"tier\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"minimumCyclecount\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"hidden\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"nonActiveCanSubscribe\",\"type\":\"bool\"},{\"internalType\":\"uint96\",\"name\":\"stakeFee\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"harvestFee\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"unstakeFee\",\"type\":\"uint96\"},{\"internalType\":\"uint8[]\",\"name\":\"activePackagesRequired\",\"type\":\"uint8[]\"}],\"internalType\":\"struct OPXStaking2.Package\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"uint8[]\",\"name\":\"\",\"type\":\"uint8[]\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"governor\",\"type\":\"address\"}],\"name\":\"giveGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"immatureUnstakeDeduction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"immatureUnstakeEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"clubAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeToo\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isGovernor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"makeStake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"online\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"packages\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"trxAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"numDays\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"growth\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"tier\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"minimumCyclecount\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"hidden\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"nonActiveCanSubscribe\",\"type\":\"bool\"},{\"internalType\":\"uint96\",\"name\":\"stakeFee\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"harvestFee\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"unstakeFee\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"governor\",\"type\":\"address\"}],\"name\":\"revokeGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"n\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setOnline\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakerStats\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"totalStaked\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"totalRewards\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"claimedRewards\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakes\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"endDate\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"lastClaim\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"packageID\",\"type\":\"uint256\"},{\"internalType\":\"uint8[]\",\"name\":\"activePackagesRequired\",\"type\":\"uint8[]\"}],\"name\":\"tweakActivePackagesRequired\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"packageID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"tweakPackage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"packageID\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"indexes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"tweakPackageMultiple\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"tweakSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTrx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "OPXStaking2", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "150", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}