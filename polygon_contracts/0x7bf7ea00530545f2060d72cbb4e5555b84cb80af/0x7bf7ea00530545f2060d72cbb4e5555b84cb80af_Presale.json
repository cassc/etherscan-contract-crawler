{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/Presale.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.21;\\n\\nimport {IERC20} from \\\"openzeppelin/token/ERC20/IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface IPriceOracle {\\n    function latestRoundData()\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n}\\n\\ncontract Presale {\\n    address public constant CRE = 0xe81432473290F4ffCFc5E823F8069Db83e8A677B;\\n\\n    address public gov;\\n\\n    bool public paused;\\n\\n    // CRE price(deicmals: 8)\\n    uint256 public crePrice;\\n\\n    // \uac01 \uc2a4\ud14c\uc774\ube14 \ucf54\uc778\uc758 \uccb4\uc778\ub9c1\ud06c heartbeat \uc8fc\uae30\\n    mapping(address => uint256) heartbeats;\\n    // \uc2a4\ud14c\uc774\ube14 \ucf54\uc778\uc758 \uccb4\uc778\ub9c1\ud06c \uc624\ub77c\ud074 \uc8fc\uc18c\\n    mapping(address => address) priceOracles;\\n\\n    constructor(address _gov) {\\n        gov = _gov;\\n    }\\n\\n    modifier onlyGov() {\\n        require(msg.sender == gov, \\\"Presale: only gov\\\");\\n        _;\\n    }\\n\\n    function setGov(address _gov) external onlyGov {\\n        gov = _gov;\\n    }\\n\\n    function pause() external onlyGov {\\n        paused = !paused;\\n    }\\n\\n    /// @notice CRE\ub85c \uad50\ud658\ud560 \uc218 \uc788\ub294 \uc2a4\ud14c\uc774\ube14 \ucf54\uc778 \ucd94\uac00\\n    /// @param token \uc2a4\ud14c\uc774\ube14 \ucf54\uc778 \uc8fc\uc18c\\n    /// @param oracle \uc2a4\ud14c\uc774\ube14 \ucf54\uc778\uc758 \uccb4\uc778\ub9c1\ud06c \uc624\ub77c\ud074 \uc8fc\uc18c\\n    /// @param heartbeat \uccb4\uc778\ub9c1\ud06c heartbeat \uc8fc\uae30, \uc624\ub798\ub41c \uac00\uaca9 \uc815\ubcf4\ub97c \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uae30 \uc704\ud568\\n    function addStable(\\n        address token,\\n        address oracle,\\n        uint256 heartbeat\\n    ) external onlyGov {\\n        heartbeats[token] = heartbeat;\\n        priceOracles[token] = oracle;\\n    }\\n\\n    /// @notice CRE\ub85c \uad50\ud658\ud560 \uc218 \uc788\ub294 \uc2a4\ud14c\uc774\ube14 \ucf54\uc778 \uc81c\uac70\\n    /// @param token \uc2a4\ud14c\uc774\ube14 \ucf54\uc778 \uc8fc\uc18c\\n    function removeStable(address token) external onlyGov {\\n        priceOracles[token] = address(0);\\n    }\\n\\n    function setCREPrice(uint256 price) external onlyGov {\\n        crePrice = price;\\n    }\\n\\n    function deposit(uint256 amount) external {\\n        IERC20(CRE).transferFrom(msg.sender, address(this), amount);\\n    }\\n\\n    function withdraw(\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) external onlyGov {\\n        require(\\n            amount <= IERC20(token).balanceOf(address(this)),\\n            \\\"Presale: insufficient balance\\\"\\n        );\\n\\n        IERC20(token).transfer(to, amount);\\n    }\\n\\n    function getPrice(address token) private view returns (uint256) {\\n        address priceOracle = priceOracles[token];\\n        require(priceOracle != address(0), \\\"Presale: unknown token\\\");\\n\\n        (, int256 price, , uint256 updatedAt, ) = IPriceOracle(priceOracle)\\n            .latestRoundData();\\n        require(\\n            updatedAt > (block.timestamp - heartbeats[token]),\\n            \\\"Presale: price error\\\"\\n        );\\n\\n        return uint256(price);\\n    }\\n\\n    function exchangeRate(address stable) public view returns (uint256) {\\n        // \uc2a4\ud14c\uc774\ube14 \ucf54\uc778 \uac00\uaca9 \ud655\uc778(decimal: 8)\\n        uint256 stablePrice = getPrice(stable);\\n\\n        // \uc2a4\ud14c\uc774\ube14 \ucf54\uc778 1\uac1c\ub2f9 \ubc1b\uc744 \uc218 \uc788\ub294 CRE \ud1a0\ud070 \uc218\ub7c9 \uacc4\uc0b0\\n        // stablePrice\uacfc crePrice\uc758 deicmals\uac00 8\uc774\ubbc0\ub85c CRE \ud1a0\ud070\uc758 decimals \uac12\uc778 18\ub85c \ub9de\ucd94\uae30 \uc704\ud574 1e10 \ucd94\uac00\ud574\uc11c \uacf1\ud568\\n        return (stablePrice * 1e18) / crePrice;\\n    }\\n\\n    /// @notice \uc2a4\ud14c\uc774\ube14 \ucf54\uc778\uc73c\ub85c CRE \ud1a0\ud070\uc744 \uad6c\ub9e4\ud558\ub294 \uae30\ub2a5\\n    /// @param stable \uc2a4\ud14c\uc774\ube14 \ucf54\uc778 \uc8fc\uc18c\\n    /// @param stableAmount CRE \ud1a0\ud070 \uad6c\ub9e4\uc5d0 \uc0ac\uc6a9\ud560 \uc2a4\ud14c\uc774\ube14 \ucf54\uc778 \uc218\ub7c9\\n    function buy(address stable, uint256 stableAmount) external {\\n        require(!paused, \\\"Presale: paused\\\");\\n\\n        // \uc2a4\ud14c\uc774\ube14 \ucf54\uc778 1\uac1c\ub2f9 \ubc1b\uc744 \uc218 \uc788\ub294 CRE \ud1a0\ud070 \uc218\ub7c9 \uacc4\uc0b0\\n        // stablePrice\uacfc crePrice\uc758 deicmals\uac00 8\uc774\ubbc0\ub85c CRE \ud1a0\ud070\uc758 decimals \uac12\uc778 18\ub85c \ub9de\ucd94\uae30 \uc704\ud574 1e10 \ucd94\uac00\ud574\uc11c \uacf1\ud568\\n        uint256 stablePerCRE = exchangeRate(stable);\\n\\n        // \uc804\uc1a1\ud560 CRE \ud1a0\ud070 \uc218\ub7c9 \uacc4\uc0b0\\n        uint256 stableDecimals = IERC20Metadata(stable).decimals();\\n        uint256 amount = (stableAmount * stablePerCRE) / (10 ** stableDecimals);\\n\\n        require(\\n            IERC20(CRE).balanceOf(address(this)) >= amount,\\n            \\\"Presale: insufficient balance\\\"\\n        );\\n        IERC20(CRE).transfer(msg.sender, amount);\\n\\n        IERC20(stable).transferFrom(msg.sender, address(this), stableAmount);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"openzeppelin/=lib/openzeppelin-contracts/contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gov\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CRE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"heartbeat\",\"type\":\"uint256\"}],\"name\":\"addStable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stableAmount\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stable\",\"type\":\"address\"}],\"name\":\"exchangeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gov\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"removeStable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setCREPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gov\",\"type\":\"address\"}],\"name\":\"setGov\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Presale", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000001337ef3cf8aebbac95b8e3b496cfcbb489cd72cc", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}