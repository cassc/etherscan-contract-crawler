{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/mechanics/SacrificeZomon/SacrificeZomon.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"../../tokens/ZOMON/IZomon.sol\\\";\\nimport \\\"../../tokens/ZOMON/IZomonStruct.sol\\\";\\n\\nimport \\\"../../tokens/GOLD/IGold.sol\\\";\\n\\nimport \\\"../../common/FundsManagementOwnable/FundsManagementOwnable.sol\\\";\\nimport \\\"../../common/ZomonContractCallerOwnable/ZomonContractCallerOwnable.sol\\\";\\nimport \\\"../../common/GoldContractCallerOwnable/GoldContractCallerOwnable.sol\\\";\\n\\ncontract SacrificeZomon is\\n    FundsManagementOwnable,\\n    ZomonContractCallerOwnable,\\n    GoldContractCallerOwnable\\n{\\n    address public constant NATIVE_TOKEN_ADDRESS =\\n        0x0000000000000000000000000000000000001010;\\n\\n    constructor(address _zomonContractAddress, address _goldContractAddress)\\n        ZomonContractCallerOwnable(_zomonContractAddress)\\n        GoldContractCallerOwnable(_goldContractAddress)\\n    {}\\n\\n    function sacrifice(uint256 _zomonTokenId) external {\\n        require(\\n            zomonContract.ownerOf(_zomonTokenId) == _msgSender(),\\n            \\\"ONLY_ZOMON_OWNER_ALLOWED\\\"\\n        );\\n\\n        require(\\n            zomonContract.getApproved(_zomonTokenId) == address(this) ||\\n                zomonContract.isApprovedForAll(_msgSender(), address(this)),\\n            \\\"ZOMON_NOT_APPROVED\\\"\\n        );\\n\\n        Zomon memory zomon = zomonContract.getZomon(_zomonTokenId);\\n\\n        uint256 innerTokenBalance = zomonContract.getCurrentInnerTokenBalance(\\n            _zomonTokenId\\n        );\\n\\n        require(innerTokenBalance > 0, \\\"ZOMON_DOES_NOT_CONTAIN_INNER_TOKEN\\\");\\n\\n        zomonContract.burn(_zomonTokenId);\\n\\n        // Handle native token\\n        if (zomon.innerTokenAddress == NATIVE_TOKEN_ADDRESS) {\\n            require(\\n                address(this).balance >= innerTokenBalance,\\n                \\\"NOT_ENOUGH_FUNDS\\\"\\n            );\\n\\n            (bool success, ) = _msgSender().call{value: innerTokenBalance}(\\\"\\\");\\n            require(success, \\\"SENDING_FUNDS_FAILED\\\");\\n\\n            return;\\n        }\\n\\n        // Handle gold token\\n        if (zomon.innerTokenAddress == address(goldContract)) {\\n            goldContract.mint(_msgSender(), innerTokenBalance);\\n            return;\\n        }\\n\\n        // Handle any other token as an ERC20\\n        require(\\n            IERC20(zomon.innerTokenAddress).balanceOf(address(this)) >=\\n                innerTokenBalance,\\n            \\\"NOT_ENOUGH_FUNDS\\\"\\n        );\\n        require(\\n            IERC20(zomon.innerTokenAddress).transfer(\\n                _msgSender(),\\n                innerTokenBalance\\n            ),\\n            \\\"SENDING_FUNDS_FAILED\\\"\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/tokens/ZOMON/IZomon.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nimport \\\"./IZomonStruct.sol\\\";\\n\\ninterface IZomon is IERC721 {\\n    function IS_ZOMON_CONTRACT() external pure returns (bool);\\n\\n    function getZomon(uint256 _tokenId) external view returns (Zomon memory);\\n\\n    function getCurrentInnerTokenBalance(uint256 _tokenId)\\n        external\\n        returns (uint256);\\n\\n    function mint(\\n        address _to,\\n        uint256 _tokenId,\\n        string memory _tokenURI,\\n        Zomon memory _zomonData\\n    ) external;\\n\\n    function burn(uint256 _tokenId) external;\\n}\\n\"\r\n    },\r\n    \"contracts/tokens/ZOMON/IZomonStruct.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.7;\\n\\nstruct Zomon {\\n    /* 32 bytes pack */\\n    uint16 serverId;\\n    uint16 setId;\\n    uint8 edition;\\n    uint8 rarityId;\\n    uint8 genderId;\\n    uint8 zodiacSignId;\\n    uint16 skillId;\\n    uint16 leaderSkillId;\\n    bool canLevelUp;\\n    bool canEvolve;\\n    uint16 level;\\n    uint8 evolution;\\n    uint24 hp;\\n    uint24 attack;\\n    uint24 defense;\\n    uint24 critical;\\n    uint24 evasion;\\n    /*****************/\\n    bool isShiny;\\n    uint8 shinyBoostedStat; // 0 = none, 1 = hp, 2 = attack, 3 = defense, 4 = critical, 5 = evasion\\n    uint16 maxLevel;\\n    uint8 maxRunesCount;\\n    uint16 generation;\\n    uint8 innerTokenDecimals;\\n    uint8[] typesIds;\\n    uint16[] diceFacesIds;\\n    uint16[] runesIds;\\n    string name;\\n    address innerTokenAddress;\\n    uint256 minLevelInnerTokenBalance;\\n    uint256 maxLevelInnerTokenBalance;\\n}\\n\"\r\n    },\r\n    \"contracts/tokens/GOLD/IGold.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"../BALL/IBallStruct.sol\\\";\\n\\ninterface IGold is IERC20 {\\n    function IS_GOLD_CONTRACT() external pure returns (bool);\\n\\n    function mint(address _to, uint256 _amount) external;\\n\\n    function burnFrom(address _account, uint256 _amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/common/FundsManagementOwnable/FundsManagementOwnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nabstract contract FundsManagementOwnable is Ownable {\\n    event Received(address sender, uint256 amount);\\n\\n    receive() external payable {\\n        emit Received(_msgSender(), msg.value);\\n    }\\n\\n    function withdraw(address _to) external onlyOwner {\\n        (bool success, ) = _to.call{value: address(this).balance}(\\\"\\\");\\n        require(success, \\\"WITHDRAW_FAILED\\\");\\n    }\\n\\n    function recoverERC20(\\n        address _tokenAddress,\\n        address _to,\\n        uint256 _tokenAmount\\n    ) external onlyOwner {\\n        require(\\n            IERC20(_tokenAddress).transfer(_to, _tokenAmount),\\n            \\\"RECOVERY_FAILED\\\"\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/common/ZomonContractCallerOwnable/ZomonContractCallerOwnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"../../tokens/ZOMON/IZomon.sol\\\";\\n\\ncontract ZomonContractCallerOwnable is Ownable {\\n    IZomon public zomonContract;\\n\\n    constructor(address _zomonContractAddress) {\\n        setZomonContract(_zomonContractAddress);\\n    }\\n\\n    function setZomonContract(address _address) public onlyOwner {\\n        IZomon candidateContract = IZomon(_address);\\n\\n        // Verify the contract is the one we expect\\n        require(\\n            candidateContract.IS_ZOMON_CONTRACT(),\\n            \\\"CONTRACT_ADDRES_IS_NOT_A_ZOMON_CONTRACT_INSTANCE\\\"\\n        );\\n\\n        // Set the new contract address\\n        zomonContract = candidateContract;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/common/GoldContractCallerOwnable/GoldContractCallerOwnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"../../tokens/GOLD/IGold.sol\\\";\\n\\ncontract GoldContractCallerOwnable is Ownable {\\n    IGold public goldContract;\\n\\n    constructor(address _goldContractAddress) {\\n        setGoldContract(_goldContractAddress);\\n    }\\n\\n    function setGoldContract(address _address) public onlyOwner {\\n        IGold candidateContract = IGold(_address);\\n\\n        // Verify the contract is the one we expect\\n        require(\\n            candidateContract.IS_GOLD_CONTRACT(),\\n            \\\"CONTRACT_ADDRES_IS_NOT_A_GOLD_CONTRACT_INSTANCE\\\"\\n        );\\n\\n        // Set the new contract address\\n        goldContract = candidateContract;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/tokens/BALL/IBallStruct.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.7;\\n\\nstruct Ball {\\n    uint16 serverId;\\n    uint16 setId;\\n    uint8 edition;\\n    uint16 minRunes;\\n    uint16 maxRunes;\\n    bool isShiny;\\n    string name;\\n}\\n\\nstruct BallMintData {\\n    uint16 serverId;\\n    uint16 setId;\\n    // no edition\\n    uint16 minRunes;\\n    uint16 maxRunes;\\n    bool isShiny;\\n    string name;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_zomonContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_goldContractAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Received\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NATIVE_TOKEN_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"goldContract\",\"outputs\":[{\"internalType\":\"contract IGold\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_zomonTokenId\",\"type\":\"uint256\"}],\"name\":\"sacrifice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setGoldContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setZomonContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zomonContract\",\"outputs\":[{\"internalType\":\"contract IZomon\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SacrificeZomon", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "1000000", "ConstructorArguments": "000000000000000000000000de34497afaae0fd6a7aa0e3b94c55c3e4f2464a100000000000000000000000052fdce87128f4be4ed27ecd2453a819fdb087ed5", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}