{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"lib/erc20/contracts/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.7;\\n\\nimport { IERC20 } from \\\"./interfaces/IERC20.sol\\\";\\n\\n/*\\n    \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2588\u2557    \u2588\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2588\u2557\\n    \u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d    \u255a\u2550\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2588\u2588\u2588\u2588\u2557\\n    \u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551          \u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2588\u2588\u2554\u2588\u2588\u2551\\n    \u2588\u2588\u2554\u2550\u2550\u255d  \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551         \u2588\u2588\u2554\u2550\u2550\u2550\u255d \u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551\\n    \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551  \u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2557    \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\\n    \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d    \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d\\n*/\\n\\n/**\\n *  @title Modern ERC-20 implementation.\\n *  @dev   Acknowledgements to Solmate, OpenZeppelin, and DSS for inspiring this code.\\n */\\ncontract ERC20 is IERC20 {\\n\\n    /**************/\\n    /*** ERC-20 ***/\\n    /**************/\\n\\n    string public override name;\\n    string public override symbol;\\n\\n    uint8 public immutable override decimals;\\n\\n    uint256 public override totalSupply;\\n\\n    mapping(address => uint256) public override balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public override allowance;\\n\\n    /****************/\\n    /*** ERC-2612 ***/\\n    /****************/\\n\\n    // PERMIT_TYPEHASH = keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 private constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n\\n    uint256 internal immutable initialChainId;\\n\\n    bytes32 internal immutable initialDomainSeparator;\\n\\n    mapping(address => uint256) public override nonces;\\n\\n    /**\\n     *  @param name_     The name of the token.\\n     *  @param symbol_   The symbol of the token.\\n     *  @param decimals_ The decimal precision used by the token.\\n     */\\n    constructor(string memory name_, string memory symbol_, uint8 decimals_) {\\n        name     = name_;\\n        symbol   = symbol_;\\n        decimals = decimals_;\\n        initialChainId = block.chainid;\\n        initialDomainSeparator = _computeDomainSeparator();\\n    }\\n\\n    /**************************/\\n    /*** External Functions ***/\\n    /**************************/\\n\\n    function approve(address spender_, uint256 amount_) external override returns (bool success_) {\\n        _approve(msg.sender, spender_, amount_);\\n        return true;\\n    }\\n\\n    function decreaseAllowance(address spender_, uint256 subtractedAmount_) external override returns (bool success_) {\\n        _decreaseAllowance(msg.sender, spender_, subtractedAmount_);\\n        return true;\\n    }\\n\\n    function increaseAllowance(address spender_, uint256 addedAmount_) external override returns (bool success_) {\\n        _approve(msg.sender, spender_, allowance[msg.sender][spender_] + addedAmount_);\\n        return true;\\n    }\\n\\n    function permit(address owner_, address spender_, uint256 amount_, uint256 deadline_, uint8 v_, bytes32 r_, bytes32 s_) external override {\\n        require(deadline_ >= block.timestamp, \\\"ERC20:P:EXPIRED\\\");\\n\\n        // Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}.\\n        require(\\n            uint256(s_) <= uint256(0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) &&\\n            (v_ == 27 || v_ == 28),\\n            \\\"ERC20:P:MALLEABLE\\\"\\n        );\\n\\n        // Nonce realistically cannot overflow.\\n        unchecked {\\n            bytes32 digest = keccak256(\\n                abi.encodePacked(\\n                    \\\"\\\\x19\\\\x01\\\",\\n                    DOMAIN_SEPARATOR(),\\n                    keccak256(abi.encode(PERMIT_TYPEHASH, owner_, spender_, amount_, nonces[owner_]++, deadline_))\\n                )\\n            );\\n\\n            address recoveredAddress = ecrecover(digest, v_, r_, s_);\\n\\n            require(recoveredAddress == owner_ && owner_ != address(0), \\\"ERC20:P:INVALID_SIGNATURE\\\");\\n        }\\n\\n        _approve(owner_, spender_, amount_);\\n    }\\n\\n    function transfer(address recipient_, uint256 amount_) external override returns (bool success_) {\\n        _transfer(msg.sender, recipient_, amount_);\\n        return true;\\n    }\\n\\n    function transferFrom(address owner_, address recipient_, uint256 amount_) external override returns (bool success_) {\\n        _decreaseAllowance(owner_, msg.sender, amount_);\\n        _transfer(owner_, recipient_, amount_);\\n        return true;\\n    }\\n\\n    /**********************/\\n    /*** View Functions ***/\\n    /**********************/\\n\\n    function DOMAIN_SEPARATOR() public view virtual override returns (bytes32 domainSeparator_) {\\n        return block.chainid == initialChainId ? initialDomainSeparator : _computeDomainSeparator();\\n    }\\n\\n    /**************************/\\n    /*** Internal Functions ***/\\n    /**************************/\\n\\n    function _approve(address owner_, address spender_, uint256 amount_) internal {\\n        emit Approval(owner_, spender_, allowance[owner_][spender_] = amount_);\\n    }\\n\\n    function _burn(address owner_, uint256 amount_) internal virtual {\\n        balanceOf[owner_] -= amount_;\\n\\n        // Cannot underflow because a user's balance will never be larger than the total supply.\\n        unchecked { totalSupply -= amount_; }\\n\\n        emit Transfer(owner_, address(0), amount_);\\n    }\\n\\n    function _computeDomainSeparator() internal view virtual returns (bytes32 domainSeparator_) {\\n        return keccak256(\\n            abi.encode(\\n                keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                keccak256(bytes(name)),\\n                keccak256(bytes(\\\"1\\\")),\\n                block.chainid,\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    function _decreaseAllowance(address owner_, address spender_, uint256 subtractedAmount_) internal {\\n        uint256 spenderAllowance = allowance[owner_][spender_];  // Cache to memory.\\n\\n        if (spenderAllowance != type(uint256).max) {\\n            _approve(owner_, spender_, spenderAllowance - subtractedAmount_);\\n        }\\n    }\\n\\n    function _mint(address recipient_, uint256 amount_) internal virtual {\\n        totalSupply += amount_;\\n\\n        // Cannot overflow because totalSupply would first overflow in the statement above.\\n        unchecked { balanceOf[recipient_] += amount_; }\\n\\n        emit Transfer(address(0), recipient_, amount_);\\n    }\\n\\n    function _transfer(address owner_, address recipient_, uint256 amount_) internal virtual {\\n        balanceOf[owner_] -= amount_;\\n\\n        // Cannot overflow because minting prevents overflow of totalSupply, and sum of user balances == totalSupply.\\n        unchecked { balanceOf[recipient_] += amount_; }\\n\\n        emit Transfer(owner_, recipient_, amount_);\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"lib/erc20/contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.7;\\n\\n/// @title Interface of the ERC20 standard as defined in the EIP, including EIP-2612 permit functionality.\\ninterface IERC20 {\\n\\n    /**************/\\n    /*** Events ***/\\n    /**************/\\n\\n    /**\\n     *  @dev   Emitted when one account has set the allowance of another account over their tokens.\\n     *  @param owner_   Account that tokens are approved from.\\n     *  @param spender_ Account that tokens are approved for.\\n     *  @param amount_  Amount of tokens that have been approved.\\n     */\\n    event Approval(address indexed owner_, address indexed spender_, uint256 amount_);\\n\\n    /**\\n     *  @dev   Emitted when tokens have moved from one account to another.\\n     *  @param owner_     Account that tokens have moved from.\\n     *  @param recipient_ Account that tokens have moved to.\\n     *  @param amount_    Amount of tokens that have been transferred.\\n     */\\n    event Transfer(address indexed owner_, address indexed recipient_, uint256 amount_);\\n\\n    /**************************/\\n    /*** External Functions ***/\\n    /**************************/\\n\\n    /**\\n     *  @dev    Function that allows one account to set the allowance of another account over their tokens.\\n     *          Emits an {Approval} event.\\n     *  @param  spender_ Account that tokens are approved for.\\n     *  @param  amount_  Amount of tokens that have been approved.\\n     *  @return success_ Boolean indicating whether the operation succeeded.\\n     */\\n    function approve(address spender_, uint256 amount_) external returns (bool success_);\\n\\n    /**\\n     *  @dev    Function that allows one account to decrease the allowance of another account over their tokens.\\n     *          Emits an {Approval} event.\\n     *  @param  spender_          Account that tokens are approved for.\\n     *  @param  subtractedAmount_ Amount to decrease approval by.\\n     *  @return success_          Boolean indicating whether the operation succeeded.\\n     */\\n    function decreaseAllowance(address spender_, uint256 subtractedAmount_) external returns (bool success_);\\n\\n    /**\\n     *  @dev    Function that allows one account to increase the allowance of another account over their tokens.\\n     *          Emits an {Approval} event.\\n     *  @param  spender_     Account that tokens are approved for.\\n     *  @param  addedAmount_ Amount to increase approval by.\\n     *  @return success_     Boolean indicating whether the operation succeeded.\\n     */\\n    function increaseAllowance(address spender_, uint256 addedAmount_) external returns (bool success_);\\n\\n    /**\\n     *  @dev   Approve by signature.\\n     *  @param owner_    Owner address that signed the permit.\\n     *  @param spender_  Spender of the permit.\\n     *  @param amount_   Permit approval spend limit.\\n     *  @param deadline_ Deadline after which the permit is invalid.\\n     *  @param v_        ECDSA signature v component.\\n     *  @param r_        ECDSA signature r component.\\n     *  @param s_        ECDSA signature s component.\\n     */\\n    function permit(address owner_, address spender_, uint amount_, uint deadline_, uint8 v_, bytes32 r_, bytes32 s_) external;\\n\\n    /**\\n     *  @dev    Moves an amount of tokens from `msg.sender` to a specified account.\\n     *          Emits a {Transfer} event.\\n     *  @param  recipient_ Account that receives tokens.\\n     *  @param  amount_    Amount of tokens that are transferred.\\n     *  @return success_   Boolean indicating whether the operation succeeded.\\n     */\\n    function transfer(address recipient_, uint256 amount_) external returns (bool success_);\\n\\n    /**\\n     *  @dev    Moves a pre-approved amount of tokens from a sender to a specified account.\\n     *          Emits a {Transfer} event.\\n     *          Emits an {Approval} event.\\n     *  @param  owner_     Account that tokens are moving from.\\n     *  @param  recipient_ Account that receives tokens.\\n     *  @param  amount_    Amount of tokens that are transferred.\\n     *  @return success_   Boolean indicating whether the operation succeeded.\\n     */\\n    function transferFrom(address owner_, address recipient_, uint256 amount_) external returns (bool success_);\\n\\n    /**********************/\\n    /*** View Functions ***/\\n    /**********************/\\n\\n    /**\\n     *  @dev    Returns the allowance that one account has given another over their tokens.\\n     *  @param  owner_     Account that tokens are approved from.\\n     *  @param  spender_   Account that tokens are approved for.\\n     *  @return allowance_ Allowance that one account has given another over their tokens.\\n     */\\n    function allowance(address owner_, address spender_) external view returns (uint256 allowance_);\\n\\n    /**\\n     *  @dev    Returns the amount of tokens owned by a given account.\\n     *  @param  account_ Account that owns the tokens.\\n     *  @return balance_ Amount of tokens owned by a given account.\\n     */\\n    function balanceOf(address account_) external view returns (uint256 balance_);\\n\\n    /**\\n     *  @dev    Returns the decimal precision used by the token.\\n     *  @return decimals_ The decimal precision used by the token.\\n     */\\n    function decimals() external view returns (uint8 decimals_);\\n\\n    /**\\n     *  @dev    Returns the signature domain separator.\\n     *  @return domainSeparator_ The signature domain separator.\\n     */\\n    function DOMAIN_SEPARATOR() external view returns (bytes32 domainSeparator_);\\n\\n    /**\\n     *  @dev    Returns the name of the token.\\n     *  @return name_ The name of the token.\\n     */\\n    function name() external view returns (string memory name_);\\n\\n    /**\\n      *  @dev    Returns the nonce for the given owner.\\n      *  @param  owner_  The address of the owner account.\\n      *  @return nonce_ The nonce for the given owner.\\n     */\\n    function nonces(address owner_) external view returns (uint256 nonce_);\\n\\n    /**\\n     *  @dev    Returns the symbol of the token.\\n     *  @return symbol_ The symbol of the token.\\n     */\\n    function symbol() external view returns (string memory symbol_);\\n\\n    /**\\n     *  @dev    Returns the total amount of tokens in existence.\\n     *  @return totalSupply_ The total amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256 totalSupply_);\\n\\n}\\n\"\r\n    },\r\n    \"lib/erc20-helper/src/ERC20Helper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.7;\\n\\nimport { IERC20Like } from \\\"./interfaces/IERC20Like.sol\\\";\\n\\n/**\\n * @title Small Library to standardize erc20 token interactions.\\n */\\nlibrary ERC20Helper {\\n\\n    /**************************/\\n    /*** Internal Functions ***/\\n    /**************************/\\n\\n    function transfer(address token_, address to_, uint256 amount_) internal returns (bool success_) {\\n        return _call(token_, abi.encodeWithSelector(IERC20Like.transfer.selector, to_, amount_));\\n    }\\n\\n    function transferFrom(address token_, address from_, address to_, uint256 amount_) internal returns (bool success_) {\\n        return _call(token_, abi.encodeWithSelector(IERC20Like.transferFrom.selector, from_, to_, amount_));\\n    }\\n\\n    function approve(address token_, address spender_, uint256 amount_) internal returns (bool success_) {\\n        // If setting approval to zero fails, return false.\\n        if (!_call(token_, abi.encodeWithSelector(IERC20Like.approve.selector, spender_, uint256(0)))) return false;\\n\\n        // If `amount_` is zero, return true as the previous step already did this.\\n        if (amount_ == uint256(0)) return true;\\n\\n        // Return the result of setting the approval to `amount_`.\\n        return _call(token_, abi.encodeWithSelector(IERC20Like.approve.selector, spender_, amount_));\\n    }\\n\\n    function _call(address token_, bytes memory data_) private returns (bool success_) {\\n        if (token_.code.length == uint256(0)) return false;\\n\\n        bytes memory returnData;\\n        ( success_, returnData ) = token_.call(data_);\\n\\n        return success_ && (returnData.length == uint256(0) || abi.decode(returnData, (bool)));\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"lib/erc20-helper/src/interfaces/IERC20Like.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.7;\\n\\n/// @title Interface of the ERC20 standard as needed by ERC20Helper.\\ninterface IERC20Like {\\n\\n    function approve(address spender_, uint256 amount_) external returns (bool success_);\\n\\n    function transfer(address recipient_, uint256 amount_) external returns (bool success_);\\n\\n    function transferFrom(address owner_, address recipient_, uint256 amount_) external returns (bool success_);\\n\\n}\\n\"\r\n    },\r\n    \"lib/revenue-distribution-token/contracts/RevenueDistributionToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.8.7;\\n\\nimport { ERC20 }       from \\\"erc20/ERC20.sol\\\";\\nimport { ERC20Helper } from \\\"erc20-helper/ERC20Helper.sol\\\";\\n\\nimport { IRevenueDistributionToken } from \\\"./interfaces/IRevenueDistributionToken.sol\\\";\\n\\n/*\\n    \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\\n    \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d\\n    \u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551  \u2588\u2588\u2551   \u2588\u2588\u2551\\n    \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551  \u2588\u2588\u2551   \u2588\u2588\u2551\\n    \u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d   \u2588\u2588\u2551\\n    \u255a\u2550\u255d  \u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u255d    \u255a\u2550\u255d\\n*/\\n\\ncontract RevenueDistributionToken is IRevenueDistributionToken, ERC20 {\\n\\n    uint256 public immutable override precision;  // Precision of rates, equals max deposit amounts before rounding errors occur\\n\\n    address public override asset;  // Underlying ERC-20 asset used by ERC-4626 functionality.\\n\\n    address public override owner;         // Current owner of the contract, able to update the vesting schedule.\\n    address public override pendingOwner;  // Pending owner of the contract, able to accept ownership.\\n\\n    uint256 public override freeAssets;           // Amount of assets unlocked regardless of time passed.\\n    uint256 public override issuanceRate;         // asset/second rate dependent on aggregate vesting schedule.\\n    uint256 public override lastUpdated;          // Timestamp of when issuance equation was last updated.\\n    uint256 public override vestingPeriodFinish;  // Timestamp when current vesting schedule ends.\\n\\n    uint256 private locked = 1;  // Used in reentrancy check.\\n\\n    /*****************/\\n    /*** Modifiers ***/\\n    /*****************/\\n\\n    modifier nonReentrant() {\\n        require(locked == 1, \\\"RDT:LOCKED\\\");\\n\\n        locked = 2;\\n\\n        _;\\n\\n        locked = 1;\\n    }\\n\\n    constructor(string memory name_, string memory symbol_, address owner_, address asset_, uint256 precision_)\\n        ERC20(name_, symbol_, ERC20(asset_).decimals())\\n    {\\n        require((owner = owner_) != address(0), \\\"RDT:C:OWNER_ZERO_ADDRESS\\\");\\n\\n        asset     = asset_;  // Don't need to check zero address as ERC20(asset_).decimals() will fail in ERC20 constructor.\\n        precision = precision_;\\n    }\\n\\n    /********************************/\\n    /*** Administrative Functions ***/\\n    /********************************/\\n\\n    function acceptOwnership() external virtual override {\\n        require(msg.sender == pendingOwner, \\\"RDT:AO:NOT_PO\\\");\\n\\n        emit OwnershipAccepted(owner, msg.sender);\\n\\n        owner        = msg.sender;\\n        pendingOwner = address(0);\\n    }\\n\\n    function setPendingOwner(address pendingOwner_) external virtual override {\\n        require(msg.sender == owner, \\\"RDT:SPO:NOT_OWNER\\\");\\n\\n        pendingOwner = pendingOwner_;\\n\\n        emit PendingOwnerSet(msg.sender, pendingOwner_);\\n    }\\n\\n    function updateVestingSchedule(uint256 vestingPeriod_) external virtual override returns (uint256 issuanceRate_, uint256 freeAssets_) {\\n        require(msg.sender == owner, \\\"RDT:UVS:NOT_OWNER\\\");\\n        require(totalSupply != 0,    \\\"RDT:UVS:ZERO_SUPPLY\\\");\\n\\n        // Update \\\"y-intercept\\\" to reflect current available asset.\\n        freeAssets_ = freeAssets = totalAssets();\\n\\n        // Calculate slope.\\n        issuanceRate_ = issuanceRate = ((ERC20(asset).balanceOf(address(this)) - freeAssets_) * precision) / vestingPeriod_;\\n\\n        // Update timestamp and period finish.\\n        vestingPeriodFinish = (lastUpdated = block.timestamp) + vestingPeriod_;\\n\\n        emit IssuanceParamsUpdated(freeAssets_, issuanceRate_);\\n        emit VestingScheduleUpdated(msg.sender, vestingPeriodFinish);\\n    }\\n\\n    /************************/\\n    /*** Staker Functions ***/\\n    /************************/\\n\\n    function deposit(uint256 assets_, address receiver_) public virtual override nonReentrant returns (uint256 shares_) {\\n        _mint(shares_ = previewDeposit(assets_), assets_, receiver_, msg.sender);\\n    }\\n\\n    function depositWithPermit(\\n        uint256 assets_,\\n        address receiver_,\\n        uint256 deadline_,\\n        uint8   v_,\\n        bytes32 r_,\\n        bytes32 s_\\n    )\\n        external virtual override nonReentrant returns (uint256 shares_)\\n    {\\n        ERC20(asset).permit(msg.sender, address(this), assets_, deadline_, v_, r_, s_);\\n        _mint(shares_ = previewDeposit(assets_), assets_, receiver_, msg.sender);\\n    }\\n\\n    function mint(uint256 shares_, address receiver_) public virtual override nonReentrant returns (uint256 assets_) {\\n        _mint(shares_, assets_ = previewMint(shares_), receiver_, msg.sender);\\n    }\\n\\n    function mintWithPermit(\\n        uint256 shares_,\\n        address receiver_,\\n        uint256 maxAssets_,\\n        uint256 deadline_,\\n        uint8   v_,\\n        bytes32 r_,\\n        bytes32 s_\\n    )\\n        external virtual override nonReentrant returns (uint256 assets_)\\n    {\\n        require((assets_ = previewMint(shares_)) <= maxAssets_, \\\"RDT:MWP:INSUFFICIENT_PERMIT\\\");\\n\\n        ERC20(asset).permit(msg.sender, address(this), maxAssets_, deadline_, v_, r_, s_);\\n        _mint(shares_, assets_, receiver_, msg.sender);\\n    }\\n\\n    function redeem(uint256 shares_, address receiver_, address owner_) external virtual override nonReentrant returns (uint256 assets_) {\\n        _burn(shares_, assets_ = previewRedeem(shares_), receiver_, owner_, msg.sender);\\n    }\\n\\n    function withdraw(uint256 assets_, address receiver_, address owner_) external virtual override nonReentrant returns (uint256 shares_) {\\n        _burn(shares_ = previewWithdraw(assets_), assets_, receiver_, owner_, msg.sender);\\n    }\\n\\n    /**************************/\\n    /*** Internal Functions ***/\\n    /**************************/\\n\\n    function _mint(uint256 shares_, uint256 assets_, address receiver_, address caller_) internal virtual {\\n        require(receiver_ != address(0), \\\"RDT:M:ZERO_RECEIVER\\\");\\n        require(shares_   != uint256(0), \\\"RDT:M:ZERO_SHARES\\\");\\n        require(assets_   != uint256(0), \\\"RDT:M:ZERO_ASSETS\\\");\\n\\n        _mint(receiver_, shares_);\\n\\n        uint256 freeAssetsCache = freeAssets = totalAssets() + assets_;\\n\\n        uint256 issuanceRate_ = _updateIssuanceParams();\\n\\n        emit Deposit(caller_, receiver_, assets_, shares_);\\n        emit IssuanceParamsUpdated(freeAssetsCache, issuanceRate_);\\n\\n        require(ERC20Helper.transferFrom(asset, caller_, address(this), assets_), \\\"RDT:M:TRANSFER_FROM\\\");\\n    }\\n\\n    function _burn(uint256 shares_, uint256 assets_, address receiver_, address owner_, address caller_) internal virtual {\\n        require(receiver_ != address(0), \\\"RDT:B:ZERO_RECEIVER\\\");\\n        require(shares_   != uint256(0), \\\"RDT:B:ZERO_SHARES\\\");\\n        require(assets_   != uint256(0), \\\"RDT:B:ZERO_ASSETS\\\");\\n\\n        if (caller_ != owner_) {\\n            _decreaseAllowance(owner_, caller_, shares_);\\n        }\\n\\n        _burn(owner_, shares_);\\n\\n        uint256 freeAssetsCache = freeAssets = totalAssets() - assets_;\\n\\n        uint256 issuanceRate_ = _updateIssuanceParams();\\n\\n        emit Withdraw(caller_, receiver_, owner_, assets_, shares_);\\n        emit IssuanceParamsUpdated(freeAssetsCache, issuanceRate_);\\n\\n        require(ERC20Helper.transfer(asset, receiver_, assets_), \\\"RDT:B:TRANSFER\\\");\\n    }\\n\\n    function _updateIssuanceParams() internal returns (uint256 issuanceRate_) {\\n        return issuanceRate = (lastUpdated = block.timestamp) > vestingPeriodFinish ? 0 : issuanceRate;\\n    }\\n\\n    /**********************/\\n    /*** View Functions ***/\\n    /**********************/\\n\\n    function balanceOfAssets(address account_) public view virtual override returns (uint256 balanceOfAssets_) {\\n        return convertToAssets(balanceOf[account_]);\\n    }\\n\\n    function convertToAssets(uint256 shares_) public view virtual override returns (uint256 assets_) {\\n        uint256 supply = totalSupply;  // Cache to stack.\\n\\n        assets_ = supply == 0 ? shares_ : (shares_ * totalAssets()) / supply;\\n    }\\n\\n    function convertToShares(uint256 assets_) public view virtual override returns (uint256 shares_) {\\n        uint256 supply = totalSupply;  // Cache to stack.\\n\\n        shares_ = supply == 0 ? assets_ : (assets_ * supply) / totalAssets();\\n    }\\n\\n    function maxDeposit(address receiver_) external pure virtual override returns (uint256 maxAssets_) {\\n        receiver_;  // Silence warning\\n        maxAssets_ = type(uint256).max;\\n    }\\n\\n    function maxMint(address receiver_) external pure virtual override returns (uint256 maxShares_) {\\n        receiver_;  // Silence warning\\n        maxShares_ = type(uint256).max;\\n    }\\n\\n    function maxRedeem(address owner_) external view virtual override returns (uint256 maxShares_) {\\n        maxShares_ = balanceOf[owner_];\\n    }\\n\\n    function maxWithdraw(address owner_) external view virtual override returns (uint256 maxAssets_) {\\n        maxAssets_ = balanceOfAssets(owner_);\\n    }\\n\\n    function previewDeposit(uint256 assets_) public view virtual override returns (uint256 shares_) {\\n        // As per https://eips.ethereum.org/EIPS/eip-4626#security-considerations,\\n        // it should round DOWN if it\u2019s calculating the amount of shares to issue to a user, given an amount of assets provided.\\n        shares_ = convertToShares(assets_);\\n    }\\n\\n    function previewMint(uint256 shares_) public view virtual override returns (uint256 assets_) {\\n        uint256 supply = totalSupply;  // Cache to stack.\\n\\n        // As per https://eips.ethereum.org/EIPS/eip-4626#security-considerations,\\n        // it should round UP if it\u2019s calculating the amount of assets a user must provide, to be issued a given amount of shares.\\n        assets_ = supply == 0 ? shares_ : _divRoundUp(shares_ * totalAssets(), supply);\\n    }\\n\\n    function previewRedeem(uint256 shares_) public view virtual override returns (uint256 assets_) {\\n        // As per https://eips.ethereum.org/EIPS/eip-4626#security-considerations,\\n        // it should round DOWN if it\u2019s calculating the amount of assets to send to a user, given amount of shares returned.\\n        assets_ = convertToAssets(shares_);\\n    }\\n\\n    function previewWithdraw(uint256 assets_) public view virtual override returns (uint256 shares_) {\\n        uint256 supply = totalSupply;  // Cache to stack.\\n\\n        // As per https://eips.ethereum.org/EIPS/eip-4626#security-considerations,\\n        // it should round UP if it\u2019s calculating the amount of shares a user must return, to be sent a given amount of assets.\\n        shares_ = supply == 0 ? assets_ : _divRoundUp(assets_ * supply, totalAssets());\\n    }\\n\\n    function totalAssets() public view virtual override returns (uint256 totalManagedAssets_) {\\n        uint256 issuanceRate_ = issuanceRate;\\n\\n        if (issuanceRate_ == 0) return freeAssets;\\n\\n        uint256 vestingPeriodFinish_ = vestingPeriodFinish;\\n        uint256 lastUpdated_         = lastUpdated;\\n\\n        uint256 vestingTimePassed =\\n            block.timestamp > vestingPeriodFinish_ ?\\n                vestingPeriodFinish_ - lastUpdated_ :\\n                block.timestamp - lastUpdated_;\\n\\n        return ((issuanceRate_ * vestingTimePassed) / precision) + freeAssets;\\n    }\\n\\n    /**************************/\\n    /*** Internal Functions ***/\\n    /**************************/\\n\\n    function _divRoundUp(uint256 numerator_, uint256 divisor_) internal pure returns (uint256 result_) {\\n       return (numerator_ / divisor_) + (numerator_ % divisor_ > 0 ? 1 : 0);\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"lib/revenue-distribution-token/contracts/interfaces/IERC4626.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.7;\\n\\nimport { IERC20 } from \\\"erc20/interfaces/IERC20.sol\\\";\\n\\n/// @title A standard for tokenized Vaults with a single underlying ERC-20 token.\\ninterface IERC4626 is IERC20 {\\n\\n    /**************/\\n    /*** Events ***/\\n    /**************/\\n\\n    /**\\n     *  @dev   `caller_` has exchanged `assets_` for `shares_` and transferred them to `owner_`.\\n     *         MUST be emitted when assets are deposited via the `deposit` or `mint` methods.\\n     *  @param caller_ The caller of the function that emitted the `Deposit` event.\\n     *  @param owner_  The owner of the shares.\\n     *  @param assets_ The amount of assets deposited.\\n     *  @param shares_ The amount of shares minted.\\n     */\\n    event Deposit(address indexed caller_, address indexed owner_, uint256 assets_, uint256 shares_);\\n\\n    /**\\n     *  @dev   `caller_`\u00a0has exchanged\u00a0`shares_`, owned by\u00a0`owner_`, for\u00a0`assets_`, and transferred them\u00a0to\u00a0`receiver_`.\\n     *         MUST be emitted when assets are withdrawn via the\u00a0`withdraw`\u00a0or\u00a0`redeem`\u00a0methods.\\n     *  @param caller_   The caller of the function that emitted the `Withdraw` event.\\n     *  @param receiver_ The receiver of the assets.\\n     *  @param owner_    The owner of the shares.\\n     *  @param assets_   The amount of assets withdrawn.\\n     *  @param shares_   The amount of shares burned.\\n     */\\n    event Withdraw(address indexed caller_, address indexed receiver_, address indexed owner_, uint256 assets_, uint256 shares_);\\n\\n    /***********************/\\n    /*** State Variables ***/\\n    /***********************/\\n\\n    /**\\n     *  @dev    The address of the underlying asset used by the Vault.\\n     *          MUST be a contract that implements the ERC-20 standard.\\n     *          MUST NOT revert.\\n     *  @return asset_ The address of the underlying asset.\\n     */\\n    function asset() external view returns (address asset_);\\n\\n    /********************************/\\n    /*** State Changing Functions ***/\\n    /********************************/\\n\\n    /**\\n     *  @dev    Mints `shares_` to `receiver_` by depositing `assets_` into the Vault.\\n     *          MUST emit the {Deposit} event.\\n     *          MUST revert if all of the assets cannot be deposited (due to insufficient approval, deposit limits, slippage, etc).\\n     *  @param  assets_   The amount of assets to deposit.\\n     *  @param  receiver_ The receiver of the shares.\\n     *  @return shares_   The amount of shares minted.\\n     */\\n    function deposit(uint256 assets_, address receiver_) external returns (uint256 shares_);\\n\\n    /**\\n     *  @dev    Mints `shares_` to `receiver_` by depositing `assets_` into the Vault.\\n     *          MUST emit the {Deposit} event.\\n     *          MUST revert if all of shares cannot be minted (due to insufficient approval, deposit limits, slippage, etc).\\n     *  @param  shares_   The amount of shares to mint.\\n     *  @param  receiver_ The receiver of the shares.\\n     *  @return assets_   The amount of assets deposited.\\n     */\\n    function mint(uint256 shares_, address receiver_) external returns (uint256 assets_);\\n\\n    /**\\n     *  @dev    Burns\u00a0`shares_`\u00a0from\u00a0`owner_`\u00a0and sends\u00a0`assets_` to\u00a0`receiver_`.\\n     *          MUST emit the\u00a0{Withdraw}\u00a0event.\\n     *          MUST revert if all of\u00a0the shares\u00a0cannot be redeemed (due to insufficient shares, withdrawal limits, slippage, etc).\\n     *  @param  shares_   The amount of shares to redeem.\\n     *  @param  receiver_ The receiver of the assets.\\n     *  @param  owner_    The owner of the shares.\\n     *  @return assets_   The amount of assets sent to the receiver.\\n     */\\n    function redeem(uint256 shares_, address receiver_, address owner_) external returns (uint256 assets_);\\n\\n    /**\\n     *  @dev    Burns\u00a0`shares_`\u00a0from\u00a0`owner_`\u00a0and sends `assets_`\u00a0to `receiver_`.\\n     *          MUST emit the\u00a0{Withdraw}\u00a0event.\\n     *          MUST revert if all of\u00a0the assets\u00a0cannot be withdrawn (due to insufficient assets, withdrawal limits, slippage, etc).\\n     *  @param  assets_   The amount of assets to withdraw.\\n     *  @param  receiver_ The receiver of the assets.\\n     *  @param  owner_    The owner of the assets.\\n     *  @return shares_   The amount of shares burned from the owner.\\n     */\\n    function withdraw(uint256 assets_, address receiver_, address owner_) external returns (uint256 shares_);\\n\\n    /**********************/\\n    /*** View Functions ***/\\n    /**********************/\\n\\n    /**\\n     *  @dev    The amount of `assets_` the `shares_` are currently equivalent to.\\n     *          MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     *          MUST NOT reflect slippage or other on-chain conditions when performing the actual exchange.\\n     *          MUST NOT show any variations depending on the caller.\\n     *          MUST NOT revert.\\n     *  @param  shares_ The amount of shares to convert.\\n     *  @return assets_ The amount of equivalent assets.\\n     */\\n    function convertToAssets(uint256 shares_) external view returns (uint256 assets_);\\n\\n    /**\\n     *  @dev    The amount of `shares_` the `assets_` are currently equivalent to.\\n     *          MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     *          MUST NOT reflect slippage or other on-chain conditions when performing the actual exchange.\\n     *          MUST NOT show any variations depending on the caller.\\n     *          MUST NOT revert.\\n     *  @param  assets_ The amount of assets to convert.\\n     *  @return shares_ The amount of equivalent shares.\\n     */\\n    function convertToShares(uint256 assets_) external view returns (uint256 shares_);\\n\\n    /**\\n     *  @dev    Maximum amount of `assets_` that can be deposited on behalf of the `receiver_` through a `deposit` call.\\n     *          MUST return a limited value if the receiver is subject to any limits, or the maximum value otherwise.\\n     *          MUST NOT revert.\\n     *  @param  receiver_ The receiver of the assets.\\n     *  @return assets_   The maximum amount of assets that can be deposited.\\n     */\\n    function maxDeposit(address receiver_) external view returns (uint256 assets_);\\n\\n    /**\\n     *  @dev    Maximum amount of `shares_` that can be minted on behalf of the `receiver_` through a `mint` call.\\n     *          MUST return a limited value if the receiver is subject to any limits, or the maximum value otherwise.\\n     *          MUST NOT revert.\\n     *  @param  receiver_ The receiver of the shares.\\n     *  @return shares_   The maximum amount of shares that can be minted.\\n     */\\n    function maxMint(address receiver_) external view returns (uint256 shares_);\\n\\n    /**\\n     *  @dev    Maximum amount of `shares_` that can be redeemed from the\u00a0`owner_` through a\u00a0`redeem`\u00a0call.\\n     *          MUST return a limited value if\u00a0the owner\u00a0is subject to any limits, or the total amount of owned shares otherwise.\\n     *          MUST\u00a0NOT\u00a0revert.\\n     *  @param  owner_  The owner of the shares.\\n     *  @return shares_ The maximum amount of shares that can be redeemed.\\n     */\\n    function maxRedeem(address owner_) external view returns (uint256 shares_);\\n\\n    /**\\n     *  @dev    Maximum amount of `assets_` that can be withdrawn from the `owner_` through a `withdraw` call.\\n     *          MUST return a limited value if the owner is subject to any limits, or the total amount of owned assets otherwise.\\n     *          MUST NOT revert.\\n     *  @param  owner_  The owner of the assets.\\n     *  @return assets_ The maximum amount of assets that can be withdrawn.\\n     */\\n    function maxWithdraw(address owner_) external view returns (uint256 assets_);\\n\\n    /**\\n     *  @dev    Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given current on-chain conditions.\\n     *          MUST return as close to and no more than the exact amount of shares that would be minted in a `deposit` call in the same transaction.\\n     *          MUST NOT account for deposit limits like those returned from `maxDeposit` and should always act as though the deposit would be accepted.\\n     *          MUST NOT revert.\\n     *  @param  assets_ The amount of assets to deposit.\\n     *  @return shares_ The amount of shares that would be minted.\\n     */\\n    function previewDeposit(uint256 assets_) external view returns (uint256 shares_);\\n\\n    /**\\n     *  @dev    Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given current on-chain conditions.\\n     *          MUST return as close to and no fewer than the exact amount of assets that would be deposited in a `mint` call in the same transaction.\\n     *          MUST NOT account for mint limits like those returned from `maxMint` and should always act as though the minting would be accepted.\\n     *          MUST NOT revert.\\n     *  @param  shares_ The amount of shares to mint.\\n     *  @return assets_ The amount of assets that would be deposited.\\n     */\\n    function previewMint(uint256 shares_) external view returns (uint256 assets_);\\n\\n    /**\\n     *  @dev    Allows an on-chain or off-chain user to simulate the effects of their redemption at the current block, given current on-chain conditions.\\n     *          MUST return as close to and no more than the exact amount of assets that would be withdrawn in a\u00a0`redeem`\u00a0call in the same transaction.\\n     *          MUST NOT account for redemption limits like those returned from `maxRedeem` and should always act as though the redemption would be accepted.\\n     *          MUST NOT revert.\\n     *  @param  shares_ The amount of shares to redeem.\\n     *  @return assets_ The amount of assets that would be withdrawn.\\n     */\\n    function previewRedeem(uint256 shares_) external view returns (uint256 assets_);\\n\\n    /**\\n     *  @dev    Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block, given current on-chain conditions.\\n     *          MUST return as close to and no fewer than the exact amount of shares that would be burned in a\u00a0`withdraw`\u00a0call in the same transaction.\\n     *          MUST NOT account for withdrawal limits like those returned from `maxWithdraw` and should always act as though the withdrawal would be accepted.\\n     *          MUST NOT revert.\\n     *  @param  assets_ The amount of assets to withdraw.\\n     *  @return shares_ The amount of shares that would be redeemed.\\n     */\\n    function previewWithdraw(uint256 assets_) external view returns (uint256 shares_);\\n\\n    /**\\n     *  @dev    Total amount of the underlying asset that is managed by the Vault.\\n     *          SHOULD include compounding that occurs from any yields.\\n     *          MUST NOT revert.\\n     *  @return totalAssets_ The total amount of assets the Vault manages.\\n     */\\n    function totalAssets() external view returns (uint256 totalAssets_);\\n\\n}\\n\"\r\n    },\r\n    \"lib/revenue-distribution-token/contracts/interfaces/IRevenueDistributionToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.7;\\n\\nimport { IERC20 } from \\\"erc20/interfaces/IERC20.sol\\\";\\n\\nimport { IERC4626 } from \\\"./IERC4626.sol\\\";\\n\\n/// @title A token that represents ownership of future revenues distributed linearly over time.\\ninterface IRevenueDistributionToken is IERC20, IERC4626 {\\n\\n    /**************/\\n    /*** Events ***/\\n    /**************/\\n\\n    /**\\n     *  @dev   Issuance parameters have been updated after a `_mint` or `_burn`.\\n     *  @param freeAssets_   Resulting `freeAssets` (y-intercept) value after accounting update.\\n     *  @param issuanceRate_ The new issuance rate of `asset` until `vestingPeriodFinish_`.\\n     */\\n    event IssuanceParamsUpdated(uint256 freeAssets_, uint256 issuanceRate_);\\n\\n    /**\\n     *  @dev   `newOwner_` has accepted the transferral of RDT ownership from `previousOwner_`.\\n     *  @param previousOwner_ The previous RDT owner.\\n     *  @param newOwner_      The new RDT owner.\\n     */\\n    event OwnershipAccepted(address indexed previousOwner_, address indexed newOwner_);\\n\\n    /**\\n     *  @dev   `owner_` has set the new pending owner of RDT to `pendingOwner_`.\\n     *  @param owner_        The current RDT owner.\\n     *  @param pendingOwner_ The new pending RDT owner.\\n     */\\n    event PendingOwnerSet(address indexed owner_, address indexed pendingOwner_);\\n\\n    /**\\n     *  @dev   `owner_` has updated the RDT vesting schedule to end at `vestingPeriodFinish_`.\\n     *  @param owner_               The current RDT owner.\\n     *  @param vestingPeriodFinish_ When the unvested balance will finish vesting.\\n     */\\n    event VestingScheduleUpdated(address indexed owner_, uint256 vestingPeriodFinish_);\\n\\n    /***********************/\\n    /*** State Variables ***/\\n    /***********************/\\n\\n    /**\\n     *  @dev The total amount of the underlying asset that is currently unlocked and is not time-dependent.\\n     *       Analogous to the y-intercept in a linear function.\\n     */\\n    function freeAssets() external view returns (uint256 freeAssets_);\\n\\n    /**\\n     *  @dev The rate of issuance of the vesting schedule that is currently active.\\n     *       Denominated as the amount of underlying assets vesting per second.\\n     */\\n    function issuanceRate() external view returns (uint256 issuanceRate_);\\n\\n    /**\\n     *  @dev The timestamp of when the linear function was last recalculated.\\n     *       Analogous to t0 in a linear function.\\n     */\\n    function lastUpdated() external view returns (uint256 lastUpdated_);\\n\\n    /**\\n     *  @dev The address of the account that is allowed to update the vesting schedule.\\n     */\\n    function owner() external view returns (address owner_);\\n\\n    /**\\n     *  @dev The next owner, nominated by the current owner.\\n     */\\n    function pendingOwner() external view returns (address pendingOwner_);\\n\\n    /**\\n     *  @dev The precision at which the issuance rate is measured.\\n     */\\n    function precision() external view returns (uint256 precision_);\\n\\n    /**\\n     *  @dev The end of the current vesting schedule.\\n     */\\n    function vestingPeriodFinish() external view returns (uint256 vestingPeriodFinish_);\\n\\n    /********************************/\\n    /*** Administrative Functions ***/\\n    /********************************/\\n\\n    /**\\n     *  @dev Sets the pending owner as the new owner.\\n     *       Can be called only by the pending owner, and only after their nomination by the current owner.\\n     */\\n    function acceptOwnership() external;\\n\\n    /**\\n     *  @dev   Sets a new address as the pending owner.\\n     *  @param pendingOwner_ The address of the next potential owner.\\n     */\\n    function setPendingOwner(address pendingOwner_) external;\\n\\n    /**\\n     *  @dev    Updates the current vesting formula based on the amount of total unvested funds in the contract and the new `vestingPeriod_`.\\n     *  @param  vestingPeriod_ The amount of time over which all currently unaccounted underlying assets will be vested over.\\n     *  @return issuanceRate_  The new issuance rate.\\n     *  @return freeAssets_    The new amount of underlying assets that are unlocked.\\n     */\\n    function updateVestingSchedule(uint256 vestingPeriod_) external returns (uint256 issuanceRate_, uint256 freeAssets_);\\n\\n    /************************/\\n    /*** Staker Functions ***/\\n    /************************/\\n\\n    /**\\n     *  @dev    Does a ERC4626 `deposit` with a ERC-2612 `permit`.\\n     *  @param  assets_   The amount of `asset` to deposit.\\n     *  @param  receiver_ The receiver of the shares.\\n     *  @param  deadline_ The timestamp after which the `permit` signature is no longer valid.\\n     *  @param  v_        ECDSA signature v component.\\n     *  @param  r_        ECDSA signature r component.\\n     *  @param  s_        ECDSA signature s component.\\n     *  @return shares_   The amount of shares minted.\\n     */\\n    function depositWithPermit(uint256 assets_, address receiver_, uint256 deadline_, uint8 v_, bytes32 r_, bytes32 s_) external returns (uint256 shares_);\\n\\n    /**\\n     *  @dev    Does a ERC4626 `mint` with a ERC-2612 `permit`.\\n     *  @param  shares_    The amount of `shares` to mint.\\n     *  @param  receiver_  The receiver of the shares.\\n     *  @param  maxAssets_ The maximum amount of assets that can be taken, as per the permit.\\n     *  @param  deadline_  The timestamp after which the `permit` signature is no longer valid.\\n     *  @param  v_         ECDSA signature v component.\\n     *  @param  r_         ECDSA signature r component.\\n     *  @param  s_         ECDSA signature s component.\\n     *  @return assets_    The amount of shares deposited.\\n     */\\n    function mintWithPermit(uint256 shares_, address receiver_, uint256 maxAssets_, uint256 deadline_, uint8 v_, bytes32 r_, bytes32 s_) external returns (uint256 assets_);\\n\\n\\n    /**********************/\\n    /*** View Functions ***/\\n    /**********************/\\n\\n    /**\\n     *  @dev    Returns the amount of underlying assets owned by the specified account.\\n     *  @param  account_ Address of the account.\\n     *  @return assets_  Amount of assets owned.\\n     */\\n    function balanceOfAssets(address account_) external view returns (uint256 assets_);\\n\\n}\\n\"\r\n    },\r\n    \"src/GovernanceLockedRevenueDistributionToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.7;\\n\\nimport {ERC20} from \\\"erc20/ERC20.sol\\\";\\nimport {RevenueDistributionToken} from \\\"revenue-distribution-token/RevenueDistributionToken.sol\\\";\\nimport {LockedRevenueDistributionToken} from \\\"./LockedRevenueDistributionToken.sol\\\";\\nimport {IGovernanceLockedRevenueDistributionToken} from \\\"./interfaces/IGovernanceLockedRevenueDistributionToken.sol\\\";\\nimport {Math} from \\\"./libraries/Math.sol\\\";\\n\\n/*\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\\n\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\\n\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2557\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\\n\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\\n\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2557\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\\n\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u255a\u2588\u2588\u2557\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\\n\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\\n\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u255a\u2550\u2550\u2550\u2550\u2550\u255d\u2591\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u255d\u2591\u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\\n\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\\n\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\\n\u2591\u2591\u2591\u2591                                                                       \u2591\u2591\u2591\u2591\\n\u2591\u2591\u2591\u2591            Governance Locked Revenue Distribution Token               \u2591\u2591\u2591\u2591\\n\u2591\u2591\u2591\u2591                                                                       \u2591\u2591\u2591\u2591\\n\u2591\u2591\u2591\u2591  Extending LockedRevenueDistributionToken with Compound governance,   \u2591\u2591\u2591\u2591\\n\u2591\u2591\u2591\u2591  using OpenZeppelin's ERC20VotesComp implementation.                  \u2591\u2591\u2591\u2591\\n\u2591\u2591\u2591\u2591                                                                       \u2591\u2591\u2591\u2591\\n\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\\n\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591*/\\n\\n/**\\n * @title  ERC-4626 revenue distribution vault with locking and Compound-compatible governance.\\n * @notice Tokens are locked and must be subject to time-based or fee-based withdrawal conditions.\\n * @dev    Voting power applies to the the total asset balance, including assets reserved for withdrawal.\\n * @dev    Limited to a maximum asset supply of uint96.\\n * @author GET Protocol DAO\\n * @author Uses Maple's RevenueDistributionToken v1.0.1 under AGPL-3.0 (https://github.com/maple-labs/revenue-distribution-token/tree/v1.0.1)\\n * @author Uses OpenZeppelin's ERC20Votes and ERC20VotesComp v4.8.0-rc.1 under MIT (https://github.com/OpenZeppelin/openzeppelin-contracts/tree/v4.8.0-rc.1/)\\n */\\ncontract GovernanceLockedRevenueDistributionToken is\\n    IGovernanceLockedRevenueDistributionToken,\\n    LockedRevenueDistributionToken\\n{\\n    // DELEGATE_TYPEHASH = keccak256(\\\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\\\");\\n    bytes32 private constant DELEGATE_TYPEHASH = 0xe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf;\\n\\n    mapping(address => address) public delegates;\\n    mapping(address => Checkpoint[]) public override userCheckpoints;\\n    Checkpoint[] private totalSupplyCheckpoints;\\n\\n    constructor(\\n        string memory name_,\\n        string memory symbol_,\\n        address owner_,\\n        address asset_,\\n        uint256 precision_,\\n        uint256 instantWithdrawalFee_,\\n        uint256 lockTime_,\\n        uint256 initialSeed_\\n    )\\n        LockedRevenueDistributionToken(\\n            name_,\\n            symbol_,\\n            owner_,\\n            asset_,\\n            precision_,\\n            instantWithdrawalFee_,\\n            lockTime_,\\n            initialSeed_\\n        )\\n    {}\\n\\n    /*\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\\n    \u2591\u2591\u2591\u2591                         Public Functions                          \u2591\u2591\u2591\u2591\\n    \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591*/\\n\\n    /**\\n     * @inheritdoc IGovernanceLockedRevenueDistributionToken\\n     */\\n    function delegate(address delegatee_) external virtual override {\\n        _delegate(msg.sender, delegatee_);\\n    }\\n\\n    /**\\n     * @inheritdoc IGovernanceLockedRevenueDistributionToken\\n     * @dev Equivalent to the OpenZeppelin implementation but written in style of ERC20.permit.\\n     */\\n    function delegateBySig(address delegatee_, uint256 nonce_, uint256 deadline_, uint8 v_, bytes32 r_, bytes32 s_)\\n        public\\n        virtual\\n        override\\n    {\\n        require(deadline_ >= block.timestamp, \\\"GLRDT:DBS:EXPIRED\\\");\\n\\n        // Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}.\\n        require(\\n            uint256(s_) <= uint256(0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0)\\n                && (v_ == 27 || v_ == 28),\\n            \\\"GLRDT:DBS:MALLEABLE\\\"\\n        );\\n\\n        bytes32 digest_ = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\", DOMAIN_SEPARATOR(), keccak256(abi.encode(DELEGATE_TYPEHASH, delegatee_, nonce_, deadline_))\\n            )\\n        );\\n\\n        address recoveredAddress_ = ecrecover(digest_, v_, r_, s_);\\n\\n        require(recoveredAddress_ != address(0), \\\"GLRDT:DBS:INVALID_SIGNATURE\\\");\\n\\n        // Nonce realistically cannot overflow.\\n        unchecked {\\n            require(nonce_ == nonces[recoveredAddress_]++, \\\"GLRDT:DBS:INVALID_NONCE\\\");\\n        }\\n\\n        _delegate(recoveredAddress_, delegatee_);\\n    }\\n\\n    /*\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\\n    \u2591\u2591\u2591\u2591                          View Functions                           \u2591\u2591\u2591\u2591\\n    \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591*/\\n\\n    /**\\n     * @inheritdoc IGovernanceLockedRevenueDistributionToken\\n     */\\n    function convertToAssets(uint256 shares_, uint256 blockNumber_)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256 assets_)\\n    {\\n        (uint256 totalSupply_, uint256 totalAssets_) = _checkpointsLookup(totalSupplyCheckpoints, blockNumber_);\\n        assets_ = totalSupply_ == 0 ? shares_ : (shares_ * totalAssets_) / totalSupply_;\\n    }\\n\\n    /**\\n     * @inheritdoc IGovernanceLockedRevenueDistributionToken\\n     */\\n    function checkpoints(address account_, uint32 pos_)\\n        external\\n        view\\n        virtual\\n        override\\n        returns (uint32 fromBlock_, uint96 votes_)\\n    {\\n        Checkpoint memory checkpoint_ = userCheckpoints[account_][pos_];\\n        fromBlock_ = checkpoint_.fromBlock;\\n        votes_ = checkpoint_.assets;\\n    }\\n\\n    /**\\n     * @inheritdoc IGovernanceLockedRevenueDistributionToken\\n     */\\n    function numCheckpoints(address account_) public view virtual override returns (uint32 numCheckpoints_) {\\n        numCheckpoints_ = _toUint32(userCheckpoints[account_].length);\\n    }\\n\\n    /**\\n     * @inheritdoc IGovernanceLockedRevenueDistributionToken\\n     */\\n    function getVotes(address account_) public view virtual override returns (uint256 votes_) {\\n        uint256 pos_ = userCheckpoints[account_].length;\\n        if (pos_ == 0) {\\n            return 0;\\n        }\\n        uint256 shares_ = userCheckpoints[account_][pos_ - 1].shares;\\n        votes_ = convertToAssets(shares_, block.number);\\n    }\\n\\n    /**\\n     * @inheritdoc IGovernanceLockedRevenueDistributionToken\\n     */\\n    function getCurrentVotes(address account_) external view virtual override returns (uint96 votes_) {\\n        votes_ = _toUint96(getVotes(account_));\\n    }\\n\\n    /**\\n     * @inheritdoc IGovernanceLockedRevenueDistributionToken\\n     */\\n    function getPastVotes(address account_, uint256 blockNumber_)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256 votes_)\\n    {\\n        require(blockNumber_ < block.number, \\\"GLRDT:BLOCK_NOT_MINED\\\");\\n        (uint256 shares_,) = _checkpointsLookup(userCheckpoints[account_], blockNumber_);\\n        votes_ = convertToAssets(shares_, blockNumber_);\\n    }\\n\\n    /**\\n     * @inheritdoc IGovernanceLockedRevenueDistributionToken\\n     */\\n\\n    function getPriorVotes(address account_, uint256 blockNumber_)\\n        external\\n        view\\n        virtual\\n        override\\n        returns (uint96 votes_)\\n    {\\n        votes_ = _toUint96(getPastVotes(account_, blockNumber_));\\n    }\\n\\n    /**\\n     * @inheritdoc IGovernanceLockedRevenueDistributionToken\\n     */\\n    function getPastTotalSupply(uint256 blockNumber_) external view virtual override returns (uint256 totalSupply_) {\\n        require(blockNumber_ < block.number, \\\"GLRDT:BLOCK_NOT_MINED\\\");\\n        (totalSupply_,) = _checkpointsLookup(totalSupplyCheckpoints, blockNumber_);\\n    }\\n\\n    /*\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\\n    \u2591\u2591\u2591\u2591                        Internal Functions                         \u2591\u2591\u2591\u2591\\n    \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591*/\\n\\n    /**\\n     * @inheritdoc RevenueDistributionToken\\n     * @dev Snapshots the totalSupply after it has been increased.\\n     */\\n    function _mint(uint256 shares_, uint256 assets_, address receiver_, address caller_) internal virtual override {\\n        super._mint(shares_, assets_, receiver_, caller_);\\n        _moveVotingPower(address(0), delegates[receiver_], shares_);\\n        _writeCheckpoint(totalSupplyCheckpoints, _add, shares_);\\n    }\\n\\n    /**\\n     * @inheritdoc RevenueDistributionToken\\n     * @dev Snapshots the totalSupply after it has been decreased.\\n     */\\n    function _burn(uint256 shares_, uint256 assets_, address receiver_, address owner_, address caller_)\\n        internal\\n        virtual\\n        override\\n    {\\n        super._burn(shares_, assets_, receiver_, owner_, caller_);\\n        _moveVotingPower(delegates[owner_], address(0), shares_);\\n        _writeCheckpoint(totalSupplyCheckpoints, _subtract, shares_);\\n    }\\n\\n    /**\\n     * @inheritdoc ERC20\\n     * @dev Move voting power on transfer.\\n     */\\n    function _transfer(address owner_, address recipient_, uint256 amount_) internal virtual override {\\n        super._transfer(owner_, recipient_, amount_);\\n        _moveVotingPower(delegates[owner_], delegates[recipient_], amount_);\\n    }\\n\\n    /**\\n     * @notice Change delegation for delegator to delegatee.\\n     * @param  delegator_ Account to transfer delegate balance from.\\n     * @param  delegatee_ Account to transfer delegate balance to.\\n     */\\n    function _delegate(address delegator_, address delegatee_) internal virtual {\\n        address currentDelegate_ = delegates[delegator_];\\n        uint256 delegatorBalance_ = balanceOf[delegator_];\\n        delegates[delegator_] = delegatee_;\\n\\n        emit DelegateChanged(delegator_, currentDelegate_, delegatee_);\\n\\n        _moveVotingPower(currentDelegate_, delegatee_, delegatorBalance_);\\n    }\\n\\n    /*\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\\n    \u2591\u2591\u2591\u2591                         Private Functions                         \u2591\u2591\u2591\u2591\\n    \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591*/\\n\\n    /**\\n     * @notice Lookup a value in a list of (sorted) checkpoints.\\n     * @param  ckpts        List of checkpoints to find within.\\n     * @param  blockNumber_ Block number of latest checkpoint.\\n     * @param  shares_      Amount of shares at checkpoint.\\n     * @param  assets_      Amount of assets at checkpoint.\\n     */\\n    function _checkpointsLookup(Checkpoint[] storage ckpts, uint256 blockNumber_)\\n        private\\n        view\\n        returns (uint96 shares_, uint96 assets_)\\n    {\\n        // We run a binary search to look for the earliest checkpoint taken after `blockNumber_`.\\n        //\\n        // Initially we check if the block is recent to narrow the search range.\\n        // During the loop, the index of the wanted checkpoint remains in the range [low_-1, high_).\\n        // With each iteration, either `low_` or `high_` is moved towards the middle of the range to maintain the invariant.\\n        // - If the middle checkpoint is after `blockNumber_`, we look in [low_, mid_)\\n        // - If the middle checkpoint is before or equal to `blockNumber_`, we look in [mid_+1, high_)\\n        // Once we reach a single value (when low_ == high_), we've found the right checkpoint at the index high_-1, if not\\n        // out of bounds (in which case we're looking too far in the past and the result is 0).\\n        // Note that if the latest checkpoint available is exactly for `blockNumber_`, we end up with an index that is\\n        // past the end of the array, so we technically don't find a checkpoint after `blockNumber_`, but it works out\\n        // the same.\\n        uint256 length_ = ckpts.length;\\n\\n        uint256 low_ = 0;\\n        uint256 high_ = length_;\\n\\n        if (length_ > 5) {\\n            uint256 mid_ = length_ - Math.sqrt(length_);\\n            if (_unsafeAccess(ckpts, mid_).fromBlock > blockNumber_) {\\n                high_ = mid_;\\n            } else {\\n                low_ = mid_ + 1;\\n            }\\n        }\\n\\n        while (low_ < high_) {\\n            uint256 mid_ = Math.average(low_, high_);\\n            if (_unsafeAccess(ckpts, mid_).fromBlock > blockNumber_) {\\n                high_ = mid_;\\n            } else {\\n                low_ = mid_ + 1;\\n            }\\n        }\\n\\n        if (high_ == 0) {\\n            return (0, 0);\\n        }\\n\\n        Checkpoint memory checkpoint_ = _unsafeAccess(ckpts, high_ - 1);\\n        return (checkpoint_.shares, checkpoint_.assets);\\n    }\\n\\n    /**\\n     * @notice Move voting power from one account to another.\\n     * @param  src_    Source account to withdraw voting power from.\\n     * @param  dst_    Destination account to deposit voting power to.\\n     * @param  amount_ Ammont of voring power to move, measured in shares.\\n     */\\n    function _moveVotingPower(address src_, address dst_, uint256 amount_) private {\\n        if (src_ != dst_ && amount_ > 0) {\\n            if (src_ != address(0)) {\\n                (uint256 oldWeight_, uint256 newWeight_) = _writeCheckpoint(userCheckpoints[src_], _subtract, amount_);\\n                emit DelegateVotesChanged(src_, oldWeight_, newWeight_);\\n            }\\n\\n            if (dst_ != address(0)) {\\n                (uint256 oldWeight_, uint256 newWeight_) = _writeCheckpoint(userCheckpoints[dst_], _add, amount_);\\n                emit DelegateVotesChanged(dst_, oldWeight_, newWeight_);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Compute and store a checkpoint within a Checkpoints array. Delta applied to share balance.\\n     * @param  ckpts      List of checkpoints to add to.\\n     * @param  op_        Function reference of mathematical operation to apply to delta. Either add or subtract.\\n     * @param  delta_     Delta between previous checkpoint's shares and new checkpoint's shares.\\n     * @return oldWeight_ Previous share balance.\\n     * @return newWeight_ New share balance.\\n     */\\n    function _writeCheckpoint(\\n        Checkpoint[] storage ckpts,\\n        function(uint256, uint256) view returns (uint256) op_,\\n        uint256 delta_\\n    ) private returns (uint256 oldWeight_, uint256 newWeight_) {\\n        uint256 pos_ = ckpts.length;\\n\\n        Checkpoint memory oldCkpt_ = pos_ == 0 ? Checkpoint(0, 0, 0) : _unsafeAccess(ckpts, pos_ - 1);\\n\\n        oldWeight_ = oldCkpt_.shares;\\n        newWeight_ = op_(oldWeight_, delta_);\\n\\n        if (pos_ > 0 && oldCkpt_.fromBlock == block.number) {\\n            _unsafeAccess(ckpts, pos_ - 1).shares = _toUint96(newWeight_);\\n            _unsafeAccess(ckpts, pos_ - 1).assets = _toUint96(convertToAssets(newWeight_));\\n        } else {\\n            ckpts.push(\\n                Checkpoint({\\n                    fromBlock: _toUint32(block.number),\\n                    shares: _toUint96(newWeight_),\\n                    assets: _toUint96(convertToAssets(newWeight_))\\n                })\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Computes the sum of two numbers.\\n     * @param  a_      First number.\\n     * @param  b_      Second number.\\n     * @return result_ Sum of first and second numbers.\\n     */\\n    function _add(uint256 a_, uint256 b_) private pure returns (uint256 result_) {\\n        return a_ + b_;\\n    }\\n\\n    /**\\n     * @notice Subtracts the second number from the first.\\n     * @param  a_      First number.\\n     * @param  b_      Second number.\\n     * @return result_ Result of first number minus second number.\\n     */\\n    function _subtract(uint256 a_, uint256 b_) private pure returns (uint256 result_) {\\n        return a_ - b_;\\n    }\\n    /**\\n     * @notice Returns the downcasted uint32 from uint256, reverting on overflow (when the input is greater than\\n     * largest uint32). Counterpart to Solidity's `uint32` operator.\\n     * @param  value_ Input value to cast.\\n     */\\n\\n    function _toUint32(uint256 value_) private pure returns (uint32) {\\n        require(value_ <= type(uint32).max, \\\"GLRDT:CAST_EXCEEDS_32_BITS\\\");\\n        return uint32(value_);\\n    }\\n\\n    /**\\n     * @notice Returns the downcasted uint96 from uint256, reverting on overflow (when the input is greater than\\n     * largest uint96). Counterpart to Solidity's `uint96` operator.\\n     * @param  value_ Input value to cast.\\n     */\\n    function _toUint96(uint256 value_) private pure returns (uint96) {\\n        require(value_ <= type(uint96).max, \\\"GLRDT:CAST_EXCEEDS_96_BITS\\\");\\n        return uint96(value_);\\n    }\\n\\n    /**\\n     * @notice Optimize accessing checkpoints from storage.\\n     * @dev    Added to OpenZeppelin v4.8.0-rc.0 (https://github.com/OpenZeppelin/openzeppelin-contracts/pull/3673)\\n     * @param  ckpts  Checkpoints array in storage to access.\\n     * @param  pos_   Index/position of the checkpoint.\\n     * @return result Checkpoint found at position in array.\\n     */\\n    function _unsafeAccess(Checkpoint[] storage ckpts, uint256 pos_) private pure returns (Checkpoint storage result) {\\n        assembly {\\n            mstore(0, ckpts.slot)\\n            result.slot := add(keccak256(0, 0x20), pos_)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/LockedRevenueDistributionToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.7;\\n\\nimport {RevenueDistributionToken} from \\\"revenue-distribution-token/RevenueDistributionToken.sol\\\";\\nimport {ERC20} from \\\"erc20/ERC20.sol\\\";\\nimport {ERC20Helper} from \\\"erc20-helper/ERC20Helper.sol\\\";\\nimport {ILockedRevenueDistributionToken} from \\\"./interfaces/ILockedRevenueDistributionToken.sol\\\";\\n\\n/*\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\\n\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\\n\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2557\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\\n\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\\n\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\\n\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\\n\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\\n\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u255d\u2591\u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\\n\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\\n\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\\n\u2591\u2591\u2591\u2591                                                                       \u2591\u2591\u2591\u2591\\n\u2591\u2591\u2591\u2591                  Locked Revenue Distribution Token                    \u2591\u2591\u2591\u2591\\n\u2591\u2591\u2591\u2591                                                                       \u2591\u2591\u2591\u2591\\n\u2591\u2591\u2591\u2591  Extending Maple's RevenueDistributionToken with time-based locking,  \u2591\u2591\u2591\u2591\\n\u2591\u2591\u2591\u2591  fee-based instant withdrawals and public vesting schedule updating.  \u2591\u2591\u2591\u2591\\n\u2591\u2591\u2591\u2591                                                                       \u2591\u2591\u2591\u2591\\n\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\\n\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591*/\\n\\n/**\\n * @title  ERC-4626 revenue distribution vault with locking.\\n * @notice Tokens are locked and must be subject to time-based or fee-based withdrawal conditions.\\n * @dev    Limited to a maximum asset supply of uint96.\\n * @author GET Protocol DAO\\n * @author Uses Maple's RevenueDistributionToken v1.0.1 under AGPL-3.0 (https://github.com/maple-labs/revenue-distribution-token/tree/v1.0.1)\\n */\\ncontract LockedRevenueDistributionToken is ILockedRevenueDistributionToken, RevenueDistributionToken {\\n    uint256 public constant override MAXIMUM_LOCK_TIME = 104 weeks;\\n    uint256 public constant override VESTING_PERIOD = 2 weeks;\\n    uint256 public constant override WITHDRAWAL_WINDOW = 4 weeks;\\n    uint256 public override instantWithdrawalFee;\\n    uint256 public override lockTime;\\n\\n    mapping(address => WithdrawalRequest[]) internal userWithdrawalRequests;\\n    mapping(address => bool) public override withdrawalFeeExemptions;\\n\\n    constructor(\\n        string memory name_,\\n        string memory symbol_,\\n        address owner_,\\n        address asset_,\\n        uint256 precision_,\\n        uint256 instantWithdrawalFee_,\\n        uint256 lockTime_,\\n        uint256 initialSeed_\\n    ) RevenueDistributionToken(name_, symbol_, owner_, asset_, precision_) {\\n        instantWithdrawalFee = instantWithdrawalFee_;\\n        lockTime = lockTime_;\\n\\n        // We initialize the contract by seeding an amount of shares and then burning them. This prevents donation\\n        // attacks from affecting the precision of the shares:assets rate.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3706\\n        if (initialSeed_ > 0) {\\n            address caller_ = msg.sender;\\n            address receiver_ = address(0);\\n\\n            // RDT.deposit() cannot be called within the constructor as this uses immutable variables.\\n            // ERC20._mint()\\n            totalSupply += initialSeed_;\\n            unchecked {\\n                balanceOf[receiver_] += initialSeed_;\\n            }\\n            emit Transfer(address(0), receiver_, initialSeed_);\\n\\n            // RDT._mint()\\n            freeAssets = initialSeed_;\\n            emit Deposit(caller_, receiver_, initialSeed_, initialSeed_);\\n            emit IssuanceParamsUpdated(freeAssets, 0);\\n            require(ERC20Helper.transferFrom(asset_, msg.sender, address(this), initialSeed_), \\\"LRDT:C:TRANSFER_FROM\\\");\\n        }\\n    }\\n\\n    /*\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\\n    \u2591\u2591\u2591\u2591                     Administrative Functions                      \u2591\u2591\u2591\u2591\\n    \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591*/\\n\\n    /**\\n     * @inheritdoc ILockedRevenueDistributionToken\\n     */\\n    function setInstantWithdrawalFee(uint256 percentage_) external virtual override {\\n        require(msg.sender == owner, \\\"LRDT:CALLER_NOT_OWNER\\\");\\n        require(percentage_ < 100, \\\"LRDT:INVALID_FEE\\\");\\n\\n        instantWithdrawalFee = percentage_;\\n\\n        emit InstantWithdrawalFeeChanged(percentage_);\\n    }\\n\\n    /**\\n     * @inheritdoc ILockedRevenueDistributionToken\\n     */\\n    function setLockTime(uint256 lockTime_) external virtual override {\\n        require(msg.sender == owner, \\\"LRDT:CALLER_NOT_OWNER\\\");\\n        require(lockTime_ <= MAXIMUM_LOCK_TIME, \\\"LRDT:INVALID_LOCK_TIME\\\");\\n\\n        lockTime = lockTime_;\\n\\n        emit LockTimeChanged(lockTime_);\\n    }\\n\\n    /**\\n     * @inheritdoc ILockedRevenueDistributionToken\\n     */\\n    function setWithdrawalFeeExemption(address account_, bool status_) external virtual override {\\n        require(msg.sender == owner, \\\"LRDT:CALLER_NOT_OWNER\\\");\\n        require(account_ != address(0), \\\"LRDT:ZERO_ACCOUNT\\\");\\n\\n        if (status_) {\\n            withdrawalFeeExemptions[account_] = true;\\n        } else {\\n            delete withdrawalFeeExemptions[account_];\\n        }\\n\\n        emit WithdrawalFeeExemptionStatusChanged(account_, status_);\\n    }\\n\\n    /*\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\\n    \u2591\u2591\u2591\u2591                         Public Functions                          \u2591\u2591\u2591\u2591\\n    \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591*/\\n\\n    /**\\n     * @inheritdoc ILockedRevenueDistributionToken\\n     */\\n    function createWithdrawalRequest(uint256 shares_) external virtual override nonReentrant {\\n        require(shares_ > 0, \\\"LRDT:INVALID_AMOUNT\\\");\\n        require(shares_ <= balanceOf[msg.sender], \\\"LRDT:INSUFFICIENT_BALANCE\\\");\\n\\n        WithdrawalRequest memory request_ = WithdrawalRequest(\\n            uint32(block.timestamp + lockTime), uint32(lockTime), uint96(shares_), uint96(convertToAssets(shares_))\\n        );\\n        userWithdrawalRequests[msg.sender].push(request_);\\n\\n        _transfer(msg.sender, address(this), shares_);\\n\\n        emit WithdrawalRequestCreated(request_, userWithdrawalRequests[msg.sender].length - 1);\\n    }\\n\\n    /**\\n     * @inheritdoc ILockedRevenueDistributionToken\\n     */\\n    function cancelWithdrawalRequest(uint256 pos_) external virtual override nonReentrant {\\n        WithdrawalRequest memory request_ = userWithdrawalRequests[msg.sender][pos_];\\n        require(request_.shares > 0, \\\"LRDT:NO_WITHDRAWAL_REQUEST\\\");\\n\\n        delete userWithdrawalRequests[msg.sender][pos_];\\n\\n        uint256 refundShares_ = convertToShares(request_.assets);\\n        uint256 burnShares_ = request_.shares - refundShares_;\\n\\n        if (burnShares_ > 0) {\\n            uint256 burnAssets_ = convertToAssets(burnShares_);\\n            _burn(burnShares_, burnAssets_, address(this), address(this), address(this));\\n            emit Redistribute(burnAssets_);\\n        }\\n\\n        if (refundShares_ > 0) {\\n            _transfer(address(this), msg.sender, refundShares_);\\n            emit Refund(msg.sender, convertToAssets(refundShares_), refundShares_);\\n        }\\n\\n        emit WithdrawalRequestCancelled(pos_);\\n    }\\n\\n    /**\\n     * @inheritdoc ILockedRevenueDistributionToken\\n     */\\n    function executeWithdrawalRequest(uint256 pos_) external virtual override nonReentrant {\\n        (WithdrawalRequest memory request_, uint256 assets_, uint256 fee_) = previewWithdrawalRequest(pos_, msg.sender);\\n        require(request_.shares > 0, \\\"LRDT:NO_WITHDRAWAL_REQUEST\\\");\\n        require(request_.unlockedAt + WITHDRAWAL_WINDOW > block.timestamp, \\\"LRDT:WITHDRAWAL_WINDOW_CLOSED\\\");\\n\\n        delete userWithdrawalRequests[msg.sender][pos_];\\n\\n        uint256 executeShares_ = convertToShares(assets_);\\n        uint256 burnShares_ = request_.shares - executeShares_;\\n\\n        if (burnShares_ > 0) {\\n            uint256 burnAssets_ = convertToAssets(burnShares_);\\n            _burn(burnShares_, burnAssets_, address(this), address(this), address(this));\\n            emit Redistribute(burnAssets_ - fee_);\\n        }\\n\\n        if (executeShares_ > 0) {\\n            _transfer(address(this), msg.sender, executeShares_);\\n            _burn(executeShares_, assets_, msg.sender, msg.sender, msg.sender);\\n        }\\n\\n        if (fee_ > 0) {\\n            emit WithdrawalFeePaid(msg.sender, msg.sender, msg.sender, fee_);\\n        }\\n\\n        emit WithdrawalRequestExecuted(pos_);\\n    }\\n\\n    /**\\n     * @inheritdoc ILockedRevenueDistributionToken\\n     */\\n    function updateVestingSchedule() external virtual override returns (uint256 issuanceRate_, uint256 freeAssets_) {\\n        // This require is here to prevent public function calls extending the vesting period infinitely. By allowing\\n        // this to be called again on the last day of the vesting period, we can maintain a regular schedule of reward\\n        // distribution on the same day of the week.\\n        //\\n        // Aside from the following line, and a fixed vesting period, this function is unchanged from the Maple\\n        // implementation.\\n        require(vestingPeriodFinish <= block.timestamp + 24 hours, \\\"LRDT:UVS:STILL_VESTING\\\");\\n        require(totalSupply > 0, \\\"LRDT:UVS:ZERO_SUPPLY\\\");\\n\\n        // Update \\\"y-intercept\\\" to reflect current available asset.\\n        freeAssets_ = (freeAssets = totalAssets());\\n\\n        // Carry over remaining time.\\n        uint256 vestingTime_ = VESTING_PERIOD;\\n        if (vestingPeriodFinish > block.timestamp) {\\n            vestingTime_ = VESTING_PERIOD + (vestingPeriodFinish - block.timestamp);\\n        }\\n\\n        // Calculate slope.\\n        issuanceRate_ =\\n            (issuanceRate = ((ERC20(asset).balanceOf(address(this)) - freeAssets_) * precision) / vestingTime_);\\n\\n        require(issuanceRate_ > 0, \\\"LRDT:UVS:ZERO_ISSUANCE_RATE\\\");\\n\\n        // Update timestamp and period finish.\\n        vestingPeriodFinish = (lastUpdated = block.timestamp) + vestingTime_;\\n\\n        emit IssuanceParamsUpdated(freeAssets_, issuanceRate_);\\n        emit VestingScheduleUpdated(msg.sender, vestingPeriodFinish);\\n    }\\n\\n    /**\\n     * @inheritdoc ILockedRevenueDistributionToken\\n     * @dev Reentrancy modifier provided within the internal function call.\\n     */\\n    function deposit(uint256 assets_, address receiver_, uint256 minShares_)\\n        external\\n        virtual\\n        override\\n        returns (uint256 shares_)\\n    {\\n        shares_ = deposit(assets_, receiver_);\\n        require(shares_ >= minShares_, \\\"LRDT:D:SLIPPAGE_PROTECTION\\\");\\n    }\\n\\n    /**\\n     * @inheritdoc ILockedRevenueDistributionToken\\n     * @dev Reentrancy modifier provided within the internal function call.\\n     */\\n    function mint(uint256 shares_, address receiver_, uint256 maxAssets_)\\n        external\\n        virtual\\n        override\\n        returns (uint256 assets_)\\n    {\\n        assets_ = mint(shares_, receiver_);\\n        require(assets_ <= maxAssets_, \\\"LRDT:M:SLIPPAGE_PROTECTION\\\");\\n    }\\n\\n    /**\\n     * @inheritdoc RevenueDistributionToken\\n     * @dev Will check for withdrawal fee exemption present on owner.\\n     */\\n    function redeem(uint256 shares_, address receiver_, address owner_)\\n        public\\n        virtual\\n        override\\n        nonReentrant\\n        returns (uint256 assets_)\\n    {\\n        uint256 fee_;\\n        (assets_, fee_) = previewRedeem(shares_, owner_);\\n        _burn(shares_, assets_, receiver_, owner_, msg.sender);\\n\\n        if (fee_ > 0) {\\n            emit WithdrawalFeePaid(msg.sender, receiver_, owner_, fee_);\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc ILockedRevenueDistributionToken\\n     * @dev Reentrancy modifier provided within the internal function call.\\n     */\\n    function redeem(uint256 shares_, address receiver_, address owner_, uint256 minAssets_)\\n        external\\n        virtual\\n        override\\n        returns (uint256 assets_)\\n    {\\n        assets_ = redeem(shares_, receiver_, owner_);\\n        require(assets_ >= minAssets_, \\\"LRDT:R:SLIPPAGE_PROTECTION\\\");\\n    }\\n\\n    /**\\n     * @inheritdoc RevenueDistributionToken\\n     * @dev Will check for withdrawal fee exemption present on owner.\\n     */\\n    function withdraw(uint256 assets_, address receiver_, address owner_)\\n        public\\n        virtual\\n        override\\n        nonReentrant\\n        returns (uint256 shares_)\\n    {\\n        uint256 fee_;\\n        (shares_, fee_) = previewWithdraw(assets_, owner_);\\n        _burn(shares_, assets_, receiver_, owner_, msg.sender);\\n\\n        if (fee_ > 0) {\\n            emit WithdrawalFeePaid(msg.sender, receiver_, owner_, fee_);\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc ILockedRevenueDistributionToken\\n     * @dev Reentrancy modifier provided within the internal function call.\\n     */\\n    function withdraw(uint256 assets_, address receiver_, address owner_, uint256 maxShares_)\\n        external\\n        virtual\\n        override\\n        returns (uint256 shares_)\\n    {\\n        shares_ = withdraw(assets_, receiver_, owner_);\\n        require(shares_ <= maxShares_, \\\"LRDT:W:SLIPPAGE_PROTECTION\\\");\\n    }\\n\\n    /*\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\\n    \u2591\u2591\u2591\u2591                          View Functions                           \u2591\u2591\u2591\u2591\\n    \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591*/\\n\\n    /**\\n     * @inheritdoc RevenueDistributionToken\\n     * @dev Returns the amount of redeemable assets for given shares after instant withdrawal fee.\\n     * @dev `address(0)` cannot be set as exempt, and is used here as default to imply that fees must be deducted.\\n     */\\n    function previewRedeem(uint256 shares_) public view virtual override returns (uint256 assets_) {\\n        (assets_,) = previewRedeem(shares_, address(0));\\n    }\\n\\n    /**\\n     * @inheritdoc ILockedRevenueDistributionToken\\n     */\\n    function previewRedeem(uint256 shares_, address owner_)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256 assets_, uint256 fee_)\\n    {\\n        if (withdrawalFeeExemptions[owner_]) {\\n            return (super.previewRedeem(shares_), 0);\\n        }\\n\\n        uint256 assetsPlusFee_ = super.previewRedeem(shares_);\\n        assets_ = (assetsPlusFee_ * (100 - instantWithdrawalFee)) / 100;\\n        fee_ = assetsPlusFee_ - assets_;\\n    }\\n\\n    /**\\n     * @inheritdoc RevenueDistributionToken\\n     * @dev Returns the amount of redeemable assets for given shares after instant withdrawal fee.\\n     * @dev `address(0)` cannot be set as exempt, and is used here as default to imply that fees must be deducted.\\n     */\\n    function previewWithdraw(uint256 assets_) public view virtual override returns (uint256 shares_) {\\n        (shares_,) = previewWithdraw(assets_, address(0));\\n    }\\n\\n    /**\\n     * @inheritdoc ILockedRevenueDistributionToken\\n     */\\n    function previewWithdraw(uint256 assets_, address owner_)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256 shares_, uint256 fee_)\\n    {\\n        if (withdrawalFeeExemptions[owner_]) {\\n            return (super.previewWithdraw(assets_), 0);\\n        }\\n\\n        uint256 assetsPlusFee_ = (assets_ * 100) / (100 - instantWithdrawalFee);\\n        shares_ = super.previewWithdraw(assetsPlusFee_);\\n        fee_ = assetsPlusFee_ - assets_;\\n    }\\n\\n    /**\\n     * @inheritdoc ILockedRevenueDistributionToken\\n     */\\n    function previewWithdrawalRequest(uint256 pos_, address owner_)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (WithdrawalRequest memory request_, uint256 assets_, uint256 fee_)\\n    {\\n        request_ = userWithdrawalRequests[owner_][pos_];\\n\\n        if (withdrawalFeeExemptions[owner_] || request_.unlockedAt <= block.timestamp) {\\n            return (request_, request_.assets, 0);\\n        }\\n\\n        uint256 remainingTime_ = request_.unlockedAt - block.timestamp;\\n        uint256 feePercentage_ = (instantWithdrawalFee * remainingTime_ * precision) / request_.lockTime;\\n        assets_ = (request_.assets * (100 * precision - feePercentage_)) / (100 * precision);\\n        fee_ = request_.assets - assets_;\\n    }\\n\\n    /**\\n     * @inheritdoc RevenueDistributionToken\\n     * @dev Restricted to uint96 as defined in WithdrawalRequest struct.\\n     */\\n    function maxDeposit(address receiver_) external pure virtual override returns (uint256 maxAssets_) {\\n        receiver_; // Silence warning\\n        maxAssets_ = type(uint96).max;\\n    }\\n\\n    /**\\n     * @inheritdoc RevenueDistributionToken\\n     * @dev Restricted to uint96 as defined in WithdrawalRequest struct.\\n     */\\n    function maxMint(address receiver_) external pure virtual override returns (uint256 maxShares_) {\\n        receiver_; // Silence warning\\n        maxShares_ = type(uint96).max;\\n    }\\n\\n    /**\\n     * @inheritdoc ILockedRevenueDistributionToken\\n     */\\n    function withdrawalRequestCount(address owner_) external view virtual override returns (uint256 count_) {\\n        count_ = userWithdrawalRequests[owner_].length;\\n    }\\n\\n    /**\\n     * @inheritdoc ILockedRevenueDistributionToken\\n     */\\n    function withdrawalRequests(address owner_)\\n        external\\n        view\\n        virtual\\n        override\\n        returns (WithdrawalRequest[] memory withdrawalRequests_)\\n    {\\n        withdrawalRequests_ = userWithdrawalRequests[owner_];\\n    }\\n\\n    /**\\n     * @inheritdoc ILockedRevenueDistributionToken\\n     */\\n    function withdrawalRequests(address account_, uint256 pos_)\\n        external\\n        view\\n        virtual\\n        override\\n        returns (WithdrawalRequest memory withdrawalRequest_)\\n    {\\n        withdrawalRequest_ = userWithdrawalRequests[account_][pos_];\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IGovernanceLockedRevenueDistributionToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.7;\\n\\ninterface IGovernanceLockedRevenueDistributionToken {\\n    /**\\n     * @notice        Represents a voting checkpoin, packed into a single word.\\n     * @custom:member fromBlock Block number after which the checkpoint applies.\\n     * @custom:member shares    Amount of shares held & delegated to calculate point-in-time votes.\\n     * @custom:member assets    Amount of assets held & delegated to calculate point-in-time votes.\\n     */\\n    struct Checkpoint {\\n        uint32 fromBlock;\\n        uint96 shares;\\n        uint96 assets;\\n    }\\n\\n    /*\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\\n    \u2591\u2591\u2591\u2591                              Events                               \u2591\u2591\u2591\u2591\\n    \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591*/\\n\\n    /**\\n     * @notice Emitted when an account changes their delegate.\\n     * @param  delegator_    Account that has changed delegate.\\n     * @param  fromDelegate_ Previous delegate.\\n     * @param  toDelegate_   New delegate.\\n     */\\n    event DelegateChanged(address indexed delegator_, address indexed fromDelegate_, address indexed toDelegate_);\\n\\n    /**\\n     * @notice Emitted when a token transfer or delegate change results in changes to a delegate's number of votes.\\n     * @param  delegate_        Delegate that has received delegated balance change.\\n     * @param  previousBalance_ Previous delegated balance.\\n     * @param  newBalance_      New delegated balance.\\n     */\\n    event DelegateVotesChanged(address indexed delegate_, uint256 previousBalance_, uint256 newBalance_);\\n\\n    /*\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\\n    \u2591\u2591\u2591\u2591                          State Variables                          \u2591\u2591\u2591\u2591\\n    \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591*/\\n\\n    /**\\n     * @notice Get the `pos`-th checkpoint for `account`.\\n     * @dev    Unused in Compound governance specification, exposes underlying Checkpoint struct.\\n     * @param  account_   Account that holds checkpoint.\\n     * @param  pos_       Index/position of the checkpoint.\\n     * @return fromBlock  Block in which the checkpoint is valid from.\\n     * @return shares     Total amount of shares within the checkpoint.\\n     * @return assets     Total amount of underlying assets derived from shares at time of checkpoint.\\n     */\\n    function userCheckpoints(address account_, uint256 pos_)\\n        external\\n        view\\n        returns (uint32 fromBlock, uint96 shares, uint96 assets);\\n\\n    /*\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\\n    \u2591\u2591\u2591\u2591                         Public Functions                          \u2591\u2591\u2591\u2591\\n    \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591*/\\n\\n    /**\\n     * @notice Delegates votes from the sender to `delegatee`.\\n     * @dev    Shares are delegated upon mint and transfer and removed upon burn.\\n     * @param  delegatee_ Account to delegate votes to.\\n     */\\n    function delegate(address delegatee_) external;\\n\\n    /**\\n     * @notice Delegates votes from signer to `delegatee`.\\n     * @param  delegatee_ Account to delegate votes to.\\n     * @param  nonce_     Nonce of next signature transaction, expected to be equal to `nonces(signer)`.\\n     * @param  deadline_  Deadline after which the permit is invalid.\\n     * @param  v_         ECDSA signature v component.\\n     * @param  r_         ECDSA signature r component.\\n     * @param  s_         ECDSA signature s component.\\n     */\\n    function delegateBySig(address delegatee_, uint256 nonce_, uint256 deadline_, uint8 v_, bytes32 r_, bytes32 s_)\\n        external;\\n\\n    /*\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\\n    \u2591\u2591\u2591\u2591                          View Functions                           \u2591\u2591\u2591\u2591\\n    \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591*/\\n\\n    /**\\n     * @notice Historical conversion from shares to assets, used for calculating voting power on past blocks.\\n     * @param  shares_      Amount of shares to conver to assets.\\n     * @param  blockNumber_ Block to use for checkpoint lookup.\\n     * @return assets_      Amount of assets held at block, representing voting power.\\n     */\\n    function convertToAssets(uint256 shares_, uint256 blockNumber_) external view returns (uint256 assets_);\\n\\n    /**\\n     * @notice Get the Compound-compatible `pos`-th checkpoint for `account`.\\n     * @dev    Maintains Compound `checkpoints` compatibility by returning votes as a uint96 and omitting shares.\\n     * @param  account_   Account that holds checkpoint.\\n     * @param  pos_       Index/position of the checkpoint.\\n     * @return fromBlock_ Block in which the checkpoint is valid from.\\n     * @return votes_     Total amount of underlying assets (votes) derived from shares.\\n     */\\n    function checkpoints(address account_, uint32 pos_) external view returns (uint32 fromBlock_, uint96 votes_);\\n\\n    /**\\n     * @dev Get number of checkpoints for `account`.\\n     */\\n    function numCheckpoints(address account_) external view returns (uint32);\\n\\n    /**\\n     * @notice Returns the current amount of votes that `account` has.\\n     * @dev    The delegated balance is denominated in the amount of shares delegated to an account, but voting power\\n     * is measured in assets. A conversion is done using the delegated shares to get the assets as of the latest\\n     * checkpoint. This ensures that all stakers' shares are converted to assets at the same rate.\\n     * @param  account_ Address of account to get votes for.\\n     * @return votes_   Amount of voting power as the number of assets for delegated shares.\\n     */\\n    function getVotes(address account_) external view returns (uint256 votes_);\\n\\n    /**\\n     * @notice Comp version of the `getVotes` accessor, with `uint96` return type.\\n     * @param  account_ Address of account to get votes for.\\n     * @return votes_   Amount of voting power as the number of assets for delegated shares.\\n     */\\n    function getCurrentVotes(address account_) external view returns (uint96 votes_);\\n\\n    /**\\n     * @notice Returns the amount of votes that `account` had at the end of a past block (`blockNumber`).\\n     * @param  account_     Address of account to get votes for.\\n     * @param  blockNumber_ Voting power at block.\\n     * @return votes_       Amount of voting power as the number of assets for delegated shares.\\n     */\\n    function getPastVotes(address account_, uint256 blockNumber_) external view returns (uint256 votes_);\\n\\n    /**\\n     * @notice Comp version of the `getPastVotes` accessor, with `uint96` return type.\\n     * @param  account_     Address of account to get votes for.\\n     * @param  blockNumber_ Voting power at block.\\n     * @return votes_       Amount of voting power as the number of assets for delegated shares.\\n     */\\n    function getPriorVotes(address account_, uint256 blockNumber_) external view returns (uint96 votes_);\\n\\n    /**\\n     * @notice Returns the total supply of shares available at the end of a past block (`blockNumber`).\\n     * @param  blockNumber_ Block number to check for total supply.\\n     * @return totalSupply_ Total supply of shares.\\n     */\\n    function getPastTotalSupply(uint256 blockNumber_) external view returns (uint256 totalSupply_);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/ILockedRevenueDistributionToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.7;\\n\\ninterface ILockedRevenueDistributionToken {\\n    /**\\n     * @notice        Represents a withdrawal request, packed into a single word.\\n     * @custom:member unlockedAt Timestamp after which the withdrawal is unlocked.\\n     * @custom:member shares     Amount of shares to be burned upon withdrawal execution.\\n     * @custom:member assets     Amount of assets to be returned to user upon withdrawal execution.\\n     */\\n    struct WithdrawalRequest {\\n        uint32 unlockedAt;\\n        uint32 lockTime;\\n        uint96 shares;\\n        uint96 assets;\\n    }\\n\\n    /*\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\\n    \u2591\u2591\u2591\u2591                              Events                               \u2591\u2591\u2591\u2591\\n    \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591*/\\n\\n    /**\\n     * @notice Emitted when burning shares upon withdrawal request cancellation.\\n     * @param  assets_ Amount of assets returned to contract address.\\n     * @param  shares_ Share delta between withdrawal request creation and cancellation.\\n     */\\n    event CancellationBurn(uint256 assets_, uint256 shares_);\\n\\n    /**\\n     * @notice Emitted when the instant withdrawal fee is set.\\n     * @param  percentage_ A percentage value from 0 to 100.\\n     */\\n    event InstantWithdrawalFeeChanged(uint256 percentage_);\\n\\n    /**\\n     * @notice Emitted when time-to-unlock for a standard withdrawal set.\\n     * @param  lockTime_ Integer length of lock time, e.g. `26 weeks`.\\n     */\\n    event LockTimeChanged(uint256 lockTime_);\\n\\n    /**\\n     * @notice Emitted when redistributing rewards upon early execution or cancellation of a withdrawal request.\\n     * @param  assets_ Assets redistributed to remaining stakers.\\n     */\\n    event Redistribute(uint256 assets_);\\n\\n    /**\\n     * @notice Emitted when refunding shares upon withdrawal request cancellation.\\n     * @param  receiver_   Account to refund shares to at spot rate.\\n     * @param  assets_     Equivalent asset value for shares returned.\\n     * @param  shares_     Amount of shares returned to the receiver.\\n     */\\n    event Refund(address indexed receiver_, uint256 assets_, uint256 shares_);\\n\\n    /**\\n     * @notice Emitted when fee exemption status has been set for an address.\\n     * @param  account_ Address in which to apply the exemption.\\n     * @param  status_  True for exempt, false to remove exemption.\\n     */\\n    event WithdrawalFeeExemptionStatusChanged(address indexed account_, bool status_);\\n\\n    /**\\n     * @notice Emitted when an instant withdrawal fee is paid.\\n     * @param  caller_   The caller of the `redeem` or `withdraw` function.\\n     * @param  receiver_ The receiver of the assets.\\n     * @param  owner_    The owner of the shares or withdrawal request.\\n     * @param  fee_      The assets paid as fee.\\n     */\\n    event WithdrawalFeePaid(address indexed caller_, address indexed receiver_, address indexed owner_, uint256 fee_);\\n\\n    /**\\n     * @notice Emitted when a new withdrawal request has been created for an account.\\n     * @param  request_ Struct containing shares, assets, and maturity date of the created request.\\n     * @param  pos_   Index/position of the withdrawal request created.\\n     */\\n    event WithdrawalRequestCreated(WithdrawalRequest request_, uint256 pos_);\\n\\n    /**\\n     * @notice Emitted when an account cancels any existing withdrawal requests.\\n     * @param  pos_   Index/position of the withdrawal request cancelled.\\n     */\\n    event WithdrawalRequestCancelled(uint256 pos_);\\n\\n    /**\\n     * @notice Emitted when a withdrawal request has been executed with shares burned and assets withdrawn.\\n     * @param  pos_ Index/position of the withdrawal request executed.\\n     */\\n    event WithdrawalRequestExecuted(uint256 pos_);\\n\\n    /*\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\\n    \u2591\u2591\u2591\u2591                          State Variables                          \u2591\u2591\u2591\u2591\\n    \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591*/\\n\\n    /**\\n     * @notice Constant maximum lock time able to be set using `setLockTime` to avoid permanent lockup.\\n     * @return maximumLockTime_ Maxmimum lock time integer length, e.g. `104 weeks`.\\n     */\\n    function MAXIMUM_LOCK_TIME() external view returns (uint256 maximumLockTime_);\\n\\n    /**\\n     * @notice Constant vesting period, used in `updateVestingSchedule`.\\n     * @return vestingPeriod_ Fixed vesting period, e.g. `2 weeks`.\\n     */\\n    function VESTING_PERIOD() external view returns (uint256 vestingPeriod_);\\n\\n    /**\\n     * @notice Constant time window in which unlocked withdrawal requests can be executed.\\n     * @return withdrawalWindow_ Fixed withdrawal window, e.g. `4 weeks`.\\n     */\\n    function WITHDRAWAL_WINDOW() external view returns (uint256 withdrawalWindow_);\\n\\n    /**\\n     * @notice Percentage withdrawal fee to be applied to instant withdrawals.\\n     * @return instantWithdrawalFee_ A percentage value from 0 to 100.\\n     */\\n    function instantWithdrawalFee() external view returns (uint256 instantWithdrawalFee_);\\n\\n    /**\\n     * @notice The lock time set for standard withdrawals to become unlocked.\\n     * @return lockTime_ Length of lock of a standard withdrawal request, e.g. `26 weeks`.\\n     */\\n    function lockTime() external view returns (uint256 lockTime_);\\n\\n    /**\\n     * @notice Returns exemption status for a given account. When true then instant withdrawal fee will not apply.\\n     * @param  account_ Account to check for exemption.\\n     * @return status_  Exemption status.\\n     */\\n    function withdrawalFeeExemptions(address account_) external view returns (bool status_);\\n\\n    /*\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\\n    \u2591\u2591\u2591\u2591                     Administrative Functions                      \u2591\u2591\u2591\u2591\\n    \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591*/\\n\\n    /**\\n     * @notice Sets the intstant withdrawal fee, applied when making instant withdrawals or redemptions.\\n     * @notice Can only be set by owner.\\n     * @param  percentage_ Fee percentage. Must be an integer between 0 and 100 inclusive.\\n     */\\n    function setInstantWithdrawalFee(uint256 percentage_) external;\\n\\n    /**\\n     * @notice Sets the lock time for standard withdrawals to become unlocked.\\n     * @notice Can only be set by owner.\\n     * @notice Must be lower than MAXIMUM_LOCK_TIME to prevent permanent lockup.\\n     * @param  lockTime_ Length of lock of a standard withdrawal request.\\n     */\\n    function setLockTime(uint256 lockTime_) external;\\n\\n    /**\\n     * @notice Sets or unsets an owner address to be exempt from the withdrawal fee.\\n     * @notice Useful in case of future migrations where an approved contract may be given permission to migrate\\n     * balances to a new token. Can also be used to exempt third-party vaults from facing withdrawal fee when\\n     * managing balances, such as lending platform liquidations.\\n     * @notice Can only be set by contract `owner`.\\n     * @dev    The zero address cannot be set as exmempt as this will always represent an address that pays fees.\\n     * @param  owner_  Owner address to exempt from instant withdrawal fees.\\n     * @param  status_ true to add exemption, false to remove exemption.\\n     */\\n    function setWithdrawalFeeExemption(address owner_, bool status_) external;\\n\\n    /*\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\\n    \u2591\u2591\u2591\u2591                         Public Functions                          \u2591\u2591\u2591\u2591\\n    \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591*/\\n\\n    /**\\n     * @notice Creates a new withdrawal request for future execution using the shares conversion at the point of\\n     * request. May only be executed after the unlock date.\\n     * @notice Transfers shares to the vault contract to reserve them, reducing share balance.\\n     * @param  shares_ Amount of shares to redeem upon unlock.\\n     */\\n    function createWithdrawalRequest(uint256 shares_) external;\\n\\n    /**\\n     * @notice Removes an open withdrawal request for the sender.\\n     * @param  pos_ Index/position of the withdrawal request to be cancelled.\\n     */\\n    function cancelWithdrawalRequest(uint256 pos_) external;\\n\\n    /**\\n     * @notice Executes an existing withdrawal request for msg.sender. Before the request is unlocked, a percentage\\n     * fee will be paid, equal to a percentage of the instantWithdrawalFee by time elapsed of the request.\\n     * @param  pos_ Index/position of the withdrawal request to be executed.\\n     */\\n    function executeWithdrawalRequest(uint256 pos_) external;\\n\\n    /**\\n     * @notice Executes an existing withdrawal request that has passed its unlock date.\\n     * @dev    Identical to parent implementation but made public by fixed vesting period and removal of owner check.\\n     * @return issuanceRate_ Slope of release of newly added assets, scaled up by `precision`.\\n     * @return freeAssets_   Amount of assets currently released to stakers.\\n     */\\n    function updateVestingSchedule() external returns (uint256 issuanceRate_, uint256 freeAssets_);\\n\\n    /**\\n     * @notice ERC5143 slippage-protected deposit method. The transaction will revert if the shares to be returned is\\n     * less than minShares_.\\n     * @param  assets_    Amount of assets to deposit.\\n     * @param  receiver_  The receiver of the shares.\\n     * @param  minShares_ Minimum amount of shares to be returned.\\n     * @return shares_    Amount of shares returned to receiver_.\\n     */\\n    function deposit(uint256 assets_, address receiver_, uint256 minShares_) external returns (uint256 shares_);\\n\\n    /**\\n     * @notice ERC5143 slippage-protected mint method. The transaction will revert if the assets to be deducted is\\n     * greater than maxAssets_.\\n     * @param  shares_    Amount of shares to mint.\\n     * @param  receiver_  The receiver of the shares.\\n     * @param  maxAssets_ Maximum amount of assets to be deducted.\\n     * @return assets_    Amount of deducted when minting shares.\\n     */\\n    function mint(uint256 shares_, address receiver_, uint256 maxAssets_) external returns (uint256 assets_);\\n\\n    /**\\n     * @notice ERC5143 slippage-protected redeem method. The transaction will revert if the assets to be returned is\\n     * less than minAssets_.\\n     * @param  shares_    Amount of shares to redeem.\\n     * @param  receiver_  The receiver of the assets.\\n     * @param  owner_     Owner of shares making redemption.\\n     * @param  minAssets_ Minimum amount of assets to be returned.\\n     * @return assets_    Amount of assets returned.\\n     */\\n    function redeem(uint256 shares_, address receiver_, address owner_, uint256 minAssets_)\\n        external\\n        returns (uint256 assets_);\\n\\n    /**\\n     * @notice ERC5143 slippage-protected withdraw method. The transaction will revert if the shares to be deducted is\\n     * greater than maxShares_.\\n     * @param  assets_    Amount of assets to withdraw.\\n     * @param  receiver_  The receiver of the assets.\\n     * @param  owner_     Owner of shares making withdrawal.\\n     * @param  maxShares_ Minimum amount of shares to be deducted.\\n     * @return shares_    Amount of shares deducted.\\n     */\\n    function withdraw(uint256 assets_, address receiver_, address owner_, uint256 maxShares_)\\n        external\\n        returns (uint256 shares_);\\n\\n    /*\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\\n    \u2591\u2591\u2591\u2591                          View Functions                           \u2591\u2591\u2591\u2591\\n    \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591*/\\n\\n    /**\\n     * @notice Previews a redemption of shares for owner. Applies withdrawal fee if owner does not have an exemption.\\n     * @param  owner_  Owner of shares making redemption.\\n     * @param  shares_ Amount of shares to redeem.\\n     * @return assets_ Assets redeemed for shares for owner.\\n     * @param  fee_    The assets paid as fee.\\n     */\\n    function previewRedeem(uint256 shares_, address owner_) external view returns (uint256 assets_, uint256 fee_);\\n\\n    /**\\n     * @notice Previews a withdrawal of assets for owner. Applies withdrawal fee if owner does not have an exemption.\\n     * @param  owner_  Owner of shares makeing withdrawal.\\n     * @param  assets_ Amount of assets to withdraw.\\n     * @return shares_ Shares needed to be burned for owner.\\n     * @param  fee_    The assets paid as fee.\\n     */\\n    function previewWithdraw(uint256 assets_, address owner_) external view returns (uint256 shares_, uint256 fee_);\\n\\n    /**\\n     * @notice Previews a withdrawal request execution, calculating the assets returned to the receiver and fee paid.\\n     * @notice Fee percentage reduces linearly from instantWithdrawalFee until 0 at the unlockedAt timestamp.\\n     * @param  pos_     Index/position of the withdrawal request to be previewed.\\n     * @param  owner_   Owner of the withdrawal request.\\n     * @return request_ The WithdrawalRequest struct within storage.\\n     * @return assets_  Amount of assets returned to owner if withdrawn.\\n     * @return fee_     The assets paid as fee.\\n     */\\n    function previewWithdrawalRequest(uint256 pos_, address owner_)\\n        external\\n        view\\n        returns (WithdrawalRequest memory request_, uint256 assets_, uint256 fee_);\\n\\n    /**\\n     * @notice Returns a count of the number of created withdrawal requests for an account, including cancelled.\\n     * @param  owner_ Account address of owner of withdrawal requests.\\n     * @return count_ Number of withdrawal request created for owner account.\\n     */\\n    function withdrawalRequestCount(address owner_) external view returns (uint256 count_);\\n\\n    /**\\n     * @notice Returns an array of created withdrawal requests for an account, including cancelled.\\n     * @param  owner_    Account address of owner of withdrawal requests.\\n     * @return requests_ Array of withdrawal request structs for an owner.\\n     */\\n    function withdrawalRequests(address owner_) external view returns (WithdrawalRequest[] memory requests_);\\n\\n    /**\\n     * @notice Returns existing withdrawal request for a given account.\\n     * @param  account_ Account address holding withdrawal request.\\n     * @param  pos_     Index/position of the withdrawal request in the array.\\n     * @return request_ Withdrawal request struct found at position for owner.\\n     */\\n    function withdrawalRequests(address account_, uint256 pos_)\\n        external\\n        view\\n        returns (WithdrawalRequest memory request_);\\n}\\n\"\r\n    },\r\n    \"src/libraries/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n * @author Uses OpenZeppelin's Math.sol v4.7.0 under MIT (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.7.0/contracts/utils/math/Math.sol)\\n */\\n\\nlibrary Math {\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`.\\n        // We also know that `k`, the position of the most significant bit, is such that `msb(a) = 2**k`.\\n        // This gives `2**k < a <= 2**(k+1)` \u2192 `2**(k/2) <= sqrt(a) < 2 ** (k/2+1)`.\\n        // Using an algorithm similar to the msb computation, we are able to compute `result = 2**(k/2)` which is a\\n        // good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1;\\n        uint256 x = a;\\n        if (x >> 128 > 0) {\\n            x >>= 128;\\n            result <<= 64;\\n        }\\n        if (x >> 64 > 0) {\\n            x >>= 64;\\n            result <<= 32;\\n        }\\n        if (x >> 32 > 0) {\\n            x >>= 32;\\n            result <<= 16;\\n        }\\n        if (x >> 16 > 0) {\\n            x >>= 16;\\n            result <<= 8;\\n        }\\n        if (x >> 8 > 0) {\\n            x >>= 8;\\n            result <<= 4;\\n        }\\n        if (x >> 4 > 0) {\\n            x >>= 4;\\n            result <<= 2;\\n        }\\n        if (x >> 2 > 0) {\\n            result <<= 1;\\n        }\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"contract-test-utils/=lib/erc20-helper/lib/contract-test-utils/contracts/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"erc20-helper/=lib/erc20-helper/src/\",\r\n      \"erc20/=lib/erc20/contracts/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"revenue-distribution-token/=lib/revenue-distribution-token/contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asset_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"precision_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"instantWithdrawalFee_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockTime_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialSeed_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares_\",\"type\":\"uint256\"}],\"name\":\"CancellationBurn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromDelegate_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toDelegate_\",\"type\":\"address\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousBalance_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance_\",\"type\":\"uint256\"}],\"name\":\"DelegateVotesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares_\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"percentage_\",\"type\":\"uint256\"}],\"name\":\"InstantWithdrawalFeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"freeAssets_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"issuanceRate_\",\"type\":\"uint256\"}],\"name\":\"IssuanceParamsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockTime_\",\"type\":\"uint256\"}],\"name\":\"LockTimeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner_\",\"type\":\"address\"}],\"name\":\"OwnershipAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pendingOwner_\",\"type\":\"address\"}],\"name\":\"PendingOwnerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets_\",\"type\":\"uint256\"}],\"name\":\"Redistribute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares_\",\"type\":\"uint256\"}],\"name\":\"Refund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vestingPeriodFinish_\",\"type\":\"uint256\"}],\"name\":\"VestingScheduleUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares_\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status_\",\"type\":\"bool\"}],\"name\":\"WithdrawalFeeExemptionStatusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee_\",\"type\":\"uint256\"}],\"name\":\"WithdrawalFeePaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pos_\",\"type\":\"uint256\"}],\"name\":\"WithdrawalRequestCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"unlockedAt\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"lockTime\",\"type\":\"uint32\"},{\"internalType\":\"uint96\",\"name\":\"shares\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"assets\",\"type\":\"uint96\"}],\"indexed\":false,\"internalType\":\"struct ILockedRevenueDistributionToken.WithdrawalRequest\",\"name\":\"request_\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pos_\",\"type\":\"uint256\"}],\"name\":\"WithdrawalRequestCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pos_\",\"type\":\"uint256\"}],\"name\":\"WithdrawalRequestExecuted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"domainSeparator_\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAXIMUM_LOCK_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VESTING_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAWAL_WINDOW\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success_\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"}],\"name\":\"balanceOfAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balanceOfAssets_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pos_\",\"type\":\"uint256\"}],\"name\":\"cancelWithdrawalRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"pos_\",\"type\":\"uint32\"}],\"name\":\"checkpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"fromBlock_\",\"type\":\"uint32\"},{\"internalType\":\"uint96\",\"name\":\"votes_\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares_\",\"type\":\"uint256\"}],\"name\":\"convertToAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber_\",\"type\":\"uint256\"}],\"name\":\"convertToAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets_\",\"type\":\"uint256\"}],\"name\":\"convertToShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares_\",\"type\":\"uint256\"}],\"name\":\"createWithdrawalRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedAmount_\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success_\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee_\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline_\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v_\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r_\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s_\",\"type\":\"bytes32\"}],\"name\":\"delegateBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"delegates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver_\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minShares_\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline_\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v_\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r_\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s_\",\"type\":\"bytes32\"}],\"name\":\"depositWithPermit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pos_\",\"type\":\"uint256\"}],\"name\":\"executeWithdrawalRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freeAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"}],\"name\":\"getCurrentVotes\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"votes_\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber_\",\"type\":\"uint256\"}],\"name\":\"getPastTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalSupply_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber_\",\"type\":\"uint256\"}],\"name\":\"getPastVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"votes_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber_\",\"type\":\"uint256\"}],\"name\":\"getPriorVotes\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"votes_\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"}],\"name\":\"getVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"votes_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedAmount_\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success_\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"instantWithdrawalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"issuanceRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver_\",\"type\":\"address\"}],\"name\":\"maxDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxAssets_\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver_\",\"type\":\"address\"}],\"name\":\"maxMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxShares_\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"maxRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxShares_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"maxWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxAssets_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxAssets_\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver_\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxAssets_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline_\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v_\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r_\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s_\",\"type\":\"bytes32\"}],\"name\":\"mintWithPermit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"}],\"name\":\"numCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"numCheckpoints_\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline_\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v_\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r_\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s_\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"precision\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets_\",\"type\":\"uint256\"}],\"name\":\"previewDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares_\",\"type\":\"uint256\"}],\"name\":\"previewMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"previewRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares_\",\"type\":\"uint256\"}],\"name\":\"previewRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets_\",\"type\":\"uint256\"}],\"name\":\"previewWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"previewWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pos_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"previewWithdrawalRequest\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"unlockedAt\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"lockTime\",\"type\":\"uint32\"},{\"internalType\":\"uint96\",\"name\":\"shares\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"assets\",\"type\":\"uint96\"}],\"internalType\":\"struct ILockedRevenueDistributionToken.WithdrawalRequest\",\"name\":\"request_\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"assets_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minAssets_\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percentage_\",\"type\":\"uint256\"}],\"name\":\"setInstantWithdrawalFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockTime_\",\"type\":\"uint256\"}],\"name\":\"setLockTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pendingOwner_\",\"type\":\"address\"}],\"name\":\"setPendingOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status_\",\"type\":\"bool\"}],\"name\":\"setWithdrawalFeeExemption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalManagedAssets_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success_\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success_\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateVestingSchedule\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"issuanceRate_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"freeAssets_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vestingPeriod_\",\"type\":\"uint256\"}],\"name\":\"updateVestingSchedule\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"issuanceRate_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"freeAssets_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"fromBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint96\",\"name\":\"shares\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"assets\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingPeriodFinish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxShares_\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawalFeeExemptions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"withdrawalRequestCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"withdrawalRequests\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"unlockedAt\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"lockTime\",\"type\":\"uint32\"},{\"internalType\":\"uint96\",\"name\":\"shares\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"assets\",\"type\":\"uint96\"}],\"internalType\":\"struct ILockedRevenueDistributionToken.WithdrawalRequest[]\",\"name\":\"withdrawalRequests_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pos_\",\"type\":\"uint256\"}],\"name\":\"withdrawalRequests\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"unlockedAt\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"lockTime\",\"type\":\"uint32\"},{\"internalType\":\"uint96\",\"name\":\"shares\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"assets\",\"type\":\"uint96\"}],\"internalType\":\"struct ILockedRevenueDistributionToken.WithdrawalRequest\",\"name\":\"withdrawalRequest_\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "GovernanceLockedRevenueDistributionToken", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000024e301c2e41450fc23ba7ba6257785719d3361d000000000000000000000000db725f82818de83e99f1dac22a9b5b51d3d04dd40000000000000000000000000000000000000000ffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000eff1000000000000000000000000000000000000000000000000056bc75e2d631000000000000000000000000000000000000000000000000000000000000000000004784745540000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000047847455400000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}