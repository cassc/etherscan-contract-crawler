{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Lizard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract StakingContract is Ownable {\\n    IERC20 public doraToken = IERC20(0xD20779cb48c8d3a0FE07EC451134EeC5d0711791);\\n    address public financeAddress = 0x0165816Ac86F6432b1203Ab3C1EA3683d3728892;\\n    uint256 public constant DECIMALS_MULTIPLIER = 10**4; // 4 decimal places\\n\\n    struct Packages {\\n        uint256 packageId;\\n        string PackageName;\\n        uint256 duration;\\n        uint256 amountMin;\\n        uint256 amountMax;\\n        uint256 rewardDaily;\\n        uint256 minimumClaim;\\n        uint256 totalStaked;\\n        uint256 userStaked;\\n        bool status;\\n    }\\n\\n    struct Stake {\\n        uint256 stakingId;\\n        uint256 packageId;\\n        uint256 amount;\\n        uint256 startTime;\\n        uint256 endTime;\\n        uint256 lastClaim;\\n        uint256 rewardDay;\\n        uint256 alreadyClaimed;\\n        uint256 minimumClaim;\\n         bool claimed;\\n    }\\n\\n    struct ReferralCommision {\\n        uint256 referral;\\n        uint256 staker;\\n        uint256 level;\\n        uint256 amount;\\n        uint256 commision;\\n        uint256 date;\\n       \\n    }\\n\\n    Packages[] public packageList;\\n    mapping(address => Stake[]) public stakers;\\n    mapping(address => mapping(uint256 => ReferralCommision[])) public referralUsers;\\n    mapping(address => uint256) public currentCommissions;\\n\\n    function addPackage(\\n        uint256 _packageId,\\n        string memory _PackageName,\\n        uint256 _duration,\\n        uint256 _amounMin,\\n        uint256 _amountMax,\\n        uint256 _rewardDaily,\\n        uint256 _minClaim,\\n        bool _status\\n    ) external onlyOwner returns (bool) {\\n        Packages memory newPackage = Packages({\\n            packageId: _packageId,\\n            PackageName: _PackageName,\\n            duration: _duration,\\n            amountMin: _amounMin,\\n            amountMax: _amountMax,\\n            rewardDaily: _rewardDaily,\\n            minimumClaim: _minClaim,\\n            status: _status,\\n            totalStaked: 0,\\n            userStaked: 0\\n        });\\n\\n        packageList.push(newPackage);\\n        return true;\\n    }\\n\\n    function removePackage(uint256 _index) external onlyOwner {\\n        require(_index < packageList.length, \\\"Invalid index\\\");\\n        delete packageList[_index];\\n    }\\n\\n    function getAllPackages() external view returns (Packages[] memory) {\\n        return packageList;\\n    }\\n\\n    function stake(uint256 _stakingId, uint256 _amount, address _referral1, address _referral2) external returns (bool) {\\n        require(_stakingId < packageList.length, \\\"Invalid staking ID\\\");\\n        Packages storage selectedPackage = packageList[_stakingId];\\n        require(selectedPackage.status, \\\"Package is not available\\\");\\n        require(_amount >= selectedPackage.amountMin && _amount <= selectedPackage.amountMax,\\\"Invalid staking amount\\\");        \\n        require(doraToken.transferFrom(msg.sender, address(this), _amount), \\\"TransferFrom failed\\\");\\n        stakers[msg.sender].push(\\n            Stake({\\n                stakingId: _stakingId,\\n                packageId: selectedPackage.packageId,\\n                amount: _amount,\\n                startTime: block.timestamp,\\n                lastClaim: block.timestamp,\\n                endTime: block.timestamp + selectedPackage.duration,\\n                rewardDay: (_amount * selectedPackage.rewardDaily) / 1000000,\\n                alreadyClaimed: 0,\\n                minimumClaim: selectedPackage.minimumClaim,\\n                claimed: false\\n            })\\n        );\\n\\n        selectedPackage.totalStaked += _amount;\\n        selectedPackage.userStaked += 1;\\n\\n        emit Staked(\\n            block.timestamp,\\n            msg.sender,\\n            selectedPackage.packageId,\\n            _amount,\\n            block.timestamp + selectedPackage.duration\\n        );\\n\\n         // Calculate referral commission\\n        uint256 referral1Commission = (_amount * 5) / 100;\\n        uint256 referral2Commission = (_amount * 1) / 100;\\n\\n        // Add referral commission to currentCommissions mapping\\n        if (_referral1 != address(0) && _referral1 != msg.sender) {\\n            currentCommissions[_referral1] += referral1Commission;\\n            referralUsers[_referral1][_stakingId].push(ReferralCommision({\\n                referral: referral1Commission,\\n                staker: _amount,\\n                level: 1,\\n                amount: _amount,\\n                commision: referral1Commission,\\n                date: block.timestamp\\n            }));\\n        }\\n\\n        if (_referral2 != address(0) && _referral2 != msg.sender && _referral2 != _referral1) {\\n            currentCommissions[_referral2] += referral2Commission;\\n            referralUsers[_referral2][_stakingId].push(ReferralCommision({\\n                referral: referral2Commission,\\n                staker: _amount,\\n                level: 2,\\n                amount: _amount,\\n                commision: referral2Commission,\\n                date: block.timestamp\\n            }));\\n        }\\n        return true; // Return true to indicate success\\n    }\\n\\n    function claimReferralCommission() external {\\n\\n        uint256 myCommisions = currentCommissions[msg.sender];\\n        require(myCommisions >= 200000, \\\"Mimimum claim is 20 DR168\\\");\\n\\n        uint256 claimFee = 100000;\\n        uint256 userReceived = myCommisions - claimFee;\\n\\n        require(doraToken.transfer(financeAddress, claimFee), \\\"Referral commission Fee transfer failed\\\");\\n        require(doraToken.transfer(msg.sender, userReceived), \\\"Referral commission Fee transfer failed\\\");\\n        currentCommissions[msg.sender] = 0;\\n\\n        emit claimReferral(\\n            block.timestamp,\\n            msg.sender,\\n            myCommisions\\n        );\\n    }\\n\\n    function setFinanceAddress(address newFinanceAddress) external onlyOwner {\\n        require(newFinanceAddress != address(0), \\\"Invalid address\\\");\\n        financeAddress = newFinanceAddress;\\n    }\\n\\n\\n    function getUserStakings(address user) public view returns (Stake[] memory) {\\n        return stakers[user];\\n    }\\n\\n    function getTotalStakedAmount(address user) public view returns (uint256) {\\n        Stake[] memory userStakings = stakers[user];\\n        uint256 totalStakedAmount = 0;\\n        for (uint256 i = 0; i < userStakings.length; i++) {\\n            totalStakedAmount += userStakings[i].amount;\\n        }\\n        return totalStakedAmount;\\n    }\\n\\n    function getMyStakingsAndTotalAmount() external view returns (Stake[] memory, uint256) {\\n        Stake[] memory myStakings = getUserStakings(msg.sender);\\n        uint256 totalStakedAmount = getTotalStakedAmount(msg.sender);\\n        return (myStakings, totalStakedAmount);\\n    }\\n\\n    function getCurrentReward(address user, uint256 stakingIndex) public view returns (uint256) {\\n        Stake[] memory userStakings = stakers[user];\\n        require(stakingIndex < userStakings.length, \\\"Invalid staking index\\\");\\n        Stake memory staking = userStakings[stakingIndex];\\n        uint256 currentTime = block.timestamp;        \\n        // Calculate the time difference in seconds\\n        uint256 timePassed = currentTime - staking.lastClaim;        \\n        // Calculate the reward for the time passed\\n        uint256 currentReward = (timePassed * staking.rewardDay) / 86400;        \\n        return currentReward;\\n    }\\n\\n    function claimReward(uint256 stakingIndex) external {\\n        Stake[] storage userStakings = stakers[msg.sender];\\n        require(stakingIndex < userStakings.length, \\\"Invalid staking index\\\");\\n        Stake storage staking = userStakings[stakingIndex];\\n\\n        uint256 currentTime = block.timestamp;\\n        uint256 currentReward = getCurrentReward(msg.sender, stakingIndex);\\n        \\n        // Calculate the time difference in seconds\\n        uint256 timePassed = currentTime - staking.lastClaim;\\n        \\n        // If the current time is beyond the end time, update the time passed to the difference between last claim and end time\\n        if (currentTime > staking.endTime) {\\n            timePassed = staking.endTime - staking.lastClaim;\\n        }\\n\\n        uint256 totalReward = currentReward;\\n        \\n        // Check if the reward is greater than or equal to 20 tokens\\n        require(totalReward >= staking.minimumClaim, \\\"Reward is not sufficient for claiming\\\");\\n\\n        // Transfer the remaining reward to user\\n        require(doraToken.transfer(msg.sender, totalReward), \\\"Reward transfer failed\\\");\\n\\n        // Update staking details\\n        staking.lastClaim = currentTime;\\n        staking.alreadyClaimed += totalReward;\\n\\n        emit Staked(\\n            block.timestamp,\\n            msg.sender,\\n            stakingIndex,\\n            staking.packageId,\\n            totalReward\\n        );       \\n    }\\n\\n    function releaseStaking(uint256 stakingIndex) external {\\n        Stake[] storage userStakings = stakers[msg.sender];\\n        require(stakingIndex < userStakings.length, \\\"Invalid staking index\\\");\\n        Stake storage staking = userStakings[stakingIndex];\\n        require(!staking.claimed, \\\"Staking already claimed\\\");\\n        require(block.timestamp > staking.endTime, \\\"Staking has not ended yet\\\");\\n        \\n        uint256 currentTime = block.timestamp;\\n        uint256 currentReward = getCurrentReward(msg.sender, stakingIndex);\\n        uint256 totalAmount = staking.amount + currentReward;\\n\\n        // Update staking details\\n        staking.lastClaim = currentTime;\\n        staking.claimed = true;\\n\\n        // Transfer the total amount to user\\n        require(doraToken.transfer(msg.sender, totalAmount), \\\"Transfer failed\\\");\\n\\n        // Update package details\\n        Packages storage selectedPackage = packageList[staking.packageId];\\n        selectedPackage.totalStaked -= staking.amount; // Reduce total staked\\n        selectedPackage.userStaked--; // Decrease user staked count\\n\\n        emit releaseStakingEvent(\\n            block.timestamp,\\n            msg.sender,\\n            stakingIndex,\\n            staking.packageId\\n        );\\n    }\\n\\n    function transferTokens(address to, uint256 amount) external onlyOwner {\\n        require(to != address(0), \\\"Invalid address\\\");\\n        require(amount > 0, \\\"Amount must be greater than 0\\\");        \\n        require(doraToken.transfer(to, amount), \\\"Transfer failed\\\");\\n    }\\n\\n    function setDoraTokenAddress(address newTokenAddress) external onlyOwner {\\n        require(newTokenAddress != address(0), \\\"Invalid address\\\");\\n        doraToken = IERC20(newTokenAddress);\\n    }\\n\\n    function updatePackageStatus(uint256 packageId, bool newStatus) external onlyOwner {\\n        require(packageId < packageList.length, \\\"Invalid package ID\\\");\\n        Packages storage selectedPackage = packageList[packageId];\\n        selectedPackage.status = newStatus;\\n    }\\n\\n    event claimReferral(\\n        uint256 timeStamp,\\n        address indexed user,\\n        uint256 myCommisions\\n    );\\n\\n    event Staked(\\n        uint256 timeStamp,\\n        address indexed user,\\n        uint256 packageId,\\n        uint256 amount,\\n        uint256 endTime\\n    );\\n\\n    event Claimed(\\n        uint256 timeStamp,\\n        address indexed user,\\n        uint256 StakingId,\\n        uint256 packageId,\\n        uint256 amount\\n    );\\n\\n    event releaseStakingEvent(\\n        uint256 timeStamp,\\n        address indexed user,\\n        uint256 StakingId,\\n        uint256 packageId\\n    );\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeStamp\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"StakingId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"packageId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeStamp\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"packageId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeStamp\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"myCommisions\",\"type\":\"uint256\"}],\"name\":\"claimReferral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeStamp\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"StakingId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"packageId\",\"type\":\"uint256\"}],\"name\":\"releaseStakingEvent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DECIMALS_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_packageId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_PackageName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amounMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountMax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardDaily\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minClaim\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"addPackage\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReferralCommission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakingIndex\",\"type\":\"uint256\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"currentCommissions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"doraToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"financeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllPackages\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"packageId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"PackageName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountMax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDaily\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumClaim\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userStaked\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"internalType\":\"struct StakingContract.Packages[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakingIndex\",\"type\":\"uint256\"}],\"name\":\"getCurrentReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMyStakingsAndTotalAmount\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stakingId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"packageId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastClaim\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"alreadyClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumClaim\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"}],\"internalType\":\"struct StakingContract.Stake[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getTotalStakedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserStakings\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stakingId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"packageId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastClaim\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"alreadyClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumClaim\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"}],\"internalType\":\"struct StakingContract.Stake[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"packageList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"packageId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"PackageName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountMax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDaily\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumClaim\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userStaked\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"referralUsers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"referral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"staker\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"commision\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakingIndex\",\"type\":\"uint256\"}],\"name\":\"releaseStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"removePackage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newTokenAddress\",\"type\":\"address\"}],\"name\":\"setDoraTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFinanceAddress\",\"type\":\"address\"}],\"name\":\"setFinanceAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakingId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_referral1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_referral2\",\"type\":\"address\"}],\"name\":\"stake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakingId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"packageId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastClaim\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"alreadyClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumClaim\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"packageId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"newStatus\",\"type\":\"bool\"}],\"name\":\"updatePackageStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "StakingContract", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}