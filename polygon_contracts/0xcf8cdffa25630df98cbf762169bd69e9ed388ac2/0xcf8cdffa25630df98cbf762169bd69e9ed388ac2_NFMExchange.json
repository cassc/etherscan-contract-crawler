{"SourceCode": "//SPDX-License-Identifier:MIT\r\npragma solidity ^0.8.13;\r\n\r\n//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n// LIBRARIES\r\n//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n// SAFEMATH its a Openzeppelin Lib. Check out for more info @ https://docs.openzeppelin.com/contracts/2.x/api/math\r\n//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n// INTERFACES\r\n//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n// INFMCONTROLLER\r\n//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\ninterface INfmController {\r\n    function _checkWLSC(address Controller, address Client)\r\n        external\r\n        pure\r\n        returns (bool);\r\n\r\n    function _getController() external pure returns (address);\r\n\r\n    function _getNFM() external pure returns (address);\r\n\r\n    function _getTimer() external pure returns (address);\r\n\r\n    function _getDistribute() external pure returns (address);\r\n}\r\n\r\n//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n// INFMORACLE\r\n//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\ninterface INfmOracle {\r\n    function _getLatestPrice(address coin) external view returns (uint256);\r\n\r\n}\r\n\r\n//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n// IERC20\r\n//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\ninterface IERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    function decimals() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n// IUNISWAPV2ROUTER01\r\n//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) external pure returns (uint256 amountB);\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountOut);\r\n\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountIn);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n}\r\n\r\n//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n// IUNISWAPV2ROUTER02\r\n//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\n//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n// IUNISWAPV2PAIR\r\n//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\ninterface IUniswapV2Pair {\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint32 blockTimestampLast\r\n        );\r\n\r\n    function price0CumulativeLast() external view returns (uint256);\r\n\r\n    function price1CumulativeLast() external view returns (uint256);\r\n\r\n    function kLast() external view returns (uint256);\r\n}\r\n\r\n//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n// IUNISWAPV2FACTORY\r\n//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint256\r\n    );\r\n\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n\r\n    function getPair(address tokenA, address tokenB)\r\n        external\r\n        view\r\n        returns (address pair);\r\n}\r\n\r\n//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n/// @title NFMExchange.sol\r\n/// @author Fernando Viktor Seidl E-mail: viktorseidl@gmail.com\r\n/// @notice This contract is a decentralized exchange for the NFM token. This contract enables any trading of ERC20 tokens.\r\n/// @dev This DEX is based on the ERC20 standard\r\n///            INFO:\r\n///            In order for this contract to function smoothly, it is necessary to integrate the following interfaces:\r\n///\r\n///             -   Controller\r\n///             -   IERC20\r\n///             -   UniswapV2Router01\r\n///             -   UniswapV2Router02\r\n///             -   UniswapV2Pair\r\n///             -   UniswapV2Factory\r\n///\r\n///             PARTICULARITIES:\r\n///             -   Dex allows 2 modes:\r\n///                     - Fixed price sale (Presale mode)\r\n///                     - Dynamic sale (Price changes based on the markets)\r\n///             -   Any number of currencies can be added to the exchange. As long as these currencies have the ERC20 standard\r\n///             -   For security reasons (FlashLoan Attack on AMM), this contract uses 3 price oracles:\r\n///                     - Uniswap Price\r\n///                     - Onchain Oracle\r\n///                     - Offchain Oracle\r\n///             -   PreSale mode enables:\r\n///                     - Fixed Sale Price\r\n///                     - Fixed supply\r\n///                     - Minimum purchase amount\r\n///                     - Maximum purchase amount\r\n///                     - Time limit\r\n///                     - Trade free of charge\r\n///                     - Free from price manipulations\r\n///             -   Dynamic mode enables:\r\n///                     - Fixed supply\r\n///                     - Minimum purchase amount\r\n///                     - Maximum purchase amount\r\n///                     - Free from price manipulations\r\n///                     - Trade free of charge\r\n///             -   By exchanging currencies, an integrated onchain oracle in the contract is filled with prices. This oracle can later be used\r\n///                 for other interfaces to avoid price manipulations.\r\n//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\ncontract NFMExchange {\r\n    //include SafeMath\r\n    using SafeMath for uint256;\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    /*\r\n    CONTROLLER\r\n    OWNER = MSG.SENDER ownership will be handed over to dao\r\n     */\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    INfmController private _Controller;\r\n    address private _SController;\r\n    address private _Owner;\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    /*\r\n    _isFixedPrice                   => boolean whether the trade should be executed with a fixed price or a dynamic price\r\n    _PriceVsUSD                   => fixed selling price in USD if fixed price mode is set to true\r\n    _OracleTimer                   => Time interval for entering prices into the onchain oracle\r\n    _PreSaleMode                 => Sales mode, whether presale or dynamic\r\n    _PreSaleStart                   => Countdown for presale mode\r\n    _PreSaleEnd                   => Timestamp when the presale ends\r\n    _PreSaleDexAmount       => PreSale total amount\r\n    _CurrencyCounter           => currency counter\r\n    _CurrencyArray               => Address list of all approved ERC20 tokens for exchange\r\n    _USDC                            => Address of the USDC token\r\n    _uniswapV2Router          => Address of the UniswapV2Router\r\n    _MinUSD                         => Minimum trade amount in USD\r\n    _MaxUSD                        => Maximum trade amount in USD\r\n     */\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    bool private _isFixedPrice = false;\r\n    uint256 private _PriceVsUSD;\r\n    uint256 private _OracleTimer;\r\n    bool private _PreSaleMode = false;\r\n    uint256 private _PreSaleStart;\r\n    uint256 private _PreSaleEnd;\r\n    uint256 private _PreSaleDexAmount;\r\n    uint256 private _CurrencyCounter;\r\n    address[] private _CurrencyArray;\r\n    address private _USDC;\r\n    address private _OracleAdr;\r\n    address private _uniswapV2Router =\r\n        0xa5E0829CaCEd8fFDD4De3c43696c57F7D7A678ff;\r\n    uint256 private _MinUSD = 10 * 10**18;\r\n    uint256 private _MaxUSD = 500000 * 10**18;\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    /*\r\n    MAPPINGS\r\n    _isCurrencyAllowed (Currency address, true if allowed false if not allowed);\r\n    _Oracle (Currency address, price in USD);\r\n     */\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    mapping(address => bool) public _isCurrencyAllowed;\r\n    mapping(address => uint256[]) public _Oracle;\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    /*\r\n    CONTRACT EVENTS\r\n    Trade(Buyer address, Coin address, Currency amount, NFM amount, Timestamp);\r\n     */\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    event Trade(\r\n        address indexed Sender,\r\n        address indexed Coin,\r\n        uint256 Amount,\r\n        uint256 NFM,\r\n        uint256 Time\r\n    );\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    /*\r\n    MODIFIER\r\n    onlyOwner       => Only Controller listed Contracts and Owner can interact with this contract.\r\n     */\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    modifier onlyOwner() {\r\n        require(\r\n            _Controller._checkWLSC(_SController, msg.sender) == true ||\r\n                _Owner == msg.sender,\r\n            \"oO\"\r\n        );\r\n        require(msg.sender != address(0), \"0A\");\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        address Controller,\r\n        address USDC,\r\n        address OracleAdr\r\n    ) {\r\n        _Owner = msg.sender;\r\n        INfmController _Cont = INfmController(address(Controller));\r\n        _SController = Controller;\r\n        _Controller = _Cont;\r\n        _USDC = USDC;\r\n        _CurrencyArray.push(USDC);\r\n        _CurrencyCounter++;\r\n        _isCurrencyAllowed[USDC] = true;\r\n        _OracleTimer = block.timestamp + 3600;\r\n        _OracleAdr = OracleAdr;\r\n    }\r\n\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    /*\r\n    @setFixedPrice(uint256 FixedUSDPrice, bool OnOff) returns (bool);\r\n    This function enables the fixed price mode\r\n    USD Price against NFM needs to be in 18 digits format \r\n     */\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    function setFixedPrice(uint256 FixedUSDPrice, bool OnOff)\r\n        public\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        _isFixedPrice = OnOff;\r\n        _PriceVsUSD = FixedUSDPrice;\r\n        return true;\r\n    }\r\n\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    /*\r\n    @returnAllowedCurrencies(address Coin) returns (bool);\r\n    This function is for checking a currency if it is eligible for trading\r\n    Returns true if Currency is allowed \r\n     */\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    function returnAllowedCurrencies(address Coin) public view returns (bool) {\r\n        return _isCurrencyAllowed[Coin];\r\n    }\r\n\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    /*\r\n    @returnCurrenciesArray() returns (address);\r\n    This function returns a list of all currencies.\r\n     */\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    function returnCurrenciesArray()\r\n        public\r\n        view\r\n        returns (address[] memory Arr)\r\n    {\r\n        return _CurrencyArray;\r\n    }\r\n\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    /*\r\n    @onOffPresale(bool Mode, uint256 DaysStart, uint256 DaysEnd, uint256 PresaleAmount) returns (bool);\r\n    This function allows you to activate and deactivate the presale mode\r\n     */\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    function onOffPresale(\r\n        bool Mode,\r\n        uint256 DaysStart,\r\n        uint256 DaysEnd\r\n    ) public onlyOwner returns (bool) {\r\n        if (Mode == true) {\r\n            _PreSaleMode = Mode;\r\n            _PreSaleStart = block.timestamp + (3600 * 24 * DaysStart);\r\n            _PreSaleEnd = block.timestamp + (3600 * 24 * (DaysEnd + DaysStart));\r\n            _PreSaleDexAmount = IERC20(address(_Controller._getNFM()))\r\n                .balanceOf(address(this));\r\n        } else {\r\n            _PreSaleMode = Mode;\r\n            _PreSaleStart = 0;\r\n            _PreSaleEnd = 0;\r\n            _PreSaleDexAmount = 0;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    /*\r\n    @returnRemainPresaleAmount() returns (uint256, bool);\r\n    This function returns the remaining presale amount.\r\n     */\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    function returnRemainPresaleAmount() public view returns (uint256, bool) {\r\n        if (_PreSaleMode == true) {\r\n            return (\r\n                IERC20(address(_Controller._getNFM())).balanceOf(address(this)),\r\n                true\r\n            );\r\n        } else {\r\n            return (0, false);\r\n        }\r\n    }\r\n\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    /*\r\n    @returnInicialandSold() returns (uint256, uint256, bool);\r\n    This function returns the inicial presale amount and and the amount sold.\r\n     */\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    function returnInicialandSold()\r\n        public\r\n        view\r\n        returns (\r\n            uint256 Inicial,\r\n            uint256 Sold,\r\n            bool\r\n        )\r\n    {\r\n        if (_PreSaleMode == true) {\r\n            if (\r\n                _PreSaleDexAmount <\r\n                IERC20(address(_Controller._getNFM())).balanceOf(address(this))\r\n            ) {\r\n                return (0, 0, true);\r\n            } else {\r\n                return (\r\n                    _PreSaleDexAmount,\r\n                    SafeMath.sub(\r\n                        _PreSaleDexAmount,\r\n                        IERC20(address(_Controller._getNFM())).balanceOf(\r\n                            address(this)\r\n                        )\r\n                    ),\r\n                    true\r\n                );\r\n            }\r\n        } else {\r\n            return (0, 0, false);\r\n        }\r\n    }\r\n\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    /*\r\n    @returnPresaleTimers() returns (uint256, uint256, bool);\r\n    This function returns the timestamp of the presale\r\n     */\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    function returnPresaleTimers()\r\n        public\r\n        view\r\n        returns (\r\n            uint256 Start,\r\n            uint256 End,\r\n            bool Check\r\n        )\r\n    {\r\n        if (_PreSaleMode == false) {\r\n            return (0, 0, false);\r\n        } else {\r\n            return (_PreSaleStart, _PreSaleEnd, true);\r\n        }\r\n    }\r\n\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    /*\r\n    @setMinMaxUSD(uint256 Min, uint256 Max) returns (bool);\r\n    This function sets the minimum and maximum amount for trading\r\n    Amounts must be specified in USD and in 18 digit format\r\n     */\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    function setMinMaxUSD(uint256 Min, uint256 Max)\r\n        public\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        _MinUSD = Min;\r\n        _MaxUSD = Max;\r\n        return true;\r\n    }\r\n\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    /*\r\n    @addOrDisableCoin(address Coin, bool Allow) returns (bool);\r\n    This function is responsible for managing the currencies for exchange. New ones can be added or existing ones can be deactivated\r\n    Add new Currency => Coin Address, true\r\n    Deactivate Currency => Coin Address, false\r\n     */\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    function addOrDisableCoin(address Coin, bool Allow)\r\n        public\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        if (Allow == false) {\r\n            _isCurrencyAllowed[Coin] = false;\r\n        } else {\r\n            _CurrencyArray.push(Coin);\r\n            _CurrencyCounter++;\r\n            _isCurrencyAllowed[Coin] = true;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    /*\r\n    @createPairUv2(address Coin) returns (bool);\r\n    This function is for inicialising or creating the uniswap pairs.\r\n     */\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    function createPairUv2(address Coin) public onlyOwner returns (bool) {\r\n        IUniswapV2Factory(IUniswapV2Router02(_uniswapV2Router).factory())\r\n            .createPair(\r\n                address(_Controller._getNFM()),\r\n                address(\r\n                    Coin /*COIN ADDRESS */\r\n                )\r\n            );\r\n        return true;\r\n    }\r\n\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    /*\r\n    @updateSetFixedPrice() returns (bool);\r\n    This function updates the fixed price if the dynamic price mode is activated.\r\n    This mode should only be used if all 3 oracles exist. The NFM/USDC pair must exist on Uniswap oracle before it can be used.\r\n     */\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    function updateSetFixedPrice() internal onlyOwner returns (bool) {\r\n        uint256 O2Price = checkOracle2Price(address(_Controller._getNFM()));\r\n        uint256 MinPus = SafeMath.sub(\r\n            _PriceVsUSD,\r\n            SafeMath.div(SafeMath.mul(_PriceVsUSD, 3), 100)\r\n        );\r\n        uint256 MaxPus = SafeMath.add(\r\n            _PriceVsUSD,\r\n            SafeMath.div(SafeMath.mul(_PriceVsUSD, 3), 100)\r\n        );\r\n        if (O2Price != 0) {\r\n            if (O2Price > MaxPus) {\r\n                _PriceVsUSD = MaxPus;\r\n            } else if (O2Price < MinPus) {\r\n                _PriceVsUSD = MinPus;\r\n            } else {\r\n                _PriceVsUSD = O2Price;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    /*\r\n    @checkOracle1Price(address Coin) returns (uint256);\r\n    This function checks the current price of the integrated onChain Oracle.\r\n    The return value is a USD price in 18 digit format\r\n     */\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    function checkOracle1Price(address Coin) public view returns (uint256) {\r\n        uint256 Prounds = _Oracle[Coin].length;\r\n        uint256 RoundCount = 0;\r\n        uint256 sum = 0;\r\n        if (Prounds > 10) {\r\n            for (uint256 i = Prounds - 10; i < Prounds; i++) {\r\n                sum += _Oracle[Coin][i];\r\n                RoundCount++;\r\n            }\r\n        } else {\r\n            for (uint256 i = 0; i < Prounds; i++) {\r\n                sum += _Oracle[Coin][i];\r\n                RoundCount++;\r\n            }\r\n        }\r\n        sum = SafeMath.div(sum, RoundCount);\r\n\r\n        return sum;\r\n    }\r\n\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    /*\r\n    @checkOracle2Price(address Coin) returns (uint256);\r\n    This function checks the current price of the UniswapV2 Oracle.\r\n    The return value is a USD price in 18 digit format\r\n     */\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    function checkOracle2Price(address Coin) public view returns (uint256) {\r\n        address UniPair = IUniswapV2Factory(\r\n            IUniswapV2Router02(address(_uniswapV2Router)).factory()\r\n        ).getPair(Coin, _USDC);\r\n        if (UniPair != address(0)) {\r\n            IUniswapV2Pair pair = IUniswapV2Pair(UniPair);\r\n            IERC20 token1 = IERC20(pair.token1());\r\n            (uint256 Res0, uint256 Res1, ) = pair.getReserves();\r\n            // decimals\r\n            uint256 res0 = Res0 * (10**token1.decimals());\r\n            uint256 make = SafeMath.mul(SafeMath.div(res0, Res1), 10**12);\r\n\r\n            return make;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    /*\r\n    @setPriceOracle(address Coin, uint256[] memory Price) returns (bool);\r\n    This function adds new prices to the onChain Oracle.\r\n    The prices are saved as USD prices and in 18 digit format\r\n     */\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    function setPriceOracle(address Coin, uint256[] memory Price)\r\n        public\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        if (Price.length > 1) {\r\n            _Oracle[Coin] = Price;\r\n        } else {\r\n            _Oracle[Coin].push(Price[0]);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    /*\r\n    @calcNFMAmount(address Coin,uint256 amount,uint256 offchainOracle) returns (bool,uint256,uint256,bool,bool);\r\n    This function calculates the NFM amount to exchange against the trade currency\r\n    Amount must be passed in the currency format of the respective trading currency. (Example 10 USDC => 10000000 USDC)\r\n    The offchain oracle price must be passed in 6 digit format (Example 125,25 US$ => 125250000 US$). If the price of the offchain \r\n    oracle is 0, the median price is automatically determined\r\n     */\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    function calcNFMAmount(\r\n        address Coin,\r\n        uint256 amount,\r\n        uint256 offchainOracle\r\n    )\r\n        public\r\n        view\r\n        returns (\r\n            bool check,\r\n            uint256 NFMsAmount,\r\n            uint256 MedianPrice,\r\n            bool MaxPrice,\r\n            bool MinPrice\r\n        )\r\n    {\r\n        uint256 NFMs;\r\n        uint256 CoinDecimals = IERC20(address(Coin)).decimals();\r\n        if (CoinDecimals < 18) {\r\n            amount = amount * 10**(SafeMath.sub(18, CoinDecimals));\r\n        }\r\n        offchainOracle = offchainOracle * 10**12;\r\n        uint256 Oracle2;\r\n        if (Coin == _USDC) {\r\n            Oracle2 = 1 * 10**18;\r\n        } else {\r\n            Oracle2 = checkOracle2Price(Coin);\r\n        }\r\n\r\n        uint256 Oracle = checkOracle1Price(Coin);\r\n        //Calculate pricerange\r\n        uint256 median;\r\n        if (offchainOracle == 0 && Oracle2 == 0) {\r\n            median = Oracle;\r\n        } else if (offchainOracle == 0 && Oracle2 > 0) {\r\n            median = SafeMath.div(SafeMath.add(Oracle2, Oracle), 2);\r\n        } else {\r\n            median = SafeMath.div(\r\n                SafeMath.add(SafeMath.add(offchainOracle, Oracle2), Oracle),\r\n                3\r\n            );\r\n        }\r\n        //Allow max 3% Price Change downside\r\n        uint256 MinRange = SafeMath.sub(\r\n            Oracle,\r\n            SafeMath.div(SafeMath.mul(Oracle, 3), 100)\r\n        );\r\n        //Allow max 3% Price Change upside\r\n        uint256 MaxRange = SafeMath.add(\r\n            Oracle,\r\n            SafeMath.div(SafeMath.mul(Oracle, 3), 100)\r\n        );\r\n\r\n        //Check if MedianPrice is in Range\r\n        if (median > MaxRange) {\r\n            median = MaxRange;\r\n        } else if (median < MinRange) {\r\n            median = MinRange;\r\n        } else {\r\n            median = median;\r\n        }\r\n        uint256 MulAmount = SafeMath.mul(amount, median);\r\n        //Calculate NFM Amount on USD Price;\r\n        uint256 FullUSDAmount = SafeMath.div(MulAmount, 10**18);\r\n        bool MaxVal = true;\r\n        bool MinVal = true;\r\n        if (FullUSDAmount > _MaxUSD) {\r\n            MaxVal = false;\r\n        }\r\n        if (FullUSDAmount < _MinUSD) {\r\n            MinVal = false;\r\n        }\r\n        NFMs = SafeMath.div(SafeMath.mul(FullUSDAmount, 10**18), _PriceVsUSD);\r\n\r\n        return (true, NFMs, median, MaxVal, MinVal);\r\n        ///NOW TRANSFER\r\n    }\r\n\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    /*\r\n    @SwapCoinVsNFM(address Coin, uint256 amount, uint256 offchainOracle) returns (bool);\r\n    This function performs the swap.\r\n    Amount must be passed in the currency format of the respective trading currency. (Example 10 USDC => 10000000 USDC)\r\n    The offchain oracle price must be passed in 6 digit format (Example 125,25 US$ => 125250000 US$). If the price of the offchain \r\n    oracle is 0, the median price is automatically determined\r\n                ***Before this function can be executed. Buyer must approve the amount to be exchanged to this contract.***\r\n     */\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    function SwapCoinVsNFM(\r\n        address Coin,\r\n        uint256 amount,\r\n        uint256 offchainOracle\r\n    ) public returns (bool) {\r\n        require(_isCurrencyAllowed[Coin] == true, \"!C\");\r\n        uint256 latestprice = INfmOracle(_OracleAdr)._getLatestPrice(Coin);\r\n        if (latestprice > 0) {\r\n            offchainOracle = SafeMath.div(offchainOracle + latestprice, 2);\r\n        }\r\n        if (_PreSaleMode == true) {\r\n            require(\r\n                _PreSaleStart < block.timestamp &&\r\n                    _PreSaleEnd > block.timestamp,\r\n                \"OoT\"\r\n            );\r\n        }\r\n        require(\r\n            IERC20(address(Coin)).allowance(msg.sender, address(this)) >=\r\n                amount,\r\n            \"<A\"\r\n        );\r\n\r\n        (\r\n            ,\r\n            uint256 NFMsAmount,\r\n            uint256 MedianPrice,\r\n            bool MaxPrice,\r\n            bool MinPrice\r\n        ) = calcNFMAmount(Coin, amount, offchainOracle);\r\n        require(MaxPrice == true, \">EA\");\r\n        require(MinPrice == true, \"<EA\");\r\n        require(\r\n            NFMsAmount <=\r\n                IERC20(address(_Controller._getNFM())).balanceOf(address(this)),\r\n            \"<NFM\"\r\n        );\r\n        if (block.timestamp > _OracleTimer) {\r\n            _Oracle[Coin].push(MedianPrice);\r\n            _OracleTimer = _OracleTimer + 3600;\r\n\r\n            if (_isFixedPrice == false) {\r\n                updateSetFixedPrice();\r\n            }\r\n        }\r\n        require(\r\n            IERC20(address(Coin)).transferFrom(\r\n                msg.sender,\r\n                address(this),\r\n                amount\r\n            ) == true,\r\n            \"<A\"\r\n        );\r\n        require(\r\n            IERC20(address(_Controller._getNFM())).transfer(\r\n                msg.sender,\r\n                NFMsAmount\r\n            )\r\n        );\r\n        emit Trade(msg.sender, Coin, amount, NFMsAmount, block.timestamp);\r\n        return true;\r\n    }\r\n\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    /*\r\n    @withdraw(address Coin, address To, uint256 amount, bool percent) returns (bool);\r\n    This function is responsible for the withdraw.\r\n    There are 3 ways to initiate payouts. Either as a fixed amount, the full amount or a percentage of the balance.\r\n    Fixed Amount    =>   Address Coin, Address Receiver, Fixed Amount, false\r\n    Total Amount     =>   Address Coin, Address Receiver, 0, false\r\n    A percentage     =>   Address Coin, Address Receiver, percentage, true\r\n     */\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    function withdraw(\r\n        address Coin,\r\n        address To,\r\n        uint256 amount,\r\n        bool percent\r\n    ) public onlyOwner returns (bool) {\r\n        require(To != address(0), \"0A\");\r\n        uint256 CoinAmount = IERC20(address(Coin)).balanceOf(address(this));\r\n        if (percent == true) {\r\n            //makeCalcs on Percentatge\r\n            uint256 AmountToSend = SafeMath.div(\r\n                SafeMath.mul(CoinAmount, amount),\r\n                100\r\n            );\r\n            IERC20(address(Coin)).transfer(To, AmountToSend);\r\n            return true;\r\n        } else {\r\n            if (amount == 0) {\r\n                IERC20(address(Coin)).transfer(To, CoinAmount);\r\n            } else {\r\n                IERC20(address(Coin)).transfer(To, amount);\r\n            }\r\n            return true;\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Controller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"USDC\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"OracleAdr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"Sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"Coin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"NFM\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Time\",\"type\":\"uint256\"}],\"name\":\"Trade\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Coin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offchainOracle\",\"type\":\"uint256\"}],\"name\":\"SwapCoinVsNFM\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_Oracle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isCurrencyAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Coin\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"Allow\",\"type\":\"bool\"}],\"name\":\"addOrDisableCoin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Coin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offchainOracle\",\"type\":\"uint256\"}],\"name\":\"calcNFMAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"check\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"NFMsAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"MedianPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"MaxPrice\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"MinPrice\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Coin\",\"type\":\"address\"}],\"name\":\"checkOracle1Price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Coin\",\"type\":\"address\"}],\"name\":\"checkOracle2Price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Coin\",\"type\":\"address\"}],\"name\":\"createPairUv2\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"Mode\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"DaysStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"DaysEnd\",\"type\":\"uint256\"}],\"name\":\"onOffPresale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Coin\",\"type\":\"address\"}],\"name\":\"returnAllowedCurrencies\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"returnCurrenciesArray\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"Arr\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"returnInicialandSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"Inicial\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Sold\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"returnPresaleTimers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"Start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"End\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"Check\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"returnRemainPresaleAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"FixedUSDPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"OnOff\",\"type\":\"bool\"}],\"name\":\"setFixedPrice\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"Min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Max\",\"type\":\"uint256\"}],\"name\":\"setMinMaxUSD\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Coin\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"Price\",\"type\":\"uint256[]\"}],\"name\":\"setPriceOracle\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Coin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"To\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"percent\",\"type\":\"bool\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "NFMExchange", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000f4dc0c3c0141477742078e4676c909650e29a71b0000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa84174000000000000000000000000080ed3d44991be25206be2867d18212ab12be33e", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://dfeabc832827dccc43949f8c6fae5820a3794b1fde97ffe4fa8457a93b63acc7"}