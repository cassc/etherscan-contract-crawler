{"SourceCode": "//// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface administrator {\r\n    function changeOwner(address newOwner) external;\r\n\r\n    function getOwner() external view returns (address);\r\n\r\n    function licenceSet(address _who, bool enable) external returns (bool);\r\n\r\n    function tickerSet(address _who, address _ticker) external returns (bool);\r\n\r\n    function TokenNamepermissionSet(\r\n        string memory _name,\r\n        bool _state\r\n    ) external returns (bool);\r\n\r\n    function transferpermissionSet(\r\n        address _who,\r\n        bool enable\r\n    ) external returns (bool);\r\n\r\n    function commissionSet(\r\n        uint256 commissionRate\r\n    ) external returns (bool success);\r\n\r\n    function DaoAddressSet(address _who) external returns (bool);\r\n\r\n    function TdbAddressSet(address _who) external returns (bool);\r\n\r\n    function tokendatabaseSet(address _who) external returns (bool);\r\n\r\n    function BaseTokenmanagementSet(address _who) external returns (bool);\r\n\r\n    function usdaddressSet(address _who) external returns (bool);\r\n\r\n    function tickeraddressSet(address _who) external returns (bool);\r\n\r\n    function Qticker() external view returns (address _ticker);\r\n\r\n    function Qusdaddress() external view returns (address _usdaddress);\r\n\r\n    function QBaseTokenmanagement()\r\n        external\r\n        view\r\n        returns (address _BaseTokenmanagement);\r\n\r\n    function Qtokendatabase() external view returns (address _tokendatabase);\r\n\r\n    function qtransferpermission(address _who) external view returns (bool);\r\n\r\n    function licence(address _who) external view returns (bool);\r\n\r\n    function QDaoAddress() external view returns (address _DaoAddress);\r\n\r\n    function QTdbAddress() external view returns (address _TdbAddress);\r\n\r\n    function Qcommission() external view returns (uint ommissionRate_);\r\n\r\n    function QTokenNamepermission(\r\n        string memory _name\r\n    ) external view returns (bool _state);\r\n\r\n    function Qticker(address _who) external view returns (address _ticker);\r\n}\r\n\r\ninterface IERC20 {\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint);\r\n\r\n    function balanceOf(address account) external view returns (uint);\r\n\r\n    function transfer(address recipient, uint amount) external returns (bool);\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint);\r\n\r\n    function approve(address spender, uint amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\ninterface BaseTokenmanagement {\r\n    function SetAdmin(address _adcx, bool _yn) external;\r\n\r\n    function AddData(\r\n        address _token1,\r\n        uint32 _varieties,\r\n        uint256 _n1,\r\n        uint256 _n2\r\n    ) external returns (bool _complete);\r\n\r\n    function SetData(\r\n        address _token1,\r\n        uint32 _varieties,\r\n        uint256 _n1,\r\n        uint256 _n2\r\n    ) external returns (bool _complete);\r\n\r\n    function QAddData0(address _who) external view returns (uint32 varieties_);\r\n\r\n    function QAddData(\r\n        address _who\r\n    )\r\n        external\r\n        view\r\n        returns (uint32 varieties_, uint256 tokenN1_, uint256 tokenN2_);\r\n\r\n    function QAddData1(\r\n        uint32 v\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            address tokenAdd,\r\n            uint32 varieties_,\r\n            uint256 tokenN1_,\r\n            uint256 tokenN2_\r\n        );\r\n}\r\n\r\ninterface tokendatabase {\r\n    function AddData(\r\n        address _token1,\r\n        address _token2,\r\n        address _tokenswap\r\n    ) external returns (bool _complete);\r\n\r\n    function QAddData(\r\n        address _who\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            uint256 tokenNum_,\r\n            address tokenexchange_,\r\n            address _tokenswap,\r\n            string memory _name1,\r\n            string memory _name2\r\n        );\r\n\r\n    function qQAddDatanum(\r\n        uint256 _num\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            address _token1,\r\n            address tokenexchange_,\r\n            address _tokenswap,\r\n            string memory _name1,\r\n            string memory _name2\r\n        );\r\n}\r\n\r\ninterface Ticker {\r\n    function Setadministrator(address _admin) external;\r\n\r\n    function mathpermissionSet(\r\n        address _who,\r\n        bool enable\r\n    ) external returns (bool);\r\n\r\n    function qmathpermission(address _who) external view returns (bool);\r\n\r\n    function QTokenPoint(\r\n        uint256 UNum,\r\n        uint256 UUnit\r\n    ) external view returns (uint _TokenPonit, uint _TokenInterval);\r\n\r\n    function BuyUtotoken(\r\n        uint256 UNum,\r\n        uint256 UUnit,\r\n        uint256 Joinu\r\n    ) external view returns (uint256 TokenNum_);\r\n\r\n    function BuytokentoU1(\r\n        uint256 UNum,\r\n        uint256 UUnit,\r\n        uint256 JoinToken\r\n    ) external view returns (uint256 _UNum);\r\n\r\n    function SellUtotoken(\r\n        uint256 UNum,\r\n        uint256 UUnit,\r\n        uint256 Outu\r\n    ) external view returns (uint256 TokenNum_);\r\n\r\n    function SelltokentoU1(\r\n        uint256 UNum,\r\n        uint256 UUnit,\r\n        uint256 OutToken\r\n    ) external view returns (uint256 _UNum);\r\n\r\n    function Qp(uint i) external view returns (uint);\r\n\r\n    function Qsum(uint i) external view returns (uint);\r\n\r\n    function Qcounter() external view returns (uint);\r\n\r\n    function Qowner() external view returns (address);\r\n\r\n    function QTokenNum() external view returns (uint);\r\n}\r\n\r\ncontract CreateToken {\r\n    address newtoken;\r\n    address newswap;\r\n    administrator creatorT =\r\n        administrator(0xdaB76Fb08c3c31413E5474a65703b59638FF1925);\r\n\r\n    function createToken(\r\n        string memory setname,\r\n        string memory setsymbol,\r\n        uint256 unitsNumber,\r\n        address usd,\r\n        uint256 totalSupply,\r\n        uint256 _Capitalpror\r\n    ) public virtual {\r\n        require(creatorT.QTokenNamepermission(setname) == false);\r\n        require(_Capitalpror <= 1500);\r\n        require(totalSupply >= 10 ** 6 && totalSupply <= 10 ** 30);\r\n        require(unitsNumber >= 10 ** 6 && unitsNumber <= 10 ** 30); ///////////////////\r\n        BaseTokenmanagement bt = BaseTokenmanagement(\r\n            creatorT.QBaseTokenmanagement()\r\n        );\r\n        require(bt.QAddData0(usd) == 1);\r\n        tokendatabase tt = tokendatabase(creatorT.Qtokendatabase());\r\n        ERC20 temp1 = new ERC20();\r\n        wswap temp2 = new wswap();\r\n        temp1.initialize(setname, setsymbol, totalSupply, address(temp2));\r\n        temp2.initialize(\r\n            usd,\r\n            address(temp1),\r\n            msg.sender,\r\n            unitsNumber,\r\n            totalSupply,\r\n            _Capitalpror\r\n        );\r\n        creatorT.TokenNamepermissionSet(setname, true);\r\n        creatorT.licenceSet(address(temp2), true);\r\n        tt.AddData(address(temp1), usd, address(temp2));\r\n        addset(address(temp1), address(temp2));\r\n    }\r\n\r\n    function addset(address ta1, address ta2) internal {\r\n        creatorT.transferpermissionSet(ta2, true);\r\n        creatorT.tickerSet(ta2, creatorT.Qticker());\r\n        newtoken = ta1;\r\n        newswap = ta2;\r\n        Ticker tr = Ticker(creatorT.Qticker());\r\n        tr.mathpermissionSet(ta2, true);\r\n    }\r\n\r\n    function Qaddress() public view virtual returns (address, address) {\r\n        return (address(newtoken), address(newswap));\r\n    }\r\n}\r\n\r\ncontract wswap {\r\n    administrator creatorT =\r\n        administrator(0xdaB76Fb08c3c31413E5474a65703b59638FF1925);\r\n    address private creator;\r\n    address public csave;\r\n    uint256 private unitsNumber;\r\n    uint256 private totalSupply;\r\n    uint256 private Capitalpror;\r\n    uint256 public max = 200000000;\r\n    //Transactions\r\n    uint256 private Counter;\r\n    mapping(uint256 => bool) ts;\r\n    mapping(uint256 => uint256) tq1;\r\n    mapping(uint256 => uint256) tq2;\r\n    mapping(uint256 => uint256) time;\r\n    mapping(uint256 => address) user;\r\n\r\n    uint256 private Tamount;\r\n    uint256 private Uamount;\r\n    IERC20 myToken;\r\n    IERC20 Usdt1;\r\n\r\n    function initialize(\r\n        address usd,\r\n        address _myToken,\r\n        address _creator,\r\n        uint256 _unitsNumber,\r\n        uint256 _totalSupply,\r\n        uint256 _Capitalpror\r\n    ) public virtual {\r\n        require(unitsNumber == 0);\r\n        creator = _creator;\r\n        Usdt1 = IERC20(usd);\r\n        myToken = ERC20(_myToken);\r\n        totalSupply = _totalSupply;\r\n        Counter = 0;\r\n        unitsNumber = _unitsNumber;\r\n        Capitalpror = _Capitalpror;\r\n    }\r\n\r\n    /////////////\r\n    function isContract(address account) public view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            codehash := extcodehash(account)\r\n        }\r\n        return (codehash != 0x0 && codehash != accountHash);\r\n    }\r\n\r\n    /////////////////////////\r\n    function Creatorchange(address newCreator) public returns (bool success) {\r\n        require(msg.sender == creator);\r\n        creator = newCreator;\r\n        return true;\r\n    }\r\n\r\n    //////////////\r\n    ///////////////////\r\n    function Csavechange(address newCsave) public returns (bool success) {\r\n        require(msg.sender == creator);\r\n        csave = newCsave;\r\n        return true;\r\n    }\r\n\r\n    //////////////////\r\n    function maxchange(uint256 _max) public returns (bool success) {\r\n        require(msg.sender == creator);\r\n        max = _max;\r\n        return true;\r\n    }\r\n\r\n    ////////////////////\r\n    function CapitalprorSet(\r\n        uint256 _Capitalpror\r\n    ) public returns (bool success) {\r\n        require(msg.sender == creator);\r\n        require(_Capitalpror < Capitalpror);\r\n        Capitalpror = _Capitalpror;\r\n        return true;\r\n    }\r\n\r\n    //////////////////////\r\n\r\n    function Buy(\r\n        uint256 _tokenvalue,\r\n        uint256 _usdvalue,\r\n        uint256 _data\r\n    ) public returns (bool success) {\r\n\r\n        require(!isContract(msg.sender));\r\n        require(_data <= 100);\r\n        uint256 v1; \r\n        uint256 p1; \r\n        v1 = QBuy(_usdvalue); //price\r\n        require(v1 >= ((_tokenvalue * (1000 - _data)) / 1000));\r\n        p1 = _usdvalue;\r\n        require(p1 >= 100);\r\n        require((myToken.balanceOf(msg.sender) + v1) <= QBuy(max)); \r\n        assert(Usdt1.transferFrom(msg.sender, address(this), p1));\r\n\r\n        assert(\r\n            myToken.transfer(\r\n                msg.sender,\r\n                (v1 * (10000 - Capitalpror - creatorT.Qcommission())) / 10000\r\n            )\r\n        );\r\n        assert(myToken.transfer(csave, (v1 * Capitalpror) / 10000));\r\n\r\n\r\n        assert(\r\n            myToken.transfer(\r\n                creatorT.QTdbAddress(),\r\n                (v1 * creatorT.Qcommission()) / 10000\r\n            )\r\n        );\r\n\r\n        Tamount += v1;\r\n        Uamount += p1;\r\n\r\n        Counter++;\r\n        ts[Counter] = true;\r\n        tq1[Counter] = v1;\r\n        tq2[Counter] = p1;\r\n        time[Counter] = block.timestamp;\r\n        user[Counter] = msg.sender;\r\n\r\n        return true;\r\n    }\r\n\r\n    function Sell(\r\n        uint256 _tokenvalue,\r\n        uint256 _usdvalue,\r\n        uint256 _data\r\n    ) public returns (bool success) {\r\n\r\n        require(!isContract(msg.sender));\r\n        require(_data <= 100);\r\n        uint256 p1;\r\n        p1 = QSIPprice(_tokenvalue);\r\n        require(p1 > ((_usdvalue * (1000 - _data)) / 1000)); ///////////////\r\n\r\n        require(p1 >= 100);\r\n        assert(myToken.transferFrom(msg.sender, address(this), _tokenvalue));\r\n        assert(\r\n            Usdt1.transfer(\r\n                msg.sender,\r\n                (p1 * (10000 - Capitalpror - creatorT.Qcommission())) / 10000\r\n            )\r\n        );\r\n        assert(Usdt1.transfer(csave, (p1 * Capitalpror) / 10000));\r\n        assert(\r\n            Usdt1.transfer(\r\n                creatorT.QTdbAddress(),\r\n                (p1 * creatorT.Qcommission()) / 10000\r\n            )\r\n        );\r\n        Tamount -= _tokenvalue;\r\n        Uamount -= p1;\r\n\r\n        Counter++;\r\n        ts[Counter] = false;\r\n        tq1[Counter] = _tokenvalue;\r\n        tq2[Counter] = p1;\r\n        time[Counter] = block.timestamp;\r\n        user[Counter] = msg.sender;\r\n        return true;\r\n    }\r\n\r\n    function QunitsNumber() public view returns (uint256 _unitsNumber) {\r\n        return unitsNumber;\r\n    }\r\n\r\n    function QtotalSupply() public view returns (uint256 _multiple) {\r\n        return totalSupply;\r\n    }\r\n\r\n    function QCapitalpror() public view returns (uint256 _Capitalpror) {\r\n        return Capitalpror;\r\n    }\r\n\r\n    function QcommissionRate() public view returns (uint256 _commissionRate) {\r\n        return creatorT.Qcommission();\r\n    }\r\n\r\n    function QCounter() public view returns (uint256 _Counter) {\r\n        return Counter;\r\n    }\r\n\r\n    function Qcreator() public view returns (address _creator) {\r\n        return creator;\r\n    }\r\n\r\n    function QTamount() public view returns (uint256 _Tamount) {\r\n        return Tamount;\r\n    }\r\n\r\n    function QUamount() public view returns (uint256 _Uamount) {\r\n        return Uamount;\r\n    }\r\n\r\n    function QPurchaserate() public view returns (uint256 _Purchaserate) {\r\n        return Capitalpror + creatorT.Qcommission();\r\n    }\r\n\r\n    function QSellingrate() public view returns (uint256 _Sellingrate) {\r\n        return Capitalpror + creatorT.Qcommission();\r\n    }\r\n\r\n    function QbalanceOf() public view returns (uint256 _usdt, uint256 _ERC20) {\r\n        return (\r\n            Usdt1.balanceOf(address(this)),\r\n            myToken.balanceOf(address(this))\r\n        );\r\n    }\r\n\r\n    function QAccountbook(\r\n        uint256 _n\r\n    )\r\n        public\r\n        view\r\n        returns (\r\n            bool _symbol,\r\n            address _user,\r\n            uint256 _token1,\r\n            uint256 _token2,\r\n            uint256 _time,\r\n            uint256 _Counter,\r\n            uint256 _now\r\n        )\r\n    {\r\n        return (\r\n            ts[_n],\r\n            user[_n],\r\n            tq1[_n],\r\n            tq2[_n],\r\n            time[_n],\r\n            Counter,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n\r\n    function nowprice() public view returns (uint256 _price) {\r\n        return QBuy(100000);\r\n    }\r\n\r\n\r\n    function QBIPprice(\r\n        uint256 _tokenvalue\r\n    ) public view returns (uint256 _usdt) {\r\n        Ticker matha = Ticker(creatorT.Qticker());\r\n        uint tp; \r\n        (tp, ) = matha.QTokenPoint(Uamount, unitsNumber);\r\n        return\r\n            matha.BuytokentoU1(\r\n                Uamount,\r\n                unitsNumber,\r\n                (_tokenvalue * (50 * 10 ** 30 - tp)) /\r\n                    myToken.balanceOf(address(this))\r\n            );\r\n    }\r\n\r\n    function QSIPprice(\r\n        uint256 _tokenvalue\r\n    ) public view returns (uint256 _usdt) {\r\n        Ticker matha = Ticker(creatorT.Qticker());\r\n        uint tp;  \r\n        (tp, ) = matha.QTokenPoint(Uamount, unitsNumber);\r\n        return\r\n            matha.SelltokentoU1(\r\n                Uamount,\r\n                unitsNumber,\r\n                (_tokenvalue * tp) /\r\n                    (myToken.totalSupply() - myToken.balanceOf(address(this)))\r\n            );\r\n    }\r\n\r\n\r\n    function QBuy(uint256 _usdtvalue) public view returns (uint256 _tokennum) {\r\n        Ticker matha = Ticker(creatorT.Qticker());\r\n        uint tp; \r\n        (tp, ) = matha.QTokenPoint(Uamount, unitsNumber);\r\n        return\r\n            (matha.BuyUtotoken(Uamount, unitsNumber, _usdtvalue) *\r\n                myToken.balanceOf(address(this))) / (50 * 10 ** 30 - tp);\r\n    }\r\n\r\n\r\n    function QSell(uint256 _usdtvalue) public view returns (uint256 _tokennum) {\r\n        Ticker matha = Ticker(creatorT.Qticker());\r\n        uint tp; \r\n        (tp, ) = matha.QTokenPoint(Uamount, unitsNumber);\r\n        return\r\n            (matha.SellUtotoken(Uamount, unitsNumber, _usdtvalue) *\r\n                (myToken.totalSupply() - myToken.balanceOf(address(this)))) /\r\n            tp;\r\n    }\r\n}\r\n\r\ncontract ERC20 is Context, IERC20 {\r\n    uint256 public _MAX = 10 ** 23;\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    uint256 private _totalSupply;\r\n    uint256 private unitsNumber;\r\n    string private _name;\r\n    string private _symbol;\r\n    address private _swapaddress;\r\n\r\n    administrator creatorT =\r\n        administrator(0xdaB76Fb08c3c31413E5474a65703b59638FF1925);\r\n\r\n    function initialize(\r\n        string memory name_,\r\n        string memory symbol_,\r\n        uint256 totalSupply_,\r\n        address Swapadd\r\n    ) public virtual {\r\n        require(_totalSupply == 0); //////////////////////////////////////////////\r\n        require(creatorT.licence(msg.sender) == true);\r\n        //creator=creator_;\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _mint(Swapadd, totalSupply_);\r\n        _swapaddress = Swapadd;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overloaded;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function swapaddress() public view virtual returns (address) {\r\n        return _swapaddress;\r\n    }\r\n\r\n    function balanceOf(\r\n        address account\r\n    ) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(\r\n        address spender,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(\r\n            currentAllowance >= amount,\r\n            \"ERC20: transfer amount exceeds allowance\"\r\n        );\r\n        _approve(sender, _msgSender(), currentAllowance - amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(\r\n        address spender,\r\n        uint256 addedValue\r\n    ) public virtual returns (bool) {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender] + addedValue\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(\r\n        address spender,\r\n        uint256 subtractedValue\r\n    ) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(\r\n            currentAllowance >= subtractedValue,\r\n            \"ERC20: decreased allowance below zero\"\r\n        );\r\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(\r\n            senderBalance >= amount,\r\n            \"ERC20: transfer amount exceeds balance\"\r\n        );\r\n\r\n        uint256 toBurn = amount / 50; \r\n\r\n        if (_totalSupply > _MAX && toBurn > 0) {\r\n\r\n            _balances[sender] -= amount;\r\n            _balances[recipient] += (amount - toBurn); \r\n            _totalSupply -= toBurn; \r\n            emit Transfer(sender, recipient, (amount - toBurn));\r\n            emit Transfer(sender, address(0), toBurn); \r\n        } else {\r\n            _balances[sender] -= amount;\r\n            _balances[recipient] += amount;\r\n            emit Transfer(sender, recipient, amount);\r\n        }\r\n\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function burn(uint256 amount) public virtual {\r\n        _burn(_msgSender(), amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\r\n            _totalSupply -= amount;\r\n        }\r\n\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_MAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"Swapadd\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapaddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ERC20", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://41f23afd5450e8b80a4479548e03dfe3a6cfd8d10145292459ed66b08141264c"}