{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/obiedobo/Desktop/Code/apeswap-zap/contracts/ApeSwapZapFullV3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity 0.8.15;\\n\\n/*\\n  ______                     ______                                 \\n /      \\\\                   /      \\\\                                \\n|  \u2593\u2593\u2593\u2593\u2593\u2593\\\\ ______   ______ |  \u2593\u2593\u2593\u2593\u2593\u2593\\\\__   __   __  ______   ______  \\n| \u2593\u2593__| \u2593\u2593/      \\\\ /      \\\\| \u2593\u2593___\\\\\u2593\u2593  \\\\ |  \\\\ |  \\\\|      \\\\ /      \\\\ \\n| \u2593\u2593    \u2593\u2593  \u2593\u2593\u2593\u2593\u2593\u2593\\\\  \u2593\u2593\u2593\u2593\u2593\u2593\\\\\\\\\u2593\u2593    \\\\| \u2593\u2593 | \u2593\u2593 | \u2593\u2593 \\\\\u2593\u2593\u2593\u2593\u2593\u2593\\\\  \u2593\u2593\u2593\u2593\u2593\u2593\\\\\\n| \u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593 \u2593\u2593  | \u2593\u2593 \u2593\u2593    \u2593\u2593_\\\\\u2593\u2593\u2593\u2593\u2593\u2593\\\\ \u2593\u2593 | \u2593\u2593 | \u2593\u2593/      \u2593\u2593 \u2593\u2593  | \u2593\u2593\\n| \u2593\u2593  | \u2593\u2593 \u2593\u2593__/ \u2593\u2593 \u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593  \\\\__| \u2593\u2593 \u2593\u2593_/ \u2593\u2593_/ \u2593\u2593  \u2593\u2593\u2593\u2593\u2593\u2593\u2593 \u2593\u2593__/ \u2593\u2593\\n| \u2593\u2593  | \u2593\u2593 \u2593\u2593    \u2593\u2593\\\\\u2593\u2593     \\\\\\\\\u2593\u2593    \u2593\u2593\\\\\u2593\u2593   \u2593\u2593   \u2593\u2593\\\\\u2593\u2593    \u2593\u2593 \u2593\u2593    \u2593\u2593\\n \\\\\u2593\u2593   \\\\\u2593\u2593 \u2593\u2593\u2593\u2593\u2593\u2593\u2593  \\\\\u2593\u2593\u2593\u2593\u2593\u2593\u2593 \\\\\u2593\u2593\u2593\u2593\u2593\u2593  \\\\\u2593\u2593\u2593\u2593\u2593\\\\\u2593\u2593\u2593\u2593  \\\\\u2593\u2593\u2593\u2593\u2593\u2593\u2593 \u2593\u2593\u2593\u2593\u2593\u2593\u2593 \\n         | \u2593\u2593                                             | \u2593\u2593      \\n         | \u2593\u2593                                             | \u2593\u2593      \\n          \\\\\u2593\u2593                                              \\\\\u2593\u2593         \\n\\n * App:             https://apeswap.finance\\n * Medium:          https://ape-swap.medium.com\\n * Twitter:         https://twitter.com/ape_swap\\n * Discord:         https://discord.com/invite/apeswap\\n * Telegram:        https://t.me/ape_swap\\n * Announcements:   https://t.me/ape_swap_news\\n * GitHub:          https://github.com/ApeSwapFinance\\n */\\n\\nimport \\\"./ApeSwapZap.sol\\\";\\nimport \\\"./extensions/bills/ApeSwapZapTBills.sol\\\";\\nimport \\\"./extensions/ApeSwapZapLPMigrator.sol\\\";\\nimport \\\"./extensions/pools/ApeSwapZapPools.sol\\\";\\nimport \\\"./extensions/pools/lib/ITreasury.sol\\\";\\nimport \\\"./extensions/farms/ApeSwapZapMiniApeV2.sol\\\";\\nimport \\\"./extensions/farms/lib/IMiniApeV2.sol\\\";\\nimport \\\"./lib/IApeRouter02.sol\\\";\\n\\ncontract ApeSwapZapFullV3 is\\n    ApeSwapZap,\\n    ApeSwapZapTBills,\\n    ApeSwapZapLPMigrator,\\n    ApeSwapZapPools,\\n    ApeSwapZapMiniApeV2\\n{\\n    constructor(IApeRouter02 _router)\\n        ApeSwapZap(_router)\\n        ApeSwapZapLPMigrator(_router)\\n        ApeSwapZapPools()\\n        ApeSwapZapMiniApeV2()\\n    {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/obiedobo/Desktop/Code/apeswap-zap/contracts/lib/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n pragma solidity 0.8.15;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function withdraw(uint256) external;\\n}\\n\"\r\n    },\r\n    \"/Users/obiedobo/Desktop/Code/apeswap-zap/contracts/lib/IApeRouter02.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n pragma solidity 0.8.15;\\n\\nimport \\\"./IApeRouter01.sol\\\";\\n\\ninterface IApeRouter02 is IApeRouter01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountETH);\\n\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"/Users/obiedobo/Desktop/Code/apeswap-zap/contracts/lib/IApeRouter01.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n pragma solidity 0.8.15;\\n\\ninterface IApeRouter01 {\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactETH(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapETHForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure returns (uint256 amountB);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountOut);\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountIn);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"/Users/obiedobo/Desktop/Code/apeswap-zap/contracts/lib/IApePair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity >=0.6.6;\\n\\ninterface IApePair {\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external pure returns (string memory);\\n\\n    function symbol() external pure returns (string memory);\\n\\n    function decimals() external pure returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(\\n        address indexed sender,\\n        uint256 amount0,\\n        uint256 amount1,\\n        address indexed to\\n    );\\n    event Swap(\\n        address indexed sender,\\n        uint256 amount0In,\\n        uint256 amount1In,\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint32 blockTimestampLast\\n        );\\n\\n    function price0CumulativeLast() external view returns (uint256);\\n\\n    function price1CumulativeLast() external view returns (uint256);\\n\\n    function kLast() external view returns (uint256);\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burn(address to)\\n        external\\n        returns (uint256 amount0, uint256 amount1);\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"\r\n    },\r\n    \"/Users/obiedobo/Desktop/Code/apeswap-zap/contracts/lib/IApeFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity >=0.6.6;\\n\\ninterface IApeFactory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function INIT_CODE_PAIR_HASH() external view returns (bytes32);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\"\r\n    },\r\n    \"/Users/obiedobo/Desktop/Code/apeswap-zap/contracts/extensions/pools/lib/ITreasury.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ITreasury {\\n    function adminAddress() external view returns (address);\\n\\n    function banana() external view returns (IERC20);\\n\\n    function bananaReserves() external view returns (uint256);\\n\\n    function buy(uint256 _amount) external;\\n\\n    function buyFee() external view returns (uint256);\\n\\n    function emergencyWithdraw(uint256 _amount) external;\\n\\n    function goldenBanana() external view returns (IERC20);\\n\\n    function goldenBananaReserves() external view returns (uint256);\\n\\n    function maxBuyFee() external view returns (uint256);\\n\\n    function owner() external view returns (address);\\n\\n    function renounceOwnership() external;\\n\\n    function sell(uint256 _amount) external;\\n\\n    function setAdmin(address _adminAddress) external;\\n\\n    function setBuyFee(uint256 _fee) external;\\n\\n    function transferOwnership(address newOwner) external;\\n}\\n\"\r\n    },\r\n    \"/Users/obiedobo/Desktop/Code/apeswap-zap/contracts/extensions/pools/lib/IBEP20RewardApeV5.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\"; \\n\\ninterface IBEP20RewardApeV5 {\\n    function REWARD_TOKEN() external view returns (IERC20);\\n\\n    function STAKE_TOKEN() external view returns (IERC20);\\n\\n    function bonusEndBlock() external view returns (uint256);\\n\\n    function owner() external view returns (address);\\n\\n    function poolInfo()\\n        external\\n        view\\n        returns (\\n            address lpToken,\\n            uint256 allocPoint,\\n            uint256 lastRewardBlock,\\n            uint256 accRewardTokenPerShare\\n        );\\n\\n    function renounceOwnership() external;\\n\\n    function rewardPerBlock() external view returns (uint256);\\n\\n    function startBlock() external view returns (uint256);\\n\\n    function totalRewardsAllocated() external view returns (uint256);\\n\\n    function totalRewardsPaid() external view returns (uint256);\\n\\n    function totalStaked() external view returns (uint256);\\n\\n    function transferOwnership(address newOwner) external;\\n\\n    function userInfo(address)\\n        external\\n        view\\n        returns (uint256 amount, uint256 rewardDebt);\\n\\n    function initialize(\\n        address _stakeToken,\\n        address _rewardToken,\\n        uint256 _rewardPerBlock,\\n        uint256 _startBlock,\\n        uint256 _bonusEndBlock\\n    ) external;\\n\\n    function getMultiplier(uint256 _from, uint256 _to)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function setBonusEndBlock(uint256 _bonusEndBlock) external;\\n\\n    function pendingReward(address _user) external view returns (uint256);\\n\\n    function updatePool() external;\\n\\n    function deposit(uint256 _amount) external;\\n\\n    function depositTo(uint256 _amount, address _user) external;\\n\\n    function withdraw(uint256 _amount) external;\\n\\n    function rewardBalance() external view returns (uint256);\\n\\n    function getUnharvestedRewards() external view returns (uint256);\\n\\n    function depositRewards(uint256 _amount) external;\\n\\n    function totalStakeTokenBalance() external view returns (uint256);\\n\\n    function getStakeTokenFeeBalance() external view returns (uint256);\\n\\n    function setRewardPerBlock(uint256 _rewardPerBlock) external;\\n\\n    function skimStakeTokenFees(address _to) external;\\n\\n    function emergencyWithdraw() external;\\n\\n    function emergencyRewardWithdraw(uint256 _amount) external;\\n\\n    function sweepToken(address token) external;\\n}\\n\"\r\n    },\r\n    \"/Users/obiedobo/Desktop/Code/apeswap-zap/contracts/extensions/pools/ApeSwapZapPools.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../ApeSwapZap.sol\\\";\\nimport \\\"./lib/IBEP20RewardApeV5.sol\\\";\\nimport \\\"./lib/ITreasury.sol\\\";\\n\\nabstract contract ApeSwapZapPools is ApeSwapZap {\\n    using SafeERC20 for IERC20;\\n\\n    event ZapLPPool(\\n        IERC20 inputToken,\\n        uint256 inputAmount,\\n        IBEP20RewardApeV5 pool\\n    );\\n    event ZapLPPoolNative(uint256 inputAmount, IBEP20RewardApeV5 pool);\\n    event ZapSingleAssetPool(\\n        IERC20 inputToken,\\n        uint256 inputAmount,\\n        IBEP20RewardApeV5 pool\\n    );\\n    event ZapSingleAssetPoolNative(\\n        uint256 inputAmount,\\n        IBEP20RewardApeV5 pool\\n    );\\n\\n    constructor() {\\n    }\\n\\n    /// @notice Zap token into banana/gnana pool\\n    /// @param inputToken Input token to zap\\n    /// @param inputAmount Amount of input tokens to zap\\n    /// @param path Path from input token to stake token\\n    /// @param minAmountsSwap The minimum amount of output tokens that must be received for swap\\n    /// @param deadline Unix timestamp after which the transaction will revert\\n    /// @param pool Pool address\\n    function zapSingleAssetPool(\\n        IERC20 inputToken,\\n        uint256 inputAmount,\\n        address[] calldata path,\\n        uint256 minAmountsSwap,\\n        uint256 deadline,\\n        IBEP20RewardApeV5 pool\\n    ) external nonReentrant {\\n        uint256 balanceBefore = _getBalance(inputToken);\\n        inputToken.safeTransferFrom(msg.sender, address(this), inputAmount);\\n        inputAmount = _getBalance(inputToken) - balanceBefore;\\n\\n        __zapInternalSingleAssetPool(\\n            inputToken,\\n            inputAmount,\\n            path,\\n            minAmountsSwap,\\n            deadline,\\n            pool\\n        );\\n        emit ZapSingleAssetPool(inputToken, inputAmount, pool);\\n    }\\n\\n    /// @notice Zap native into banana/gnana pool\\n    /// @param path Path from input token to stake token\\n    /// @param minAmountsSwap The minimum amount of output tokens that must be received for swap\\n    /// @param deadline Unix timestamp after which the transaction will revert\\n    /// @param pool Pool address\\n    function zapSingleAssetPoolNative(\\n        address[] calldata path,\\n        uint256 minAmountsSwap,\\n        uint256 deadline,\\n        IBEP20RewardApeV5 pool\\n    ) external payable nonReentrant {\\n        uint256 inputAmount = msg.value;\\n        IERC20 inputToken = IERC20(WNATIVE);\\n        IWETH(WNATIVE).deposit{ value: inputAmount }();\\n\\n        __zapInternalSingleAssetPool(\\n            inputToken,\\n            inputAmount,\\n            path,\\n            minAmountsSwap,\\n            deadline,\\n            pool\\n        );\\n        emit ZapSingleAssetPoolNative(inputAmount, pool);\\n    }\\n\\n    /// @notice Zap token into banana/gnana pool\\n    /// @param inputToken Input token to zap\\n    /// @param inputAmount Amount of input tokens to zap\\n    /// @param lpTokens Tokens of LP to zap to\\n    /// @param path0 Path from input token to LP token0\\n    /// @param path1 Path from input token to LP token1\\n    /// @param minAmountsSwap The minimum amount of output tokens that must be received for swap\\n    /// @param minAmountsLP AmountAMin and amountBMin for adding liquidity\\n    /// @param deadline Unix timestamp after which the transaction will revert\\n    /// @param pool Pool address\\n    function zapLPPool(\\n        IERC20 inputToken,\\n        uint256 inputAmount,\\n        address[] memory lpTokens, //[tokenA, tokenB]\\n        address[] calldata path0,\\n        address[] calldata path1,\\n        uint256[] memory minAmountsSwap, //[A, B]\\n        uint256[] memory minAmountsLP, //[amountAMin, amountBMin]\\n        uint256 deadline,\\n        IBEP20RewardApeV5 pool\\n    ) external nonReentrant {\\n        IApePair pair = IApePair(address(pool.STAKE_TOKEN()));\\n        require(\\n            (lpTokens[0] == pair.token0() &&\\n                lpTokens[1] == pair.token1()) ||\\n                (lpTokens[1] == pair.token0() &&\\n                    lpTokens[0] == pair.token1()),\\n            \\\"ApeSwapZap: Wrong LP pair for Pool\\\"\\n        );\\n\\n        _zapInternal(\\n            inputToken,\\n            inputAmount,\\n            lpTokens,\\n            path0,\\n            path1,\\n            minAmountsSwap,\\n            minAmountsLP,\\n            address(this),\\n            deadline\\n        );\\n\\n        uint256 balance = pair.balanceOf(address(this));\\n        pair.approve(address(pool), balance);\\n        pool.depositTo(balance, msg.sender);\\n        pair.approve(address(pool), 0);\\n        emit ZapLPPool(inputToken, inputAmount, pool);\\n    }\\n\\n    /// @notice Zap native into banana/gnana pool\\n    /// @param lpTokens Tokens of LP to zap to\\n    /// @param path0 Path from input token to LP token0\\n    /// @param path1 Path from input token to LP token1\\n    /// @param minAmountsSwap The minimum amount of output tokens that must be received for swap\\n    /// @param minAmountsLP AmountAMin and amountBMin for adding liquidity\\n    /// @param deadline Unix timestamp after which the transaction will revert\\n    /// @param pool Pool address\\n    function zapLPPoolNative(\\n        address[] memory lpTokens, //[tokenA, tokenB]\\n        address[] calldata path0,\\n        address[] calldata path1,\\n        uint256[] memory minAmountsSwap, //[A, B]\\n        uint256[] memory minAmountsLP, //[amountAMin, amountBMin]\\n        uint256 deadline,\\n        IBEP20RewardApeV5 pool\\n    ) external payable nonReentrant {\\n        IApePair pair = IApePair(address(pool.STAKE_TOKEN()));\\n        require(\\n            (lpTokens[0] == pair.token0() &&\\n                lpTokens[1] == pair.token1()) ||\\n                (lpTokens[1] == pair.token0() &&\\n                    lpTokens[0] == pair.token1()),\\n            \\\"ApeSwapZap: Wrong LP pair for Pool\\\"\\n        );\\n\\n        _zapNativeInternal(\\n            lpTokens,\\n            path0,\\n            path1,\\n            minAmountsSwap,\\n            minAmountsLP,\\n            address(this),\\n            deadline\\n        );\\n\\n        uint256 balance = pair.balanceOf(address(this));\\n        pair.approve(address(pool), balance);\\n        pool.depositTo(balance, msg.sender);\\n        pair.approve(address(pool), 0);\\n        emit ZapLPPoolNative(msg.value, pool);\\n    }\\n\\n        /// @notice Zap token into banana/gnana pool\\n    /// @param inputToken Input token to zap\\n    /// @param inputAmount Amount of input tokens to zap\\n    /// @param path Path from input token to stake token\\n    /// @param minAmountsSwap The minimum amount of output tokens that must be received for swap\\n    /// @param deadline Unix timestamp after which the transaction will revert\\n    /// @param pool Pool address\\n    function __zapInternalSingleAssetPool(\\n        IERC20 inputToken,\\n        uint256 inputAmount,\\n        address[] calldata path,\\n        uint256 minAmountsSwap,\\n        uint256 deadline,\\n        IBEP20RewardApeV5 pool\\n    ) internal {\\n        IERC20 stakeToken = pool.STAKE_TOKEN();\\n\\n        uint256 amount = inputAmount;\\n\\n        if (inputToken != stakeToken) {\\n            require(\\n                path[0] == address(inputToken),\\n                \\\"ApeSwapZap: wrong path path[0]\\\"\\n            );\\n            require(\\n                path[path.length - 1] == address(stakeToken),\\n                \\\"ApeSwapZap: wrong path path[-1]\\\"\\n            );\\n\\n            inputToken.approve(address(router), inputAmount);\\n            uint256[] memory amounts = router.swapExactTokensForTokens(\\n                inputAmount,\\n                minAmountsSwap,\\n                path,\\n                address(this),\\n                deadline\\n            );\\n            amount = amounts[amounts.length - 1];\\n        }\\n\\n        stakeToken.approve(address(pool), amount);\\n        pool.depositTo(amount, msg.sender);\\n        stakeToken.approve(address(pool), 0);\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/obiedobo/Desktop/Code/apeswap-zap/contracts/extensions/farms/lib/IMiniApeV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IMiniApeV2 {\\n    function lpToken(uint256 pid) external returns (address);\\n\\n    function deposit(uint256 pid, uint256 amount, address to) external;\\n}\\n\"\r\n    },\r\n    \"/Users/obiedobo/Desktop/Code/apeswap-zap/contracts/extensions/farms/ApeSwapZapMiniApeV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../ApeSwapZap.sol\\\";\\nimport \\\"./lib/IMiniApeV2.sol\\\";\\n\\nabstract contract ApeSwapZapMiniApeV2 is ApeSwapZap {\\n    using SafeERC20 for IERC20;\\n\\n    event ZapMiniApeV2(IERC20 inputToken, uint256 inputAmount, uint256 pid);\\n    event ZapMiniApeV2Native(uint256 inputAmount, uint256 pid);\\n\\n    constructor() {}\\n\\n    /// @notice Zap token into miniApev2 style dual farm\\n    /// @param inputToken Input token to zap\\n    /// @param inputAmount Amount of input tokens to zap\\n    /// @param lpTokens Tokens of LP to zap to\\n    /// @param path0 Path from input token to LP token0\\n    /// @param path1 Path from input token to LP token1\\n    /// @param minAmountsSwap The minimum amount of output tokens that must be received for swap\\n    /// @param minAmountsLP AmountAMin and amountBMin for adding liquidity\\n    /// @param deadline Unix timestamp after which the transaction will revert\\n    /// @param miniApe The main dualfarm contract\\n    /// @param pid Dual farm pid\\n    function zapMiniApeV2(\\n        IERC20 inputToken,\\n        uint256 inputAmount,\\n        address[] memory lpTokens, //[tokenA, tokenB]\\n        address[] calldata path0,\\n        address[] calldata path1,\\n        uint256[] memory minAmountsSwap, //[A, B]\\n        uint256[] memory minAmountsLP, //[amountAMin, amountBMin]\\n        uint256 deadline,\\n        IMiniApeV2 miniApe,\\n        uint256 pid\\n    ) external nonReentrant {\\n        IApePair pair = IApePair(miniApe.lpToken(pid));\\n        require(\\n            (lpTokens[0] == pair.token0() && lpTokens[1] == pair.token1()) ||\\n                (lpTokens[1] == pair.token0() && lpTokens[0] == pair.token1()),\\n            \\\"ApeSwapZap: Wrong LP pair for MiniApe\\\"\\n        );\\n\\n        _zapInternal(\\n            inputToken,\\n            inputAmount,\\n            lpTokens,\\n            path0,\\n            path1,\\n            minAmountsSwap,\\n            minAmountsLP,\\n            address(this),\\n            deadline\\n        );\\n\\n        uint256 balance = pair.balanceOf(address(this));\\n        pair.approve(address(miniApe), balance);\\n        miniApe.deposit(pid, balance, msg.sender);\\n        pair.approve(address(miniApe), 0);\\n        emit ZapMiniApeV2(inputToken, inputAmount, pid);\\n    }\\n\\n    /// @notice Zap native into miniApev2 style dual farm\\n    /// @param lpTokens Tokens of LP to zap to\\n    /// @param path0 Path from input token to LP token0\\n    /// @param path1 Path from input token to LP token1\\n    /// @param minAmountsSwap The minimum amount of output tokens that must be received for swap\\n    /// @param minAmountsLP AmountAMin and amountBMin for adding liquidity\\n    /// @param deadline Unix timestamp after which the transaction will revert\\n    /// @param miniApe The main dualfarm contract\\n    /// @param pid Dual Farm pid\\n    function zapMiniApeV2Native(\\n        address[] memory lpTokens, //[tokenA, tokenB]\\n        address[] calldata path0,\\n        address[] calldata path1,\\n        uint256[] memory minAmountsSwap, //[A, B]\\n        uint256[] memory minAmountsLP, //[amountAMin, amountBMin]\\n        uint256 deadline,\\n        IMiniApeV2 miniApe,\\n        uint256 pid\\n    ) external payable nonReentrant {\\n        IApePair pair = IApePair(miniApe.lpToken(pid));\\n        require(\\n            (lpTokens[0] == pair.token0() && lpTokens[1] == pair.token1()) ||\\n                (lpTokens[1] == pair.token0() && lpTokens[0] == pair.token1()),\\n            \\\"ApeSwapZap: Wrong LP pair for Dual Farm\\\"\\n        );\\n\\n        _zapNativeInternal(\\n            lpTokens,\\n            path0,\\n            path1,\\n            minAmountsSwap,\\n            minAmountsLP,\\n            address(this),\\n            deadline\\n        );\\n\\n        uint256 balance = pair.balanceOf(address(this));\\n        pair.approve(address(miniApe), balance);\\n        miniApe.deposit(pid, balance, msg.sender);\\n        pair.approve(address(miniApe), 0);\\n        emit ZapMiniApeV2Native(msg.value, pid);\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/obiedobo/Desktop/Code/apeswap-zap/contracts/extensions/bills/lib/ICustomBill.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.0;\\n\\ninterface ICustomBill {\\n    function principalToken() external returns (address);\\n\\n    function deposit(\\n        uint256 _amount,\\n        uint256 _maxPrice,\\n        address _depositor\\n    ) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"/Users/obiedobo/Desktop/Code/apeswap-zap/contracts/extensions/bills/ApeSwapZapTBills.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../ApeSwapZap.sol\\\";\\nimport \\\"./lib/ICustomBill.sol\\\";\\n\\nabstract contract ApeSwapZapTBills is ApeSwapZap {\\n    event ZapTBill(IERC20 inputToken, uint256 inputAmount, ICustomBill bill);\\n    event ZapTBillNative(uint256 inputAmount, ICustomBill bill);\\n\\n    /// @notice Zap single token to LP\\n    /// @param inputToken Input token to zap\\n    /// @param inputAmount Amount of input tokens to zap\\n    /// @param lpTokens Tokens of LP to zap to\\n    /// @param path0 Path from input token to LP token0\\n    /// @param path1 Path from input token to LP token1\\n    /// @param minAmountsSwap The minimum amount of output tokens that must be received for swap\\n    /// @param minAmountsLP AmountAMin and amountBMin for adding liquidity\\n    /// @param deadline Unix timestamp after which the transaction will revert\\n    /// @param bill Treasury bill address\\n    /// @param maxPrice Max price of treasury bill\\n    function zapTBill(\\n        IERC20 inputToken,\\n        uint256 inputAmount,\\n        address[] memory lpTokens, //[tokenA, tokenB]\\n        address[] calldata path0,\\n        address[] calldata path1,\\n        uint256[] memory minAmountsSwap, //[A, B]\\n        uint256[] memory minAmountsLP, //[amountAMin, amountBMin]\\n        uint256 deadline,\\n        ICustomBill bill,\\n        uint256 maxPrice\\n    ) external nonReentrant {\\n        IApePair pair = IApePair(bill.principalToken());\\n        require(\\n            (lpTokens[0] == pair.token0() &&\\n                lpTokens[1] == pair.token1()) ||\\n                (lpTokens[1] == pair.token0() &&\\n                    lpTokens[0] == pair.token1()),\\n            \\\"ApeSwapZap: Wrong LP pair for TBill\\\"\\n        );\\n\\n        _zapInternal(\\n            inputToken,\\n            inputAmount,\\n            lpTokens,\\n            path0,\\n            path1,\\n            minAmountsSwap,\\n            minAmountsLP,\\n            address(this),\\n            deadline\\n        );\\n\\n        uint256 balance = pair.balanceOf(address(this));\\n        pair.approve(address(bill), balance);\\n        bill.deposit(balance, maxPrice, msg.sender);\\n        pair.approve(address(bill), 0);\\n        emit ZapTBill(inputToken, inputAmount, bill);\\n    }\\n\\n    /// @notice Zap native token to Treasury Bill\\n    /// @param lpTokens Tokens of LP to zap to\\n    /// @param path0 Path from input token to LP token0\\n    /// @param path1 Path from input token to LP token1\\n    /// @param minAmountsSwap The minimum amount of output tokens that must be received for swap\\n    /// @param minAmountsLP AmountAMin and amountBMin for adding liquidity\\n    /// @param deadline Unix timestamp after which the transaction will revert\\n    /// @param bill Treasury bill address\\n    /// @param maxPrice Max price of treasury bill\\n    function zapTBillNative(\\n        address[] memory lpTokens, //[tokenA, tokenB]\\n        address[] calldata path0,\\n        address[] calldata path1,\\n        uint256[] memory minAmountsSwap, //[A, B]\\n        uint256[] memory minAmountsLP, //[amountAMin, amountBMin]\\n        uint256 deadline,\\n        ICustomBill bill,\\n        uint256 maxPrice\\n    ) external payable nonReentrant {\\n        IApePair pair = IApePair(bill.principalToken());\\n        require(\\n            (lpTokens[0] == pair.token0() &&\\n                lpTokens[1] == pair.token1()) ||\\n                (lpTokens[1] == pair.token0() &&\\n                    lpTokens[0] == pair.token1()),\\n            \\\"ApeSwapZap: Wrong LP pair for TBill\\\"\\n        );\\n\\n        _zapNativeInternal(\\n            lpTokens,\\n            path0,\\n            path1,\\n            minAmountsSwap,\\n            minAmountsLP,\\n            address(this),\\n            deadline\\n        );\\n\\n        uint256 balance = pair.balanceOf(address(this));\\n        pair.approve(address(bill), balance);\\n        bill.deposit(balance, maxPrice, msg.sender);\\n        pair.approve(address(bill), 0);\\n        emit ZapTBillNative(msg.value, bill);\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/obiedobo/Desktop/Code/apeswap-zap/contracts/extensions/ApeSwapZapLPMigrator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"../lib/IApeRouter02.sol\\\";\\nimport \\\"../lib/IApePair.sol\\\";\\n\\nabstract contract ApeSwapZapLPMigrator is ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    IApeRouter02 public immutable apeRouter;\\n\\n    event LPMigrated(\\n        IApePair lp,\\n        IApeRouter02 fromRouter,\\n        IApeRouter02 toRouter,\\n        uint256 amount\\n    );\\n\\n    constructor(IApeRouter02 router) {\\n        apeRouter = router;\\n    }\\n\\n    /// @notice Zap non APE-LPs to APE-LPs\\n    /// @param router The non APE-LP router\\n    /// @param lp LP address to zap\\n    /// @param amount Amount of LPs to zap\\n    /// @param amountAMinRemove The minimum amount of token0 to receive after removing liquidity\\n    /// @param amountBMinRemove The minimum amount of token1 to receive after removing liquidity\\n    /// @param amountAMinAdd The minimum amount of token0 to add to APE-LP on add liquidity\\n    /// @param amountBMinAdd The minimum amount of token1 to add to APE-LP on add liquidity\\n    /// @param deadline Unix timestamp after which the transaction will revert\\n    function zapLPMigrator(\\n        IApeRouter02 router,\\n        IApePair lp,\\n        uint256 amount,\\n        uint256 amountAMinRemove,\\n        uint256 amountBMinRemove,\\n        uint256 amountAMinAdd,\\n        uint256 amountBMinAdd,\\n        uint256 deadline\\n    ) external nonReentrant {\\n        address token0 = lp.token0();\\n        address token1 = lp.token1();\\n\\n        IERC20(address(lp)).safeTransferFrom(msg.sender, address(this), amount);\\n        lp.approve(address(router), amount);\\n        (uint256 amountAReceived, uint256 amountBReceived) = router\\n            .removeLiquidity(\\n                token0,\\n                token1,\\n                amount,\\n                amountAMinRemove,\\n                amountBMinRemove,\\n                address(this),\\n                deadline\\n            );\\n\\n        IERC20(token0).approve(address(apeRouter), amountAReceived);\\n        IERC20(token1).approve(address(apeRouter), amountBReceived);\\n        (uint256 amountASent, uint256 amountBSent, ) = apeRouter.addLiquidity(\\n            token0,\\n            token1,\\n            amountAReceived,\\n            amountBReceived,\\n            amountAMinAdd,\\n            amountBMinAdd,\\n            msg.sender,\\n            deadline\\n        );\\n\\n        if (amountAReceived - amountASent > 0) {\\n            IERC20(token0).safeTransfer(\\n                msg.sender,\\n                amountAReceived - amountASent\\n            );\\n        }\\n        if (amountBReceived - amountBSent > 0) {\\n            IERC20(token1).safeTransfer(\\n                msg.sender,\\n                amountBReceived - amountBSent\\n            );\\n        }\\n\\n        emit LPMigrated(lp, router, apeRouter, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/obiedobo/Desktop/Code/apeswap-zap/contracts/IApeSwapZap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.0;\\n\\n/*\\n  ______                     ______                                 \\n /      \\\\                   /      \\\\                                \\n|  \u2593\u2593\u2593\u2593\u2593\u2593\\\\ ______   ______ |  \u2593\u2593\u2593\u2593\u2593\u2593\\\\__   __   __  ______   ______  \\n| \u2593\u2593__| \u2593\u2593/      \\\\ /      \\\\| \u2593\u2593___\\\\\u2593\u2593  \\\\ |  \\\\ |  \\\\|      \\\\ /      \\\\ \\n| \u2593\u2593    \u2593\u2593  \u2593\u2593\u2593\u2593\u2593\u2593\\\\  \u2593\u2593\u2593\u2593\u2593\u2593\\\\\\\\\u2593\u2593    \\\\| \u2593\u2593 | \u2593\u2593 | \u2593\u2593 \\\\\u2593\u2593\u2593\u2593\u2593\u2593\\\\  \u2593\u2593\u2593\u2593\u2593\u2593\\\\\\n| \u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593 \u2593\u2593  | \u2593\u2593 \u2593\u2593    \u2593\u2593_\\\\\u2593\u2593\u2593\u2593\u2593\u2593\\\\ \u2593\u2593 | \u2593\u2593 | \u2593\u2593/      \u2593\u2593 \u2593\u2593  | \u2593\u2593\\n| \u2593\u2593  | \u2593\u2593 \u2593\u2593__/ \u2593\u2593 \u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593  \\\\__| \u2593\u2593 \u2593\u2593_/ \u2593\u2593_/ \u2593\u2593  \u2593\u2593\u2593\u2593\u2593\u2593\u2593 \u2593\u2593__/ \u2593\u2593\\n| \u2593\u2593  | \u2593\u2593 \u2593\u2593    \u2593\u2593\\\\\u2593\u2593     \\\\\\\\\u2593\u2593    \u2593\u2593\\\\\u2593\u2593   \u2593\u2593   \u2593\u2593\\\\\u2593\u2593    \u2593\u2593 \u2593\u2593    \u2593\u2593\\n \\\\\u2593\u2593   \\\\\u2593\u2593 \u2593\u2593\u2593\u2593\u2593\u2593\u2593  \\\\\u2593\u2593\u2593\u2593\u2593\u2593\u2593 \\\\\u2593\u2593\u2593\u2593\u2593\u2593  \\\\\u2593\u2593\u2593\u2593\u2593\\\\\u2593\u2593\u2593\u2593  \\\\\u2593\u2593\u2593\u2593\u2593\u2593\u2593 \u2593\u2593\u2593\u2593\u2593\u2593\u2593 \\n         | \u2593\u2593                                             | \u2593\u2593      \\n         | \u2593\u2593                                             | \u2593\u2593      \\n          \\\\\u2593\u2593                                              \\\\\u2593\u2593         \\n\\n * App:             https://apeswap.finance\\n * Medium:          https://ape-swap.medium.com\\n * Twitter:         https://twitter.com/ape_swap\\n * Discord:         https://discord.com/invite/apeswap\\n * Telegram:        https://t.me/ape_swap\\n * Announcements:   https://t.me/ape_swap_news\\n * GitHub:          https://github.com/ApeSwapFinance\\n */\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ninterface IApeSwapZap {\\n    function zap(\\n        IERC20 _inputToken,\\n        uint256 _inputAmount,\\n        address[] memory _lpTokens, //[tokenA, tokenB]\\n        address[] calldata _path0,\\n        address[] calldata _path1,\\n        uint256[] memory _minAmountsSwap, //[A, B]\\n        uint256[] memory _minAmountsLP, //[amountAMin, amountBMin]\\n        address _to,\\n        uint256 _deadline\\n    ) external;\\n\\n    function zapNative(\\n        address[] memory _lpTokens, //[tokenA, tokenB]\\n        address[] calldata _path0,\\n        address[] calldata _path1,\\n        uint256[] memory _minAmountsSwap, //[A, B]\\n        uint256[] memory _minAmountsLP, //[amountAMin, amountBMin]\\n        address _to,\\n        uint256 _deadline\\n    ) external payable;\\n\\n    function getMinAmounts(\\n        uint256 _inputAmount,\\n        address[] calldata _path0,\\n        address[] calldata _path1\\n    )\\n        external\\n        view\\n        returns (\\n            uint256[2] memory _minAmountsSwap,\\n            uint256[2] memory _minAmountsLP\\n        );\\n}\\n\"\r\n    },\r\n    \"/Users/obiedobo/Desktop/Code/apeswap-zap/contracts/ApeSwapZap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity 0.8.15;\\n\\n/*\\n  ______                     ______                                 \\n /      \\\\                   /      \\\\                                \\n|  \u2593\u2593\u2593\u2593\u2593\u2593\\\\ ______   ______ |  \u2593\u2593\u2593\u2593\u2593\u2593\\\\__   __   __  ______   ______  \\n| \u2593\u2593__| \u2593\u2593/      \\\\ /      \\\\| \u2593\u2593___\\\\\u2593\u2593  \\\\ |  \\\\ |  \\\\|      \\\\ /      \\\\ \\n| \u2593\u2593    \u2593\u2593  \u2593\u2593\u2593\u2593\u2593\u2593\\\\  \u2593\u2593\u2593\u2593\u2593\u2593\\\\\\\\\u2593\u2593    \\\\| \u2593\u2593 | \u2593\u2593 | \u2593\u2593 \\\\\u2593\u2593\u2593\u2593\u2593\u2593\\\\  \u2593\u2593\u2593\u2593\u2593\u2593\\\\\\n| \u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593 \u2593\u2593  | \u2593\u2593 \u2593\u2593    \u2593\u2593_\\\\\u2593\u2593\u2593\u2593\u2593\u2593\\\\ \u2593\u2593 | \u2593\u2593 | \u2593\u2593/      \u2593\u2593 \u2593\u2593  | \u2593\u2593\\n| \u2593\u2593  | \u2593\u2593 \u2593\u2593__/ \u2593\u2593 \u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593  \\\\__| \u2593\u2593 \u2593\u2593_/ \u2593\u2593_/ \u2593\u2593  \u2593\u2593\u2593\u2593\u2593\u2593\u2593 \u2593\u2593__/ \u2593\u2593\\n| \u2593\u2593  | \u2593\u2593 \u2593\u2593    \u2593\u2593\\\\\u2593\u2593     \\\\\\\\\u2593\u2593    \u2593\u2593\\\\\u2593\u2593   \u2593\u2593   \u2593\u2593\\\\\u2593\u2593    \u2593\u2593 \u2593\u2593    \u2593\u2593\\n \\\\\u2593\u2593   \\\\\u2593\u2593 \u2593\u2593\u2593\u2593\u2593\u2593\u2593  \\\\\u2593\u2593\u2593\u2593\u2593\u2593\u2593 \\\\\u2593\u2593\u2593\u2593\u2593\u2593  \\\\\u2593\u2593\u2593\u2593\u2593\\\\\u2593\u2593\u2593\u2593  \\\\\u2593\u2593\u2593\u2593\u2593\u2593\u2593 \u2593\u2593\u2593\u2593\u2593\u2593\u2593 \\n         | \u2593\u2593                                             | \u2593\u2593      \\n         | \u2593\u2593                                             | \u2593\u2593      \\n          \\\\\u2593\u2593                                              \\\\\u2593\u2593         \\n\\n * App:             https://apeswap.finance\\n * Medium:          https://ape-swap.medium.com\\n * Twitter:         https://twitter.com/ape_swap\\n * Discord:         https://discord.com/invite/apeswap\\n * Telegram:        https://t.me/ape_swap\\n * Announcements:   https://t.me/ape_swap_news\\n * GitHub:          https://github.com/ApeSwapFinance\\n */\\n\\nimport \\\"./IApeSwapZap.sol\\\";\\nimport \\\"./lib/IApeRouter02.sol\\\";\\nimport \\\"./lib/IApeFactory.sol\\\";\\nimport \\\"./lib/IApePair.sol\\\";\\nimport \\\"./lib/IWETH.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\ncontract ApeSwapZap is IApeSwapZap, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    struct BalanceLocalVars {\\n        uint256 amount0;\\n        uint256 amount1;\\n        uint256 balanceBefore;\\n    }\\n\\n    IApeRouter02 public immutable router;\\n    IApeFactory public immutable factory;\\n    address public immutable WNATIVE;\\n\\n    event Zap(address inputToken, uint256 inputAmount, address[] lpTokens);\\n    event ZapNative(uint256 inputAmount, address[] lpTokens);\\n\\n    constructor(IApeRouter02 _router) {\\n        router = _router;\\n        factory = IApeFactory(router.factory());\\n        WNATIVE = router.WETH();\\n    }\\n\\n    /// @dev The receive method is used as a fallback function in a contract\\n    /// and is called when ether is sent to a contract with no calldata.\\n    receive() external payable {\\n        require(\\n            msg.sender == WNATIVE,\\n            \\\"ApeSwapZap: Only receive ether from wrapped\\\"\\n        );\\n    }\\n\\n    /// @notice Zap single token to LP\\n    /// @param inputToken Input token\\n    /// @param inputAmount Input amount\\n    /// @param lpTokens Tokens of LP to zap to\\n    /// @param path0 Path from input token to LP token0\\n    /// @param path1 Path from input token to LP token1\\n    /// @param minAmountsSwap The minimum amount of output tokens that must be received for swap\\n    /// @param minAmountsLP AmountAMin and amountBMin for adding liquidity\\n    /// @param to address to receive LPs\\n    /// @param deadline Unix timestamp after which the transaction will revert\\n    function zap(\\n        IERC20 inputToken,\\n        uint256 inputAmount,\\n        address[] memory lpTokens, //[tokenA, tokenB]\\n        address[] calldata path0,\\n        address[] calldata path1,\\n        uint256[] memory minAmountsSwap, //[A, B]\\n        uint256[] memory minAmountsLP, //[amountAMin, amountBMin]\\n        address to,\\n        uint256 deadline\\n    ) external override nonReentrant {\\n        _zapInternal(\\n            inputToken,\\n            inputAmount,\\n            lpTokens,\\n            path0,\\n            path1,\\n            minAmountsSwap,\\n            minAmountsLP,\\n            to,\\n            deadline\\n        );\\n    }\\n\\n    /// @notice Zap native token to LP\\n    /// @param lpTokens Tokens of LP to zap to\\n    /// @param path0 Path from input token to LP token0\\n    /// @param path1 Path from input token to LP token1\\n    /// @param minAmountsSwap The minimum amount of output tokens that must be received for swap\\n    /// @param minAmountsLP AmountAMin and amountBMin for adding liquidity\\n    /// @param to address to receive LPs\\n    /// @param deadline Unix timestamp after which the transaction will revert\\n    function zapNative(\\n        address[] memory lpTokens, //[tokenA, tokenB]\\n        address[] calldata path0,\\n        address[] calldata path1,\\n        uint256[] memory minAmountsSwap, //[A, B]\\n        uint256[] memory minAmountsLP, //[amountAMin, amountBMin]\\n        address to,\\n        uint256 deadline\\n    ) external payable override nonReentrant {\\n        _zapNativeInternal(\\n            lpTokens,\\n            path0,\\n            path1,\\n            minAmountsSwap,\\n            minAmountsLP,\\n            to,\\n            deadline\\n        );\\n    }\\n\\n    /// @notice get min amounts for swaps\\n    /// @param inputAmount total input amount for swap\\n    /// @param path0 path from input token to LP token0\\n    /// @param path1 path from input token to LP token1\\n    function getMinAmounts(\\n        uint256 inputAmount,\\n        address[] calldata path0,\\n        address[] calldata path1\\n    )\\n        external\\n        view\\n        override\\n        returns (\\n            uint256[2] memory minAmountsSwap,\\n            uint256[2] memory minAmountsLP\\n        )\\n    {\\n        require(\\n            path0.length >= 2 || path1.length >= 2,\\n            \\\"ApeSwapZap: Needs at least one path\\\"\\n        );\\n\\n        uint256 inputAmountHalf = inputAmount / 2;\\n\\n        uint256 minAmountSwap0 = inputAmountHalf;\\n        if (path0.length != 0) {\\n            uint256[] memory amountsOut0 = router.getAmountsOut(\\n                inputAmountHalf,\\n                path0\\n            );\\n            minAmountSwap0 = amountsOut0[amountsOut0.length - 1];\\n        }\\n\\n        uint256 minAmountSwap1 = inputAmountHalf;\\n        if (path1.length != 0) {\\n            uint256[] memory amountsOut1 = router.getAmountsOut(\\n                inputAmountHalf,\\n                path1\\n            );\\n            minAmountSwap1 = amountsOut1[amountsOut1.length - 1];\\n        }\\n\\n        address token0 = path0.length == 0 ? path1[0] : path0[path0.length - 1];\\n        address token1 = path1.length == 0 ? path0[0] : path1[path1.length - 1];\\n\\n        IApePair lp = IApePair(factory.getPair(token0, token1));\\n        (uint256 reserveA, uint256 reserveB, ) = lp.getReserves();\\n        if (token0 == lp.token1()) {\\n            (reserveA, reserveB) = (reserveB, reserveA);\\n        }\\n        uint256 amountB = router.quote(minAmountSwap0, reserveA, reserveB);\\n\\n        minAmountsSwap = [minAmountSwap0, minAmountSwap1];\\n        minAmountsLP = [minAmountSwap0, amountB];\\n    }\\n\\n    function _zapInternal(\\n        IERC20 inputToken,\\n        uint256 inputAmount,\\n        address[] memory lpTokens, //[tokenA, tokenB]\\n        address[] calldata path0,\\n        address[] calldata path1,\\n        uint256[] memory minAmountsSwap, //[A, B]\\n        uint256[] memory minAmountsLP, //[amountAMin, amountBMin]\\n        address to,\\n        uint256 deadline\\n    ) internal {\\n        uint256 balanceBefore = _getBalance(inputToken);\\n        inputToken.safeTransferFrom(msg.sender, address(this), inputAmount);\\n        inputAmount = _getBalance(inputToken) - balanceBefore;\\n\\n        _zapPrivate(\\n            inputToken,\\n            inputAmount,\\n            lpTokens,\\n            path0,\\n            path1,\\n            minAmountsSwap,\\n            minAmountsLP,\\n            to,\\n            deadline,\\n            false\\n        );\\n        emit Zap(address(inputToken), inputAmount, lpTokens);\\n    }\\n\\n    function _zapNativeInternal(\\n        address[] memory lpTokens, //[tokenA, tokenB]\\n        address[] calldata path0,\\n        address[] calldata path1,\\n        uint256[] memory minAmountsSwap, //[A, B]\\n        uint256[] memory minAmountsLP, //[amountAMin, amountBMin]\\n        address to,\\n        uint256 deadline\\n    ) internal {\\n        uint256 inputAmount = msg.value;\\n        IERC20 inputToken = IERC20(WNATIVE);\\n        IWETH(WNATIVE).deposit{ value: inputAmount }();\\n\\n        _zapPrivate(\\n            inputToken,\\n            inputAmount,\\n            lpTokens,\\n            path0,\\n            path1,\\n            minAmountsSwap,\\n            minAmountsLP,\\n            to,\\n            deadline,\\n            true\\n        );\\n        emit ZapNative(inputAmount, lpTokens);\\n    }\\n\\n    function _transfer(\\n        address token,\\n        uint256 amount,\\n        bool native\\n    ) internal {\\n        if (amount == 0) return;\\n        if (token == WNATIVE && native) {\\n            IWETH(WNATIVE).withdraw(amount);\\n            // 2600 COLD_ACCOUNT_ACCESS_COST plus 2300 transfer gas - 1\\n            // Intended to support transfers to contracts, but not allow for further code execution\\n            (bool success, ) = msg.sender.call{ value: amount, gas: 4899 }(\\\"\\\");\\n            require(success, \\\"native transfer error\\\");\\n        } else {\\n            IERC20(token).safeTransfer(msg.sender, amount);\\n        }\\n    }\\n\\n    function _getBalance(IERC20 token) internal view returns (uint256 balance) {\\n        balance = token.balanceOf(address(this));\\n    }\\n\\n    function _zapPrivate(\\n        IERC20 inputToken,\\n        uint256 inputAmount,\\n        address[] memory lpTokens, //[tokenA, tokenB]\\n        address[] calldata path0,\\n        address[] calldata path1,\\n        uint256[] memory minAmountsSwap, //[A, B]\\n        uint256[] memory minAmountsLP, //[amountAMin, amountBMin]\\n        address to,\\n        uint256 deadline,\\n        bool native\\n    ) private {\\n        require(to != address(0), \\\"ApeSwapZap: Can't zap to null address\\\");\\n        require(\\n            lpTokens.length == 2,\\n            \\\"ApeSwapZap: need exactly 2 tokens to form a LP\\\"\\n        );\\n        require(\\n            factory.getPair(lpTokens[0], lpTokens[1]) != address(0),\\n            \\\"ApeSwapZap: Pair doesn't exist\\\"\\n        );\\n\\n        BalanceLocalVars memory vars;\\n\\n        inputToken.approve(address(router), inputAmount);\\n\\n        vars.amount0 = inputAmount / 2;\\n        vars.balanceBefore = 0;\\n        if (lpTokens[0] != address(inputToken)) {\\n            require(\\n                path0[0] == address(inputToken),\\n                \\\"ApeSwapZap: wrong path path0[0]\\\"\\n            );\\n            require(\\n                path0[path0.length - 1] == lpTokens[0],\\n                \\\"ApeSwapZap: wrong path path0[-1]\\\"\\n            );\\n            vars.balanceBefore = _getBalance(IERC20(lpTokens[0]));\\n            router.swapExactTokensForTokens(\\n                vars.amount0,\\n                minAmountsSwap[0],\\n                path0,\\n                address(this),\\n                deadline\\n            );\\n            vars.amount0 =\\n                _getBalance(IERC20(lpTokens[0])) -\\n                vars.balanceBefore;\\n        }\\n\\n        vars.amount1 = inputAmount / 2;\\n        if (lpTokens[1] != address(inputToken)) {\\n            require(\\n                path1[0] == address(inputToken),\\n                \\\"ApeSwapZap: wrong path path1[0]\\\"\\n            );\\n            require(\\n                path1[path1.length - 1] == lpTokens[1],\\n                \\\"ApeSwapZap: wrong path path1[-1]\\\"\\n            );\\n            vars.balanceBefore = _getBalance(IERC20(lpTokens[1]));\\n            router.swapExactTokensForTokens(\\n                vars.amount1,\\n                minAmountsSwap[1],\\n                path1,\\n                address(this),\\n                deadline\\n            );\\n            vars.amount1 =\\n                _getBalance(IERC20(lpTokens[1])) -\\n                vars.balanceBefore;\\n        }\\n\\n        IERC20(lpTokens[0]).approve(address(router), vars.amount0);\\n        IERC20(lpTokens[1]).approve(address(router), vars.amount1);\\n        (uint256 amountA, uint256 amountB, ) = router.addLiquidity(\\n            lpTokens[0],\\n            lpTokens[1],\\n            vars.amount0,\\n            vars.amount1,\\n            minAmountsLP[0],\\n            minAmountsLP[1],\\n            to,\\n            deadline\\n        );\\n\\n        if (lpTokens[0] == WNATIVE) {\\n            // Ensure WNATIVE is called last\\n            _transfer(lpTokens[1], vars.amount1 - amountB, native);\\n            _transfer(lpTokens[0], vars.amount0 - amountA, native);\\n        } else {\\n            _transfer(lpTokens[0], vars.amount0 - amountA, native);\\n            _transfer(lpTokens[1], vars.amount1 - amountB, native);\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IApeRouter02\",\"name\":\"_router\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IApePair\",\"name\":\"lp\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IApeRouter02\",\"name\":\"fromRouter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IApeRouter02\",\"name\":\"toRouter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LPMigrated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"lpTokens\",\"type\":\"address[]\"}],\"name\":\"Zap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"inputToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"contract IBEP20RewardApeV5\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"ZapLPPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"contract IBEP20RewardApeV5\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"ZapLPPoolNative\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"inputToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"ZapMiniApeV2\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"ZapMiniApeV2Native\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"lpTokens\",\"type\":\"address[]\"}],\"name\":\"ZapNative\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"inputToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"contract IBEP20RewardApeV5\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"ZapSingleAssetPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"contract IBEP20RewardApeV5\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"ZapSingleAssetPoolNative\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"inputToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"contract ICustomBill\",\"name\":\"bill\",\"type\":\"address\"}],\"name\":\"ZapTBill\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"contract ICustomBill\",\"name\":\"bill\",\"type\":\"address\"}],\"name\":\"ZapTBillNative\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WNATIVE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"apeRouter\",\"outputs\":[{\"internalType\":\"contract IApeRouter02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract IApeFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path0\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"path1\",\"type\":\"address[]\"}],\"name\":\"getMinAmounts\",\"outputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"minAmountsSwap\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"minAmountsLP\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IApeRouter02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"lpTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"path0\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"path1\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"minAmountsSwap\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"minAmountsLP\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"zap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IApeRouter02\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"contract IApePair\",\"name\":\"lp\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMinRemove\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMinRemove\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMinAdd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMinAdd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"zapLPMigrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"lpTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"path0\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"path1\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"minAmountsSwap\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"minAmountsLP\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"contract IBEP20RewardApeV5\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"zapLPPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"lpTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"path0\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"path1\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"minAmountsSwap\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"minAmountsLP\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"contract IBEP20RewardApeV5\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"zapLPPoolNative\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"lpTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"path0\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"path1\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"minAmountsSwap\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"minAmountsLP\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"contract IMiniApeV2\",\"name\":\"miniApe\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"zapMiniApeV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"lpTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"path0\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"path1\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"minAmountsSwap\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"minAmountsLP\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"contract IMiniApeV2\",\"name\":\"miniApe\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"zapMiniApeV2Native\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"lpTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"path0\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"path1\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"minAmountsSwap\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"minAmountsLP\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"zapNative\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"minAmountsSwap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"contract IBEP20RewardApeV5\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"zapSingleAssetPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"minAmountsSwap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"contract IBEP20RewardApeV5\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"zapSingleAssetPoolNative\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"lpTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"path0\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"path1\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"minAmountsSwap\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"minAmountsLP\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"contract ICustomBill\",\"name\":\"bill\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxPrice\",\"type\":\"uint256\"}],\"name\":\"zapTBill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"lpTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"path0\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"path1\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"minAmountsSwap\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"minAmountsLP\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"contract ICustomBill\",\"name\":\"bill\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxPrice\",\"type\":\"uint256\"}],\"name\":\"zapTBillNative\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ApeSwapZapFullV3", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000c0788a3ad43d79aa53b09c2eacc313a787d1d607", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}