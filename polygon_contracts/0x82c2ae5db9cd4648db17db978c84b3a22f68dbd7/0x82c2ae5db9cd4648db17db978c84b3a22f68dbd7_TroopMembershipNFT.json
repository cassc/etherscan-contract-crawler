{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@gnosis.pm/safe-contracts/contracts/common/Enum.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/// @title Enum - Collection of enums\\n/// @author Richard Meissner - <richard@gnosis.pm>\\ncontract Enum {\\n    enum Operation {Call, DelegateCall}\\n}\\n\"\r\n    },\r\n    \"@gnosis.pm/zodiac/contracts/guard/BaseGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"@gnosis.pm/safe-contracts/contracts/common/Enum.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport \\\"../interfaces/IGuard.sol\\\";\\n\\nabstract contract BaseGuard is IERC165 {\\n    function supportsInterface(bytes4 interfaceId)\\n        external\\n        pure\\n        override\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IGuard).interfaceId || // 0xe6d7a83a\\n            interfaceId == type(IERC165).interfaceId; // 0x01ffc9a7\\n    }\\n\\n    /// @dev Module transactions only use the first four parameters: to, value, data, and operation.\\n    /// Module.sol hardcodes the remaining parameters as 0 since they are not used for module transactions.\\n    /// @notice This interface is used to maintain compatibilty with Gnosis Safe transaction guards.\\n    function checkTransaction(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation,\\n        uint256 safeTxGas,\\n        uint256 baseGas,\\n        uint256 gasPrice,\\n        address gasToken,\\n        address payable refundReceiver,\\n        bytes memory signatures,\\n        address msgSender\\n    ) external virtual;\\n\\n    function checkAfterExecution(bytes32 txHash, bool success) external virtual;\\n}\\n\"\r\n    },\r\n    \"@gnosis.pm/zodiac/contracts/interfaces/IAvatar.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\n\\n/// @title Zodiac Avatar - A contract that manages modules that can execute transactions via this contract.\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"@gnosis.pm/safe-contracts/contracts/common/Enum.sol\\\";\\n\\ninterface IAvatar {\\n    event EnabledModule(address module);\\n    event DisabledModule(address module);\\n    event ExecutionFromModuleSuccess(address indexed module);\\n    event ExecutionFromModuleFailure(address indexed module);\\n\\n    /// @dev Enables a module on the avatar.\\n    /// @notice Can only be called by the avatar.\\n    /// @notice Modules should be stored as a linked list.\\n    /// @notice Must emit EnabledModule(address module) if successful.\\n    /// @param module Module to be enabled.\\n    function enableModule(address module) external;\\n\\n    /// @dev Disables a module on the avatar.\\n    /// @notice Can only be called by the avatar.\\n    /// @notice Must emit DisabledModule(address module) if successful.\\n    /// @param prevModule Address that pointed to the module to be removed in the linked list\\n    /// @param module Module to be removed.\\n    function disableModule(address prevModule, address module) external;\\n\\n    /// @dev Allows a Module to execute a transaction.\\n    /// @notice Can only be called by an enabled module.\\n    /// @notice Must emit ExecutionFromModuleSuccess(address module) if successful.\\n    /// @notice Must emit ExecutionFromModuleFailure(address module) if unsuccessful.\\n    /// @param to Destination address of module transaction.\\n    /// @param value Ether value of module transaction.\\n    /// @param data Data payload of module transaction.\\n    /// @param operation Operation type of module transaction: 0 == call, 1 == delegate call.\\n    function execTransactionFromModule(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation\\n    ) external returns (bool success);\\n\\n    /// @dev Allows a Module to execute a transaction and return data\\n    /// @notice Can only be called by an enabled module.\\n    /// @notice Must emit ExecutionFromModuleSuccess(address module) if successful.\\n    /// @notice Must emit ExecutionFromModuleFailure(address module) if unsuccessful.\\n    /// @param to Destination address of module transaction.\\n    /// @param value Ether value of module transaction.\\n    /// @param data Data payload of module transaction.\\n    /// @param operation Operation type of module transaction: 0 == call, 1 == delegate call.\\n    function execTransactionFromModuleReturnData(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation\\n    ) external returns (bool success, bytes memory returnData);\\n\\n    /// @dev Returns if an module is enabled\\n    /// @return True if the module is enabled\\n    function isModuleEnabled(address module) external view returns (bool);\\n\\n    /// @dev Returns array of modules.\\n    /// @param start Start of the page.\\n    /// @param pageSize Maximum number of modules that should be returned.\\n    /// @return array Array of modules.\\n    /// @return next Start of the next page.\\n    function getModulesPaginated(address start, uint256 pageSize)\\n        external\\n        view\\n        returns (address[] memory array, address next);\\n}\\n\"\r\n    },\r\n    \"@gnosis.pm/zodiac/contracts/interfaces/IGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"@gnosis.pm/safe-contracts/contracts/common/Enum.sol\\\";\\n\\ninterface IGuard {\\n    function checkTransaction(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation,\\n        uint256 safeTxGas,\\n        uint256 baseGas,\\n        uint256 gasPrice,\\n        address gasToken,\\n        address payable refundReceiver,\\n        bytes memory signatures,\\n        address msgSender\\n    ) external;\\n\\n    function checkAfterExecution(bytes32 txHash, bool success) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable\\n    struct OwnableStorage {\\n        address _owner;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Ownable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant OwnableStorageLocation = 0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300;\\n\\n    function _getOwnableStorage() private pure returns (OwnableStorage storage $) {\\n        assembly {\\n            $.slot := OwnableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\\n        __Ownable_init_unchained(initialOwner);\\n    }\\n\\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        return $._owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        address oldOwner = $._owner;\\n        $._owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1822Proxiable} from \\\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\\\";\\nimport {ERC1967Utils} from \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\\\";\\nimport {Initializable} from \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822Proxiable {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev The version of the upgrade interface of the contract. If this getter is missing, both `upgradeTo(address)`\\n     * and `upgradeToAndCall(address,bytes)` are present, and `upgradeTo` must be used if no function should be called,\\n     * while `upgradeToAndCall` will invoke the `receive` function if the second argument is the empty byte string.\\n     * If the getter returns `\\\"5.0.0\\\"`, only `upgradeToAndCall(address,bytes)` is present, and the second argument must\\n     * be the empty byte string if no function should be called, making it impossible to invoke the `receive` function\\n     * during an upgrade.\\n     */\\n    string public constant UPGRADE_INTERFACE_VERSION = \\\"5.0.0\\\";\\n\\n    /**\\n     * @dev The call is from an unauthorized context.\\n     */\\n    error UUPSUnauthorizedCallContext();\\n\\n    /**\\n     * @dev The storage `slot` is unsupported as a UUID.\\n     */\\n    error UUPSUnsupportedProxiableUUID(bytes32 slot);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        _checkProxy();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        _checkNotDelegated();\\n        _;\\n    }\\n\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual notDelegated returns (bytes32) {\\n        return ERC1967Utils.IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data);\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is not performed via delegatecall or the execution\\n     * context is not of a proxy with an ERC1967-compliant implementation pointing to self.\\n     * See {_onlyProxy}.\\n     */\\n    function _checkProxy() internal view virtual {\\n        if (\\n            address(this) == __self || // Must be called through delegatecall\\n            ERC1967Utils.getImplementation() != __self // Must be called through an active proxy\\n        ) {\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is performed via delegatecall.\\n     * See {notDelegated}.\\n     */\\n    function _checkNotDelegated() internal view virtual {\\n        if (address(this) != __self) {\\n            // Must not be called through delegatecall\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev Performs an implementation upgrade with a security check for UUPS proxies, and additional setup call.\\n     *\\n     * As a security check, {proxiableUUID} is invoked in the new implementation, and the return value\\n     * is expected to be the implementation slot in ERC1967.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data) private {\\n        try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n            if (slot != ERC1967Utils.IMPLEMENTATION_SLOT) {\\n                revert UUPSUnsupportedProxiableUUID(slot);\\n            }\\n            ERC1967Utils.upgradeToAndCall(newImplementation, data);\\n        } catch {\\n            // The implementation is not UUPS\\n            revert ERC1967Utils.ERC1967InvalidImplementation(newImplementation);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {ContextUpgradeable} from \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport {IERC20Errors} from \\\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n */\\nabstract contract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20, IERC20Metadata, IERC20Errors {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ERC20\\n    struct ERC20Storage {\\n        mapping(address account => uint256) _balances;\\n\\n        mapping(address account => mapping(address spender => uint256)) _allowances;\\n\\n        uint256 _totalSupply;\\n\\n        string _name;\\n        string _symbol;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ERC20\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ERC20StorageLocation = 0x52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace00;\\n\\n    function _getERC20Storage() private pure returns (ERC20Storage storage $) {\\n        assembly {\\n            $.slot := ERC20StorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        $._name = name_;\\n        $._symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        return $._name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        return $._symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        return $._totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        return $._balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        return $._allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            $._totalSupply += value;\\n        } else {\\n            uint256 fromBalance = $._balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                $._balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                $._totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                $._balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        $._allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport {IERC721Receiver} from \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport {IERC721Metadata} from \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport {ContextUpgradeable} from \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {ERC165Upgradeable} from \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {IERC721Errors} from \\\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\nabstract contract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721, IERC721Metadata, IERC721Errors {\\n    using Strings for uint256;\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ERC721\\n    struct ERC721Storage {\\n        // Token name\\n        string _name;\\n\\n        // Token symbol\\n        string _symbol;\\n\\n        mapping(uint256 tokenId => address) _owners;\\n\\n        mapping(address owner => uint256) _balances;\\n\\n        mapping(uint256 tokenId => address) _tokenApprovals;\\n\\n        mapping(address owner => mapping(address operator => bool)) _operatorApprovals;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ERC721\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ERC721StorageLocation = 0x80bb2b638cc20bc4d0a60d66940f3ab4a00c1d7b313497ca82fb0b4ab0079300;\\n\\n    function _getERC721Storage() private pure returns (ERC721Storage storage $) {\\n        assembly {\\n            $.slot := ERC721StorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        ERC721Storage storage $ = _getERC721Storage();\\n        $._name = name_;\\n        $._symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        ERC721Storage storage $ = _getERC721Storage();\\n        if (owner == address(0)) {\\n            revert ERC721InvalidOwner(address(0));\\n        }\\n        return $._balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\\n        return _requireOwned(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        ERC721Storage storage $ = _getERC721Storage();\\n        return $._name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        ERC721Storage storage $ = _getERC721Storage();\\n        return $._symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual {\\n        _approve(to, tokenId, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\\n        _requireOwned(tokenId);\\n\\n        return _getApproved(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\\n        ERC721Storage storage $ = _getERC721Storage();\\n        return $._operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        address previousOwner = _update(to, tokenId, _msgSender());\\n        if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\\n        transferFrom(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     *\\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\\n     * core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        ERC721Storage storage $ = _getERC721Storage();\\n        return $._owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\\n     */\\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\\n        ERC721Storage storage $ = _getERC721Storage();\\n        return $._tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\\n     * particular (ignoring whether it is owned by `owner`).\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            spender != address(0) &&\\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\\n     * Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\\n     * the `spender` for the specific `tokenId`.\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\\n        if (!_isAuthorized(owner, spender, tokenId)) {\\n            if (owner == address(0)) {\\n                revert ERC721NonexistentToken(tokenId);\\n            } else {\\n                revert ERC721InsufficientApproval(spender, tokenId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\\n     *\\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\\n     * remain consistent with one another.\\n     */\\n    function _increaseBalance(address account, uint128 value) internal virtual {\\n        ERC721Storage storage $ = _getERC721Storage();\\n        unchecked {\\n            $._balances[account] += value;\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\\n        ERC721Storage storage $ = _getERC721Storage();\\n        address from = _ownerOf(tokenId);\\n\\n        // Perform (optional) operator check\\n        if (auth != address(0)) {\\n            _checkAuthorized(from, auth, tokenId);\\n        }\\n\\n        // Execute the update\\n        if (from != address(0)) {\\n            // Clear approval. No need to re-authorize or emit the Approval event\\n            _approve(address(0), tokenId, address(0), false);\\n\\n            unchecked {\\n                $._balances[from] -= 1;\\n            }\\n        }\\n\\n        if (to != address(0)) {\\n            unchecked {\\n                $._balances[to] += 1;\\n            }\\n        }\\n\\n        $._owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        return from;\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner != address(0)) {\\n            revert ERC721InvalidSender(address(0));\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        _checkOnERC721Received(address(0), to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal {\\n        address previousOwner = _update(address(0), tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        } else if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\\n     * are aware of the ERC721 standard to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - `to` cannot be the zero address.\\n     * - `from` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\\n        _safeTransfer(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth) internal {\\n        _approve(to, tokenId, auth, true);\\n    }\\n\\n    /**\\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\\n     * emitted in the context of transfers.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\\n        ERC721Storage storage $ = _getERC721Storage();\\n        // Avoid reading the owner unless necessary\\n        if (emitEvent || auth != address(0)) {\\n            address owner = _requireOwned(tokenId);\\n\\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\\n                revert ERC721InvalidApprover(auth);\\n            }\\n\\n            if (emitEvent) {\\n                emit Approval(owner, to, tokenId);\\n            }\\n        }\\n\\n        $._tokenApprovals[tokenId] = to;\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Requirements:\\n     * - operator can't be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        ERC721Storage storage $ = _getERC721Storage();\\n        if (operator == address(0)) {\\n            revert ERC721InvalidOperator(operator);\\n        }\\n        $._operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\\n     * Returns the owner.\\n     *\\n     * Overrides to ownership logic should be done to {_ownerOf}.\\n     */\\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        if (owner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\\n     * recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {\\n        if (to.code.length > 0) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                if (retval != IERC721Receiver.onERC721Received.selector) {\\n                    revert ERC721InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert ERC721InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC721Upgradeable} from \\\"../ERC721Upgradeable.sol\\\";\\nimport {IERC721Enumerable} from \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {Initializable} from \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds enumerability\\n * of all the token ids in the contract as well as all token ids owned by each account.\\n *\\n * CAUTION: `ERC721` extensions that implement custom `balanceOf` logic, such as `ERC721Consecutive`,\\n * interfere with enumerability and should not be used together with `ERC721Enumerable`.\\n */\\nabstract contract ERC721EnumerableUpgradeable is Initializable, ERC721Upgradeable, IERC721Enumerable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ERC721Enumerable\\n    struct ERC721EnumerableStorage {\\n        mapping(address owner => mapping(uint256 index => uint256)) _ownedTokens;\\n        mapping(uint256 tokenId => uint256) _ownedTokensIndex;\\n\\n        uint256[] _allTokens;\\n        mapping(uint256 tokenId => uint256) _allTokensIndex;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ERC721Enumerable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ERC721EnumerableStorageLocation = 0x645e039705490088daad89bae25049a34f4a9072d398537b1ab2425f24cbed00;\\n\\n    function _getERC721EnumerableStorage() private pure returns (ERC721EnumerableStorage storage $) {\\n        assembly {\\n            $.slot := ERC721EnumerableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev An `owner`'s token query was out of bounds for `index`.\\n     *\\n     * NOTE: The owner being `address(0)` indicates a global out of bounds index.\\n     */\\n    error ERC721OutOfBoundsIndex(address owner, uint256 index);\\n\\n    /**\\n     * @dev Batch mint is not allowed.\\n     */\\n    error ERC721EnumerableForbiddenBatchMint();\\n\\n    function __ERC721Enumerable_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC721Enumerable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721Upgradeable) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual returns (uint256) {\\n        ERC721EnumerableStorage storage $ = _getERC721EnumerableStorage();\\n        if (index >= balanceOf(owner)) {\\n            revert ERC721OutOfBoundsIndex(owner, index);\\n        }\\n        return $._ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        ERC721EnumerableStorage storage $ = _getERC721EnumerableStorage();\\n        return $._allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual returns (uint256) {\\n        ERC721EnumerableStorage storage $ = _getERC721EnumerableStorage();\\n        if (index >= totalSupply()) {\\n            revert ERC721OutOfBoundsIndex(address(0), index);\\n        }\\n        return $._allTokens[index];\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_update}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual override returns (address) {\\n        address previousOwner = super._update(to, tokenId, auth);\\n\\n        if (previousOwner == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (previousOwner != to) {\\n            _removeTokenFromOwnerEnumeration(previousOwner, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (previousOwner != to) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n\\n        return previousOwner;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        ERC721EnumerableStorage storage $ = _getERC721EnumerableStorage();\\n        uint256 length = balanceOf(to) - 1;\\n        $._ownedTokens[to][length] = tokenId;\\n        $._ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        ERC721EnumerableStorage storage $ = _getERC721EnumerableStorage();\\n        $._allTokensIndex[tokenId] = $._allTokens.length;\\n        $._allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        ERC721EnumerableStorage storage $ = _getERC721EnumerableStorage();\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = balanceOf(from);\\n        uint256 tokenIndex = $._ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = $._ownedTokens[from][lastTokenIndex];\\n\\n            $._ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            $._ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete $._ownedTokensIndex[tokenId];\\n        delete $._ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        ERC721EnumerableStorage storage $ = _getERC721EnumerableStorage();\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = $._allTokens.length - 1;\\n        uint256 tokenIndex = $._allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = $._allTokens[lastTokenIndex];\\n\\n        $._allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        $._allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete $._allTokensIndex[tokenId];\\n        $._allTokens.pop();\\n    }\\n\\n    /**\\n     * See {ERC721-_increaseBalance}. We need that to account tokens that were minted in batch\\n     */\\n    function _increaseBalance(address account, uint128 amount) internal virtual override {\\n        if (amount > 0) {\\n            revert ERC721EnumerableForbiddenBatchMint();\\n        }\\n        super._increaseBalance(account, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {UpgradeableBeacon} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/ERC1967/ERC1967Utils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IBeacon} from \\\"../beacon/IBeacon.sol\\\";\\nimport {Address} from \\\"../../utils/Address.sol\\\";\\nimport {StorageSlot} from \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n */\\nlibrary ERC1967Utils {\\n    // We re-declare ERC-1967 events here because they can't be used directly from IERC1967.\\n    // This will be fixed in Solidity 0.8.21. At that point we should remove these events.\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev The `implementation` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidImplementation(address implementation);\\n\\n    /**\\n     * @dev The `admin` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidAdmin(address admin);\\n\\n    /**\\n     * @dev The `beacon` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidBeacon(address beacon);\\n\\n    /**\\n     * @dev An upgrade function sees `msg.value > 0` that may be lost.\\n     */\\n    error ERC1967NonPayable();\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        if (newImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(newImplementation);\\n        }\\n        StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Performs implementation upgrade with additional setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using\\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        if (newAdmin == address(0)) {\\n            revert ERC1967InvalidAdmin(address(0));\\n        }\\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {IERC1967-AdminChanged} event.\\n     */\\n    function changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.beacon\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        if (newBeacon.code.length == 0) {\\n            revert ERC1967InvalidBeacon(newBeacon);\\n        }\\n\\n        StorageSlot.getAddressSlot(BEACON_SLOT).value = newBeacon;\\n\\n        address beaconImplementation = IBeacon(newBeacon).implementation();\\n        if (beaconImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(beaconImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Change the beacon and trigger a setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-BeaconUpgraded} event.\\n     *\\n     * CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since\\n     * it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for\\n     * efficiency.\\n     */\\n    function upgradeBeaconToAndCall(address newBeacon, bytes memory data) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract\\n     * if an upgrade doesn't perform an initialization call.\\n     */\\n    function _checkNonPayable() private {\\n        if (msg.value > 0) {\\n            revert ERC1967NonPayable();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SignedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/StorageSlot.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IVersioned.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\n/// @title IVersioned\\ninterface IVersioned {\\n    /// @notice Return version information about this contract\\n    /// @param id Identifier for the contract\\n    /// @param version Numerical version\\n    function version()\\n        external\\n        view\\n        returns (string memory id, uint256 version);\\n}\\n\"\r\n    },\r\n    \"contracts/membership-nft/ITroopMembershipNFT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport {IAvatar, Enum} from \\\"@gnosis.pm/zodiac/contracts/interfaces/IAvatar.sol\\\";\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport {IERC721Enumerable} from \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\nimport {IVersioned} from \\\"../interfaces/IVersioned.sol\\\";\\n\\n/// @title ITroopMembershipNFT\\n/// @author Troop Labs\\ninterface ITroopMembershipNFT is IVersioned, IERC721Enumerable {\\n    event TrooperJoined(address member, uint256 tokenId);\\n    event TrooperKicked(address member, uint256 tokenId);\\n\\n    /// @notice Add a new member to the Troop \ud83e\udee1\\n    /// @param account Account of member\\n    function register(address account) external;\\n\\n    /// @notice Remove member from Troop \ud83d\udd25\\n    /// @param tokenId Token id of member to kick\\n    function kick(uint256 tokenId) external;\\n\\n    /// @notice Proxy initialiser\\n    /// @param troop_ Address of Troop\\n    /// @param name_ Name of Troop\\n    /// @param symbol_ Symbol of Troop (used as ERC-721 symbol)\\n    /// @param initialMembers Set of initial members\\n    function init(\\n        address troop_,\\n        string memory name_,\\n        string memory symbol_,\\n        address[] memory initialMembers\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/membership-nft/TroopMembershipNFT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport {IAvatar, Enum} from \\\"@gnosis.pm/zodiac/contracts/interfaces/IAvatar.sol\\\";\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport {ERC721EnumerableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol\\\";\\nimport {UUPSUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport {IVersioned} from \\\"../interfaces/IVersioned.sol\\\";\\nimport {TroopV0} from \\\"../TroopV0.sol\\\";\\nimport {ITroopMembershipNFT} from \\\"./ITroopMembershipNFT.sol\\\";\\n\\n/// @title TroopMembershipNFT\\n/// @author Troop Labs\\ncontract TroopMembershipNFT is\\n    ITroopMembershipNFT,\\n    UUPSUpgradeable,\\n    ERC721EnumerableUpgradeable\\n{\\n    using Strings for address;\\n\\n    // keccak256(\\\"trooplabs.troop_membership_nft.troop\\\");\\n    bytes32 internal constant TROOP_SLOT =\\n        0xad051ae090325a42704f3fdb34dda7f40fc2da32bedfbe0dde7e4c1428261fcb;\\n\\n    event ActionExecuted(\\n        address indexed caller,\\n        bytes32 indexed roleKey,\\n        address indexed target,\\n        uint256 value,\\n        bytes data\\n    );\\n\\n    error NotAuthorised(address user);\\n    error NonTransferrable();\\n    error AlreadyRegistered(address account);\\n    error InvalidRecipient(address account);\\n\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /// @notice Proxy initialiser\\n    /// @param troop_ Address of Troop\\n    /// @param name_ Name of Troop\\n    /// @param symbol_ Symbol of Troop (used as ERC-721 symbol)\\n    /// @param initialMembers Set of initial members\\n    function init(\\n        address troop_,\\n        string memory name_,\\n        string memory symbol_,\\n        address[] memory initialMembers\\n    ) public initializer {\\n        __ERC721_init(name_, symbol_);\\n\\n        assembly {\\n            // Store Troop master module\\n            sstore(TROOP_SLOT, shr(96, shl(96, troop_)))\\n        }\\n\\n        uint256 nInitialMembers = initialMembers.length;\\n        for (uint256 i = 0; i < nInitialMembers; ++i) {\\n            // NB: `_register` will fail if there are duplicate sudoers\\n            _register(initialMembers[i]);\\n        }\\n    }\\n\\n    /// @dev Increment version when changing this implementation\\n    function version()\\n        external\\n        pure\\n        virtual\\n        override\\n        returns (string memory, uint256)\\n    {\\n        return (\\\"TroopMembershipNFT\\\", 4);\\n    }\\n\\n    function getTroop() public view returns (address troop) {\\n        assembly {\\n            troop := sload(TROOP_SLOT)\\n        }\\n    }\\n\\n    /// @notice See {UUPSUpgradeable-_authorizeUpgrade}\\n    function _authorizeUpgrade(\\n        address /** newImplementation */\\n    ) internal virtual override {\\n        if (msg.sender != TroopV0(getTroop()).getAvatar()) {\\n            revert NotAuthorised(msg.sender);\\n        }\\n    }\\n\\n    /// @notice Based URI\\n    function _baseURI() internal view virtual override returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"https://mvp.troo.ps/api/metadata/\\\",\\n                    address(getTroop()).toHexString(),\\n                    \\\"/\\\"\\n                )\\n            );\\n    }\\n\\n    /// @notice Make it account-bound\\n    function _update(\\n        address to,\\n        uint256 tokenId,\\n        address auth\\n    ) internal virtual override returns (address) {\\n        address from = super._update(to, tokenId, auth);\\n        if (from != address(0) && to != address(0)) {\\n            // Allow mints and burns; but disable transfer between any other pair of addresses\\n            revert NonTransferrable();\\n        }\\n        return from;\\n    }\\n\\n    /// @notice Assert caller is the avatar\\n    function _assertCallerIsAvatar() internal view {\\n        if (msg.sender != TroopV0(getTroop()).getAvatar()) {\\n            revert NotAuthorised(msg.sender);\\n        }\\n    }\\n\\n    /// @dev PRIVILEGED\\n    function _register(address account) internal returns (uint256 tokenId) {\\n        if (balanceOf(account) > 0) {\\n            revert AlreadyRegistered(account);\\n        }\\n        // This module or avatar can't be members\\n        if (\\n            account == address(this) ||\\n            account == TroopV0(getTroop()).getAvatar()\\n        ) {\\n            revert InvalidRecipient(account);\\n        }\\n        tokenId = totalSupply() + 1;\\n        _safeMint(account, tokenId);\\n    }\\n\\n    /// @notice Add a new member to the Troop \ud83e\udee1\\n    /// @param account Account of member\\n    function register(address account) external {\\n        _assertCallerIsAvatar();\\n        uint256 tokenId = _register(account);\\n        emit TrooperJoined(account, tokenId);\\n    }\\n\\n    /// @notice Remove member from Troop \ud83d\udd25\\n    /// @param tokenId Token id of member to kick\\n    function kick(uint256 tokenId) external {\\n        _assertCallerIsAvatar();\\n        address prevOwner = _ownerOf(tokenId);\\n        _burn(tokenId);\\n        emit TrooperKicked(prevOwner, tokenId);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/tbt/TroopBoundToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport {IVersioned} from \\\"../interfaces/IVersioned.sol\\\";\\nimport {TroopV0} from \\\"../TroopV0.sol\\\";\\nimport {Module} from \\\"../../vendor/zodiac-modifier-roles/packages/evm/contracts/lib/Module.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {ERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport {UUPSUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport {IERC721Enumerable} from \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\\n/// @title TroopBoundToken\\n/// @author Troop Labs\\ncontract TroopBoundToken is\\n    IVersioned,\\n    Initializable,\\n    UUPSUpgradeable,\\n    ERC20Upgradeable\\n{\\n    /// @notice The Troop that this token is bound to\\n    bytes32 internal constant TROOP_SLOT =\\n        0x9c2c96554592385374a6f40a9781aa580da309bc34add9a9169976ff2b6614af; // keccak256(\\\"trooplabs.tbt.troop\\\")\\n\\n    error UnauthorisedCaller(address actual, address expected);\\n    error InvalidTransfer(\\n        address troop,\\n        address from,\\n        address to,\\n        uint256 amount\\n    );\\n\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function init(\\n        address troop_,\\n        string memory name_,\\n        string memory symbol_\\n    ) public initializer {\\n        __UUPSUpgradeable_init(); // noop\\n        __ERC20_init(name_, symbol_);\\n\\n        assembly {\\n            sstore(TROOP_SLOT, shr(96, shl(96, troop_)))\\n        }\\n    }\\n\\n    function version() external pure returns (string memory id, uint256 v) {\\n        return (\\\"TroopBoundToken\\\", 2);\\n    }\\n\\n    function getTroop() public view returns (address troop) {\\n        assembly {\\n            troop := sload(TROOP_SLOT)\\n        }\\n    }\\n\\n    function _authorizeUpgrade(address) internal virtual override {\\n        _assertCallerIsTroopAvatar();\\n    }\\n\\n    function _assertCallerIsTroopAvatar() internal view {\\n        address avatar = Module(getTroop()).getAvatar();\\n        if (msg.sender != avatar) {\\n            revert UnauthorisedCaller(msg.sender, avatar);\\n        }\\n    }\\n\\n    /// @notice Mint tokens - can only be performed by the Troop avatar\\n    function mint(address to, uint256 amount) external {\\n        _assertCallerIsTroopAvatar();\\n        _mint(to, amount);\\n    }\\n\\n    /// @notice Burn tokens - can only be performed by the Troop avatar\\n    function burn(address from, uint256 amount) external {\\n        _assertCallerIsTroopAvatar();\\n        _burn(from, amount);\\n    }\\n\\n    /// @notice Check if either the sender or receiver of this token is a\\n    ///     member of the Troop (ie. owns a membership SBT). Otherwise, revert!\\n    /// @param from Sender\\n    /// @param to Receiver\\n    /// @param amount Amount of tokens to be transferred\\n    function _update(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override {\\n        super._update(from, to, amount);\\n        address troop = getTroop();\\n        IERC721Enumerable membershipNFT = IERC721Enumerable(\\n            TroopV0(troop).getMembershipNFT()\\n        );\\n        bool isMember = membershipNFT.balanceOf(to) > 0 ||\\n            membershipNFT.balanceOf(from) > 0;\\n        bool isMintOrBurn = from == address(0) || to == address(0);\\n        if (!isMember && !isMintOrBurn) {\\n            revert InvalidTransfer(troop, from, to, amount);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/TroopV0.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport {IAvatar, Enum} from \\\"@gnosis.pm/zodiac/contracts/interfaces/IAvatar.sol\\\";\\nimport {IERC721Enumerable} from \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\nimport {UUPSUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport {Roles, Module, Consumption, ExecutionOptions, ConditionFlat} from \\\"../vendor/zodiac-modifier-roles/packages/evm/contracts/Roles.sol\\\";\\nimport {IVersioned} from \\\"./interfaces/IVersioned.sol\\\";\\nimport {ITroopMembershipNFT} from \\\"./membership-nft/ITroopMembershipNFT.sol\\\";\\nimport {TroopBoundToken} from \\\"./tbt/TroopBoundToken.sol\\\";\\n\\n/// @title TroopV0\\n/// @author Troop Labs\\ncontract TroopV0 is IVersioned, UUPSUpgradeable, Roles {\\n    // keccak256(\\\"trooplabs.troopv0.factory\\\")\\n    bytes32 internal constant FACTORY_SLOT =\\n        0x106cd81235924659842643755821d60201bb905a4824d73055de77a77dd23332;\\n    // keccak256(\\\"trooplabs.troopv0.membership_nft\\\")\\n    bytes32 internal constant MEMBERSHIP_NFT_SLOT =\\n        0x83e0a5af2baa73c658245d2c493e66239cf9e97f184503eb07e4af7c58b13a18;\\n    // keccak256(\\\"trooplabs.troopv0.tbt\\\")\\n    bytes32 internal constant TBT_SLOT =\\n        0x19d5b212fed0b7f996d898d8994df6824975a64644396d155ef919d55f63accf;\\n\\n    /// @notice Special role that is allowed to execute anything on the avatar\\n    bytes32 public constant RK_SUDO = keccak256(\\\"troop/sudo\\\");\\n    bytes32 public constant RK_ROLE_ADMIN = keccak256(\\\"troop/role_admin\\\");\\n    bytes32 public constant RK_RECRUITER = keccak256(\\\"troop/recruiter\\\");\\n    bytes32 public constant RK_TBT_ADMIN = keccak256(\\\"troop/tbt_admin\\\");\\n\\n    event ActionExecuted(\\n        address indexed caller,\\n        bytes32 indexed roleKey,\\n        address indexed target,\\n        uint256 value,\\n        bytes data\\n    );\\n    event TroopBoundTokenUpdated(address oldTBT, address newTBT);\\n\\n    error NotAuthorised(address user);\\n    error InsufficientSudoers();\\n    error ExecSudoReverted(\\n        address to,\\n        uint256 value,\\n        bytes data,\\n        bytes returnData\\n    );\\n\\n    constructor() Roles(address(0)) {}\\n\\n    /// @notice Proxy initialiser\\n    /// @param avatar_ Address of avatar\\n    /// @param name_ Name of Troop\\n    /// @param symbol_ Symbol of Troop (used as ERC-721 symbol)\\n    /// @param sudoers_ Set of initial members\\n    function init(\\n        address avatar_,\\n        string memory name_,\\n        string memory symbol_,\\n        address[] memory sudoers_,\\n        address membershipNFT_\\n    ) public initializer {\\n        // Store avatar (via Module)\\n        setAvatar(avatar_);\\n        assembly {\\n            // Store factory\\n            // NB: Assumes caller is factory i.e. Troop must be initialised by the\\n            // factory only.\\n            sstore(FACTORY_SLOT, shr(96, shl(96, caller())))\\n            // Store membership NFT address\\n            sstore(MEMBERSHIP_NFT_SLOT, shr(96, shl(96, membershipNFT_)))\\n        }\\n\\n        uint256 nSudoers = sudoers_.length;\\n        if (nSudoers < 1) {\\n            revert InsufficientSudoers();\\n        }\\n\\n        // Assign sudo roles\\n        bytes32[] memory roleKeys = new bytes32[](1);\\n        bool[] memory memberOf = new bool[](1);\\n        roleKeys[0] = RK_SUDO;\\n        memberOf[0] = true;\\n        for (uint16 i; i < nSudoers; ++i) {\\n            address sudoer = sudoers_[i];\\n            _roles()[RK_SUDO].members[sudoer] = true;\\n            _roles()[RK_ROLE_ADMIN].members[sudoer] = true;\\n            emit AssignRoles(sudoer, roleKeys, memberOf);\\n        }\\n\\n        // Initialise default role scoping\\n        // RK_ROLE_ADMIN\\n        _scopeTarget(RK_ROLE_ADMIN, address(this));\\n        _allowFunction(\\n            RK_ROLE_ADMIN,\\n            address(this),\\n            this.assignRoles.selector,\\n            ExecutionOptions.None\\n        );\\n        // RK_RECRUITER\\n        _scopeTarget(RK_RECRUITER, getMembershipNFT());\\n        _allowFunction(\\n            RK_RECRUITER,\\n            getMembershipNFT(),\\n            ITroopMembershipNFT.register.selector,\\n            ExecutionOptions.None\\n        );\\n\\n        // Initialise membership NFT proxy\\n        ITroopMembershipNFT(membershipNFT_).init(\\n            address(this),\\n            name_,\\n            symbol_,\\n            sudoers_\\n        );\\n    }\\n\\n    ///////////////////////////////////////////////////////////////////////////\\n    /// GETTERS ///////////////////////////////////////////////////////////////\\n    ///////////////////////////////////////////////////////////////////////////\\n\\n    function getFactory() public view returns (address factory) {\\n        assembly {\\n            factory := sload(FACTORY_SLOT)\\n        }\\n    }\\n\\n    function getMembershipNFT() public view returns (address nft) {\\n        assembly {\\n            nft := sload(MEMBERSHIP_NFT_SLOT)\\n        }\\n    }\\n\\n    function getTroopBoundToken() public view returns (address tbt) {\\n        assembly {\\n            tbt := sload(TBT_SLOT)\\n        }\\n    }\\n\\n    /// @dev Increment version when changing this implementation\\n    function version()\\n        external\\n        pure\\n        virtual\\n        override\\n        returns (string memory, uint256)\\n    {\\n        return (\\\"TroopV0\\\", 7);\\n    }\\n\\n    /// @notice See {UUPSUpgradeable-_authorizeUpgrade}\\n    function _authorizeUpgrade(\\n        address /** newImplementation */\\n    ) internal virtual override {\\n        if (msg.sender != getFactory()) {\\n            revert NotAuthorised(msg.sender);\\n        }\\n    }\\n\\n    ///////////////////////////////////////////////////////////////////////////\\n    /// ROLE SCOPING //////////////////////////////////////////////////////////\\n    ///////////////////////////////////////////////////////////////////////////\\n\\n    /// @dev Allows transactions to a target address.\\n    /// @param roleKey identifier of the role to be modified.\\n    /// @param targetAddress Destination address of transaction.\\n    /// @param options designates if a transaction can send ether and/or delegatecall to target.\\n    function allowTarget(\\n        bytes32 roleKey,\\n        address targetAddress,\\n        ExecutionOptions options\\n    ) external {\\n        _assertCallerIsAvatar();\\n        _allowTarget(roleKey, targetAddress, options);\\n    }\\n\\n    /// @dev Removes transactions to a target address.\\n    /// @param roleKey identifier of the role to be modified.\\n    /// @param targetAddress Destination address of transaction.\\n    function revokeTarget(bytes32 roleKey, address targetAddress) external {\\n        _assertCallerIsAvatar();\\n        _revokeTarget(roleKey, targetAddress);\\n    }\\n\\n    /// @dev Designates only specific functions can be called.\\n    /// @param roleKey identifier of the role to be modified.\\n    /// @param targetAddress Destination address of transaction.\\n    function scopeTarget(bytes32 roleKey, address targetAddress) external {\\n        _assertCallerIsAvatar();\\n        _scopeTarget(roleKey, targetAddress);\\n    }\\n\\n    /// @dev Specifies the functions that can be called.\\n    /// @param roleKey identifier of the role to be modified.\\n    /// @param targetAddress Destination address of transaction.\\n    /// @param selector 4 byte function selector.\\n    /// @param options designates if a transaction can send ether and/or delegatecall to target.\\n    function allowFunction(\\n        bytes32 roleKey,\\n        address targetAddress,\\n        bytes4 selector,\\n        ExecutionOptions options\\n    ) external {\\n        _assertCallerIsAvatar();\\n        _allowFunction(roleKey, targetAddress, selector, options);\\n    }\\n\\n    /// @dev Removes the functions that can be called.\\n    /// @param roleKey identifier of the role to be modified.\\n    /// @param targetAddress Destination address of transaction.\\n    /// @param selector 4 byte function selector.\\n    function revokeFunction(\\n        bytes32 roleKey,\\n        address targetAddress,\\n        bytes4 selector\\n    ) external {\\n        _assertCallerIsAvatar();\\n        _revokeFunction(roleKey, targetAddress, selector);\\n    }\\n\\n    /// @dev Sets conditions to enforce on calls to the specified target.\\n    /// @param roleKey identifier of the role to be modified.\\n    /// @param targetAddress Destination address of transaction.\\n    /// @param selector 4 byte function selector.\\n    /// @param conditions The conditions to enforce.\\n    /// @param options designates if a transaction can send ether and/or delegatecall to target.\\n    function scopeFunction(\\n        bytes32 roleKey,\\n        address targetAddress,\\n        bytes4 selector,\\n        ConditionFlat[] memory conditions,\\n        ExecutionOptions options\\n    ) external {\\n        _assertCallerIsAvatar();\\n        _scopeFunction(roleKey, targetAddress, selector, conditions, options);\\n    }\\n\\n    /// @notice Set allowance configuration for a (target,selector)\\n    /// @param key bytes32(abi.encodePacked(targetAddress, selector))\\n    function setAllowance(\\n        bytes32 key,\\n        uint128 balance,\\n        uint128 maxBalance,\\n        uint128 refillAmount,\\n        uint64 refillInterval,\\n        uint64 refillTimestamp\\n    ) external {\\n        _assertCallerIsAvatar();\\n        _setAllowance(\\n            key,\\n            balance,\\n            maxBalance,\\n            refillAmount,\\n            refillInterval,\\n            refillTimestamp\\n        );\\n    }\\n\\n    ///////////////////////////////////////////////////////////////////////////\\n    /// PERMISSIONS ///////////////////////////////////////////////////////////\\n    ///////////////////////////////////////////////////////////////////////////\\n\\n    /// @notice Assert caller is a Troop member (i.e. possesses NFT)\\n    function _assertCallerIsMember() internal view {\\n        if (IERC721Enumerable(getMembershipNFT()).balanceOf(msg.sender) < 1) {\\n            revert NotAuthorised(msg.sender);\\n        }\\n    }\\n\\n    /// @notice Assert caller is the avatar\\n    function _assertCallerIsAvatar() internal view {\\n        if (msg.sender != getAvatar()) {\\n            revert NotAuthorised(msg.sender);\\n        }\\n    }\\n\\n    /// @notice See {PermissionChecker-_authorize}\\n    ///     We override this so that `_authorize` not only checks the caller's\\n    ///     role membership; but also their Troop (NFT) membership.\\n    /// @param roleKey Identifier of the role to assume for this transaction\\n    /// @param to Destination address of module transaction\\n    /// @param value Ether value of module transaction\\n    /// @param data Data payload of module transaction\\n    /// @param operation Operation type of module transaction\\n    function _authorize(\\n        bytes32 roleKey,\\n        address to,\\n        uint256 value,\\n        bytes calldata data,\\n        Enum.Operation operation\\n    ) internal view virtual override returns (Consumption[] memory) {\\n        _assertCallerIsMember();\\n        return super._authorize(roleKey, to, value, data, operation);\\n    }\\n\\n    /// @notice Lookup whether user is assigned a role. Reverts if user is not\\n    ///     a member of the Troop.\\n    /// @param user User to lookup\\n    /// @param roleKey Key of role\\n    function hasRole(address user, bytes32 roleKey) public view returns (bool) {\\n        if (IERC721Enumerable(getMembershipNFT()).balanceOf(user) < 1) {\\n            revert NotAuthorised(user);\\n        }\\n        return _roles()[roleKey].members[user];\\n    }\\n\\n    /// @dev Assigns and revokes roles to a given user.\\n    /// @param user User on which to assign/revoke roles.\\n    /// @param roleKeys Roles to assign/revoke.\\n    /// @param memberOf Assign (true) or revoke (false) corresponding roleKeys.\\n    function assignRoles(\\n        address user,\\n        bytes32[] calldata roleKeys,\\n        bool[] calldata memberOf\\n    ) external {\\n        _assertCallerIsAvatar();\\n        _assignRoles(user, roleKeys, memberOf);\\n    }\\n\\n    /// @notice Passes a transaction to the avatar assuming the specified role. Expects return data.\\n    /// @param to Destination address of module transaction\\n    /// @param value Ether value of module transaction\\n    /// @param data Data payload of module transaction\\n    /// @param operation Operation type of module transaction\\n    /// @param roleKey Identifier of the role to assume for this transaction\\n    /// @param shouldRevert Should the function revert on inner execution returning success false?\\n    function execWithRole(\\n        address to,\\n        uint256 value,\\n        bytes calldata data,\\n        Enum.Operation operation,\\n        bytes32 roleKey,\\n        bool shouldRevert\\n    ) external returns (bool success, bytes memory returnData) {\\n        (success, returnData) = _execTransactionWithRoleReturnData(\\n            to,\\n            value,\\n            data,\\n            operation,\\n            roleKey,\\n            shouldRevert\\n        );\\n        if (success) {\\n            emit ActionExecuted(msg.sender, roleKey, to, value, data);\\n        }\\n    }\\n\\n    /// @notice Execute calldata as avatar using the sudo role\\n    /// @param to Target address to call\\n    /// @param value Value, in wei, to send\\n    /// @param data Calldata\\n    /// @param operation Type of call\\n    function execSudo(\\n        address to,\\n        uint256 value,\\n        bytes calldata data,\\n        Enum.Operation operation,\\n        bool shouldRevert\\n    ) external returns (bool success, bytes memory returnData) {\\n        // We don't use `_authorize` here as RK_SUDO is a special role - we\\n        // simply check that the caller has the role and do no more checks.\\n        // Precondition 1: Caller must have a membership NFT\\n        _assertCallerIsMember();\\n        // Precondition 2: Caller has sudo role\\n        if (!_roles()[RK_SUDO].members[msg.sender]) {\\n            revert NotAuthorised(msg.sender);\\n        }\\n\\n        (success, returnData) = execAndReturnData(to, value, data, operation);\\n        if (shouldRevert && !success) {\\n            revert ExecSudoReverted(to, value, data, returnData);\\n        }\\n        if (success) {\\n            emit ActionExecuted(msg.sender, RK_SUDO, to, value, data);\\n        }\\n    }\\n\\n    ///////////////////////////////////////////////////////////////////////////\\n    /// MISC //////////////////////////////////////////////////////////////////\\n    ///////////////////////////////////////////////////////////////////////////\\n\\n    /// @notice Set the active TroopBoundToken\\n    /// @param tbt Address of the TroopBoundToken ERC-20 contract\\n    function setTroopBoundToken(address tbt) external {\\n        _assertCallerIsAvatar();\\n        address oldTBT;\\n        assembly {\\n            // Load old TBT to temp var\\n            oldTBT := sload(TBT_SLOT)\\n            // Store new TBT\\n            sstore(TBT_SLOT, shr(96, shl(96, tbt)))\\n        }\\n        // Allow the TBT admin to mint & burn\\n        _scopeTarget(RK_TBT_ADMIN, tbt);\\n        _allowFunction(\\n            RK_TBT_ADMIN,\\n            tbt,\\n            TroopBoundToken.mint.selector,\\n            ExecutionOptions.None\\n        );\\n        _allowFunction(\\n            RK_TBT_ADMIN,\\n            tbt,\\n            TroopBoundToken.burn.selector,\\n            ExecutionOptions.None\\n        );\\n        emit TroopBoundTokenUpdated(oldTBT, tbt);\\n    }\\n}\\n\"\r\n    },\r\n    \"vendor/zodiac-modifier-roles/packages/evm/contracts/adapters/Types.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.8.17 <0.9.0;\\n\\nimport \\\"@gnosis.pm/safe-contracts/contracts/common/Enum.sol\\\";\\n\\ninterface IMultiSend {\\n    function multiSend(bytes memory transactions) external payable;\\n}\\n\\nstruct UnwrappedTransaction {\\n    Enum.Operation operation;\\n    address to;\\n    uint256 value;\\n    // We wanna deal in calldata slices. We return location, let invoker slice\\n    uint256 dataLocation;\\n    uint256 dataSize;\\n}\\n\\ninterface ITransactionUnwrapper {\\n    function unwrap(\\n        address to,\\n        uint256 value,\\n        bytes calldata data,\\n        Enum.Operation operation\\n    ) external view returns (UnwrappedTransaction[] memory result);\\n}\\n\\ninterface ICustomCondition {\\n    function check(\\n        uint256 value,\\n        bytes calldata data,\\n        uint256 location,\\n        uint256 size,\\n        bytes12 extra\\n    ) external pure returns (bool success, bytes32 reason);\\n}\\n\"\r\n    },\r\n    \"vendor/zodiac-modifier-roles/packages/evm/contracts/AllowanceTracker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.8.17 <0.9.0;\\n\\nimport \\\"./Core.sol\\\";\\n\\n/**\\n * @title AllowanceTracker - a component of the Zodiac Roles Mod that is\\n * responsible for loading and calculating allowance balances. Persists\\n * consumptions back to storage.\\n * @author Crist\u00f3v\u00e3o Honorato - <cristovao.honorato@gnosis.io>\\n * @author Jan-Felix Schwarz  - <jan-felix.schwarz@gnosis.io>\\n */\\nabstract contract AllowanceTracker is Core {\\n    event ConsumeAllowance(\\n        bytes32 allowanceKey,\\n        uint128 consumed,\\n        uint128 newBalance\\n    );\\n\\n    function _accruedAllowance(\\n        Allowance memory allowance,\\n        uint256 timestamp\\n    ) internal pure override returns (uint128 balance, uint64 refillTimestamp) {\\n        if (\\n            allowance.refillInterval == 0 ||\\n            timestamp < allowance.refillTimestamp + allowance.refillInterval\\n        ) {\\n            return (allowance.balance, allowance.refillTimestamp);\\n        }\\n\\n        uint64 elapsedIntervals = (uint64(timestamp) -\\n            allowance.refillTimestamp) / allowance.refillInterval;\\n\\n        uint128 uncappedBalance = allowance.balance +\\n            allowance.refillAmount *\\n            elapsedIntervals;\\n\\n        balance = uncappedBalance < allowance.maxBalance\\n            ? uncappedBalance\\n            : allowance.maxBalance;\\n\\n        refillTimestamp =\\n            allowance.refillTimestamp +\\n            elapsedIntervals *\\n            allowance.refillInterval;\\n    }\\n\\n    /**\\n     * @dev Flushes the consumption of allowances back into storage, before\\n     * execution. This flush is not final\\n     * @param consumptions The array of consumption structs containing\\n     * information about allowances and consumed amounts.\\n     */\\n    function _flushPrepare(Consumption[] memory consumptions) internal {\\n        uint256 count = consumptions.length;\\n\\n        for (uint256 i; i < count; ) {\\n            Consumption memory consumption = consumptions[i];\\n\\n            bytes32 key = consumption.allowanceKey;\\n            uint128 consumed = consumption.consumed;\\n\\n            // Retrieve the allowance and calculate its current updated balance\\n            // and next refill timestamp.\\n            Allowance storage allowance = _allowances()[key];\\n            (uint128 balance, uint64 refillTimestamp) = _accruedAllowance(\\n                allowance,\\n                block.timestamp\\n            );\\n\\n            assert(balance == consumption.balance);\\n            assert(consumed <= balance);\\n            // Flush\\n            allowance.balance = balance - consumed;\\n            allowance.refillTimestamp = refillTimestamp;\\n\\n            // Emit an event to signal the total consumed amount.\\n            emit ConsumeAllowance(key, consumed, balance - consumed);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Finalizes or reverts the flush of allowances, after transaction\\n     * execution\\n     * @param consumptions The array of consumption structs containing\\n     * information about allowances and consumed amounts.\\n     * @param success a boolean that indicates whether transaction execution\\n     * was successful\\n     */\\n    function _flushCommit(\\n        Consumption[] memory consumptions,\\n        bool success\\n    ) internal {\\n        uint256 count = consumptions.length;\\n        for (uint256 i; i < count; ) {\\n            Consumption memory consumption = consumptions[i];\\n            bytes32 key = consumption.allowanceKey;\\n            if (success) {\\n                emit ConsumeAllowance(\\n                    key,\\n                    consumption.consumed,\\n                    consumption.balance - consumption.consumed\\n                );\\n            } else {\\n                _allowances()[key].balance = consumption.balance;\\n            }\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"vendor/zodiac-modifier-roles/packages/evm/contracts/Consumptions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.8.17 <0.9.0;\\n\\nimport \\\"./Types.sol\\\";\\n\\n/**\\n * @title Consumptions - a library that provides helper functions for dealing\\n * with collection of Consumptions.\\n * @author Crist\u00f3v\u00e3o Honorato - <cristovao.honorato@gnosis.io>\\n */\\nlibrary Consumptions {\\n    function clone(\\n        Consumption[] memory consumptions\\n    ) internal pure returns (Consumption[] memory result) {\\n        uint256 length = consumptions.length;\\n\\n        result = new Consumption[](length);\\n        for (uint256 i; i < length; ) {\\n            result[i].allowanceKey = consumptions[i].allowanceKey;\\n            result[i].balance = consumptions[i].balance;\\n            result[i].consumed = consumptions[i].consumed;\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function find(\\n        Consumption[] memory consumptions,\\n        bytes32 key\\n    ) internal pure returns (uint256, bool) {\\n        uint256 length = consumptions.length;\\n\\n        for (uint256 i; i < length; ) {\\n            if (consumptions[i].allowanceKey == key) {\\n                return (i, true);\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        return (0, false);\\n    }\\n\\n    function merge(\\n        Consumption[] memory c1,\\n        Consumption[] memory c2\\n    ) internal pure returns (Consumption[] memory result) {\\n        if (c1.length == 0) return c2;\\n        if (c2.length == 0) return c1;\\n\\n        result = new Consumption[](c1.length + c2.length);\\n\\n        uint256 length = c1.length;\\n\\n        for (uint256 i; i < length; ) {\\n            result[i].allowanceKey = c1[i].allowanceKey;\\n            result[i].balance = c1[i].balance;\\n            result[i].consumed = c1[i].consumed;\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        for (uint256 i; i < c2.length; ) {\\n            (uint256 index, bool found) = find(c1, c2[i].allowanceKey);\\n            if (found) {\\n                result[index].consumed += c2[i].consumed;\\n            } else {\\n                result[length].allowanceKey = c2[i].allowanceKey;\\n                result[length].balance = c2[i].balance;\\n                result[length].consumed = c2[i].consumed;\\n                length++;\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        if (length < result.length) {\\n            assembly {\\n                mstore(result, length)\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"vendor/zodiac-modifier-roles/packages/evm/contracts/Core.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.8.17 <0.9.0;\\n\\nimport \\\"./lib/Module.sol\\\";\\nimport \\\"./Types.sol\\\";\\n\\n/**\\n * @title Core is the base contract for the Zodiac Roles Mod, which defines\\n * the common abstract connection points between Builder, Loader, and Checker.\\n * @author Crist\u00f3v\u00e3o Honorato - <cristovao.honorato@gnosis.io>\\n */\\nabstract contract Core is Module {\\n    // keccak(\\\"gnosis.zodiac.roles.roles\\\")\\n    bytes32 private constant ROLES_SLOT =\\n        0x4d71564201ff6d4475aa56045ce2448417af9525d73788b52db36233610e1d32;\\n    // keccak(\\\"gnosis.zodiac.roles.allowances\\\")\\n    bytes32 private constant ALLOWANCES_SLOT =\\n        0xdc242980074bed062f271e68dacec762c3a359fda4c6b110703281a67b6863ba;\\n\\n    /// @notice Getter for unstructured storage:\\n    ///     mapping(bytes32 roleKey => Role)\\n    function _roles()\\n        internal\\n        pure\\n        returns (mapping(bytes32 => Role) storage roles_)\\n    {\\n        assembly {\\n            roles_.slot := ROLES_SLOT\\n        }\\n    }\\n\\n    /// @notice Getter for unstructured storage:\\n    ///     mapping(bytes32 roleKey => Allowance)\\n    function _allowances()\\n        internal\\n        pure\\n        returns (mapping(bytes32 => Allowance) storage allowances_)\\n    {\\n        assembly {\\n            allowances_.slot := ALLOWANCES_SLOT\\n        }\\n    }\\n\\n    /// @notice External (only) getter for allowances\\n    function allowances(\\n        bytes32 key\\n    ) external view returns (Allowance memory allowance) {\\n        return _allowances()[key];\\n    }\\n\\n    function _store(\\n        Role storage role,\\n        bytes32 key,\\n        ConditionFlat[] memory conditions,\\n        ExecutionOptions options\\n    ) internal virtual;\\n\\n    function _load(\\n        Role storage role,\\n        bytes32 key\\n    ) internal view virtual returns (Condition memory, Consumption[] memory);\\n\\n    function _accruedAllowance(\\n        Allowance memory allowance,\\n        uint256 timestamp\\n    ) internal pure virtual returns (uint128 balance, uint64 refillTimestamp);\\n\\n    function _key(\\n        address targetAddress,\\n        bytes4 selector\\n    ) internal pure returns (bytes32) {\\n        /*\\n         * Unoptimized version:\\n         * bytes32(abi.encodePacked(targetAddress, selector))\\n         */\\n        return bytes32(bytes20(targetAddress)) | (bytes32(selector) >> 160);\\n    }\\n}\\n\"\r\n    },\r\n    \"vendor/zodiac-modifier-roles/packages/evm/contracts/Decoder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.8.17 <0.9.0;\\n\\nimport \\\"./Topology.sol\\\";\\n\\n/**\\n * @title Decoder - a library that discovers parameter locations in calldata\\n * from a list of conditions.\\n * @author Crist\u00f3v\u00e3o Honorato - <cristovao.honorato@gnosis.io>\\n */\\nlibrary Decoder {\\n    error CalldataOutOfBounds();\\n\\n    /**\\n     * @dev Maps the location and size of parameters in the encoded transaction data.\\n     * @param data The encoded transaction data.\\n     * @param condition The condition of the parameters.\\n     * @return result The mapped location and size of parameters in the encoded transaction data.\\n     */\\n    function inspect(\\n        bytes calldata data,\\n        Condition memory condition\\n    ) internal pure returns (ParameterPayload memory result) {\\n        /*\\n         * In the parameter encoding area, there is a region called the head\\n         * that is divided into 32-byte chunks. Each parameter has its own\\n         * corresponding chunk in the head region:\\n         * - Static parameters are encoded inline.\\n         * - Dynamic parameters have an offset to the tail, which is the start\\n         *   of the actual encoding for the dynamic parameter. Note that the\\n         *   offset does not include the 4-byte function signature.\\\"\\n         *\\n         */\\n        Topology.TypeTree memory node = Topology.typeTree(condition);\\n        __block__(data, 4, node, node.children.length, false, result);\\n        result.location = 0;\\n        result.size = data.length;\\n    }\\n\\n    /**\\n     * @dev Walks through a parameter encoding tree and maps their location and\\n     * size within calldata.\\n     * @param data The encoded transaction data.\\n     * @param location The current offset within the calldata buffer.\\n     * @param node The current node being traversed within the parameter tree.\\n     * @param result The location and size of the parameter within calldata.\\n     */\\n    function _walk(\\n        bytes calldata data,\\n        uint256 location,\\n        Topology.TypeTree memory node,\\n        ParameterPayload memory result\\n    ) private pure {\\n        ParameterType paramType = node.paramType;\\n\\n        if (paramType == ParameterType.Static) {\\n            result.size = 32;\\n        } else if (paramType == ParameterType.Dynamic) {\\n            result.size = 32 + _ceil32(uint256(word(data, location)));\\n        } else if (paramType == ParameterType.Tuple) {\\n            __block__(\\n                data,\\n                location,\\n                node,\\n                node.children.length,\\n                false,\\n                result\\n            );\\n        } else if (paramType == ParameterType.Array) {\\n            __block__(\\n                data,\\n                location + 32,\\n                node,\\n                uint256(word(data, location)),\\n                true,\\n                result\\n            );\\n            result.size += 32;\\n        } else if (paramType == ParameterType.AbiEncoded) {\\n            __block__(\\n                data,\\n                location + 32 + 4,\\n                node,\\n                node.children.length,\\n                false,\\n                result\\n            );\\n            result.size = 32 + _ceil32(uint256(word(data, location)));\\n        }\\n        result.location = location;\\n    }\\n\\n    /**\\n     * @dev Recursively walk through the TypeTree to decode a block of parameters.\\n     * @param data The encoded transaction data.\\n     * @param location The current location of the parameter block being processed.\\n     * @param node The current TypeTree node being processed.\\n     * @param length The number of parts in the block.\\n     * @param template whether first child is type descriptor for all parts.\\n     * @param result The decoded ParameterPayload.\\n     */\\n    function __block__(\\n        bytes calldata data,\\n        uint256 location,\\n        Topology.TypeTree memory node,\\n        uint256 length,\\n        bool template,\\n        ParameterPayload memory result\\n    ) private pure {\\n        result.children = new ParameterPayload[](length);\\n        bool isInline;\\n        if (template) isInline = Topology.isInline(node.children[0]);\\n\\n        uint256 offset;\\n        for (uint256 i; i < length; ) {\\n            if (!template) isInline = Topology.isInline(node.children[i]);\\n\\n            _walk(\\n                data,\\n                _locationInBlock(data, location, offset, isInline),\\n                node.children[template ? 0 : i],\\n                result.children[i]\\n            );\\n\\n            uint256 childSize = result.children[i].size;\\n            result.size += isInline ? childSize : childSize + 32;\\n            offset += isInline ? childSize : 32;\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the location of a block part, which may be located inline\\n     * within the block - at the HEAD - or at an offset relative to the start\\n     * of the block - at the TAIL.\\n     *\\n     * @param data The encoded transaction data.\\n     * @param location The location of the block within the calldata buffer.\\n     * @param offset The offset of the block part, relative to the start of the block.\\n     * @param isInline Whether the block part is located inline within the block.\\n     *\\n     * @return The location of the block part within the calldata buffer.\\n     */\\n    function _locationInBlock(\\n        bytes calldata data,\\n        uint256 location,\\n        uint256 offset,\\n        bool isInline\\n    ) private pure returns (uint256) {\\n        uint256 headLocation = location + offset;\\n        if (isInline) {\\n            return headLocation;\\n        } else {\\n            return location + uint256(word(data, headLocation));\\n        }\\n    }\\n\\n    /**\\n     * @dev Plucks a slice of bytes from calldata.\\n     * @param data The calldata to pluck the slice from.\\n     * @param location The starting location of the slice.\\n     * @param size The size of the slice.\\n     * @return A slice of bytes from calldata.\\n     */\\n    function pluck(\\n        bytes calldata data,\\n        uint256 location,\\n        uint256 size\\n    ) internal pure returns (bytes calldata) {\\n        return data[location:location + size];\\n    }\\n\\n    /**\\n     * @dev Loads a word from calldata.\\n     * @param data The calldata to load the word from.\\n     * @param location The starting location of the slice.\\n     * @return result 32 byte word from calldata.\\n     */\\n    function word(\\n        bytes calldata data,\\n        uint256 location\\n    ) internal pure returns (bytes32 result) {\\n        if (location + 32 > data.length) {\\n            revert CalldataOutOfBounds();\\n        }\\n        assembly {\\n            result := calldataload(add(data.offset, location))\\n        }\\n    }\\n\\n    function _ceil32(uint256 size) private pure returns (uint256) {\\n        // pad size. Source: http://www.cs.nott.ac.uk/~psarb2/G51MPC/slides/NumberLogic.pdf\\n        return ((size + 32 - 1) / 32) * 32;\\n    }\\n}\\n\"\r\n    },\r\n    \"vendor/zodiac-modifier-roles/packages/evm/contracts/Integrity.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.8.17 <0.9.0;\\n\\nimport \\\"./Topology.sol\\\";\\n\\n/**\\n * @title Integrity, A library that validates condition integrity, and\\n * adherence to the expected input structure and rules.\\n * @author Crist\u00f3v\u00e3o Honorato - <cristovao.honorato@gnosis.io>\\n */\\nlibrary Integrity {\\n    error UnsuitableRootNode();\\n\\n    error NotBFS();\\n\\n    error UnsuitableParameterType(uint256 index);\\n\\n    error UnsuitableCompValue(uint256 index);\\n\\n    error UnsupportedOperator(uint256 index);\\n\\n    error UnsuitableParent(uint256 index);\\n\\n    error UnsuitableChildCount(uint256 index);\\n\\n    error UnsuitableChildTypeTree(uint256 index);\\n\\n    function enforce(ConditionFlat[] memory conditions) external pure {\\n        _root(conditions);\\n        for (uint256 i = 0; i < conditions.length; ++i) {\\n            _node(conditions[i], i);\\n        }\\n        _tree(conditions);\\n    }\\n\\n    function _root(ConditionFlat[] memory conditions) private pure {\\n        uint256 count;\\n\\n        for (uint256 i; i < conditions.length; ++i) {\\n            if (conditions[i].parent == i) ++count;\\n        }\\n        if (count != 1 || conditions[0].parent != 0) {\\n            revert UnsuitableRootNode();\\n        }\\n    }\\n\\n    function _node(ConditionFlat memory condition, uint256 index) private pure {\\n        Operator operator = condition.operator;\\n        ParameterType paramType = condition.paramType;\\n        bytes memory compValue = condition.compValue;\\n        if (operator == Operator.Pass) {\\n            if (condition.compValue.length != 0) {\\n                revert UnsuitableCompValue(index);\\n            }\\n        } else if (operator >= Operator.And && operator <= Operator.Nor) {\\n            if (paramType != ParameterType.None) {\\n                revert UnsuitableParameterType(index);\\n            }\\n            if (condition.compValue.length != 0) {\\n                revert UnsuitableCompValue(index);\\n            }\\n        } else if (operator == Operator.Matches) {\\n            if (\\n                paramType != ParameterType.Tuple &&\\n                paramType != ParameterType.Array &&\\n                paramType != ParameterType.AbiEncoded\\n            ) {\\n                revert UnsuitableParameterType(index);\\n            }\\n            if (compValue.length != 0) {\\n                revert UnsuitableCompValue(index);\\n            }\\n        } else if (\\n            operator == Operator.ArraySome ||\\n            operator == Operator.ArrayEvery ||\\n            operator == Operator.ArraySubset\\n        ) {\\n            if (paramType != ParameterType.Array) {\\n                revert UnsuitableParameterType(index);\\n            }\\n            if (compValue.length != 0) {\\n                revert UnsuitableCompValue(index);\\n            }\\n        } else if (operator == Operator.EqualToAvatar) {\\n            if (paramType != ParameterType.Static) {\\n                revert UnsuitableParameterType(index);\\n            }\\n            if (compValue.length != 0) {\\n                revert UnsuitableCompValue(index);\\n            }\\n        } else if (operator == Operator.EqualTo) {\\n            if (\\n                paramType != ParameterType.Static &&\\n                paramType != ParameterType.Dynamic &&\\n                paramType != ParameterType.Tuple &&\\n                paramType != ParameterType.Array\\n            ) {\\n                revert UnsuitableParameterType(index);\\n            }\\n            if (compValue.length == 0 || compValue.length % 32 != 0) {\\n                revert UnsuitableCompValue(index);\\n            }\\n        } else if (\\n            operator == Operator.GreaterThan ||\\n            operator == Operator.LessThan ||\\n            operator == Operator.SignedIntGreaterThan ||\\n            operator == Operator.SignedIntLessThan\\n        ) {\\n            if (paramType != ParameterType.Static) {\\n                revert UnsuitableParameterType(index);\\n            }\\n            if (compValue.length != 32) {\\n                revert UnsuitableCompValue(index);\\n            }\\n        } else if (operator == Operator.Bitmask) {\\n            if (\\n                paramType != ParameterType.Static &&\\n                paramType != ParameterType.Dynamic\\n            ) {\\n                revert UnsuitableParameterType(index);\\n            }\\n            if (compValue.length != 32) {\\n                revert UnsuitableCompValue(index);\\n            }\\n        } else if (operator == Operator.Custom) {\\n            if (compValue.length != 32) {\\n                revert UnsuitableCompValue(index);\\n            }\\n        } else if (operator == Operator.WithinAllowance) {\\n            if (paramType != ParameterType.Static) {\\n                revert UnsuitableParameterType(index);\\n            }\\n            if (compValue.length != 32) {\\n                revert UnsuitableCompValue(index);\\n            }\\n        } else if (\\n            operator == Operator.EtherWithinAllowance ||\\n            operator == Operator.CallWithinAllowance\\n        ) {\\n            if (paramType != ParameterType.None) {\\n                revert UnsuitableParameterType(index);\\n            }\\n            if (compValue.length != 32) {\\n                revert UnsuitableCompValue(index);\\n            }\\n        } else {\\n            revert UnsupportedOperator(index);\\n        }\\n    }\\n\\n    function _tree(ConditionFlat[] memory conditions) private pure {\\n        uint256 length = conditions.length;\\n        // check BFS\\n        for (uint256 i = 1; i < length; ++i) {\\n            if (conditions[i - 1].parent > conditions[i].parent) {\\n                revert NotBFS();\\n            }\\n        }\\n\\n        for (uint256 i = 0; i < length; ++i) {\\n            if (\\n                (conditions[i].operator == Operator.EtherWithinAllowance ||\\n                    conditions[i].operator == Operator.CallWithinAllowance) &&\\n                conditions[conditions[i].parent].paramType !=\\n                ParameterType.AbiEncoded\\n            ) {\\n                revert UnsuitableParent(i);\\n            }\\n        }\\n\\n        Topology.Bounds[] memory childrenBounds = Topology.childrenBounds(\\n            conditions\\n        );\\n\\n        for (uint256 i = 0; i < conditions.length; i++) {\\n            ConditionFlat memory condition = conditions[i];\\n            Topology.Bounds memory childBounds = childrenBounds[i];\\n\\n            if (condition.paramType == ParameterType.None) {\\n                if (\\n                    (condition.operator == Operator.EtherWithinAllowance ||\\n                        condition.operator == Operator.CallWithinAllowance) &&\\n                    childBounds.length != 0\\n                ) {\\n                    revert UnsuitableChildCount(i);\\n                }\\n                if (\\n                    (condition.operator >= Operator.And &&\\n                        condition.operator <= Operator.Nor)\\n                ) {\\n                    if (childBounds.length == 0) {\\n                        revert UnsuitableChildCount(i);\\n                    }\\n                }\\n            } else if (\\n                condition.paramType == ParameterType.Static ||\\n                condition.paramType == ParameterType.Dynamic\\n            ) {\\n                if (childBounds.length != 0) {\\n                    revert UnsuitableChildCount(i);\\n                }\\n            } else if (\\n                condition.paramType == ParameterType.Tuple ||\\n                condition.paramType == ParameterType.AbiEncoded\\n            ) {\\n                if (childBounds.length == 0) {\\n                    revert UnsuitableChildCount(i);\\n                }\\n            } else {\\n                assert(condition.paramType == ParameterType.Array);\\n\\n                if (childBounds.length == 0) {\\n                    revert UnsuitableChildCount(i);\\n                }\\n\\n                if (\\n                    (condition.operator == Operator.ArraySome ||\\n                        condition.operator == Operator.ArrayEvery) &&\\n                    childBounds.length != 1\\n                ) {\\n                    revert UnsuitableChildCount(i);\\n                } else if (\\n                    condition.operator == Operator.ArraySubset &&\\n                    childBounds.length > 256\\n                ) {\\n                    revert UnsuitableChildCount(i);\\n                }\\n            }\\n        }\\n\\n        for (uint256 i = 0; i < conditions.length; i++) {\\n            ConditionFlat memory condition = conditions[i];\\n            if (\\n                ((condition.operator >= Operator.And &&\\n                    condition.operator <= Operator.Nor) ||\\n                    condition.paramType == ParameterType.Array) &&\\n                childrenBounds[i].length > 1\\n            ) {\\n                compatiblechildTypeTree(conditions, i, childrenBounds);\\n            }\\n        }\\n\\n        Topology.TypeTree memory typeTree = Topology.typeTree(\\n            conditions,\\n            0,\\n            childrenBounds\\n        );\\n\\n        if (typeTree.paramType != ParameterType.AbiEncoded) {\\n            revert UnsuitableRootNode();\\n        }\\n    }\\n\\n    function compatiblechildTypeTree(\\n        ConditionFlat[] memory conditions,\\n        uint256 index,\\n        Topology.Bounds[] memory childrenBounds\\n    ) private pure {\\n        uint256 start = childrenBounds[index].start;\\n        uint256 end = childrenBounds[index].end;\\n\\n        bytes32 id = typeTreeId(\\n            Topology.typeTree(conditions, start, childrenBounds)\\n        );\\n        for (uint256 j = start + 1; j < end; ++j) {\\n            if (\\n                id !=\\n                typeTreeId(Topology.typeTree(conditions, j, childrenBounds))\\n            ) {\\n                revert UnsuitableChildTypeTree(index);\\n            }\\n        }\\n    }\\n\\n    function typeTreeId(\\n        Topology.TypeTree memory node\\n    ) private pure returns (bytes32) {\\n        uint256 childCount = node.children.length;\\n        if (childCount > 0) {\\n            bytes32[] memory ids = new bytes32[](node.children.length);\\n            for (uint256 i = 0; i < childCount; ++i) {\\n                ids[i] = typeTreeId(node.children[i]);\\n            }\\n\\n            return keccak256(abi.encodePacked(node.paramType, \\\"-\\\", ids));\\n        } else {\\n            return bytes32(uint256(node.paramType));\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"vendor/zodiac-modifier-roles/packages/evm/contracts/lib/Guardable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"@gnosis.pm/safe-contracts/contracts/common/Enum.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@gnosis.pm/zodiac/contracts/guard/BaseGuard.sol\\\";\\n\\n/// @title Guardable - A contract that manages fallback calls made to this contract\\ncontract Guardable {\\n    /// @dev Guard\\n    /// keccak(\\\"gnosis.zodiac.guardable.guard\\\")\\n    bytes32 internal constant GUARD_SLOT =\\n        0x56bad610fa8c88084970c138f43b8d2788b1b7ea55c6f57c2d6ddc4eca2fc215;\\n\\n    event ChangedGuard(address guard);\\n\\n    /// `guard` does not implement IERC165.\\n    error NotIERC165Compliant(address guard);\\n\\n    /// @dev Set a guard that checks transactions before execution.\\n    /// @param guard The address of the guard to be used or the 0 address to disable the guard.\\n    function setGuard(address guard) internal {\\n        if (guard != address(0)) {\\n            if (!BaseGuard(guard).supportsInterface(type(IGuard).interfaceId))\\n                revert NotIERC165Compliant(guard);\\n        }\\n        assembly {\\n            sstore(GUARD_SLOT, guard)\\n        }\\n        emit ChangedGuard(guard);\\n    }\\n\\n    function getGuard() public view returns (address guard) {\\n        assembly {\\n            guard := sload(GUARD_SLOT)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"vendor/zodiac-modifier-roles/packages/evm/contracts/lib/Module.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"@gnosis.pm/zodiac/contracts/interfaces/IAvatar.sol\\\";\\nimport \\\"./Guardable.sol\\\";\\n\\n/// @title Module Interface - A contract that can pass messages to a Module Manager contract if enabled by that contract.\\n/// @notice Modified from Zodiac\\nabstract contract Module is Guardable {\\n    /// @dev Address that will ultimately execute function calls.\\n    /// keccak(\\\"gnosis.zodiac.module.avatar\\\")\\n    bytes32 internal constant AVATAR_SLOT =\\n        0x05ce79daf8a182ab61206fba3b76a53517b376d81c3b7bc1aadff2ca8a53e325;\\n\\n    /// @dev Emitted each time the avatar is set.\\n    event AvatarSet(address indexed previousAvatar, address indexed newAvatar);\\n\\n    /// @dev Sets the avatar to a new avatar (`newAvatar`).\\n    /// @notice Can only be called by the current owner.\\n    function setAvatar(address avatar) internal {\\n        address previousAvatar;\\n        assembly {\\n            previousAvatar := sload(AVATAR_SLOT)\\n            sstore(AVATAR_SLOT, avatar)\\n        }\\n        emit AvatarSet(previousAvatar, avatar);\\n    }\\n\\n    /// @notice Get the set avatar\\n    function getAvatar() public view returns (address avatar) {\\n        assembly {\\n            avatar := sload(AVATAR_SLOT)\\n        }\\n    }\\n\\n    /// @dev Passes a transaction to be executed by the avatar.\\n    /// @notice Can only be called by this contract.\\n    /// @param to Destination address of module transaction.\\n    /// @param value Ether value of module transaction.\\n    /// @param data Data payload of module transaction.\\n    /// @param operation Operation type of module transaction: 0 == call, 1 == delegate call.\\n    function exec(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation\\n    ) internal returns (bool success) {\\n        address currentGuard = getGuard();\\n        if (currentGuard != address(0)) {\\n            IGuard(currentGuard).checkTransaction(\\n                /// Transaction info used by module transactions.\\n                to,\\n                value,\\n                data,\\n                operation,\\n                /// Zero out the redundant transaction information only used for Safe multisig transctions.\\n                0,\\n                0,\\n                0,\\n                address(0),\\n                payable(0),\\n                bytes(\\\"0x\\\"),\\n                msg.sender\\n            );\\n            success = IAvatar(getAvatar()).execTransactionFromModule(\\n                to,\\n                value,\\n                data,\\n                operation\\n            );\\n            IGuard(currentGuard).checkAfterExecution(bytes32(\\\"0x\\\"), success);\\n        } else {\\n            success = IAvatar(getAvatar()).execTransactionFromModule(\\n                to,\\n                value,\\n                data,\\n                operation\\n            );\\n        }\\n        return success;\\n    }\\n\\n    /// @dev Passes a transaction to be executed by the target and returns data.\\n    /// @notice Can only be called by this contract.\\n    /// @param to Destination address of module transaction.\\n    /// @param value Ether value of module transaction.\\n    /// @param data Data payload of module transaction.\\n    /// @param operation Operation type of module transaction: 0 == call, 1 == delegate call.\\n    function execAndReturnData(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation\\n    ) internal returns (bool success, bytes memory returnData) {\\n        address currentGuard = getGuard();\\n        if (currentGuard != address(0)) {\\n            IGuard(currentGuard).checkTransaction(\\n                /// Transaction info used by module transactions.\\n                to,\\n                value,\\n                data,\\n                operation,\\n                /// Zero out the redundant transaction information only used for Safe multisig transctions.\\n                0,\\n                0,\\n                0,\\n                address(0),\\n                payable(0),\\n                bytes(\\\"0x\\\"),\\n                msg.sender\\n            );\\n            (success, returnData) = IAvatar(getAvatar())\\n                .execTransactionFromModuleReturnData(\\n                    to,\\n                    value,\\n                    data,\\n                    operation\\n                );\\n            IGuard(currentGuard).checkAfterExecution(bytes32(\\\"0x\\\"), success);\\n        } else {\\n            (success, returnData) = IAvatar(getAvatar())\\n                .execTransactionFromModuleReturnData(\\n                    to,\\n                    value,\\n                    data,\\n                    operation\\n                );\\n        }\\n        return (success, returnData);\\n    }\\n}\\n\"\r\n    },\r\n    \"vendor/zodiac-modifier-roles/packages/evm/contracts/packers/BufferPacker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.8.17 <0.9.0;\\n\\nimport \\\"../Types.sol\\\";\\n\\n/**\\n * @title BufferPacker a library that provides packing and unpacking functions\\n * for conditions. It allows packing externally provided ConditionsFlat[] into\\n * a storage-optimized buffer, and later unpack it into memory.\\n * @author Crist\u00f3v\u00e3o Honorato - <cristovao.honorato@gnosis.io>\\n */\\nlibrary BufferPacker {\\n    // HEADER (stored as a single word in storage)\\n    // 2   bytes -> count (Condition count)\\n    // 1   bytes -> options (ExecutionOptions)\\n    // 1   bytes -> isWildcarded\\n    // 8   bytes -> unused\\n    // 20  bytes -> pointer (address containining packed conditions)\\n    uint256 private constant OFFSET_COUNT = 240;\\n    uint256 private constant OFFSET_OPTIONS = 224;\\n    uint256 private constant OFFSET_IS_WILDCARDED = 216;\\n    uint256 private constant MASK_COUNT = 0xffff << OFFSET_COUNT;\\n    uint256 private constant MASK_OPTIONS = 0xff << OFFSET_OPTIONS;\\n    uint256 private constant MASK_IS_WILDCARDED = 0x1 << OFFSET_IS_WILDCARDED;\\n    // CONDITION (stored as runtimeBytecode at pointer address kept in header)\\n    // 8    bits -> parent\\n    // 3    bits -> type\\n    // 5    bits -> operator\\n    uint256 private constant BYTES_PER_CONDITION = 2;\\n    uint16 private constant OFFSET_PARENT = 8;\\n    uint16 private constant OFFSET_PARAM_TYPE = 5;\\n    uint16 private constant OFFSET_OPERATOR = 0;\\n    uint16 private constant MASK_PARENT = uint16(0xff << OFFSET_PARENT);\\n    uint16 private constant MASK_PARAM_TYPE = uint16(0x07 << OFFSET_PARAM_TYPE);\\n    uint16 private constant MASK_OPERATOR = uint16(0x1f << OFFSET_OPERATOR);\\n\\n    function packedSize(\\n        ConditionFlat[] memory conditions\\n    ) internal pure returns (uint256 result) {\\n        uint256 count = conditions.length;\\n\\n        result = count * BYTES_PER_CONDITION;\\n        for (uint256 i; i < count; ++i) {\\n            if (conditions[i].operator >= Operator.EqualTo) {\\n                result += 32;\\n            }\\n        }\\n    }\\n\\n    function packHeader(\\n        uint256 count,\\n        ExecutionOptions options,\\n        address pointer\\n    ) internal pure returns (bytes32) {\\n        return\\n            bytes32(count << OFFSET_COUNT) |\\n            (bytes32(uint256(options)) << OFFSET_OPTIONS) |\\n            bytes32(uint256(uint160(pointer)));\\n    }\\n\\n    function packHeaderAsWildcarded(\\n        ExecutionOptions options\\n    ) internal pure returns (bytes32) {\\n        return\\n            bytes32(uint256(options) << OFFSET_OPTIONS) |\\n            bytes32(MASK_IS_WILDCARDED);\\n    }\\n\\n    function unpackHeader(\\n        bytes32 header\\n    ) internal pure returns (uint256 count, address pointer) {\\n        count = (uint256(header) & MASK_COUNT) >> OFFSET_COUNT;\\n        pointer = address(bytes20(uint160(uint256(header))));\\n    }\\n\\n    function unpackOptions(\\n        bytes32 header\\n    ) internal pure returns (bool isWildcarded, ExecutionOptions options) {\\n        isWildcarded = uint256(header) & MASK_IS_WILDCARDED != 0;\\n        options = ExecutionOptions(\\n            (uint256(header) & MASK_OPTIONS) >> OFFSET_OPTIONS\\n        );\\n    }\\n\\n    function packCondition(\\n        bytes memory buffer,\\n        uint256 index,\\n        ConditionFlat memory condition\\n    ) internal pure {\\n        uint256 offset = index * BYTES_PER_CONDITION;\\n        buffer[offset] = bytes1(condition.parent);\\n        buffer[offset + 1] = bytes1(\\n            (uint8(condition.paramType) << uint8(OFFSET_PARAM_TYPE)) |\\n                uint8(condition.operator)\\n        );\\n    }\\n\\n    function packCompValue(\\n        bytes memory buffer,\\n        uint256 offset,\\n        ConditionFlat memory condition\\n    ) internal pure {\\n        bytes32 word = condition.operator == Operator.EqualTo\\n            ? keccak256(condition.compValue)\\n            : bytes32(condition.compValue);\\n\\n        assembly {\\n            mstore(add(buffer, offset), word)\\n        }\\n    }\\n\\n    function unpackBody(\\n        bytes memory buffer,\\n        uint256 count\\n    )\\n        internal\\n        pure\\n        returns (ConditionFlat[] memory result, bytes32[] memory compValues)\\n    {\\n        result = new ConditionFlat[](count);\\n        compValues = new bytes32[](count);\\n\\n        bytes32 word;\\n        uint256 offset = 32;\\n        uint256 compValueOffset = 32 + count * BYTES_PER_CONDITION;\\n\\n        for (uint256 i; i < count; ) {\\n            assembly {\\n                word := mload(add(buffer, offset))\\n            }\\n            offset += BYTES_PER_CONDITION;\\n\\n            uint16 bits = uint16(bytes2(word));\\n            ConditionFlat memory condition = result[i];\\n            condition.parent = uint8((bits & MASK_PARENT) >> OFFSET_PARENT);\\n            condition.paramType = ParameterType(\\n                (bits & MASK_PARAM_TYPE) >> OFFSET_PARAM_TYPE\\n            );\\n            condition.operator = Operator(bits & MASK_OPERATOR);\\n\\n            if (condition.operator >= Operator.EqualTo) {\\n                assembly {\\n                    word := mload(add(buffer, compValueOffset))\\n                }\\n                compValueOffset += 32;\\n                compValues[i] = word;\\n            }\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"vendor/zodiac-modifier-roles/packages/evm/contracts/packers/Packer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.8.17 <0.9.0;\\n\\nimport \\\"./BufferPacker.sol\\\";\\n\\n/**\\n * @title Packer - a library that coordinates the process of packing\\n * conditionsFlat into a storage optimized buffer.\\n * @author Crist\u00f3v\u00e3o Honorato - <cristovao.honorato@gnosis.io>\\n */\\nlibrary Packer {\\n    function pack(\\n        ConditionFlat[] memory conditionsFlat\\n    ) external pure returns (bytes memory buffer) {\\n        _removeExtraneousOffsets(conditionsFlat);\\n\\n        buffer = new bytes(BufferPacker.packedSize(conditionsFlat));\\n\\n        uint256 count = conditionsFlat.length;\\n        uint256 offset = 32 + count * 2;\\n        for (uint256 i; i < count; ++i) {\\n            BufferPacker.packCondition(buffer, i, conditionsFlat[i]);\\n            if (conditionsFlat[i].operator >= Operator.EqualTo) {\\n                BufferPacker.packCompValue(buffer, offset, conditionsFlat[i]);\\n                offset += 32;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This function removes unnecessary offsets from compValue fields of\\n     * the `conditions` array. Its purpose is to ensure a consistent API where\\n     * every `compValue` provided for use in `Operations.EqualsTo` is obtained\\n     * by calling `abi.encode` directly.\\n     *\\n     * By removing the leading extraneous offsets this function makes\\n     * abi.encode(...) match the output produced by Decoder inspection.\\n     * Without it, the encoded fields would need to be patched externally\\n     * depending on whether the payload is fully encoded inline or not.\\n     *\\n     * @param conditionsFlat Array of ConditionFlat structs to remove extraneous\\n     * offsets from\\n     */\\n    function _removeExtraneousOffsets(\\n        ConditionFlat[] memory conditionsFlat\\n    ) private pure {\\n        uint256 count = conditionsFlat.length;\\n        for (uint256 i; i < count; ++i) {\\n            if (\\n                conditionsFlat[i].operator == Operator.EqualTo &&\\n                !_isInline(conditionsFlat, i)\\n            ) {\\n                bytes memory compValue = conditionsFlat[i].compValue;\\n                uint256 length = compValue.length;\\n                assembly {\\n                    compValue := add(compValue, 32)\\n                    mstore(compValue, sub(length, 32))\\n                }\\n                conditionsFlat[i].compValue = compValue;\\n            }\\n        }\\n    }\\n\\n    function _isInline(\\n        ConditionFlat[] memory conditions,\\n        uint256 index\\n    ) private pure returns (bool) {\\n        ParameterType paramType = conditions[index].paramType;\\n        if (paramType == ParameterType.Static) {\\n            return true;\\n        } else if (\\n            paramType == ParameterType.Dynamic ||\\n            paramType == ParameterType.Array ||\\n            paramType == ParameterType.AbiEncoded\\n        ) {\\n            return false;\\n        } else {\\n            uint256 length = conditions.length;\\n\\n            for (uint256 j = index + 1; j < length; ++j) {\\n                uint8 parent = conditions[j].parent;\\n                if (parent < index) {\\n                    continue;\\n                }\\n\\n                if (parent > index) {\\n                    break;\\n                }\\n\\n                if (!_isInline(conditions, j)) {\\n                    return false;\\n                }\\n            }\\n            return true;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"vendor/zodiac-modifier-roles/packages/evm/contracts/Periphery.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.8.17 <0.9.0;\\n\\nimport \\\"./adapters/Types.sol\\\";\\n\\n/**\\n * @title Periphery - a coordinating component that facilitates plug-and-play\\n * functionality for the Zodiac Roles Mod through the use of adapters.\\n * @author Crist\u00f3v\u00e3o Honorato - <cristovao.honorato@gnosis.io>\\n */\\nabstract contract Periphery {\\n    event SetUnwrapAdapter(\\n        address to,\\n        bytes4 selector,\\n        ITransactionUnwrapper adapter\\n    );\\n\\n    /// keccak(\\\"gnosis.zodiac.roles.periphery.unwrappers\\\")\\n    bytes32 internal constant UNWRAPPERS_SLOT =\\n        0x48e11d58bcccb65f4d3198eb47b87f8ac1bd3c553f89457788c0d4b0eab35961;\\n\\n    function _unwrappers()\\n        internal\\n        pure\\n        returns (mapping(bytes32 => ITransactionUnwrapper) storage unwrappers_)\\n    {\\n        assembly {\\n            unwrappers_.slot := UNWRAPPERS_SLOT\\n        }\\n    }\\n\\n    function unwrappers(\\n        bytes32 target\\n    ) public view returns (ITransactionUnwrapper) {\\n        return _unwrappers()[target];\\n    }\\n\\n    function _setTransactionUnwrapper(\\n        address to,\\n        bytes4 selector,\\n        ITransactionUnwrapper adapter\\n    ) internal {\\n        _unwrappers()[\\n            bytes32(bytes20(to)) | (bytes32(selector) >> 160)\\n        ] = adapter;\\n        emit SetUnwrapAdapter(to, selector, adapter);\\n    }\\n\\n    function getTransactionUnwrapper(\\n        address to,\\n        bytes4 selector\\n    ) internal view returns (ITransactionUnwrapper) {\\n        return _unwrappers()[bytes32(bytes20(to)) | (bytes32(selector) >> 160)];\\n    }\\n}\\n\"\r\n    },\r\n    \"vendor/zodiac-modifier-roles/packages/evm/contracts/PermissionBuilder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.8.17 <0.9.0;\\n\\nimport \\\"./Core.sol\\\";\\nimport \\\"./Integrity.sol\\\";\\n\\nimport \\\"./packers/BufferPacker.sol\\\";\\n\\n/**\\n * @title PermissionBuilder - a component of the Zodiac Roles Mod that is\\n * responsible for constructing, managing, granting, and revoking all types\\n * of permission data.\\n * @author Crist\u00f3v\u00e3o Honorato - <cristovao.honorato@gnosis.io>\\n * @author Jan-Felix Schwarz  - <jan-felix.schwarz@gnosis.io>\\n */\\nabstract contract PermissionBuilder is Core {\\n    error UnsuitableMaxBalanceForAllowance();\\n    event AllowTarget(\\n        bytes32 roleKey,\\n        address targetAddress,\\n        ExecutionOptions options\\n    );\\n    event RevokeTarget(bytes32 roleKey, address targetAddress);\\n    event ScopeTarget(bytes32 roleKey, address targetAddress);\\n\\n    event AllowFunction(\\n        bytes32 roleKey,\\n        address targetAddress,\\n        bytes4 selector,\\n        ExecutionOptions options\\n    );\\n    event RevokeFunction(\\n        bytes32 roleKey,\\n        address targetAddress,\\n        bytes4 selector\\n    );\\n    event ScopeFunction(\\n        bytes32 roleKey,\\n        address targetAddress,\\n        bytes4 selector,\\n        ConditionFlat[] conditions,\\n        ExecutionOptions options\\n    );\\n\\n    event SetAllowance(\\n        bytes32 allowanceKey,\\n        uint128 balance,\\n        uint128 maxBalance,\\n        uint128 refillAmount,\\n        uint64 refillInterval,\\n        uint64 refillTimestamp\\n    );\\n\\n    /// @dev Allows transactions to a target address.\\n    /// @param roleKey identifier of the role to be modified.\\n    /// @param targetAddress Destination address of transaction.\\n    /// @param options designates if a transaction can send ether and/or delegatecall to target.\\n    function _allowTarget(\\n        bytes32 roleKey,\\n        address targetAddress,\\n        ExecutionOptions options\\n    ) internal {\\n        _roles()[roleKey].targets[targetAddress] = TargetAddress({\\n            clearance: Clearance.Target,\\n            options: options\\n        });\\n        emit AllowTarget(roleKey, targetAddress, options);\\n    }\\n\\n    /// @dev Removes transactions to a target address.\\n    /// @param roleKey identifier of the role to be modified.\\n    /// @param targetAddress Destination address of transaction.\\n    function _revokeTarget(bytes32 roleKey, address targetAddress) internal {\\n        _roles()[roleKey].targets[targetAddress] = TargetAddress({\\n            clearance: Clearance.None,\\n            options: ExecutionOptions.None\\n        });\\n        emit RevokeTarget(roleKey, targetAddress);\\n    }\\n\\n    /// @dev Designates only specific functions can be called.\\n    /// @param roleKey identifier of the role to be modified.\\n    /// @param targetAddress Destination address of transaction.\\n    function _scopeTarget(bytes32 roleKey, address targetAddress) internal {\\n        _roles()[roleKey].targets[targetAddress] = TargetAddress({\\n            clearance: Clearance.Function,\\n            options: ExecutionOptions.None\\n        });\\n        emit ScopeTarget(roleKey, targetAddress);\\n    }\\n\\n    /// @dev Specifies the functions that can be called.\\n    /// @param roleKey identifier of the role to be modified.\\n    /// @param targetAddress Destination address of transaction.\\n    /// @param selector 4 byte function selector.\\n    /// @param options designates if a transaction can send ether and/or delegatecall to target.\\n    function _allowFunction(\\n        bytes32 roleKey,\\n        address targetAddress,\\n        bytes4 selector,\\n        ExecutionOptions options\\n    ) internal {\\n        _roles()[roleKey].scopeConfig[\\n            _key(targetAddress, selector)\\n        ] = BufferPacker.packHeaderAsWildcarded(options);\\n\\n        emit AllowFunction(roleKey, targetAddress, selector, options);\\n    }\\n\\n    /// @dev Removes the functions that can be called.\\n    /// @param roleKey identifier of the role to be modified.\\n    /// @param targetAddress Destination address of transaction.\\n    /// @param selector 4 byte function selector.\\n    function _revokeFunction(\\n        bytes32 roleKey,\\n        address targetAddress,\\n        bytes4 selector\\n    ) internal {\\n        delete _roles()[roleKey].scopeConfig[_key(targetAddress, selector)];\\n        emit RevokeFunction(roleKey, targetAddress, selector);\\n    }\\n\\n    /// @dev Sets conditions to enforce on calls to the specified target.\\n    /// @param roleKey identifier of the role to be modified.\\n    /// @param targetAddress Destination address of transaction.\\n    /// @param selector 4 byte function selector.\\n    /// @param conditions The conditions to enforce.\\n    /// @param options designates if a transaction can send ether and/or delegatecall to target.\\n    function _scopeFunction(\\n        bytes32 roleKey,\\n        address targetAddress,\\n        bytes4 selector,\\n        ConditionFlat[] memory conditions,\\n        ExecutionOptions options\\n    ) internal {\\n        Integrity.enforce(conditions);\\n\\n        _store(\\n            _roles()[roleKey],\\n            _key(targetAddress, selector),\\n            conditions,\\n            options\\n        );\\n\\n        emit ScopeFunction(\\n            roleKey,\\n            targetAddress,\\n            selector,\\n            conditions,\\n            options\\n        );\\n    }\\n\\n    function _setAllowance(\\n        bytes32 key,\\n        uint128 balance,\\n        uint128 maxBalance,\\n        uint128 refillAmount,\\n        uint64 refillInterval,\\n        uint64 refillTimestamp\\n    ) internal {\\n        maxBalance = maxBalance > 0 ? maxBalance : type(uint128).max;\\n\\n        if (balance > maxBalance) {\\n            revert UnsuitableMaxBalanceForAllowance();\\n        }\\n\\n        _allowances()[key] = Allowance({\\n            refillAmount: refillAmount,\\n            maxBalance: maxBalance,\\n            refillInterval: refillInterval,\\n            balance: balance,\\n            refillTimestamp: refillTimestamp\\n        });\\n\\n        emit SetAllowance(\\n            key,\\n            balance,\\n            maxBalance,\\n            refillAmount,\\n            refillInterval,\\n            refillTimestamp\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"vendor/zodiac-modifier-roles/packages/evm/contracts/PermissionChecker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.8.17 <0.9.0;\\n\\nimport \\\"@gnosis.pm/safe-contracts/contracts/common/Enum.sol\\\";\\n\\nimport \\\"./Consumptions.sol\\\";\\nimport \\\"./Core.sol\\\";\\nimport \\\"./Decoder.sol\\\";\\nimport \\\"./Periphery.sol\\\";\\n\\nimport \\\"./packers/BufferPacker.sol\\\";\\n\\n/**\\n * @title PermissionChecker - a component of Zodiac Roles Mod responsible\\n * for enforcing and authorizing actions performed on behalf of a role.\\n *\\n * @author Crist\u00f3v\u00e3o Honorato - <cristovao.honorato@gnosis.io>\\n * @author Jan-Felix Schwarz  - <jan-felix.schwarz@gnosis.io>\\n */\\nabstract contract PermissionChecker is Core, Periphery {\\n    function _authorize(\\n        bytes32 roleKey,\\n        address to,\\n        uint256 value,\\n        bytes calldata data,\\n        Enum.Operation operation\\n    ) internal view virtual returns (Consumption[] memory) {\\n        // We never authorize the zero role, as it could clash with the\\n        // unassigned default role\\n        if (roleKey == 0) {\\n            revert NoMembership();\\n        }\\n\\n        Role storage role = _roles()[roleKey];\\n        if (!role.members[msg.sender]) {\\n            revert NoMembership();\\n        }\\n\\n        ITransactionUnwrapper adapter = getTransactionUnwrapper(\\n            to,\\n            bytes4(data)\\n        );\\n\\n        Status status;\\n        Result memory result;\\n        if (address(adapter) == address(0)) {\\n            (status, result) = _transaction(\\n                role,\\n                to,\\n                value,\\n                data,\\n                operation,\\n                result.consumptions\\n            );\\n        } else {\\n            (status, result) = _multiEntrypoint(\\n                ITransactionUnwrapper(adapter),\\n                role,\\n                to,\\n                value,\\n                data,\\n                operation\\n            );\\n        }\\n        if (status != Status.Ok) {\\n            revert ConditionViolation(status, result.info);\\n        }\\n\\n        return result.consumptions;\\n    }\\n\\n    function _multiEntrypoint(\\n        ITransactionUnwrapper adapter,\\n        Role storage role,\\n        address to,\\n        uint256 value,\\n        bytes calldata data,\\n        Enum.Operation operation\\n    ) private view returns (Status status, Result memory result) {\\n        try adapter.unwrap(to, value, data, operation) returns (\\n            UnwrappedTransaction[] memory transactions\\n        ) {\\n            for (uint256 i; i < transactions.length; ) {\\n                UnwrappedTransaction memory transaction = transactions[i];\\n                uint256 left = transaction.dataLocation;\\n                uint256 right = left + transaction.dataSize;\\n                (status, result) = _transaction(\\n                    role,\\n                    transaction.to,\\n                    transaction.value,\\n                    data[left:right],\\n                    transaction.operation,\\n                    result.consumptions\\n                );\\n                if (status != Status.Ok) {\\n                    return (status, result);\\n                }\\n                unchecked {\\n                    ++i;\\n                }\\n            }\\n        } catch {\\n            revert MalformedMultiEntrypoint();\\n        }\\n    }\\n\\n    /// @dev Inspects an individual transaction and performs checks based on permission scoping.\\n    /// Wildcarded indicates whether params need to be inspected or not. When true, only ExecutionOptions are checked.\\n    /// @param role Role to check for.\\n    /// @param to Destination address of transaction.\\n    /// @param value Ether value of module transaction.\\n    /// @param data Data payload of module transaction.\\n    /// @param operation Operation type of module transaction: 0 == call, 1 == delegate call.\\n    function _transaction(\\n        Role storage role,\\n        address to,\\n        uint256 value,\\n        bytes calldata data,\\n        Enum.Operation operation,\\n        Consumption[] memory consumptions\\n    ) private view returns (Status, Result memory) {\\n        if (data.length != 0 && data.length < 4) {\\n            revert FunctionSignatureTooShort();\\n        }\\n\\n        TargetAddress storage target = role.targets[to];\\n        if (target.clearance == Clearance.Target) {\\n            return (\\n                _executionOptions(value, operation, target.options),\\n                Result({consumptions: consumptions, info: 0})\\n            );\\n        } else if (target.clearance == Clearance.Function) {\\n            bytes32 key = _key(to, bytes4(data));\\n            bytes32 header = role.scopeConfig[key];\\n            if (header == 0) {\\n                return (\\n                    Status.FunctionNotAllowed,\\n                    Result({\\n                        consumptions: consumptions,\\n                        info: bytes32(bytes4(data))\\n                    })\\n                );\\n            }\\n\\n            (bool isWildcarded, ExecutionOptions options) = BufferPacker\\n                .unpackOptions(header);\\n\\n            Status status = _executionOptions(value, operation, options);\\n            if (status != Status.Ok) {\\n                return (status, Result({consumptions: consumptions, info: 0}));\\n            }\\n\\n            if (isWildcarded) {\\n                return (\\n                    Status.Ok,\\n                    Result({consumptions: consumptions, info: 0})\\n                );\\n            }\\n\\n            return _scopedFunction(role, key, value, data, consumptions);\\n        } else {\\n            return (\\n                Status.TargetAddressNotAllowed,\\n                Result({consumptions: consumptions, info: 0})\\n            );\\n        }\\n    }\\n\\n    /// @dev Examines the ether value and operation for a given role target.\\n    /// @param value Ether value of module transaction.\\n    /// @param operation Operation type of module transaction: 0 == call, 1 == delegate call.\\n    /// @param options Determines if a transaction can send ether and/or delegatecall to target.\\n    function _executionOptions(\\n        uint256 value,\\n        Enum.Operation operation,\\n        ExecutionOptions options\\n    ) private pure returns (Status) {\\n        // isSend && !canSend\\n        if (\\n            value > 0 &&\\n            options != ExecutionOptions.Send &&\\n            options != ExecutionOptions.Both\\n        ) {\\n            return Status.SendNotAllowed;\\n        }\\n\\n        // isDelegateCall && !canDelegateCall\\n        if (\\n            operation == Enum.Operation.DelegateCall &&\\n            options != ExecutionOptions.DelegateCall &&\\n            options != ExecutionOptions.Both\\n        ) {\\n            return Status.DelegateCallNotAllowed;\\n        }\\n\\n        return Status.Ok;\\n    }\\n\\n    function _scopedFunction(\\n        Role storage role,\\n        bytes32 key,\\n        uint256 value,\\n        bytes calldata data,\\n        Consumption[] memory prevConsumptions\\n    ) private view returns (Status, Result memory) {\\n        (Condition memory condition, Consumption[] memory consumptions) = _load(\\n            role,\\n            key\\n        );\\n        ParameterPayload memory payload = Decoder.inspect(data, condition);\\n\\n        return\\n            _walk(\\n                value,\\n                data,\\n                condition,\\n                payload,\\n                prevConsumptions.length == 0\\n                    ? consumptions\\n                    : Consumptions.merge(prevConsumptions, consumptions)\\n            );\\n    }\\n\\n    function _walk(\\n        uint256 value,\\n        bytes calldata data,\\n        Condition memory condition,\\n        ParameterPayload memory payload,\\n        Consumption[] memory consumptions\\n    ) private pure returns (Status, Result memory) {\\n        Operator operator = condition.operator;\\n\\n        if (operator < Operator.EqualTo) {\\n            if (operator == Operator.Pass) {\\n                return (\\n                    Status.Ok,\\n                    Result({consumptions: consumptions, info: 0})\\n                );\\n            } else if (operator == Operator.Matches) {\\n                return _matches(value, data, condition, payload, consumptions);\\n            } else if (operator == Operator.And) {\\n                return _and(value, data, condition, payload, consumptions);\\n            } else if (operator == Operator.Or) {\\n                return _or(value, data, condition, payload, consumptions);\\n            } else if (operator == Operator.Nor) {\\n                return _nor(value, data, condition, payload, consumptions);\\n            } else if (operator == Operator.ArraySome) {\\n                return\\n                    _arraySome(value, data, condition, payload, consumptions);\\n            } else if (operator == Operator.ArrayEvery) {\\n                return\\n                    _arrayEvery(value, data, condition, payload, consumptions);\\n            } else {\\n                assert(operator == Operator.ArraySubset);\\n                return\\n                    _arraySubset(value, data, condition, payload, consumptions);\\n            }\\n        } else {\\n            if (operator <= Operator.LessThan) {\\n                return (\\n                    _compare(data, condition, payload),\\n                    Result({consumptions: consumptions, info: 0})\\n                );\\n            } else if (operator <= Operator.SignedIntLessThan) {\\n                return (\\n                    _compareSignedInt(data, condition, payload),\\n                    Result({consumptions: consumptions, info: 0})\\n                );\\n            } else if (operator == Operator.Bitmask) {\\n                return (\\n                    _bitmask(data, condition, payload),\\n                    Result({consumptions: consumptions, info: 0})\\n                );\\n            } else if (operator == Operator.Custom) {\\n                return _custom(value, data, condition, payload, consumptions);\\n            } else if (operator == Operator.WithinAllowance) {\\n                return _withinAllowance(data, condition, payload, consumptions);\\n            } else if (operator == Operator.EtherWithinAllowance) {\\n                return _etherWithinAllowance(value, condition, consumptions);\\n            } else {\\n                assert(operator == Operator.CallWithinAllowance);\\n                return _callWithinAllowance(condition, consumptions);\\n            }\\n        }\\n    }\\n\\n    function _matches(\\n        uint256 value,\\n        bytes calldata data,\\n        Condition memory condition,\\n        ParameterPayload memory payload,\\n        Consumption[] memory consumptions\\n    ) private pure returns (Status status, Result memory) {\\n        Result memory result = Result({consumptions: consumptions, info: 0});\\n\\n        if (condition.children.length != payload.children.length) {\\n            return (Status.ParameterNotAMatch, result);\\n        }\\n\\n        for (uint256 i; i < condition.children.length; ) {\\n            (status, result) = _walk(\\n                value,\\n                data,\\n                condition.children[i],\\n                payload.children[i],\\n                result.consumptions\\n            );\\n            if (status != Status.Ok) {\\n                return (\\n                    status,\\n                    Result({consumptions: consumptions, info: result.info})\\n                );\\n            }\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        return (Status.Ok, result);\\n    }\\n\\n    function _and(\\n        uint256 value,\\n        bytes calldata data,\\n        Condition memory condition,\\n        ParameterPayload memory payload,\\n        Consumption[] memory consumptions\\n    ) private pure returns (Status status, Result memory result) {\\n        result = Result({consumptions: consumptions, info: 0});\\n\\n        for (uint256 i; i < condition.children.length; ) {\\n            (status, result) = _walk(\\n                value,\\n                data,\\n                condition.children[i],\\n                payload,\\n                result.consumptions\\n            );\\n            if (status != Status.Ok) {\\n                return (\\n                    status,\\n                    Result({consumptions: consumptions, info: result.info})\\n                );\\n            }\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        return (Status.Ok, result);\\n    }\\n\\n    function _or(\\n        uint256 value,\\n        bytes calldata data,\\n        Condition memory condition,\\n        ParameterPayload memory payload,\\n        Consumption[] memory consumptions\\n    ) private pure returns (Status, Result memory) {\\n        for (uint256 i; i < condition.children.length; ) {\\n            (Status status, Result memory result) = _walk(\\n                value,\\n                data,\\n                condition.children[i],\\n                payload,\\n                consumptions\\n            );\\n            if (status == Status.Ok) {\\n                return (status, result);\\n            }\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        return (\\n            Status.OrViolation,\\n            Result({consumptions: consumptions, info: 0})\\n        );\\n    }\\n\\n    function _nor(\\n        uint256 value,\\n        bytes calldata data,\\n        Condition memory condition,\\n        ParameterPayload memory payload,\\n        Consumption[] memory consumptions\\n    ) private pure returns (Status, Result memory) {\\n        for (uint256 i; i < condition.children.length; ) {\\n            (Status status, ) = _walk(\\n                value,\\n                data,\\n                condition.children[i],\\n                payload,\\n                consumptions\\n            );\\n            if (status == Status.Ok) {\\n                return (\\n                    Status.NorViolation,\\n                    Result({consumptions: consumptions, info: 0})\\n                );\\n            }\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        return (Status.Ok, Result({consumptions: consumptions, info: 0}));\\n    }\\n\\n    function _arraySome(\\n        uint256 value,\\n        bytes calldata data,\\n        Condition memory condition,\\n        ParameterPayload memory payload,\\n        Consumption[] memory consumptions\\n    ) private pure returns (Status, Result memory) {\\n        for (uint256 i; i < payload.children.length; ) {\\n            (Status status, Result memory result) = _walk(\\n                value,\\n                data,\\n                condition.children[0],\\n                payload.children[i],\\n                consumptions\\n            );\\n            if (status == Status.Ok) {\\n                return (status, result);\\n            }\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        return (\\n            Status.NoArrayElementPasses,\\n            Result({consumptions: consumptions, info: 0})\\n        );\\n    }\\n\\n    function _arrayEvery(\\n        uint256 value,\\n        bytes calldata data,\\n        Condition memory condition,\\n        ParameterPayload memory payload,\\n        Consumption[] memory consumptions\\n    ) private pure returns (Status status, Result memory result) {\\n        result = Result({consumptions: consumptions, info: 0});\\n        for (uint256 i; i < payload.children.length; ) {\\n            (status, result) = _walk(\\n                value,\\n                data,\\n                condition.children[0],\\n                payload.children[i],\\n                result.consumptions\\n            );\\n            if (status != Status.Ok) {\\n                return (\\n                    Status.NotEveryArrayElementPasses,\\n                    Result({consumptions: consumptions, info: 0})\\n                );\\n            }\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        return (Status.Ok, result);\\n    }\\n\\n    function _arraySubset(\\n        uint256 value,\\n        bytes calldata data,\\n        Condition memory condition,\\n        ParameterPayload memory payload,\\n        Consumption[] memory consumptions\\n    ) private pure returns (Status, Result memory result) {\\n        result = Result({consumptions: consumptions, info: 0});\\n\\n        if (\\n            payload.children.length == 0 ||\\n            payload.children.length > condition.children.length\\n        ) {\\n            return (Status.ParameterNotSubsetOfAllowed, result);\\n        }\\n\\n        uint256 taken;\\n        for (uint256 i; i < payload.children.length; ++i) {\\n            bool found = false;\\n            for (uint256 j; j < condition.children.length; ++j) {\\n                if (taken & (1 << j) != 0) continue;\\n\\n                (Status status, Result memory _result) = _walk(\\n                    value,\\n                    data,\\n                    condition.children[j],\\n                    payload.children[i],\\n                    result.consumptions\\n                );\\n                if (status == Status.Ok) {\\n                    found = true;\\n                    taken |= 1 << j;\\n                    result = _result;\\n                    break;\\n                }\\n            }\\n            if (!found) {\\n                return (\\n                    Status.ParameterNotSubsetOfAllowed,\\n                    Result({consumptions: consumptions, info: 0})\\n                );\\n            }\\n        }\\n\\n        return (Status.Ok, result);\\n    }\\n\\n    function _compare(\\n        bytes calldata data,\\n        Condition memory condition,\\n        ParameterPayload memory payload\\n    ) private pure returns (Status) {\\n        Operator operator = condition.operator;\\n        bytes32 compValue = condition.compValue;\\n        bytes32 value = operator == Operator.EqualTo\\n            ? keccak256(Decoder.pluck(data, payload.location, payload.size))\\n            : Decoder.word(data, payload.location);\\n\\n        if (operator == Operator.EqualTo && value != compValue) {\\n            return Status.ParameterNotAllowed;\\n        } else if (operator == Operator.GreaterThan && value <= compValue) {\\n            return Status.ParameterLessThanAllowed;\\n        } else if (operator == Operator.LessThan && value >= compValue) {\\n            return Status.ParameterGreaterThanAllowed;\\n        } else {\\n            return Status.Ok;\\n        }\\n    }\\n\\n    function _compareSignedInt(\\n        bytes calldata data,\\n        Condition memory condition,\\n        ParameterPayload memory payload\\n    ) private pure returns (Status) {\\n        Operator operator = condition.operator;\\n        int256 compValue = int256(uint256(condition.compValue));\\n        int256 value = int256(uint256(Decoder.word(data, payload.location)));\\n\\n        if (operator == Operator.SignedIntGreaterThan && value <= compValue) {\\n            return Status.ParameterLessThanAllowed;\\n        } else if (\\n            operator == Operator.SignedIntLessThan && value >= compValue\\n        ) {\\n            return Status.ParameterGreaterThanAllowed;\\n        } else {\\n            return Status.Ok;\\n        }\\n    }\\n\\n    /**\\n     * Applies a shift and bitmask on the payload bytes and compares the\\n     * result to the expected value. The shift offset, bitmask, and expected\\n     * value are specified in the compValue parameter, which is tightly\\n     * packed as follows:\\n     * <2 bytes shift offset><15 bytes bitmask><15 bytes expected value>\\n     */\\n    function _bitmask(\\n        bytes calldata data,\\n        Condition memory condition,\\n        ParameterPayload memory payload\\n    ) private pure returns (Status) {\\n        bytes32 compValue = condition.compValue;\\n        bool isInline = condition.paramType == ParameterType.Static;\\n        bytes calldata value = Decoder.pluck(\\n            data,\\n            payload.location + (isInline ? 0 : 32),\\n            payload.size - (isInline ? 0 : 32)\\n        );\\n\\n        uint256 shift = uint16(bytes2(compValue));\\n        if (shift >= value.length) {\\n            return Status.BitmaskOverflow;\\n        }\\n\\n        bytes32 rinse = bytes15(0xffffffffffffffffffffffffffffff);\\n        bytes32 mask = (compValue << 16) & rinse;\\n        // while its necessary to apply the rinse to the mask its not strictly\\n        // necessary to do so for the expected value, since we get remaining\\n        // 15 bytes anyway (shifting the word by 17 bytes)\\n        bytes32 expected = (compValue << (16 + 15 * 8)) & rinse;\\n        bytes32 slice = bytes32(value[shift:]);\\n\\n        return\\n            (slice & mask) == expected ? Status.Ok : Status.BitmaskNotAllowed;\\n    }\\n\\n    function _custom(\\n        uint256 value,\\n        bytes calldata data,\\n        Condition memory condition,\\n        ParameterPayload memory payload,\\n        Consumption[] memory consumptions\\n    ) private pure returns (Status, Result memory) {\\n        // 20 bytes on the left\\n        ICustomCondition adapter = ICustomCondition(\\n            address(bytes20(condition.compValue))\\n        );\\n        // 12 bytes on the right\\n        bytes12 extra = bytes12(uint96(uint256(condition.compValue)));\\n\\n        (bool success, bytes32 info) = adapter.check(\\n            value,\\n            data,\\n            payload.location,\\n            payload.size,\\n            extra\\n        );\\n        return (\\n            success ? Status.Ok : Status.CustomConditionViolation,\\n            Result({consumptions: consumptions, info: info})\\n        );\\n    }\\n\\n    function _withinAllowance(\\n        bytes calldata data,\\n        Condition memory condition,\\n        ParameterPayload memory payload,\\n        Consumption[] memory consumptions\\n    ) private pure returns (Status, Result memory) {\\n        uint256 value = uint256(Decoder.word(data, payload.location));\\n        return __consume(value, condition, consumptions);\\n    }\\n\\n    function _etherWithinAllowance(\\n        uint256 value,\\n        Condition memory condition,\\n        Consumption[] memory consumptions\\n    ) private pure returns (Status status, Result memory result) {\\n        (status, result) = __consume(value, condition, consumptions);\\n        return (\\n            status == Status.Ok ? Status.Ok : Status.EtherAllowanceExceeded,\\n            result\\n        );\\n    }\\n\\n    function _callWithinAllowance(\\n        Condition memory condition,\\n        Consumption[] memory consumptions\\n    ) private pure returns (Status status, Result memory result) {\\n        (status, result) = __consume(1, condition, consumptions);\\n        return (\\n            status == Status.Ok ? Status.Ok : Status.CallAllowanceExceeded,\\n            result\\n        );\\n    }\\n\\n    function __consume(\\n        uint256 value,\\n        Condition memory condition,\\n        Consumption[] memory consumptions\\n    ) private pure returns (Status, Result memory) {\\n        (uint256 index, bool found) = Consumptions.find(\\n            consumptions,\\n            condition.compValue\\n        );\\n        assert(found);\\n\\n        if (\\n            value + consumptions[index].consumed > consumptions[index].balance\\n        ) {\\n            return (\\n                Status.AllowanceExceeded,\\n                Result({\\n                    consumptions: consumptions,\\n                    info: consumptions[index].allowanceKey\\n                })\\n            );\\n        } else {\\n            consumptions = Consumptions.clone(consumptions);\\n            consumptions[index].consumed += uint128(value);\\n            return (Status.Ok, Result({consumptions: consumptions, info: 0}));\\n        }\\n    }\\n\\n    struct Result {\\n        Consumption[] consumptions;\\n        bytes32 info;\\n    }\\n\\n    enum Status {\\n        Ok,\\n        /// Role not allowed to delegate call to target address\\n        DelegateCallNotAllowed,\\n        /// Role not allowed to call target address\\n        TargetAddressNotAllowed,\\n        /// Role not allowed to call this function on target address\\n        FunctionNotAllowed,\\n        /// Role not allowed to send to target address\\n        SendNotAllowed,\\n        /// Or conition not met\\n        OrViolation,\\n        /// Nor conition not met\\n        NorViolation,\\n        /// Parameter value is not equal to allowed\\n        ParameterNotAllowed,\\n        /// Parameter value less than allowed\\n        ParameterLessThanAllowed,\\n        /// Parameter value greater than maximum allowed by role\\n        ParameterGreaterThanAllowed,\\n        /// Parameter value does not match\\n        ParameterNotAMatch,\\n        /// Array elements do not meet allowed criteria for every element\\n        NotEveryArrayElementPasses,\\n        /// Array elements do not meet allowed criteria for at least one element\\n        NoArrayElementPasses,\\n        /// Parameter value not a subset of allowed\\n        ParameterNotSubsetOfAllowed,\\n        /// Bitmask exceeded value length\\n        BitmaskOverflow,\\n        /// Bitmask not an allowed value\\n        BitmaskNotAllowed,\\n        CustomConditionViolation,\\n        AllowanceExceeded,\\n        CallAllowanceExceeded,\\n        EtherAllowanceExceeded\\n    }\\n\\n    /// Sender is not a member of the role\\n    error NoMembership();\\n\\n    /// Function signature too short\\n    error FunctionSignatureTooShort();\\n\\n    /// Calldata unwrapping failed\\n    error MalformedMultiEntrypoint();\\n\\n    error ConditionViolation(Status status, bytes32 info);\\n}\\n\"\r\n    },\r\n    \"vendor/zodiac-modifier-roles/packages/evm/contracts/PermissionLoader.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.8.17 <0.9.0;\\n\\nimport \\\"./Consumptions.sol\\\";\\nimport \\\"./Core.sol\\\";\\nimport \\\"./Topology.sol\\\";\\nimport \\\"./WriteOnce.sol\\\";\\n\\nimport \\\"./packers/Packer.sol\\\";\\n\\n/**\\n * @title PermissionLoader - a component of the Zodiac Roles Mod that handles\\n * the writing and reading of permission data to and from storage.\\n * @author Crist\u00f3v\u00e3o Honorato - <cristovao.honorato@gnosis.io>\\n * @author Jan-Felix Schwarz  - <jan-felix.schwarz@gnosis.io>\\n */\\nabstract contract PermissionLoader is Core {\\n    function _store(\\n        Role storage role,\\n        bytes32 key,\\n        ConditionFlat[] memory conditions,\\n        ExecutionOptions options\\n    ) internal override {\\n        bytes memory buffer = Packer.pack(conditions);\\n        address pointer = WriteOnce.store(buffer);\\n\\n        role.scopeConfig[key] = BufferPacker.packHeader(\\n            conditions.length,\\n            options,\\n            pointer\\n        );\\n    }\\n\\n    function _load(\\n        Role storage role,\\n        bytes32 key\\n    )\\n        internal\\n        view\\n        override\\n        returns (Condition memory condition, Consumption[] memory consumptions)\\n    {\\n        (uint256 count, address pointer) = BufferPacker.unpackHeader(\\n            role.scopeConfig[key]\\n        );\\n        bytes memory buffer = WriteOnce.load(pointer);\\n        (\\n            ConditionFlat[] memory conditionsFlat,\\n            bytes32[] memory compValues\\n        ) = BufferPacker.unpackBody(buffer, count);\\n\\n        uint256 allowanceCount;\\n\\n        for (uint256 i; i < conditionsFlat.length; ) {\\n            Operator operator = conditionsFlat[i].operator;\\n            if (operator >= Operator.WithinAllowance) {\\n                ++allowanceCount;\\n            } else if (operator == Operator.EqualToAvatar) {\\n                // patch Operator.EqualToAvatar which in reality works as\\n                // a placeholder\\n                conditionsFlat[i].operator = Operator.EqualTo;\\n                compValues[i] = keccak256(abi.encode(getAvatar()));\\n            }\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        _conditionTree(\\n            conditionsFlat,\\n            compValues,\\n            Topology.childrenBounds(conditionsFlat),\\n            0,\\n            condition\\n        );\\n\\n        return (\\n            condition,\\n            allowanceCount > 0\\n                ? _consumptions(conditionsFlat, compValues, allowanceCount)\\n                : consumptions\\n        );\\n    }\\n\\n    function _conditionTree(\\n        ConditionFlat[] memory conditionsFlat,\\n        bytes32[] memory compValues,\\n        Topology.Bounds[] memory childrenBounds,\\n        uint256 index,\\n        Condition memory treeNode\\n    ) private pure {\\n        // This function populates a buffer received as an argument instead of\\n        // instantiating a result object. This is an important gas optimization\\n\\n        ConditionFlat memory conditionFlat = conditionsFlat[index];\\n        treeNode.paramType = conditionFlat.paramType;\\n        treeNode.operator = conditionFlat.operator;\\n        treeNode.compValue = compValues[index];\\n\\n        if (childrenBounds[index].length == 0) {\\n            return;\\n        }\\n\\n        uint256 start = childrenBounds[index].start;\\n        uint256 length = childrenBounds[index].length;\\n\\n        treeNode.children = new Condition[](length);\\n        for (uint j; j < length; ) {\\n            _conditionTree(\\n                conditionsFlat,\\n                compValues,\\n                childrenBounds,\\n                start + j,\\n                treeNode.children[j]\\n            );\\n            unchecked {\\n                ++j;\\n            }\\n        }\\n    }\\n\\n    function _consumptions(\\n        ConditionFlat[] memory conditions,\\n        bytes32[] memory compValues,\\n        uint256 maxAllowanceCount\\n    ) private view returns (Consumption[] memory result) {\\n        uint256 count = conditions.length;\\n        result = new Consumption[](maxAllowanceCount);\\n\\n        uint256 insert;\\n\\n        for (uint256 i; i < count; ++i) {\\n            if (conditions[i].operator < Operator.WithinAllowance) {\\n                continue;\\n            }\\n\\n            bytes32 key = compValues[i];\\n            (, bool contains) = Consumptions.find(result, key);\\n            if (contains) {\\n                continue;\\n            }\\n\\n            result[insert].allowanceKey = key;\\n            (result[insert].balance, ) = _accruedAllowance(\\n                _allowances()[key],\\n                block.timestamp\\n            );\\n            insert++;\\n        }\\n\\n        if (insert < maxAllowanceCount) {\\n            assembly {\\n                mstore(result, insert)\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"vendor/zodiac-modifier-roles/packages/evm/contracts/Roles.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.8.17 <0.9.0;\\n\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {Module} from \\\"./lib/Module.sol\\\";\\nimport \\\"./AllowanceTracker.sol\\\";\\nimport \\\"./PermissionBuilder.sol\\\";\\nimport \\\"./PermissionChecker.sol\\\";\\nimport \\\"./PermissionLoader.sol\\\";\\n\\n/// @title Zodiac Roles Mod - granular, role-based, access control for your\\n/// on-chain avatar accounts (like Safe).\\n/// @author Crist\u00f3v\u00e3o Honorato - <cristovao.honorato@gnosis.io>\\n/// @author Jan-Felix Schwarz  - <jan-felix.schwarz@gnosis.io>\\n/// @author Auryn Macmillan    - <auryn.macmillan@gnosis.io>\\n/// @author Nathan Ginnever    - <nathan.ginnever@gnosis.io>\\n///\\n/// @notice Modified by Troop Labs for Troops! Most notable changes:\\n///     * This contract is now a module instead of a modifier.\\n///     * This contract is intended to assign roles to regular users (troop\\n///         members) instead of other Zodiac/Safe modules.\\n///     * This contract is now intended to be inherited, and external onlyOwner\\n///         functions have been changed to internal functions.\\nabstract contract Roles is\\n    Initializable,\\n    Module,\\n    AllowanceTracker,\\n    PermissionBuilder,\\n    PermissionChecker,\\n    PermissionLoader\\n{\\n    // keccak(\\\"gnosis.zodiac.roles.default_roles\\\")\\n    bytes32 private constant DEFAULT_ROLES_SLOT =\\n        0x69a449db6228fc24695b8cc0e8122020f7a87ed6de25ddc44c769f61b4d6be1c;\\n\\n    event AssignRoles(address module, bytes32[] roleKeys, bool[] memberOf);\\n    event RolesModSetup(\\n        address indexed initiator,\\n        address indexed owner,\\n        address indexed avatar,\\n        address target\\n    );\\n    event SetDefaultRole(address module, bytes32 defaultRoleKey);\\n\\n    error ArraysDifferentLength();\\n\\n    /// Sender is allowed to make this call, but the internal transaction failed\\n    error ModuleTransactionFailed();\\n\\n    constructor(address _avatar) {\\n        setUp(abi.encode(_avatar));\\n    }\\n\\n    /// @dev There is no zero address check as solidty will check for\\n    /// missing arguments and the space of invalid addresses is too large\\n    /// to check. Invalid avatar or target address can be reset by owner.\\n    function setUp(bytes memory initParams) public initializer {\\n        address _avatar = abi.decode(initParams, (address));\\n\\n        setAvatar(_avatar);\\n\\n        emit RolesModSetup(msg.sender, address(0), _avatar, _avatar);\\n    }\\n\\n    /// @dev Getter for unstructured storage:\\n    ///     mapping(address module => bytes32 roleKey) defaultRoles\\n    /// @return defaultRoles_ Default roles mapping\\n    function _defaultRoles()\\n        internal\\n        pure\\n        returns (mapping(address => bytes32) storage defaultRoles_)\\n    {\\n        assembly {\\n            defaultRoles_.slot := DEFAULT_ROLES_SLOT\\n        }\\n    }\\n\\n    /// @dev Assigns and revokes roles to a given module.\\n    /// @dev \u26a0\ufe0f Check that the caller is authorised to assign roles first \u26a0\ufe0f\\n    /// @param module Module on which to assign/revoke roles.\\n    /// @param roleKeys Roles to assign/revoke.\\n    /// @param memberOf Assign (true) or revoke (false) corresponding roleKeys.\\n    function _assignRoles(\\n        address module,\\n        bytes32[] calldata roleKeys,\\n        bool[] calldata memberOf\\n    ) internal {\\n        if (roleKeys.length != memberOf.length) {\\n            revert ArraysDifferentLength();\\n        }\\n        for (uint16 i; i < roleKeys.length; ++i) {\\n            _roles()[roleKeys[i]].members[module] = memberOf[i];\\n        }\\n        emit AssignRoles(module, roleKeys, memberOf);\\n    }\\n\\n    /// @dev Sets the default role used for a module if it calls execTransactionFromModule() or execTransactionFromModuleReturnData().\\n    /// @param module Address of the module on which to set default role.\\n    /// @param roleKey Role to be set as default.\\n    function _setDefaultRole(address module, bytes32 roleKey) internal {\\n        _defaultRoles()[module] = roleKey;\\n        emit SetDefaultRole(module, roleKey);\\n    }\\n\\n    /// @dev Passes a transaction to the modifier.\\n    /// @param to Destination address of module transaction\\n    /// @param value Ether value of module transaction\\n    /// @param data Data payload of module transaction\\n    /// @param operation Operation type of module transaction\\n    function _execTransactionFromModule(\\n        address to,\\n        uint256 value,\\n        bytes calldata data,\\n        Enum.Operation operation\\n    ) internal returns (bool success) {\\n        Consumption[] memory consumptions = _authorize(\\n            _defaultRoles()[msg.sender],\\n            to,\\n            value,\\n            data,\\n            operation\\n        );\\n        _flushPrepare(consumptions);\\n        success = exec(to, value, data, operation);\\n        _flushCommit(consumptions, success);\\n    }\\n\\n    /// @dev Passes a transaction to the modifier, expects return data.\\n    /// @param to Destination address of module transaction\\n    /// @param value Ether value of module transaction\\n    /// @param data Data payload of module transaction\\n    /// @param operation Operation type of module transaction\\n    function _execTransactionFromModuleReturnData(\\n        address to,\\n        uint256 value,\\n        bytes calldata data,\\n        Enum.Operation operation\\n    ) internal returns (bool success, bytes memory returnData) {\\n        Consumption[] memory consumptions = _authorize(\\n            _defaultRoles()[msg.sender],\\n            to,\\n            value,\\n            data,\\n            operation\\n        );\\n        _flushPrepare(consumptions);\\n        (success, returnData) = execAndReturnData(to, value, data, operation);\\n        _flushCommit(consumptions, success);\\n    }\\n\\n    /// @dev Passes a transaction to the modifier assuming the specified role.\\n    /// @param to Destination address of module transaction\\n    /// @param value Ether value of module transaction\\n    /// @param data Data payload of module transaction\\n    /// @param operation Operation type of module transaction\\n    /// @param roleKey Identifier of the role to assume for this transaction\\n    /// @param shouldRevert Should the function revert on inner execution returning success false?\\n    /// @notice Can only be called by enabled modules\\n    function _execTransactionWithRole(\\n        address to,\\n        uint256 value,\\n        bytes calldata data,\\n        Enum.Operation operation,\\n        bytes32 roleKey,\\n        bool shouldRevert\\n    ) internal returns (bool success) {\\n        Consumption[] memory consumptions = _authorize(\\n            roleKey,\\n            to,\\n            value,\\n            data,\\n            operation\\n        );\\n        _flushPrepare(consumptions);\\n        success = exec(to, value, data, operation);\\n        if (shouldRevert && !success) {\\n            revert ModuleTransactionFailed();\\n        }\\n        _flushCommit(consumptions, success);\\n    }\\n\\n    /// @dev Passes a transaction to the modifier assuming the specified role. Expects return data.\\n    /// @param to Destination address of module transaction\\n    /// @param value Ether value of module transaction\\n    /// @param data Data payload of module transaction\\n    /// @param operation Operation type of module transaction\\n    /// @param roleKey Identifier of the role to assume for this transaction\\n    /// @param shouldRevert Should the function revert on inner execution returning success false?\\n    /// @notice Can only be called by enabled modules\\n    function _execTransactionWithRoleReturnData(\\n        address to,\\n        uint256 value,\\n        bytes calldata data,\\n        Enum.Operation operation,\\n        bytes32 roleKey,\\n        bool shouldRevert\\n    ) internal returns (bool success, bytes memory returnData) {\\n        Consumption[] memory consumptions = _authorize(\\n            roleKey,\\n            to,\\n            value,\\n            data,\\n            operation\\n        );\\n        _flushPrepare(consumptions);\\n        (success, returnData) = execAndReturnData(to, value, data, operation);\\n        if (shouldRevert && !success) {\\n            revert ModuleTransactionFailed();\\n        }\\n        _flushCommit(consumptions, success);\\n    }\\n}\\n\"\r\n    },\r\n    \"vendor/zodiac-modifier-roles/packages/evm/contracts/Topology.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.8.17 <0.9.0;\\n\\nimport \\\"./Types.sol\\\";\\n\\n/**\\n * @title Topology - a library that provides helper functions for dealing with\\n * the flat representation of conditions.\\n * @author Crist\u00f3v\u00e3o Honorato - <cristovao.honorato@gnosis.io>\\n */\\nlibrary Topology {\\n    struct TypeTree {\\n        ParameterType paramType;\\n        TypeTree[] children;\\n    }\\n\\n    struct Bounds {\\n        uint256 start;\\n        uint256 end;\\n        uint256 length;\\n    }\\n\\n    function childrenBounds(\\n        ConditionFlat[] memory conditions\\n    ) internal pure returns (Bounds[] memory result) {\\n        uint256 count = conditions.length;\\n        assert(count > 0);\\n\\n        // parents are breadth-first\\n        result = new Bounds[](count);\\n        result[0].start = type(uint256).max;\\n\\n        // first item is the root\\n        for (uint256 i = 1; i < count; ) {\\n            result[i].start = type(uint256).max;\\n            Bounds memory parentBounds = result[conditions[i].parent];\\n            if (parentBounds.start == type(uint256).max) {\\n                parentBounds.start = i;\\n            }\\n            parentBounds.end = i + 1;\\n            parentBounds.length = parentBounds.end - parentBounds.start;\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function isInline(TypeTree memory node) internal pure returns (bool) {\\n        ParameterType paramType = node.paramType;\\n        if (paramType == ParameterType.Static) {\\n            return true;\\n        } else if (\\n            paramType == ParameterType.Dynamic ||\\n            paramType == ParameterType.Array ||\\n            paramType == ParameterType.AbiEncoded\\n        ) {\\n            return false;\\n        } else {\\n            uint256 length = node.children.length;\\n\\n            for (uint256 i; i < length; ) {\\n                if (!isInline(node.children[i])) {\\n                    return false;\\n                }\\n                unchecked {\\n                    ++i;\\n                }\\n            }\\n            return true;\\n        }\\n    }\\n\\n    function typeTree(\\n        Condition memory condition\\n    ) internal pure returns (TypeTree memory result) {\\n        if (\\n            condition.operator >= Operator.And &&\\n            condition.operator <= Operator.Nor\\n        ) {\\n            assert(condition.children.length > 0);\\n            return typeTree(condition.children[0]);\\n        }\\n\\n        result.paramType = condition.paramType;\\n        if (condition.children.length > 0) {\\n            uint256 length = condition.paramType == ParameterType.Array\\n                ? 1\\n                : condition.children.length;\\n            result.children = new TypeTree[](length);\\n\\n            for (uint256 i; i < length; ) {\\n                result.children[i] = typeTree(condition.children[i]);\\n\\n                unchecked {\\n                    ++i;\\n                }\\n            }\\n        }\\n    }\\n\\n    function typeTree(\\n        ConditionFlat[] memory conditions,\\n        uint256 index,\\n        Bounds[] memory bounds\\n    ) internal pure returns (TypeTree memory result) {\\n        ConditionFlat memory condition = conditions[index];\\n        if (\\n            condition.operator >= Operator.And &&\\n            condition.operator <= Operator.Nor\\n        ) {\\n            assert(bounds[index].length > 0);\\n            return typeTree(conditions, bounds[index].start, bounds);\\n        }\\n\\n        result.paramType = condition.paramType;\\n        if (bounds[index].length > 0) {\\n            uint256 start = bounds[index].start;\\n            uint256 end = condition.paramType == ParameterType.Array\\n                ? bounds[index].start + 1\\n                : bounds[index].end;\\n            result.children = new TypeTree[](end - start);\\n            for (uint256 i = start; i < end; ) {\\n                result.children[i - start] = typeTree(conditions, i, bounds);\\n                unchecked {\\n                    ++i;\\n                }\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"vendor/zodiac-modifier-roles/packages/evm/contracts/Types.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.8.17 <0.9.0;\\n\\n/**\\n * @title Types - a file that contains all of the type definitions used throughout\\n * the Zodiac Roles Mod.\\n * @author Crist\u00f3v\u00e3o Honorato - <cristovao.honorato@gnosis.io>\\n * @author Jan-Felix Schwarz  - <jan-felix.schwarz@gnosis.io>\\n */\\nenum ParameterType {\\n    None,\\n    Static,\\n    Dynamic,\\n    Tuple,\\n    Array,\\n    AbiEncoded\\n}\\n\\nenum Operator {\\n    // 00:    EMPTY EXPRESSION (default, always passes)\\n    //          paramType: Static / Dynamic / Tuple / Array\\n    //          \u2753 children (only for paramType: Tuple / Array to describe their structure)\\n    //          \ud83d\udeab compValue\\n    /* 00: */ Pass,\\n    // ------------------------------------------------------------\\n    // 01-04: LOGICAL EXPRESSIONS\\n    //          paramType: None\\n    //          \u2705 children\\n    //          \ud83d\udeab compValue\\n    /* 01: */ And,\\n    /* 02: */ Or,\\n    /* 03: */ Nor,\\n    /* 04: */ _Placeholder04,\\n    // ------------------------------------------------------------\\n    // 05-14: COMPLEX EXPRESSIONS\\n    //          paramType: AbiEncoded / Tuple / Array,\\n    //          \u2705 children\\n    //          \ud83d\udeab compValue\\n    /* 05: */ Matches,\\n    /* 06: */ ArraySome,\\n    /* 07: */ ArrayEvery,\\n    /* 08: */ ArraySubset,\\n    /* 09: */ _Placeholder09,\\n    /* 10: */ _Placeholder10,\\n    /* 11: */ _Placeholder11,\\n    /* 12: */ _Placeholder12,\\n    /* 13: */ _Placeholder13,\\n    /* 14: */ _Placeholder14,\\n    // ------------------------------------------------------------\\n    // 15:    SPECIAL COMPARISON (without compValue)\\n    //          paramType: Static\\n    //          \ud83d\udeab children\\n    //          \ud83d\udeab compValue\\n    /* 15: */ EqualToAvatar,\\n    // ------------------------------------------------------------\\n    // 16-31: COMPARISON EXPRESSIONS\\n    //          paramType: Static / Dynamic / Tuple / Array\\n    //          \u2753 children (only for paramType: Tuple / Array to describe their structure)\\n    //          \u2705 compValue\\n    /* 16: */ EqualTo, // paramType: Static / Dynamic / Tuple / Array\\n    /* 17: */ GreaterThan, // paramType: Static\\n    /* 18: */ LessThan, // paramType: Static\\n    /* 19: */ SignedIntGreaterThan, // paramType: Static\\n    /* 20: */ SignedIntLessThan, // paramType: Static\\n    /* 21: */ Bitmask, // paramType: Static / Dynamic\\n    /* 22: */ Custom, // paramType: Static / Dynamic / Tuple / Array\\n    /* 23: */ _Placeholder23,\\n    /* 24: */ _Placeholder24,\\n    /* 25: */ _Placeholder25,\\n    /* 26: */ _Placeholder26,\\n    /* 27: */ _Placeholder27,\\n    /* 28: */ WithinAllowance, // paramType: Static\\n    /* 29: */ EtherWithinAllowance, // paramType: None\\n    /* 30: */ CallWithinAllowance, // paramType: None\\n    /* 31: */ _Placeholder31\\n}\\n\\nenum ExecutionOptions {\\n    None,\\n    Send,\\n    DelegateCall,\\n    Both\\n}\\n\\nenum Clearance {\\n    None,\\n    Target,\\n    Function\\n}\\n\\n// This struct is a flattened version of Condition\\n// used for ABI encoding a scope config tree\\n// (ABI does not support recursive types)\\nstruct ConditionFlat {\\n    uint8 parent;\\n    ParameterType paramType;\\n    Operator operator;\\n    bytes compValue;\\n}\\n\\nstruct Condition {\\n    ParameterType paramType;\\n    Operator operator;\\n    bytes32 compValue;\\n    Condition[] children;\\n}\\nstruct ParameterPayload {\\n    uint256 location;\\n    uint256 size;\\n    ParameterPayload[] children;\\n}\\n\\nstruct TargetAddress {\\n    Clearance clearance;\\n    ExecutionOptions options;\\n}\\n\\nstruct Role {\\n    mapping(address => bool) members;\\n    mapping(address => TargetAddress) targets;\\n    mapping(bytes32 => bytes32) scopeConfig;\\n}\\n\\nstruct Allowance {\\n    // refillInterval - duration of the period in seconds, 0 for one-time allowance\\n    // refillAmount - amount that will be replenished \\\"at the start of every period\\\" (replace with: per period)\\n    // refillTimestamp - timestamp of the last interval refilled for;\\n    // maxBalance - max accrual amount, replenishing stops once the unused allowance hits this value\\n    // balance - unused allowance;\\n\\n    // order matters\\n    uint128 refillAmount;\\n    uint128 maxBalance;\\n    uint64 refillInterval;\\n    // only these these two fields are updated on accrual, should live in the same word\\n    uint128 balance;\\n    uint64 refillTimestamp;\\n}\\n\\nstruct Consumption {\\n    bytes32 allowanceKey;\\n    uint128 balance;\\n    uint128 consumed;\\n}\\n\"\r\n    },\r\n    \"vendor/zodiac-modifier-roles/packages/evm/contracts/WriteOnce.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.8.17 <0.9.0;\\n\\ninterface ISingletonFactory {\\n    function deploy(\\n        bytes memory initCode,\\n        bytes32 salt\\n    ) external returns (address);\\n}\\n\\nlibrary WriteOnce {\\n    address public constant SINGLETON_FACTORY =\\n        0xce0042B868300000d44A59004Da54A005ffdcf9f;\\n\\n    bytes32 public constant SALT =\\n        0x0000000000000000000000000000000000000000000000000000000000000000;\\n\\n    /**\\n    @notice Stores `data` and returns `pointer` as key for later retrieval\\n    @dev The pointer is a contract address with `data` as code\\n    @param data to be written\\n    @return pointer Pointer to the written `data`\\n  */\\n    function store(bytes memory data) internal returns (address pointer) {\\n        bytes memory creationBytecode = creationBytecodeFor(data);\\n        address calculatedAddress = addressFor(creationBytecode);\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(calculatedAddress)\\n        }\\n\\n        address actualAddress;\\n        if (size == 0) {\\n            actualAddress = ISingletonFactory(SINGLETON_FACTORY).deploy(\\n                creationBytecode,\\n                SALT\\n            );\\n        } else {\\n            actualAddress = calculatedAddress;\\n        }\\n\\n        assert(calculatedAddress == actualAddress);\\n\\n        pointer = calculatedAddress;\\n    }\\n\\n    /**\\n    @notice Reads the contents of the `pointer` code as data, skips the first byte\\n    @dev The function is intended for reading pointers generated by `store`\\n    @param pointer to be read\\n    @return runtimeBytecode read from `pointer` contract\\n  */\\n    function load(\\n        address pointer\\n    ) internal view returns (bytes memory runtimeBytecode) {\\n        uint256 rawSize;\\n        assembly {\\n            rawSize := extcodesize(pointer)\\n        }\\n        assert(rawSize > 1);\\n\\n        // jump over the prepended 00\\n        uint256 offset = 1;\\n        // don't count with the 00\\n        uint256 size = rawSize - 1;\\n\\n        runtimeBytecode = new bytes(size);\\n        assembly {\\n            extcodecopy(pointer, add(runtimeBytecode, 32), offset, size)\\n        }\\n    }\\n\\n    function addressFor(\\n        bytes memory creationBytecode\\n    ) private pure returns (address) {\\n        bytes32 hash = keccak256(\\n            abi.encodePacked(\\n                bytes1(0xff),\\n                SINGLETON_FACTORY,\\n                SALT,\\n                keccak256(creationBytecode)\\n            )\\n        );\\n        // get the right most 20 bytes\\n        return address(uint160(uint256(hash)));\\n    }\\n\\n    /**\\n    @notice Generate a creation code that results on a contract with `data` as bytecode\\n    @param data the buffer to be stored\\n    @return creationBytecode (constructor) for new contract\\n    */\\n    function creationBytecodeFor(\\n        bytes memory data\\n    ) private pure returns (bytes memory) {\\n        /*\\n      0x00    0x63         0x63XXXXXX  PUSH4 _code.length  size\\n      0x01    0x80         0x80        DUP1                size size\\n      0x02    0x60         0x600e      PUSH1 14            14 size size\\n      0x03    0x60         0x6000      PUSH1 00            0 14 size size\\n      0x04    0x39         0x39        CODECOPY            size\\n      0x05    0x60         0x6000      PUSH1 00            0 size\\n      0x06    0xf3         0xf3        RETURN\\n      <CODE>\\n    */\\n\\n        return\\n            abi.encodePacked(\\n                hex\\\"63\\\",\\n                uint32(data.length + 1),\\n                hex\\\"80_60_0E_60_00_39_60_00_F3\\\",\\n                // Prepend 00 to data so contract can't be called\\n                hex\\\"00\\\",\\n                data\\n            );\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"paris\",\r\n    \"viaIR\": true,\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AlreadyRegistered\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"ERC1967InvalidImplementation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1967NonPayable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721EnumerableForbiddenBatchMint\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"ERC721OutOfBoundsIndex\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"InvalidRecipient\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NonTransferrable\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"NotAuthorised\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"StringsInsufficientHexLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UUPSUnauthorizedCallContext\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"}],\"name\":\"UUPSUnsupportedProxiableUUID\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"roleKey\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"ActionExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"TrooperJoined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"TrooperKicked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"UPGRADE_INTERFACE_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTroop\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"troop\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"troop_\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"initialMembers\",\"type\":\"address[]\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"kick\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "TroopMembershipNFT", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "10", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}