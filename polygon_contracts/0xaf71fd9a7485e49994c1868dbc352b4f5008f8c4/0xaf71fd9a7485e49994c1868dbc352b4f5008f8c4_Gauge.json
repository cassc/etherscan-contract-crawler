{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/base/reward/Gauge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\nimport \\\"../../interface/IGauge.sol\\\";\\r\\nimport \\\"../../interface/IPair.sol\\\";\\r\\nimport \\\"../../interface/IVoter.sol\\\";\\r\\nimport \\\"../../interface/IBribe.sol\\\";\\r\\nimport \\\"../../interface/IERC721.sol\\\";\\r\\nimport \\\"../../interface/IVe.sol\\\";\\r\\nimport \\\"./MultiRewardsPoolBase.sol\\\";\\r\\n\\r\\n/// @title Gauges are used to incentivize pools, they emit reward tokens over 7 days for staked LP tokens\\r\\ncontract Gauge is IGauge, MultiRewardsPoolBase {\\r\\n  using SafeERC20 for IERC20;\\r\\n\\r\\n  /// @dev The ve token used for gauges\\r\\n  address public immutable ve;\\r\\n  address public immutable bribe;\\r\\n  address public immutable voter;\\r\\n\\r\\n  mapping(address => uint) public tokenIds;\\r\\n\\r\\n  uint public fees0;\\r\\n  uint public fees1;\\r\\n\\r\\n  event ClaimFees(address indexed from, uint claimed0, uint claimed1);\\r\\n  event VeTokenLocked(address indexed account, uint tokenId);\\r\\n  event VeTokenUnlocked(address indexed account, uint tokenId);\\r\\n\\r\\n  constructor(\\r\\n    address _stake,\\r\\n    address _bribe,\\r\\n    address _ve,\\r\\n    address _voter,\\r\\n    address[] memory _allowedRewardTokens\\r\\n  ) MultiRewardsPoolBase(\\r\\n    _stake,\\r\\n    _voter,\\r\\n    _allowedRewardTokens\\r\\n  ) {\\r\\n    bribe = _bribe;\\r\\n    ve = _ve;\\r\\n    voter = _voter;\\r\\n  }\\r\\n\\r\\n  function claimFees() external lock override returns (uint claimed0, uint claimed1) {\\r\\n    return _claimFees();\\r\\n  }\\r\\n\\r\\n  function _claimFees() internal returns (uint claimed0, uint claimed1) {\\r\\n    address _underlying = underlying;\\r\\n    (claimed0, claimed1) = IPair(_underlying).claimFees();\\r\\n    if (claimed0 > 0 || claimed1 > 0) {\\r\\n      uint _fees0 = fees0 + claimed0;\\r\\n      uint _fees1 = fees1 + claimed1;\\r\\n      (address _token0, address _token1) = IPair(_underlying).tokens();\\r\\n      if (_fees0 > IMultiRewardsPool(bribe).left(_token0)) {\\r\\n        fees0 = 0;\\r\\n        IERC20(_token0).safeIncreaseAllowance(bribe, _fees0);\\r\\n        IBribe(bribe).notifyRewardAmount(_token0, _fees0);\\r\\n      } else {\\r\\n        fees0 = _fees0;\\r\\n      }\\r\\n      if (_fees1 > IMultiRewardsPool(bribe).left(_token1)) {\\r\\n        fees1 = 0;\\r\\n        IERC20(_token1).safeIncreaseAllowance(bribe, _fees1);\\r\\n        IBribe(bribe).notifyRewardAmount(_token1, _fees1);\\r\\n      } else {\\r\\n        fees1 = _fees1;\\r\\n      }\\r\\n\\r\\n      emit ClaimFees(msg.sender, claimed0, claimed1);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function getReward(address account, address[] memory tokens) external override {\\r\\n    require(msg.sender == account || msg.sender == voter, \\\"Forbidden\\\");\\r\\n    IVoter(voter).distribute(address(this));\\r\\n    _getReward(account, tokens, account);\\r\\n  }\\r\\n\\r\\n  function depositAll(uint tokenId) external {\\r\\n    deposit(IERC20(underlying).balanceOf(msg.sender), tokenId);\\r\\n  }\\r\\n\\r\\n  function deposit(uint amount, uint tokenId) public {\\r\\n    if (tokenId > 0) {\\r\\n      _lockVeToken(msg.sender, tokenId);\\r\\n    }\\r\\n    _deposit(amount);\\r\\n    IVoter(voter).emitDeposit(tokenId, msg.sender, amount);\\r\\n  }\\r\\n\\r\\n  function withdrawAll() external {\\r\\n    withdraw(balanceOf[msg.sender]);\\r\\n  }\\r\\n\\r\\n  function withdraw(uint amount) public {\\r\\n    uint tokenId = 0;\\r\\n    if (amount == balanceOf[msg.sender]) {\\r\\n      tokenId = tokenIds[msg.sender];\\r\\n    }\\r\\n    withdrawToken(amount, tokenId);\\r\\n    IVoter(voter).emitWithdraw(tokenId, msg.sender, amount);\\r\\n  }\\r\\n\\r\\n  function withdrawToken(uint amount, uint tokenId) public {\\r\\n    if (tokenId > 0) {\\r\\n      _unlockVeToken(msg.sender, tokenId);\\r\\n    }\\r\\n    _withdraw(amount);\\r\\n  }\\r\\n\\r\\n  /// @dev Balance should be recalculated after the lock\\r\\n  ///      For locking a new ve token withdraw all funds and deposit again\\r\\n  function _lockVeToken(address account, uint tokenId) internal {\\r\\n    require(IERC721(ve).ownerOf(tokenId) == account, \\\"Not ve token owner\\\");\\r\\n    if (tokenIds[account] == 0) {\\r\\n      tokenIds[account] = tokenId;\\r\\n      IVoter(voter).attachTokenToGauge(tokenId, account);\\r\\n    }\\r\\n    require(tokenIds[account] == tokenId, \\\"Wrong token\\\");\\r\\n    emit VeTokenLocked(account, tokenId);\\r\\n  }\\r\\n\\r\\n  /// @dev Balance should be recalculated after the unlock\\r\\n  function _unlockVeToken(address account, uint tokenId) internal {\\r\\n    require(tokenId == tokenIds[account], \\\"Wrong token\\\");\\r\\n    tokenIds[account] = 0;\\r\\n    IVoter(voter).detachTokenFromGauge(tokenId, account);\\r\\n    emit VeTokenUnlocked(account, tokenId);\\r\\n  }\\r\\n\\r\\n  /// @dev Similar to Curve https://resources.curve.fi/reward-gauges/boosting-your-crv-rewards#formula\\r\\n  function _derivedBalance(address account) internal override view returns (uint) {\\r\\n    uint _tokenId = tokenIds[account];\\r\\n    uint _balance = balanceOf[account];\\r\\n    uint _derived = _balance * 40 / 100;\\r\\n    uint _adjusted = 0;\\r\\n    uint _supply = IERC20(ve).totalSupply();\\r\\n    if (account == IERC721(ve).ownerOf(_tokenId) && _supply > 0) {\\r\\n      _adjusted = (totalSupply * IVe(ve).balanceOfNFT(_tokenId) / _supply) * 60 / 100;\\r\\n    }\\r\\n    return Math.min((_derived + _adjusted), _balance);\\r\\n  }\\r\\n\\r\\n  function notifyRewardAmount(address token, uint amount) external {\\r\\n    _claimFees();\\r\\n    _notifyRewardAmount(token, amount);\\r\\n  }\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interface/IGauge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\ninterface IGauge {\\r\\n\\r\\n  function notifyRewardAmount(address token, uint amount) external;\\r\\n\\r\\n  function getReward(address account, address[] memory tokens) external;\\r\\n\\r\\n  function claimFees() external returns (uint claimed0, uint claimed1);\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interface/IPair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\ninterface IPair {\\r\\n\\r\\n  // Structure to capture time period obervations every 30 minutes, used for local oracles\\r\\n  struct Observation {\\r\\n    uint timestamp;\\r\\n    uint reserve0Cumulative;\\r\\n    uint reserve1Cumulative;\\r\\n  }\\r\\n\\r\\n  function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\r\\n\\r\\n  function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\r\\n\\r\\n  function burn(address to) external returns (uint amount0, uint amount1);\\r\\n\\r\\n  function mint(address to) external returns (uint liquidity);\\r\\n\\r\\n  function getReserves() external view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast);\\r\\n\\r\\n  function getAmountOut(uint, address) external view returns (uint);\\r\\n\\r\\n  function claimFees() external returns (uint, uint);\\r\\n\\r\\n  function tokens() external returns (address, address);\\r\\n\\r\\n  function token0() external returns (address);\\r\\n\\r\\n  function token1() external returns (address);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interface/IVoter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\ninterface IVoter {\\r\\n\\r\\n  function ve() external view returns (address);\\r\\n\\r\\n  function attachTokenToGauge(uint _tokenId, address account) external;\\r\\n\\r\\n  function detachTokenFromGauge(uint _tokenId, address account) external;\\r\\n\\r\\n  function emitDeposit(uint _tokenId, address account, uint amount) external;\\r\\n\\r\\n  function emitWithdraw(uint _tokenId, address account, uint amount) external;\\r\\n\\r\\n  function distribute(address _gauge) external;\\r\\n\\r\\n  function notifyRewardAmount(uint amount) external;\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interface/IBribe.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\ninterface IBribe {\\r\\n\\r\\n  function notifyRewardAmount(address token, uint amount) external;\\r\\n\\r\\n  function _deposit(uint amount, uint tokenId) external;\\r\\n\\r\\n  function _withdraw(uint amount, uint tokenId) external;\\r\\n\\r\\n  function getRewardForOwner(uint tokenId, address[] memory tokens) external;\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interface/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\nimport \\\"./IERC165.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Required interface of an ERC721 compliant contract.\\r\\n */\\r\\ninterface IERC721 is IERC165 {\\r\\n  /**\\r\\n   * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\r\\n   */\\r\\n  event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\r\\n   */\\r\\n  event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\r\\n   */\\r\\n  event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the number of tokens in ``owner``'s account.\\r\\n   */\\r\\n  function balanceOf(address owner) external view returns (uint256 balance);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the owner of the `tokenId` token.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `tokenId` must exist.\\r\\n   */\\r\\n  function ownerOf(uint256 tokenId) external view returns (address owner);\\r\\n\\r\\n  /**\\r\\n   * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\r\\n   * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `from` cannot be the zero address.\\r\\n   * - `to` cannot be the zero address.\\r\\n   * - `tokenId` token must exist and be owned by `from`.\\r\\n   * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\r\\n   * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n   *\\r\\n   * Emits a {Transfer} event.\\r\\n   */\\r\\n  function safeTransferFrom(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 tokenId\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Transfers `tokenId` token from `from` to `to`.\\r\\n   *\\r\\n   * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `from` cannot be the zero address.\\r\\n   * - `to` cannot be the zero address.\\r\\n   * - `tokenId` token must be owned by `from`.\\r\\n   * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\r\\n   *\\r\\n   * Emits a {Transfer} event.\\r\\n   */\\r\\n  function transferFrom(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 tokenId\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\r\\n   * The approval is cleared when the token is transferred.\\r\\n   *\\r\\n   * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - The caller must own the token or be an approved operator.\\r\\n   * - `tokenId` must exist.\\r\\n   *\\r\\n   * Emits an {Approval} event.\\r\\n   */\\r\\n  function approve(address to, uint256 tokenId) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the account approved for `tokenId` token.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `tokenId` must exist.\\r\\n   */\\r\\n  function getApproved(uint256 tokenId) external view returns (address operator);\\r\\n\\r\\n  /**\\r\\n   * @dev Approve or remove `operator` as an operator for the caller.\\r\\n   * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - The `operator` cannot be the caller.\\r\\n   *\\r\\n   * Emits an {ApprovalForAll} event.\\r\\n   */\\r\\n  function setApprovalForAll(address operator, bool _approved) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\r\\n   *\\r\\n   * See {setApprovalForAll}\\r\\n   */\\r\\n  function isApprovedForAll(address owner, address operator) external view returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @dev Safely transfers `tokenId` token from `from` to `to`.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `from` cannot be the zero address.\\r\\n   * - `to` cannot be the zero address.\\r\\n   * - `tokenId` token must exist and be owned by `from`.\\r\\n   * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\r\\n   * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n   *\\r\\n   * Emits a {Transfer} event.\\r\\n   */\\r\\n  function safeTransferFrom(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 tokenId,\\r\\n    bytes calldata data\\r\\n  ) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interface/IVe.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\ninterface IVe {\\r\\n\\r\\n  enum DepositType {\\r\\n    DEPOSIT_FOR_TYPE,\\r\\n    CREATE_LOCK_TYPE,\\r\\n    INCREASE_LOCK_AMOUNT,\\r\\n    INCREASE_UNLOCK_TIME,\\r\\n    MERGE_TYPE\\r\\n  }\\r\\n\\r\\n  struct Point {\\r\\n    int128 bias;\\r\\n    int128 slope; // # -dweight / dt\\r\\n    uint ts;\\r\\n    uint blk; // block\\r\\n  }\\r\\n  /* We cannot really do block numbers per se b/c slope is per time, not per block\\r\\n  * and per block could be fairly bad b/c Ethereum changes blocktimes.\\r\\n  * What we can do is to extrapolate ***At functions */\\r\\n\\r\\n  struct LockedBalance {\\r\\n    int128 amount;\\r\\n    uint end;\\r\\n  }\\r\\n\\r\\n  function token() external view returns (address);\\r\\n\\r\\n  function balanceOfNFT(uint) external view returns (uint);\\r\\n\\r\\n  function isApprovedOrOwner(address, uint) external view returns (bool);\\r\\n\\r\\n  function createLockFor(uint, uint, address) external returns (uint);\\r\\n\\r\\n  function userPointEpoch(uint tokenId) external view returns (uint);\\r\\n\\r\\n  function epoch() external view returns (uint);\\r\\n\\r\\n  function userPointHistory(uint tokenId, uint loc) external view returns (Point memory);\\r\\n\\r\\n  function pointHistory(uint loc) external view returns (Point memory);\\r\\n\\r\\n  function checkpoint() external;\\r\\n\\r\\n  function depositFor(uint tokenId, uint value) external;\\r\\n\\r\\n  function attachToken(uint tokenId) external;\\r\\n\\r\\n  function detachToken(uint tokenId) external;\\r\\n\\r\\n  function voting(uint tokenId) external;\\r\\n\\r\\n  function abstain(uint tokenId) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/base/reward/MultiRewardsPoolBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\nimport \\\"../../interface/IERC20.sol\\\";\\r\\nimport \\\"../../interface/IMultiRewardsPool.sol\\\";\\r\\nimport \\\"../../lib/Math.sol\\\";\\r\\nimport \\\"../../lib/SafeERC20.sol\\\";\\r\\nimport \\\"../../lib/CheckpointLib.sol\\\";\\r\\nimport \\\"../Reentrancy.sol\\\";\\r\\n\\r\\nabstract contract MultiRewardsPoolBase is Reentrancy, IMultiRewardsPool {\\r\\n  using SafeERC20 for IERC20;\\r\\n  using CheckpointLib for mapping(uint => CheckpointLib.Checkpoint);\\r\\n\\r\\n  /// @dev Operator can add/remove reward tokens\\r\\n  address public operator;\\r\\n\\r\\n  /// @dev The LP token that needs to be staked for rewards\\r\\n  address public immutable override underlying;\\r\\n\\r\\n  uint public override derivedSupply;\\r\\n  mapping(address => uint) public override derivedBalances;\\r\\n\\r\\n  /// @dev Rewards are released over 7 days\\r\\n  uint internal constant DURATION = 7 days;\\r\\n  uint internal constant PRECISION = 10 ** 18;\\r\\n  uint internal constant MAX_REWARD_TOKENS = 10;\\r\\n\\r\\n  /// Default snx staking contract implementation\\r\\n  /// https://github.com/Synthetixio/synthetix/blob/develop/contracts/StakingRewards.sol\\r\\n\\r\\n  /// @dev Reward rate with precision 1e18\\r\\n  mapping(address => uint) public rewardRate;\\r\\n  mapping(address => uint) public periodFinish;\\r\\n  mapping(address => uint) public lastUpdateTime;\\r\\n  mapping(address => uint) public rewardPerTokenStored;\\r\\n\\r\\n  mapping(address => mapping(address => uint)) public lastEarn;\\r\\n  mapping(address => mapping(address => uint)) public userRewardPerTokenStored;\\r\\n\\r\\n  uint public override totalSupply;\\r\\n  mapping(address => uint) public override balanceOf;\\r\\n\\r\\n  address[] public override rewardTokens;\\r\\n  mapping(address => bool) public override isRewardToken;\\r\\n\\r\\n  /// @notice A record of balance checkpoints for each account, by index\\r\\n  mapping(address => mapping(uint => CheckpointLib.Checkpoint)) public checkpoints;\\r\\n  /// @notice The number of checkpoints for each account\\r\\n  mapping(address => uint) public numCheckpoints;\\r\\n  /// @notice A record of balance checkpoints for each token, by index\\r\\n  mapping(uint => CheckpointLib.Checkpoint) public supplyCheckpoints;\\r\\n  /// @notice The number of checkpoints\\r\\n  uint public supplyNumCheckpoints;\\r\\n  /// @notice A record of balance checkpoints for each token, by index\\r\\n  mapping(address => mapping(uint => CheckpointLib.Checkpoint)) public rewardPerTokenCheckpoints;\\r\\n  /// @notice The number of checkpoints for each token\\r\\n  mapping(address => uint) public rewardPerTokenNumCheckpoints;\\r\\n\\r\\n  event Deposit(address indexed from, uint amount);\\r\\n  event Withdraw(address indexed from, uint amount);\\r\\n  event NotifyReward(address indexed from, address indexed reward, uint amount);\\r\\n  event ClaimRewards(address indexed from, address indexed reward, uint amount, address recepient);\\r\\n\\r\\n  constructor(address _stake, address _operator, address[] memory _allowedRewardTokens) {\\r\\n    underlying = _stake;\\r\\n    operator = _operator;\\r\\n    for (uint i; i < _allowedRewardTokens.length; i++) {\\r\\n      if (_allowedRewardTokens[i] != address(0)) {\\r\\n        _registerRewardToken(_allowedRewardTokens[i]);\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  modifier onlyOperator() {\\r\\n    require(msg.sender == operator, \\\"Not operator\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  //**************************************************************************\\r\\n  //************************ VIEWS *******************************************\\r\\n  //**************************************************************************\\r\\n\\r\\n  function rewardTokensLength() external view override returns (uint) {\\r\\n    return rewardTokens.length;\\r\\n  }\\r\\n\\r\\n  function rewardPerToken(address token) external view returns (uint) {\\r\\n    return _rewardPerToken(token);\\r\\n  }\\r\\n\\r\\n  function _rewardPerToken(address token) internal view returns (uint) {\\r\\n    if (derivedSupply == 0) {\\r\\n      return rewardPerTokenStored[token];\\r\\n    }\\r\\n    return rewardPerTokenStored[token]\\r\\n    + (\\r\\n    (_lastTimeRewardApplicable(token) - Math.min(lastUpdateTime[token], periodFinish[token]))\\r\\n    * rewardRate[token]\\r\\n    / derivedSupply\\r\\n    );\\r\\n  }\\r\\n\\r\\n  function derivedBalance(address account) external view override returns (uint) {\\r\\n    return _derivedBalance(account);\\r\\n  }\\r\\n\\r\\n  function left(address token) external view override returns (uint) {\\r\\n    if (block.timestamp >= periodFinish[token]) return 0;\\r\\n    uint _remaining = periodFinish[token] - block.timestamp;\\r\\n    return _remaining * rewardRate[token] / PRECISION;\\r\\n  }\\r\\n\\r\\n  function earned(address token, address account) external view override returns (uint) {\\r\\n    return _earned(token, account);\\r\\n  }\\r\\n\\r\\n  //**************************************************************************\\r\\n  //************************ OPERATOR ACTIONS ********************************\\r\\n  //**************************************************************************\\r\\n\\r\\n  function registerRewardToken(address token) external onlyOperator {\\r\\n    _registerRewardToken(token);\\r\\n  }\\r\\n\\r\\n  function _registerRewardToken(address token) internal {\\r\\n    require(rewardTokens.length < MAX_REWARD_TOKENS, \\\"Too many reward tokens\\\");\\r\\n    require(!isRewardToken[token], \\\"Already registered\\\");\\r\\n    isRewardToken[token] = true;\\r\\n    rewardTokens.push(token);\\r\\n  }\\r\\n\\r\\n  function removeRewardToken(address token) external onlyOperator {\\r\\n    require(periodFinish[token] < block.timestamp, \\\"Rewards not ended\\\");\\r\\n    require(isRewardToken[token], \\\"Not reward token\\\");\\r\\n\\r\\n    isRewardToken[token] = false;\\r\\n    uint length = rewardTokens.length;\\r\\n    require(length > 3, \\\"First 3 tokens should not be removed\\\");\\r\\n    // keep 3 tokens as guarantee against malicious actions\\r\\n    // assume it will be DYST + pool tokens\\r\\n    uint i = 3;\\r\\n    bool found = false;\\r\\n    for (; i < length; i++) {\\r\\n      address t = rewardTokens[i];\\r\\n      if (t == token) {\\r\\n        found = true;\\r\\n        break;\\r\\n      }\\r\\n    }\\r\\n    require(found, \\\"First tokens forbidden to remove\\\");\\r\\n    rewardTokens[i] = rewardTokens[length - 1];\\r\\n    rewardTokens.pop();\\r\\n  }\\r\\n\\r\\n  //**************************************************************************\\r\\n  //************************ USER ACTIONS ************************************\\r\\n  //**************************************************************************\\r\\n\\r\\n  function _deposit(uint amount) internal virtual lock {\\r\\n    require(amount > 0, \\\"Zero amount\\\");\\r\\n    _increaseBalance(msg.sender, amount);\\r\\n    IERC20(underlying).safeTransferFrom(msg.sender, address(this), amount);\\r\\n    emit Deposit(msg.sender, amount);\\r\\n  }\\r\\n\\r\\n  function _increaseBalance(address account, uint amount) internal virtual {\\r\\n    _updateRewardForAllTokens();\\r\\n\\r\\n    totalSupply += amount;\\r\\n    balanceOf[account] += amount;\\r\\n\\r\\n    _updateDerivedBalanceAndWriteCheckpoints(account);\\r\\n  }\\r\\n\\r\\n  function _withdraw(uint amount) internal lock virtual {\\r\\n    _decreaseBalance(msg.sender, amount);\\r\\n    IERC20(underlying).safeTransfer(msg.sender, amount);\\r\\n    emit Withdraw(msg.sender, amount);\\r\\n  }\\r\\n\\r\\n  function _decreaseBalance(address account, uint amount) internal virtual {\\r\\n    _updateRewardForAllTokens();\\r\\n\\r\\n    totalSupply -= amount;\\r\\n    balanceOf[account] -= amount;\\r\\n\\r\\n    _updateDerivedBalanceAndWriteCheckpoints(account);\\r\\n  }\\r\\n\\r\\n  /// @dev Implement restriction checks!\\r\\n  function _getReward(address account, address[] memory tokens, address recipient) internal lock virtual {\\r\\n\\r\\n    for (uint i = 0; i < tokens.length; i++) {\\r\\n      (rewardPerTokenStored[tokens[i]], lastUpdateTime[tokens[i]]) = _updateRewardPerToken(tokens[i], type(uint).max, true);\\r\\n\\r\\n      uint _reward = _earned(tokens[i], account);\\r\\n      lastEarn[tokens[i]][account] = block.timestamp;\\r\\n      userRewardPerTokenStored[tokens[i]][account] = rewardPerTokenStored[tokens[i]];\\r\\n      if (_reward > 0) {\\r\\n        IERC20(tokens[i]).safeTransfer(recipient, _reward);\\r\\n      }\\r\\n\\r\\n      emit ClaimRewards(msg.sender, tokens[i], _reward, recipient);\\r\\n    }\\r\\n\\r\\n    _updateDerivedBalanceAndWriteCheckpoints(account);\\r\\n  }\\r\\n\\r\\n  function _updateDerivedBalanceAndWriteCheckpoints(address account) internal {\\r\\n    uint __derivedBalance = derivedBalances[account];\\r\\n    derivedSupply -= __derivedBalance;\\r\\n    __derivedBalance = _derivedBalance(account);\\r\\n    derivedBalances[account] = __derivedBalance;\\r\\n    derivedSupply += __derivedBalance;\\r\\n\\r\\n    _writeCheckpoint(account, __derivedBalance);\\r\\n    _writeSupplyCheckpoint();\\r\\n  }\\r\\n\\r\\n  //**************************************************************************\\r\\n  //************************ REWARDS CALCULATIONS ****************************\\r\\n  //**************************************************************************\\r\\n\\r\\n  // earned is an estimation, it won't be exact till the supply > rewardPerToken calculations have run\\r\\n  function _earned(address token, address account) internal view returns (uint) {\\r\\n    // zero checkpoints means zero deposits\\r\\n    if (numCheckpoints[account] == 0) {\\r\\n      return 0;\\r\\n    }\\r\\n    // last claim rewards time\\r\\n    uint _startTimestamp = Math.max(lastEarn[token][account], rewardPerTokenCheckpoints[token][0].timestamp);\\r\\n\\r\\n    // find an index of the balance that the user had on the last claim\\r\\n    uint _startIndex = _getPriorBalanceIndex(account, _startTimestamp);\\r\\n    uint _endIndex = numCheckpoints[account] - 1;\\r\\n\\r\\n    uint reward = 0;\\r\\n\\r\\n    // calculate previous snapshots if exist\\r\\n    if (_endIndex > 0) {\\r\\n      for (uint i = _startIndex; i <= _endIndex - 1; i++) {\\r\\n        CheckpointLib.Checkpoint memory cp0 = checkpoints[account][i];\\r\\n        CheckpointLib.Checkpoint memory cp1 = checkpoints[account][i + 1];\\r\\n        (uint _rewardPerTokenStored0,) = _getPriorRewardPerToken(token, cp0.timestamp);\\r\\n        (uint _rewardPerTokenStored1,) = _getPriorRewardPerToken(token, cp1.timestamp);\\r\\n        reward += cp0.value * (_rewardPerTokenStored1 - _rewardPerTokenStored0) / PRECISION;\\r\\n      }\\r\\n    }\\r\\n\\r\\n    CheckpointLib.Checkpoint memory cp = checkpoints[account][_endIndex];\\r\\n    (uint _rewardPerTokenStored,) = _getPriorRewardPerToken(token, cp.timestamp);\\r\\n    reward += cp.value * (_rewardPerToken(token) - Math.max(_rewardPerTokenStored, userRewardPerTokenStored[token][account])) / PRECISION;\\r\\n    return reward;\\r\\n  }\\r\\n\\r\\n  function _derivedBalance(address account) internal virtual view returns (uint) {\\r\\n    // supposed to be implemented in a parent contract\\r\\n    return balanceOf[account];\\r\\n  }\\r\\n\\r\\n  /// @dev Update stored rewardPerToken values without the last one snapshot\\r\\n  ///      If the contract will get \\\"out of gas\\\" error on users actions this will be helpful\\r\\n  function batchUpdateRewardPerToken(address token, uint maxRuns) external {\\r\\n    (rewardPerTokenStored[token], lastUpdateTime[token]) = _updateRewardPerToken(token, maxRuns, false);\\r\\n  }\\r\\n\\r\\n  function _updateRewardForAllTokens() internal {\\r\\n    uint length = rewardTokens.length;\\r\\n    for (uint i; i < length; i++) {\\r\\n      address token = rewardTokens[i];\\r\\n      (rewardPerTokenStored[token], lastUpdateTime[token]) = _updateRewardPerToken(token, type(uint).max, true);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @dev Should be called only with properly updated snapshots, or with actualLast=false\\r\\n  function _updateRewardPerToken(address token, uint maxRuns, bool actualLast) internal returns (uint, uint) {\\r\\n    uint _startTimestamp = lastUpdateTime[token];\\r\\n    uint reward = rewardPerTokenStored[token];\\r\\n\\r\\n    if (supplyNumCheckpoints == 0) {\\r\\n      return (reward, _startTimestamp);\\r\\n    }\\r\\n\\r\\n    if (rewardRate[token] == 0) {\\r\\n      return (reward, block.timestamp);\\r\\n    }\\r\\n    uint _startIndex = _getPriorSupplyIndex(_startTimestamp);\\r\\n    uint _endIndex = Math.min(supplyNumCheckpoints - 1, maxRuns);\\r\\n\\r\\n    if (_endIndex > 0) {\\r\\n      for (uint i = _startIndex; i <= _endIndex - 1; i++) {\\r\\n        CheckpointLib.Checkpoint memory sp0 = supplyCheckpoints[i];\\r\\n        if (sp0.value > 0) {\\r\\n          CheckpointLib.Checkpoint memory sp1 = supplyCheckpoints[i + 1];\\r\\n          (uint _reward, uint _endTime) = _calcRewardPerToken(\\r\\n            token,\\r\\n            sp1.timestamp,\\r\\n            sp0.timestamp,\\r\\n            sp0.value,\\r\\n            _startTimestamp\\r\\n          );\\r\\n          reward += _reward;\\r\\n          _writeRewardPerTokenCheckpoint(token, reward, _endTime);\\r\\n          _startTimestamp = _endTime;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n\\r\\n    // need to override the last value with actual numbers only on deposit/withdraw/claim/notify actions\\r\\n    if (actualLast) {\\r\\n      CheckpointLib.Checkpoint memory sp = supplyCheckpoints[_endIndex];\\r\\n      if (sp.value > 0) {\\r\\n        (uint _reward,) = _calcRewardPerToken(token, _lastTimeRewardApplicable(token), Math.max(sp.timestamp, _startTimestamp), sp.value, _startTimestamp);\\r\\n        reward += _reward;\\r\\n        _writeRewardPerTokenCheckpoint(token, reward, block.timestamp);\\r\\n        _startTimestamp = block.timestamp;\\r\\n      }\\r\\n    }\\r\\n\\r\\n    return (reward, _startTimestamp);\\r\\n  }\\r\\n\\r\\n  function _calcRewardPerToken(\\r\\n    address token,\\r\\n    uint lastSupplyTs1,\\r\\n    uint lastSupplyTs0,\\r\\n    uint supply,\\r\\n    uint startTimestamp\\r\\n  ) internal view returns (uint, uint) {\\r\\n    uint endTime = Math.max(lastSupplyTs1, startTimestamp);\\r\\n    uint _periodFinish = periodFinish[token];\\r\\n    return (\\r\\n    (Math.min(endTime, _periodFinish) - Math.min(Math.max(lastSupplyTs0, startTimestamp), _periodFinish))\\r\\n    * rewardRate[token] / supply\\r\\n    , endTime);\\r\\n  }\\r\\n\\r\\n  /// @dev Returns the last time the reward was modified or periodFinish if the reward has ended\\r\\n  function _lastTimeRewardApplicable(address token) internal view returns (uint) {\\r\\n    return Math.min(block.timestamp, periodFinish[token]);\\r\\n  }\\r\\n\\r\\n  //**************************************************************************\\r\\n  //************************ NOTIFY ******************************************\\r\\n  //**************************************************************************\\r\\n\\r\\n  function _notifyRewardAmount(address token, uint amount) internal lock virtual {\\r\\n    require(token != underlying, \\\"Wrong token for rewards\\\");\\r\\n    require(amount > 0, \\\"Zero amount\\\");\\r\\n    require(isRewardToken[token], \\\"Token not allowed\\\");\\r\\n    if (rewardRate[token] == 0) {\\r\\n      _writeRewardPerTokenCheckpoint(token, 0, block.timestamp);\\r\\n    }\\r\\n    (rewardPerTokenStored[token], lastUpdateTime[token]) = _updateRewardPerToken(token, type(uint).max, true);\\r\\n\\r\\n    if (block.timestamp >= periodFinish[token]) {\\r\\n      IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\\r\\n      rewardRate[token] = amount * PRECISION / DURATION;\\r\\n    } else {\\r\\n      uint _remaining = periodFinish[token] - block.timestamp;\\r\\n      uint _left = _remaining * rewardRate[token];\\r\\n      // not sure what the reason was in the original solidly implementation for this restriction\\r\\n      // however, by design probably it is a good idea against human errors\\r\\n      require(amount > _left / PRECISION, \\\"Amount should be higher than remaining rewards\\\");\\r\\n      IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\\r\\n      rewardRate[token] = (amount * PRECISION + _left) / DURATION;\\r\\n    }\\r\\n\\r\\n    periodFinish[token] = block.timestamp + DURATION;\\r\\n    emit NotifyReward(msg.sender, token, amount);\\r\\n  }\\r\\n\\r\\n  //**************************************************************************\\r\\n  //************************ CHECKPOINTS *************************************\\r\\n  //**************************************************************************\\r\\n\\r\\n  function getPriorBalanceIndex(address account, uint timestamp) external view returns (uint) {\\r\\n    return _getPriorBalanceIndex(account, timestamp);\\r\\n  }\\r\\n\\r\\n  /// @notice Determine the prior balance for an account as of a block number\\r\\n  /// @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\\r\\n  /// @param account The address of the account to check\\r\\n  /// @param timestamp The timestamp to get the balance at\\r\\n  /// @return The balance the account had as of the given block\\r\\n  function _getPriorBalanceIndex(address account, uint timestamp) internal view returns (uint) {\\r\\n    uint nCheckpoints = numCheckpoints[account];\\r\\n    if (nCheckpoints == 0) {\\r\\n      return 0;\\r\\n    }\\r\\n    return checkpoints[account].findLowerIndex(nCheckpoints, timestamp);\\r\\n  }\\r\\n\\r\\n  function getPriorSupplyIndex(uint timestamp) external view returns (uint) {\\r\\n    return _getPriorSupplyIndex(timestamp);\\r\\n  }\\r\\n\\r\\n  function _getPriorSupplyIndex(uint timestamp) internal view returns (uint) {\\r\\n    uint nCheckpoints = supplyNumCheckpoints;\\r\\n    if (nCheckpoints == 0) {\\r\\n      return 0;\\r\\n    }\\r\\n    return supplyCheckpoints.findLowerIndex(nCheckpoints, timestamp);\\r\\n  }\\r\\n\\r\\n  function getPriorRewardPerToken(address token, uint timestamp) external view returns (uint, uint) {\\r\\n    return _getPriorRewardPerToken(token, timestamp);\\r\\n  }\\r\\n\\r\\n  function _getPriorRewardPerToken(address token, uint timestamp) internal view returns (uint, uint) {\\r\\n    uint nCheckpoints = rewardPerTokenNumCheckpoints[token];\\r\\n    if (nCheckpoints == 0) {\\r\\n      return (0, 0);\\r\\n    }\\r\\n    mapping(uint => CheckpointLib.Checkpoint) storage cps = rewardPerTokenCheckpoints[token];\\r\\n    uint lower = cps.findLowerIndex(nCheckpoints, timestamp);\\r\\n    CheckpointLib.Checkpoint memory cp = cps[lower];\\r\\n    return (cp.value, cp.timestamp);\\r\\n  }\\r\\n\\r\\n  function _writeCheckpoint(address account, uint balance) internal {\\r\\n    uint _timestamp = block.timestamp;\\r\\n    uint _nCheckPoints = numCheckpoints[account];\\r\\n\\r\\n    if (_nCheckPoints > 0 && checkpoints[account][_nCheckPoints - 1].timestamp == _timestamp) {\\r\\n      checkpoints[account][_nCheckPoints - 1].value = balance;\\r\\n    } else {\\r\\n      checkpoints[account][_nCheckPoints] = CheckpointLib.Checkpoint(_timestamp, balance);\\r\\n      numCheckpoints[account] = _nCheckPoints + 1;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function _writeRewardPerTokenCheckpoint(address token, uint reward, uint timestamp) internal {\\r\\n    uint _nCheckPoints = rewardPerTokenNumCheckpoints[token];\\r\\n\\r\\n    if (_nCheckPoints > 0 && rewardPerTokenCheckpoints[token][_nCheckPoints - 1].timestamp == timestamp) {\\r\\n      rewardPerTokenCheckpoints[token][_nCheckPoints - 1].value = reward;\\r\\n    } else {\\r\\n      rewardPerTokenCheckpoints[token][_nCheckPoints] = CheckpointLib.Checkpoint(timestamp, reward);\\r\\n      rewardPerTokenNumCheckpoints[token] = _nCheckPoints + 1;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function _writeSupplyCheckpoint() internal {\\r\\n    uint _nCheckPoints = supplyNumCheckpoints;\\r\\n    uint _timestamp = block.timestamp;\\r\\n\\r\\n    if (_nCheckPoints > 0 && supplyCheckpoints[_nCheckPoints - 1].timestamp == _timestamp) {\\r\\n      supplyCheckpoints[_nCheckPoints - 1].value = derivedSupply;\\r\\n    } else {\\r\\n      supplyCheckpoints[_nCheckPoints] = CheckpointLib.Checkpoint(_timestamp, derivedSupply);\\r\\n      supplyNumCheckpoints = _nCheckPoints + 1;\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interface/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC165 standard, as defined in the\\r\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\r\\n *\\r\\n * Implementers can declare support of contract interfaces, which can then be\\r\\n * queried by others ({ERC165Checker}).\\r\\n *\\r\\n * For an implementation, see {ERC165}.\\r\\n */\\r\\ninterface IERC165 {\\r\\n  /**\\r\\n   * @dev Returns true if this contract implements the interface defined by\\r\\n   * `interfaceId`. See the corresponding\\r\\n   * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\r\\n   * to learn more about how these ids are created.\\r\\n   *\\r\\n   * This function call must use less than 30 000 gas.\\r\\n   */\\r\\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interface/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n  /**\\r\\n   * @dev Returns the amount of tokens in existence.\\r\\n   */\\r\\n  function totalSupply() external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the amount of tokens owned by `account`.\\r\\n   */\\r\\n  function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\r\\n   *\\r\\n   * Returns a boolean value indicating whether the operation succeeded.\\r\\n   *\\r\\n   * Emits a {Transfer} event.\\r\\n   */\\r\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the remaining number of tokens that `spender` will be\\r\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n   * zero by default.\\r\\n   *\\r\\n   * This value changes when {approve} or {transferFrom} are called.\\r\\n   */\\r\\n  function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n   *\\r\\n   * Returns a boolean value indicating whether the operation succeeded.\\r\\n   *\\r\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n   * that someone may use both the old and the new allowance by unfortunate\\r\\n   * transaction ordering. One possible solution to mitigate this race\\r\\n   * condition is to first reduce the spender's allowance to 0 and set the\\r\\n   * desired value afterwards:\\r\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n   *\\r\\n   * Emits an {Approval} event.\\r\\n   */\\r\\n  function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n   * allowance mechanism. `amount` is then deducted from the caller's\\r\\n   * allowance.\\r\\n   *\\r\\n   * Returns a boolean value indicating whether the operation succeeded.\\r\\n   *\\r\\n   * Emits a {Transfer} event.\\r\\n   */\\r\\n  function transferFrom(\\r\\n    address sender,\\r\\n    address recipient,\\r\\n    uint256 amount\\r\\n  ) external returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n   * another (`to`).\\r\\n   *\\r\\n   * Note that `value` may be zero.\\r\\n   */\\r\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n   * a call to {approve}. `value` is the new allowance.\\r\\n   */\\r\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interface/IMultiRewardsPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\ninterface IMultiRewardsPool {\\r\\n\\r\\n  function underlying() external view returns (address);\\r\\n\\r\\n  function derivedSupply() external view returns (uint);\\r\\n\\r\\n  function derivedBalances(address account) external view returns (uint);\\r\\n\\r\\n  function totalSupply() external view returns (uint);\\r\\n\\r\\n  function balanceOf(address account) external view returns (uint);\\r\\n\\r\\n  function rewardTokens(uint id) external view returns (address);\\r\\n\\r\\n  function isRewardToken(address token) external view returns (bool);\\r\\n\\r\\n  function rewardTokensLength() external view returns (uint);\\r\\n\\r\\n  function derivedBalance(address account) external view returns (uint);\\r\\n\\r\\n  function left(address token) external view returns (uint);\\r\\n\\r\\n  function earned(address token, address account) external view returns (uint);\\r\\n\\r\\n  function registerRewardToken(address token) external;\\r\\n\\r\\n  function removeRewardToken(address token) external;\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/lib/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\nlibrary Math {\\r\\n\\r\\n  function max(uint a, uint b) internal pure returns (uint) {\\r\\n    return a >= b ? a : b;\\r\\n  }\\r\\n\\r\\n  function min(uint a, uint b) internal pure returns (uint) {\\r\\n    return a < b ? a : b;\\r\\n  }\\r\\n\\r\\n  function positiveInt128(int128 value) internal pure returns (int128) {\\r\\n    return value < 0 ? int128(0) : value;\\r\\n  }\\r\\n\\r\\n  function closeTo(uint a, uint b, uint target) internal pure returns (bool) {\\r\\n    if (a > b) {\\r\\n      if (a - b <= target) {\\r\\n        return true;\\r\\n      }\\r\\n    } else {\\r\\n      if (b - a <= target) {\\r\\n        return true;\\r\\n      }\\r\\n    }\\r\\n    return false;\\r\\n  }\\r\\n\\r\\n  function sqrt(uint y) internal pure returns (uint z) {\\r\\n    if (y > 3) {\\r\\n      z = y;\\r\\n      uint x = y / 2 + 1;\\r\\n      while (x < z) {\\r\\n        z = x;\\r\\n        x = (y / x + x) / 2;\\r\\n      }\\r\\n    } else if (y != 0) {\\r\\n      z = 1;\\r\\n    }\\r\\n  }\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/lib/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\nimport \\\"../interface/IERC20.sol\\\";\\r\\nimport \\\"./Address.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title SafeERC20\\r\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\r\\n * contract returns false). Tokens that return no value (and instead revert or\\r\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\r\\n * successful.\\r\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\r\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\r\\n */\\r\\nlibrary SafeERC20 {\\r\\n  using Address for address;\\r\\n\\r\\n  function safeTransfer(\\r\\n    IERC20 token,\\r\\n    address to,\\r\\n    uint value\\r\\n  ) internal {\\r\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\r\\n  }\\r\\n\\r\\n  function safeTransferFrom(\\r\\n    IERC20 token,\\r\\n    address from,\\r\\n    address to,\\r\\n    uint value\\r\\n  ) internal {\\r\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\r\\n  }\\r\\n\\r\\n  function safeIncreaseAllowance(\\r\\n    IERC20 token,\\r\\n    address spender,\\r\\n    uint value\\r\\n  ) internal {\\r\\n    uint newAllowance = token.allowance(address(this), spender) + value;\\r\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n  function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n    // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\r\\n    // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n    bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\r\\n    if (returndata.length > 0) {\\r\\n      // Return data is optional\\r\\n      require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\r\\n    }\\r\\n  }\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/lib/CheckpointLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\nlibrary CheckpointLib {\\r\\n\\r\\n  /// @notice A checkpoint for uint value\\r\\n  struct Checkpoint {\\r\\n    uint timestamp;\\r\\n    uint value;\\r\\n  }\\r\\n\\r\\n  function findLowerIndex(mapping(uint => Checkpoint) storage checkpoints, uint size, uint timestamp) internal view returns (uint) {\\r\\n    require(size != 0, \\\"Empty checkpoints\\\");\\r\\n\\r\\n    // First check most recent value\\r\\n    if (checkpoints[size - 1].timestamp <= timestamp) {\\r\\n      return (size - 1);\\r\\n    }\\r\\n\\r\\n    // Next check implicit zero value\\r\\n    if (checkpoints[0].timestamp > timestamp) {\\r\\n      return 0;\\r\\n    }\\r\\n\\r\\n    uint lower = 0;\\r\\n    uint upper = size - 1;\\r\\n    while (upper > lower) {\\r\\n      // ceil, avoiding overflow\\r\\n      uint center = upper - (upper - lower) / 2;\\r\\n      Checkpoint memory cp = checkpoints[center];\\r\\n      if (cp.timestamp == timestamp) {\\r\\n        return center;\\r\\n      } else if (cp.timestamp < timestamp) {\\r\\n        lower = center;\\r\\n      } else {\\r\\n        upper = center - 1;\\r\\n      }\\r\\n    }\\r\\n    return lower;\\r\\n  }\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/base/Reentrancy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\nabstract contract Reentrancy {\\r\\n\\r\\n  /// @dev simple re-entrancy check\\r\\n  uint internal _unlocked = 1;\\r\\n\\r\\n  modifier lock() {\\r\\n    require(_unlocked == 1, \\\"Reentrant call\\\");\\r\\n    _unlocked = 2;\\r\\n    _;\\r\\n    _unlocked = 1;\\r\\n  }\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/lib/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n  /**\\r\\n   * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\r\\n     *\\r\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\r\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\r\\n     * constructor.\\r\\n     * ====\\r\\n     */\\r\\n  function isContract(address account) internal view returns (bool) {\\r\\n    // This method relies on extcodesize/address.code.length, which returns 0\\r\\n    // for contracts in construction, since the code is only stored at the end\\r\\n    // of the constructor execution.\\r\\n\\r\\n    return account.code.length > 0;\\r\\n  }\\r\\n\\r\\n  function functionCall(\\r\\n    address target,\\r\\n    bytes memory data,\\r\\n    string memory errorMessage\\r\\n  ) internal returns (bytes memory) {\\r\\n    require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n    (bool success, bytes memory returndata) = target.call(data);\\r\\n    return verifyCallResult(success, returndata, errorMessage);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\r\\n     * revert reason using the provided one.\\r\\n     *\\r\\n     * _Available since v4.3._\\r\\n     */\\r\\n  function verifyCallResult(\\r\\n    bool success,\\r\\n    bytes memory returndata,\\r\\n    string memory errorMessage\\r\\n  ) internal pure returns (bytes memory) {\\r\\n    if (success) {\\r\\n      return returndata;\\r\\n    } else {\\r\\n      // Look for revert reason and bubble it up if present\\r\\n      if (returndata.length > 0) {\\r\\n        // The easiest way to bubble the revert reason is using memory via assembly\\r\\n        assembly {\\r\\n          let returndata_size := mload(returndata)\\r\\n          revert(add(32, returndata), returndata_size)\\r\\n        }\\r\\n      } else {\\r\\n        revert(errorMessage);\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stake\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bribe\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ve\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_allowedRewardTokens\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimed0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimed1\",\"type\":\"uint256\"}],\"name\":\"ClaimFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recepient\",\"type\":\"address\"}],\"name\":\"ClaimRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NotifyReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"VeTokenLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"VeTokenUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxRuns\",\"type\":\"uint256\"}],\"name\":\"batchUpdateRewardPerToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bribe\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"checkpoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"claimed0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimed1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"depositAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"derivedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"derivedBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"derivedSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fees0\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fees1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"getPriorBalanceIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"getPriorRewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"getPriorSupplyIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isRewardToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastEarn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"left\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"notifyRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"numCheckpoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"periodFinish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"registerRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"removeRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardPerTokenCheckpoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardPerTokenNumCheckpoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardTokensLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"supplyCheckpoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supplyNumCheckpoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ve\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Gauge", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000002be4d59697d532b9c3a09163aef62f34c0bce603000000000000000000000000693c42a11aa120fabcc4610ff86cc39e7707f1d0000000000000000000000000060fa7ad32c510f12550c7a967999810dafc5697000000000000000000000000649bdf58b09a0cd4ac848b42c4b5e1390a72a49a00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf1270000000000000000000000000a3fa99a148fa48d14ed51d610c367c61876997f100000000000000000000000039ab6574c289c3ae4d88500eec792ab5b947a5eb", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}