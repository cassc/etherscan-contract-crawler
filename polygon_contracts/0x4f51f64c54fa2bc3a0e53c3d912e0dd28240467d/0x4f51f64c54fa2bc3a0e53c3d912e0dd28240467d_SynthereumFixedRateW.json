{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"deploy/@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"deploy/@openzeppelin/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"deploy/@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"deploy/@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"deploy/@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"deploy/@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"deploy/@openzeppelin/contracts/access/AccessControlEnumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {grantRole} to track enumerable memberships\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override(AccessControl, IAccessControl) {\\n        super.grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {revokeRole} to track enumerable memberships\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override(AccessControl, IAccessControl) {\\n        super.revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev Overload {renounceRole} to track enumerable memberships\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override(AccessControl, IAccessControl) {\\n        super.renounceRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_setupRole} to track enumerable memberships\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual override {\\n        super._setupRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n}\\n\"\r\n    },\r\n    \"deploy/@openzeppelin/contracts/access/IAccessControlEnumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"deploy/@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/fixed-rate/v1/FixedRateWrapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.4;\\n\\nimport {IERC20} from '../../../@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport {IStandardERC20} from '../../base/interfaces/IStandardERC20.sol';\\nimport {\\n  IMintableBurnableERC20\\n} from '../../tokens/interfaces/IMintableBurnableERC20.sol';\\nimport {ISynthereumFixedRateWrapper} from './interfaces/IFixedRateWrapper.sol';\\nimport {ISynthereumFinder} from '../../core/interfaces/IFinder.sol';\\nimport {\\n  ReentrancyGuard\\n} from '../../../@openzeppelin/contracts/security/ReentrancyGuard.sol';\\nimport {ERC2771Context} from '../../common/ERC2771Context.sol';\\nimport {\\n  AccessControlEnumerable,\\n  Context\\n} from '../../../@openzeppelin/contracts/access/AccessControlEnumerable.sol';\\nimport {SynthereumInterfaces} from '../../core/Constants.sol';\\n\\ncontract SynthereumFixedRateWrapper is\\n  ISynthereumFixedRateWrapper,\\n  AccessControlEnumerable,\\n  ERC2771Context,\\n  ReentrancyGuard\\n{\\n  struct ConstructorParams {\\n    // Synthereum finder\\n    ISynthereumFinder finder;\\n    // Synthereum fixed rate version\\n    uint8 version;\\n    // ERC20 collateral token\\n    IStandardERC20 pegCollateralToken;\\n    // ERC20 synthetic token\\n    IMintableBurnableERC20 fixedRateToken;\\n    // The addresses of admin, maintainer\\n    Roles roles;\\n    // Conversion rate\\n    uint256 rate;\\n  }\\n\\n  //----------------------------------------\\n  // Constants\\n  //----------------------------------------\\n\\n  string public constant override typology = 'FIXED_RATE';\\n\\n  bytes32 public constant MAINTAINER_ROLE = keccak256('Maintainer');\\n\\n  // Precision for math operations\\n  uint256 public constant PRECISION = 1e18;\\n\\n  // Current rate set for the wrapper\\n  uint256 private immutable rate;\\n\\n  // The fixedRate synthetic token associated with the wrapper\\n  IMintableBurnableERC20 private immutable fixedRateToken;\\n\\n  // The peg collateral token associated with the wrapper\\n  IStandardERC20 private immutable pegCollateralToken;\\n\\n  // Version of the fixed rate wrapper\\n  uint8 private immutable fixedRateVersion;\\n\\n  //----------------------------------------\\n  // Storage\\n  //----------------------------------------\\n\\n  // Storage from interface\\n  ISynthereumFinder private finder;\\n\\n  // Total amount of peg collateral tokens deposited\\n  uint256 private totalDeposited;\\n\\n  // Total amount of synthetic tokens minted\\n  uint256 private totalSyntheticTokens;\\n\\n  // When contract is paused minting is revoked\\n  bool private paused;\\n\\n  //----------------------------------------\\n  // Modifiers\\n  //----------------------------------------\\n\\n  modifier isActive() {\\n    require(!paused, 'Contract has been paused');\\n    _;\\n  }\\n\\n  modifier onlyMaintainer() {\\n    require(\\n      hasRole(MAINTAINER_ROLE, _msgSender()),\\n      'Sender must be the maintainer'\\n    );\\n    _;\\n  }\\n\\n  //----------------------------------------\\n  // Events\\n  //----------------------------------------\\n\\n  event Wrap(uint256 amountTokens, address recipient);\\n  event Unwrap(uint256 amountCollateral, address recipient);\\n  event ContractPaused();\\n  event ContractResumed();\\n\\n  //----------------------------------------\\n  // Constructor\\n  //----------------------------------------\\n\\n  /**\\n   * @notice Constructs the fixed rate wrapper contract\\n   * @param params The parameters passed from deployer to construct the fixed rate wrapper contract\\n   */\\n  constructor(ConstructorParams memory params) nonReentrant {\\n    require(\\n      params.pegCollateralToken.decimals() <= 18,\\n      'Collateral has more than 18 decimals'\\n    );\\n\\n    require(\\n      params.fixedRateToken.decimals() == 18,\\n      'FixedRate token has more or less than 18 decimals'\\n    );\\n\\n    rate = params.rate;\\n    pegCollateralToken = params.pegCollateralToken;\\n    fixedRateToken = params.fixedRateToken;\\n    fixedRateVersion = params.version;\\n    finder = params.finder;\\n    _setRoleAdmin(DEFAULT_ADMIN_ROLE, DEFAULT_ADMIN_ROLE);\\n    _setRoleAdmin(MAINTAINER_ROLE, DEFAULT_ADMIN_ROLE);\\n    _setupRole(DEFAULT_ADMIN_ROLE, params.roles.admin);\\n    _setupRole(MAINTAINER_ROLE, params.roles.maintainer);\\n  }\\n\\n  //----------------------------------------\\n  // External\\n  //----------------------------------------\\n\\n  /**\\n   * @notice Receives an amount of peg collateral tokens and mints new synthetic tokens based on the rate\\n   * @param _collateral The amount of peg collateral tokens to be wrapped\\n   * @param _recipient Address of the recipient to receive the newly minted fixed rate synthetic tokens\\n   * @return amountTokens The amount of newly minted fixed rate synthetic tokens\\n   */\\n  function wrap(uint256 _collateral, address _recipient)\\n    external\\n    override\\n    nonReentrant\\n    isActive\\n    returns (uint256 amountTokens)\\n  {\\n    pegCollateralToken.transferFrom(_msgSender(), address(this), _collateral);\\n    amountTokens =\\n      (_collateral * (10**(18 - pegCollateralToken.decimals())) * rate) /\\n      PRECISION;\\n    totalDeposited = totalDeposited + _collateral;\\n    totalSyntheticTokens += amountTokens;\\n    fixedRateToken.mint(_recipient, amountTokens);\\n    emit Wrap(amountTokens, _recipient);\\n  }\\n\\n  /**\\n   * @notice Burns an amount of fixed rate synthetic tokens and releases peg collateral tokens based on the conversion rate\\n   * @param _tokenAmount The amount of fixed rate synthetic tokens to be burned\\n   * @param _recipient Address of the recipient to receive the peg collateral tokens\\n   * @return amountCollateral The amount of peg collateral tokens received\\n   */\\n  function unwrap(uint256 _tokenAmount, address _recipient)\\n    external\\n    override\\n    nonReentrant\\n    returns (uint256 amountCollateral)\\n  {\\n    require(\\n      fixedRateToken.balanceOf(_msgSender()) >= _tokenAmount,\\n      'Not enought tokens to unwrap'\\n    );\\n    fixedRateToken.transferFrom(_msgSender(), address(this), _tokenAmount);\\n    amountCollateral =\\n      (totalDeposited * ((_tokenAmount * PRECISION) / totalSyntheticTokens)) /\\n      PRECISION;\\n    fixedRateToken.burn(_tokenAmount);\\n    totalDeposited = totalDeposited - amountCollateral;\\n    totalSyntheticTokens -= _tokenAmount;\\n    pegCollateralToken.transfer(_recipient, amountCollateral);\\n    emit Unwrap(amountCollateral, _recipient);\\n  }\\n\\n  /** @notice Allows the maintainer to pause the contract in case of emergency\\n   * which blocks minting of new fixed rate synthetic tokens\\n   */\\n  function pauseContract() external override onlyMaintainer {\\n    paused = true;\\n    emit ContractPaused();\\n  }\\n\\n  /** @notice Allows the maintainer to resume the contract functionalities\\n   * unblocking the minting of new fixed rate synthetic tokens\\n   */\\n  function resumeContract() external override onlyMaintainer {\\n    paused = false;\\n    emit ContractResumed();\\n  }\\n\\n  /** @notice Checks the address of the peg collateral token registered in the wrapper\\n   * @return collateralCurrency The address of the peg collateral token registered\\n   */\\n  function collateralToken()\\n    external\\n    view\\n    override\\n    returns (IERC20 collateralCurrency)\\n  {\\n    collateralCurrency = pegCollateralToken;\\n  }\\n\\n  /** @notice Checks the symbol of the fixed rate synthetic token registered in the wrapper\\n   * @return The symbol of the fixed rate synthetic token associated with the wrapper\\n   */\\n  function syntheticTokenSymbol()\\n    external\\n    view\\n    override\\n    returns (string memory)\\n  {\\n    return IStandardERC20(address(fixedRateToken)).symbol();\\n  }\\n\\n  /** @notice Checks the address of the fixed rate synthetic token registered in the wrapper\\n   * @return The address of the fixed rate synthetic token associated with the wrapper\\n   */\\n  function syntheticToken() external view override returns (IERC20) {\\n    return fixedRateToken;\\n  }\\n\\n  /** @notice Checks the version of the fixed rate wrapper contract\\n   * @return The version of the fixed rate wrapper contract\\n   */\\n  function version() external view override returns (uint8) {\\n    return fixedRateVersion;\\n  }\\n\\n  /** @notice Checks the SynthereumFinder associated with the fixed rate wrapper contract\\n   * @return The address of the SynthereumFinder\\n   */\\n  function synthereumFinder()\\n    external\\n    view\\n    override\\n    returns (ISynthereumFinder)\\n  {\\n    return finder;\\n  }\\n\\n  /** @notice Check the conversion rate between peg-collateral and fixed-rate synthetic token\\n   * @return Coversion rate\\n   */\\n  function conversionRate() external view override returns (uint256) {\\n    return rate;\\n  }\\n\\n  /** @notice Amount of peg collateral stored in the contract\\n   * @return totalDeposited peg collateral deposited\\n   */\\n  function totalPegCollateral() external view override returns (uint256) {\\n    return totalDeposited;\\n  }\\n\\n  /** @notice Amount of synthetic tokens minted through the contract\\n   * @return totalSyntheticTokens synthetic tokens minted\\n   */\\n  function totalSyntheticTokensMinted()\\n    external\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    return totalSyntheticTokens;\\n  }\\n\\n  /** @notice Check if wrap can be performed or not\\n   * @return True if minting is paused, otherwise false\\n   */\\n  function isPaused() external view override returns (bool) {\\n    return paused;\\n  }\\n\\n  /**\\n   * @notice Check if an address is the trusted forwarder\\n   * @param  forwarder Address to check\\n   * @return True is the input address is the trusted forwarder, otherwise false\\n   */\\n  function isTrustedForwarder(address forwarder)\\n    public\\n    view\\n    override\\n    returns (bool)\\n  {\\n    try\\n      finder.getImplementationAddress(SynthereumInterfaces.TrustedForwarder)\\n    returns (address trustedForwarder) {\\n      if (forwarder == trustedForwarder) {\\n        return true;\\n      } else {\\n        return false;\\n      }\\n    } catch {\\n      return false;\\n    }\\n  }\\n\\n  function _msgSender()\\n    internal\\n    view\\n    override(ERC2771Context, Context)\\n    returns (address sender)\\n  {\\n    return ERC2771Context._msgSender();\\n  }\\n\\n  function _msgData()\\n    internal\\n    view\\n    override(ERC2771Context, Context)\\n    returns (bytes calldata)\\n  {\\n    return ERC2771Context._msgData();\\n  }\\n}\\n\"\r\n    },\r\n    \"deploy/@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/base/interfaces/IStandardERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.4;\\nimport {IERC20} from '../../../@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface IStandardERC20 is IERC20 {\\n  /**\\n   * @dev Returns the name of the token.\\n   */\\n  function name() external view returns (string memory);\\n\\n  /**\\n   * @dev Returns the symbol of the token, usually a shorter version of the\\n   * name.\\n   */\\n  function symbol() external view returns (string memory);\\n\\n  /**\\n   * @dev Returns the number of decimals used to get its user representation.\\n   * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n   * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n   *\\n   * Tokens usually opt for a value of 18, imitating the relationship between\\n   * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n   * called.\\n   *\\n   * NOTE: This information is only used for _display_ purposes: it in\\n   * no way affects any of the arithmetic of the contract, including\\n   * {IERC20-balanceOf} and {IERC20-transfer}.\\n   */\\n  function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/tokens/interfaces/IMintableBurnableERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.4;\\n\\nimport {IERC20} from '../../../@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\n/**\\n * @title ERC20 interface that includes burn mint and roles methods.\\n */\\ninterface IMintableBurnableERC20 is IERC20 {\\n  /**\\n   * @notice Burns a specific amount of the caller's tokens.\\n   * @dev This method should be permissioned to only allow designated parties to burn tokens.\\n   */\\n  function burn(uint256 value) external;\\n\\n  /**\\n   * @notice Mints tokens and adds them to the balance of the `to` address.\\n   * @dev This method should be permissioned to only allow designated parties to mint tokens.\\n   */\\n  function mint(address to, uint256 value) external returns (bool);\\n\\n  /**\\n   * @notice Returns the number of decimals used to get its user representation.\\n   */\\n  function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/fixed-rate/v1/interfaces/IFixedRateWrapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.4;\\n\\nimport {\\n  ISynthereumDeployment\\n} from '../../../common/interfaces/IDeployment.sol';\\nimport {ITypology} from '../../../common/interfaces/ITypology.sol';\\n\\ninterface ISynthereumFixedRateWrapper is ITypology, ISynthereumDeployment {\\n  // Describe role structure\\n  struct Roles {\\n    address admin;\\n    address maintainer;\\n  }\\n\\n  /** @notice This function is used to mint new fixed rate synthetic tokens by depositing peg collateral tokens\\n   * @notice The conversion is based on a fixed rate\\n   * @param _collateral The amount of peg collateral tokens to be deposited\\n   * @param _recipient The address of the recipient to receive the newly minted fixed rate synthetic tokens\\n   * @return amountTokens The amount of newly minted fixed rate synthetic tokens\\n   */\\n  function wrap(uint256 _collateral, address _recipient)\\n    external\\n    returns (uint256 amountTokens);\\n\\n  /** @notice This function is used to burn fixed rate synthetic tokens and receive the underlying peg collateral tokens\\n   * @notice The conversion is based on a fixed rate\\n   * @param _tokenAmount The amount of fixed rate synthetic tokens to be burned\\n   * @param _recipient The address of the recipient to receive the underlying peg collateral tokens\\n   * @return amountCollateral The amount of peg collateral tokens withdrawn\\n   */\\n  function unwrap(uint256 _tokenAmount, address _recipient)\\n    external\\n    returns (uint256 amountCollateral);\\n\\n  /** @notice A function that allows a maintainer to pause the execution of some functions in the contract\\n   * @notice This function suspends minting of new fixed rate synthetic tokens\\n   * @notice Pausing does not affect redeeming the peg collateral by burning the fixed rate synthetic tokens\\n   * @notice Pausing the contract is necessary in situations to prevent an issue with the smart contract or if the rate\\n   * between the fixed rate synthetic token and the peg collateral token changes\\n   */\\n  function pauseContract() external;\\n\\n  /** @notice A function that allows a maintainer to resume the execution of all functions in the contract\\n   * @notice After the resume contract function is called minting of new fixed rate synthetic assets is open again\\n   */\\n  function resumeContract() external;\\n\\n  /** @notice Check the conversion rate between peg-collateral and fixed-rate synthetic token\\n   * @return Coversion rate\\n   */\\n  function conversionRate() external view returns (uint256);\\n\\n  /** @notice Amount of peg collateral stored in the contract\\n   * @return Total peg collateral deposited\\n   */\\n  function totalPegCollateral() external view returns (uint256);\\n\\n  /** @notice Amount of synthetic tokens minted from the contract\\n   * @return Total synthetic tokens minted so far\\n   */\\n  function totalSyntheticTokensMinted() external view returns (uint256);\\n\\n  /** @notice Check if wrap can be performed or not\\n   * @return True if minting is paused, otherwise false\\n   */\\n  function isPaused() external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/core/interfaces/IFinder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title Provides addresses of the contracts implementing certain interfaces.\\n */\\ninterface ISynthereumFinder {\\n  /**\\n   * @notice Updates the address of the contract that implements `interfaceName`.\\n   * @param interfaceName bytes32 encoding of the interface name that is either changed or registered.\\n   * @param implementationAddress address of the deployed contract that implements the interface.\\n   */\\n  function changeImplementationAddress(\\n    bytes32 interfaceName,\\n    address implementationAddress\\n  ) external;\\n\\n  /**\\n   * @notice Gets the address of the contract that implements the given `interfaceName`.\\n   * @param interfaceName queried interface.\\n   * @return implementationAddress Address of the deployed contract that implements the interface.\\n   */\\n  function getImplementationAddress(bytes32 interfaceName)\\n    external\\n    view\\n    returns (address);\\n}\\n\"\r\n    },\r\n    \"deploy/@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/common/ERC2771Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.3.2 (metatx/ERC2771Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport {Context} from '../../@openzeppelin/contracts/utils/Context.sol';\\n\\n/**\\n * @dev Context variant with ERC2771 support.\\n */\\nabstract contract ERC2771Context is Context {\\n  function isTrustedForwarder(address forwarder)\\n    public\\n    view\\n    virtual\\n    returns (bool);\\n\\n  function _msgSender()\\n    internal\\n    view\\n    virtual\\n    override\\n    returns (address sender)\\n  {\\n    if (isTrustedForwarder(msg.sender)) {\\n      // The assembly code is more direct than the Solidity version using `abi.decode`.\\n      assembly {\\n        sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n      }\\n    } else {\\n      return super._msgSender();\\n    }\\n  }\\n\\n  function _msgData() internal view virtual override returns (bytes calldata) {\\n    if (isTrustedForwarder(msg.sender)) {\\n      return msg.data[0:msg.data.length - 20];\\n    } else {\\n      return super._msgData();\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/core/Constants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title Stores common interface names used throughout Synthereum.\\n */\\nlibrary SynthereumInterfaces {\\n  bytes32 public constant Deployer = 'Deployer';\\n  bytes32 public constant FactoryVersioning = 'FactoryVersioning';\\n  bytes32 public constant TokenFactory = 'TokenFactory';\\n  bytes32 public constant PoolRegistry = 'PoolRegistry';\\n  bytes32 public constant SelfMintingRegistry = 'SelfMintingRegistry';\\n  bytes32 public constant PriceFeed = 'PriceFeed';\\n  bytes32 public constant Manager = 'Manager';\\n  bytes32 public constant CreditLineController = 'CreditLineController';\\n  bytes32 public constant CollateralWhitelist = 'CollateralWhitelist';\\n  bytes32 public constant IdentifierWhitelist = 'IdentifierWhitelist';\\n  bytes32 public constant TrustedForwarder = 'TrustedForwarder';\\n  bytes32 public constant FixedRateRegistry = 'FixedRateRegistry';\\n  bytes32 public constant MoneyMarketManager = 'MoneyMarketManager';\\n  bytes32 public constant JarvisBrrrrr = 'JarvisBrrrrr';\\n}\\n\\nlibrary FactoryInterfaces {\\n  bytes32 public constant PoolFactory = 'PoolFactory';\\n  bytes32 public constant SelfMintingFactory = 'SelfMintingFactory';\\n  bytes32 public constant FixedRateFactory = 'FixedRateFactory';\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/common/interfaces/IDeployment.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.4;\\n\\nimport {IERC20} from '../../../@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport {ISynthereumFinder} from '../../core/interfaces/IFinder.sol';\\n\\n/**\\n * @title Interface that a pool MUST have in order to be included in the deployer\\n */\\ninterface ISynthereumDeployment {\\n  /**\\n   * @notice Get Synthereum finder of the pool/self-minting derivative\\n   * @return finder Returns finder contract\\n   */\\n  function synthereumFinder() external view returns (ISynthereumFinder finder);\\n\\n  /**\\n   * @notice Get Synthereum version\\n   * @return contractVersion Returns the version of this pool/self-minting derivative\\n   */\\n  function version() external view returns (uint8 contractVersion);\\n\\n  /**\\n   * @notice Get the collateral token of this pool/self-minting derivative\\n   * @return collateralCurrency The ERC20 collateral token\\n   */\\n  function collateralToken() external view returns (IERC20 collateralCurrency);\\n\\n  /**\\n   * @notice Get the synthetic token associated to this pool/self-minting derivative\\n   * @return syntheticCurrency The ERC20 synthetic token\\n   */\\n  function syntheticToken() external view returns (IERC20 syntheticCurrency);\\n\\n  /**\\n   * @notice Get the synthetic token symbol associated to this pool/self-minting derivative\\n   * @return symbol The ERC20 synthetic token symbol\\n   */\\n  function syntheticTokenSymbol() external view returns (string memory symbol);\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/common/interfaces/ITypology.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.4;\\n\\ninterface ITypology {\\n  /**\\n   * @notice Return typology of the contract\\n   */\\n  function typology() external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/fixed-rate/v1/FixedRateFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.4;\\n\\nimport {ISynthereumFinder} from '../../core/interfaces/IFinder.sol';\\nimport {\\n  IDeploymentSignature\\n} from '../../core/interfaces/IDeploymentSignature.sol';\\nimport {SynthereumInterfaces} from '../../core/Constants.sol';\\nimport {SynthereumFixedRateCreator} from './FixedRateCreator.sol';\\nimport {SynthereumFixedRateWrapper} from './FixedRateWrapper.sol';\\nimport {\\n  ReentrancyGuard\\n} from '../../../@openzeppelin/contracts/security/ReentrancyGuard.sol';\\n\\ncontract SynthereumFixedRateFactory is\\n  IDeploymentSignature,\\n  ReentrancyGuard,\\n  SynthereumFixedRateCreator\\n{\\n  //----------------------------------------\\n  // Storage\\n  //----------------------------------------\\n\\n  bytes4 public immutable override deploymentSignature;\\n\\n  //----------------------------------------\\n  // Constructor\\n  //----------------------------------------\\n\\n  /**\\n   * @notice Set synthereum finder\\n   * @param synthereumFinder Synthereum finder contract\\n   */\\n  constructor(address synthereumFinder)\\n    SynthereumFixedRateCreator(synthereumFinder)\\n  {\\n    deploymentSignature = this.createFixedRate.selector;\\n  }\\n\\n  //----------------------------------------\\n  // Public functions\\n  //----------------------------------------\\n\\n  /**\\n   * @notice Check if the sender is the deployer and deploy a fixed rate\\n   * @param params input parameters of the fixed rate\\n   * @return fixedRate Deployed fixed rate\\n   */\\n  function createFixedRate(Params calldata params)\\n    public\\n    override\\n    nonReentrant\\n    returns (SynthereumFixedRateWrapper fixedRate)\\n  {\\n    address deployer =\\n      synthereumFinder.getImplementationAddress(SynthereumInterfaces.Deployer);\\n    require(msg.sender == deployer, 'Sender must be Synthereum deployer');\\n    fixedRate = super.createFixedRate(params);\\n  }\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/core/interfaces/IDeploymentSignature.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title Provides signature of function for deployment\\n */\\ninterface IDeploymentSignature {\\n  /**\\n   * @notice Returns the bytes4 signature of the function used for the deployment of a contract in a factory\\n   * @return signature returns signature of the deployment function\\n   */\\n  function deploymentSignature() external view returns (bytes4 signature);\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/fixed-rate/v1/FixedRateCreator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.4;\\n\\nimport {IStandardERC20} from '../../base/interfaces/IStandardERC20.sol';\\nimport {\\n  IMintableBurnableTokenFactory\\n} from '../../tokens/factories/interfaces/IMintableBurnableTokenFactory.sol';\\nimport {ISynthereumFinder} from '../../core/interfaces/IFinder.sol';\\nimport {\\n  IMintableBurnableERC20\\n} from '../../tokens/interfaces/IMintableBurnableERC20.sol';\\nimport {\\n  BaseControlledMintableBurnableERC20\\n} from '../../tokens/interfaces/BaseControlledMintableBurnableERC20.sol';\\nimport {SynthereumInterfaces} from '../../core/Constants.sol';\\nimport {SynthereumFixedRateWrapper} from './FixedRateWrapper.sol';\\nimport {ISynthereumFixedRateWrapper} from './interfaces/IFixedRateWrapper.sol';\\n\\ncontract SynthereumFixedRateCreator {\\n  struct Params {\\n    IStandardERC20 collateralToken;\\n    string syntheticName;\\n    string syntheticSymbol;\\n    address syntheticToken;\\n    ISynthereumFixedRateWrapper.Roles roles;\\n    uint8 version;\\n    uint256 rate;\\n  }\\n\\n  // Address of Synthereum Finder\\n  ISynthereumFinder public immutable synthereumFinder;\\n\\n  //----------------------------------------\\n  // Events\\n  //----------------------------------------\\n  event CreatedFixedRate(\\n    address indexed fixedRateAddress,\\n    uint8 indexed version,\\n    address indexed deployerAddress\\n  );\\n\\n  //----------------------------------------\\n  // Constructor\\n  //----------------------------------------\\n\\n  /**\\n   * @notice Constructs the FixedRateWrapper contract.\\n   * @param _synthereumFinder Synthereum Finder address used to discover other contracts\\n   */\\n  constructor(address _synthereumFinder) {\\n    synthereumFinder = ISynthereumFinder(_synthereumFinder);\\n  }\\n\\n  //----------------------------------------\\n  // Public functions\\n  //----------------------------------------\\n\\n  /**\\n   * @notice Creates an instance of the fixed rate\\n   * @param params is a `ConstructorParams` object from FixedRateWrapper.\\n   * @return fixedRate Address of the deployed fixedRate contract.\\n   */\\n  function createFixedRate(Params calldata params)\\n    public\\n    virtual\\n    returns (SynthereumFixedRateWrapper fixedRate)\\n  {\\n    require(bytes(params.syntheticName).length != 0, 'Missing synthetic name');\\n    require(\\n      bytes(params.syntheticSymbol).length != 0,\\n      'Missing synthetic symbol'\\n    );\\n\\n    if (params.syntheticToken == address(0)) {\\n      IMintableBurnableTokenFactory tokenFactory =\\n        IMintableBurnableTokenFactory(\\n          ISynthereumFinder(synthereumFinder).getImplementationAddress(\\n            SynthereumInterfaces.TokenFactory\\n          )\\n        );\\n      BaseControlledMintableBurnableERC20 tokenCurrency =\\n        tokenFactory.createToken(\\n          params.syntheticName,\\n          params.syntheticSymbol,\\n          18\\n        );\\n      fixedRate = new SynthereumFixedRateWrapper(\\n        _convertParams(params, tokenCurrency)\\n      );\\n      // Give permissions to new pool contract and then hand over ownership.\\n      tokenCurrency.addMinter(address(fixedRate));\\n      tokenCurrency.addBurner(address(fixedRate));\\n      tokenCurrency.addAdmin(\\n        synthereumFinder.getImplementationAddress(SynthereumInterfaces.Manager)\\n      );\\n      tokenCurrency.renounceAdmin();\\n    } else {\\n      BaseControlledMintableBurnableERC20 tokenCurrency =\\n        BaseControlledMintableBurnableERC20(params.syntheticToken);\\n      require(\\n        keccak256(abi.encodePacked(tokenCurrency.name())) ==\\n          keccak256(abi.encodePacked(params.syntheticName)),\\n        'Wrong synthetic token name'\\n      );\\n      require(\\n        keccak256(abi.encodePacked(tokenCurrency.symbol())) ==\\n          keccak256(abi.encodePacked(params.syntheticSymbol)),\\n        'Wrong synthetic token symbol'\\n      );\\n      fixedRate = new SynthereumFixedRateWrapper(\\n        _convertParams(params, tokenCurrency)\\n      );\\n    }\\n    emit CreatedFixedRate(address(fixedRate), params.version, msg.sender);\\n    return fixedRate;\\n  }\\n\\n  // Converts createFixedRate params to constructor params.\\n  function _convertParams(\\n    Params memory params,\\n    BaseControlledMintableBurnableERC20 tokenCurrency\\n  )\\n    internal\\n    view\\n    returns (\\n      SynthereumFixedRateWrapper.ConstructorParams memory constructorParams\\n    )\\n  {\\n    require(params.roles.admin != address(0), 'Admin cannot be 0x00');\\n    constructorParams.finder = synthereumFinder;\\n    constructorParams.version = params.version;\\n    constructorParams.pegCollateralToken = params.collateralToken;\\n    constructorParams.fixedRateToken = IMintableBurnableERC20(\\n      address(tokenCurrency)\\n    );\\n    constructorParams.roles = params.roles;\\n    constructorParams.rate = params.rate;\\n  }\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/tokens/factories/interfaces/IMintableBurnableTokenFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.4;\\nimport {\\n  BaseControlledMintableBurnableERC20\\n} from '../../interfaces/BaseControlledMintableBurnableERC20.sol';\\n\\n/**\\n * @title Interface for interacting with the MintableBurnableTokenFactory contract\\n */\\ninterface IMintableBurnableTokenFactory {\\n  /** @notice Calls the deployment of a new ERC20 token\\n   * @param tokenName The name of the token to be deployed\\n   * @param tokenSymbol The symbol of the token that will be deployed\\n   * @param tokenDecimals Number of decimals for the token to be deployed\\n   */\\n  function createToken(\\n    string memory tokenName,\\n    string memory tokenSymbol,\\n    uint8 tokenDecimals\\n  ) external returns (BaseControlledMintableBurnableERC20 newToken);\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/tokens/interfaces/BaseControlledMintableBurnableERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.4;\\n\\nimport {ERC20} from '../../../@openzeppelin/contracts/token/ERC20/ERC20.sol';\\nimport {IMintableBurnableERC20} from './IMintableBurnableERC20.sol';\\n\\n/**\\n * @title ERC20 interface that includes burn mint and roles methods.\\n */\\nabstract contract BaseControlledMintableBurnableERC20 is\\n  ERC20,\\n  IMintableBurnableERC20\\n{\\n  uint8 private _decimals;\\n\\n  /**\\n   * @notice Constructs the ERC20 token contract\\n   * @param _tokenName Name of the token\\n   * @param _tokenSymbol Token symbol\\n   * @param _tokenDecimals Number of decimals for token\\n   */\\n  constructor(\\n    string memory _tokenName,\\n    string memory _tokenSymbol,\\n    uint8 _tokenDecimals\\n  ) ERC20(_tokenName, _tokenSymbol) {\\n    _setupDecimals(_tokenDecimals);\\n  }\\n\\n  /**\\n   * @notice Add Minter role to an account\\n   * @param account Address to which Minter role will be added\\n   */\\n  function addMinter(address account) external virtual;\\n\\n  /**\\n   * @notice Add Burner role to an account\\n   * @param account Address to which Burner role will be added\\n   */\\n  function addBurner(address account) external virtual;\\n\\n  /**\\n   * @notice Add Admin role to an account\\n   * @param account Address to which Admin role will be added\\n   */\\n  function addAdmin(address account) external virtual;\\n\\n  /**\\n   * @notice Add Admin, Minter and Burner roles to an account\\n   * @param account Address to which Admin, Minter and Burner roles will be added\\n   */\\n  function addAdminAndMinterAndBurner(address account) external virtual;\\n\\n  /**\\n   * @notice Add Admin, Minter and Burner roles to an account\\n   * @param account Address to which Admin, Minter and Burner roles will be added\\n   */\\n  /**\\n   * @notice Self renounce the address calling the function from minter role\\n   */\\n  function renounceMinter() external virtual;\\n\\n  /**\\n   * @notice Self renounce the address calling the function from burner role\\n   */\\n  function renounceBurner() external virtual;\\n\\n  /**\\n   * @notice Self renounce the address calling the function from admin role\\n   */\\n  function renounceAdmin() external virtual;\\n\\n  /**\\n   * @notice Self renounce the address calling the function from admin, minter and burner role\\n   */\\n  function renounceAdminAndMinterAndBurner() external virtual;\\n\\n  /**\\n   * @notice Returns the number of decimals used to get its user representation.\\n   */\\n  function decimals()\\n    public\\n    view\\n    virtual\\n    override(ERC20, IMintableBurnableERC20)\\n    returns (uint8)\\n  {\\n    return _decimals;\\n  }\\n\\n  /**\\n   * @dev Sets {decimals} to a value other than the default one of 18.\\n   *\\n   * WARNING: This function should only be called from the constructor. Most\\n   * applications that interact with token contracts will not expect\\n   * {decimals} to ever change, and may work incorrectly if it does.\\n   */\\n  function _setupDecimals(uint8 decimals_) internal {\\n    _decimals = decimals_;\\n  }\\n}\\n\"\r\n    },\r\n    \"deploy/@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"deploy/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/core/Finder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.4;\\n\\nimport {ISynthereumFinder} from './interfaces/IFinder.sol';\\nimport {\\n  AccessControlEnumerable\\n} from '../../@openzeppelin/contracts/access/AccessControlEnumerable.sol';\\n\\n/**\\n * @title Provides addresses of contracts implementing certain interfaces.\\n */\\ncontract SynthereumFinder is ISynthereumFinder, AccessControlEnumerable {\\n  bytes32 public constant MAINTAINER_ROLE = keccak256('Maintainer');\\n\\n  //Describe role structure\\n  struct Roles {\\n    address admin;\\n    address maintainer;\\n  }\\n\\n  //----------------------------------------\\n  // Storage\\n  //----------------------------------------\\n\\n  mapping(bytes32 => address) public interfacesImplemented;\\n\\n  //----------------------------------------\\n  // Events\\n  //----------------------------------------\\n\\n  event InterfaceImplementationChanged(\\n    bytes32 indexed interfaceName,\\n    address indexed newImplementationAddress\\n  );\\n\\n  //----------------------------------------\\n  // Modifiers\\n  //----------------------------------------\\n\\n  modifier onlyMaintainer() {\\n    require(\\n      hasRole(MAINTAINER_ROLE, msg.sender),\\n      'Sender must be the maintainer'\\n    );\\n    _;\\n  }\\n\\n  //----------------------------------------\\n  // Constructors\\n  //----------------------------------------\\n\\n  constructor(Roles memory roles) {\\n    _setRoleAdmin(DEFAULT_ADMIN_ROLE, DEFAULT_ADMIN_ROLE);\\n    _setRoleAdmin(MAINTAINER_ROLE, DEFAULT_ADMIN_ROLE);\\n    _setupRole(DEFAULT_ADMIN_ROLE, roles.admin);\\n    _setupRole(MAINTAINER_ROLE, roles.maintainer);\\n  }\\n\\n  //----------------------------------------\\n  // External view\\n  //----------------------------------------\\n\\n  /**\\n   * @notice Updates the address of the contract that implements `interfaceName`.\\n   * @param interfaceName bytes32 of the interface name that is either changed or registered.\\n   * @param implementationAddress address of the implementation contract.\\n   */\\n  function changeImplementationAddress(\\n    bytes32 interfaceName,\\n    address implementationAddress\\n  ) external override onlyMaintainer {\\n    interfacesImplemented[interfaceName] = implementationAddress;\\n\\n    emit InterfaceImplementationChanged(interfaceName, implementationAddress);\\n  }\\n\\n  /**\\n   * @notice Gets the address of the contract that implements the given `interfaceName`.\\n   * @param interfaceName queried interface.\\n   * @return implementationAddress Address of the defined interface.\\n   */\\n  function getImplementationAddress(bytes32 interfaceName)\\n    external\\n    view\\n    override\\n    returns (address)\\n  {\\n    address implementationAddress = interfacesImplemented[interfaceName];\\n    require(implementationAddress != address(0x0), 'Implementation not found');\\n    return implementationAddress;\\n  }\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/core/FactoryVersioning.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.4;\\n\\nimport {\\n  ISynthereumFactoryVersioning\\n} from './interfaces/IFactoryVersioning.sol';\\nimport {\\n  EnumerableMap\\n} from '../../@openzeppelin/contracts/utils/structs/EnumerableMap.sol';\\nimport {\\n  AccessControlEnumerable\\n} from '../../@openzeppelin/contracts/access/AccessControlEnumerable.sol';\\n\\n/**\\n * @title Provides addresses of different versions of pools factory and derivative factory\\n */\\ncontract SynthereumFactoryVersioning is\\n  ISynthereumFactoryVersioning,\\n  AccessControlEnumerable\\n{\\n  using EnumerableMap for EnumerableMap.UintToAddressMap;\\n\\n  bytes32 public constant MAINTAINER_ROLE = keccak256('Maintainer');\\n\\n  //Describe role structure\\n  struct Roles {\\n    address admin;\\n    address maintainer;\\n  }\\n\\n  //----------------------------------------\\n  // Storage\\n  //----------------------------------------\\n\\n  mapping(bytes32 => EnumerableMap.UintToAddressMap) private factories;\\n\\n  //----------------------------------------\\n  // Events\\n  //----------------------------------------\\n\\n  event AddFactory(\\n    bytes32 indexed factoryType,\\n    uint8 indexed version,\\n    address indexed factory\\n  );\\n\\n  event SetFactory(\\n    bytes32 indexed factoryType,\\n    uint8 indexed version,\\n    address indexed factory\\n  );\\n\\n  event RemoveFactory(\\n    bytes32 indexed factoryType,\\n    uint8 indexed version,\\n    address indexed factory\\n  );\\n\\n  //----------------------------------------\\n  // Constructor\\n  //----------------------------------------\\n  constructor(Roles memory roles) {\\n    _setRoleAdmin(DEFAULT_ADMIN_ROLE, DEFAULT_ADMIN_ROLE);\\n    _setRoleAdmin(MAINTAINER_ROLE, DEFAULT_ADMIN_ROLE);\\n    _setupRole(DEFAULT_ADMIN_ROLE, roles.admin);\\n    _setupRole(MAINTAINER_ROLE, roles.maintainer);\\n  }\\n\\n  //----------------------------------------\\n  // Modifiers\\n  //----------------------------------------\\n\\n  modifier onlyMaintainer() {\\n    require(\\n      hasRole(MAINTAINER_ROLE, msg.sender),\\n      'Sender must be the maintainer'\\n    );\\n    _;\\n  }\\n\\n  //----------------------------------------\\n  // External functions\\n  //----------------------------------------\\n\\n  /** @notice Sets a Factory\\n   * @param factoryType Type of factory\\n   * @param version Version of the factory to be set\\n   * @param factory The pool factory address to be set\\n   */\\n  function setFactory(\\n    bytes32 factoryType,\\n    uint8 version,\\n    address factory\\n  ) external override onlyMaintainer {\\n    require(factory != address(0), 'Factory cannot be address 0');\\n    bool isNewVersion = factories[factoryType].set(version, factory);\\n    if (isNewVersion) {\\n      emit AddFactory(factoryType, version, factory);\\n    } else {\\n      emit SetFactory(factoryType, version, factory);\\n    }\\n  }\\n\\n  /** @notice Removes a factory\\n   * @param factoryType The type of factory to be removed\\n   * @param version Version of the factory to be removed\\n   */\\n  function removeFactory(bytes32 factoryType, uint8 version)\\n    external\\n    override\\n    onlyMaintainer\\n  {\\n    EnumerableMap.UintToAddressMap storage selectedFactories =\\n      factories[factoryType];\\n    address factoryToRemove = selectedFactories.get(version);\\n    selectedFactories.remove(version);\\n    emit RemoveFactory(factoryType, version, factoryToRemove);\\n  }\\n\\n  //----------------------------------------\\n  // External view functions\\n  //----------------------------------------\\n\\n  /** @notice Gets a factory contract address\\n   * @param factoryType The type of factory to be checked\\n   * @param version Version of the factory to be checked\\n   * @return factory Address of the factory contract\\n   */\\n  function getFactoryVersion(bytes32 factoryType, uint8 version)\\n    external\\n    view\\n    override\\n    returns (address factory)\\n  {\\n    factory = factories[factoryType].get(version);\\n  }\\n\\n  /** @notice Gets the number of factory versions for a specific type\\n   * @param factoryType The type of factory to be checked\\n   * @return numberOfVersions Total number of versions for a specific factory\\n   */\\n  function numberOfFactoryVersions(bytes32 factoryType)\\n    external\\n    view\\n    override\\n    returns (uint8 numberOfVersions)\\n  {\\n    numberOfVersions = uint8(factories[factoryType].length());\\n  }\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/core/interfaces/IFactoryVersioning.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title Provides addresses of different versions of pools factory and derivative factory\\n */\\ninterface ISynthereumFactoryVersioning {\\n  /** @notice Sets a Factory\\n   * @param factoryType Type of factory\\n   * @param version Version of the factory to be set\\n   * @param factory The pool factory address to be set\\n   */\\n  function setFactory(\\n    bytes32 factoryType,\\n    uint8 version,\\n    address factory\\n  ) external;\\n\\n  /** @notice Removes a factory\\n   * @param factoryType The type of factory to be removed\\n   * @param version Version of the factory to be removed\\n   */\\n  function removeFactory(bytes32 factoryType, uint8 version) external;\\n\\n  /** @notice Gets a factory contract address\\n   * @param factoryType The type of factory to be checked\\n   * @param version Version of the factory to be checked\\n   * @return factory Address of the factory contract\\n   */\\n  function getFactoryVersion(bytes32 factoryType, uint8 version)\\n    external\\n    view\\n    returns (address factory);\\n\\n  /** @notice Gets the number of factory versions for a specific type\\n   * @param factoryType The type of factory to be checked\\n   * @return numberOfVersions Total number of versions for a specific factory\\n   */\\n  function numberOfFactoryVersions(bytes32 factoryType)\\n    external\\n    view\\n    returns (uint8 numberOfVersions);\\n}\\n\"\r\n    },\r\n    \"deploy/@openzeppelin/contracts/utils/structs/EnumerableMap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity's\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\\n *\\n *     // Declare a set state variable\\n *     EnumerableMap.UintToAddressMap private myMap;\\n * }\\n * ```\\n *\\n * As of v3.0.0, only maps of type `uint256 -> address` (`UintToAddressMap`) are\\n * supported.\\n */\\nlibrary EnumerableMap {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Map type with\\n    // bytes32 keys and values.\\n    // The Map implementation uses private functions, and user-facing\\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\\n    // the underlying Map.\\n    // This means that we can only create new EnumerableMaps for types that fit\\n    // in bytes32.\\n\\n    struct Map {\\n        // Storage of keys\\n        EnumerableSet.Bytes32Set _keys;\\n        mapping(bytes32 => bytes32) _values;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function _set(\\n        Map storage map,\\n        bytes32 key,\\n        bytes32 value\\n    ) private returns (bool) {\\n        map._values[key] = value;\\n        return map._keys.add(key);\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\\n        delete map._values[key];\\n        return map._keys.remove(key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function _contains(Map storage map, bytes32 key) private view returns (bool) {\\n        return map._keys.contains(key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function _length(Map storage map) private view returns (uint256) {\\n        return map._keys.length();\\n    }\\n\\n    /**\\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of entries inside the\\n     * array, and it may change when more entries are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\\n        bytes32 key = map._keys.at(index);\\n        return (key, map._values[key]);\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function _tryGet(Map storage map, bytes32 key) private view returns (bool, bytes32) {\\n        bytes32 value = map._values[key];\\n        if (value == bytes32(0)) {\\n            return (_contains(map, key), bytes32(0));\\n        } else {\\n            return (true, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || _contains(map, key), \\\"EnumerableMap: nonexistent key\\\");\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {_tryGet}.\\n     */\\n    function _get(\\n        Map storage map,\\n        bytes32 key,\\n        string memory errorMessage\\n    ) private view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || _contains(map, key), errorMessage);\\n        return value;\\n    }\\n\\n    // UintToAddressMap\\n\\n    struct UintToAddressMap {\\n        Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        UintToAddressMap storage map,\\n        uint256 key,\\n        address value\\n    ) internal returns (bool) {\\n        return _set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\\n        return _remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\\n        return _contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\\n        return _length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\\n        return (uint256(key), address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\\n        (bool success, bytes32 value) = _tryGet(map._inner, bytes32(key));\\n        return (success, address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\\n        return address(uint160(uint256(_get(map._inner, bytes32(key)))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        UintToAddressMap storage map,\\n        uint256 key,\\n        string memory errorMessage\\n    ) internal view returns (address) {\\n        return address(uint160(uint256(_get(map._inner, bytes32(key), errorMessage))));\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"components\":[{\"internalType\":\"contract ISynthereumFinder\",\"name\":\"finder\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"},{\"internalType\":\"contract IStandardERC20\",\"name\":\"pegCollateralToken\",\"type\":\"address\"},{\"internalType\":\"contract IMintableBurnableERC20\",\"name\":\"fixedRateToken\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maintainer\",\"type\":\"address\"}],\"internalType\":\"struct ISynthereumFixedRateWrapper.Roles\",\"name\":\"roles\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"internalType\":\"struct SynthereumFixedRateWrapper.ConstructorParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ContractPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ContractResumed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountCollateral\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"Unwrap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"Wrap\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAINTAINER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"collateralCurrency\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"conversionRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resumeContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"synthereumFinder\",\"outputs\":[{\"internalType\":\"contract ISynthereumFinder\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"syntheticToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"syntheticTokenSymbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPegCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSyntheticTokensMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"typology\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"unwrap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountCollateral\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_collateral\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"wrap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountTokens\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SynthereumFixedRateWrapper", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000043a98e5c4a7f3b7f11080fc9d58b0b8a80ca954e00000000000000000000000000000000000000000000000000000000000000010000000000000000000000004e3decbb3645551b8a19f0ea1678079fcb33fb4c00000000000000000000000034a697b570129f5eae101e234e21d3f5b38338940000000000000000000000008a73fda882601c4b84b0c52d7d85e4ba46357ca1000000000000000000000000685723b9dc89bdf28ba5f98f9a8c0ac899bd6e770000000000000000000000000000000000000000000000238f3b681742e88000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}