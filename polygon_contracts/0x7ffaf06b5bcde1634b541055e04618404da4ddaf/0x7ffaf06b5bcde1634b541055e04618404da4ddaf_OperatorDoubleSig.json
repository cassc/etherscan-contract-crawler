{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/OperatorDoubleSig.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\ncontract OperatorDoubleSig is Ownable {\\n    using SafeMath for uint256;\\n    uint256 public BUNDLE_MAXIMUM = 300;\\n\\n    // Events\\n    event SafeModeActivated(address msgSender);\\n    event SafeModeDeactivated(address msgSender);\\n\\n    event Transacted(\\n        address msgSender, // Address of the sender of the message initiating the transaction\\n        address[2] signers, // Address of the signers\\n        bytes32 operation, // Operation hash (see Data Formats)\\n        address toAddress, // The address the transaction was sent to\\n        uint256 value, // Amount of Wei sent to the address\\n        bytes data // Data sent when invoking the transaction\\n    );\\n    event DailyLimitChange(uint256 origin, uint256 current);\\n    event BundleMaximumChange(uint256 origin, uint256 current);\\n\\n    // Public fields\\n    address[] public signers; // The addresses that can co-sign transactions on the wallet\\n    bool public safeMode = false; // When active, wallet may only send to signer addresses\\n\\n    // Internal fields\\n    mapping(bytes32 => bool) historyTransactions;\\n\\n    uint public txDailyLimit;\\n    uint lastDay;\\n    uint txToday;\\n\\n    /**\\n     * Set up a simple multi-sig wallet by specifying the signers allowed to be used on this wallet.\\n     * 2 signers will be required to send a transaction from this wallet.\\n     * Note: The sender is NOT automatically added to the list of signers.\\n     * Signers CANNOT be changed once they are set\\n     *\\n     * @param allowedSigners An array of signers on the wallet\\n     */\\n    constructor(address[] memory allowedSigners, uint256 txDailyLimit_) {\\n        if (allowedSigners.length != 3) {\\n            // Invalid number of signers\\n            revert();\\n        }\\n        signers = allowedSigners;\\n        txDailyLimit = txDailyLimit_;\\n    }\\n\\n    receive() external payable {\\n        if (msg.value > 0) {\\n            revert(\\\"can't receive value\\\");\\n        }\\n    }\\n\\n    modifier underLimit()\\n    {\\n        if (block.timestamp > lastDay + 24 hours) {\\n            lastDay = block.timestamp;\\n            txToday = 0;\\n        }\\n        txToday = txToday.add(1);\\n        require(txToday <= txDailyLimit, \\\"Exceed daily limit\\\");\\n        _;\\n    }\\n\\n    modifier notInSafeMode() {\\n        require(!safeMode, \\\"In safe mode!\\\");\\n        _;\\n    }\\n\\n    function changeDailyLimit(uint256 limit_) external onlyOwner returns (uint256) {\\n        uint256 preDailyLimit = txDailyLimit;\\n        txDailyLimit = limit_;\\n        emit DailyLimitChange(preDailyLimit, txDailyLimit);\\n        return txDailyLimit;\\n    }\\n\\n    function changeBundleMaximum(uint256 maximum_) external onlyOwner returns (uint256) {\\n        uint256 preBundleMaximum = BUNDLE_MAXIMUM;\\n        BUNDLE_MAXIMUM = maximum_;\\n        emit BundleMaximumChange(preBundleMaximum, BUNDLE_MAXIMUM);\\n        return BUNDLE_MAXIMUM;\\n    }\\n\\n    /**\\n     * Determine if an address is a signer on this wallet\\n     * @param signer address to check\\n     * returns boolean indicating whether address is signer or not\\n     */\\n    function isSigner(address signer) public view returns (bool) {\\n        // Iterate through all signers on the wallet and\\n        for (uint256 i = 0; i < signers.length; i++) {\\n            if (signers[i] == signer) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * get all signers\\n     * returns all signers\\n     */\\n    function getSigners() external view returns (address[] memory) {\\n        return signers;\\n    }\\n\\n    /**\\n     * Execute a multi-signature transaction from this wallet using 2 signers.\\n     * Salt are used to prevent replay attacks and may not be repeated.\\n     *\\n     * @param toAddress the destination address to send an outgoing transaction\\n     * @param value the amount in Wei to be sent\\n     * @param data the data to send to the toAddress when invoking the transaction\\n     * @param expireTime the number of seconds since 1970 for which this transaction is valid\\n     * @param salt salt used to prevent duplicate hashes\\n     * @param signature1 see Data Formats\\n     * @param signature2 see Data Formats\\n     */\\n    function sendMultiSig(\\n        address toAddress,\\n        uint256 value,\\n        bytes memory data,\\n        uint256 expireTime,\\n        uint256 salt,\\n        bytes memory signature1,\\n        bytes memory signature2\\n    ) external underLimit notInSafeMode {\\n        // Verify that the transaction has not expired\\n        require(expireTime > block.timestamp, \\\"transaction expired\\\");\\n\\n        // Verify the other signer\\n        bytes32 operationHash = keccak256(abi.encodePacked(\\\"ETHER\\\", address(this), block.chainid, toAddress, value, data, expireTime, salt));\\n\\n        address[2] memory signerSet;\\n        signerSet[0] = verifyMultiSig(operationHash, signature1);\\n        signerSet[1] = verifyMultiSig(operationHash, signature2);\\n\\n        require(signerSet[0] != signerSet[1], \\\"can't sign by same signer\\\");\\n\\n        require(!historyTransactions[operationHash], \\\"Transaction has been executed\\\");\\n        // Try to insert operationHash\\n        historyTransactions[operationHash] = true;\\n\\n        // Success, send the transaction\\n        if (!external_call(toAddress, value, data)) {\\n            // Failed executing transaction\\n            revert(\\\"execution failed\\\");\\n        }\\n        emit Transacted(msg.sender, signerSet, operationHash, toAddress, value, data);\\n    }\\n\\n    /**\\n     * Execute a multi-signature transaction from this wallet using 2 signers.\\n     * Salt are used to prevent replay attacks and may not be repeated.\\n     *\\n     * @param toAddresses the destination address to send an outgoing transaction\\n     * @param values the amount in Wei to be sent\\n     * @param datas the data to send to the toAddress when invoking the transaction\\n     * @param expireTime the number of seconds since 1970 for which this transaction is valid\\n     * @param salts salt used to prevent duplicate hashes\\n     * @param signature1 see Data Formats\\n     * @param signature2 see Data Formats\\n     */\\n    function sendMultiSigBundle(\\n        address[] memory toAddresses,\\n        uint256[] memory values,\\n        bytes[] memory datas,\\n        uint256 expireTime,\\n        uint256[] memory salts,\\n        bytes memory signature1,\\n        bytes memory signature2\\n    ) external underLimit notInSafeMode {\\n        require(toAddresses.length <= BUNDLE_MAXIMUM && values.length <= BUNDLE_MAXIMUM && datas.length <= BUNDLE_MAXIMUM && salts.length <= BUNDLE_MAXIMUM, \\\"Exceed limit\\\");\\n        require(toAddresses.length == datas.length && toAddresses.length == values.length && toAddresses.length == salts.length);\\n        // Verify that the transaction has not expired\\n        require(expireTime > block.timestamp, \\\"transaction expired\\\");\\n\\n        address[2] memory signerSet;\\n        bytes32 bundleHash;\\n\\n        // \\\"{  }\\\" for avoid stack too deep errors\\n        {\\n            bytes memory packedData;\\n            bytes memory packedAddress;\\n            bytes memory packedValues;\\n            bytes memory packedSalt;\\n            for (uint256 i = 0; i < datas.length; i++) {\\n                packedData = abi.encodePacked(packedData, datas[i]);\\n                packedValues = abi.encodePacked(packedValues, values[i]);\\n                packedAddress = abi.encodePacked(packedAddress, toAddresses[i]);\\n                packedSalt = abi.encodePacked(packedSalt, salts[i]);\\n            }\\n            bytes32[4] memory hashes = [keccak256(packedAddress), keccak256(packedValues), keccak256(packedData), keccak256(packedSalt)];\\n\\n            // Verify the other signer\\n            bundleHash = keccak256(abi.encodePacked(\\\"ETHER\\\", address(this), block.chainid, hashes[0], hashes[1], hashes[2], expireTime, hashes[3]));\\n        }\\n\\n        {\\n            signerSet[0] = verifyMultiSig(bundleHash, signature1);\\n            signerSet[1] = verifyMultiSig(bundleHash, signature2);\\n\\n            require(signerSet[0] != signerSet[1], \\\"can't sign by same signer\\\");\\n\\n            // Success, send all transaction\\n            for (uint256 i = 0; i < datas.length; i++) {\\n                bytes32 operationHash = keccak256(abi.encodePacked(\\\"ETHER\\\", address(this), block.chainid, toAddresses[i], values[i], datas[i], expireTime, salts[i]));\\n                require(!historyTransactions[operationHash], string(abi.encodePacked(\\\"[#\\\", toString(i) ,\\\"]Transaction has been executed\\\")));\\n                // Try to insert operationHash\\n                historyTransactions[operationHash] = true;\\n\\n                if (!external_call(toAddresses[i], values[i], datas[i])) {\\n                    // Failed executing transaction\\n                    revert(string(abi.encodePacked(\\\"[#\\\", toString(i) ,\\\"]execution failed\\\")));\\n                }\\n                emit Transacted(msg.sender, signerSet, operationHash, toAddresses[i], values[i], datas[i]);\\n            }\\n        }\\n    }\\n\\n    // call has been separated into its own function in order to take advantage\\n    // of the Solidity's code generator to produce a loop that copies tx.data into memory.\\n    function external_call(\\n        address destination,\\n        uint256 value,\\n        bytes memory data\\n    ) internal returns (bool) {\\n        bool result;\\n        assembly {\\n            let d := add(data, 32) // First 32 bytes are the padded length of data, so exclude that\\n            result := call(\\n            gas(),\\n            destination,\\n            value,\\n            d,\\n            mload(data), // Size of the input (in bytes)\\n            0,\\n            0 // Output is ignored, therefore the output size is zero\\n            )\\n        }\\n        return result;\\n    }\\n\\n    function calcMaxWithdraw()\\n    external\\n    view\\n    returns (uint)\\n    {\\n        if (block.timestamp > lastDay + 24 hours)\\n            return txDailyLimit;\\n        return txDailyLimit - txToday;\\n    }\\n\\n    /**\\n     * Do common multisig verification for both eth sends and erc20token transfers\\n     *\\n     * @param operationHash see Data Formats\\n     * @param signature see Data Formats\\n     */\\n    function verifyMultiSig(\\n        bytes32 operationHash,\\n        bytes memory signature\\n    ) private view returns (address) {\\n        address signer = recoverAddressFromSignature(operationHash, signature);\\n        require(signer != address(0) && isSigner(signer), \\\"invalid signer\\\");\\n        return signer;\\n    }\\n\\n    /**\\n     * puts contract into safe mode.\\n     */\\n    function activateSafeMode() external onlyOwner {\\n        safeMode = true;\\n        emit SafeModeActivated(msg.sender);\\n    }\\n\\n    function deactivateSafeMode() external onlyOwner {\\n        safeMode = false;\\n        emit SafeModeDeactivated(msg.sender);\\n    }\\n\\n    /**\\n     * Gets signer's address using ecrecover\\n     * @param operationHash see Data Formats\\n     * @param signature see Data Formats\\n     * returns address recovered from the signature\\n     */\\n    function recoverAddressFromSignature(\\n        bytes32 operationHash,\\n        bytes memory signature\\n    ) private pure returns (address) {\\n        if (signature.length != 65) {\\n            revert(\\\"invalid signature length\\\");\\n        }\\n        // We need to unpack the signature, which is given as an array of 65 bytes (like eth.sign)\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            r := mload(add(signature, 32))\\n            s := mload(add(signature, 64))\\n            v := and(mload(add(signature, 65)), 255)\\n        }\\n        if (v < 27) {\\n            v += 27;\\n            // Ethereum versions are 27 or 28 as opposed to 0 or 1 which is submitted by some signing libs\\n        }\\n        bytes memory prefix = \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\";\\n        bytes32 prefixedProof =\\n        keccak256(abi.encodePacked(prefix, operationHash));\\n        return ecrecover(prefixedProof, v, r, s);\\n    }\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT license\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"allowedSigners\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"txDailyLimit_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"origin\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"current\",\"type\":\"uint256\"}],\"name\":\"BundleMaximumChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"origin\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"current\",\"type\":\"uint256\"}],\"name\":\"DailyLimitChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"msgSender\",\"type\":\"address\"}],\"name\":\"SafeModeActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"msgSender\",\"type\":\"address\"}],\"name\":\"SafeModeDeactivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"msgSender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[2]\",\"name\":\"signers\",\"type\":\"address[2]\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"operation\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transacted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BUNDLE_MAXIMUM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activateSafeMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calcMaxWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maximum_\",\"type\":\"uint256\"}],\"name\":\"changeBundleMaximum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"limit_\",\"type\":\"uint256\"}],\"name\":\"changeDailyLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deactivateSafeMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSigners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"isSigner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safeMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"expireTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature1\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature2\",\"type\":\"bytes\"}],\"name\":\"sendMultiSig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"toAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"datas\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256\",\"name\":\"expireTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"salts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"signature1\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature2\",\"type\":\"bytes\"}],\"name\":\"sendMultiSigBundle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"signers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txDailyLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "OperatorDoubleSig", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000186a000000000000000000000000000000000000000000000000000000000000000030000000000000000000000008a0dfbd7c51c8355067567d30227a40eafece7a2000000000000000000000000c363fb6721b71c06d68985e9f5ca2ac81f8278ca0000000000000000000000004926835319b8f089b65d6c370417629dc141494f", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}