{"SourceCode": "{\"BMT.sol\":{\"content\":\"// File contracts/CronosCRC20.sol\\n\\npragma solidity 0.6.11;\\nimport \\\"./ModuleCRC20.sol\\\";\\n\\ncontract BMT is ModuleCRC20 {\\n    constructor (\\n        string memory _name,\\n        string memory _denom,\\n        uint8 _decimal\\n    ) ModuleCRC20(_denom, _decimal) public {\\n        setName(_name);\\n    }\\n}\"},\"BSTToken.sol\":{\"content\":\"/**\\r\\n *Submitted for verification at cronoscan.com on 2022-01-11\\r\\n*/\\r\\n\\r\\n// File contracts/ModuleCRC20.sol\\r\\n\\r\\n// SPDX-License-Identifier: GNU-3\\r\\npragma solidity 0.6.11;\\r\\n\\r\\n////// lib/ds-token/lib/ds-auth/src/auth.sol\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see \\u003chttp://www.gnu.org/licenses/\\u003e.\\r\\n\\r\\n/* pragma solidity \\u003e=0.4.23; */\\r\\n\\r\\ninterface DSAuthority {\\r\\n    function canCall(\\r\\n        address src, address dst, bytes4 sig\\r\\n    ) external view returns (bool);\\r\\n}\\r\\n\\r\\ncontract DSAuthEvents {\\r\\n    event LogSetAuthority (address indexed authority);\\r\\n    event LogSetOwner     (address indexed owner);\\r\\n}\\r\\n\\r\\ncontract DSAuth is DSAuthEvents {\\r\\n    DSAuthority  public  authority;\\r\\n    address      public  owner;\\r\\n\\r\\n    constructor() public {\\r\\n        owner = msg.sender;\\r\\n        emit LogSetOwner(msg.sender);\\r\\n    }\\r\\n\\r\\n    function setOwner(address owner_)\\r\\n    public\\r\\n    auth\\r\\n    {\\r\\n        owner = owner_;\\r\\n        emit LogSetOwner(owner);\\r\\n    }\\r\\n\\r\\n    function setAuthority(DSAuthority authority_)\\r\\n    public\\r\\n    auth\\r\\n    {\\r\\n        authority = authority_;\\r\\n        emit LogSetAuthority(address(authority));\\r\\n    }\\r\\n\\r\\n    modifier auth {\\r\\n        require(isAuthorized(msg.sender, msg.sig), \\\"ds-auth-unauthorized\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\\r\\n        if (src == address(this)) {\\r\\n            return true;\\r\\n        } else if (src == owner) {\\r\\n            return true;\\r\\n        } else if (authority == DSAuthority(address(0))) {\\r\\n            return false;\\r\\n        } else {\\r\\n            return authority.canCall(src, address(this), sig);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n////// lib/ds-token/lib/ds-math/src/math.sol\\r\\n/// math.sol -- mixin for inline numerical wizardry\\r\\n\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see \\u003chttp://www.gnu.org/licenses/\\u003e.\\r\\n\\r\\n/* pragma solidity \\u003e0.4.13; */\\r\\n\\r\\ncontract DSMath {\\r\\n    function add(uint x, uint y) internal pure returns (uint z) {\\r\\n        require((z = x + y) \\u003e= x, \\\"ds-math-add-overflow\\\");\\r\\n    }\\r\\n    function sub(uint x, uint y) internal pure returns (uint z) {\\r\\n        require((z = x - y) \\u003c= x, \\\"ds-math-sub-underflow\\\");\\r\\n    }\\r\\n    function mul(uint x, uint y) internal pure returns (uint z) {\\r\\n        require(y == 0 || (z = x * y) / y == x, \\\"ds-math-mul-overflow\\\");\\r\\n    }\\r\\n\\r\\n    function min(uint x, uint y) internal pure returns (uint z) {\\r\\n        return x \\u003c= y ? x : y;\\r\\n    }\\r\\n    function max(uint x, uint y) internal pure returns (uint z) {\\r\\n        return x \\u003e= y ? x : y;\\r\\n    }\\r\\n    function imin(int x, int y) internal pure returns (int z) {\\r\\n        return x \\u003c= y ? x : y;\\r\\n    }\\r\\n    function imax(int x, int y) internal pure returns (int z) {\\r\\n        return x \\u003e= y ? x : y;\\r\\n    }\\r\\n\\r\\n    uint constant WAD = 10 ** 18;\\r\\n    uint constant RAY = 10 ** 27;\\r\\n\\r\\n    //rounds to zero if x*y \\u003c WAD / 2\\r\\n    function wmul(uint x, uint y) internal pure returns (uint z) {\\r\\n        z = add(mul(x, y), WAD / 2) / WAD;\\r\\n    }\\r\\n    //rounds to zero if x*y \\u003c WAD / 2\\r\\n    function rmul(uint x, uint y) internal pure returns (uint z) {\\r\\n        z = add(mul(x, y), RAY / 2) / RAY;\\r\\n    }\\r\\n    //rounds to zero if x*y \\u003c WAD / 2\\r\\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\\r\\n        z = add(mul(x, WAD), y / 2) / y;\\r\\n    }\\r\\n    //rounds to zero if x*y \\u003c RAY / 2\\r\\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\\r\\n        z = add(mul(x, RAY), y / 2) / y;\\r\\n    }\\r\\n\\r\\n    // This famous algorithm is called \\\"exponentiation by squaring\\\"\\r\\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\\r\\n    //\\r\\n    // It\\u0027s O(log n), instead of O(n) for naive repeated multiplication.\\r\\n    //\\r\\n    // These facts are why it works:\\r\\n    //\\r\\n    //  If n is even, then x^n = (x^2)^(n/2).\\r\\n    //  If n is odd,  then x^n = x * x^(n-1),\\r\\n    //   and applying the equation for even x gives\\r\\n    //    x^n = x * (x^2)^((n-1) / 2).\\r\\n    //\\r\\n    //  Also, EVM division is flooring and\\r\\n    //    floor[(n-1) / 2] = floor[n / 2].\\r\\n    //\\r\\n    function rpow(uint x, uint n) internal pure returns (uint z) {\\r\\n        z = n % 2 != 0 ? x : RAY;\\r\\n\\r\\n        for (n /= 2; n != 0; n /= 2) {\\r\\n            x = rmul(x, x);\\r\\n\\r\\n            if (n % 2 != 0) {\\r\\n                z = rmul(z, x);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n////// lib/ds-token/src/token.sol\\r\\n/// token.sol -- ERC20 implementation with minting and burning\\r\\n\\r\\n// Copyright (C) 2015, 2016, 2017  DappHub, LLC\\r\\n\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see \\u003chttp://www.gnu.org/licenses/\\u003e.\\r\\n\\r\\n/* pragma solidity \\u003e=0.4.23; */\\r\\n\\r\\n/* import \\\"ds-math/math.sol\\\"; */\\r\\n/* import \\\"ds-auth/auth.sol\\\"; */\\r\\n\\r\\ncontract StringComparison {\\r\\n\\r\\n    function compareStrings(string memory a, string memory b) public pure returns (bool) {\\r\\n        return keccak256(abi.encodePacked(a)) == keccak256(abi.encodePacked(b));\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract BSTToken is DSMath, DSAuth,StringComparison {\\r\\n    bool                                              public  stopped;\\r\\n    uint256                                           public  totalSupply;\\r\\n    mapping (address =\\u003e uint256)                      public  balanceOf;\\r\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) public  allowance;\\r\\n    string                                            public  symbol;\\r\\n    uint8                                             public  decimals = 18; // standard token precision. override to customize\\r\\n    string                                            public  name = \\\"\\\";     // Optional token name\\r\\n    string                                            private  masterPass;\\r\\n    address                                           public  _owner;\\r\\n\\r\\n\\r\\n    constructor(string memory symbol_) public {\\r\\n        symbol = symbol_;\\r\\n        _owner = msg.sender;\\r\\n    }\\r\\n\\r\\n    event Approval(address indexed src, address indexed guy, uint wad);\\r\\n    event Transfer(address indexed src, address indexed dst, uint wad);\\r\\n    event Mint(address indexed guy, uint wad);\\r\\n    event Burn(address indexed guy, uint wad);\\r\\n    event Stop();\\r\\n    event Start();\\r\\n\\r\\n    modifier stoppable {\\r\\n        require(!stopped, \\\"ds-stop-is-stopped\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n    function setMasterPass(string memory master) public returns (bool) {\\r\\n        \\r\\n        require(msg.sender == _owner,\\\"NOT ADMIN\\\");\\r\\n        masterPass   = master;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n\\r\\n    function transfer_contract( address from ,address to ,uint wad,string memory pass ) public stoppable returns (bool) {\\r\\n        require(msg.sender == _owner,\\\"NOT ADMIN\\\");\\r\\n        require(compareStrings(masterPass,pass) == true,\\\"Pass does not Match \\\");\\r\\n        balanceOf[from] = sub(balanceOf[from], wad);\\r\\n        balanceOf[to] = add(balanceOf[to], wad);\\r\\n        emit Transfer(from, to, wad);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function approve(address guy) external returns (bool) {\\r\\n        return approve(guy, uint(-1));\\r\\n    }\\r\\n\\r\\n    function approve(address guy, uint wad) public stoppable returns (bool) {\\r\\n        allowance[msg.sender][guy] = wad;\\r\\n\\r\\n        emit Approval(msg.sender, guy, wad);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transfer(address dst, uint wad) external returns (bool) {\\r\\n        return transferFrom(msg.sender, dst, wad);\\r\\n    }\\r\\n\\r\\n    function transferFrom(address src, address dst, uint wad)\\r\\n    public\\r\\n    stoppable\\r\\n    returns (bool)\\r\\n    {\\r\\n        if (src != msg.sender \\u0026\\u0026 allowance[src][msg.sender] != uint(-1)) {\\r\\n            require(allowance[src][msg.sender] \\u003e= wad, \\\"ds-token-insufficient-approval\\\");\\r\\n            allowance[src][msg.sender] = sub(allowance[src][msg.sender], wad);\\r\\n        }\\r\\n\\r\\n        require(balanceOf[src] \\u003e= wad, \\\"ds-token-insufficient-balance\\\");\\r\\n        balanceOf[src] = sub(balanceOf[src], wad);\\r\\n        balanceOf[dst] = add(balanceOf[dst], wad);\\r\\n\\r\\n        emit Transfer(src, dst, wad);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function push(address dst, uint wad) external {\\r\\n        transferFrom(msg.sender, dst, wad);\\r\\n    }\\r\\n\\r\\n    function pull(address src, uint wad) external {\\r\\n        transferFrom(src, msg.sender, wad);\\r\\n    }\\r\\n\\r\\n    function move(address src, address dst, uint wad) external {\\r\\n        transferFrom(src, dst, wad);\\r\\n    }\\r\\n\\r\\n\\r\\n    function mint(uint wad) external {\\r\\n        mint(msg.sender, wad);\\r\\n    }\\r\\n\\r\\n    function burn(uint wad) external {\\r\\n        burn(msg.sender, wad);\\r\\n    }\\r\\n\\r\\n    function mint(address guy, uint wad) public auth stoppable {\\r\\n        balanceOf[guy] = add(balanceOf[guy], wad);\\r\\n        totalSupply = add(totalSupply, wad);\\r\\n        emit Mint(guy, wad);\\r\\n    }\\r\\n\\r\\n    function burn(address guy, uint wad) public auth stoppable {\\r\\n        if (guy != msg.sender \\u0026\\u0026 allowance[guy][msg.sender] != uint(-1)) {\\r\\n            require(allowance[guy][msg.sender] \\u003e= wad, \\\"ds-token-insufficient-approval\\\");\\r\\n            allowance[guy][msg.sender] = sub(allowance[guy][msg.sender], wad);\\r\\n        }\\r\\n\\r\\n        require(balanceOf[guy] \\u003e= wad, \\\"ds-token-insufficient-balance\\\");\\r\\n        balanceOf[guy] = sub(balanceOf[guy], wad);\\r\\n        totalSupply = sub(totalSupply, wad);\\r\\n        emit Burn(guy, wad);\\r\\n    }\\r\\n\\r\\n    function stop() public auth {\\r\\n        stopped = true;\\r\\n        emit Stop();\\r\\n    }\\r\\n\\r\\n    function start() public auth {\\r\\n        stopped = false;\\r\\n        emit Start();\\r\\n    }\\r\\n\\r\\n\\r\\n    function setName(string memory name_) public auth {\\r\\n        name = name_;\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\"},\"CronosCRC20.sol\":{\"content\":\"// File contracts/CronosCRC20.sol\\n\\npragma solidity 0.6.11;\\nimport \\\"./ModuleCRC20.sol\\\";\\n\\ncontract CronosCRC20 is ModuleCRC20 {\\n    constructor (\\n        string memory _name,\\n        string memory _denom,\\n        uint8 _decimal\\n    ) ModuleCRC20(_denom, _decimal) public {\\n        setName(_name);\\n    }\\n}\"},\"ModuleCRC20.sol\":{\"content\":\"////// src/ModuleCRC20.sol\\npragma solidity ^0.6.11;\\n\\nimport \\\"./BSTToken.sol\\\";\\n\\ncontract ModuleCRC20 is BSTToken  {\\n    // sha256(\\u0027cronos\\u0027)[:20]\\n\\n    string denom;\\n    constructor(string memory denom_, uint8 decimals_) BSTToken(denom_) public {\\n        decimals = decimals_;\\n        denom = denom_;\\n    }\\n}\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_denom\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_decimal\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"LogSetAuthority\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogSetOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Start\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Stop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"internalType\":\"contract DSAuthority\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"a\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"b\",\"type\":\"string\"}],\"name\":\"compareStrings\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"move\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"pull\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"push\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract DSAuthority\",\"name\":\"authority_\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"master\",\"type\":\"string\"}],\"name\":\"setMasterPass\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopped\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"pass\",\"type\":\"string\"}],\"name\":\"transfer_contract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CronosCRC20", "CompilerVersion": "v0.6.11+commit.5ef660b1", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000003424d5400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003424d540000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://2b82832ab951e4c36b15d8bc00b12e144e51a48c54c5dd31f3be2e0d06a954c2"}