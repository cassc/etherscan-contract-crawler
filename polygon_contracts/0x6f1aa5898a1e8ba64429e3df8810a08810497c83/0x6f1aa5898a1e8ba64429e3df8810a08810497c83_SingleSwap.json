{"SourceCode": "// SPDX-License-Identifier: Unlicensed\r\n\r\n// File: deflationary/contracts/interfaces/ISaltsToken.sol\r\n\r\n\r\npragma solidity ^0.8.9;\r\n\r\n//TODO: Remove this interface and use reward wallet.\r\n\r\ninterface ISaltsToken {\r\n\r\n    function transfer( address _to, uint256 _value ) external returns (bool success);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function registerUser(address _user, address _referer) external;\r\n\r\n    function approve( address _spender, uint256 _value ) external returns (bool success);\r\n\r\n    function transferFrom( address _from, address _to, uint256 _value ) external returns (bool success);\r\n\r\n    function burn(uint256 amount) external;\r\n\r\n    function burnFrom(address account, uint256 amount) external;\r\n\r\n    function CurrentSupply() external view returns (uint256);\r\n\r\n    function setRewardsWallet(address _rewardsContractAddress) external;\r\n\r\n    function BurnedTokens() external view returns (uint256);\r\n\r\n    function setMasterchef(address _masterchef) external;\r\n\r\n    function burnMasterchef(address to, uint256 amount) external;\r\n\r\n    function mintMasterchef(address to, uint256 amount) external;\r\n\r\n    // sets developer wallet address for receiving fee\r\n    function setDevWallet(address _devWallet) external;\r\n\r\n    event Taxes(uint256 burnTax, uint256 devTax, uint256 rewardstax);\r\n\r\n    event UserRegistered( address indexed user, address indexed referer, uint256 timestamp );\r\n\r\n    event Burn(address account, uint256 amount, uint256 timestamp);\r\n\r\n}\r\n\r\n// File: deflationary/contracts/SingleSwap.sol\r\n\r\n\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n}\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\ncontract SingleSwap {\r\n\r\n    IUniswapV2Router02 public swapRouter;\r\n    ISaltsToken public saltsToken;\r\n\r\n    constructor(address _saltsToken, address _routerAddress) {\r\n        saltsToken = ISaltsToken(_saltsToken);\r\n        swapRouter = IUniswapV2Router02(_routerAddress);\r\n    }\r\n\r\n    function swapExactEthForTokens(uint256 amountOutMin,address[] calldata path,address recipient,address _referer)\r\n    external payable\r\n    {\r\n        saltsToken.registerUser(recipient, _referer);\r\n        swapRouter.swapExactETHForTokensSupportingFeeOnTransferTokens{value: msg.value}(amountOutMin,path,recipient,block.timestamp+1000);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_saltsToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_routerAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"saltsToken\",\"outputs\":[{\"internalType\":\"contract ISaltsToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_referer\",\"type\":\"address\"}],\"name\":\"swapExactEthForTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "SingleSwap", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000008a23f62bd850e44e870a18d8e69d4fb99bdbd1dd000000000000000000000000a5e0829caced8ffdd4de3c43696c57f7d7a678ff", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://cc922bc6ad1dfc9366b93037d741a9efccda0749626558cf08771347c47cba0e"}