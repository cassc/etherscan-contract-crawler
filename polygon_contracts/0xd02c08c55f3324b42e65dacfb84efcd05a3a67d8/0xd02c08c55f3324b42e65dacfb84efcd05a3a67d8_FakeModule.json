{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/modules/FakeModule.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19;\\n\\nimport {Order} from \\\"contracts/Diamond/interfaces/IFactory.sol\\\";\\n\\nimport {IModule} from \\\"contracts/Diamond/interfaces/IModule.sol\\\";\\nimport {IAsset} from \\\"contracts/Diamond/interfaces/IAsset.sol\\\";\\n\\ncontract FakeModule is IModule {\\n    /// @dev The default params for the module\\n    /// @dev This struct params just for example\\n    struct DefaultParams {\\n        bool pass;\\n    }\\n\\n    function encodeDefaultParams(DefaultParams memory params) public pure returns (bytes memory) {\\n        return abi.encode(params);\\n    }\\n\\n    function decodeDefaultParams(bytes memory params) public pure returns (DefaultParams memory) {\\n        return abi.decode(params, (DefaultParams));\\n    }\\n\\n    function check(address NFTAddr, uint256 NFTId, Order calldata) external view returns (bool) {\\n        /**\\n         * @dev Get default params from NFT\\n         * @dev The default params is encoded by encodeDefaultParams\\n         * @dev The default params is decoded by decodeDefaultParams\\n         */\\n        bytes memory params = IAsset(NFTAddr).getStrategyModuleDefaultParams(NFTId);\\n        DefaultParams memory defaultParams = decodeDefaultParams(params);\\n\\n        //TODO: check order with defaultParams\\n\\n        return defaultParams.pass;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Diamond/interfaces/IFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19;\\n\\n/* -----------------------------    STRUCT   ----------------------------- */\\n\\nstruct Token {\\n    bool isBudget;\\n    address token;\\n    uint256 amount;\\n}\\n\\nstruct Operator {\\n    address addr;\\n    bytes callData;\\n}\\n\\nstruct Order {\\n    Token input;\\n    Token output;\\n    Operator operator;\\n}\\n\\ninterface IFactory {\\n    /* -----------------------------    EVENT    ----------------------------- */\\n    /// @param createFees The new createFees amount\\n    event CreateFeesChanged(address createFeeToken, uint256 createFees);\\n\\n    /// @param entryFeeRatio The new entryFeeRatio amount\\n    event EntryFeeRatioChanged(uint256 entryFeeRatio);\\n\\n    /// @dev Emitted when the exitFeeRatio is Changed\\n    /// @param exitFeeRatio The new exitFeeRatio amount\\n    event ExitFeeRatioChanged(uint256 exitFeeRatio);\\n\\n    event InvestmentFeeRatioChanged(uint256 investmentFeeRatio);\\n\\n    event ReplicateFeeRatioChanged(uint256 replicateFeeRatio);\\n\\n    event Create(\\n        bytes32 indexed businessId,\\n        uint256 indexed tokenId,\\n        uint256 indexed replicatedTokenId,\\n        address feeToken,\\n        uint256 feeAmount\\n    );\\n\\n    event Deposit(\\n        bytes32 indexed businessId,\\n        address indexed NFTAddr,\\n        uint256 indexed NFTId,\\n        address token,\\n        uint256 budgetAmount,\\n        uint256 authorAmount,\\n        uint256 royaltyFeeAmount,\\n        uint256 feeAmount\\n    );\\n\\n    event Withdraw(\\n        bytes32 indexed businessId,\\n        address indexed NFTAddr,\\n        uint256 indexed NFTId,\\n        address token,\\n        uint256 amount,\\n        address txOrigin\\n    );\\n    event OrderSwap(\\n        address indexed NFTAddr,\\n        uint256 indexed NFTId,\\n        bool InputIsBudget,\\n        address InputToken,\\n        uint256 InputAmount,\\n        bool OutputIsBudget,\\n        address OutputToken,\\n        uint256 OutputAmount\\n    );\\n\\n    event BudgetTokenAdded(address token);\\n\\n    event BudgetTokenRemoved(address token);\\n\\n    event RoyaltyFeeRatioChanged(uint256 royaltyFeeRatio);\\n\\n    event MaxRoyaltyRatioChanged(uint256 oldMaxRoyaltyRatio, uint256 newMaxRoyaltyRatio);\\n\\n    event NFTRoyaltiesChanged(address NFTAddr, uint256 NFTId, uint96 royalties);\\n\\n    event NFTSellPriceChanged(address NFTAddr, uint256 NFTId, uint256 sellPrice);\\n\\n    event ModuleChanged(address NFTAddr, uint256 NFTId);\\n\\n    event PortfolioChanged(address NFTAddr, uint256 NFTId);\\n\\n    event AutoCofferChanged(address oldAutoCoffer, address newAutoCoffer);\\n\\n    event FeeSplitterChanged(address oldFeeSplitter, address newFeeSplitter);\\n\\n    event RecordChanged(address oldRecord, address newRecord);\\n\\n    event ReserveChanged(address oldReserve, address newReserve);\\n\\n    /* -----------------------------    ERROR    ----------------------------- */\\n\\n    error LengthNotEqual(uint256 length1, uint256 length2);\\n\\n    error ModuleNotExists(address module);\\n\\n    error ModuleExcluded(address module);\\n\\n    error ModuleCheckFailed();\\n\\n    error DisableChangeReplicatedToken(uint256 originID);\\n\\n    error RoyaltyRatioOverflow(uint256 royaltyRatio);\\n\\n    error NFTNotExists(address NFTAddr, uint256 NFTId);\\n}\\n\"\r\n    },\r\n    \"contracts/Diamond/interfaces/IModule.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19;\\n\\nimport {Order} from \\\"contracts/Diamond/interfaces/IFactory.sol\\\";\\n\\ninterface IModule {\\n    function check(address NFTAddr, uint256 NFTId, Order calldata order) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/Diamond/interfaces/IAsset.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19;\\n\\nimport {IERC721Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport {Composition} from \\\"contracts/Diamond/interfaces/IPortfolio.sol\\\";\\nimport {Module} from \\\"contracts/Diamond/interfaces/IController.sol\\\";\\n\\nstruct NFTBaseInfo {\\n    uint96 royalties; // 10000 = 100%\\n    address budgetToken;\\n    uint256 sellPrice;\\n}\\n\\ninterface IAsset is IERC721Upgradeable {\\n    function changeModuleDefaultParams(uint256 _tokenId, Module calldata _module) external returns (bool);\\n\\n    function getStrategyModuleDefaultParams(uint256 _tokenId) external view returns (bytes memory);\\n\\n    function isTokenIncluded(uint256 _tokenId, address _token) external view returns (bool);\\n\\n    function mint(\\n        address _owner,\\n        uint256 _replicatedTokenId,\\n        Composition calldata _composition,\\n        NFTBaseInfo calldata _NFTBaseInfo\\n    ) external returns (uint256);\\n\\n    function originalAsset(uint256 _tokenId) external view returns (uint256);\\n\\n    function exists(uint256 _tokenId) external view returns (bool);\\n\\n    function addModule(uint256 _tokenId, Module calldata _module) external returns (bool);\\n\\n    function getModule(uint256 _tokenId) external view returns (Module memory);\\n\\n    function getModuleAddress(uint256 _tokenId) external view returns (address);\\n\\n    function removeModule(uint256 _tokenId, Module calldata _module) external returns (bool);\\n\\n    function changePortfolio(uint256 _NFTId, Composition calldata _composition) external returns (bool);\\n\\n    function getPortfolio(uint256 _tokenId) external view returns (Composition memory);\\n\\n    function getNFTBaseInfo(uint256 _tokenId) external view returns (NFTBaseInfo memory);\\n\\n    function chargeNFTRoyalties(uint256 _tokenId, uint96 _royalties) external returns (bool);\\n\\n    function chargeNFTSellPrice(uint256 _tokenId, uint256 _sellPrice) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC721/IERC721Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/Diamond/interfaces/IPortfolio.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19;\\n\\nstruct AssetInfo {\\n    address token; // 40 bytes\\n    bool inPortfolio; // (true = in portfolio, false = not in portfolio), 1 byte\\n    uint256 costRatio; // (10000 = 100%, 1 = 0.01%), 16 bytes\\n}\\n\\nstruct PORTFOLIO {\\n    address[] assets;\\n    mapping(address => AssetInfo) assetState;\\n}\\n\\nstruct Composition {\\n    address[] FTs;\\n    uint256[] FTCostRatios;\\n}\\n\\ninterface IPortfolio {\\n    function initPortfolio(address _NFTAddr, uint256 _NFTId, Composition calldata _composition)\\n        external\\n        returns (bool);\\n\\n    function changePortfolio(address _NFTAddr, uint256 _NFTId, Composition calldata _composition)\\n        external\\n        returns (bool);\\n\\n    function getPortfolio(address NFTAddr, uint256 NFTId) external view returns (Composition memory composition);\\n\\n    function IsInPortfolio(address NFTAddr, uint256 NFTId, address FT) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/Diamond/interfaces/IController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19;\\n\\nstruct Module {\\n    address addr;\\n    bytes defaultParams;\\n}\\n\\ninterface IController {\\n    function isModule(address _module) external view returns (bool);\\n\\n    function addModule(address[] memory _modules) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\r\n      \"@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \"@prb-math/src/=lib/prb-math/src/\",\r\n      \"@prb/test/=lib/prb-math/lib/prb-test/src/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\r\n      \"prb-math/=lib/prb-math/src/\",\r\n      \"prb-test/=lib/prb-math/lib/prb-test/src/\",\r\n      \"@uniswap/lib/=lib/solidity-lib/\",\r\n      \"@uniswap/v2-core/=lib/v2-core/\",\r\n      \"@uniswap/v2-periphery/=lib/v2-periphery/\",\r\n      \"@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\r\n      \"@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \"@prb-math/src/=lib/prb-math/src/\",\r\n      \"solidity-lib/=lib/solidity-lib/contracts/\",\r\n      \"v2-core/=lib/v2-core/contracts/\",\r\n      \"v2-periphery/=lib/v2-periphery/contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"NFTAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"NFTId\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isBudget\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Token\",\"name\":\"input\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isBudget\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Token\",\"name\":\"output\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct Operator\",\"name\":\"operator\",\"type\":\"tuple\"}],\"internalType\":\"struct Order\",\"name\":\"\",\"type\":\"tuple\"}],\"name\":\"check\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"decodeDefaultParams\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"pass\",\"type\":\"bool\"}],\"internalType\":\"struct FakeModule.DefaultParams\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"pass\",\"type\":\"bool\"}],\"internalType\":\"struct FakeModule.DefaultParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"encodeDefaultParams\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "FakeModule", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}