{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@chainlink/contracts-ccip/src/v0.8/ccip/applications/CCIPReceiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IAny2EVMMessageReceiver} from \\\"../interfaces/IAny2EVMMessageReceiver.sol\\\";\\n\\nimport {Client} from \\\"../libraries/Client.sol\\\";\\n\\nimport {IERC165} from \\\"../../vendor/openzeppelin-solidity/v4.8.0/utils/introspection/IERC165.sol\\\";\\n\\n/// @title CCIPReceiver - Base contract for CCIP applications that can receive messages.\\nabstract contract CCIPReceiver is IAny2EVMMessageReceiver, IERC165 {\\n  address internal immutable i_router;\\n\\n  constructor(address router) {\\n    if (router == address(0)) revert InvalidRouter(address(0));\\n    i_router = router;\\n  }\\n\\n  /// @notice IERC165 supports an interfaceId\\n  /// @param interfaceId The interfaceId to check\\n  /// @return true if the interfaceId is supported\\n  function supportsInterface(bytes4 interfaceId) public pure override returns (bool) {\\n    return interfaceId == type(IAny2EVMMessageReceiver).interfaceId || interfaceId == type(IERC165).interfaceId;\\n  }\\n\\n  /// @inheritdoc IAny2EVMMessageReceiver\\n  function ccipReceive(Client.Any2EVMMessage calldata message) external virtual override onlyRouter {\\n    _ccipReceive(message);\\n  }\\n\\n  /// @notice Override this function in your implementation.\\n  /// @param message Any2EVMMessage\\n  function _ccipReceive(Client.Any2EVMMessage memory message) internal virtual;\\n\\n  /////////////////////////////////////////////////////////////////////\\n  // Plumbing\\n  /////////////////////////////////////////////////////////////////////\\n\\n  /// @notice Return the current router\\n  /// @return i_router address\\n  function getRouter() public view returns (address) {\\n    return address(i_router);\\n  }\\n\\n  error InvalidRouter(address router);\\n\\n  /// @dev only calls from the set router are accepted.\\n  modifier onlyRouter() {\\n    if (msg.sender != address(i_router)) revert InvalidRouter(msg.sender);\\n    _;\\n  }\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IAny2EVMMessageReceiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Client} from \\\"../libraries/Client.sol\\\";\\n\\n/// @notice Application contracts that intend to receive messages from\\n/// the router should implement this interface.\\ninterface IAny2EVMMessageReceiver {\\n  /// @notice Called by the Router to deliver a message.\\n  /// If this reverts, any token transfers also revert. The message\\n  /// will move to a FAILED state and become available for manual execution.\\n  /// @param message CCIP Message\\n  /// @dev Note ensure you check the msg.sender is the OffRampRouter\\n  function ccipReceive(Client.Any2EVMMessage calldata message) external;\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IRouterClient.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Client} from \\\"../libraries/Client.sol\\\";\\n\\ninterface IRouterClient {\\n  error UnsupportedDestinationChain(uint64 destChainSelector);\\n  error InsufficientFeeTokenAmount();\\n  error InvalidMsgValue();\\n\\n  /// @notice Checks if the given chain ID is supported for sending/receiving.\\n  /// @param chainSelector The chain to check.\\n  /// @return supported is true if it is supported, false if not.\\n  function isChainSupported(uint64 chainSelector) external view returns (bool supported);\\n\\n  /// @notice Gets a list of all supported tokens which can be sent or received\\n  /// to/from a given chain id.\\n  /// @param chainSelector The chainSelector.\\n  /// @return tokens The addresses of all tokens that are supported.\\n  function getSupportedTokens(uint64 chainSelector) external view returns (address[] memory tokens);\\n\\n  /// @param destinationChainSelector The destination chainSelector\\n  /// @param message The cross-chain CCIP message including data and/or tokens\\n  /// @return fee returns guaranteed execution fee for the specified message\\n  /// delivery to destination chain\\n  /// @dev returns 0 fee on invalid message.\\n  function getFee(\\n    uint64 destinationChainSelector,\\n    Client.EVM2AnyMessage memory message\\n  ) external view returns (uint256 fee);\\n\\n  /// @notice Request a message to be sent to the destination chain\\n  /// @param destinationChainSelector The destination chain ID\\n  /// @param message The cross-chain CCIP message including data and/or tokens\\n  /// @return messageId The message ID\\n  /// @dev Note if msg.value is larger than the required fee (from getFee) we accept\\n  /// the overpayment with no refund.\\n  function ccipSend(\\n    uint64 destinationChainSelector,\\n    Client.EVM2AnyMessage calldata message\\n  ) external payable returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// End consumer library.\\nlibrary Client {\\n  struct EVMTokenAmount {\\n    address token; // token address on the local chain.\\n    uint256 amount; // Amount of tokens.\\n  }\\n\\n  struct Any2EVMMessage {\\n    bytes32 messageId; // MessageId corresponding to ccipSend on source.\\n    uint64 sourceChainSelector; // Source chain selector.\\n    bytes sender; // abi.decode(sender) if coming from an EVM chain.\\n    bytes data; // payload sent in original message.\\n    EVMTokenAmount[] destTokenAmounts; // Tokens and their amounts in their destination chain representation.\\n  }\\n\\n  // If extraArgs is empty bytes, the default is 200k gas limit and strict = false.\\n  struct EVM2AnyMessage {\\n    bytes receiver; // abi.encode(receiver address) for dest EVM chains\\n    bytes data; // Data payload\\n    EVMTokenAmount[] tokenAmounts; // Token transfers\\n    address feeToken; // Address of feeToken. address(0) means you will send msg.value.\\n    bytes extraArgs; // Populate this with _argsToBytes(EVMExtraArgsV1)\\n  }\\n\\n  // extraArgs will evolve to support new features\\n  // bytes4(keccak256(\\\"CCIP EVMExtraArgsV1\\\"));\\n  bytes4 public constant EVM_EXTRA_ARGS_V1_TAG = 0x97a657c9;\\n  struct EVMExtraArgsV1 {\\n    uint256 gasLimit; // ATTENTION!!! MAX GAS LIMIT 4M FOR BETA TESTING\\n    bool strict; // See strict sequencing details below.\\n  }\\n\\n  function _argsToBytes(EVMExtraArgsV1 memory extraArgs) internal pure returns (bytes memory bts) {\\n    return abi.encodeWithSelector(EVM_EXTRA_ARGS_V1_TAG, extraArgs);\\n  }\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.0/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `to`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address to, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `from` to `to` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) external returns (bool);\\n}\"\r\n    },\r\n    \"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.0/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n  /**\\n    * @dev Returns true if this contract implements the interface defined by\\n    * `interfaceId`. See the corresponding\\n    * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n    * to learn more about how these ids are created.\\n    *\\n    * This function call must use less than 30 000 gas.\\n    */\\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool success);\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] memory accounts,\\n        uint256[] memory ids\\n    ) public view virtual override returns (uint256[] memory) {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(address to, uint256 id, uint256 amount, bytes memory data) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(address from, uint256 id, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(address from, uint256[] memory ids, uint256[] memory amounts) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/payerPolygon.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\n\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\n/// @title Payer Polygon\\r\\n/// @author Bozz & Barba\\r\\n/// @notice This contract is used to pay the prizes for the Raffles of the RaffleMyTrevo contract.\\r\\n/// @dev This contract focuses on a single function to transfer prizes or verify that the prize has not been transferred to the winner and consequently change the status of the raffle to canceled.\\r\\n\\r\\n/*                                                                      \\r\\n    :----:                                                                  \\r\\n  --.:  ..--     .:-..    .:..:     .....    ..   :     ::::.               \\r\\n  =*:      .*=      -      :. .-     .....     :. -     -.   =               \\r\\n  --..  ::--       -      :.  -     -:...      :-      .-:.::               \\r\\n    :----:                                                                  \\r\\n      ..                                                      \\r\\n*/\\r\\n\\r\\ncontract PayerPolygon is Ownable {\\r\\n\\r\\n  /// STRUCTS\\r\\n\\r\\n  /// @dev The struct of a Raffle\\r\\n  struct Raffle{\\r\\n    uint256 id;\\r\\n    address addressPrize;\\r\\n    uint256 idPrize;\\r\\n    uint256 randomNumberVRF;\\r\\n    address winner;\\r\\n    RaffleStatus status;\\r\\n    address creator;\\r\\n    uint256 amount;\\r\\n    TokenType prizeTokenType;\\r\\n  }\\r\\n\\r\\n  /// ENUMS\\r\\n  \\r\\n  /// @dev Enums for the status of a raffle\\r\\n  enum RaffleStatus{\\r\\n    Paid, \\r\\n    Unpaid\\r\\n  }\\r\\n\\r\\n  /// @dev Enums for the type of a prize\\r\\n  enum TokenType{\\r\\n    ERC20,\\r\\n    ERC721,\\r\\n    ERC1155\\r\\n  }\\r\\n\\r\\n  /// EVENTS\\r\\n\\r\\n  /// @dev Event triggered when a prize is transferred to the winner\\r\\n  event paidRaffle(address indexed _creator, address indexed _winnerAddress, uint256 _winnerTicket, uint256 indexed _raffleId, address _addressPrize, uint256 _idPrize, uint256 _tokenType, uint256 _amount);\\r\\n  \\r\\n  /// @dev Event triggered when a prize is not transferred to the winner\\r\\n  event unpaidRaffle(address indexed _creator, address indexed _winnerAddress, uint256 _winnerTicket, uint256 indexed _raffleId, address _addressPrize, uint256 _idPrize, uint256 _tokenType, uint256 _amount);\\r\\n\\r\\n  /// MAPPINGS\\r\\n\\r\\n  /// @dev Mapping of raffles by raffle ID\\r\\n  mapping(uint256 => Raffle) public raffles;\\r\\n\\r\\n  /// @dev Mapping for converting a number into a prize type\\r\\n  mapping(uint256 => TokenType) public tokenIdToTokenType;\\r\\n\\r\\n  /// CONSTRUCTOR\\r\\n  \\r\\n  constructor() payable{}\\r\\n\\r\\n  /// FUNCTIONS\\r\\n\\r\\n  /// @dev Internal function to convert a number into a Token Type\\r\\n  /// @param _prizeTokenType number 0 || 1 || 2\\r\\n  /// @return TokenType\\r\\n  function convertToTokenType(uint256 _prizeTokenType) internal pure returns (TokenType) {\\r\\n    require(_prizeTokenType >= 0 && _prizeTokenType <= 2, \\\"Invalid prize token type value\\\");\\r\\n\\r\\n    if (_prizeTokenType == 0) {\\r\\n      return TokenType.ERC20;\\r\\n    } else if (_prizeTokenType == 1) {\\r\\n      return TokenType.ERC721;\\r\\n    } else {\\r\\n      return TokenType.ERC1155;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @dev Function for the contract owner to request the contract to attempt transferring the prize to the winner.\\r\\n  /// @param _creator Address of the raffle creator\\r\\n  /// @param _winnerAddress Address of the raffle winner\\r\\n  /// @param _winnerTicket Winning raffle ticket number\\r\\n  /// @param _raffleId Raffle ID\\r\\n  /// @param _addressPrize Prize address\\r\\n  /// @param _idPrize NFT Token ID. If it's ERC20, specify 1\\r\\n  /// @param _prizeTokenType 0 = ERC20 || 1 = ERC721 || 2 = ERC1155\\r\\n  /// @param _amount If the prize is an NFT, specify 1; if it's ERC20, provide the token amount with decimals included\\r\\n  /// @return true = The contract successfully transferred the prize to the winner || false = The contract was unable to transfer the prize to the winner\\r\\n  function payWinner(address _creator, address _winnerAddress, uint256 _winnerTicket, uint256 _raffleId, address _addressPrize, uint256 _idPrize, uint256 _prizeTokenType, uint256 _amount) external onlyOwner returns(bool) {\\r\\n    require(_raffleId != 0, \\\"Raffle does not exist\\\");\\r\\n\\r\\n    TokenType prizeTokenType = convertToTokenType(_prizeTokenType);\\r\\n\\r\\n    if(prizeTokenType == TokenType.ERC721){\\r\\n\\r\\n      IERC721 contractPrize = IERC721(_addressPrize);\\r\\n  \\r\\n      contractPrize.safeTransferFrom(_creator, _winnerAddress, _idPrize);\\r\\n\\r\\n      if(_winnerAddress == contractPrize.ownerOf(_idPrize)){\\r\\n\\r\\n        Raffle memory newRaffle = Raffle({\\r\\n          id: _raffleId,\\r\\n          addressPrize: _addressPrize,\\r\\n          idPrize: _idPrize,\\r\\n          randomNumberVRF: _winnerTicket,\\r\\n          winner: _winnerAddress,\\r\\n          status: RaffleStatus.Paid,\\r\\n          creator: _creator,\\r\\n          prizeTokenType: prizeTokenType,\\r\\n          amount: _amount\\r\\n        });\\r\\n\\r\\n        raffles[_raffleId] = newRaffle;\\r\\n\\r\\n        emit paidRaffle(_creator, _winnerAddress, _winnerTicket, _raffleId, _addressPrize, _idPrize, _prizeTokenType, _amount);\\r\\n\\r\\n        return true;\\r\\n      } else{\\r\\n\\r\\n        Raffle memory newRaffle = Raffle({\\r\\n          id: _raffleId,\\r\\n          addressPrize: _addressPrize,\\r\\n          idPrize: _idPrize,\\r\\n          randomNumberVRF: _winnerTicket,\\r\\n          winner: _winnerAddress,\\r\\n          status: RaffleStatus.Unpaid,\\r\\n          creator: _creator,\\r\\n          prizeTokenType: prizeTokenType,\\r\\n          amount: _amount\\r\\n        });\\r\\n\\r\\n        raffles[_raffleId] = newRaffle;\\r\\n\\r\\n        emit unpaidRaffle(_creator, _winnerAddress, _winnerTicket, _raffleId, _addressPrize, _idPrize, _prizeTokenType, _amount);\\r\\n\\r\\n        return false;\\r\\n      }\\r\\n    }else if (prizeTokenType == TokenType.ERC1155) {\\r\\n\\r\\n      ERC1155 contractPrize1155 = ERC1155(_addressPrize);\\r\\n      uint256 initialBalance = contractPrize1155.balanceOf(_winnerAddress, _idPrize);\\r\\n\\r\\n      contractPrize1155.safeTransferFrom(_creator, _winnerAddress, _idPrize, 1, \\\"0x00\\\"); \\r\\n\\r\\n      uint256 finalBalance = contractPrize1155.balanceOf(_winnerAddress, _idPrize);\\r\\n\\r\\n      if(finalBalance > initialBalance){\\r\\n\\r\\n        Raffle memory newRaffle = Raffle({\\r\\n          id: _raffleId,\\r\\n          addressPrize: _addressPrize,\\r\\n          idPrize: _idPrize,\\r\\n          randomNumberVRF: _winnerTicket,\\r\\n          winner: _winnerAddress,\\r\\n          status: RaffleStatus.Paid,\\r\\n          creator: _creator,\\r\\n          prizeTokenType: prizeTokenType,\\r\\n          amount: _amount\\r\\n        });\\r\\n\\r\\n        raffles[_raffleId] = newRaffle;\\r\\n\\r\\n        emit paidRaffle(_creator, _winnerAddress, _winnerTicket, _raffleId, _addressPrize, _idPrize, _prizeTokenType, _amount);\\r\\n\\r\\n        return true;\\r\\n      }else {\\r\\n        \\r\\n        Raffle memory newRaffle = Raffle({\\r\\n          id: _raffleId,\\r\\n          addressPrize: _addressPrize,\\r\\n          idPrize: _idPrize,\\r\\n          randomNumberVRF: _winnerTicket,\\r\\n          winner: _winnerAddress,\\r\\n          status: RaffleStatus.Unpaid,\\r\\n          creator: _creator,\\r\\n          prizeTokenType: prizeTokenType,\\r\\n          amount: _amount\\r\\n        });\\r\\n\\r\\n        raffles[_raffleId] = newRaffle;\\r\\n\\r\\n        emit unpaidRaffle(_creator, _winnerAddress, _winnerTicket, _raffleId, _addressPrize, _idPrize, _prizeTokenType, _amount);\\r\\n\\r\\n        return false;\\r\\n      }\\r\\n        \\r\\n    }else if (prizeTokenType == TokenType.ERC20) {\\r\\n        \\r\\n      IERC20 contractPrize20 = IERC20(_addressPrize);\\r\\n      bool success = false;\\r\\n\\r\\n      if (\\r\\n        contractPrize20.balanceOf(_creator) >= _amount &&\\r\\n        contractPrize20.allowance(_creator, address(this)) >= _amount &&\\r\\n        contractPrize20.transferFrom(_creator, _winnerAddress, _amount)\\r\\n      ) {\\r\\n        success = true;\\r\\n      }\\r\\n\\r\\n      Raffle memory newRaffle = Raffle({\\r\\n        id: _raffleId,\\r\\n        addressPrize: _addressPrize,\\r\\n        idPrize: _idPrize,\\r\\n        randomNumberVRF: _winnerTicket,\\r\\n        winner: _winnerAddress,\\r\\n        status: success ? RaffleStatus.Paid : RaffleStatus.Unpaid,\\r\\n        creator: _creator,\\r\\n        prizeTokenType: prizeTokenType,\\r\\n        amount: _amount\\r\\n      });\\r\\n\\r\\n      raffles[_raffleId] = newRaffle;\\r\\n\\r\\n      if (success) {\\r\\n        emit paidRaffle(_creator, _winnerAddress, _winnerTicket, _raffleId, _addressPrize, _idPrize, _prizeTokenType, _amount);\\r\\n      } else {\\r\\n        emit unpaidRaffle(_creator, _winnerAddress, _winnerTicket, _raffleId, _addressPrize, _idPrize, _prizeTokenType, _amount);\\r\\n      }\\r\\n\\r\\n      return success;\\r\\n    }\\r\\n\\r\\n    return false;\\r\\n  }\\r\\n\\r\\n}\"\r\n    },\r\n    \"contracts/raffleTrevo.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\n\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./vrf.sol\\\";\\r\\nimport \\\"./payerPolygon.sol\\\";\\r\\nimport {ReceiverPolygon} from \\\"./receiverPolygon.sol\\\";\\r\\n\\r\\n/// @title Raffle \\r\\n/// @author Bozz & Barba\\r\\n/// @notice This contract is used to create NFTs and Token raffles.\\r\\n/// @dev This contract basically divides into Creator, Raffles, CCIP, Tickets, Lists, Helpers, and Administrative Functions.\\r\\n\\r\\n/*                                                                      \\r\\n    :----:                                                                  \\r\\n  --.:  ..--     .:-..    .:..:     .....    ..   :     ::::.               \\r\\n  =*:      .*=      -      :. .-     .....     :. -     -.   =               \\r\\n  --..  ::--       -      :.  -     -:...      :-      .-:.::               \\r\\n    :----:                                                                  \\r\\n      ..                                                      \\r\\n*/\\r\\n\\r\\ncontract RaffleMyTrevo is Ownable {\\r\\n\\r\\n  /// STRUCTS\\r\\n\\r\\n  /// @dev The struct of a Raffle\\r\\n  struct Raffle{\\r\\n    uint256 id;\\r\\n    address addressPrize;\\r\\n    uint256 idPrize;\\r\\n    string chainPrize;\\r\\n    uint256 softcap;\\r\\n    uint256 duration;\\r\\n    uint256 deadLine;\\r\\n    uint256 totalPlayers;\\r\\n    uint256 totalSold;\\r\\n    uint256 salesGoal;\\r\\n    uint256 requestId;\\r\\n    uint256 randomNumberVRF;\\r\\n    uint256 getTimeVRF;\\r\\n    address winner;\\r\\n    RaffleStatus status;\\r\\n    address creator;\\r\\n    uint256 nextTicketId;\\r\\n    bool checkedCollection;\\r\\n    TokenType prizeTokenType;\\r\\n    uint256 amount;\\r\\n  }\\r\\n\\r\\n  /// @dev The struct of a Creator\\r\\n  struct Creator{\\r\\n    uint256 id;\\r\\n    address wallet;\\r\\n    uint256 totalRaffles;\\r\\n    uint256 paids;\\r\\n    uint256 canceleds;\\r\\n    uint256 reputation;\\r\\n    bool authorized;\\r\\n  }\\r\\n\\r\\n  /// @dev The struct of a Ticket\\r\\n  struct Ticket{\\r\\n    address user;\\r\\n    uint256 number;\\r\\n    address stableCoin;\\r\\n    bool refunded;\\r\\n    bool winner;\\r\\n  }\\r\\n\\r\\n  /// @dev The struct of a Stable Coin\\r\\n  struct StableCoin{\\r\\n    uint256 decimals;\\r\\n    bool valid;\\r\\n  }\\r\\n\\r\\n  /// ENUMS\\r\\n  \\r\\n  /// @dev Enums for the status of a raffle\\r\\n  enum RaffleStatus{\\r\\n    Closed,\\r\\n    Open,\\r\\n    Canceled,\\r\\n    Paid,\\r\\n    Drawn\\r\\n  }\\r\\n\\r\\n  /// @dev Enums for the type of a prize\\r\\n  enum TokenType {\\r\\n    ERC20,\\r\\n    ERC721,\\r\\n    ERC1155\\r\\n  }\\r\\n\\r\\n  /// MODIFIERS\\r\\n\\r\\n  /// @dev Modifier to grant access to create raffles only to creators permitted by Trevo\\r\\n  modifier onlyCreator() {\\r\\n    require(creators[msg.sender].authorized == true, \\\"Only creators are allowed\\\");\\r\\n     require(creators[msg.sender].reputation >= 1, \\\"Creator's reputation must be equal to or greater than 1\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  /// EVENTS\\r\\n\\r\\n  /// @dev Event triggered when a new stablecoin is added to the contract\\r\\n  event newStableCoin(address indexed _stableCoin);\\r\\n\\r\\n  /// @dev Event triggered when a stablecoin is removed from the contract\\r\\n  event removeStableCoin(address indexed _stableCoin);\\r\\n\\r\\n  /// @dev Event triggered when a new raffle is created in the contract\\r\\n  event openRaffle(uint256 indexed _id, address indexed _addressPrize, uint256 indexed _idPrize, string _chainPrize, uint256 _duration, address _creator, uint256 _amount);\\r\\n\\r\\n  /// @dev Event triggered when a raffle is canceled\\r\\n  event canceledRaffle(uint256 indexed _id, address _creator);\\r\\n\\r\\n  /// @dev Event triggered when a new creator is added to the contract\\r\\n  event addCreator(address indexed _creator);\\r\\n\\r\\n  /// @dev Event triggered when a creator is removed from the contract\\r\\n  event removedCreator(address indexed _creator);\\r\\n\\r\\n  /// @dev Event triggered when a raffle is verified by Trevo on OpenSea\\r\\n  event checkCollection(uint256 indexed _raffleId, bool indexed _check);\\r\\n\\r\\n  /// @dev Event triggered when a winner has their prize paid by the creator\\r\\n  event paidWinner(uint256 indexed _raffleId, address indexed _winner, address _addressPrize, uint256 _idPrize, string indexed _chainPrize, uint256 _amount);\\r\\n\\r\\n  /// @dev Event triggered when a creator receives the tickets after a raffle prize has been paid to the winner\\r\\n  event creatorPaid(address indexed _creator, uint256 indexed _raffleId, uint256 indexed total);\\r\\n\\r\\n  /// @dev Event triggered when Trevo withdraws the fee from the raffles\\r\\n  event withdrawOwner(address indexed _stableCoin, uint256 indexed total);\\r\\n\\r\\n  /// @dev Event triggered when a ticket is purchased by a user\\r\\n  event ticketSold(address indexed _buyer, uint256 indexed _raffleId, uint256 numberOfTickets, address _stableCoin);\\r\\n\\r\\n  /// @dev Event triggered when a random number is requested from Chainlink\\r\\n  event VRFcalled(uint256 indexed _requestId);\\r\\n\\r\\n  /// @dev Event triggered when the random number generated by Chainlink is obtained\\r\\n  event answerVRF(bool fulfilled, uint256[] randomWords, uint256 randomValue);\\r\\n\\r\\n  /// @dev Event triggered when a user withdraws their refund from a canceled raffle\\r\\n  event withdrawRefund(address indexed _user, uint256 indexed _raffleId, uint256 numberOfTickets, address _stableCoin);\\r\\n\\r\\n  /// @dev Event triggered when a raffle is sent to Ethereum by the CCIP and we await a response\\r\\n  event waitPayerEtherum(uint256 indexed _raffleId, address indexed _winner, address _addressPrize, uint256 _idPrize, string indexed _chainPrize, uint256 _amount);\\r\\n\\r\\n  /// MAPPINGS\\r\\n\\r\\n  /// @dev Mapping of raffles by raffle ID\\r\\n  mapping(uint256 => Raffle) public raffles;\\r\\n\\r\\n  /// @dev Mapping of creators by creator address\\r\\n  mapping(address => Creator) public creators;\\r\\n\\r\\n  /// @dev Mapping of stablecoins by stablecoin address\\r\\n  mapping(address => StableCoin) public validStableCoins;\\r\\n\\r\\n  /// @dev Mapping of raffle tickets by raffle ID and ticket number\\r\\n  mapping(uint256 => mapping(uint256 => Ticket)) public tickets;\\r\\n\\r\\n  /// @dev Mapping of ticket sales for each stablecoin for a raffle by raffle ID and stablecoin address\\r\\n  mapping(uint256 => mapping(address => uint256)) public raffleStableCoinSales;\\r\\n\\r\\n  /// @dev Mapping of accumulated fees for each stablecoin by stablecoin address\\r\\n  mapping(address => uint256) public accumulatedFees;\\r\\n\\r\\n  /// @dev Mapping of the total refund for a user for each stablecoin of a raffle by raffle ID, user's wallet address, and stablecoin address\\r\\n  mapping(uint256 => mapping(address => mapping(address => uint256))) public totalToRefund;\\r\\n\\r\\n  /// @dev Mapping of all tickets purchased by a user from a raffle by user's wallet address and raffle ID\\r\\n  mapping(address => mapping(uint256 => uint256[])) public userTickets;\\r\\n\\r\\n  /// @dev Mapping for converting a number into a prize type\\r\\n  mapping(TokenType => uint256) public tokenTypeToUint;\\r\\n\\r\\n  /// ARRAYS\\r\\n  \\r\\n  /// @dev Array with the addresses of stablecoins added to the contract\\r\\n  address[] public validStableCoinsArray;\\r\\n\\r\\n  /// GLOBAL VARIABLES\\r\\n\\r\\n  /// @dev Next raffle ID\\r\\n  uint256 public nextRaffleId = 1;\\r\\n\\r\\n  /// @dev Next creator ID\\r\\n  uint256 public nextCreatorId = 1;\\r\\n\\r\\n  /// @dev Total raffles\\r\\n  uint256 public totalRaffles = 0;\\r\\n\\r\\n  /// @dev Raffle fee\\r\\n  uint256 public feeRaffle = 3;\\r\\n\\r\\n  /// @dev Open Raffle fee\\r\\n  uint256 public _fee = 2;\\r\\n\\r\\n  /// @dev Wallet address for receiving fees\\r\\n  address public walletFees;\\r\\n\\r\\n  /// IMPORTED CONTRACTS\\r\\n\\r\\n  /// @dev Chainlink VRF contract\\r\\n  VRFChainLink vrfChainLink = VRFChainLink(0x0532930b6AAE96c7D27c54668e3f15F10b004909);\\r\\n\\r\\n  /// @dev Contract to transfer the prizes to the winners on Polygon\\r\\n  PayerPolygon payerPolygon = PayerPolygon(0x8F852895E88b5F8bD18DB36953E65Dea91671C9b);\\r\\n\\r\\n  /// @dev Contract that sends the information of a raffle to Ethereum (CCIP)\\r\\n  ReceiverPolygon ccip = ReceiverPolygon(payable(0x664c033b4941c84c89d02BABD2D96f217c8330d6));\\r\\n  \\r\\n  /// CONSTRUCTOR\\r\\n\\r\\n  /// @notice Constructor of the contract that assigns a number to each type of prize for the raffles\\r\\n  constructor() payable{\\r\\n    tokenTypeToUint[TokenType.ERC20] = 0;\\r\\n    tokenTypeToUint[TokenType.ERC721] = 1;\\r\\n    tokenTypeToUint[TokenType.ERC1155] = 2;\\r\\n  }\\r\\n\\r\\n  /// FUNCTIONS\\r\\n\\r\\n  /// @dev Receive \\r\\n  receive() external payable{}\\r\\n\\r\\n  /// @dev Function for the contract owner to add new creators\\r\\n  /// @param _creator Creator's wallet address\\r\\n  function setCreator(address _creator) public onlyOwner {\\r\\n    require(_creator != address(0), \\\"Invalid wallet address\\\");\\r\\n    require(creators[_creator].wallet == address(0), \\\"Creator already exists\\\");\\r\\n\\r\\n    Creator memory newCreator = Creator({\\r\\n      id: nextCreatorId,\\r\\n      wallet: _creator,\\r\\n      totalRaffles: 0,\\r\\n      paids: 0,\\r\\n      canceleds: 0,\\r\\n      reputation: 5,\\r\\n      authorized: true\\r\\n    });\\r\\n\\r\\n    creators[_creator] = newCreator;\\r\\n    nextCreatorId++;\\r\\n\\r\\n    emit addCreator(_creator);\\r\\n  }\\r\\n\\r\\n  /// @dev Function for the contract owner to remove a creator\\r\\n  /// @param _creator Creator's wallet address\\r\\n  function removeCreator(address _creator) public onlyOwner {\\r\\n    require(_creator != address(0), \\\"Invalid wallet address\\\");\\r\\n    creators[_creator].authorized == false;\\r\\n\\r\\n    emit removedCreator(_creator);\\r\\n  }\\r\\n\\r\\n  /// @dev Function for the contract owner to add a new stablecoin\\r\\n  /// @param _stableCoin Stablecoin address\\r\\n  /// @param _decimals Decimals of the stablecoin\\r\\n  function addStable(address _stableCoin, uint256 _decimals) public onlyOwner {\\r\\n    require(!validStableCoins[_stableCoin].valid, \\\"Address already added\\\");\\r\\n\\r\\n    validStableCoins[_stableCoin] = StableCoin({\\r\\n      decimals: _decimals,\\r\\n      valid: true\\r\\n    });\\r\\n\\r\\n    validStableCoinsArray.push(_stableCoin);\\r\\n    emit newStableCoin(_stableCoin);\\r\\n  }\\r\\n\\r\\n  /// @dev Function for the contract owner to remove a stablecoin from the contract\\r\\n  /// @param _stableCoin Stablecoin address\\r\\n  function removeStable(address _stableCoin) public onlyOwner {\\r\\n    require(validStableCoins[_stableCoin].valid, \\\"Address not found\\\");\\r\\n\\r\\n    validStableCoins[_stableCoin].valid = false;\\r\\n\\r\\n    for (uint256 i = 0; i < validStableCoinsArray.length; i++) {\\r\\n      if (validStableCoinsArray[i] == _stableCoin) {\\r\\n        validStableCoinsArray[i] = validStableCoinsArray[validStableCoinsArray.length - 1];\\r\\n        validStableCoinsArray.pop();\\r\\n        break;\\r\\n      }\\r\\n    }\\r\\n\\r\\n    emit removeStableCoin(_stableCoin);\\r\\n  }\\r\\n\\r\\n  /// @dev Function to check if the chain in the raffle is part of the valid chains in the contract\\r\\n  /// @param _chain \\\"Ethereum\\\" || \\\"Polygon\\\"\\r\\n  function isValidChain(string memory _chain) internal pure returns (bool) {\\r\\n    return (\\r\\n      keccak256(bytes(_chain)) == keccak256(bytes(\\\"Ethereum\\\")) ||\\r\\n      keccak256(bytes(_chain)) == keccak256(bytes(\\\"Polygon\\\"))\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /// @dev Function to check if the duration in the raffle is within the allowed durations in the contract\\r\\n  /// @param _duration Duration in seconds: 604800 || 1209600 || 1814400 || 2592000\\r\\n  function isValidDuration(uint256 _duration) internal pure returns (bool) {\\r\\n    uint256[] memory allowedDurations = new uint256[](4);\\r\\n    allowedDurations[0] = 7 days;\\r\\n    allowedDurations[1] = 14 days;\\r\\n    allowedDurations[2] = 21 days;\\r\\n    allowedDurations[3] = 30 days;\\r\\n\\r\\n    for (uint256 i = 0; i < allowedDurations.length; i++) {\\r\\n      if (_duration == allowedDurations[i]) {\\r\\n        return true;\\r\\n      }\\r\\n    }\\r\\n    return false;\\r\\n  }\\r\\n\\r\\n  /// @dev Function to check if the softcap in the raffle is greater than or equal to 1% and less than or equal to 100%\\r\\n  /// @param _softcap softcap number\\r\\n  function isValidSoftcap(uint256 _softcap) internal pure returns (bool) {\\r\\n    return (_softcap >= 1 && _softcap <= 100);\\r\\n  }\\r\\n\\r\\n  /// @dev Function for Creators to open new raffles.\\r\\n  /// @param _addressPrize Prize address\\r\\n  /// @param _idPrize NFT Token ID. If it's ERC20, specify 1\\r\\n  /// @param _salesGoal Number of tickets that can be sold\\r\\n  /// @param _amount If the prize is an NFT, specify 1; if it's ERC20, provide the token amount with decimals included\\r\\n  /// @param _chainPrize Ethereum || Polygon\\r\\n  /// @param _softcap Minimum acceptable ticket sales quantity for the raffle\\r\\n  /// @param _duration Maximum duration for the raffle\\r\\n  /// @param _prizeTokenType 0 = ERC20 || 1 = ERC721 || 2 = ERC1155\\r\\n  function setRaffle(address _addressPrize, uint256 _idPrize, uint256 _salesGoal, uint256 _amount, string memory _chainPrize, uint256 _softcap, uint256 _duration, TokenType _prizeTokenType) public payable onlyCreator returns(uint256 _raffleId){\\r\\n    require(isValidChain(_chainPrize), \\\"Invalid chain\\\");\\r\\n    require(_addressPrize != address(0), \\\"Invalid prize address\\\");\\r\\n    require(isValidDuration(_duration), \\\"Invalid duration\\\");\\r\\n    require(isValidSoftcap(_softcap), \\\"Invalid softcap percentage\\\");\\r\\n    require(_amount > 0, \\\"Amount must be greater than 0\\\");\\r\\n\\r\\n    uint256 fee = (_fee * 10 ** 18) + (_salesGoal * 10 ** 14);\\r\\n    require(msg.value >= fee, \\\"Insufficient balance to create raffle\\\");\\r\\n\\r\\n    uint256 raffleId = nextRaffleId;\\r\\n\\r\\n    Raffle memory newRaffle = Raffle({\\r\\n      id: raffleId,\\r\\n      addressPrize: _addressPrize,\\r\\n      idPrize: _idPrize,\\r\\n      chainPrize: _chainPrize,\\r\\n      softcap: _softcap,\\r\\n      duration: _duration,\\r\\n      deadLine: block.timestamp + _duration,\\r\\n      totalPlayers: 0,\\r\\n      totalSold: 0,\\r\\n      salesGoal: _salesGoal, \\r\\n      requestId: 0,\\r\\n      randomNumberVRF: 0,\\r\\n      winner: address(0),\\r\\n      status: RaffleStatus.Open,\\r\\n      creator: msg.sender,\\r\\n      nextTicketId: 1,\\r\\n      checkedCollection: false,\\r\\n      prizeTokenType: _prizeTokenType,\\r\\n      amount: _amount,\\r\\n      getTimeVRF: 0\\r\\n    });\\r\\n\\r\\n    raffles[raffleId] = newRaffle;\\r\\n    nextRaffleId++;\\r\\n    totalRaffles++;\\r\\n    creators[msg.sender].totalRaffles++;\\r\\n\\r\\n    emit openRaffle(raffleId, _addressPrize, _idPrize, _chainPrize, _duration, msg.sender, _amount);\\r\\n\\r\\n    return raffleId;\\r\\n  }\\r\\n  \\r\\n  /// @dev Function for the contract owner to specify whether the raffle has a verified contract on OpenSea or not.\\r\\n  /// @param _raffleId Raffle ID\\r\\n  /// @param _check true = verified || false = unverified\\r\\n  function setChecked(uint256 _raffleId, bool _check) public onlyOwner{\\r\\n    raffles[_raffleId].checkedCollection = _check;\\r\\n    emit checkCollection(_raffleId, _check);\\r\\n  }\\r\\n\\r\\n  /// @dev Function to execute the raffle.\\r\\n  /// @param _raffleId Raffle ID\\r\\n  function raffle(uint256 _raffleId) public {\\r\\n    require(raffles[_raffleId].id != 0, \\\"Raffle does not exist\\\");\\r\\n    require(raffles[_raffleId].status == RaffleStatus.Open, \\\"Raffle is not open\\\");\\r\\n\\r\\n    if(raffles[_raffleId].totalPlayers == raffles[_raffleId].salesGoal){\\r\\n      callVRF(_raffleId);\\r\\n      return;\\r\\n    }\\r\\n\\r\\n    uint256 softcap = (raffles[_raffleId].salesGoal * raffles[_raffleId].softcap) / 100;\\r\\n    \\r\\n    if (block.timestamp >= raffles[_raffleId].deadLine && raffles[_raffleId].totalPlayers >= softcap){\\r\\n      callVRF(_raffleId);\\r\\n    }else {\\r\\n      raffles[_raffleId].status = RaffleStatus.Canceled;\\r\\n      creators[raffles[_raffleId].creator].canceleds++;\\r\\n      \\r\\n      emit canceledRaffle(_raffleId, raffles[_raffleId].creator);\\r\\n    }\\r\\n  }\\r\\n  \\r\\n  /// @dev Internal function to request a random number from Chainlink.\\r\\n  /// @param _raffleId Raffle ID\\r\\n  function callVRF(uint256 _raffleId) internal returns(uint256 _requestId){\\r\\n    raffles[_raffleId].status = RaffleStatus.Closed;\\r\\n\\r\\n    uint256 numbersRaffle = raffles[_raffleId].totalPlayers;\\r\\n    uint256 requestId = vrfChainLink.requestRandomWords(numbersRaffle);\\r\\n    raffles[_raffleId].requestId = requestId;\\r\\n    raffles[_raffleId].getTimeVRF = block.timestamp;\\r\\n\\r\\n    emit VRFcalled(requestId);\\r\\n    return requestId;\\r\\n  }\\r\\n  \\r\\n  /// @dev Function to check if a random number was obtained from Chainlink and pass the winner to the prize transfer contracts.\\r\\n  /// @param _raffleId Raffle ID\\r\\n  function receiveVRF(uint256 _raffleId) public {\\r\\n    require(raffles[_raffleId].status == RaffleStatus.Closed, \\\"This raffle number has not been drawn yet\\\");\\r\\n\\r\\n    (bool fulfilled, uint256[] memory randomWords, uint256 randomValue) = vrfChainLink.getRequestStatus(raffles[_raffleId].requestId);\\r\\n    require(fulfilled, \\\"VRF request not fulfilled\\\");\\r\\n    raffles[_raffleId].status = RaffleStatus.Drawn;\\r\\n\\r\\n    emit answerVRF(fulfilled, randomWords, randomValue);\\r\\n\\r\\n    raffles[_raffleId].randomNumberVRF = randomValue;\\r\\n    address winner = tickets[_raffleId][randomValue].user;\\r\\n    raffles[_raffleId].winner = winner;\\r\\n    tickets[_raffleId][randomValue].winner = true;\\r\\n\\r\\n    TokenType prizeTokenType = raffles[_raffleId].prizeTokenType;\\r\\n    uint256 prizeTokenTypeUint = tokenTypeToUint[prizeTokenType];\\r\\n\\r\\n    if(keccak256(bytes(raffles[_raffleId].chainPrize)) == keccak256(bytes(\\\"Ethereum\\\"))){\\r\\n\\r\\n      bytes memory data = abi.encode(\\r\\n        raffles[_raffleId].creator,\\r\\n        raffles[_raffleId].winner,\\r\\n        raffles[_raffleId].randomNumberVRF,\\r\\n        raffles[_raffleId].id,\\r\\n        raffles[_raffleId].addressPrize,\\r\\n        raffles[_raffleId].idPrize,\\r\\n        prizeTokenTypeUint,\\r\\n        raffles[_raffleId].amount,\\r\\n        totalRaffles\\r\\n      );\\r\\n\\r\\n      ccip.send(5009297550715157269, 0x664c033b4941c84c89d02BABD2D96f217c8330d6, data); //5009297550715157269 Ethereum // 0x664c033b4941c84c89d02BABD2D96f217c8330d6 payerEthereum\\r\\n      \\r\\n      emit waitPayerEtherum(_raffleId, raffles[_raffleId].winner, raffles[_raffleId].addressPrize, raffles[_raffleId].idPrize, raffles[_raffleId].chainPrize, raffles[_raffleId].amount);\\r\\n    } else{\\r\\n\\r\\n      bool paymentSuccess = payerPolygon.payWinner(\\r\\n        raffles[_raffleId].creator,\\r\\n        raffles[_raffleId].winner,\\r\\n        raffles[_raffleId].randomNumberVRF,\\r\\n        raffles[_raffleId].id,\\r\\n        raffles[_raffleId].addressPrize,\\r\\n        raffles[_raffleId].idPrize,\\r\\n        prizeTokenTypeUint,\\r\\n        raffles[_raffleId].amount\\r\\n        );\\r\\n\\r\\n      if (paymentSuccess) {\\r\\n        \\r\\n        raffles[_raffleId].status = RaffleStatus.Paid;\\r\\n        creators[raffles[_raffleId].creator].paids++;\\r\\n        creators[raffles[_raffleId].creator].reputation += 1;\\r\\n        payCreator(_raffleId);\\r\\n\\r\\n        emit paidWinner(_raffleId, raffles[_raffleId].winner, raffles[_raffleId].addressPrize, raffles[_raffleId].idPrize, raffles[_raffleId].chainPrize, raffles[_raffleId].amount);\\r\\n      } else {\\r\\n\\r\\n        raffles[_raffleId].status = RaffleStatus.Canceled;\\r\\n        creators[raffles[_raffleId].creator].canceleds++;\\r\\n\\r\\n        if (creators[raffles[_raffleId].creator].reputation > 0) {\\r\\n          creators[raffles[_raffleId].creator].reputation -= 1;\\r\\n        }\\r\\n\\r\\n        emit canceledRaffle(_raffleId, raffles[_raffleId].creator);\\r\\n      }  \\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @dev Function for the contract owner to cancel a raffle if it has been in a closed state for more than 1 day\\r\\n  /// @param _raffleId Raffle ID\\r\\n  function forceRaffle(uint256 _raffleId) public onlyOwner() {\\r\\n    require(raffles[_raffleId].status == RaffleStatus.Closed, \\\"This raffle number has not been drawn yet\\\"); \\r\\n\\r\\n    if(raffles[_raffleId].getTimeVRF != 0 && block.timestamp >= (raffles[_raffleId].getTimeVRF + 86400)){\\r\\n\\r\\n       raffles[_raffleId].status = RaffleStatus.Canceled;\\r\\n      creators[raffles[_raffleId].creator].canceleds++;\\r\\n\\r\\n      if (creators[raffles[_raffleId].creator].reputation > 0) {\\r\\n        creators[raffles[_raffleId].creator].reputation -= 1;\\r\\n      }\\r\\n\\r\\n      emit canceledRaffle(_raffleId, raffles[_raffleId].creator);\\r\\n    }   \\r\\n  }\\r\\n\\r\\n  /// @dev Function for the contract owner to inform whether the prize transfer contract on Ethereum has paid the winner or not.\\r\\n  /// @param _raffleId Raffle ID\\r\\n  /// @param _paid true = paid || false = canceled\\r\\n  function receiveEthereum(uint256 _raffleId, bool _paid) public onlyOwner() {\\r\\n    require(raffles[_raffleId].status == RaffleStatus.Drawn, \\\"VRF request not fulfilled\\\");\\r\\n\\r\\n    if(_paid == true){\\r\\n      \\r\\n      raffles[_raffleId].status = RaffleStatus.Paid;\\r\\n      creators[raffles[_raffleId].creator].paids++;\\r\\n      creators[raffles[_raffleId].creator].reputation += 1;\\r\\n      payCreator(_raffleId);\\r\\n\\r\\n      emit paidWinner(_raffleId, raffles[_raffleId].winner, raffles[_raffleId].addressPrize, raffles[_raffleId].idPrize, raffles[_raffleId].chainPrize, raffles[_raffleId].amount);\\r\\n    }else{\\r\\n\\r\\n      raffles[_raffleId].status = RaffleStatus.Canceled;\\r\\n      creators[raffles[_raffleId].creator].canceleds++;\\r\\n\\r\\n      if (creators[raffles[_raffleId].creator].reputation > 0) {\\r\\n        creators[raffles[_raffleId].creator].reputation -= 1;\\r\\n      }\\r\\n\\r\\n      emit canceledRaffle(_raffleId, raffles[_raffleId].creator);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @dev Internal function that is executed to pay the tickets of a raffle to the creator of that raffle if the prize is transferred to the winner.\\r\\n  /// @param _raffleId Raffle ID\\r\\n  function payCreator(uint256 _raffleId) internal {\\r\\n    address[] memory stableCoins = getValidStableCoins();\\r\\n    uint256 totalPaidToCreator = 0;\\r\\n\\r\\n    for (uint256 i = 0; i < stableCoins.length; i++) {\\r\\n      address stableCoinAddress = stableCoins[i];\\r\\n      uint256 soldForStableCoin = getSoldForStableCoin(_raffleId, stableCoinAddress);\\r\\n\\r\\n      uint256 feeAmount = ((soldForStableCoin * 10 ** validStableCoins[stableCoinAddress].decimals) * feeRaffle) / 100;\\r\\n      uint256 netAmount = ((soldForStableCoin * 10 ** validStableCoins[stableCoinAddress].decimals) - feeAmount);\\r\\n\\r\\n      IERC20 stableCoinToken = IERC20(stableCoinAddress);\\r\\n      uint256 contractBalance = stableCoinToken.balanceOf(address(this));\\r\\n      require(contractBalance >= netAmount, \\\"Insufficient contract balance\\\");\\r\\n      require(stableCoinToken.transfer(raffles[_raffleId].creator, netAmount), \\\"Transfer failed\\\");\\r\\n\\r\\n      totalPaidToCreator += netAmount;\\r\\n      updateAccumulatedFee(stableCoinAddress, feeAmount);\\r\\n    }\\r\\n\\r\\n    emit creatorPaid(raffles[_raffleId].creator, _raffleId, totalPaidToCreator);\\r\\n  }\\r\\n\\r\\n  /// @dev Function to obtain a list of all raffles with an open status.\\r\\n  /// @return openRaffles All raffles with an open status.\\r\\n  function getOpenRaffles() public view returns (Raffle[] memory) {\\r\\n    uint256 count = 0;\\r\\n\\r\\n    for (uint256 i = 1; i <= totalRaffles; i++) {\\r\\n      if (raffles[i].status == RaffleStatus.Open) {\\r\\n        count++;\\r\\n      }\\r\\n    }\\r\\n\\r\\n    Raffle[] memory openRaffles = new Raffle[](count);\\r\\n    uint256 index = 0;\\r\\n\\r\\n    for (uint256 i = 1; i <= totalRaffles; i++) {\\r\\n      if (raffles[i].status == RaffleStatus.Open) {\\r\\n        openRaffles[index] = raffles[i];\\r\\n        index++;\\r\\n      }\\r\\n    }\\r\\n\\r\\n    return openRaffles;\\r\\n  }\\r\\n\\r\\n  /// @dev Function to obtain a list of all raffles with an closed status.\\r\\n  /// @return closedRaffles All raffles with an closed status.\\r\\n  function getClosedRaffles() public view returns (Raffle[] memory) {\\r\\n    uint256 count = 0;\\r\\n\\r\\n    for (uint256 i = 1; i <= totalRaffles; i++) {\\r\\n      if (raffles[i].status == RaffleStatus.Closed) {\\r\\n        count++;\\r\\n      }\\r\\n    }\\r\\n\\r\\n    Raffle[] memory closedRaffles = new Raffle[](count);\\r\\n    uint256 index = 0;\\r\\n\\r\\n    for (uint256 i = 1; i <= totalRaffles; i++) {\\r\\n      if (raffles[i].status == RaffleStatus.Closed) {\\r\\n        closedRaffles[index] = raffles[i];\\r\\n        index++;\\r\\n      }\\r\\n    }\\r\\n\\r\\n    return closedRaffles;\\r\\n  }\\r\\n\\r\\n  /// @dev Function to obtain a list of all raffles created by a creator\\r\\n  /// @param _creator Creator's wallet address\\r\\n  /// @return rafflesByCreator All raffles by a creator\\r\\n  function getRafflesByCreator(address _creator) public view returns (Raffle[] memory) {\\r\\n    uint256 count = 0;\\r\\n\\r\\n    for (uint256 i = 1; i <= totalRaffles; i++) {\\r\\n      if (raffles[i].creator == _creator) {\\r\\n        count++;\\r\\n      }\\r\\n    }\\r\\n\\r\\n    Raffle[] memory rafflesByCreator = new Raffle[](count);\\r\\n    uint256 index = 0;\\r\\n\\r\\n    for (uint256 i = 1; i <= totalRaffles; i++) {\\r\\n      if (raffles[i].creator == _creator) {\\r\\n        rafflesByCreator[index] = raffles[i];\\r\\n        index++;\\r\\n      }\\r\\n    }\\r\\n\\r\\n    return rafflesByCreator;\\r\\n  }\\r\\n\\r\\n  /// @dev Function to obtain a list of the last 4 winners of raffles\\r\\n  /// @return recentPaidRaffles Last 4 winners\\r\\n  function getRecentPaidRaffles() public view returns (Raffle[] memory) {\\r\\n    uint256 count = 0;\\r\\n    for (uint256 i = 1; i <= totalRaffles; i++) {\\r\\n      if (raffles[i].status == RaffleStatus.Paid) {\\r\\n        count++;\\r\\n      }\\r\\n    }\\r\\n\\r\\n    uint256 maxRafflesToShow = 4;\\r\\n    if (count < maxRafflesToShow) {\\r\\n        maxRafflesToShow = count;\\r\\n    }\\r\\n\\r\\n    Raffle[] memory recentPaidRaffles = new Raffle[](maxRafflesToShow);\\r\\n    uint256 index = 0;\\r\\n\\r\\n    for (uint256 i = totalRaffles; i >= 1 && index < maxRafflesToShow; i--) {\\r\\n      if (raffles[i].status == RaffleStatus.Paid) {\\r\\n        recentPaidRaffles[index] = raffles[i];\\r\\n        index++;\\r\\n      }\\r\\n    }\\r\\n\\r\\n    return recentPaidRaffles;\\r\\n  }\\r\\n\\r\\n  /// @dev Function to obtain a list of all raffles for which a user has purchased tickets.\\r\\n  /// @return userRaffles Raffles a user has purshased tickets\\r\\n  function getRafflesByUser(address _user) public view returns (Raffle[] memory) {\\r\\n    uint256 count = 0;\\r\\n\\r\\n    for (uint256 i = 1; i <= totalRaffles; i++) {\\r\\n      for (uint256 j = 1; j < raffles[i].nextTicketId; j++) {\\r\\n        if (tickets[i][j].user == _user) {\\r\\n          count++;\\r\\n          break;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n\\r\\n    Raffle[] memory userRaffles = new Raffle[](count);\\r\\n    uint256 index = 0;\\r\\n\\r\\n    for (uint256 i = 1; i <= totalRaffles; i++) {\\r\\n      for (uint256 j = 1; j < raffles[i].nextTicketId; j++) {\\r\\n        if (tickets[i][j].user == _user) {\\r\\n          userRaffles[index] = raffles[i];\\r\\n          index++;\\r\\n          break;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n\\r\\n    return userRaffles;\\r\\n  }\\r\\n\\r\\n  /// @dev Function for a user to purchase tickets for a raffle with their chosen stablecoin\\r\\n  /// @param _raffleId Raffle ID\\r\\n  /// @param numberOfTickets Amount of tickets\\r\\n  /// @param _stableCoin Stablecoin address\\r\\n  function buyTicket(uint256 _raffleId, uint256 numberOfTickets, address _stableCoin) public {\\r\\n    require(raffles[_raffleId].id != 0, \\\"Raffle does not exist\\\");\\r\\n    require(raffles[_raffleId].status == RaffleStatus.Open, \\\"Raffle is not open for ticket purchase\\\");\\r\\n    require(validStableCoins[_stableCoin].valid, \\\"Invalid stable coin address\\\");\\r\\n    require(numberOfTickets > 0, \\\"Must set the number of tickets!\\\");\\r\\n    require(raffles[_raffleId].totalPlayers + numberOfTickets <= raffles[_raffleId].salesGoal, \\\"Maximum sales exceeded\\\");\\r\\n\\r\\n    IERC20 stableCoin = IERC20(_stableCoin);\\r\\n    uint256 totalCost = numberOfTickets * 10 ** validStableCoins[_stableCoin].decimals;\\r\\n    require(stableCoin.balanceOf(msg.sender) >= totalCost, \\\"Insufficient balance\\\");\\r\\n    require(stableCoin.allowance(msg.sender, address(this)) >= totalCost, \\\"You need to approve the total cost of the tickets\\\");\\r\\n    require(stableCoin.transferFrom(msg.sender, address(this), totalCost), \\\"Buy Tickets has not been completed\\\");\\r\\n\\r\\n    for (uint256 i = 0; i < numberOfTickets; i++) {\\r\\n      uint256 currentTicketId = raffles[_raffleId].nextTicketId;\\r\\n      tickets[_raffleId][currentTicketId] = Ticket({\\r\\n          user: msg.sender,\\r\\n          number: currentTicketId,\\r\\n          stableCoin: _stableCoin,\\r\\n          refunded: false,\\r\\n          winner: false\\r\\n      });\\r\\n\\r\\n      userTickets[msg.sender][_raffleId].push(currentTicketId);\\r\\n\\r\\n      raffles[_raffleId].nextTicketId++;\\r\\n      raffles[_raffleId].totalPlayers++;\\r\\n      raffles[_raffleId].totalSold++;\\r\\n    }\\r\\n\\r\\n    raffleStableCoinSales[_raffleId][_stableCoin] += numberOfTickets;\\r\\n\\r\\n    emit ticketSold(msg.sender, _raffleId, numberOfTickets, _stableCoin);\\r\\n\\r\\n    if(raffles[_raffleId].totalPlayers == raffles[_raffleId].salesGoal) {\\r\\n      raffle(_raffleId);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @dev Function for the contract owner to purchase tickets for another wallet for a specific reason, e.g. promotions\\r\\n  /// @param _raffleId Raffle ID\\r\\n  /// @param numberOfTickets Amount of tickets\\r\\n  /// @param _to Wallet address that will be the buyer of these tickets\\r\\n  function buyTicketTo(uint256 _raffleId, uint256 numberOfTickets, address _to) public onlyOwner{\\r\\n    require(raffles[_raffleId].id != 0, \\\"Raffle does not exist\\\");\\r\\n    require(raffles[_raffleId].status == RaffleStatus.Open, \\\"Raffle is not open for ticket purchase\\\");\\r\\n    require(numberOfTickets > 0, \\\"Must set the number of tickets!\\\");\\r\\n    require(raffles[_raffleId].totalPlayers + numberOfTickets <= raffles[_raffleId].salesGoal, \\\"Maximum sales exceeded\\\");\\r\\n\\r\\n    for (uint256 i = 0; i < numberOfTickets; i++) {\\r\\n      uint256 currentTicketId = raffles[_raffleId].nextTicketId;\\r\\n      tickets[_raffleId][currentTicketId] = Ticket({\\r\\n          user: _to,\\r\\n          number: currentTicketId,\\r\\n          stableCoin: 0x2B7a3E5dF23a6087842375e6B50d96226E9d6F17,\\r\\n          refunded: true,\\r\\n          winner: false\\r\\n      });\\r\\n\\r\\n      userTickets[msg.sender][_raffleId].push(currentTicketId);\\r\\n\\r\\n      raffles[_raffleId].nextTicketId++;\\r\\n      raffles[_raffleId].totalPlayers++;\\r\\n    }\\r\\n\\r\\n    emit ticketSold(msg.sender, _raffleId, numberOfTickets, 0x2B7a3E5dF23a6087842375e6B50d96226E9d6F17);\\r\\n\\r\\n    if(raffles[_raffleId].totalPlayers == raffles[_raffleId].salesGoal) {\\r\\n      raffle(_raffleId);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @dev Function for a user to request a refund for a canceled raffle.\\r\\n  /// @param _raffleId Raffle ID\\r\\n  function refundTicket(uint256 _raffleId) public {\\r\\n    require(raffles[_raffleId].status == RaffleStatus.Canceled, \\\"The raffle has not been canceled\\\");\\r\\n\\r\\n    address[] memory stableCoins = getValidStableCoins();\\r\\n\\r\\n    for (uint256 i = 0; i < stableCoins.length; i++) {\\r\\n      uint256 totalTickets = raffles[_raffleId].totalSold;\\r\\n\\r\\n      if (totalTickets > 0) {\\r\\n\\r\\n        for (uint256 j = 1; j <= totalTickets; j++) {\\r\\n          Ticket storage ticket = tickets[_raffleId][j];\\r\\n\\r\\n          if (ticket.user == msg.sender && ticket.refunded == false) {\\r\\n            ticket.refunded = true;\\r\\n            totalToRefund[_raffleId][msg.sender][ticket.stableCoin] += 1;\\r\\n          }\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n\\r\\n    for (uint256 i = 0; i < stableCoins.length; i++) {\\r\\n      address stableCoinAddress = stableCoins[i];\\r\\n\\r\\n      uint256 balanceToken = (totalToRefund[_raffleId][msg.sender][stableCoinAddress] * 10 ** validStableCoins[stableCoinAddress].decimals);\\r\\n\\r\\n      if (balanceToken > 0) {\\r\\n        IERC20 stableCoinToken = IERC20(stableCoinAddress);\\r\\n        require(stableCoinToken.transfer(msg.sender, balanceToken), \\\"Refund failed\\\");\\r\\n\\r\\n        emit withdrawRefund(msg.sender, _raffleId, totalToRefund[_raffleId][msg.sender][stableCoinAddress] * 10 ** validStableCoins[stableCoinAddress].decimals, stableCoinAddress);\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  \\r\\n  /// @dev Internal function to update the accumulated fee balance for each stablecoin of Trevo.\\r\\n  /// @param _stableCoin Stablecoin address\\r\\n  /// @param _amount Fee amount\\r\\n  function updateAccumulatedFee(address _stableCoin, uint256 _amount) internal {\\r\\n    accumulatedFees[_stableCoin] += _amount;\\r\\n  }\\r\\n\\r\\n  /// @dev Function to get a list of all registered stablecoin addresses in the contract.\\r\\n  /// @return validStableCoinsArray List of all registered stablecoin addresses\\r\\n  function getValidStableCoins() public view returns (address[] memory) {\\r\\n    return validStableCoinsArray;\\r\\n  } \\r\\n\\r\\n  /// @dev Internal function to get the ticket sales quantity in a raffle for each stablecoin.\\r\\n  /// @param _raffleId Raffle ID\\r\\n  /// @param _stableCoin Stablecoin address\\r\\n  /// @return raffleStableCoinSales Ticket sales quantity in a raffle for each stablecoin.\\r\\n  function getSoldForStableCoin(uint256 _raffleId, address _stableCoin) internal view returns (uint256) {\\r\\n    return raffleStableCoinSales[_raffleId][_stableCoin];\\r\\n  }\\r\\n\\r\\n  /// @dev Function for the contract owner to withdraw the accumulated fees in the contract for each stablecoin.\\r\\n  function withdrawAccumulatedFees() public onlyOwner {\\r\\n    address[] memory stableCoins = getValidStableCoins();\\r\\n    \\r\\n    for (uint256 i = 0; i < stableCoins.length; i++) {\\r\\n      address stableCoinAddress = stableCoins[i];\\r\\n\\r\\n      uint256 balanceStable = accumulatedFees[stableCoinAddress];\\r\\n\\r\\n      if (balanceStable > 0) {\\r\\n        IERC20 stableCoinToken = IERC20(stableCoinAddress);\\r\\n        accumulatedFees[stableCoinAddress] = 0;\\r\\n        require(stableCoinToken.transfer(walletFees, balanceStable), \\\"Transfer failed\\\");\\r\\n\\r\\n        emit withdrawOwner(stableCoinAddress, balanceStable);\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @dev Function for the contract owner to withdraw the accumulated fees in the contract.\\r\\n  function withdraw() public onlyOwner {\\r\\n    uint256 amount = address(this).balance;\\r\\n    address treasury = 0x4cE9bDa81C190AF1d1cD07d3eB7f0b0F5cFC1136;\\r\\n\\r\\n    (bool sent,) = treasury.call{value: amount}(\\\"\\\");\\r\\n\\r\\n    require(sent, \\\"Failed to send user balance to the owner\\\");\\r\\n  }  \\r\\n  \\r\\n  /// @dev Function for the contract owner to update the fee rate of raffles.\\r\\n  /// @param _newFee New fee value, for example: 3 = 3%\\r\\n  function updateFee(uint256 _newFee) public onlyOwner{\\r\\n    feeRaffle = _newFee;\\r\\n  }\\r\\n\\r\\n  /// @dev Function for the contract owner to update the fee withdrawal address of the contract.\\r\\n  /// @param _newWallet Withdrawal address\\r\\n  function updateWalletFees(address _newWallet) public onlyOwner{\\r\\n    walletFees = _newWallet;\\r\\n  }\\r\\n\\r\\n  /// @dev Function for the contract owner to update the fee rate of open raffles.\\r\\n  /// @param _newFee New fee value, for example: 3 = 3 Matic\\r\\n  function updateOpenFee(uint256 _newFee) public onlyOwner{\\r\\n    _fee = _newFee;\\r\\n  }\\r\\n\\r\\n}\"\r\n    },\r\n    \"contracts/receiverPolygon.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport {IRouterClient} from \\\"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IRouterClient.sol\\\";\\r\\nimport {Client} from \\\"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol\\\";\\r\\nimport {CCIPReceiver} from \\\"@chainlink/contracts-ccip/src/v0.8/ccip/applications/CCIPReceiver.sol\\\";\\r\\nimport {IERC20} from \\\"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.0/token/ERC20/IERC20.sol\\\";\\r\\nimport {LinkTokenInterface} from \\\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\nerror NotEnoughBalance(uint256 currentBalance, uint256 calculatedFees);\\r\\nerror NothingToWithdraw();\\r\\nerror FailedToWithdrawEth(address owner, address target, uint256 value);\\r\\nerror DestinationChainNotWhitelisted(uint64 destinationChainSelector);\\r\\nerror SourceChainNotWhitelisted(uint64 sourceChainSelector);\\r\\nerror SenderNotWhitelisted(address sender);\\r\\n\\r\\ncontract ReceiverPolygon is CCIPReceiver, Ownable{\\r\\n\\r\\n  bytes32 private lastReceivedMessageId;\\r\\n  string private lastReceivedText;\\r\\n\\r\\n  mapping(uint64 => bool) public whitelistedDestinationChains;\\r\\n  mapping(uint64 => bool) public whitelistedSourceChains;\\r\\n  mapping(address => bool) public whitelistedSenders;\\r\\n\\r\\n\\r\\n  modifier onlyWhitelistedDestinationChain(uint64 _destinationChainSelector) {\\r\\n    if (!whitelistedDestinationChains[_destinationChainSelector])\\r\\n      revert DestinationChainNotWhitelisted(_destinationChainSelector);\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  event MessageSent(bytes32 indexed messageId, uint64 indexed destinationChainSelector, address receiver, bytes _data, address feeToken, uint256 fees);\\r\\n  event MessageReceived(bytes32 indexed messageId, uint64 indexed sourceChainSelector, address sender, string text, address token, uint256 tokenAmount);\\r\\n\\r\\n  LinkTokenInterface linkToken;\\r\\n\\r\\n  constructor(address _router, address _link) CCIPReceiver(_router){ //0x3C3D92629A02a8D95D5CB9650fe49C3544f69B43 Polygon\\r\\n    linkToken = LinkTokenInterface(_link); //0xb0897686c545045aFc77CF20eC7A532E3120E0F1 Polygon\\r\\n  }\\r\\n\\r\\n  receive() external payable {}\\r\\n\\r\\n  function send(uint64 _destinationChainSelector, address _receiver, bytes memory _data) external onlyOwner onlyWhitelistedDestinationChain(_destinationChainSelector) returns (bytes32 messageId){\\r\\n    Client.EVM2AnyMessage memory evm2AnyMessage = _buildCCIPMessage(\\r\\n      _receiver,\\r\\n      _data,\\r\\n      address(linkToken)\\r\\n    );\\r\\n\\r\\n    IRouterClient router = IRouterClient(this.getRouter());\\r\\n\\r\\n    uint256 fees = router.getFee(_destinationChainSelector, evm2AnyMessage);\\r\\n\\r\\n    if (fees > linkToken.balanceOf(address(this)))\\r\\n      revert NotEnoughBalance(linkToken.balanceOf(address(this)), fees);\\r\\n\\r\\n    linkToken.approve(address(router), fees);\\r\\n\\r\\n    messageId = router.ccipSend(_destinationChainSelector, evm2AnyMessage);\\r\\n\\r\\n    emit MessageSent(messageId, _destinationChainSelector, _receiver, _data, address(0), fees);\\r\\n\\r\\n    return messageId;\\r\\n  }\\r\\n\\r\\n  function _buildCCIPMessage(address _receiver, bytes memory _data, address _feeTokenAddress) internal pure returns (Client.EVM2AnyMessage memory) {\\r\\n    Client.EVM2AnyMessage memory evm2AnyMessage = Client.EVM2AnyMessage({\\r\\n      receiver: abi.encode(_receiver),\\r\\n      data: abi.encode(_data),\\r\\n      tokenAmounts: new Client.EVMTokenAmount[](0),\\r\\n      extraArgs:  Client._argsToBytes(\\r\\n          Client.EVMExtraArgsV1({gasLimit: 800_000, strict: false})\\r\\n      ),\\r\\n      feeToken: _feeTokenAddress\\r\\n    });\\r\\n    return evm2AnyMessage;\\r\\n  }\\r\\n\\r\\n  function _ccipReceive(Client.Any2EVMMessage memory any2EvmMessage) internal override{\\r\\n    lastReceivedMessageId = any2EvmMessage.messageId;\\r\\n    lastReceivedText = abi.decode(any2EvmMessage.data, (string));\\r\\n\\r\\n    emit MessageReceived(any2EvmMessage.messageId, any2EvmMessage.sourceChainSelector, abi.decode(any2EvmMessage.sender, (address)), abi.decode(any2EvmMessage.data, (string)), any2EvmMessage.destTokenAmounts[0].token, any2EvmMessage.destTokenAmounts[0].amount);\\r\\n  }\\r\\n\\r\\n  function withdraw(address _beneficiary) public onlyOwner {\\r\\n    uint256 amount = address(this).balance;\\r\\n\\r\\n    if (amount == 0) revert NothingToWithdraw();\\r\\n\\r\\n    (bool sent, ) = _beneficiary.call{value: amount}(\\\"\\\");\\r\\n\\r\\n    if (!sent) revert FailedToWithdrawEth(msg.sender, _beneficiary, amount);\\r\\n  }\\r\\n\\r\\n  function withdrawToken(address _beneficiary, address _token) public onlyOwner {\\r\\n    uint256 amount = IERC20(_token).balanceOf(address(this));\\r\\n\\r\\n    if (amount == 0) revert NothingToWithdraw();\\r\\n\\r\\n    IERC20(_token).transfer(_beneficiary, amount);\\r\\n  }\\r\\n\\r\\n  function whitelistDestinationChain(uint64 _destinationChainSelector) external onlyOwner {\\r\\n    whitelistedDestinationChains[_destinationChainSelector] = true;\\r\\n  }\\r\\n\\r\\n  function denylistDestinationChain(uint64 _destinationChainSelector) external onlyOwner {\\r\\n    whitelistedDestinationChains[_destinationChainSelector] = false;\\r\\n  }\\r\\n  \\r\\n}\"\r\n    },\r\n    \"contracts/vrf.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\r\\n\\r\\ncontract VRFChainLink is VRFConsumerBaseV2 {\\r\\n\\r\\n  event RequestSent(uint256 requestId, uint32 numWords, uint256 totalPlayers);\\r\\n  event RequestFulfilled(uint256 requestId, uint256[] randomWords, uint randomValue);\\r\\n  event RandomValueUpdated(uint256 randomValue);\\r\\n\\r\\n  struct RequestStatus {\\r\\n    bool fulfilled;\\r\\n    bool exists;\\r\\n    uint256[] randomWords;\\r\\n    uint256 randomValue;\\r\\n  }\\r\\n\\r\\n  mapping(uint256 => RequestStatus) public s_requests;\\r\\n  VRFCoordinatorV2Interface COORDINATOR;\\r\\n\\r\\n  address public owner;\\r\\n  uint256 private randomValue;\\r\\n  mapping(uint256 => uint256) public requestIdToTotalPlayers;\\r\\n\\r\\n  uint64 s_subscriptionId;\\r\\n  uint256[] public requestIds;\\r\\n  uint256 public lastRequestId;\\r\\n\\r\\n  bytes32 keyHash = 0xcc294a196eeeb44da2888d17c0625cc88d70d9760a69d58d853ba6581a9ab0cd;\\r\\n  uint32 callbackGasLimit = 100000;\\r\\n  uint16 requestConfirmations = 3;\\r\\n  uint32 numWords = 1;\\r\\n\\r\\n  constructor()\\r\\n    VRFConsumerBaseV2(0xAE975071Be8F8eE67addBC1A82488F1C24858067)\\r\\n  {\\r\\n    COORDINATOR = VRFCoordinatorV2Interface(0xAE975071Be8F8eE67addBC1A82488F1C24858067);\\r\\n    s_subscriptionId = 958;\\r\\n    owner = msg.sender;\\r\\n  }\\r\\n\\r\\n  function requestRandomWords(uint256 thisRaffleTotalPlayers) external onlyOwner returns (uint256 requestId) {\\r\\n    requestId = COORDINATOR.requestRandomWords(keyHash, s_subscriptionId, requestConfirmations, callbackGasLimit, numWords);\\r\\n    s_requests[requestId] = RequestStatus({ randomWords: new uint256[](0), exists: true, fulfilled: false, randomValue: 0});\\r\\n\\r\\n    requestIds.push(requestId);\\r\\n    lastRequestId = requestId;\\r\\n\\r\\n    requestIdToTotalPlayers[requestId] = thisRaffleTotalPlayers;\\r\\n\\r\\n    emit RequestSent(requestId, numWords, thisRaffleTotalPlayers);\\r\\n    return requestId;\\r\\n  }\\r\\n\\r\\n  function fulfillRandomWords(uint256 _requestId, uint256[] memory _randomWords) internal override {\\r\\n    require(s_requests[_requestId].exists, \\\"request not found\\\");\\r\\n    s_requests[_requestId].fulfilled = true;\\r\\n    s_requests[_requestId].randomWords = _randomWords ;\\r\\n    s_requests[_requestId].randomValue = (_randomWords[0] % requestIdToTotalPlayers[_requestId])+1;\\r\\n\\r\\n    emit RequestFulfilled(_requestId, _randomWords, s_requests[_requestId].randomValue);\\r\\n  }\\r\\n\\r\\n  function getRequestStatus( uint256 _requestId) external view returns (bool fulfilled, uint256[] memory randomWords, uint256 _randomValue) {\\r\\n    require(s_requests[_requestId].exists, \\\"request not found\\\");\\r\\n    RequestStatus memory request = s_requests[_requestId];\\r\\n    return (request.fulfilled, request.randomWords, request.randomValue);\\r\\n  }\\r\\n\\r\\n  function transferOwnership(address newOwner) public onlyOwner {\\r\\n    require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n    owner = newOwner;\\r\\n  }\\r\\n\\r\\n  modifier onlyOwner() {\\r\\n    require(msg.sender == owner, \\\"Ownable: caller is not the owner\\\");\\r\\n    _;\\r\\n  }\\r\\n  \\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"viaIR\": true,\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"VRFcalled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"}],\"name\":\"addCreator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"fulfilled\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"randomValue\",\"type\":\"uint256\"}],\"name\":\"answerVRF\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"}],\"name\":\"canceledRaffle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_raffleId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"_check\",\"type\":\"bool\"}],\"name\":\"checkCollection\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_raffleId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"name\":\"creatorPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_stableCoin\",\"type\":\"address\"}],\"name\":\"newStableCoin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_addressPrize\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_idPrize\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_chainPrize\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"openRaffle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_raffleId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_addressPrize\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_idPrize\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"_chainPrize\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"paidWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_stableCoin\",\"type\":\"address\"}],\"name\":\"removeStableCoin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"}],\"name\":\"removedCreator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_raffleId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numberOfTickets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_stableCoin\",\"type\":\"address\"}],\"name\":\"ticketSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_raffleId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_addressPrize\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_idPrize\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"_chainPrize\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"waitPayerEtherum\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_stableCoin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"name\":\"withdrawOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_raffleId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numberOfTickets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_stableCoin\",\"type\":\"address\"}],\"name\":\"withdrawRefund\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accumulatedFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stableCoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_decimals\",\"type\":\"uint256\"}],\"name\":\"addStable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_raffleId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numberOfTickets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_stableCoin\",\"type\":\"address\"}],\"name\":\"buyTicket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_raffleId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numberOfTickets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"buyTicketTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"creators\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalRaffles\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paids\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"canceleds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reputation\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"authorized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRaffle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_raffleId\",\"type\":\"uint256\"}],\"name\":\"forceRaffle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getClosedRaffles\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addressPrize\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"idPrize\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"chainPrize\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"softcap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadLine\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salesGoal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"randomNumberVRF\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"getTimeVRF\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"enum RaffleMyTrevo.RaffleStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nextTicketId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"checkedCollection\",\"type\":\"bool\"},{\"internalType\":\"enum RaffleMyTrevo.TokenType\",\"name\":\"prizeTokenType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct RaffleMyTrevo.Raffle[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOpenRaffles\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addressPrize\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"idPrize\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"chainPrize\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"softcap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadLine\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salesGoal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"randomNumberVRF\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"getTimeVRF\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"enum RaffleMyTrevo.RaffleStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nextTicketId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"checkedCollection\",\"type\":\"bool\"},{\"internalType\":\"enum RaffleMyTrevo.TokenType\",\"name\":\"prizeTokenType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct RaffleMyTrevo.Raffle[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"}],\"name\":\"getRafflesByCreator\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addressPrize\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"idPrize\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"chainPrize\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"softcap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadLine\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salesGoal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"randomNumberVRF\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"getTimeVRF\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"enum RaffleMyTrevo.RaffleStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nextTicketId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"checkedCollection\",\"type\":\"bool\"},{\"internalType\":\"enum RaffleMyTrevo.TokenType\",\"name\":\"prizeTokenType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct RaffleMyTrevo.Raffle[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getRafflesByUser\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addressPrize\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"idPrize\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"chainPrize\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"softcap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadLine\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salesGoal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"randomNumberVRF\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"getTimeVRF\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"enum RaffleMyTrevo.RaffleStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nextTicketId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"checkedCollection\",\"type\":\"bool\"},{\"internalType\":\"enum RaffleMyTrevo.TokenType\",\"name\":\"prizeTokenType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct RaffleMyTrevo.Raffle[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecentPaidRaffles\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addressPrize\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"idPrize\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"chainPrize\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"softcap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadLine\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salesGoal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"randomNumberVRF\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"getTimeVRF\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"enum RaffleMyTrevo.RaffleStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nextTicketId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"checkedCollection\",\"type\":\"bool\"},{\"internalType\":\"enum RaffleMyTrevo.TokenType\",\"name\":\"prizeTokenType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct RaffleMyTrevo.Raffle[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getValidStableCoins\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextCreatorId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextRaffleId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_raffleId\",\"type\":\"uint256\"}],\"name\":\"raffle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"raffleStableCoinSales\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"raffles\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addressPrize\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"idPrize\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"chainPrize\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"softcap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadLine\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salesGoal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"randomNumberVRF\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"getTimeVRF\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"enum RaffleMyTrevo.RaffleStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nextTicketId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"checkedCollection\",\"type\":\"bool\"},{\"internalType\":\"enum RaffleMyTrevo.TokenType\",\"name\":\"prizeTokenType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_raffleId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_paid\",\"type\":\"bool\"}],\"name\":\"receiveEthereum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_raffleId\",\"type\":\"uint256\"}],\"name\":\"receiveVRF\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_raffleId\",\"type\":\"uint256\"}],\"name\":\"refundTicket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"}],\"name\":\"removeCreator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stableCoin\",\"type\":\"address\"}],\"name\":\"removeStable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_raffleId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_check\",\"type\":\"bool\"}],\"name\":\"setChecked\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"}],\"name\":\"setCreator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addressPrize\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_idPrize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salesGoal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_chainPrize\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_softcap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"enum RaffleMyTrevo.TokenType\",\"name\":\"_prizeTokenType\",\"type\":\"uint8\"}],\"name\":\"setRaffle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_raffleId\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tickets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"stableCoin\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"refunded\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"winner\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum RaffleMyTrevo.TokenType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"tokenTypeToUint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRaffles\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalToRefund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"updateFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"updateOpenFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newWallet\",\"type\":\"address\"}],\"name\":\"updateWalletFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userTickets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"validStableCoins\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"validStableCoinsArray\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletFees\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAccumulatedFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "RaffleMyTrevo", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}