{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/interfaces/IControllable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IControllable {\\n\\n  function isController(address _contract) external view returns (bool);\\n\\n  function isGovernance(address _contract) external view returns (bool);\\n\\n  function created() external view returns (uint256);\\n\\n  function createdBlock() external view returns (uint256);\\n\\n  function controller() external view returns (address);\\n\\n  function increaseRevision(address oldLogic) external;\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IController {\\n\\n  // --- DEPENDENCY ADDRESSES\\n  function governance() external view returns (address);\\n\\n  function voter() external view returns (address);\\n\\n  function liquidator() external view returns (address);\\n\\n  function forwarder() external view returns (address);\\n\\n  function investFund() external view returns (address);\\n\\n  function veDistributor() external view returns (address);\\n\\n  function platformVoter() external view returns (address);\\n\\n  // --- VAULTS\\n\\n  function vaults(uint id) external view returns (address);\\n\\n  function vaultsList() external view returns (address[] memory);\\n\\n  function vaultsListLength() external view returns (uint);\\n\\n  function isValidVault(address _vault) external view returns (bool);\\n\\n  // --- restrictions\\n\\n  function isOperator(address _adr) external view returns (bool);\\n\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n  /**\\n   * @dev Returns true if this contract implements the interface defined by\\n   * `interfaceId`. See the corresponding\\n   * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n   * to learn more about how these ids are created.\\n   *\\n   * This function call must use less than 30 000 gas.\\n   */\\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint amount\\n  ) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\n/**\\n * https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/release-v4.6/contracts/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n  /**\\n   * @dev Returns the name of the token.\\n     */\\n  function name() external view returns (string memory);\\n\\n  /**\\n   * @dev Returns the symbol of the token.\\n     */\\n  function symbol() external view returns (string memory);\\n\\n  /**\\n   * @dev Returns the decimals places of the token.\\n     */\\n  function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n  /**\\n   * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint256 value,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n\\n  /**\\n   * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n  function nonces(address owner) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n  // solhint-disable-next-line func-name-mixedcase\\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n  /**\\n   * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n  /**\\n   * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n   */\\n  event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n  /**\\n   * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n   */\\n  event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n  /**\\n   * @dev Returns the number of tokens in ``owner``'s account.\\n   */\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  /**\\n   * @dev Returns the owner of the `tokenId` token.\\n   *\\n   * Requirements:\\n   *\\n   * - `tokenId` must exist.\\n   */\\n  function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n  /**\\n   * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n   * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n   *\\n   * Requirements:\\n   *\\n   * - `from` cannot be the zero address.\\n   * - `to` cannot be the zero address.\\n   * - `tokenId` token must exist and be owned by `from`.\\n   * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n   * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function safeTransferFrom(\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) external;\\n\\n  /**\\n   * @dev Transfers `tokenId` token from `from` to `to`.\\n   *\\n   * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n   *\\n   * Requirements:\\n   *\\n   * - `from` cannot be the zero address.\\n   * - `to` cannot be the zero address.\\n   * - `tokenId` token must be owned by `from`.\\n   * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) external;\\n\\n  /**\\n   * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n   * The approval is cleared when the token is transferred.\\n   *\\n   * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n   *\\n   * Requirements:\\n   *\\n   * - The caller must own the token or be an approved operator.\\n   * - `tokenId` must exist.\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address to, uint256 tokenId) external;\\n\\n  /**\\n   * @dev Returns the account approved for `tokenId` token.\\n   *\\n   * Requirements:\\n   *\\n   * - `tokenId` must exist.\\n   */\\n  function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n  /**\\n   * @dev Approve or remove `operator` as an operator for the caller.\\n   * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n   *\\n   * Requirements:\\n   *\\n   * - The `operator` cannot be the caller.\\n   *\\n   * Emits an {ApprovalForAll} event.\\n   */\\n  function setApprovalForAll(address operator, bool _approved) external;\\n\\n  /**\\n   * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n   *\\n   * See {setApprovalForAll}\\n   */\\n  function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n  /**\\n   * @dev Safely transfers `tokenId` token from `from` to `to`.\\n   *\\n   * Requirements:\\n   *\\n   * - `from` cannot be the zero address.\\n   * - `to` cannot be the zero address.\\n   * - `tokenId` token must exist and be owned by `from`.\\n   * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n   * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function safeTransferFrom(\\n    address from,\\n    address to,\\n    uint256 tokenId,\\n    bytes calldata data\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n* @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n* @dev See https://eips.ethereum.org/EIPS/eip-721\\n*/\\ninterface IERC721Metadata is IERC721 {\\n  /**\\n  * @dev Returns the token collection name.\\n  */\\n  function name() external view returns (string memory);\\n\\n  /**\\n  * @dev Returns the token collection symbol.\\n  */\\n  function symbol() external view returns (string memory);\\n\\n  /**\\n  * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n  */\\n  function tokenURI(uint tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n  /**\\n   * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n   * by `operator` from `from`, this function is called.\\n   *\\n   * It must return its Solidity selector to confirm the token transfer.\\n   * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n   *\\n   * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n   */\\n  function onERC721Received(\\n    address operator,\\n    address from,\\n    uint256 tokenId,\\n    bytes calldata data\\n  ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPlatformVoter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"./IVeVotable.sol\\\";\\n\\ninterface IPlatformVoter is IVeVotable {\\n\\n  enum AttributeType {\\n    UNKNOWN,\\n    INVEST_FUND_RATIO,\\n    GAUGE_RATIO,\\n    STRATEGY_COMPOUND\\n  }\\n\\n  struct Vote {\\n    AttributeType _type;\\n    address target;\\n    uint weight;\\n    uint weightedValue;\\n    uint timestamp;\\n  }\\n\\n  function veVotesLength(uint veId) external view returns (uint);\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISmartVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface ISmartVault {\\n\\n  function DEPOSIT_FEE_DENOMINATOR() external view returns (uint256);\\n\\n  function LOCK_PENALTY_DENOMINATOR() external view returns (uint256);\\n\\n  function TO_INVEST_DENOMINATOR() external view returns (uint256);\\n\\n  function VERSION() external view returns (string memory);\\n\\n  function active() external view returns (bool);\\n\\n  function addRewardToken(address rt) external;\\n\\n  function alwaysInvest() external view returns (bool);\\n\\n  function availableToInvestOut() external view returns (uint256);\\n\\n  function changeActivityStatus(bool _active) external;\\n\\n  function changeAlwaysInvest(bool _active) external;\\n\\n  function changeDoHardWorkOnInvest(bool _active) external;\\n\\n  function changePpfsDecreaseAllowed(bool _value) external;\\n\\n  function changeProtectionMode(bool _active) external;\\n\\n  function deposit(uint256 amount) external;\\n\\n  function depositAndInvest(uint256 amount) external;\\n\\n  function depositFeeNumerator() external view returns (uint256);\\n\\n  function depositFor(uint256 amount, address holder) external;\\n\\n  function doHardWork() external;\\n\\n  function doHardWorkOnInvest() external view returns (bool);\\n\\n  function duration() external view returns (uint256);\\n\\n  function earned(address rt, address account)\\n  external\\n  view\\n  returns (uint256);\\n\\n  function earnedWithBoost(address rt, address account)\\n  external\\n  view\\n  returns (uint256);\\n\\n  function exit() external;\\n\\n  function getAllRewards() external;\\n\\n  function getAllRewardsAndRedirect(address owner) external;\\n\\n  function getPricePerFullShare() external view returns (uint256);\\n\\n  function getReward(address rt) external;\\n\\n  function getRewardTokenIndex(address rt) external view returns (uint256);\\n\\n  function initializeSmartVault(\\n    string memory _name,\\n    string memory _symbol,\\n    address _controller,\\n    address __underlying,\\n    uint256 _duration,\\n    bool _lockAllowed,\\n    address _rewardToken,\\n    uint256 _depositFee\\n  ) external;\\n\\n  function lastTimeRewardApplicable(address rt)\\n  external\\n  view\\n  returns (uint256);\\n\\n  function lastUpdateTimeForToken(address) external view returns (uint256);\\n\\n  function lockAllowed() external view returns (bool);\\n\\n  function lockPenalty() external view returns (uint256);\\n\\n  function notifyRewardWithoutPeriodChange(\\n    address _rewardToken,\\n    uint256 _amount\\n  ) external;\\n\\n  function notifyTargetRewardAmount(address _rewardToken, uint256 amount)\\n  external;\\n\\n  function overrideName(string memory value) external;\\n\\n  function overrideSymbol(string memory value) external;\\n\\n  function periodFinishForToken(address) external view returns (uint256);\\n\\n  function ppfsDecreaseAllowed() external view returns (bool);\\n\\n  function protectionMode() external view returns (bool);\\n\\n  function rebalance() external;\\n\\n  function removeRewardToken(address rt) external;\\n\\n  function rewardPerToken(address rt) external view returns (uint256);\\n\\n  function rewardPerTokenStoredForToken(address)\\n  external\\n  view\\n  returns (uint256);\\n\\n  function rewardRateForToken(address) external view returns (uint256);\\n\\n  function rewardTokens() external view returns (address[] memory);\\n\\n  function rewardTokensLength() external view returns (uint256);\\n\\n  function rewardsForToken(address, address) external view returns (uint256);\\n\\n  function setLockPenalty(uint256 _value) external;\\n\\n  function setRewardsRedirect(address owner, address receiver) external;\\n\\n  function setLockPeriod(uint256 _value) external;\\n\\n  function setStrategy(address newStrategy) external;\\n\\n  function setToInvest(uint256 _value) external;\\n\\n  function stop() external;\\n\\n  function strategy() external view returns (address);\\n\\n  function toInvest() external view returns (uint256);\\n\\n  function underlying() external view returns (address);\\n\\n  function underlyingBalanceInVault() external view returns (uint256);\\n\\n  function underlyingBalanceWithInvestment() external view returns (uint256);\\n\\n  function underlyingBalanceWithInvestmentForHolder(address holder)\\n  external\\n  view\\n  returns (uint256);\\n\\n  function underlyingUnit() external view returns (uint256);\\n\\n  function userBoostTs(address) external view returns (uint256);\\n\\n  function userLastDepositTs(address) external view returns (uint256);\\n\\n  function userLastWithdrawTs(address) external view returns (uint256);\\n\\n  function userLockTs(address) external view returns (uint256);\\n\\n  function userRewardPerTokenPaidForToken(address, address)\\n  external\\n  view\\n  returns (uint256);\\n\\n  function withdraw(uint256 numberOfShares) external;\\n\\n  function withdrawAllToVault() external;\\n\\n  function getAllRewardsFor(address rewardsReceiver) external;\\n\\n  function lockPeriod() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IVeDistributor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IVeDistributor {\\n\\n  function rewardToken() external view returns (address);\\n\\n  function checkpoint() external;\\n\\n  function checkpointTotalSupply() external;\\n\\n  function claim(uint _tokenId) external returns (uint);\\n\\n  function claimable(uint _tokenId) external view returns (uint);\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IVeTetu.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"./IERC721Metadata.sol\\\";\\n\\ninterface IVeTetu is IERC721Metadata {\\n\\n  enum DepositType {\\n    DEPOSIT_FOR_TYPE,\\n    CREATE_LOCK_TYPE,\\n    INCREASE_LOCK_AMOUNT,\\n    INCREASE_UNLOCK_TIME,\\n    MERGE_TYPE\\n  }\\n\\n  struct Point {\\n    int128 bias;\\n    int128 slope; // # -dweight / dt\\n    uint ts;\\n    uint blk; // block\\n  }\\n  /* We cannot really do block numbers per se b/c slope is per time, not per block\\n  * and per block could be fairly bad b/c Ethereum changes blocktimes.\\n  * What we can do is to extrapolate ***At functions */\\n\\n  function attachments(uint tokenId) external view returns (uint);\\n\\n  function lockedAmounts(uint veId, address stakingToken) external view returns (uint);\\n\\n  function lockedDerivedAmount(uint veId) external view returns (uint);\\n\\n  function lockedEnd(uint veId) external view returns (uint);\\n\\n//  function voted(uint tokenId) external view returns (uint);\\n  function isVoted(uint tokenId) external view returns (bool);\\n\\n  function tokens(uint idx) external view returns (address);\\n\\n  function balanceOfNFT(uint) external view returns (uint);\\n\\n  function balanceOfNFTAt(uint _tokenId, uint _t) external view returns (uint);\\n\\n  function isApprovedOrOwner(address, uint) external view returns (bool);\\n\\n  function createLockFor(address _token, uint _value, uint _lockDuration, address _to) external returns (uint);\\n\\n  function userPointEpoch(uint tokenId) external view returns (uint);\\n\\n  function epoch() external view returns (uint);\\n\\n  function userPointHistory(uint tokenId, uint loc) external view returns (Point memory);\\n\\n  function pointHistory(uint loc) external view returns (Point memory);\\n\\n  function checkpoint() external;\\n\\n  function increaseAmount(address _token, uint _tokenId, uint _value) external;\\n\\n  function attachToken(uint tokenId) external;\\n\\n  function detachToken(uint tokenId) external;\\n\\n  function voting(uint tokenId) external;\\n\\n  function abstain(uint tokenId) external;\\n\\n  function totalSupplyAt(uint _block) external view returns (uint);\\n\\n  function totalSupplyAtT(uint timestamp) external view returns (uint);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IVeVotable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IVeVotable {\\n\\n  function isVotesExist(uint veId) external view returns (bool);\\n\\n  function detachTokenFromAll(uint tokenId, address owner) external;\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IVoter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"./IVeVotable.sol\\\";\\n\\ninterface IVoter is IVeVotable {\\n\\n  function ve() external view returns (address);\\n\\n  function attachTokenToGauge(address stakingToken, uint _tokenId, address account) external;\\n\\n  function detachTokenFromGauge(address stakingToken, uint _tokenId, address account) external;\\n\\n  function distribute(address stakingToken) external;\\n\\n  function notifyRewardAmount(uint amount) external;\\n\\n  function votedVaultsLength(uint veId) external view returns (uint);\\n\\n}\\n\"\r\n    },\r\n    \"contracts/lib/Base64.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\n/// @title Base64\\n/// @notice Provides a function for encoding some bytes in base64\\n/// @author Brecht Devos <brecht@loopring.org>\\nlibrary Base64 {\\n  bytes internal constant TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n  /// @notice Encodes some bytes to the base64 representation\\n  function encode(bytes memory data) internal pure returns (string memory) {\\n    uint len = data.length;\\n    if (len == 0) return \\\"\\\";\\n\\n    // multiply by 4/3 rounded up\\n    uint encodedLen = 4 * ((len + 2) / 3);\\n\\n    // Add some extra buffer at the end\\n    bytes memory result = new bytes(encodedLen + 32);\\n\\n    bytes memory table = TABLE;\\n\\n    assembly {\\n      let tablePtr := add(table, 1)\\n      let resultPtr := add(result, 32)\\n\\n      for {\\n        let i := 0\\n      } lt(i, len) {\\n\\n      } {\\n        i := add(i, 3)\\n        let input := and(mload(add(data, i)), 0xffffff)\\n\\n        let out := mload(add(tablePtr, and(shr(18, input), 0x3F)))\\n        out := shl(8, out)\\n        out := add(out, and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF))\\n        out := shl(8, out)\\n        out := add(out, and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF))\\n        out := shl(8, out)\\n        out := add(out, and(mload(add(tablePtr, and(input, 0x3F))), 0xFF))\\n        out := shl(224, out)\\n\\n        mstore(resultPtr, out)\\n\\n        resultPtr := add(resultPtr, 4)\\n      }\\n\\n      switch mod(len, 3)\\n      case 1 {\\n        mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\n      }\\n      case 2 {\\n        mstore(sub(resultPtr, 1), shl(248, 0x3d))\\n      }\\n\\n      mstore(result, encodedLen)\\n    }\\n\\n    return string(result);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/InterfaceIds.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.17;\\n\\n/// @title Library for interface IDs\\n/// @author bogdoslav\\nlibrary InterfaceIds {\\n\\n  /// @notice Version of the contract\\n  /// @dev Should be incremented when contract changed\\n  string public constant INTERFACE_IDS_LIB_VERSION = \\\"1.0.1\\\";\\n\\n  /// default notation:\\n  /// bytes4 public constant I_VOTER = type(IVoter).interfaceId;\\n\\n  /// As type({Interface}).interfaceId can be changed,\\n  /// when some functions changed at the interface,\\n  /// so used hardcoded interface identifiers\\n\\n  bytes4 public constant I_VOTER = bytes4(keccak256(\\\"IVoter\\\"));\\n  bytes4 public constant I_BRIBE = bytes4(keccak256(\\\"IBribe\\\"));\\n  bytes4 public constant I_GAUGE = bytes4(keccak256(\\\"IGauge\\\"));\\n  bytes4 public constant I_VE_TETU = bytes4(keccak256(\\\"IVeTetu\\\"));\\n  bytes4 public constant I_SPLITTER = bytes4(keccak256(\\\"ISplitter\\\"));\\n  bytes4 public constant I_FORWARDER = bytes4(keccak256(\\\"IForwarder\\\"));\\n  bytes4 public constant I_MULTI_POOL = bytes4(keccak256(\\\"IMultiPool\\\"));\\n  bytes4 public constant I_CONTROLLER = bytes4(keccak256(\\\"IController\\\"));\\n  bytes4 public constant I_TETU_ERC165 = bytes4(keccak256(\\\"ITetuERC165\\\"));\\n  bytes4 public constant I_STRATEGY_V2 = bytes4(keccak256(\\\"IStrategyV2\\\"));\\n  bytes4 public constant I_STRATEGY_V3 = bytes4(keccak256(\\\"IStrategyV3\\\"));\\n  bytes4 public constant I_CONTROLLABLE = bytes4(keccak256(\\\"IControllable\\\"));\\n  bytes4 public constant I_TETU_VAULT_V2 = bytes4(keccak256(\\\"ITetuVaultV2\\\"));\\n  bytes4 public constant I_PLATFORM_VOTER = bytes4(keccak256(\\\"IPlatformVoter\\\"));\\n  bytes4 public constant I_VE_DISTRIBUTOR = bytes4(keccak256(\\\"IVeDistributor\\\"));\\n  bytes4 public constant I_TETU_CONVERTER = bytes4(keccak256(\\\"ITetuConverter\\\"));\\n  bytes4 public constant I_VAULT_INSURANCE = bytes4(keccak256(\\\"IVaultInsurance\\\"));\\n  bytes4 public constant I_STRATEGY_STRICT = bytes4(keccak256(\\\"IStrategyStrict\\\"));\\n  bytes4 public constant I_ERC4626 = bytes4(keccak256(\\\"IERC4626\\\"));\\n\\n}\\n\"\r\n    },\r\n    \"contracts/lib/SlotsLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.17;\\n\\n/// @title Library for setting / getting slot variables (used in upgradable proxy contracts)\\n/// @author bogdoslav\\nlibrary SlotsLib {\\n\\n  /// @notice Version of the contract\\n  /// @dev Should be incremented when contract changed\\n  string public constant SLOT_LIB_VERSION = \\\"1.0.0\\\";\\n\\n  // ************* GETTERS *******************\\n\\n  /// @dev Gets a slot as bytes32\\n  function getBytes32(bytes32 slot) internal view returns (bytes32 result) {\\n    assembly {\\n      result := sload(slot)\\n    }\\n  }\\n\\n  /// @dev Gets a slot as an address\\n  function getAddress(bytes32 slot) internal view returns (address result) {\\n    assembly {\\n      result := sload(slot)\\n    }\\n  }\\n\\n  /// @dev Gets a slot as uint256\\n  function getUint(bytes32 slot) internal view returns (uint result) {\\n    assembly {\\n      result := sload(slot)\\n    }\\n  }\\n\\n  // ************* ARRAY GETTERS *******************\\n\\n  /// @dev Gets an array length\\n  function arrayLength(bytes32 slot) internal view returns (uint result) {\\n    assembly {\\n      result := sload(slot)\\n    }\\n  }\\n\\n  /// @dev Gets a slot array by index as address\\n  /// @notice First slot is array length, elements ordered backward in memory\\n  /// @notice This is unsafe, without checking array length.\\n  function addressAt(bytes32 slot, uint index) internal view returns (address result) {\\n    bytes32 pointer = bytes32(uint(slot) - 1 - index);\\n    assembly {\\n      result := sload(pointer)\\n    }\\n  }\\n\\n  /// @dev Gets a slot array by index as uint\\n  /// @notice First slot is array length, elements ordered backward in memory\\n  /// @notice This is unsafe, without checking array length.\\n  function uintAt(bytes32 slot, uint index) internal view returns (uint result) {\\n    bytes32 pointer = bytes32(uint(slot) - 1 - index);\\n    assembly {\\n      result := sload(pointer)\\n    }\\n  }\\n\\n  // ************* SETTERS *******************\\n\\n  /// @dev Sets a slot with bytes32\\n  /// @notice Check address for 0 at the setter\\n  function set(bytes32 slot, bytes32 value) internal {\\n    assembly {\\n      sstore(slot, value)\\n    }\\n  }\\n\\n  /// @dev Sets a slot with address\\n  /// @notice Check address for 0 at the setter\\n  function set(bytes32 slot, address value) internal {\\n    assembly {\\n      sstore(slot, value)\\n    }\\n  }\\n\\n  /// @dev Sets a slot with uint\\n  function set(bytes32 slot, uint value) internal {\\n    assembly {\\n      sstore(slot, value)\\n    }\\n  }\\n\\n  // ************* ARRAY SETTERS *******************\\n\\n  /// @dev Sets a slot array at index with address\\n  /// @notice First slot is array length, elements ordered backward in memory\\n  /// @notice This is unsafe, without checking array length.\\n  function setAt(bytes32 slot, uint index, address value) internal {\\n    bytes32 pointer = bytes32(uint(slot) - 1 - index);\\n    assembly {\\n      sstore(pointer, value)\\n    }\\n  }\\n\\n  /// @dev Sets a slot array at index with uint\\n  /// @notice First slot is array length, elements ordered backward in memory\\n  /// @notice This is unsafe, without checking array length.\\n  function setAt(bytes32 slot, uint index, uint value) internal {\\n    bytes32 pointer = bytes32(uint(slot) - 1 - index);\\n    assembly {\\n      sstore(pointer, value)\\n    }\\n  }\\n\\n  /// @dev Sets an array length\\n  function setLength(bytes32 slot, uint length) internal {\\n    assembly {\\n      sstore(slot, length)\\n    }\\n  }\\n\\n  /// @dev Pushes an address to the array\\n  function push(bytes32 slot, address value) internal {\\n    uint length = arrayLength(slot);\\n    setAt(slot, length, value);\\n    setLength(slot, length + 1);\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/lib/StringLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.17;\\n\\n\\nlibrary StringLib {\\n\\n  /// @dev Inspired by OraclizeAPI's implementation - MIT license\\n  ///      https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n  function toString(uint value) external pure returns (string memory) {\\n    return _toString(value);\\n  }\\n\\n  function _toString(uint value) internal pure returns (string memory) {\\n    if (value == 0) {\\n      return \\\"0\\\";\\n    }\\n    uint temp = value;\\n    uint digits;\\n    while (temp != 0) {\\n      digits++;\\n      temp /= 10;\\n    }\\n    bytes memory buffer = new bytes(digits);\\n    while (value != 0) {\\n      digits -= 1;\\n      buffer[digits] = bytes1(uint8(48 + uint(value % 10)));\\n      value /= 10;\\n    }\\n    return string(buffer);\\n  }\\n\\n  function toAsciiString(address x) external pure returns (string memory) {\\n    return _toAsciiString(x);\\n  }\\n\\n  function _toAsciiString(address x) internal pure returns (string memory) {\\n    bytes memory s = new bytes(40);\\n    for (uint i = 0; i < 20; i++) {\\n      bytes1 b = bytes1(uint8(uint(uint160(x)) / (2 ** (8 * (19 - i)))));\\n      bytes1 hi = bytes1(uint8(b) / 16);\\n      bytes1 lo = bytes1(uint8(b) - 16 * uint8(hi));\\n      s[2 * i] = _char(hi);\\n      s[2 * i + 1] = _char(lo);\\n    }\\n    return string(s);\\n  }\\n\\n  function char(bytes1 b) external pure returns (bytes1 c) {\\n    return _char(b);\\n  }\\n\\n  function _char(bytes1 b) internal pure returns (bytes1 c) {\\n    if (uint8(b) < 10) return bytes1(uint8(b) + 0x30);\\n    else return bytes1(uint8(b) + 0x57);\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/openzeppelin/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n  /**\\n   * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n  function isContract(address account) internal view returns (bool) {\\n    // This method relies on extcodesize/address.code.length, which returns 0\\n    // for contracts in construction, since the code is only stored at the end\\n    // of the constructor execution.\\n\\n    return account.code.length > 0;\\n  }\\n\\n  /**\\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n  function sendValue(address payable recipient, uint256 amount) internal {\\n    require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n    (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n    require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n  }\\n\\n  /**\\n   * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n  function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n  function functionCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, 0, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value\\n  ) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n    (bool success, bytes memory returndata) = target.call{value: value}(data);\\n    return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n  function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n    return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n  function functionStaticCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal view returns (bytes memory) {\\n    (bool success, bytes memory returndata) = target.staticcall(data);\\n    return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n  function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n    return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n  function functionDelegateCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    (bool success, bytes memory returndata) = target.delegatecall(data);\\n    return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n  function verifyCallResultFromTarget(\\n    address target,\\n    bool success,\\n    bytes memory returndata,\\n    string memory errorMessage\\n  ) internal view returns (bytes memory) {\\n    if (success) {\\n      if (returndata.length == 0) {\\n        // only check isContract if the call was successful and the return data is empty\\n        // otherwise we already know that it was a contract\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n      }\\n      return returndata;\\n    } else {\\n      _revert(returndata, errorMessage);\\n    }\\n  }\\n\\n  /**\\n   * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n  function verifyCallResult(\\n    bool success,\\n    bytes memory returndata,\\n    string memory errorMessage\\n  ) internal pure returns (bytes memory) {\\n    if (success) {\\n      return returndata;\\n    } else {\\n      _revert(returndata, errorMessage);\\n    }\\n  }\\n\\n  function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n    // Look for revert reason and bubble it up if present\\n    if (returndata.length > 0) {\\n      // The easiest way to bubble the revert reason is using memory via assembly\\n      /// @solidity memory-safe-assembly\\n      assembly {\\n        let returndata_size := mload(returndata)\\n        revert(add(32, returndata), returndata_size)\\n      }\\n    } else {\\n      revert(errorMessage);\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/openzeppelin/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"../interfaces/IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n  /**\\n   * @dev See {IERC165-supportsInterface}.\\n     */\\n  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n    return interfaceId == type(IERC165).interfaceId;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/openzeppelin/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n  uint8 private _initialized;\\n\\n  /**\\n   * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n  bool private _initializing;\\n\\n  /**\\n   * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n  event Initialized(uint8 version);\\n\\n  /**\\n   * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n  modifier initializer() {\\n    bool isTopLevelCall = !_initializing;\\n    require(\\n      (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n      \\\"Initializable: contract is already initialized\\\"\\n    );\\n    _initialized = 1;\\n    if (isTopLevelCall) {\\n      _initializing = true;\\n    }\\n    _;\\n    if (isTopLevelCall) {\\n      _initializing = false;\\n      emit Initialized(1);\\n    }\\n  }\\n\\n  /**\\n   * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n  modifier reinitializer(uint8 version) {\\n    require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n    _initialized = version;\\n    _initializing = true;\\n    _;\\n    _initializing = false;\\n    emit Initialized(version);\\n  }\\n\\n  /**\\n   * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n  modifier onlyInitializing() {\\n    require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n  function _disableInitializers() internal virtual {\\n    require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n    if (_initialized != type(uint8).max) {\\n      _initialized = type(uint8).max;\\n      emit Initialized(type(uint8).max);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n  function _getInitializedVersion() internal view returns (uint8) {\\n    return _initialized;\\n  }\\n\\n  /**\\n   * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n  function _isInitializing() internal view returns (bool) {\\n    return _initializing;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/openzeppelin/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n  enum Rounding {\\n    Down, // Toward negative infinity\\n    Up, // Toward infinity\\n    Zero // Toward zero\\n  }\\n\\n  /**\\n   * @dev Returns the largest of two numbers.\\n     */\\n  function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a > b ? a : b;\\n  }\\n\\n  /**\\n   * @dev Returns the smallest of two numbers.\\n     */\\n  function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a < b ? a : b;\\n  }\\n\\n  /**\\n   * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n  function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // (a + b) / 2 can overflow.\\n    return (a & b) + (a ^ b) / 2;\\n  }\\n\\n  /**\\n   * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n  function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // (a + b - 1) / b can overflow on addition, so we distribute.\\n    return a == 0 ? 0 : (a - 1) / b + 1;\\n  }\\n\\n  /**\\n   * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n  function mulDiv(\\n    uint256 x,\\n    uint256 y,\\n    uint256 denominator\\n  ) internal pure returns (uint256 result) {\\n  unchecked {\\n    // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n    // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n    // variables such that product = prod1 * 2^256 + prod0.\\n    uint256 prod0; // Least significant 256 bits of the product\\n    uint256 prod1; // Most significant 256 bits of the product\\n    assembly {\\n      let mm := mulmod(x, y, not(0))\\n      prod0 := mul(x, y)\\n      prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n    }\\n\\n    // Handle non-overflow cases, 256 by 256 division.\\n    if (prod1 == 0) {\\n      return prod0 / denominator;\\n    }\\n\\n    // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n    require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n    ///////////////////////////////////////////////\\n    // 512 by 256 division.\\n    ///////////////////////////////////////////////\\n\\n    // Make division exact by subtracting the remainder from [prod1 prod0].\\n    uint256 remainder;\\n    assembly {\\n    // Compute remainder using mulmod.\\n      remainder := mulmod(x, y, denominator)\\n\\n    // Subtract 256 bit number from 512 bit number.\\n      prod1 := sub(prod1, gt(remainder, prod0))\\n      prod0 := sub(prod0, remainder)\\n    }\\n\\n    // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n    // See https://cs.stackexchange.com/q/138556/92363.\\n\\n    // Does not overflow because the denominator cannot be zero at this stage in the function.\\n    uint256 twos = denominator & (~denominator + 1);\\n    assembly {\\n    // Divide denominator by twos.\\n      denominator := div(denominator, twos)\\n\\n    // Divide [prod1 prod0] by twos.\\n      prod0 := div(prod0, twos)\\n\\n    // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n      twos := add(div(sub(0, twos), twos), 1)\\n    }\\n\\n    // Shift in bits from prod1 into prod0.\\n    prod0 |= prod1 * twos;\\n\\n    // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n    // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n    // four bits. That is, denominator * inv = 1 mod 2^4.\\n    uint256 inverse = (3 * denominator) ^ 2;\\n\\n    // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n    // in modular arithmetic, doubling the correct bits in each step.\\n    inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n    inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n    inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n    inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n    inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n    inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n    // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n    // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n    // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n    // is no longer required.\\n    result = prod0 * inverse;\\n    return result;\\n  }\\n  }\\n\\n  /**\\n   * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n  function mulDiv(\\n    uint256 x,\\n    uint256 y,\\n    uint256 denominator,\\n    Rounding rounding\\n  ) internal pure returns (uint256) {\\n    uint256 result = mulDiv(x, y, denominator);\\n    if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n      result += 1;\\n    }\\n    return result;\\n  }\\n\\n  /**\\n   * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n  function sqrt(uint256 a) internal pure returns (uint256) {\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n    //\\n    // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n    // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n    //\\n    // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n    // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n    // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n    //\\n    // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n    uint256 result = 1 << (log2(a) >> 1);\\n\\n    // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n    // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n    // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n    // into the expected uint128 result.\\n  unchecked {\\n    result = (result + a / result) >> 1;\\n    result = (result + a / result) >> 1;\\n    result = (result + a / result) >> 1;\\n    result = (result + a / result) >> 1;\\n    result = (result + a / result) >> 1;\\n    result = (result + a / result) >> 1;\\n    result = (result + a / result) >> 1;\\n    return min(result, a / result);\\n  }\\n  }\\n\\n  /**\\n   * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n  function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n  unchecked {\\n    uint256 result = sqrt(a);\\n    return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n  }\\n  }\\n\\n  /**\\n   * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n  function log2(uint256 value) internal pure returns (uint256) {\\n    uint256 result = 0;\\n  unchecked {\\n    if (value >> 128 > 0) {\\n      value >>= 128;\\n      result += 128;\\n    }\\n    if (value >> 64 > 0) {\\n      value >>= 64;\\n      result += 64;\\n    }\\n    if (value >> 32 > 0) {\\n      value >>= 32;\\n      result += 32;\\n    }\\n    if (value >> 16 > 0) {\\n      value >>= 16;\\n      result += 16;\\n    }\\n    if (value >> 8 > 0) {\\n      value >>= 8;\\n      result += 8;\\n    }\\n    if (value >> 4 > 0) {\\n      value >>= 4;\\n      result += 4;\\n    }\\n    if (value >> 2 > 0) {\\n      value >>= 2;\\n      result += 2;\\n    }\\n    if (value >> 1 > 0) {\\n      result += 1;\\n    }\\n  }\\n    return result;\\n  }\\n\\n  /**\\n   * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n  function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n  unchecked {\\n    uint256 result = log2(value);\\n    return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n  }\\n  }\\n\\n  /**\\n   * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n  function log10(uint256 value) internal pure returns (uint256) {\\n    uint256 result = 0;\\n  unchecked {\\n    if (value >= 10**64) {\\n      value /= 10**64;\\n      result += 64;\\n    }\\n    if (value >= 10**32) {\\n      value /= 10**32;\\n      result += 32;\\n    }\\n    if (value >= 10**16) {\\n      value /= 10**16;\\n      result += 16;\\n    }\\n    if (value >= 10**8) {\\n      value /= 10**8;\\n      result += 8;\\n    }\\n    if (value >= 10**4) {\\n      value /= 10**4;\\n      result += 4;\\n    }\\n    if (value >= 10**2) {\\n      value /= 10**2;\\n      result += 2;\\n    }\\n    if (value >= 10**1) {\\n      result += 1;\\n    }\\n  }\\n    return result;\\n  }\\n\\n  /**\\n   * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n  function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n  unchecked {\\n    uint256 result = log10(value);\\n    return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n  }\\n  }\\n\\n  /**\\n   * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n  function log256(uint256 value) internal pure returns (uint256) {\\n    uint256 result = 0;\\n  unchecked {\\n    if (value >> 128 > 0) {\\n      value >>= 128;\\n      result += 16;\\n    }\\n    if (value >> 64 > 0) {\\n      value >>= 64;\\n      result += 8;\\n    }\\n    if (value >> 32 > 0) {\\n      value >>= 32;\\n      result += 4;\\n    }\\n    if (value >> 16 > 0) {\\n      value >>= 16;\\n      result += 2;\\n    }\\n    if (value >> 8 > 0) {\\n      result += 1;\\n    }\\n  }\\n    return result;\\n  }\\n\\n  /**\\n   * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n  function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n  unchecked {\\n    uint256 result = log256(value);\\n    return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n  }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/openzeppelin/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n  // Booleans are more expensive than uint256 or any type that takes up a full\\n  // word because each write operation emits an extra SLOAD to first read the\\n  // slot's contents, replace the bits taken up by the boolean, and then write\\n  // back. This is the compiler's defense against contract upgrades and\\n  // pointer aliasing, and it cannot be disabled.\\n\\n  // The values being non-zero value makes deployment a bit more expensive,\\n  // but in exchange the refund on every call to nonReentrant will be lower in\\n  // amount. Since refunds are capped to a percentage of the total\\n  // transaction's gas, it is best to keep them low in cases like this one, to\\n  // increase the likelihood of the full refund coming into effect.\\n  uint256 private constant _NOT_ENTERED = 1;\\n  uint256 private constant _ENTERED = 2;\\n\\n  uint256 private _status;\\n\\n  constructor() {\\n    _status = _NOT_ENTERED;\\n  }\\n\\n  /**\\n   * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n  modifier nonReentrant() {\\n    _nonReentrantBefore();\\n    _;\\n    _nonReentrantAfter();\\n  }\\n\\n  function _nonReentrantBefore() private {\\n    // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n    require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n    // Any calls to nonReentrant after this point will fail\\n    _status = _ENTERED;\\n  }\\n\\n  function _nonReentrantAfter() private {\\n    // By storing the original value once again, a refund is triggered (see\\n    // https://eips.ethereum.org/EIPS/eip-2200)\\n    _status = _NOT_ENTERED;\\n  }\\n\\n  /**\\n   * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n  function _reentrancyGuardEntered() internal view returns (bool) {\\n    return _status == _ENTERED;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/openzeppelin/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../interfaces/IERC20Permit.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n  using Address for address;\\n\\n  function safeTransfer(\\n    IERC20 token,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n  }\\n\\n  function safeTransferFrom(\\n    IERC20 token,\\n    address from,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n  }\\n\\n  /**\\n   * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n  function safeApprove(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    // safeApprove should only be called when setting an initial allowance,\\n    // or when resetting it to zero. To increase and decrease it, use\\n    // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n    require(\\n      (value == 0) || (token.allowance(address(this), spender) == 0),\\n      \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n    );\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n  }\\n\\n  function safeIncreaseAllowance(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    uint256 newAllowance = token.allowance(address(this), spender) + value;\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n  }\\n\\n  function safeDecreaseAllowance(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n  unchecked {\\n    uint256 oldAllowance = token.allowance(address(this), spender);\\n    require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n    uint256 newAllowance = oldAllowance - value;\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n  }\\n  }\\n\\n  function safePermit(\\n    IERC20Permit token,\\n    address owner,\\n    address spender,\\n    uint256 value,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) internal {\\n    uint256 nonceBefore = token.nonces(owner);\\n    token.permit(owner, spender, value, deadline, v, r, s);\\n    uint256 nonceAfter = token.nonces(owner);\\n    require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n  }\\n\\n  /**\\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n  function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n    // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n    // the target address contains contract code and also asserts for success in the low-level call.\\n\\n    bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n    if (returndata.length > 0) {\\n      // Return data is optional\\n      require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/proxy/ControllableV3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"../openzeppelin/Initializable.sol\\\";\\nimport \\\"../tools/TetuERC165.sol\\\";\\nimport \\\"../interfaces/IControllable.sol\\\";\\nimport \\\"../interfaces/IController.sol\\\";\\nimport \\\"../lib/SlotsLib.sol\\\";\\nimport \\\"../lib/InterfaceIds.sol\\\";\\n\\n/// @title Implement basic functionality for any contract that require strict control\\n/// @dev Can be used with upgradeable pattern.\\n///      Require call __Controllable_init() in any case.\\n/// @author belbix\\nabstract contract ControllableV3 is Initializable, TetuERC165, IControllable {\\n  using SlotsLib for bytes32;\\n\\n  /// @notice Version of the contract\\n  /// @dev Should be incremented when contract changed\\n  string public constant CONTROLLABLE_VERSION = \\\"3.0.1\\\";\\n\\n  bytes32 internal constant _CONTROLLER_SLOT = bytes32(uint256(keccak256(\\\"eip1967.controllable.controller\\\")) - 1);\\n  bytes32 internal constant _CREATED_SLOT = bytes32(uint256(keccak256(\\\"eip1967.controllable.created\\\")) - 1);\\n  bytes32 internal constant _CREATED_BLOCK_SLOT = bytes32(uint256(keccak256(\\\"eip1967.controllable.created_block\\\")) - 1);\\n  bytes32 internal constant _REVISION_SLOT = bytes32(uint256(keccak256(\\\"eip1967.controllable.revision\\\")) - 1);\\n  bytes32 internal constant _PREVIOUS_LOGIC_SLOT = bytes32(uint256(keccak256(\\\"eip1967.controllable.prev_logic\\\")) - 1);\\n\\n  event ContractInitialized(address controller, uint ts, uint block);\\n  event RevisionIncreased(uint value, address oldLogic);\\n\\n  /// @dev Prevent implementation init\\n  constructor() {\\n    _disableInitializers();\\n  }\\n\\n  /// @notice Initialize contract after setup it as proxy implementation\\n  ///         Save block.timestamp in the \\\"created\\\" variable\\n  /// @dev Use it only once after first logic setup\\n  /// @param controller_ Controller address\\n  function __Controllable_init(address controller_) internal onlyInitializing {\\n    require(controller_ != address(0), \\\"Zero controller\\\");\\n    _requireInterface(controller_, InterfaceIds.I_CONTROLLER);\\n    require(IController(controller_).governance() != address(0), \\\"Zero governance\\\");\\n    _CONTROLLER_SLOT.set(controller_);\\n    _CREATED_SLOT.set(block.timestamp);\\n    _CREATED_BLOCK_SLOT.set(block.number);\\n    emit ContractInitialized(controller_, block.timestamp, block.number);\\n  }\\n\\n  /// @dev Return true if given address is controller\\n  function isController(address _value) public override view returns (bool) {\\n    return _value == controller();\\n  }\\n\\n  /// @notice Return true if given address is setup as governance in Controller\\n  function isGovernance(address _value) public override view returns (bool) {\\n    return IController(controller()).governance() == _value;\\n  }\\n\\n  /// @dev Contract upgrade counter\\n  function revision() external view returns (uint){\\n    return _REVISION_SLOT.getUint();\\n  }\\n\\n  /// @dev Previous logic implementation\\n  function previousImplementation() external view returns (address){\\n    return _PREVIOUS_LOGIC_SLOT.getAddress();\\n  }\\n\\n  /// @dev See {IERC165-supportsInterface}.\\n  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n    return interfaceId == InterfaceIds.I_CONTROLLABLE || super.supportsInterface(interfaceId);\\n  }\\n\\n  // ************* SETTERS/GETTERS *******************\\n\\n  /// @notice Return controller address saved in the contract slot\\n  function controller() public view override returns (address) {\\n    return _CONTROLLER_SLOT.getAddress();\\n  }\\n\\n  /// @notice Return creation timestamp\\n  /// @return Creation timestamp\\n  function created() external view override returns (uint256) {\\n    return _CREATED_SLOT.getUint();\\n  }\\n\\n  /// @notice Return creation block number\\n  /// @return Creation block number\\n  function createdBlock() external override view returns (uint256) {\\n    return _CREATED_BLOCK_SLOT.getUint();\\n  }\\n\\n  /// @dev Revision should be increased on each contract upgrade\\n  function increaseRevision(address oldLogic) external override {\\n    require(msg.sender == address(this), \\\"Increase revision forbidden\\\");\\n    uint r = _REVISION_SLOT.getUint() + 1;\\n    _REVISION_SLOT.set(r);\\n    _PREVIOUS_LOGIC_SLOT.set(oldLogic);\\n    emit RevisionIncreased(r, oldLogic);\\n  }\\n\\n  /// @dev Gets a slot as bytes32\\n  function getSlot(uint slot) external view returns (bytes32 result) {\\n    assembly {\\n      result := sload(slot)\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/tools/TetuERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.17;\\n\\nimport \\\"../openzeppelin/ERC165.sol\\\";\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../lib/InterfaceIds.sol\\\";\\n\\n/// @dev Tetu Implementation of the {IERC165} interface extended with helper functions.\\n/// @author bogdoslav\\nabstract contract TetuERC165 is ERC165 {\\n\\n  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n    return interfaceId == InterfaceIds.I_TETU_ERC165 || super.supportsInterface(interfaceId);\\n  }\\n\\n  // *************************************************************\\n  //                        HELPER FUNCTIONS\\n  // *************************************************************\\n  /// @author bogdoslav\\n\\n  /// @dev Checks what interface with id is supported by contract.\\n  /// @return bool. Do not throws\\n  function _isInterfaceSupported(address contractAddress, bytes4 interfaceId) internal view returns (bool) {\\n    require(contractAddress != address(0), \\\"Zero address\\\");\\n    // check what address is contract\\n    uint codeSize;\\n    assembly {\\n      codeSize := extcodesize(contractAddress)\\n    }\\n    if (codeSize == 0) return false;\\n\\n    try IERC165(contractAddress).supportsInterface(interfaceId) returns (bool isSupported) {\\n      return isSupported;\\n    } catch {\\n    }\\n    return false;\\n  }\\n\\n  /// @dev Checks what interface with id is supported by contract and reverts otherwise\\n  function _requireInterface(address contractAddress, bytes4 interfaceId) internal view {\\n    require(_isInterfaceSupported(contractAddress, interfaceId), \\\"Interface is not supported\\\");\\n  }\\n\\n  /// @dev Checks what address is ERC20.\\n  /// @return bool. Do not throws\\n  function _isERC20(address contractAddress) internal view returns (bool) {\\n    require(contractAddress != address(0), \\\"Zero address\\\");\\n    // check what address is contract\\n    uint codeSize;\\n    assembly {\\n      codeSize := extcodesize(contractAddress)\\n    }\\n    if (codeSize == 0) return false;\\n\\n    bool totalSupplySupported;\\n    try IERC20(contractAddress).totalSupply() returns (uint) {\\n      totalSupplySupported = true;\\n    } catch {\\n    }\\n\\n    bool balanceSupported;\\n    try IERC20(contractAddress).balanceOf(address(this)) returns (uint) {\\n      balanceSupported = true;\\n    } catch {\\n    }\\n\\n    return totalSupplySupported && balanceSupported;\\n  }\\n\\n\\n  /// @dev Checks what interface with id is supported by contract and reverts otherwise\\n  function _requireERC20(address contractAddress) internal view {\\n    require(_isERC20(contractAddress), \\\"Not ERC20\\\");\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/ve/VeTetu.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"../openzeppelin/ReentrancyGuard.sol\\\";\\nimport \\\"../openzeppelin/SafeERC20.sol\\\";\\nimport \\\"../interfaces/IERC20Metadata.sol\\\";\\nimport \\\"../interfaces/IVeTetu.sol\\\";\\nimport \\\"../interfaces/IERC721Receiver.sol\\\";\\nimport \\\"../interfaces/IController.sol\\\";\\nimport \\\"../interfaces/IVoter.sol\\\";\\nimport \\\"../interfaces/IPlatformVoter.sol\\\";\\nimport \\\"../interfaces/ISmartVault.sol\\\";\\nimport \\\"../interfaces/IVeDistributor.sol\\\";\\nimport \\\"../proxy/ControllableV3.sol\\\";\\nimport \\\"./VeTetuLib.sol\\\";\\n\\n/// @title Voting escrow NFT for multiple underlying tokens.\\n///        Based on Curve/Solidly contract.\\n/// @author belbix\\ncontract VeTetu is ControllableV3, ReentrancyGuard, IVeTetu {\\n  using SafeERC20 for IERC20;\\n  using Math for uint;\\n\\n  // Only for internal usage\\n  struct DepositInfo {\\n    address stakingToken;\\n    uint tokenId;\\n    uint value;\\n    uint unlockTime;\\n    uint lockedAmount;\\n    uint lockedDerivedAmount;\\n    uint lockedEnd;\\n    DepositType depositType;\\n  }\\n\\n  // Only for internal usage\\n  struct CheckpointInfo {\\n    uint tokenId;\\n    uint oldDerivedAmount;\\n    uint newDerivedAmount;\\n    uint oldEnd;\\n    uint newEnd;\\n    bool isAlwaysMaxLock;\\n  }\\n\\n  enum TimeLockType {\\n    UNKNOWN,\\n    ADD_TOKEN,\\n    WHITELIST_TRANSFER\\n  }\\n\\n  // *************************************************************\\n  //                        CONSTANTS\\n  // *************************************************************\\n\\n  /// @dev Version of this contract. Adjust manually on each code modification.\\n  string public constant VE_VERSION = \\\"1.3.3\\\";\\n  uint internal constant WEEK = 1 weeks;\\n  uint internal constant MAX_TIME = 16 weeks;\\n  uint public constant MAX_ATTACHMENTS = 1;\\n  uint public constant GOV_ACTION_TIME_LOCK = 18 hours;\\n\\n  string constant public override name = \\\"veTETU\\\";\\n  string constant public override symbol = \\\"veTETU\\\";\\n\\n  /// @dev ERC165 interface ID of ERC165\\n  bytes4 internal constant _ERC165_INTERFACE_ID = 0x01ffc9a7;\\n  /// @dev ERC165 interface ID of ERC721\\n  bytes4 internal constant _ERC721_INTERFACE_ID = 0x80ac58cd;\\n  /// @dev ERC165 interface ID of ERC721Metadata\\n  bytes4 internal constant _ERC721_METADATA_INTERFACE_ID = 0x5b5e139f;\\n\\n  address internal constant _TETU_USDC_BPT = 0xE2f706EF1f7240b803AAe877C9C762644bb808d8;\\n  address internal constant _TETU_USDC_BPT_VAULT = 0x6922201f0d25Aba8368e7806642625879B35aB84;\\n\\n  // *************************************************************\\n  //                        VARIABLES\\n  //                Keep names and ordering!\\n  //                 Add only in the bottom.\\n  // *************************************************************\\n\\n  /// @dev Underlying tokens info\\n  address[] public override tokens;\\n  /// @dev token => weight\\n  mapping(address => uint) public tokenWeights;\\n  /// @dev token => is allowed for deposits\\n  mapping(address => bool) public isValidToken;\\n  /// @dev Current count of token\\n  uint public tokenId;\\n  /// @dev veId => stakingToken => Locked amount\\n  mapping(uint => mapping(address => uint)) public override lockedAmounts;\\n  /// @dev veId => Amount based on weights aka power\\n  mapping(uint => uint) public override lockedDerivedAmount;\\n  /// @dev veId => Lock end timestamp\\n  mapping(uint => uint) internal _lockedEndReal;\\n\\n  // --- CHECKPOINTS LOGIC\\n\\n  /// @dev Epoch counter. Update each week.\\n  uint public override epoch;\\n  /// @dev epoch -> unsigned point\\n  mapping(uint => Point) internal _pointHistory;\\n  /// @dev user -> Point[userEpoch]\\n  mapping(uint => Point[1000000000]) internal _userPointHistory;\\n  /// @dev veId -> Personal epoch counter\\n  mapping(uint => uint) public override userPointEpoch;\\n  /// @dev time -> signed slope change\\n  mapping(uint => int128) public slopeChanges;\\n\\n  // --- LOCK\\n\\n  /// @dev veId -> Attachments counter. With positive counter user unable to transfer NFT\\n  mapping(uint => uint) public override attachments;\\n  /// @dev veId -> votes counter. With votes NFT unable to transfer\\n  /// deprecated\\n  mapping(uint => uint) public _deprecated_voted;\\n\\n  // --- STATISTICS\\n\\n  /// @dev veId -> Block number when last time NFT owner changed\\n  mapping(uint => uint) public ownershipChange;\\n  /// @dev Mapping from NFT ID to the address that owns it.\\n  mapping(uint => address) internal _idToOwner;\\n  /// @dev Mapping from NFT ID to approved address.\\n  mapping(uint => address) internal _idToApprovals;\\n  /// @dev Mapping from owner address to count of his tokens.\\n  mapping(address => uint) internal _ownerToNFTokenCount;\\n  /// @dev Mapping from owner address to mapping of index to tokenIds\\n  mapping(address => mapping(uint => uint)) internal _ownerToNFTokenIdList;\\n  /// @dev Mapping from NFT ID to index of owner\\n  mapping(uint => uint) public tokenToOwnerIndex;\\n  /// @dev Mapping from owner address to mapping of operator addresses.\\n  mapping(address => mapping(address => bool)) public ownerToOperators;\\n\\n  /// @dev Mapping of interface id to bool about whether or not it's supported\\n  mapping(bytes4 => bool) internal _supportedInterfaces;\\n\\n  // --- PERMISSIONS\\n\\n  /// @dev Whitelisted contracts will be able to transfer NFTs\\n  mapping(address => bool) public isWhitelistedTransfer;\\n  /// @dev Time-locks for governance actions. Zero means not announced and should not processed.\\n  mapping(TimeLockType => uint) public govActionTimeLock;\\n  /// @dev underlying token => true if we can stake token to some place, false if paused\\n  mapping(address => bool) internal tokenFarmingStatus;\\n\\n  // --- OTHER\\n  mapping(uint => bool) public isAlwaysMaxLock;\\n  uint public additionalTotalSupply;\\n\\n  // *************************************************************\\n  //                        EVENTS\\n  // *************************************************************\\n\\n  event Deposit(\\n    address indexed stakingToken,\\n    address indexed provider,\\n    uint tokenId,\\n    uint value,\\n    uint indexed locktime,\\n    DepositType depositType,\\n    uint ts\\n  );\\n  event Withdraw(address indexed stakingToken, address indexed provider, uint tokenId, uint value, uint ts);\\n  event Merged(address indexed stakingToken, address indexed provider, uint from, uint to);\\n  event Split(uint parentTokenId, uint newTokenId, uint percent);\\n  event TransferWhitelisted(address value);\\n  event StakingTokenAdded(address value, uint weight);\\n  event GovActionAnnounced(uint _type, uint timeToExecute);\\n  event AlwaysMaxLock(uint tokenId, bool status);\\n\\n  // *************************************************************\\n  //                        INIT\\n  // *************************************************************\\n\\n  /// @dev Proxy initialization. Call it after contract deploy.\\n  /// @param token_ Underlying ERC20 token\\n  /// @param controller_ Central contract of the protocol\\n  function init(address token_, uint weight, address controller_) external initializer {\\n    __Controllable_init(controller_);\\n\\n    // the first token should have 18 decimals\\n    require(IERC20Metadata(token_).decimals() == uint8(18));\\n    _addToken(token_, weight);\\n\\n    _pointHistory[0].blk = block.number;\\n    _pointHistory[0].ts = block.timestamp;\\n\\n    _supportedInterfaces[_ERC165_INTERFACE_ID] = true;\\n    _supportedInterfaces[_ERC721_INTERFACE_ID] = true;\\n    _supportedInterfaces[_ERC721_METADATA_INTERFACE_ID] = true;\\n\\n    // mint-ish\\n    emit Transfer(address(0), address(this), 0);\\n    // burn-ish\\n    emit Transfer(address(this), address(0), 0);\\n  }\\n\\n  // *************************************************************\\n  //                        GOVERNANCE ACTIONS\\n  // *************************************************************\\n\\n  function announceAction(TimeLockType _type) external {\\n    require(isGovernance(msg.sender), \\\"FORBIDDEN\\\");\\n    require(govActionTimeLock[_type] == 0 && _type != TimeLockType.UNKNOWN, \\\"WRONG_INPUT\\\");\\n\\n    govActionTimeLock[_type] = block.timestamp + GOV_ACTION_TIME_LOCK;\\n    emit GovActionAnnounced(uint(_type), block.timestamp + GOV_ACTION_TIME_LOCK);\\n  }\\n\\n  /// @dev Whitelist address for transfers. Removing from whitelist should be forbidden.\\n  function whitelistTransferFor(address value) external {\\n    require(isGovernance(msg.sender), \\\"FORBIDDEN\\\");\\n    require(value != address(0), \\\"WRONG_INPUT\\\");\\n    uint timeLock = govActionTimeLock[TimeLockType.WHITELIST_TRANSFER];\\n    require(timeLock != 0 && timeLock < block.timestamp, \\\"TIME_LOCK\\\");\\n\\n    isWhitelistedTransfer[value] = true;\\n    govActionTimeLock[TimeLockType.WHITELIST_TRANSFER] = 0;\\n\\n    emit TransferWhitelisted(value);\\n  }\\n\\n  function addToken(address token, uint weight) external {\\n    require(isGovernance(msg.sender), \\\"FORBIDDEN\\\");\\n    uint timeLock = govActionTimeLock[TimeLockType.ADD_TOKEN];\\n    require(timeLock != 0 && timeLock < block.timestamp, \\\"TIME_LOCK\\\");\\n\\n    _addToken(token, weight);\\n    govActionTimeLock[TimeLockType.ADD_TOKEN] = 0;\\n  }\\n\\n  function _addToken(address token, uint weight) internal {\\n    require(token != address(0) && weight != 0, \\\"WRONG_INPUT\\\");\\n    _requireERC20(token);\\n\\n    uint length = tokens.length;\\n    for (uint i; i < length; ++i) {\\n      require(token != tokens[i], \\\"WRONG_INPUT\\\");\\n    }\\n\\n    tokens.push(token);\\n    tokenWeights[token] = weight;\\n    isValidToken[token] = true;\\n\\n    emit StakingTokenAdded(token, weight);\\n  }\\n\\n  function changeTokenFarmingAllowanceStatus(address _token, bool status) external {\\n    require(isGovernance(msg.sender), \\\"FORBIDDEN\\\");\\n    require(tokenFarmingStatus[_token] != status);\\n    tokenFarmingStatus[_token] = status;\\n  }\\n\\n  // *************************************************************\\n  //                        VIEWS\\n  // *************************************************************\\n\\n  function lockedEnd(uint _tokenId) public view override returns (uint) {\\n    if (isAlwaysMaxLock[_tokenId]) {\\n      return (block.timestamp + MAX_TIME) / WEEK * WEEK;\\n    } else {\\n      return _lockedEndReal[_tokenId];\\n    }\\n  }\\n\\n  /// @dev Return length of staking tokens.\\n  function tokensLength() external view returns (uint) {\\n    return tokens.length;\\n  }\\n\\n  /// @dev Current block timestamp\\n  function blockTimestamp() external view returns (uint) {\\n    return block.timestamp;\\n  }\\n\\n  /// @dev Voter should handle attach/detach and vote actions\\n  function voter() public view returns (address) {\\n    return IController(controller()).voter();\\n  }\\n\\n  /// @dev Specific voter for control platform attributes.\\n  function platformVoter() public view returns (address) {\\n    return IController(controller()).platformVoter();\\n  }\\n\\n  /// @dev Interface identification is specified in ERC-165.\\n  /// @param _interfaceID Id of the interface\\n  function supportsInterface(bytes4 _interfaceID) public view override(ControllableV3, IERC165) returns (bool) {\\n    return _supportedInterfaces[_interfaceID]\\n    || _interfaceID == InterfaceIds.I_VE_TETU\\n      || super.supportsInterface(_interfaceID);\\n  }\\n\\n  /// @dev Returns the number of NFTs owned by `_owner`.\\n  ///      Throws if `_owner` is the zero address. NFTs assigned to the zero address are considered invalid.\\n  /// @param _owner Address for whom to query the balance.\\n  function _balance(address _owner) internal view returns (uint) {\\n    return _ownerToNFTokenCount[_owner];\\n  }\\n\\n  /// @dev Returns the number of NFTs owned by `_owner`.\\n  ///      Throws if `_owner` is the zero address. NFTs assigned to the zero address are considered invalid.\\n  /// @param _owner Address for whom to query the balance.\\n  function balanceOf(address _owner) external view override returns (uint) {\\n    return _balance(_owner);\\n  }\\n\\n  /// @dev Returns the address of the owner of the NFT.\\n  /// @param _tokenId The identifier for an NFT.\\n  function ownerOf(uint _tokenId) public view override returns (address) {\\n    return _idToOwner[_tokenId];\\n  }\\n\\n  /// @dev Get the approved address for a single NFT.\\n  /// @param _tokenId ID of the NFT to query the approval of.\\n  function getApproved(uint _tokenId) external view override returns (address) {\\n    return _idToApprovals[_tokenId];\\n  }\\n\\n  /// @dev Checks if `_operator` is an approved operator for `_owner`.\\n  /// @param _owner The address that owns the NFTs.\\n  /// @param _operator The address that acts on behalf of the owner.\\n  function isApprovedForAll(address _owner, address _operator) external view override returns (bool) {\\n    return (ownerToOperators[_owner])[_operator];\\n  }\\n\\n  /// @dev  Get token by index\\n  function tokenOfOwnerByIndex(address _owner, uint _tokenIndex) external view returns (uint) {\\n    return _ownerToNFTokenIdList[_owner][_tokenIndex];\\n  }\\n\\n  /// @dev Returns whether the given spender can transfer a given token ID\\n  /// @param _spender address of the spender to query\\n  /// @param _tokenId uint ID of the token to be transferred\\n  /// @return bool whether the msg.sender is approved for the given token ID,\\n  ///              is an operator of the owner, or is the owner of the token\\n  function isApprovedOrOwner(address _spender, uint _tokenId) public view override returns (bool) {\\n    address owner = _idToOwner[_tokenId];\\n    bool spenderIsOwner = owner == _spender;\\n    bool spenderIsApproved = _spender == _idToApprovals[_tokenId];\\n    bool spenderIsApprovedForAll = (ownerToOperators[owner])[_spender];\\n    return spenderIsOwner || spenderIsApproved || spenderIsApprovedForAll;\\n  }\\n\\n  function balanceOfNFT(uint _tokenId) public view override returns (uint) {\\n    // flash NFT protection\\n    if (ownershipChange[_tokenId] == block.number) {\\n      return 0;\\n    }\\n    return _balanceOfNFT(_tokenId, block.timestamp);\\n  }\\n\\n  function balanceOfNFTAt(uint _tokenId, uint _t) external view override returns (uint) {\\n    return _balanceOfNFT(_tokenId, _t);\\n  }\\n\\n  function totalSupply() external view returns (uint) {\\n    return totalSupplyAtT(block.timestamp);\\n  }\\n\\n  function balanceOfAtNFT(uint _tokenId, uint _block) external view returns (uint) {\\n    return _balanceOfAtNFT(_tokenId, _block);\\n  }\\n\\n  function userPointHistory(uint _tokenId, uint _loc) external view override returns (Point memory point) {\\n    if (isAlwaysMaxLock[_tokenId]) {\\n      return Point({\\n        bias: int128(int256(lockedDerivedAmount[_tokenId])),\\n        slope: 0,\\n        ts: (block.timestamp - MAX_TIME) / WEEK * WEEK, // this represent a simulation that we locked MAX TIME ago, need for VeDist\\n        blk: block.number\\n      });\\n    }\\n\\n    point = _userPointHistory[_tokenId][_loc];\\n  }\\n\\n  function pointHistory(uint _loc) external view override returns (Point memory point) {\\n    point = _pointHistory[_loc];\\n    // we have a big simplification of the logic at this moment and just return current extra supply at any request epoch\\n    point.bias = point.bias + int128(int256(additionalTotalSupply));\\n  }\\n\\n  function isVoted(uint _tokenId) public view override returns (bool) {\\n    return IVoter(voter()).votedVaultsLength(_tokenId) != 0\\n      || IPlatformVoter(platformVoter()).veVotesLength(_tokenId) != 0;\\n  }\\n\\n  // *************************************************************\\n  //                        VOTER ACTIONS\\n  // *************************************************************\\n\\n  /// deprecated - We check votes directly.\\n  /// @dev Increment the votes counter.\\n  ///      Should be called only once per any amount of votes from 1 voter contract.\\n  function voting(uint _tokenId) external pure override {\\n//    _onlyVoters();\\n\\n    // counter reflects only amount of voter contracts\\n    // restrictions for votes should be implemented on voter side\\n//    voted[_tokenId]++;\\n  }\\n\\n  /// deprecated - We check votes directly.\\n  /// @dev Decrement the votes counter. Call only once per voter.\\n  function abstain(uint _tokenId) external pure override {\\n//    _onlyVoters();\\n\\n//    voted[_tokenId]--;\\n  }\\n\\n  /// @dev Increment attach counter. Call it for each boosted gauge position.\\n  function attachToken(uint _tokenId) external override {\\n    // only central voter\\n    require(msg.sender == voter(), \\\"NOT_VOTER\\\");\\n\\n    uint count = attachments[_tokenId];\\n    require(count < MAX_ATTACHMENTS, \\\"TOO_MANY_ATTACHMENTS\\\");\\n    attachments[_tokenId] = count + 1;\\n  }\\n\\n  /// @dev Decrement attach counter. Call it for each boosted gauge position.\\n  function detachToken(uint _tokenId) external override {\\n    // only central voter\\n    require(msg.sender == voter(), \\\"NOT_VOTER\\\");\\n\\n    attachments[_tokenId] = attachments[_tokenId] - 1;\\n  }\\n\\n  /// @dev Remove all votes/attachments for given veID.\\n  function _detachAll(uint _tokenId, address owner) internal {\\n    IVoter(voter()).detachTokenFromAll(_tokenId, owner);\\n    IPlatformVoter(platformVoter()).detachTokenFromAll(_tokenId, owner);\\n  }\\n\\n  // *************************************************************\\n  //                        NFT LOGIC\\n  // *************************************************************\\n\\n  /// @dev Add a NFT to an index mapping to a given address\\n  /// @param _to address of the receiver\\n  /// @param _tokenId uint ID Of the token to be added\\n  function _addTokenToOwnerList(address _to, uint _tokenId) internal {\\n    uint currentCount = _balance(_to);\\n\\n    _ownerToNFTokenIdList[_to][currentCount] = _tokenId;\\n    tokenToOwnerIndex[_tokenId] = currentCount;\\n  }\\n\\n  /// @dev Remove a NFT from an index mapping to a given address\\n  /// @param _from address of the sender\\n  /// @param _tokenId uint ID Of the token to be removed\\n  function _removeTokenFromOwnerList(address _from, uint _tokenId) internal {\\n    // Delete\\n    uint currentCount = _balance(_from) - 1;\\n    uint currentIndex = tokenToOwnerIndex[_tokenId];\\n\\n    if (currentCount == currentIndex) {\\n      // update ownerToNFTokenIdList\\n      _ownerToNFTokenIdList[_from][currentCount] = 0;\\n      // update tokenToOwnerIndex\\n      tokenToOwnerIndex[_tokenId] = 0;\\n    } else {\\n      uint lastTokenId = _ownerToNFTokenIdList[_from][currentCount];\\n\\n      // Add\\n      // update ownerToNFTokenIdList\\n      _ownerToNFTokenIdList[_from][currentIndex] = lastTokenId;\\n      // update tokenToOwnerIndex\\n      tokenToOwnerIndex[lastTokenId] = currentIndex;\\n\\n      // Delete\\n      // update ownerToNFTokenIdList\\n      _ownerToNFTokenIdList[_from][currentCount] = 0;\\n      // update tokenToOwnerIndex\\n      tokenToOwnerIndex[_tokenId] = 0;\\n    }\\n  }\\n\\n  /// @dev Add a NFT to a given address\\n  function _addTokenTo(address _to, uint _tokenId) internal {\\n    // assume always call on new tokenId or after _removeTokenFrom() call\\n    // Change the owner\\n    _idToOwner[_tokenId] = _to;\\n    // Update owner token index tracking\\n    _addTokenToOwnerList(_to, _tokenId);\\n    // Change count tracking\\n    _ownerToNFTokenCount[_to] += 1;\\n  }\\n\\n  /// @dev Remove a NFT from a given address\\n  ///      Throws if `_from` is not the current owner.\\n  function _removeTokenFrom(address _from, uint _tokenId) internal {\\n    require(_idToOwner[_tokenId] == _from, \\\"NOT_OWNER\\\");\\n    // Change the owner\\n    _idToOwner[_tokenId] = address(0);\\n    // Update owner token index tracking\\n    _removeTokenFromOwnerList(_from, _tokenId);\\n    // Change count tracking\\n    _ownerToNFTokenCount[_from] -= 1;\\n  }\\n\\n  /// @dev Execute transfer of a NFT.\\n  ///      Throws unless `msg.sender` is the current owner, an authorized operator, or the approved\\n  ///      address for this NFT. (NOTE: `msg.sender` not allowed in internal function so pass `_sender`.)\\n  ///      Throws if `_to` is the zero address.\\n  ///      Throws if `_from` is not the current owner.\\n  ///      Throws if `_tokenId` is not a valid NFT.\\n  function _transferFrom(\\n    address _from,\\n    address _to,\\n    uint _tokenId,\\n    address _sender\\n  ) internal {\\n    require(isApprovedOrOwner(_sender, _tokenId), \\\"NOT_OWNER\\\");\\n    require(_to != address(0), \\\"WRONG_INPUT\\\");\\n    // from address will be checked in _removeTokenFrom()\\n\\n    if (attachments[_tokenId] != 0 || isVoted(_tokenId)) {\\n      _detachAll(_tokenId, _from);\\n    }\\n\\n    if (_idToApprovals[_tokenId] != address(0)) {\\n      // Reset approvals\\n      _idToApprovals[_tokenId] = address(0);\\n    }\\n    _removeTokenFrom(_from, _tokenId);\\n    _addTokenTo(_to, _tokenId);\\n    // Set the block of ownership transfer (for Flash NFT protection)\\n    ownershipChange[_tokenId] = block.number;\\n    // Log the transfer\\n    emit Transfer(_from, _to, _tokenId);\\n  }\\n\\n  /// @dev Transfers forbidden for veTETU\\n  function transferFrom(\\n    address,\\n    address,\\n    uint\\n  ) external pure override {\\n    revert(\\\"FORBIDDEN\\\");\\n    //    _transferFrom(_from, _to, _tokenId, msg.sender);\\n  }\\n\\n  function _isContract(address account) internal view returns (bool) {\\n    // This method relies on extcodesize, which returns 0 for contracts in\\n    // construction, since the code is only stored at the end of the\\n    // constructor execution.\\n    uint size;\\n    assembly {\\n      size := extcodesize(account)\\n    }\\n    return size > 0;\\n  }\\n\\n  /// @dev Transfers the ownership of an NFT from one address to another address.\\n  ///      Throws unless `msg.sender` is the current owner, an authorized operator, or the\\n  ///      approved address for this NFT.\\n  ///      Throws if `_from` is not the current owner.\\n  ///      Throws if `_to` is the zero address.\\n  ///      Throws if `_tokenId` is not a valid NFT.\\n  ///      If `_to` is a smart contract, it calls `onERC721Received` on `_to` and throws if\\n  ///      the return value is not `bytes4(keccak256(\\\"onERC721Received(address,address,uint,bytes)\\\"))`.\\n  /// @param _from The current owner of the NFT.\\n  /// @param _to The new owner.\\n  /// @param _tokenId The NFT to transfer.\\n  /// @param _data Additional data with no specified format, sent in call to `_to`.\\n  function safeTransferFrom(\\n    address _from,\\n    address _to,\\n    uint _tokenId,\\n    bytes memory _data\\n  ) public override {\\n    require(isWhitelistedTransfer[_to] || isWhitelistedTransfer[_from], \\\"FORBIDDEN\\\");\\n\\n    _transferFrom(_from, _to, _tokenId, msg.sender);\\n    require(_checkOnERC721Received(_from, _to, _tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n  }\\n\\n  /// @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n  /// The call is not executed if the target address is not a contract.\\n  ///\\n  /// @param _from address representing the previous owner of the given token ID\\n  /// @param _to target address that will receive the tokens\\n  /// @param _tokenId uint256 ID of the token to be transferred\\n  /// @param _data bytes optional data to send along with the call\\n  /// @return bool whether the call correctly returned the expected magic value\\n  ///\\n  function _checkOnERC721Received(\\n    address _from,\\n    address _to,\\n    uint256 _tokenId,\\n    bytes memory _data\\n  ) private returns (bool) {\\n    if (_isContract(_to)) {\\n      try IERC721Receiver(_to).onERC721Received(msg.sender, _from, _tokenId, _data) returns (bytes4 retval) {\\n        return retval == IERC721Receiver.onERC721Received.selector;\\n      } catch (bytes memory reason) {\\n        if (reason.length == 0) {\\n          revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n        } else {\\n          /// @solidity memory-safe-assembly\\n          assembly {\\n            revert(add(32, reason), mload(reason))\\n          }\\n        }\\n      }\\n    } else {\\n      return true;\\n    }\\n  }\\n\\n  /// @dev Transfers the ownership of an NFT from one address to another address.\\n  ///      Throws unless `msg.sender` is the current owner, an authorized operator, or the\\n  ///      approved address for this NFT.\\n  ///      Throws if `_from` is not the current owner.\\n  ///      Throws if `_to` is the zero address.\\n  ///      Throws if `_tokenId` is not a valid NFT.\\n  ///      If `_to` is a smart contract, it calls `onERC721Received` on `_to` and throws if\\n  ///      the return value is not `bytes4(keccak256(\\\"onERC721Received(address,address,uint,bytes)\\\"))`.\\n  /// @param _from The current owner of the NFT.\\n  /// @param _to The new owner.\\n  /// @param _tokenId The NFT to transfer.\\n  function safeTransferFrom(\\n    address _from,\\n    address _to,\\n    uint _tokenId\\n  ) external override {\\n    safeTransferFrom(_from, _to, _tokenId, \\\"\\\");\\n  }\\n\\n  /// @dev Set or reaffirm the approved address for an NFT. The zero address indicates there is no approved address.\\n  ///      Throws unless `msg.sender` is the current NFT owner, or an authorized operator of the current owner.\\n  ///      Throws if `_tokenId` is not a valid NFT. (NOTE: This is not written the EIP)\\n  ///      Throws if `_approved` is the current owner. (NOTE: This is not written the EIP)\\n  /// @param _approved Address to be approved for the given NFT ID.\\n  /// @param _tokenId ID of the token to be approved.\\n  function approve(address _approved, uint _tokenId) public override {\\n    address owner = _idToOwner[_tokenId];\\n    // Throws if `_tokenId` is not a valid NFT\\n    require(owner != address(0), \\\"WRONG_INPUT\\\");\\n    // Throws if `_approved` is the current owner\\n    require(_approved != owner, \\\"IDENTICAL_ADDRESS\\\");\\n    // Check requirements\\n    bool senderIsOwner = (owner == msg.sender);\\n    bool senderIsApprovedForAll = (ownerToOperators[owner])[msg.sender];\\n    require(senderIsOwner || senderIsApprovedForAll, \\\"NOT_OWNER\\\");\\n    // Set the approval\\n    _idToApprovals[_tokenId] = _approved;\\n    emit Approval(owner, _approved, _tokenId);\\n  }\\n\\n  /// @dev Enables or disables approval for a third party (\\\"operator\\\") to manage all of\\n  ///      `msg.sender`'s assets. It also emits the ApprovalForAll event.\\n  ///      Throws if `_operator` is the `msg.sender`. (NOTE: This is not written the EIP)\\n  /// @notice This works even if sender doesn't own any tokens at the time.\\n  /// @param _operator Address to add to the set of authorized operators.\\n  /// @param _approved True if the operators is approved, false to revoke approval.\\n  function setApprovalForAll(address _operator, bool _approved) external override {\\n    // Throws if `_operator` is the `msg.sender`\\n    require(_operator != msg.sender, \\\"IDENTICAL_ADDRESS\\\");\\n    ownerToOperators[msg.sender][_operator] = _approved;\\n    emit ApprovalForAll(msg.sender, _operator, _approved);\\n  }\\n\\n  /// @dev Function to mint tokens\\n  ///      Throws if `_to` is zero address.\\n  ///      Throws if `_tokenId` is owned by someone.\\n  /// @param _to The address that will receive the minted tokens.\\n  /// @param _tokenId The token id to mint.\\n  /// @return A boolean that indicates if the operation was successful.\\n  function _mint(address _to, uint _tokenId) internal returns (bool) {\\n    // Throws if `_to` is zero address\\n    require(_to != address(0), \\\"WRONG_INPUT\\\");\\n    _addTokenTo(_to, _tokenId);\\n    require(_checkOnERC721Received(address(0), _to, _tokenId, ''), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    emit Transfer(address(0), _to, _tokenId);\\n    return true;\\n  }\\n\\n  // *************************************************************\\n  //                  DEPOSIT/WITHDRAW LOGIC\\n  // *************************************************************\\n\\n  /// @dev Pull tokens to this contract and try to stake\\n  function _pullStakingToken(address _token, address _from, uint amount) internal {\\n    IERC20(_token).safeTransferFrom(_from, address(this), amount);\\n\\n    // try to stake tokens if possible\\n    _stakeAvailableTokens(_token);\\n  }\\n\\n  /// @dev Anyone can stake whitelisted tokens if they exist on this contract.\\n  function stakeAvailableTokens(address _token) external {\\n    _stakeAvailableTokens(_token);\\n  }\\n\\n  /// @dev If allowed, stake given token available balance to suitable place for earn some profit\\n  function _stakeAvailableTokens(address _token) internal {\\n    if (tokenFarmingStatus[_token]) {\\n      if (_token == _TETU_USDC_BPT) {\\n        uint balance = IERC20(_token).balanceOf(address(this));\\n        if (balance != 0) {\\n          IERC20(_token).safeApprove(_TETU_USDC_BPT_VAULT, balance);\\n          ISmartVault(_TETU_USDC_BPT_VAULT).depositAndInvest(balance);\\n        }\\n      }\\n    }\\n  }\\n\\n  /// @dev Unstake necessary amount, if possible\\n  function _unstakeTokens(address _token, uint amount) internal {\\n    uint tokenBalance = IERC20(_token).balanceOf(address(this));\\n    if (amount != 0 && amount > tokenBalance) {\\n      // withdraw only required amount\\n      amount -= tokenBalance;\\n      // no need to check whitelisting for withdraw\\n      if (_token == _TETU_USDC_BPT) {\\n        // add gap value for avoid rounding issues\\n        uint shares = amount * 1e18 / ISmartVault(_TETU_USDC_BPT_VAULT).getPricePerFullShare() + 1e18;\\n        uint sharesBalance = IERC20(_TETU_USDC_BPT_VAULT).balanceOf(address(this));\\n        shares = shares > sharesBalance ? sharesBalance : shares;\\n        ISmartVault(_TETU_USDC_BPT_VAULT).withdraw(shares);\\n      }\\n    }\\n  }\\n\\n  /// @dev Anyone can withdraw all staked tokens if farming status = false\\n  function emergencyWithdrawStakedTokens(address _token) external {\\n    if (!tokenFarmingStatus[_token]) {\\n      if (_token == _TETU_USDC_BPT) {\\n        ISmartVault(_TETU_USDC_BPT_VAULT).exit();\\n      }\\n    }\\n  }\\n\\n  /// @dev Transfer underlying token to recipient, unstake if need required amount\\n  function _transferUnderlyingToken(address _token, address recipient, uint amount) internal {\\n    _unstakeTokens(_token, amount);\\n    IERC20(_token).safeTransfer(recipient, amount);\\n  }\\n\\n  /// @notice Deposit and lock tokens for a user\\n  function _depositFor(DepositInfo memory info) internal {\\n\\n    uint newLockedDerivedAmount = info.lockedDerivedAmount;\\n    if (info.value != 0) {\\n\\n      // calculate new amounts\\n      uint newAmount = info.lockedAmount + info.value;\\n      newLockedDerivedAmount = VeTetuLib.calculateDerivedAmount(\\n        info.lockedAmount,\\n        info.lockedDerivedAmount,\\n        newAmount,\\n        tokenWeights[info.stakingToken],\\n        IERC20Metadata(info.stakingToken).decimals()\\n      );\\n      // update chain info\\n      lockedAmounts[info.tokenId][info.stakingToken] = newAmount;\\n      _updateLockedDerivedAmount(info.tokenId, newLockedDerivedAmount);\\n    }\\n\\n    // Adding to existing lock, or if a lock is expired - creating a new one\\n    uint newLockedEnd = info.lockedEnd;\\n    if (info.unlockTime != 0) {\\n      _lockedEndReal[info.tokenId] = info.unlockTime;\\n      newLockedEnd = info.unlockTime;\\n    }\\n\\n    // update checkpoint\\n    _checkpoint(CheckpointInfo(\\n      info.tokenId,\\n      info.lockedDerivedAmount,\\n      newLockedDerivedAmount,\\n      info.lockedEnd,\\n      newLockedEnd,\\n      isAlwaysMaxLock[info.tokenId]\\n    ));\\n\\n    // move tokens to this contract, if necessary\\n    address from = msg.sender;\\n    if (info.value != 0 && info.depositType != DepositType.MERGE_TYPE) {\\n      _pullStakingToken(info.stakingToken, from, info.value);\\n    }\\n\\n    emit Deposit(info.stakingToken, from, info.tokenId, info.value, newLockedEnd, info.depositType, block.timestamp);\\n  }\\n\\n  function _lockInfo(address stakingToken, uint veId) internal view returns (\\n    uint _lockedAmount,\\n    uint _lockedDerivedAmount,\\n    uint _lockedEnd\\n  ) {\\n    _lockedAmount = lockedAmounts[veId][stakingToken];\\n    _lockedDerivedAmount = lockedDerivedAmount[veId];\\n    _lockedEnd = lockedEnd(veId);\\n  }\\n\\n  function _incrementTokenIdAndGet() internal returns (uint){\\n    uint current = tokenId;\\n    tokenId = current + 1;\\n    return current + 1;\\n  }\\n\\n  /// @dev Setup always max lock. If true given tokenId will be always counted with max possible lock and can not be withdrawn.\\n  ///      When deactivated setup a new counter with max lock duration and use all common logic.\\n  function setAlwaysMaxLock(uint _tokenId, bool status) external {\\n    require(isApprovedOrOwner(msg.sender, _tokenId), \\\"NOT_OWNER\\\");\\n    require(status != isAlwaysMaxLock[_tokenId], \\\"WRONG_INPUT\\\");\\n\\n    // additional protection against wrong calculation inside VeDist for keep invariant with balances.\\n    require(IVeDistributor(IController(controller()).veDistributor()).claimable(_tokenId) == 0, 'CLAIM_REWARDS');\\n\\n    _setAlwaysMaxLock(_tokenId, status);\\n  }\\n\\n  function _setAlwaysMaxLock(uint _tokenId, bool status) internal {\\n\\n    // need to setup first, it will be checked later\\n    isAlwaysMaxLock[_tokenId] = status;\\n\\n    uint _derivedAmount = lockedDerivedAmount[_tokenId];\\n    uint maxLockDuration = (block.timestamp + MAX_TIME) / WEEK * WEEK;\\n\\n    // the idea is exclude nft from checkpoint calculations when max lock activated and count the balance as is\\n    if (status) {\\n      // need to increase additional total supply for properly calculation\\n      additionalTotalSupply += _derivedAmount;\\n\\n      // set checkpoints to zero\\n      _checkpoint(CheckpointInfo(\\n        _tokenId,\\n        _derivedAmount,\\n        0,\\n        _lockedEndReal[_tokenId],\\n        0,\\n        false // need to use false for this fake update\\n      ));\\n    } else {\\n      // remove from additional supply\\n      require(additionalTotalSupply >= _derivedAmount, \\\"WRONG_SUPPLY\\\");\\n      additionalTotalSupply -= _derivedAmount;\\n      // if we disable need to set real lock end to max value\\n      _lockedEndReal[_tokenId] = maxLockDuration;\\n      // and activate real checkpoints + total supply\\n      _checkpoint(CheckpointInfo(\\n        _tokenId,\\n        0, // it was setup to zero when we set always max lock\\n        _derivedAmount,\\n        maxLockDuration,\\n        maxLockDuration,\\n        false\\n      ));\\n    }\\n\\n    emit AlwaysMaxLock(_tokenId, status);\\n  }\\n\\n  function _updateLockedDerivedAmount(uint _tokenId, uint amount) internal {\\n    uint cur = lockedDerivedAmount[_tokenId];\\n    if (cur == amount) {\\n      // if did not change do nothing\\n      return;\\n    }\\n\\n    if (isAlwaysMaxLock[_tokenId]) {\\n      if (cur > amount) {\\n        additionalTotalSupply -= (cur - amount);\\n      } else if (cur < amount) {\\n        additionalTotalSupply += amount - cur;\\n      }\\n    }\\n\\n    lockedDerivedAmount[_tokenId] = amount;\\n  }\\n\\n  /// @notice Deposit `_value` tokens for `_to` and lock for `_lock_duration`\\n  /// @param _token Token for deposit. Should be whitelisted in this contract.\\n  /// @param _value Amount to deposit\\n  /// @param _lockDuration Number of seconds to lock tokens for (rounded down to nearest week)\\n  /// @param _to Address to deposit\\n  function _createLock(address _token, uint _value, uint _lockDuration, address _to) internal returns (uint) {\\n    require(_value > 0, \\\"WRONG_INPUT\\\");\\n    // Lock time is rounded down to weeks\\n    uint unlockTime = (block.timestamp + _lockDuration) / WEEK * WEEK;\\n    require(unlockTime > block.timestamp, \\\"LOW_LOCK_PERIOD\\\");\\n    require(unlockTime <= block.timestamp + MAX_TIME, \\\"HIGH_LOCK_PERIOD\\\");\\n    require(isValidToken[_token], \\\"INVALID_TOKEN\\\");\\n\\n    uint _tokenId = _incrementTokenIdAndGet();\\n    _mint(_to, _tokenId);\\n\\n    _depositFor(DepositInfo({\\n      stakingToken: _token,\\n      tokenId: _tokenId,\\n      value: _value,\\n      unlockTime: unlockTime,\\n      lockedAmount: 0,\\n      lockedDerivedAmount: 0,\\n      lockedEnd: 0,\\n      depositType: DepositType.CREATE_LOCK_TYPE\\n    }));\\n    return _tokenId;\\n  }\\n\\n  /// @notice Deposit `_value` tokens for `_to` and lock for `_lock_duration`\\n  /// @param _token Token for deposit. Should be whitelisted in this contract.\\n  /// @param _value Amount to deposit\\n  /// @param _lockDuration Number of seconds to lock tokens for (rounded down to nearest week)\\n  /// @param _to Address to deposit\\n  function createLockFor(address _token, uint _value, uint _lockDuration, address _to)\\n  external nonReentrant override returns (uint) {\\n    return _createLock(_token, _value, _lockDuration, _to);\\n  }\\n\\n  /// @notice Deposit `_value` tokens for `msg.sender` and lock for `_lock_duration`\\n  /// @param _value Amount to deposit\\n  /// @param _lockDuration Number of seconds to lock tokens for (rounded down to nearest week)\\n  function createLock(address _token, uint _value, uint _lockDuration) external nonReentrant returns (uint) {\\n    return _createLock(_token, _value, _lockDuration, msg.sender);\\n  }\\n\\n  /// @notice Deposit `_value` additional tokens for `_tokenId` without modifying the unlock time\\n  /// @dev Anyone (even a smart contract) can deposit for someone else, but\\n  ///      cannot extend their locktime and deposit for a brand new user\\n  /// @param _token Token for deposit. Should be whitelisted in this contract.\\n  /// @param _tokenId ve token ID\\n  /// @param _value Amount of tokens to deposit and add to the lock\\n  function increaseAmount(address _token, uint _tokenId, uint _value) external nonReentrant override {\\n    require(_value > 0, \\\"WRONG_INPUT\\\");\\n    (uint _lockedAmount, uint _lockedDerivedAmount, uint _lockedEnd) = _lockInfo(_token, _tokenId);\\n\\n    require(_lockedDerivedAmount > 0, \\\"NFT_WITHOUT_POWER\\\");\\n    require(_lockedEnd > block.timestamp, \\\"EXPIRED\\\");\\n    require(isValidToken[_token], \\\"INVALID_TOKEN\\\");\\n\\n    _depositFor(DepositInfo({\\n      stakingToken: _token,\\n      tokenId: _tokenId,\\n      value: _value,\\n      unlockTime: 0,\\n      lockedAmount: _lockedAmount,\\n      lockedDerivedAmount: _lockedDerivedAmount,\\n      lockedEnd: _lockedEnd,\\n      depositType: DepositType.INCREASE_LOCK_AMOUNT\\n    }));\\n  }\\n\\n  /// @notice Extend the unlock time for `_tokenId`\\n  /// @param _tokenId ve token ID\\n  /// @param _lockDuration New number of seconds until tokens unlock\\n  function increaseUnlockTime(uint _tokenId, uint _lockDuration) external nonReentrant returns (\\n    uint power,\\n    uint unlockDate\\n  )  {\\n    uint _lockedDerivedAmount = lockedDerivedAmount[_tokenId];\\n    uint _lockedEnd = _lockedEndReal[_tokenId];\\n    // Lock time is rounded down to weeks\\n    uint unlockTime = (block.timestamp + _lockDuration) / WEEK * WEEK;\\n    require(!isAlwaysMaxLock[_tokenId], \\\"ALWAYS_MAX_LOCK\\\");\\n    require(_lockedDerivedAmount > 0, \\\"NFT_WITHOUT_POWER\\\");\\n    require(_lockedEnd > block.timestamp, \\\"EXPIRED\\\");\\n    require(unlockTime > _lockedEnd, \\\"LOW_UNLOCK_TIME\\\");\\n    require(unlockTime <= block.timestamp + MAX_TIME, \\\"HIGH_LOCK_PERIOD\\\");\\n    require(isApprovedOrOwner(msg.sender, _tokenId), \\\"NOT_OWNER\\\");\\n\\n    _depositFor(DepositInfo({\\n      stakingToken: address(0),\\n      tokenId: _tokenId,\\n      value: 0,\\n      unlockTime: unlockTime,\\n      lockedAmount: 0,\\n      lockedDerivedAmount: _lockedDerivedAmount,\\n      lockedEnd: _lockedEnd,\\n      depositType: DepositType.INCREASE_UNLOCK_TIME\\n    }));\\n\\n    power = balanceOfNFT(_tokenId);\\n    unlockDate = _lockedEndReal[_tokenId];\\n  }\\n\\n  /// @dev Merge two NFTs union their balances and keep the biggest lock time.\\n  function merge(uint _from, uint _to) external nonReentrant {\\n    require(attachments[_from] == 0 && !isVoted(_from), \\\"ATTACHED\\\");\\n    require(_from != _to, \\\"IDENTICAL_ADDRESS\\\");\\n    require(!isAlwaysMaxLock[_from] && !isAlwaysMaxLock[_to], \\\"ALWAYS_MAX_LOCK\\\");\\n    require(isApprovedOrOwner(msg.sender, _from) && isApprovedOrOwner(msg.sender, _to), \\\"NOT_OWNER\\\");\\n\\n    uint lockedEndFrom = lockedEnd(_from);\\n    uint lockedEndTo = lockedEnd(_to);\\n    require(lockedEndFrom > block.timestamp && lockedEndTo > block.timestamp, \\\"EXPIRED\\\");\\n    uint end = lockedEndFrom >= lockedEndTo ? lockedEndFrom : lockedEndTo;\\n    uint oldDerivedAmount = lockedDerivedAmount[_from];\\n\\n    uint length = tokens.length;\\n    // we should use the old one for properly calculate checkpoint for the new ve\\n    uint newLockedEndTo = lockedEndTo;\\n    for (uint i; i < length; i++) {\\n      address stakingToken = tokens[i];\\n      uint _lockedAmountFrom = lockedAmounts[_from][stakingToken];\\n      if (_lockedAmountFrom == 0) {\\n        continue;\\n      }\\n      lockedAmounts[_from][stakingToken] = 0;\\n\\n      _depositFor(DepositInfo({\\n        stakingToken: stakingToken,\\n        tokenId: _to,\\n        value: _lockedAmountFrom,\\n        unlockTime: end,\\n        lockedAmount: lockedAmounts[_to][stakingToken],\\n        lockedDerivedAmount: lockedDerivedAmount[_to],\\n        lockedEnd: newLockedEndTo,\\n        depositType: DepositType.MERGE_TYPE\\n      }));\\n\\n      // set new lock time to the current end lock\\n      newLockedEndTo = end;\\n\\n      emit Merged(stakingToken, msg.sender, _from, _to);\\n    }\\n\\n    _updateLockedDerivedAmount(_from, 0);\\n    _lockedEndReal[_from] = 0;\\n\\n    // update checkpoint\\n    _checkpoint(CheckpointInfo(\\n      _from,\\n      oldDerivedAmount,\\n      0,\\n      lockedEndFrom,\\n      lockedEndFrom,\\n      isAlwaysMaxLock[_from]\\n    ));\\n\\n    _burn(_from);\\n  }\\n\\n  /// @dev Split given veNFT. A new NFT will have a given percent of underlying tokens.\\n  /// @param _tokenId ve token ID\\n  /// @param percent percent of underlying tokens for new NFT with denominator 1e18 (1-(100e18-1)).\\n  function split(uint _tokenId, uint percent) external nonReentrant {\\n    require(!isAlwaysMaxLock[_tokenId], \\\"ALWAYS_MAX_LOCK\\\");\\n    require(attachments[_tokenId] == 0 && !isVoted(_tokenId), \\\"ATTACHED\\\");\\n    require(isApprovedOrOwner(msg.sender, _tokenId), \\\"NOT_OWNER\\\");\\n    require(percent != 0 && percent < 100e18, \\\"WRONG_INPUT\\\");\\n\\n    uint _lockedDerivedAmount = lockedDerivedAmount[_tokenId];\\n    uint oldLockedDerivedAmount = _lockedDerivedAmount;\\n    uint _lockedEnd = lockedEnd(_tokenId);\\n\\n    require(_lockedEnd > block.timestamp, \\\"EXPIRED\\\");\\n\\n    // crete new NFT\\n    uint _newTokenId = _incrementTokenIdAndGet();\\n    _mint(msg.sender, _newTokenId);\\n\\n    // migrate percent of locked tokens to the new NFT\\n    uint length = tokens.length;\\n    for (uint i; i < length; ++i) {\\n      address stakingToken = tokens[i];\\n      uint _lockedAmount = lockedAmounts[_tokenId][stakingToken];\\n      if (_lockedAmount == 0) {\\n        continue;\\n      }\\n      uint amountForNewNFT = _lockedAmount * percent / 100e18;\\n      require(amountForNewNFT != 0, \\\"LOW_PERCENT\\\");\\n\\n      uint newLockedDerivedAmount = VeTetuLib.calculateDerivedAmount(\\n        _lockedAmount,\\n        _lockedDerivedAmount,\\n        _lockedAmount - amountForNewNFT,\\n        tokenWeights[stakingToken],\\n        IERC20Metadata(stakingToken).decimals()\\n      );\\n\\n      _lockedDerivedAmount = newLockedDerivedAmount;\\n\\n      lockedAmounts[_tokenId][stakingToken] = _lockedAmount - amountForNewNFT;\\n\\n      // increase values for new NFT\\n      _depositFor(DepositInfo({\\n        stakingToken: stakingToken,\\n        tokenId: _newTokenId,\\n        value: amountForNewNFT,\\n        unlockTime: _lockedEnd,\\n        lockedAmount: 0,\\n        lockedDerivedAmount: lockedDerivedAmount[_newTokenId],\\n        lockedEnd: _lockedEnd,\\n        depositType: DepositType.MERGE_TYPE\\n      }));\\n    }\\n\\n    _updateLockedDerivedAmount(_tokenId, _lockedDerivedAmount);\\n\\n    // update checkpoint\\n    _checkpoint(CheckpointInfo(\\n      _tokenId,\\n      oldLockedDerivedAmount,\\n      _lockedDerivedAmount,\\n      _lockedEnd,\\n      _lockedEnd,\\n      isAlwaysMaxLock[_tokenId]\\n    ));\\n\\n    emit Split(_tokenId, _newTokenId, percent);\\n  }\\n\\n  /// @notice Withdraw all staking tokens for `_tokenId`\\n  /// @dev Only possible if the lock has expired\\n  function withdrawAll(uint _tokenId) external {\\n    uint length = tokens.length;\\n    for (uint i; i < length; ++i) {\\n      address token = tokens[i];\\n      if (lockedAmounts[_tokenId][token] != 0) {\\n        withdraw(token, _tokenId);\\n      }\\n    }\\n  }\\n\\n  /// @notice Withdraw given staking token for `_tokenId`\\n  /// @dev Only possible if the lock has expired\\n  function withdraw(address stakingToken, uint _tokenId) public nonReentrant {\\n    require(isApprovedOrOwner(msg.sender, _tokenId), \\\"NOT_OWNER\\\");\\n    require(attachments[_tokenId] == 0 && !isVoted(_tokenId), \\\"ATTACHED\\\");\\n\\n    (uint oldLockedAmount, uint oldLockedDerivedAmount, uint oldLockedEnd) =\\n            _lockInfo(stakingToken, _tokenId);\\n    require(block.timestamp >= oldLockedEnd, \\\"NOT_EXPIRED\\\");\\n    require(oldLockedAmount > 0, \\\"ZERO_LOCKED\\\");\\n    require(!isAlwaysMaxLock[_tokenId], \\\"ALWAYS_MAX_LOCK\\\");\\n\\n\\n    uint newLockedDerivedAmount = VeTetuLib.calculateDerivedAmount(\\n      oldLockedAmount,\\n      oldLockedDerivedAmount,\\n      0,\\n      tokenWeights[stakingToken],\\n      IERC20Metadata(stakingToken).decimals()\\n    );\\n\\n    // if no tokens set lock to zero\\n    uint newLockEnd = oldLockedEnd;\\n    if (newLockedDerivedAmount == 0) {\\n      _lockedEndReal[_tokenId] = 0;\\n      newLockEnd = 0;\\n    }\\n\\n    // update derived amount\\n    _updateLockedDerivedAmount(_tokenId, newLockedDerivedAmount);\\n\\n    // set locked amount to zero, we will withdraw all\\n    lockedAmounts[_tokenId][stakingToken] = 0;\\n\\n    // update checkpoint\\n    _checkpoint(CheckpointInfo(\\n      _tokenId,\\n      oldLockedDerivedAmount,\\n      newLockedDerivedAmount,\\n      oldLockedEnd,\\n      newLockEnd,\\n      false // already checked and can not be true\\n    ));\\n\\n    // Burn the NFT\\n    if (newLockedDerivedAmount == 0) {\\n      _burn(_tokenId);\\n    }\\n\\n    _transferUnderlyingToken(stakingToken, msg.sender, oldLockedAmount);\\n\\n    emit Withdraw(stakingToken, msg.sender, _tokenId, oldLockedAmount, block.timestamp);\\n  }\\n\\n  /////////////////////////////////////////////////////////////////////////////////////\\n  //                             Attention!\\n  // The following ERC20/minime-compatible methods are not real balanceOf and supply!\\n  // They measure the weights for the purpose of voting, so they don't represent\\n  // real coins.\\n  /////////////////////////////////////////////////////////////////////////////////////\\n\\n  /// @notice Get the voting power for `_tokenId` at given timestamp\\n  /// @dev Adheres to the ERC20 `balanceOf` interface for Aragon compatibility\\n  /// @param _tokenId NFT for lock\\n  /// @param ts Epoch time to return voting power at\\n  /// @return User voting power\\n  function _balanceOfNFT(uint _tokenId, uint ts) internal view returns (uint) {\\n    // with max lock return balance as is\\n    if (isAlwaysMaxLock[_tokenId]) {\\n      return lockedDerivedAmount[_tokenId];\\n    }\\n\\n    uint _epoch = userPointEpoch[_tokenId];\\n    if (_epoch == 0) {\\n      return 0;\\n    } else {\\n      // Binary search\\n      uint _min = 0;\\n      uint _max = _epoch;\\n      for (uint i = 0; i < 128; ++i) {\\n        // Will be always enough for 128-bit numbers\\n        if (_min >= _max) {\\n          break;\\n        }\\n        uint _mid = (_min + _max + 1) / 2;\\n        if (_userPointHistory[_tokenId][_mid].ts <= ts) {\\n          _min = _mid;\\n        } else {\\n          _max = _mid - 1;\\n        }\\n      }\\n      IVeTetu.Point memory lastPoint = _userPointHistory[_tokenId][_min];\\n\\n      if (lastPoint.ts > ts) {\\n        return 0;\\n      }\\n\\n      // calculate power at concrete point of time, it can be higher on past and lower in future\\n      lastPoint.bias -= lastPoint.slope * int128(int256(ts) - int256(lastPoint.ts));\\n      // case if lastPoint.bias > than real locked amount means requested timestamp early than creation time\\n      if (lastPoint.bias < 0 || uint(int256(lastPoint.bias)) > lockedDerivedAmount[_tokenId]) {\\n        return 0;\\n      }\\n      return uint(int256(lastPoint.bias));\\n    }\\n  }\\n\\n  /// @dev Returns current token URI metadata\\n  /// @param _tokenId Token ID to fetch URI for.\\n  function tokenURI(uint _tokenId) external view override returns (string memory) {\\n    require(_idToOwner[_tokenId] != address(0), \\\"TOKEN_NOT_EXIST\\\");\\n\\n    uint _lockedEnd = lockedEnd(_tokenId);\\n    return\\n      VeTetuLib.tokenURI(\\n      _tokenId,\\n      uint(int256(lockedDerivedAmount[_tokenId])),\\n      block.timestamp < _lockedEnd ? _lockedEnd - block.timestamp : 0,\\n      _balanceOfNFT(_tokenId, block.timestamp)\\n    );\\n  }\\n\\n  /// @notice Measure voting power of `_tokenId` at block height `_block`\\n  /// @dev Adheres to MiniMe `balanceOfAt` interface: https://github.com/Giveth/minime\\n  /// @param _tokenId User's wallet NFT\\n  /// @param _block Block to calculate the voting power at\\n  /// @return Voting power\\n  function _balanceOfAtNFT(uint _tokenId, uint _block) internal view returns (uint) {\\n    // for always max lock just return full derived amount\\n    if (isAlwaysMaxLock[_tokenId]) {\\n      return lockedDerivedAmount[_tokenId];\\n    }\\n\\n    return VeTetuLib.balanceOfAtNFT(\\n      _tokenId,\\n      _block,\\n      epoch,\\n      lockedDerivedAmount[_tokenId],\\n      userPointEpoch,\\n      _userPointHistory,\\n      _pointHistory\\n    );\\n  }\\n\\n  /// @notice Calculate total voting power\\n  /// @dev Adheres to the ERC20 `totalSupply` interface for Aragon compatibility\\n  /// @return Total voting power\\n  function totalSupplyAtT(uint t) public view override returns (uint) {\\n    Point memory lastPoint = _pointHistory[epoch];\\n    return VeTetuLib.supplyAt(lastPoint, t, slopeChanges) + additionalTotalSupply;\\n  }\\n\\n  /// @notice Calculate total voting power at some point in the past\\n  /// @param _block Block to calculate the total voting power at\\n  /// @return Total voting power at `_block`\\n  function totalSupplyAt(uint _block) external view override returns (uint) {\\n    return VeTetuLib.totalSupplyAt(\\n      _block,\\n      epoch,\\n      _pointHistory,\\n      slopeChanges\\n    ) + additionalTotalSupply;\\n  }\\n\\n  /// @notice Record global data to checkpoint\\n  function checkpoint() external override {\\n    _checkpoint(CheckpointInfo(0, 0, 0, 0, 0, false));\\n  }\\n\\n  /// @notice Record global and per-user data to checkpoint\\n  function _checkpoint(CheckpointInfo memory info) internal {\\n\\n    // we do not need checkpoints for always max lock\\n    if (info.isAlwaysMaxLock) {\\n      return;\\n    }\\n\\n    uint _epoch = epoch;\\n    uint newEpoch = VeTetuLib.checkpoint(\\n      info.tokenId,\\n      info.oldDerivedAmount,\\n      info.newDerivedAmount,\\n      info.oldEnd,\\n      info.newEnd,\\n      _epoch,\\n      slopeChanges,\\n      userPointEpoch,\\n      _userPointHistory,\\n      _pointHistory\\n    );\\n\\n    if (newEpoch != 0 && newEpoch != _epoch) {\\n      epoch = newEpoch;\\n    }\\n  }\\n\\n  function _burn(uint _tokenId) internal {\\n    address owner = ownerOf(_tokenId);\\n    // Clear approval\\n    approve(address(0), _tokenId);\\n    // Remove token\\n    _removeTokenFrom(owner, _tokenId);\\n    emit Transfer(owner, address(0), _tokenId);\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/ve/VeTetuLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"../openzeppelin/Math.sol\\\";\\nimport \\\"../interfaces/IVeTetu.sol\\\";\\nimport \\\"../lib/Base64.sol\\\";\\nimport \\\"./../lib/StringLib.sol\\\";\\n\\n/// @title Library with additional ve functions\\n/// @author belbix\\nlibrary VeTetuLib {\\n  using Math for uint;\\n\\n  uint internal constant WEEK = 1 weeks;\\n  uint internal constant MULTIPLIER = 1 ether;\\n  int128 internal constant I_MAX_TIME = 16 weeks;\\n  uint internal constant WEIGHT_DENOMINATOR = 100e18;\\n\\n  // Only for internal usage\\n  struct CheckpointInfo {\\n    uint tokenId;\\n    uint oldDerivedAmount;\\n    uint newDerivedAmount;\\n    uint oldEnd;\\n    uint newEnd;\\n    uint epoch;\\n    IVeTetu.Point uOld;\\n    IVeTetu.Point uNew;\\n    int128 oldDSlope;\\n    int128 newDSlope;\\n  }\\n\\n  ////////////////////////////////////////////////////\\n  //  MAIN LOGIC\\n  ////////////////////////////////////////////////////\\n\\n  function calculateDerivedAmount(\\n    uint currentAmount,\\n    uint oldDerivedAmount,\\n    uint newAmount,\\n    uint weight,\\n    uint8 decimals\\n  ) internal pure returns (uint) {\\n    // subtract current derived balance\\n    // rounded to UP for subtracting closer to 0 value\\n    if (oldDerivedAmount != 0 && currentAmount != 0) {\\n      currentAmount = currentAmount.mulDiv(1e18, 10 ** decimals, Math.Rounding.Up);\\n      uint currentDerivedAmount = currentAmount.mulDiv(weight, WEIGHT_DENOMINATOR, Math.Rounding.Up);\\n      if (oldDerivedAmount > currentDerivedAmount) {\\n        oldDerivedAmount -= currentDerivedAmount;\\n      } else {\\n        // in case of wrong rounding better to set to zero than revert\\n        oldDerivedAmount = 0;\\n      }\\n    }\\n\\n    // recalculate derived amount with new amount\\n    // rounded to DOWN\\n    // normalize decimals to 18\\n    newAmount = newAmount.mulDiv(1e18, 10 ** decimals, Math.Rounding.Down);\\n    // calculate the final amount based on the weight\\n    newAmount = newAmount.mulDiv(weight, WEIGHT_DENOMINATOR, Math.Rounding.Down);\\n    return oldDerivedAmount + newAmount;\\n  }\\n\\n  /// @notice Binary search to estimate timestamp for block number\\n  /// @param _block Block to find\\n  /// @param maxEpoch Don't go beyond this epoch\\n  /// @return Approximate timestamp for block\\n  function findBlockEpoch(uint _block, uint maxEpoch, mapping(uint => IVeTetu.Point) storage _pointHistory) public view returns (uint) {\\n    // Binary search\\n    uint _min = 0;\\n    uint _max = maxEpoch;\\n    for (uint i = 0; i < 128; ++i) {\\n      // Will be always enough for 128-bit numbers\\n      if (_min >= _max) {\\n        break;\\n      }\\n      uint _mid = (_min + _max + 1) / 2;\\n      if (_pointHistory[_mid].blk <= _block) {\\n        _min = _mid;\\n      } else {\\n        _max = _mid - 1;\\n      }\\n    }\\n    return _min;\\n  }\\n\\n  /// @notice Measure voting power of `_tokenId` at block height `_block`\\n  /// @return resultBalance Voting power\\n  function balanceOfAtNFT(\\n    uint _tokenId,\\n    uint _block,\\n    uint maxEpoch,\\n    uint lockedDerivedAmount,\\n    mapping(uint => uint) storage userPointEpoch,\\n    mapping(uint => IVeTetu.Point[1000000000]) storage _userPointHistory,\\n    mapping(uint => IVeTetu.Point) storage _pointHistory\\n  ) external view returns (uint resultBalance) {\\n\\n    // Binary search closest user point\\n    uint _min = 0;\\n    {\\n      uint _max = userPointEpoch[_tokenId];\\n      for (uint i = 0; i < 128; ++i) {\\n        // Will be always enough for 128-bit numbers\\n        if (_min >= _max) {\\n          break;\\n        }\\n        uint _mid = (_min + _max + 1) / 2;\\n        if (_userPointHistory[_tokenId][_mid].blk <= _block) {\\n          _min = _mid;\\n        } else {\\n          _max = _mid - 1;\\n        }\\n      }\\n    }\\n\\n    IVeTetu.Point memory uPoint = _userPointHistory[_tokenId][_min];\\n\\n    // nft does not exist at this block\\n    if (uPoint.blk > _block) {\\n      return 0;\\n    }\\n\\n    // need to calculate timestamp for the given block\\n    uint blockTime;\\n    if (_block <= block.number) {\\n      uint _epoch = findBlockEpoch(_block, maxEpoch, _pointHistory);\\n      IVeTetu.Point memory point0 = _pointHistory[_epoch];\\n      uint dBlock = 0;\\n      uint dt = 0;\\n      if (_epoch < maxEpoch) {\\n        IVeTetu.Point memory point1 = _pointHistory[_epoch + 1];\\n        dBlock = point1.blk - point0.blk;\\n        dt = point1.ts - point0.ts;\\n      } else {\\n        dBlock = block.number - point0.blk;\\n        dt = block.timestamp - point0.ts;\\n      }\\n      blockTime = point0.ts;\\n      if (dBlock != 0 && _block > point0.blk) {\\n        blockTime += (dt * (_block - point0.blk)) / dBlock;\\n      }\\n    } else {\\n      // we can not calculate estimation if no checkpoints\\n      if (maxEpoch == 0) {\\n        return 0;\\n      }\\n      // for future blocks will use a simple estimation\\n      IVeTetu.Point memory point0 = _pointHistory[maxEpoch - 1];\\n      uint tsPerBlock18 = (block.timestamp - point0.ts) * 1e18 / (block.number - point0.blk);\\n      blockTime = block.timestamp + tsPerBlock18 * (_block - block.number) / 1e18;\\n    }\\n\\n    uPoint.bias -= uPoint.slope * int128(int256(blockTime - uPoint.ts));\\n\\n    resultBalance = uint(uint128(_positiveInt128(uPoint.bias)));\\n\\n    // make sure we do not return more than nft has\\n    if (resultBalance > lockedDerivedAmount) {\\n      return 0;\\n    }\\n  }\\n\\n  /// @notice Calculate total voting power at some point in the past\\n  /// @param point The point (bias/slope) to start search from\\n  /// @param t Time to calculate the total voting power at\\n  /// @return Total voting power at that time\\n  function supplyAt(IVeTetu.Point memory point, uint t, mapping(uint => int128) storage slopeChanges) public view returns (uint) {\\n    // this function will return positive value even for block when contract does not exist\\n    // for reduce gas cost we assume that it will not be used in such form\\n\\n    IVeTetu.Point memory lastPoint = point;\\n    uint ti = (lastPoint.ts / WEEK) * WEEK;\\n    for (uint i = 0; i < 255; ++i) {\\n      ti += WEEK;\\n      int128 dSlope = 0;\\n      if (ti > t) {\\n        ti = t;\\n      } else {\\n        dSlope = slopeChanges[ti];\\n      }\\n      lastPoint.bias -= lastPoint.slope * int128(int256(ti) - int256(lastPoint.ts));\\n      if (ti == t) {\\n        break;\\n      }\\n      lastPoint.slope += dSlope;\\n      lastPoint.ts = ti;\\n    }\\n    return uint(uint128(_positiveInt128(lastPoint.bias)));\\n  }\\n\\n  /// @notice Calculate total voting power at some point in the past\\n  /// @param _block Block to calculate the total voting power at\\n  /// @return Total voting power at `_block`\\n  function totalSupplyAt(\\n    uint _block,\\n    uint _epoch,\\n    mapping(uint => IVeTetu.Point) storage _pointHistory,\\n    mapping(uint => int128) storage slopeChanges\\n  ) external view returns (uint) {\\n    require(_block <= block.number, \\\"WRONG_INPUT\\\");\\n\\n    uint targetEpoch = findBlockEpoch(_block, _epoch, _pointHistory);\\n\\n    IVeTetu.Point memory point = _pointHistory[targetEpoch];\\n    // it is possible only for a block before the launch\\n    // return 0 as more clear answer than revert\\n    if (point.blk > _block) {\\n      return 0;\\n    }\\n    uint dt = 0;\\n    if (targetEpoch < _epoch) {\\n      IVeTetu.Point memory pointNext = _pointHistory[targetEpoch + 1];\\n      // next point block can not be the same or lower\\n      dt = ((_block - point.blk) * (pointNext.ts - point.ts)) / (pointNext.blk - point.blk);\\n    } else {\\n      if (point.blk != block.number) {\\n        dt = ((_block - point.blk) * (block.timestamp - point.ts)) / (block.number - point.blk);\\n      }\\n    }\\n    // Now dt contains info on how far are we beyond point\\n    return supplyAt(point, point.ts + dt, slopeChanges);\\n  }\\n\\n  /// @notice Record global and per-user data to checkpoint\\n  function checkpoint(\\n    uint tokenId,\\n    uint oldDerivedAmount,\\n    uint newDerivedAmount,\\n    uint oldEnd,\\n    uint newEnd,\\n    uint epoch,\\n    mapping(uint => int128) storage slopeChanges,\\n    mapping(uint => uint) storage userPointEpoch,\\n    mapping(uint => IVeTetu.Point[1000000000]) storage _userPointHistory,\\n    mapping(uint => IVeTetu.Point) storage _pointHistory\\n  ) external returns (uint newEpoch) {\\n    IVeTetu.Point memory uOld;\\n    IVeTetu.Point memory uNew;\\n    return _checkpoint(\\n      CheckpointInfo({\\n        tokenId: tokenId,\\n        oldDerivedAmount: oldDerivedAmount,\\n        newDerivedAmount: newDerivedAmount,\\n        oldEnd: oldEnd,\\n        newEnd: newEnd,\\n        epoch: epoch,\\n        uOld: uOld,\\n        uNew: uNew,\\n        oldDSlope: 0,\\n        newDSlope: 0\\n      }),\\n      slopeChanges,\\n      userPointEpoch,\\n      _userPointHistory,\\n      _pointHistory\\n    );\\n  }\\n\\n  function _checkpoint(\\n    CheckpointInfo memory info,\\n    mapping(uint => int128) storage slopeChanges,\\n    mapping(uint => uint) storage userPointEpoch,\\n    mapping(uint => IVeTetu.Point[1000000000]) storage _userPointHistory,\\n    mapping(uint => IVeTetu.Point) storage _pointHistory\\n  ) internal returns (uint newEpoch) {\\n\\n    if (info.tokenId != 0) {\\n      // Calculate slopes and biases\\n      // Kept at zero when they have to\\n      if (info.oldEnd > block.timestamp && info.oldDerivedAmount > 0) {\\n        info.uOld.slope = int128(uint128(info.oldDerivedAmount)) / I_MAX_TIME;\\n        info.uOld.bias = info.uOld.slope * int128(int256(info.oldEnd - block.timestamp));\\n      }\\n      if (info.newEnd > block.timestamp && info.newDerivedAmount > 0) {\\n        info.uNew.slope = int128(uint128(info.newDerivedAmount)) / I_MAX_TIME;\\n        info.uNew.bias = info.uNew.slope * int128(int256(info.newEnd - block.timestamp));\\n      }\\n\\n      // Read values of scheduled changes in the slope\\n      // oldLocked.end can be in the past and in the future\\n      // newLocked.end can ONLY by in the FUTURE unless everything expired: than zeros\\n      info.oldDSlope = slopeChanges[info.oldEnd];\\n      if (info.newEnd != 0) {\\n        if (info.newEnd == info.oldEnd) {\\n          info.newDSlope = info.oldDSlope;\\n        } else {\\n          info.newDSlope = slopeChanges[info.newEnd];\\n        }\\n      }\\n    }\\n\\n    IVeTetu.Point memory lastPoint = IVeTetu.Point({bias: 0, slope: 0, ts: block.timestamp, blk: block.number});\\n    if (info.epoch > 0) {\\n      lastPoint = _pointHistory[info.epoch];\\n    }\\n    uint lastCheckpoint = lastPoint.ts;\\n    // initialLastPoint is used for extrapolation to calculate block number\\n    // (approximately, for *At methods) and save them\\n    // as we cannot figure that out exactly from inside the contract\\n    IVeTetu.Point memory initialLastPoint = lastPoint;\\n    uint blockSlope = 0;\\n    // dblock/dt\\n    if (block.timestamp > lastPoint.ts) {\\n      blockSlope = (MULTIPLIER * (block.number - lastPoint.blk)) / (block.timestamp - lastPoint.ts);\\n    }\\n    // If last point is already recorded in this block, slope=0\\n    // But that's ok b/c we know the block in such case\\n\\n    // Go over weeks to fill history and calculate what the current point is\\n    {\\n      uint ti = (lastCheckpoint / WEEK) * WEEK;\\n      // Hopefully it won't happen that this won't get used in 5 years!\\n      // If it does, users will be able to withdraw but vote weight will be broken\\n      for (uint i = 0; i < 255; ++i) {\\n        ti += WEEK;\\n        int128 dSlope = 0;\\n        if (ti > block.timestamp) {\\n          ti = block.timestamp;\\n        } else {\\n          dSlope = slopeChanges[ti];\\n        }\\n        lastPoint.bias = _positiveInt128(lastPoint.bias - lastPoint.slope * int128(int256(ti - lastCheckpoint)));\\n        lastPoint.slope = _positiveInt128(lastPoint.slope + dSlope);\\n        lastCheckpoint = ti;\\n        lastPoint.ts = ti;\\n        lastPoint.blk = initialLastPoint.blk + (blockSlope * (ti - initialLastPoint.ts)) / MULTIPLIER;\\n        info.epoch += 1;\\n        if (ti == block.timestamp) {\\n          lastPoint.blk = block.number;\\n          break;\\n        } else {\\n          _pointHistory[info.epoch] = lastPoint;\\n        }\\n      }\\n    }\\n\\n    newEpoch = info.epoch;\\n    // Now pointHistory is filled until t=now\\n\\n    if (info.tokenId != 0) {\\n      // If last point was in this block, the slope change has been applied already\\n      // But in such case we have 0 slope(s)\\n      lastPoint.slope = _positiveInt128(lastPoint.slope + (info.uNew.slope - info.uOld.slope));\\n      lastPoint.bias = _positiveInt128(lastPoint.bias + (info.uNew.bias - info.uOld.bias));\\n    }\\n\\n    // Record the changed point into history\\n    _pointHistory[info.epoch] = lastPoint;\\n\\n    if (info.tokenId != 0) {\\n      // Schedule the slope changes (slope is going down)\\n      // We subtract newUserSlope from [newLocked.end]\\n      // and add old_user_slope to [old_locked.end]\\n      if (info.oldEnd > block.timestamp) {\\n        // old_dslope was <something> - u_old.slope, so we cancel that\\n        info.oldDSlope += info.uOld.slope;\\n        if (info.newEnd == info.oldEnd) {\\n          info.oldDSlope -= info.uNew.slope;\\n          // It was a new deposit, not extension\\n        }\\n        slopeChanges[info.oldEnd] = info.oldDSlope;\\n      }\\n\\n      if (info.newEnd > block.timestamp) {\\n        if (info.newEnd > info.oldEnd) {\\n          info.newDSlope -= info.uNew.slope;\\n          // old slope disappeared at this point\\n          slopeChanges[info.newEnd] = info.newDSlope;\\n        }\\n        // else: we recorded it already in oldDSlope\\n      }\\n      // Now handle user history\\n      uint userEpoch = userPointEpoch[info.tokenId] + 1;\\n\\n      userPointEpoch[info.tokenId] = userEpoch;\\n      info.uNew.ts = block.timestamp;\\n      info.uNew.blk = block.number;\\n      _userPointHistory[info.tokenId][userEpoch] = info.uNew;\\n    }\\n  }\\n\\n  function _positiveInt128(int128 value) internal pure returns (int128) {\\n    return value < 0 ? int128(0) : value;\\n  }\\n\\n  /// @dev Return SVG logo of veTETU.\\n  function tokenURI(uint _tokenId, uint _balanceOf, uint untilEnd, uint _value) public pure returns (string memory output) {\\n    output = '<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 600 900\\\"><style>.base{font-size:40px;}</style><rect fill=\\\"#193180\\\" width=\\\"600\\\" height=\\\"900\\\"/><path fill=\\\"#4899F8\\\" d=\\\"M0,900h600V522.2C454.4,517.2,107.4,456.8,60.2,0H0V900z\\\"/><circle fill=\\\"#1B184E\\\" cx=\\\"385\\\" cy=\\\"212\\\" r=\\\"180\\\"/><circle fill=\\\"#04A8F0\\\" cx=\\\"385\\\" cy=\\\"142\\\" r=\\\"42\\\"/><path fill-rule=\\\"evenodd\\\" clip-rule=\\\"evenodd\\\" fill=\\\"#686DF1\\\" d=\\\"M385.6,208.8c43.1,0,78-34.9,78-78c-1.8-21.1,16.2-21.1,21.1-15.4c0.4,0.3,0.7,0.7,1.1,1.2c16.7,21.5,26.6,48.4,26.6,77.7c0,25.8-24.4,42.2-50.2,42.2H309c-25.8,0-50.2-16.4-50.2-42.2c0-29.3,9.9-56.3,26.6-77.7c0.3-0.4,0.7-0.8,1.1-1.2c4.9-5.7,22.9-5.7,21.1,15.4l0,0C307.6,173.9,342.5,208.8,385.6,208.8z\\\"/><path fill=\\\"#04A8F0\\\" d=\\\"M372.3,335.9l-35.5-51.2c-7.5-10.8,0.2-25.5,13.3-25.5h35.5h35.5c13.1,0,20.8,14.7,13.3,25.5l-35.5,51.2C392.5,345.2,378.7,345.2,372.3,335.9z\\\"/>';\\n    output = string(abi.encodePacked(output, '<text transform=\\\"matrix(1 0 0 1 50 464)\\\" fill=\\\"#EAECFE\\\" class=\\\"base\\\">ID:</text><text transform=\\\"matrix(1 0 0 1 50 506)\\\" fill=\\\"#97D0FF\\\" class=\\\"base\\\">', StringLib._toString(_tokenId), '</text>'));\\n    output = string(abi.encodePacked(output, '<text transform=\\\"matrix(1 0 0 1 50 579)\\\" fill=\\\"#EAECFE\\\" class=\\\"base\\\">Balance:</text><text transform=\\\"matrix(1 0 0 1 50 621)\\\" fill=\\\"#97D0FF\\\" class=\\\"base\\\">', StringLib._toString(_balanceOf / 1e18), '</text>'));\\n    output = string(abi.encodePacked(output, '<text transform=\\\"matrix(1 0 0 1 50 695)\\\" fill=\\\"#EAECFE\\\" class=\\\"base\\\">Until unlock:</text><text transform=\\\"matrix(1 0 0 1 50 737)\\\" fill=\\\"#97D0FF\\\" class=\\\"base\\\">', StringLib._toString(untilEnd / 60 / 60 / 24), ' days</text>'));\\n    output = string(abi.encodePacked(output, '<text transform=\\\"matrix(1 0 0 1 50 811)\\\" fill=\\\"#EAECFE\\\" class=\\\"base\\\">Power:</text><text transform=\\\"matrix(1 0 0 1 50 853)\\\" fill=\\\"#97D0FF\\\" class=\\\"base\\\">', StringLib._toString(_value / 1e18), '</text></svg>'));\\n\\n    string memory json = Base64.encode(bytes(string(abi.encodePacked('{\\\"name\\\": \\\"veTETU #', StringLib._toString(_tokenId), '\\\", \\\"description\\\": \\\"Locked TETU tokens\\\", \\\"image\\\": \\\"data:image/svg+xml;base64,', Base64.encode(bytes(output)), '\\\"}'))));\\n    output = string(abi.encodePacked('data:application/json;base64,', json));\\n  }\\n\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 150\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {\r\n      \"contracts/ve/VeTetuLib.sol\": {\r\n        \"VeTetuLib\": \"0xfd95dcd17b172da023cf600fb0056d141f00ab32\"\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"AlwaysMaxLock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"}],\"name\":\"ContractInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakingToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"locktime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum IVeTetu.DepositType\",\"name\":\"depositType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeToExecute\",\"type\":\"uint256\"}],\"name\":\"GovActionAnnounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakingToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"}],\"name\":\"Merged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldLogic\",\"type\":\"address\"}],\"name\":\"RevisionIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"parentTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"Split\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"name\":\"StakingTokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"TransferWhitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakingToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CONTROLLABLE_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GOV_ACTION_TIME_LOCK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_ATTACHMENTS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VE_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_deprecated_voted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"abstain\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"name\":\"addToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"additionalTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum VeTetu.TimeLockType\",\"name\":\"_type\",\"type\":\"uint8\"}],\"name\":\"announceAction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_approved\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"attachToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"attachments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"balanceOfAtNFT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"balanceOfNFT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_t\",\"type\":\"uint256\"}],\"name\":\"balanceOfNFTAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blockTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"changeTokenFarmingAllowanceStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkpoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockDuration\",\"type\":\"uint256\"}],\"name\":\"createLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockDuration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"createLockFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"created\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createdBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"detachToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"emergencyWithdrawStakedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"slot\",\"type\":\"uint256\"}],\"name\":\"getSlot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"result\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum VeTetu.TimeLockType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"govActionTimeLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"increaseAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oldLogic\",\"type\":\"address\"}],\"name\":\"increaseRevision\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockDuration\",\"type\":\"uint256\"}],\"name\":\"increaseUnlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"power\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockDate\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"controller_\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isAlwaysMaxLock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"isApprovedOrOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_value\",\"type\":\"address\"}],\"name\":\"isController\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_value\",\"type\":\"address\"}],\"name\":\"isGovernance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isValidToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"isVoted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWhitelistedTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockedAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockedDerivedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"lockedEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"merge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ownerToOperators\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownershipChange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platformVoter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_loc\",\"type\":\"uint256\"}],\"name\":\"pointHistory\",\"outputs\":[{\"components\":[{\"internalType\":\"int128\",\"name\":\"bias\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"slope\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blk\",\"type\":\"uint256\"}],\"internalType\":\"struct IVeTetu.Point\",\"name\":\"point\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"previousImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revision\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setAlwaysMaxLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"slopeChanges\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"split\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"stakeAvailableTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenIndex\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenToOwnerIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenWeights\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"totalSupplyAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"t\",\"type\":\"uint256\"}],\"name\":\"totalSupplyAtT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userPointEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_loc\",\"type\":\"uint256\"}],\"name\":\"userPointHistory\",\"outputs\":[{\"components\":[{\"internalType\":\"int128\",\"name\":\"bias\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"slope\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blk\",\"type\":\"uint256\"}],\"internalType\":\"struct IVeTetu.Point\",\"name\":\"point\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"voting\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"whitelistTransferFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "VeTetu", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "150", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}