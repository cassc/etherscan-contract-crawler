{"SourceCode": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.8.0;\r\n\r\n\r\n// ====================================================================\r\n// |     ______                   _______                             |\r\n// |    / _____________ __  __   / ____(_____  ____ _____  ________   |\r\n// |   / /_  / ___/ __ `| |/_/  / /_  / / __ \\/ __ `/ __ \\/ ___/ _ \\  |\r\n// |  / __/ / /  / /_/ _>  <   / __/ / / / / / /_/ / / / / /__/  __/  |\r\n// | /_/   /_/   \\__,_/_/|_|  /_/   /_/_/ /_/\\__,_/_/ /_/\\___/\\___/   |\r\n// |                                                                  |\r\n// ====================================================================\r\n// ====================== SlippageAuctionFactory ======================\r\n// ====================================================================\r\n// Frax Finance: https://github.com/FraxFinance\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * The default value of {decimals} is 18. To change this, you should override\r\n * this function so it returns a different value.\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the default value returned by this function, unless\r\n     * it's overridden.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` and `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``from``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `from` to `to`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address from, address to, uint256 amount) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\r\n            // decrementing then incrementing.\r\n            _balances[to] += amount;\r\n        }\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        unchecked {\r\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\r\n            _balances[account] += amount;\r\n        }\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\r\n            _totalSupply -= amount;\r\n        }\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\r\n     *\r\n     * Does not update the allowance amount in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Might emit an {Approval} event.\r\n     */\r\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\r\n}\r\n\r\n// ====================================================================\r\n// |     ______                   _______                             |\r\n// |    / _____________ __  __   / ____(_____  ____ _____  ________   |\r\n// |   / /_  / ___/ __ `| |/_/  / /_  / / __ \\/ __ `/ __ \\/ ___/ _ \\  |\r\n// |  / __/ / /  / /_/ _>  <   / __/ / / / / / /_/ / / / / /__/  __/  |\r\n// | /_/   /_/   \\__,_/_/|_|  /_/   /_/_/ /_/\\__,_/_/ /_/\\___/\\___/   |\r\n// |                                                                  |\r\n// ====================================================================\r\n// ========================= SlippageAuction ==========================\r\n// ====================================================================\r\n// Slippage auction to sell tokens over time.  Both tokens must be 18 decimals.\r\n// It has 3 parameters:\r\n// - amount of sell token to auction\r\n// - slippage per token bought\r\n// - price decrease per day.\r\n// For this we can calculate the time the auction will operate at the market price.\r\n// Example:\r\n// - We auction 10M\r\n// - We pick a slippage such that a 100k buy will result in 0.1% slippage\r\n// => 10M = 100x100k, so total price impact during the auction will be 20% (price impact is twice the slippage)\r\n// - We lower the price 1% per day\r\n// => the auction will be at the market price for at least 20 days.\r\n\r\n// Frax Finance: https://github.com/FraxFinance\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _nonReentrantBefore();\r\n        _;\r\n        _nonReentrantAfter();\r\n    }\r\n\r\n    function _nonReentrantBefore() private {\r\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n    }\r\n\r\n    function _nonReentrantAfter() private {\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\r\n     * `nonReentrant` function in the call stack.\r\n     */\r\n    function _reentrancyGuardEntered() internal view returns (bool) {\r\n        return _status == _ENTERED;\r\n    }\r\n}\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\r\n\r\n/**\r\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\r\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\r\n *\r\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\r\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\r\n * need to send a transaction, and thus is not required to hold Ether at all.\r\n */\r\ninterface IERC20Permit {\r\n    /**\r\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\r\n     * given ``owner``'s signed approval.\r\n     *\r\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\r\n     * ordering also apply here.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `deadline` must be a timestamp in the future.\r\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\r\n     * over the EIP712-formatted function arguments.\r\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\r\n     *\r\n     * For more information on the signature format, see the\r\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\r\n     * section].\r\n     */\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Returns the current nonce for `owner`. This value must be\r\n     * included whenever a signature is generated for {permit}.\r\n     *\r\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\r\n     * prevents a signature from being used multiple times.\r\n     */\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\r\n     */\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n}\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     *\r\n     * Furthermore, `isContract` will also return true if the target contract within\r\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\r\n     * which only has an effect at the end of a transaction.\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\r\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\r\n     *\r\n     * _Available since v4.8._\r\n     */\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        if (success) {\r\n            if (returndata.length == 0) {\r\n                // only check isContract if the call was successful and the return data is empty\r\n                // otherwise we already know that it was a contract\r\n                require(isContract(target), \"Address: call to non-contract\");\r\n            }\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason or using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length > 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert(errorMessage);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    /**\r\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\r\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 oldAllowance = token.allowance(address(this), spender);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\r\n     * 0 before setting it to a non-zero value.\r\n     */\r\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\r\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\r\n\r\n        if (!_callOptionalReturnBool(token, approvalCall)) {\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\r\n            _callOptionalReturn(token, approvalCall);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\r\n     * Revert on invalid signature.\r\n     */\r\n    function safePermit(\r\n        IERC20Permit token,\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal {\r\n        uint256 nonceBefore = token.nonces(owner);\r\n        token.permit(owner, spender, value, deadline, v, r, s);\r\n        uint256 nonceAfter = token.nonces(owner);\r\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     *\r\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\r\n     */\r\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\r\n        // and not revert is the subcall reverts.\r\n\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        return\r\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\r\n    }\r\n}\r\n\r\n// ====================================================================\r\n// |     ______                   _______                             |\r\n// |    / _____________ __  __   / ____(_____  ____ _____  ________   |\r\n// |   / /_  / ___/ __ `| |/_/  / /_  / / __ \\/ __ `/ __ \\/ ___/ _ \\  |\r\n// |  / __/ / /  / /_/ _>  <   / __/ / / / / / /_/ / / / / /__/  __/  |\r\n// | /_/   /_/   \\__,_/_/|_|  /_/   /_/_/ /_/\\__,_/_/ /_/\\___/\\___/   |\r\n// |                                                                  |\r\n// ====================================================================\r\n// ========================== Timelock2Step ===========================\r\n// ====================================================================\r\n// Frax Finance: https://github.com/FraxFinance\r\n\r\n// Primary Author\r\n// Drake Evans: https://github.com/DrakeEvans\r\n\r\n// Reviewers\r\n// Dennis: https://github.com/denett\r\n\r\n// ====================================================================\r\n\r\n/// @title Timelock2Step\r\n/// @author Drake Evans (Frax Finance) https://github.com/drakeevans\r\n/// @dev Inspired by OpenZeppelin's Ownable2Step contract\r\n/// @notice  An abstract contract which contains 2-step transfer and renounce logic for a timelock address\r\nabstract contract Timelock2Step {\r\n    /// @notice The pending timelock address\r\n    address public pendingTimelockAddress;\r\n\r\n    /// @notice The current timelock address\r\n    address public timelockAddress;\r\n\r\n    constructor(address _timelockAddress) {\r\n        timelockAddress = _timelockAddress;\r\n    }\r\n\r\n    // ============================================================================================\r\n    // Functions: External Functions\r\n    // ============================================================================================\r\n\r\n    /// @notice The ```transferTimelock``` function initiates the timelock transfer\r\n    /// @dev Must be called by the current timelock\r\n    /// @param _newTimelock The address of the nominated (pending) timelock\r\n    function transferTimelock(address _newTimelock) external virtual {\r\n        _requireSenderIsTimelock();\r\n        _transferTimelock(_newTimelock);\r\n    }\r\n\r\n    /// @notice The ```acceptTransferTimelock``` function completes the timelock transfer\r\n    /// @dev Must be called by the pending timelock\r\n    function acceptTransferTimelock() external virtual {\r\n        _requireSenderIsPendingTimelock();\r\n        _acceptTransferTimelock();\r\n    }\r\n\r\n    /// @notice The ```renounceTimelock``` function renounces the timelock after setting pending timelock to current timelock\r\n    /// @dev Pending timelock must be set to current timelock before renouncing, creating a 2-step renounce process\r\n    function renounceTimelock() external virtual {\r\n        _requireSenderIsTimelock();\r\n        _requireSenderIsPendingTimelock();\r\n        _transferTimelock(address(0));\r\n        _setTimelock(address(0));\r\n    }\r\n\r\n    // ============================================================================================\r\n    // Functions: Internal Actions\r\n    // ============================================================================================\r\n\r\n    /// @notice The ```_transferTimelock``` function initiates the timelock transfer\r\n    /// @dev This function is to be implemented by a public function\r\n    /// @param _newTimelock The address of the nominated (pending) timelock\r\n    function _transferTimelock(address _newTimelock) internal {\r\n        pendingTimelockAddress = _newTimelock;\r\n        emit TimelockTransferStarted(timelockAddress, _newTimelock);\r\n    }\r\n\r\n    /// @notice The ```_acceptTransferTimelock``` function completes the timelock transfer\r\n    /// @dev This function is to be implemented by a public function\r\n    function _acceptTransferTimelock() internal {\r\n        pendingTimelockAddress = address(0);\r\n        _setTimelock(msg.sender);\r\n    }\r\n\r\n    /// @notice The ```_setTimelock``` function sets the timelock address\r\n    /// @dev This function is to be implemented by a public function\r\n    /// @param _newTimelock The address of the new timelock\r\n    function _setTimelock(address _newTimelock) internal {\r\n        emit TimelockTransferred(timelockAddress, _newTimelock);\r\n        timelockAddress = _newTimelock;\r\n    }\r\n\r\n    // ============================================================================================\r\n    // Functions: Internal Checks\r\n    // ============================================================================================\r\n\r\n    /// @notice The ```_isTimelock``` function checks if _address is current timelock address\r\n    /// @param _address The address to check against the timelock\r\n    /// @return Whether or not msg.sender is current timelock address\r\n    function _isTimelock(address _address) internal view returns (bool) {\r\n        return _address == timelockAddress;\r\n    }\r\n\r\n    /// @notice The ```_requireIsTimelock``` function reverts if _address is not current timelock address\r\n    /// @param _address The address to check against the timelock\r\n    function _requireIsTimelock(address _address) internal view {\r\n        if (!_isTimelock(_address)) revert AddressIsNotTimelock(timelockAddress, _address);\r\n    }\r\n\r\n    /// @notice The ```_requireSenderIsTimelock``` function reverts if msg.sender is not current timelock address\r\n    /// @dev This function is to be implemented by a public function\r\n    function _requireSenderIsTimelock() internal view {\r\n        _requireIsTimelock(msg.sender);\r\n    }\r\n\r\n    /// @notice The ```_isPendingTimelock``` function checks if the _address is pending timelock address\r\n    /// @dev This function is to be implemented by a public function\r\n    /// @param _address The address to check against the pending timelock\r\n    /// @return Whether or not _address is pending timelock address\r\n    function _isPendingTimelock(address _address) internal view returns (bool) {\r\n        return _address == pendingTimelockAddress;\r\n    }\r\n\r\n    /// @notice The ```_requireIsPendingTimelock``` function reverts if the _address is not pending timelock address\r\n    /// @dev This function is to be implemented by a public function\r\n    /// @param _address The address to check against the pending timelock\r\n    function _requireIsPendingTimelock(address _address) internal view {\r\n        if (!_isPendingTimelock(_address)) revert AddressIsNotPendingTimelock(pendingTimelockAddress, _address);\r\n    }\r\n\r\n    /// @notice The ```_requirePendingTimelock``` function reverts if msg.sender is not pending timelock address\r\n    /// @dev This function is to be implemented by a public function\r\n    function _requireSenderIsPendingTimelock() internal view {\r\n        _requireIsPendingTimelock(msg.sender);\r\n    }\r\n\r\n    // ============================================================================================\r\n    // Functions: Events\r\n    // ============================================================================================\r\n\r\n    /// @notice The ```TimelockTransferStarted``` event is emitted when the timelock transfer is initiated\r\n    /// @param previousTimelock The address of the previous timelock\r\n    /// @param newTimelock The address of the new timelock\r\n    event TimelockTransferStarted(address indexed previousTimelock, address indexed newTimelock);\r\n\r\n    /// @notice The ```TimelockTransferred``` event is emitted when the timelock transfer is completed\r\n    /// @param previousTimelock The address of the previous timelock\r\n    /// @param newTimelock The address of the new timelock\r\n    event TimelockTransferred(address indexed previousTimelock, address indexed newTimelock);\r\n\r\n    // ============================================================================================\r\n    // Functions: Errors\r\n    // ============================================================================================\r\n\r\n    /// @notice Emitted when timelock is transferred\r\n    error AddressIsNotTimelock(address timelockAddress, address actualAddress);\r\n\r\n    /// @notice Emitted when pending timelock is transferred\r\n    error AddressIsNotPendingTimelock(address pendingTimelockAddress, address actualAddress);\r\n}\r\n\r\ninterface IUniswapV2Callee {\r\n    function uniswapV2Call(address sender, uint256 amount0, uint256 amount1, bytes calldata data) external;\r\n}\r\n\r\n/// @title SlippageAuction\r\n/// @notice Slippage auction to sell tokens over time.\r\n/// @dev Both tokens must be 18 decimals.\r\ncontract SlippageAuction is ReentrancyGuard, Timelock2Step {\r\n    using SafeERC20 for IERC20;\r\n\r\n    // ==============================================================================\r\n    // Storage\r\n    // ==============================================================================\r\n\r\n    /// @notice The name of this auction\r\n    string public name;\r\n\r\n    /// @notice Slippage precision\r\n    uint256 public constant PRECISION = 1e18;\r\n\r\n    /// @notice Stored information about auctions\r\n    Auction[] public auctions;\r\n\r\n    /// @notice The token used for buying the sellToken\r\n    address public immutable BUY_TOKEN;\r\n\r\n    /// @notice The token being auctioned off\r\n    address public immutable SELL_TOKEN;\r\n\r\n    /// @notice Alias for BUY_TOKEN\r\n    /// @dev Maintains UniswapV2 interface\r\n    address public immutable token0;\r\n\r\n    /// @notice Alias for SELL_TOKEN\r\n    /// @notice Maintains UniswapV2 interface\r\n    address public immutable token1;\r\n\r\n    // ==============================================================================\r\n    // Structs\r\n    // ==============================================================================\r\n\r\n    /// @notice Auction information\r\n    /// @param amountLeft Amount of sellToken remaining to buy\r\n    /// @param buyTokenProceeds Amount of buyToken that came in from sales\r\n    /// @param lastPrice Price of the last sale, in buyToken amount per sellToken (amount of buyToken to purchase 1e18 sellToken)\r\n    /// @param minPrice Minimum price of 1e18 sellToken, in buyToken\r\n    /// @param priceDecay Price decay, (wei per second), using PRECISION\r\n    /// @param priceSlippage Slippage fraction. E.g (0.01 * PRECISION) = 1%\r\n    /// @param lastBuyTime Time of the last sale\r\n    /// @param expiry UNIX timestamp when the auction ends\r\n    /// @param exited If the auction has ended\r\n    struct Auction {\r\n        uint128 amountLeft;\r\n        uint128 buyTokenProceeds;\r\n        uint128 lastPrice;\r\n        uint128 minPrice;\r\n        uint64 priceDecay;\r\n        uint64 priceSlippage;\r\n        uint32 lastBuyTime;\r\n        uint32 expiry;\r\n        bool ended;\r\n    }\r\n\r\n    // ==============================================================================\r\n    // Constructor\r\n    // ==============================================================================\r\n\r\n    /// @param _timelockAddress Address of the timelock/owner contract\r\n    /// @param _buyToken The token used to buy the sellToken being auctioned off\r\n    /// @param _sellToken The token being auctioned off\r\n    constructor(address _timelockAddress, address _buyToken, address _sellToken) Timelock2Step(_timelockAddress) {\r\n        name = string(abi.encodePacked(\"SlippageAuction: \", IERC20Metadata(_sellToken).symbol()));\r\n        BUY_TOKEN = _buyToken;\r\n        SELL_TOKEN = _sellToken;\r\n\r\n        token0 = _buyToken;\r\n        token1 = _sellToken;\r\n    }\r\n\r\n    // ==============================================================================\r\n    // Views\r\n    // ==============================================================================\r\n\r\n    /// @notice The ```version``` function returns the semantic version of this contract\r\n    /// @return _major The major version\r\n    /// @return _minor The minor version\r\n    /// @return _patch The patch version\r\n    function version() external pure returns (uint256 _major, uint256 _minor, uint256 _patch) {\r\n        return (1, 0, 0);\r\n    }\r\n\r\n    /// @notice The ```getPreSlippagePrice``` function calculates the pre-slippage price from the time decay alone\r\n    /// @param _auction The auction struct\r\n    /// @return _price The price\r\n    function getPreSlippagePrice(Auction memory _auction) public view returns (uint256 _price) {\r\n        // Calculate Decay\r\n        uint256 _decay = (_auction.priceDecay * (block.timestamp - _auction.lastBuyTime));\r\n\r\n        // Calculate the sale price (in buyToken per sellToken), factoring in the time decay\r\n        if (_auction.lastPrice < _decay) {\r\n            return _price = _auction.minPrice;\r\n        } else {\r\n            _price = _auction.lastPrice - _decay;\r\n        }\r\n\r\n        // Never go below the minimum price\r\n        if (_price < _auction.minPrice) _price = _auction.minPrice;\r\n    }\r\n\r\n    /// @notice The ```getAmountOut``` function calculates the amount of sellTokens out for a given buyToken amount\r\n    /// @param _amountIn Amount of buyToken in\r\n    /// @param _revertOnOverAmountLeft Whether to revert if _amountOut > amountLeft\r\n    /// @return _amountOut Amount of sellTokens out\r\n    /// @return _slippagePerSellToken The slippage component of the price change (in buyToken per sellToken)\r\n    /// @return _postSlippagePrice The post-slippage price from the time decay + slippage\r\n    function getAmountOut(\r\n        uint256 _amountIn,\r\n        bool _revertOnOverAmountLeft\r\n    ) public view returns (uint256 _amountOut, uint256 _slippagePerSellToken, uint256 _postSlippagePrice) {\r\n        uint256 _auctionNumber = auctions.length - 1;\r\n        // Get the auction info\r\n        Auction memory _auction = auctions[_auctionNumber];\r\n        if (_auction.ended) revert AuctionAlreadyExited();\r\n        if (block.timestamp >= _auction.expiry) revert AuctionExpired();\r\n\r\n        // Calculate the sale price (in buyToken per sellToken), factoring in the time decay\r\n        uint256 _preSlippagePrice = getPreSlippagePrice({ _auction: _auction });\r\n\r\n        // Calculate the slippage component of the price (in buyToken per sellToken)\r\n        _slippagePerSellToken = (_auction.priceSlippage * _amountIn) / PRECISION;\r\n\r\n        // Calculate the output amount of sellToken, Set return value\r\n        _amountOut = (_amountIn * PRECISION) / (_preSlippagePrice + _slippagePerSellToken);\r\n\r\n        // Make sure you are not going over the amountLeft, set return value\r\n        if (_amountOut > _auction.amountLeft) {\r\n            if (_revertOnOverAmountLeft) revert InsufficientSellTokensAvailable();\r\n            else _amountOut = _auction.amountLeft;\r\n        }\r\n\r\n        // Set return value\r\n        _postSlippagePrice = _preSlippagePrice + (2 * _slippagePerSellToken); // Price impact is twice the slippage\r\n    }\r\n\r\n    /// @notice The ```getAmountInMax``` function calculates how many buyTokens you would need to buy out the remaining sellTokens in the auction\r\n    /// @return _amountIn Amount of buyToken needed\r\n    /// @return _slippagePerSellToken The slippage component of the price change (in buyToken per sellToken)\r\n    /// @return _postSlippagePrice The post-slippage price from the time decay + slippage\r\n    function getAmountInMax()\r\n        external\r\n        view\r\n        returns (uint256 _amountIn, uint256 _slippagePerSellToken, uint256 _postSlippagePrice)\r\n    {\r\n        uint256 _auctionNumber = auctions.length - 1;\r\n\r\n        // Get the auction info\r\n        Auction memory _auction = auctions[_auctionNumber];\r\n\r\n        // Call the internal function with amountLeft\r\n        return _getAmountIn({ _auction: _auction, _desiredOut: _auction.amountLeft });\r\n    }\r\n\r\n    /// @notice The ```getAmountIn``` function calculates how many buyTokens you would need in order to obtain a given number of sellTokens\r\n    /// @param _desiredOut The desired number of sellTokens\r\n    /// @return _amountIn Amount of buyToken needed\r\n    /// @return _slippagePerSellToken The slippage component of the price change (in buyToken per sellToken)\r\n    /// @return _postSlippagePrice The post-slippage price from the time decay + slippage\r\n    function getAmountIn(\r\n        uint256 _desiredOut\r\n    ) public view returns (uint256 _amountIn, uint256 _slippagePerSellToken, uint256 _postSlippagePrice) {\r\n        uint256 _auctionNumber = auctions.length - 1;\r\n\r\n        // Get the auction info\r\n        Auction memory _auction = auctions[_auctionNumber];\r\n\r\n        // Call the internal function with _desiredOut, set return values\r\n        (_amountIn, _slippagePerSellToken, _postSlippagePrice) = _getAmountIn({\r\n            _auction: _auction,\r\n            _desiredOut: _desiredOut\r\n        });\r\n    }\r\n\r\n    /// @notice The ```_getAmountIn``` function calculate how many buyTokens you would need to obtain a given number of sellTokens\r\n    /// @param _auction The auction struct\r\n    /// @return _amountIn Amount of buyToken needed\r\n    /// @return _slippagePerSellToken The slippage component of the price change (in buyToken per sellToken)\r\n    /// @return _postSlippagePrice The post-slippage price from the time decay + slippage\r\n    function _getAmountIn(\r\n        Auction memory _auction,\r\n        uint256 _desiredOut\r\n    ) internal view returns (uint256 _amountIn, uint256 _slippagePerSellToken, uint256 _postSlippagePrice) {\r\n        // Do checks\r\n        if (_auction.ended) revert AuctionAlreadyExited();\r\n        if (block.timestamp >= _auction.expiry) revert AuctionExpired();\r\n        if (_desiredOut > _auction.amountLeft) revert InsufficientSellTokensAvailable();\r\n\r\n        // Calculate the sale price (in buyToken per sellToken), factoring in the time decay\r\n        uint256 _preSlippagePrice = getPreSlippagePrice({ _auction: _auction });\r\n\r\n        // Math in a more readable format:\r\n        // uint256 _numerator = (_desiredOut * _preSlippagePrice) / PRECISION;\r\n        // uint256 _denominator = (PRECISION -\r\n        //     ((_desiredOut * uint256(_auction.priceSlippage)) / PRECISION));\r\n        // _amountIn = (_numerator * PRECISION) / _denominator;\r\n\r\n        // Set return params _amountIn\r\n        _amountIn =\r\n            (_desiredOut * _preSlippagePrice) /\r\n            (PRECISION - (_desiredOut * uint256(_auction.priceSlippage)) / PRECISION);\r\n\r\n        // Set return params, calculate the slippage component of the price (in buyToken per sellToken)\r\n        _slippagePerSellToken = (_auction.priceSlippage * _amountIn) / PRECISION;\r\n        _postSlippagePrice = _auction.lastPrice + (2 * _slippagePerSellToken); // Price impact is twice the slippage\r\n    }\r\n\r\n    /// @notice The ```getAmountIn``` function calculates how many buyTokens you would need in order to obtain a given number of sellTokens\r\n    /// @dev Maintains compatability with some router implementations\r\n    /// @param amountOut The amount out of sell tokens\r\n    /// @param tokenOut The sell token address\r\n    /// @return _amountIn The amount of buyToken needed\r\n    function getAmountIn(uint256 amountOut, address tokenOut) external view returns (uint256 _amountIn) {\r\n        if (tokenOut != SELL_TOKEN) revert InvalidTokenOut();\r\n        (_amountIn, , ) = getAmountIn({ _desiredOut: amountOut });\r\n    }\r\n\r\n    /// @notice The ```getAmountOut``` function calculates the amount of sellTokens out for a given buyToken amount\r\n    /// @dev Used to maintain compatibility\r\n    /// @param _amountIn Amount of buyToken in\r\n    /// @param tokenIn The token being swapped in\r\n    /// @return _amountOut Amount of sellTokens out\r\n    function getAmountOut(uint256 _amountIn, address tokenIn) external view returns (uint256 _amountOut) {\r\n        if (tokenIn == BUY_TOKEN) revert InvalidTokenIn();\r\n        (_amountOut, , ) = getAmountOut({ _amountIn: _amountIn, _revertOnOverAmountLeft: false });\r\n    }\r\n\r\n    /// @notice Gets a struct instead of a tuple for auctions()\r\n    /// @param _auctionNumber Auction ID\r\n    /// @return _auctionStruct The struct of the auction\r\n    function getAuctionStruct(uint256 _auctionNumber) external view returns (Auction memory) {\r\n        return auctions[_auctionNumber];\r\n    }\r\n\r\n    /// @notice The ```auctionsLength``` function returns the length of the auctions array\r\n    /// @return _length The length of the auctions array\r\n    function auctionsLength() external view returns (uint256 _length) {\r\n        _length = auctions.length;\r\n    }\r\n\r\n    /// @notice The ```getLatestAuction``` function returns the latest auction\r\n    /// @dev Returns an empty struct if there are no auctions\r\n    /// @return _latestAuction The latest auction struct\r\n    function getLatestAuction() external view returns (Auction memory _latestAuction) {\r\n        uint256 _length = auctions.length;\r\n        if (_length == 0) return _latestAuction;\r\n        _latestAuction = auctions[auctions.length - 1];\r\n    }\r\n\r\n    // ==============================================================================\r\n    // Owner-only Functions\r\n    // ==============================================================================\r\n\r\n    /// @notice Parameters for creating an auction\r\n    /// @dev Sender must have an allowance on sellToken\r\n    /// @param sellAmount Amount of sellToken being sold\r\n    /// @param startPrice Starting price of 1e18 sellToken, in buyToken\r\n    /// @param minPrice Minimum price of 1e18 sellToken, in buyToken\r\n    /// @param priceDecay Price decay, (wei per second), using PRECISION\r\n    /// @param priceSlippage Slippage fraction. E.g (0.01 * PRECISION) = 1%\r\n    /// @param expiry UNIX timestamp when the auction ends\r\n    struct StartAuctionParams {\r\n        uint128 sellAmount;\r\n        uint128 startPrice;\r\n        uint128 minPrice;\r\n        uint64 priceDecay;\r\n        uint64 priceSlippage;\r\n        uint32 expiry;\r\n    }\r\n\r\n    /// @notice The ```startAuction``` function starts a new auction\r\n    /// @param _params StartAuctionParams\r\n    /// @dev Requires an erc20 allowance on the sellToken prior to calling\r\n    function startAuction(StartAuctionParams memory _params) external nonReentrant returns (uint256 _auctionNumber) {\r\n        _requireSenderIsTimelock();\r\n\r\n        // Check expiry is not in the past\r\n        if (_params.expiry < block.timestamp) revert Expired();\r\n\r\n        // Pre-compute the auction number\r\n        _auctionNumber = auctions.length;\r\n\r\n        // Ensure that the previous auction, if any, has ended\r\n        if (_auctionNumber > 0) {\r\n            Auction memory _lastAuction = auctions[_auctionNumber - 1];\r\n            if (_lastAuction.ended == false) revert LastAuctionStillActive();\r\n        }\r\n\r\n        // Create the auction\r\n        auctions.push(\r\n            Auction({\r\n                priceDecay: _params.priceDecay,\r\n                priceSlippage: _params.priceSlippage,\r\n                amountLeft: _params.sellAmount,\r\n                buyTokenProceeds: 0,\r\n                lastPrice: _params.startPrice,\r\n                lastBuyTime: uint32(block.timestamp),\r\n                minPrice: _params.minPrice,\r\n                expiry: _params.expiry,\r\n                ended: false\r\n            })\r\n        );\r\n\r\n        emit AuctionStarted({\r\n            auctionNumber: _auctionNumber,\r\n            sellAmount: _params.sellAmount,\r\n            startPrice: _params.startPrice,\r\n            minPrice: _params.minPrice,\r\n            priceDecay: _params.priceDecay,\r\n            priceSlippage: _params.priceSlippage,\r\n            expiry: _params.expiry\r\n        });\r\n\r\n        // Take the sellTokens from the sender\r\n        IERC20(SELL_TOKEN).safeTransferFrom({ from: msg.sender, to: address(this), value: _params.sellAmount });\r\n    }\r\n\r\n    /// @notice The ```stopAuction``` function ends the auction\r\n    /// @dev Only callable by the auction owner\r\n    /// @return _buyProceeds Amount of buyToken obtained from the auction\r\n    /// @return _unsoldRemaining Amount of unsold sellTokens left over\r\n    function stopAuction() public nonReentrant returns (uint256 _buyProceeds, uint256 _unsoldRemaining) {\r\n        _requireSenderIsTimelock();\r\n\r\n        // Get the auction info and perform checks\r\n        uint256 _auctionNumber = auctions.length - 1;\r\n        Auction memory _auction = auctions[_auctionNumber];\r\n        if (_auction.ended) revert AuctionAlreadyExited();\r\n\r\n        // Set Return params\r\n        _buyProceeds = IERC20(BUY_TOKEN).balanceOf({ account: address(this) });\r\n        _unsoldRemaining = IERC20(SELL_TOKEN).balanceOf({ account: address(this) });\r\n\r\n        _auction.ended = true;\r\n        _auction.buyTokenProceeds = uint128(_buyProceeds);\r\n        _auction.amountLeft = uint128(_unsoldRemaining);\r\n\r\n        // Effects: Update state with final balances;\r\n        auctions[_auctionNumber] = _auction;\r\n\r\n        // Return buyToken proceeds from the auction to the sender\r\n        IERC20(BUY_TOKEN).safeTransfer({ to: msg.sender, value: _buyProceeds });\r\n\r\n        // Return any unsold sellToken to the sender\r\n        IERC20(SELL_TOKEN).safeTransfer({ to: msg.sender, value: _unsoldRemaining });\r\n\r\n        emit AuctionExited({ auctionNumber: _auctionNumber });\r\n    }\r\n\r\n    // ==============================================================================\r\n    // Public Functions\r\n    // ==============================================================================\r\n\r\n    /// @notice The ```swap``` function swaps buyTokens for sellTokens\r\n    /// @dev This low-level function should be called from a contract which performs important safety checks\r\n    /// @dev Token0 is always the BUY_TOKEN, token1 is always the SELL_TOKEN\r\n    /// @param _buyTokenOut The amount of buyTokens to receive\r\n    /// @param _sellTokenOut The amount of sellTokens to receive\r\n    /// @param _to The recipient of the output tokens\r\n    /// @param _callbackData Callback data\r\n    function swap(\r\n        uint256 _buyTokenOut,\r\n        uint256 _sellTokenOut,\r\n        address _to,\r\n        bytes memory _callbackData\r\n    ) public nonReentrant {\r\n        if (_buyTokenOut != 0) revert ExcessiveBuyTokenOut({ minOut: 0, actualOut: _buyTokenOut });\r\n        if (_sellTokenOut == 0) revert InsufficientOutputAmount({ minOut: 1, actualOut: 0 });\r\n\r\n        // Get the auction info (similar to get reserves in univ2)\r\n        uint256 _auctionNumber = auctions.length - 1;\r\n        Auction memory _auction = auctions[_auctionNumber];\r\n\r\n        // Transfer tokens\r\n        IERC20(SELL_TOKEN).safeTransfer({ to: _to, value: _sellTokenOut });\r\n\r\n        // Callback if necessary for flash swap\r\n        if (_callbackData.length > 0) {\r\n            IUniswapV2Callee(_to).uniswapV2Call({\r\n                sender: msg.sender,\r\n                amount0: _buyTokenOut,\r\n                amount1: _sellTokenOut,\r\n                data: _callbackData\r\n            });\r\n        }\r\n\r\n        // Calculate the amount of buyTokens in\r\n        uint256 _buyTokenBalance = IERC20(BUY_TOKEN).balanceOf({ account: address(this) });\r\n        uint256 _buyTokenIn = _buyTokenBalance - _auction.buyTokenProceeds;\r\n\r\n        // Adheres to uniswap v2 interface, called here to prevent stack-too-deep error\r\n        emit Swap({\r\n            sender: msg.sender,\r\n            amount0In: _buyTokenIn,\r\n            amount1In: 0,\r\n            amount0Out: 0,\r\n            amount1Out: _sellTokenOut,\r\n            to: _to\r\n        });\r\n\r\n        // Call the internal function with _desiredOut\r\n        (uint256 _minAmountIn, uint256 _slippagePerSellToken, uint256 _postSlippagePrice) = _getAmountIn({\r\n            _auction: _auction,\r\n            _desiredOut: _sellTokenOut\r\n        });\r\n\r\n        // Check invariant\r\n        if (_buyTokenIn < _minAmountIn) revert InsufficientInputAmount({ minIn: _minAmountIn, actualIn: _buyTokenIn });\r\n\r\n        // Mutate _auction, which has the previous state\r\n        _auction.amountLeft -= uint128(_sellTokenOut);\r\n        _auction.buyTokenProceeds = uint128(_buyTokenBalance);\r\n        _auction.lastPrice = uint128(_postSlippagePrice);\r\n        _auction.lastBuyTime = uint32(block.timestamp);\r\n\r\n        // Write back to state, similar to _update in univ2\r\n        auctions[_auctionNumber] = _auction;\r\n\r\n        // Emit Buy event\r\n        emit Buy({\r\n            auctionNumber: _auctionNumber,\r\n            buyToken: BUY_TOKEN,\r\n            sellToken: SELL_TOKEN,\r\n            amountIn: uint128(_buyTokenIn),\r\n            amountOut: uint128(_sellTokenOut),\r\n            lastPrice: _auction.lastPrice,\r\n            slippagePerSellToken: uint128(_slippagePerSellToken)\r\n        });\r\n    }\r\n\r\n    /// @notice The ```swapExactTokensForTokens``` function swaps an exact amount of input tokens for as many output tokens as possible\r\n    /// @dev Must have an allowance on the BUY_TOKEN prior to invocation\r\n    /// @dev Maintains uniV2 interface\r\n    /// @param _amountIn The amount of buy tokens to send.\r\n    /// @param _amountOutMin The minimum amount of sell tokens that must be received for the transaction not to revert\r\n    /// @param _to Recipient of the output tokens\r\n    /// @param _deadline Unix timestamp after which the transaction will revert\r\n    /// @return _amounts The input token amount and output token amount\r\n    function swapExactTokensForTokens(\r\n        uint256 _amountIn,\r\n        uint256 _amountOutMin,\r\n        address[] memory, // _path\r\n        address _to,\r\n        uint256 _deadline\r\n    ) external returns (uint256[] memory _amounts) {\r\n        // Ensure deadline has not passed\r\n        if (block.timestamp > _deadline) revert Expired();\r\n\r\n        // Calculate the amount of sellTokens out & check invariant\r\n        (uint256 _amountOut, , ) = getAmountOut({ _amountIn: _amountIn, _revertOnOverAmountLeft: true });\r\n        if (_amountOut < _amountOutMin) {\r\n            revert InsufficientOutputAmount({ minOut: _amountOutMin, actualOut: _amountOut });\r\n        }\r\n        // Interactions: Transfer buyTokens to the contract\r\n        IERC20(BUY_TOKEN).safeTransferFrom({ from: msg.sender, to: address(this), value: _amountIn });\r\n\r\n        // Call the internal swap function\r\n        swap({ _buyTokenOut: 0, _sellTokenOut: _amountOut, _to: _to, _callbackData: new bytes(0) });\r\n\r\n        // Set return values\r\n        _amounts = new uint256[](2);\r\n        _amounts[0] = _amountIn;\r\n        _amounts[1] = _amountOut;\r\n    }\r\n\r\n    /// @notice The ```swapTokensForExactTokens``` function receives an exact amount of output tokens for as few input tokens as possible\r\n    /// @dev Must have an allowance on the BUY_TOKEN prior to invocation\r\n    /// @dev Maintains uniV2 interface\r\n    /// @param _amountOut The amount of sell tokens to receive\r\n    /// @param _amountInMax The maximum amount of buy tokens that can be required before the transaction reverts\r\n    /// @param _to Recipient of the output tokens\r\n    /// @param _deadline Unix timestamp after which the transaction will revert\r\n    /// @return _amounts The input token amount and output token amount\r\n    function swapTokensForExactTokens(\r\n        uint256 _amountOut,\r\n        uint256 _amountInMax,\r\n        address[] calldata, // _path\r\n        address _to,\r\n        uint256 _deadline\r\n    ) external returns (uint256[] memory _amounts) {\r\n        // Ensure deadline has not passed\r\n        if (block.timestamp > _deadline) revert Expired();\r\n\r\n        // Calculate the amount of buyTokens in & check invariant\r\n        (uint256 _amountIn, , ) = getAmountIn({ _desiredOut: _amountOut });\r\n        if (_amountIn > _amountInMax) revert ExcessiveInputAmount({ minIn: _amountInMax, actualIn: _amountIn });\r\n\r\n        // Interactions: Transfer buyTokens to the contract\r\n        IERC20(BUY_TOKEN).safeTransferFrom({ from: msg.sender, to: address(this), value: _amountIn });\r\n\r\n        swap({ _buyTokenOut: 0, _sellTokenOut: _amountOut, _to: _to, _callbackData: new bytes(0) });\r\n\r\n        // Set return variable\r\n        _amounts = new uint256[](2);\r\n        _amounts[0] = _amountIn;\r\n        _amounts[1] = _amountOut;\r\n    }\r\n\r\n    // ==============================================================================\r\n    // Errors\r\n    // ==============================================================================\r\n\r\n    /// @notice The ```AuctionAlreadyExited``` error is emitted when a user attempts to exit an auction that has already ended\r\n    error AuctionAlreadyExited();\r\n\r\n    /// @notice The ```AuctionExpired``` error is emitted when a user attempts to interact with an auction that has expired\r\n    error AuctionExpired();\r\n\r\n    /// @notice The ```LastAuctionStillActive``` error is emitted when a user attempts to start a new auction before the previous one has ended\r\n    error LastAuctionStillActive();\r\n\r\n    /// @notice The ```InsufficientOutputAmount``` error is emitted when a user attempts to swap a given amount of buy tokens that would result in an insufficient amount of sell tokens\r\n    /// @param minOut Minimum out that the user expects\r\n    /// @param actualOut Actual amount out that would occur\r\n    error InsufficientOutputAmount(uint256 minOut, uint256 actualOut);\r\n\r\n    /// @notice The ```InsufficientInputAmount``` error is emitted when a user attempts to swap an insufficient amount of buy tokens\r\n    /// @param minIn Minimum in that the contract requires\r\n    /// @param actualIn Actual amount in that has been deposited\r\n    error InsufficientInputAmount(uint256 minIn, uint256 actualIn);\r\n\r\n    /// @notice The ```ExcessiveInputAmount``` error is emitted when a user attempts to swap an excessive amount of buy tokens for aa given amount of sell tokens\r\n    /// @param minIn Minimum in that the user expects\r\n    /// @param actualIn Actual amount in that would occur\r\n    error ExcessiveInputAmount(uint256 minIn, uint256 actualIn);\r\n\r\n    /// @notice The ```InsufficientSellTokensAvailable``` error is emitted when a user attempts to buy more sell tokens than are left in the auction\r\n    error InsufficientSellTokensAvailable();\r\n\r\n    /// @notice The ```CannotPurchaseBuyToken``` error is emitted when a user attempts to buy the buyToken using the swap() function\r\n    error ExcessiveBuyTokenOut(uint256 minOut, uint256 actualOut);\r\n\r\n    /// @notice The ```Expired``` error is emitted when a user attempts to make a swap after the transaction deadline has passed\r\n    error Expired();\r\n\r\n    /// @notice The ```InvalidTokenIn``` error is emitted when a user attempts to use an invalid buy token\r\n    error InvalidTokenIn();\r\n\r\n    /// @notice The ```InvalidTokenOut``` error is emitted when a user attempts to use an invalid sell token\r\n    error InvalidTokenOut();\r\n\r\n    // ==============================================================================\r\n    // Events\r\n    // ==============================================================================\r\n\r\n    /// @dev The ```AuctionExited``` event is emitted when an auction is ended\r\n    /// @param auctionNumber The ID of the auction\r\n    event AuctionExited(uint256 auctionNumber);\r\n\r\n    /// @dev The ```Buy``` event is emitted when a swap occurs and has more information than the ```Swap``` event\r\n    /// @param auctionNumber The ID of the auction, and index in the auctions array\r\n    /// @param buyToken The token used to buy the sellToken being auctioned off\r\n    /// @param sellToken The token being auctioned off\r\n    /// @param amountIn Amount of buyToken in\r\n    /// @param amountOut Amount of sellToken out\r\n    /// @param lastPrice The execution price of the buy\r\n    /// @param slippagePerSellToken How many buyTokens (per sellToken) were added as slippage\r\n    event Buy(\r\n        uint256 auctionNumber,\r\n        address buyToken,\r\n        address sellToken,\r\n        uint128 amountIn,\r\n        uint128 amountOut,\r\n        uint128 lastPrice,\r\n        uint128 slippagePerSellToken\r\n    );\r\n\r\n    /// @notice The ```Swap``` event is emitted when a swap occurs\r\n    /// @param sender The address of the sender\r\n    /// @param amount0In The amount of BUY_TOKEN in\r\n    /// @param amount1In The amount of SELL_TOKEN in\r\n    /// @param amount0Out The amount of BUY_TOKEN out\r\n    /// @param amount1Out The amount of SELL_TOKEN out\r\n    /// @param to The address of the recipient\r\n    event Swap(\r\n        address indexed sender,\r\n        uint256 amount0In,\r\n        uint256 amount1In,\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address indexed to\r\n    );\r\n\r\n    /// @dev The ```AuctionStarted``` event is emitted when an auction is started\r\n    /// @param auctionNumber The ID of the auction\r\n    /// @param sellAmount Amount of sellToken being sold\r\n    /// @param startPrice Starting price of the sellToken, in buyToken\r\n    /// @param minPrice Minimum price of the sellToken, in buyToken\r\n    /// @param priceDecay Price decay, per day, using PRECISION\r\n    /// @param priceSlippage Slippage fraction. E.g (0.01 * PRECISION) = 1%\r\n    /// @param expiry Expiration time of the auction\r\n    event AuctionStarted(\r\n        uint256 auctionNumber,\r\n        uint128 sellAmount,\r\n        uint128 startPrice,\r\n        uint128 minPrice,\r\n        uint128 priceDecay,\r\n        uint128 priceSlippage,\r\n        uint32 expiry\r\n    );\r\n}\r\n\r\ncontract SlippageAuctionFactory {\r\n    /// @notice The auctions created by this factory\r\n    address[] public auctions;\r\n\r\n    /// @notice mapping of hashed constructor arguments to whether or not the auction has been created\r\n    mapping(bytes32 _constructorHash => bool _isCreated) public constructorHashes;\r\n\r\n    /// @notice mapping of auction addresses to whether or not the auction has been created\r\n    mapping(address => bool) public isAuction;\r\n\r\n    /// @notice The ```createAuction``` function is used to create a new auction\r\n    /// @dev Tokens must be 18 decimals\r\n    /// @param _buyToken The token that will be used to purchase tokens in the auction\r\n    /// @param _sellToken The token that will be sold in the auction\r\n    /// @return _auctionAddress The address of the new auction\r\n    function createAuction(address _buyToken, address _sellToken) external returns (address _auctionAddress) {\r\n        if (IERC20Metadata(_buyToken).decimals() != 18) {\r\n            revert BuyTokenMustBe18Decimals();\r\n        }\r\n        if (IERC20Metadata(_sellToken).decimals() != 18) {\r\n            revert SellTokenMustBe18Decimals();\r\n        }\r\n\r\n        // Ensure a single sender account can only create a single auction contract given two input tokens\r\n        bytes32 _hash = keccak256(abi.encodePacked(_buyToken, _sellToken, msg.sender));\r\n        if (constructorHashes[_hash]) {\r\n            revert AuctionAlreadyExists();\r\n        }\r\n        constructorHashes[_hash] = true;\r\n\r\n        // Deploy the auction\r\n        SlippageAuction _auction = new SlippageAuction({\r\n            _timelockAddress: msg.sender,\r\n            _buyToken: _buyToken,\r\n            _sellToken: _sellToken\r\n        });\r\n\r\n        // Set return variable\r\n        _auctionAddress = address(_auction);\r\n\r\n        // Add auction address to mapping\r\n        isAuction[_auctionAddress] = true;\r\n\r\n        // Add to auctions array\r\n        auctions.push(_auctionAddress);\r\n\r\n        emit AuctionCreated({ auction: _auctionAddress, buyToken: _buyToken, sellToken: _sellToken });\r\n    }\r\n\r\n    /// @notice The ```getAuctions``` function returns a list of all auctions deployed\r\n    /// @return memory address[] The list of auctions\r\n    function getAuctions() external view returns (address[] memory) {\r\n        return auctions;\r\n    }\r\n\r\n    /// @notice The ```auctionsLength``` function returns the number of auctions deployed\r\n    /// @return The length of the auctions array\r\n    function auctionsLength() external view returns (uint256) {\r\n        return auctions.length;\r\n    }\r\n\r\n    /// @notice The ```AuctionCreated``` event is emitted when a new auction is created\r\n    /// @param auction The address of the new auction\r\n    /// @param buyToken The token that will be used to purchase tokens in the auction\r\n    /// @param sellToken The token that will be sold in the auction\r\n    event AuctionCreated(address indexed auction, address indexed buyToken, address indexed sellToken);\r\n\r\n    /// @notice The ```AuctionAlreadyExists``` error is thrown when an auction with the same sender and tokens has already been created\r\n    error AuctionAlreadyExists();\r\n\r\n    /// @notice The ```SellTokenMustBe18Decimals``` error is thrown when the sell token is not 18 decimals\r\n    error SellTokenMustBe18Decimals();\r\n\r\n    /// @notice The ```BuyTokenMustBe18Decimals``` error is thrown when the buy token is not 18 decimals\r\n    error BuyTokenMustBe18Decimals();\r\n}", "ABI": "[{\"inputs\":[],\"name\":\"AuctionAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BuyTokenMustBe18Decimals\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SellTokenMustBe18Decimals\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"auction\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellToken\",\"type\":\"address\"}],\"name\":\"AuctionCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"auctions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_constructorHash\",\"type\":\"bytes32\"}],\"name\":\"constructorHashes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_isCreated\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_buyToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sellToken\",\"type\":\"address\"}],\"name\":\"createAuction\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_auctionAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAuctions\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAuction\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "SlippageAuctionFactory", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "100000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv2", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://59a213893bfa4754de265c7a12edeccbbdd0379a024f94e75deb98d4ace51cd2"}