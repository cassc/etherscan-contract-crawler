{"SourceCode": "// Sources flattened with hardhat v2.9.6 https://hardhat.org\r\n\r\n// File @openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol@v4.6.0\r\n\r\n// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev External interface of AccessControl declared to support ERC165 detection.\r\n */\r\ninterface IAccessControlUpgradeable {\r\n    /**\r\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\r\n     *\r\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\r\n     * {RoleAdminChanged} not being emitted signaling this.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is granted `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call, an admin role\r\n     * bearer except when using {AccessControl-_setupRole}.\r\n     */\r\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is revoked `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call:\r\n     *   - if using `revokeRole`, it is the admin role bearer\r\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\r\n     */\r\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Returns `true` if `account` has been granted `role`.\r\n     */\r\n    function hasRole(bytes32 role, address account) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\r\n     * {revokeRole}.\r\n     *\r\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\r\n     */\r\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function grantRole(bytes32 role, address account) external;\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function revokeRole(bytes32 role, address account) external;\r\n\r\n    /**\r\n     * @dev Revokes `role` from the calling account.\r\n     *\r\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\r\n     * purpose is to provide a mechanism for accounts to lose their privileges\r\n     * if they are compromised (such as when a trusted device is misplaced).\r\n     *\r\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be `account`.\r\n     */\r\n    function renounceRole(bytes32 role, address account) external;\r\n}\r\n\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary AddressUpgradeable {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n *\r\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\r\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\r\n * case an upgrade adds a module that needs to be initialized.\r\n *\r\n * For example:\r\n *\r\n * [.hljs-theme-light.nopadding]\r\n * ```\r\n * contract MyToken is ERC20Upgradeable {\r\n *     function initialize() initializer public {\r\n *         __ERC20_init(\"MyToken\", \"MTK\");\r\n *     }\r\n * }\r\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\r\n *     function initializeV2() reinitializer(2) public {\r\n *         __ERC20Permit_init(\"MyToken\");\r\n *     }\r\n * }\r\n * ```\r\n *\r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\r\n *\r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n *\r\n * [CAUTION]\r\n * ====\r\n * Avoid leaving a contract uninitialized.\r\n *\r\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\r\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\r\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\r\n *\r\n * [.hljs-theme-light.nopadding]\r\n * ```\r\n * /// @custom:oz-upgrades-unsafe-allow constructor\r\n * constructor() {\r\n *     _disableInitializers();\r\n * }\r\n * ```\r\n * ====\r\n */\r\nabstract contract Initializable {\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     * @custom:oz-retyped-from bool\r\n     */\r\n    uint8 private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Triggered when the contract has been initialized or reinitialized.\r\n     */\r\n    event Initialized(uint8 version);\r\n\r\n    /**\r\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\r\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\r\n     */\r\n    modifier initializer() {\r\n        bool isTopLevelCall = _setInitializedVersion(1);\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n        }\r\n        _;\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n            emit Initialized(1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\r\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\r\n     * used to initialize parent contracts.\r\n     *\r\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\r\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\r\n     * initialization.\r\n     *\r\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\r\n     * a contract, executing them in the right order is up to the developer or operator.\r\n     */\r\n    modifier reinitializer(uint8 version) {\r\n        bool isTopLevelCall = _setInitializedVersion(version);\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n        }\r\n        _;\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n            emit Initialized(version);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\r\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\r\n     */\r\n    modifier onlyInitializing() {\r\n        require(_initializing, \"Initializable: contract is not initializing\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\r\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\r\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\r\n     * through proxies.\r\n     */\r\n    function _disableInitializers() internal virtual {\r\n        _setInitializedVersion(type(uint8).max);\r\n    }\r\n\r\n    function _setInitializedVersion(uint8 version) private returns (bool) {\r\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\r\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\r\n        // of initializers, because in other contexts the contract may have been reentered.\r\n        if (_initializing) {\r\n            require(\r\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\r\n                \"Initializable: contract is already initialized\"\r\n            );\r\n            return false;\r\n        } else {\r\n            require(_initialized < version, \"Initializable: contract is already initialized\");\r\n            _initialized = version;\r\n            return true;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract ContextUpgradeable is Initializable {\r\n    function __Context_init() internal onlyInitializing {\r\n    }\r\n\r\n    function __Context_init_unchained() internal onlyInitializing {\r\n    }\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n\r\n    /**\r\n     * @dev This empty reserved space is put in place to allow future versions to add new\r\n     * variables without shifting down storage in the inheritance chain.\r\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n     */\r\n    uint256[50] private __gap;\r\n}\r\n\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary StringsUpgradeable {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165Upgradeable {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\r\n    function __ERC165_init() internal onlyInitializing {\r\n    }\r\n\r\n    function __ERC165_init_unchained() internal onlyInitializing {\r\n    }\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\r\n    }\r\n\r\n    /**\r\n     * @dev This empty reserved space is put in place to allow future versions to add new\r\n     * variables without shifting down storage in the inheritance chain.\r\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n     */\r\n    uint256[50] private __gap;\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module that allows children to implement role-based access\r\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\r\n * members except through off-chain means by accessing the contract event logs. Some\r\n * applications may benefit from on-chain enumerability, for those cases see\r\n * {AccessControlEnumerable}.\r\n *\r\n * Roles are referred to by their `bytes32` identifier. These should be exposed\r\n * in the external API and be unique. The best way to achieve this is by\r\n * using `public constant` hash digests:\r\n *\r\n * ```\r\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\r\n * ```\r\n *\r\n * Roles can be used to represent a set of permissions. To restrict access to a\r\n * function call, use {hasRole}:\r\n *\r\n * ```\r\n * function foo() public {\r\n *     require(hasRole(MY_ROLE, msg.sender));\r\n *     ...\r\n * }\r\n * ```\r\n *\r\n * Roles can be granted and revoked dynamically via the {grantRole} and\r\n * {revokeRole} functions. Each role has an associated admin role, and only\r\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\r\n *\r\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\r\n * that only accounts with this role will be able to grant or revoke other\r\n * roles. More complex role relationships can be created by using\r\n * {_setRoleAdmin}.\r\n *\r\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\r\n * grant and revoke this role. Extra precautions should be taken to secure\r\n * accounts that have been granted it.\r\n */\r\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\r\n    function __AccessControl_init() internal onlyInitializing {\r\n    }\r\n\r\n    function __AccessControl_init_unchained() internal onlyInitializing {\r\n    }\r\n    struct RoleData {\r\n        mapping(address => bool) members;\r\n        bytes32 adminRole;\r\n    }\r\n\r\n    mapping(bytes32 => RoleData) private _roles;\r\n\r\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\r\n\r\n    /**\r\n     * @dev Modifier that checks that an account has a specific role. Reverts\r\n     * with a standardized message including the required role.\r\n     *\r\n     * The format of the revert reason is given by the following regular expression:\r\n     *\r\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\r\n     *\r\n     * _Available since v4.1._\r\n     */\r\n    modifier onlyRole(bytes32 role) {\r\n        _checkRole(role);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns `true` if `account` has been granted `role`.\r\n     */\r\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\r\n        return _roles[role].members[account];\r\n    }\r\n\r\n    /**\r\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\r\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\r\n     *\r\n     * Format of the revert message is described in {_checkRole}.\r\n     *\r\n     * _Available since v4.6._\r\n     */\r\n    function _checkRole(bytes32 role) internal view virtual {\r\n        _checkRole(role, _msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Revert with a standard message if `account` is missing `role`.\r\n     *\r\n     * The format of the revert reason is given by the following regular expression:\r\n     *\r\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\r\n     */\r\n    function _checkRole(bytes32 role, address account) internal view virtual {\r\n        if (!hasRole(role, account)) {\r\n            revert(\r\n                string(\r\n                    abi.encodePacked(\r\n                        \"AccessControl: account \",\r\n                        StringsUpgradeable.toHexString(uint160(account), 20),\r\n                        \" is missing role \",\r\n                        StringsUpgradeable.toHexString(uint256(role), 32)\r\n                    )\r\n                )\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\r\n     * {revokeRole}.\r\n     *\r\n     * To change a role's admin, use {_setRoleAdmin}.\r\n     */\r\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\r\n        return _roles[role].adminRole;\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from the calling account.\r\n     *\r\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\r\n     * purpose is to provide a mechanism for accounts to lose their privileges\r\n     * if they are compromised (such as when a trusted device is misplaced).\r\n     *\r\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be `account`.\r\n     */\r\n    function renounceRole(bytes32 role, address account) public virtual override {\r\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\r\n\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event. Note that unlike {grantRole}, this function doesn't perform any\r\n     * checks on the calling account.\r\n     *\r\n     * [WARNING]\r\n     * ====\r\n     * This function should only be called from the constructor when setting\r\n     * up the initial roles for the system.\r\n     *\r\n     * Using this function in any other way is effectively circumventing the admin\r\n     * system imposed by {AccessControl}.\r\n     * ====\r\n     *\r\n     * NOTE: This function is deprecated in favor of {_grantRole}.\r\n     */\r\n    function _setupRole(bytes32 role, address account) internal virtual {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `adminRole` as ``role``'s admin role.\r\n     *\r\n     * Emits a {RoleAdminChanged} event.\r\n     */\r\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\r\n        bytes32 previousAdminRole = getRoleAdmin(role);\r\n        _roles[role].adminRole = adminRole;\r\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * Internal function without access restriction.\r\n     */\r\n    function _grantRole(bytes32 role, address account) internal virtual {\r\n        if (!hasRole(role, account)) {\r\n            _roles[role].members[account] = true;\r\n            emit RoleGranted(role, account, _msgSender());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * Internal function without access restriction.\r\n     */\r\n    function _revokeRole(bytes32 role, address account) internal virtual {\r\n        if (hasRole(role, account)) {\r\n            _roles[role].members[account] = false;\r\n            emit RoleRevoked(role, account, _msgSender());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev This empty reserved space is put in place to allow future versions to add new\r\n     * variables without shifting down storage in the inheritance chain.\r\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n     */\r\n    uint256[49] private __gap;\r\n}\r\n\r\n\r\n/**\r\n * @title Counters\r\n * @author Matt Condon (@shrugs)\r\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\r\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\r\n *\r\n * Include with `using Counters for Counters.Counter;`\r\n */\r\nlibrary Counters {\r\n    struct Counter {\r\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\r\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\r\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\r\n        uint256 _value; // default: 0\r\n    }\r\n\r\n    function current(Counter storage counter) internal view returns (uint256) {\r\n        return counter._value;\r\n    }\r\n\r\n    function increment(Counter storage counter) internal {\r\n        unchecked {\r\n            counter._value += 1;\r\n        }\r\n    }\r\n\r\n    function decrement(Counter storage counter) internal {\r\n        uint256 value = counter._value;\r\n        require(value > 0, \"Counter: decrement overflow\");\r\n        unchecked {\r\n            counter._value = value - 1;\r\n        }\r\n    }\r\n\r\n    function reset(Counter storage counter) internal {\r\n        counter._value = 0;\r\n    }\r\n}\r\n\r\n\r\nlibrary Signature {\r\n\r\n    function splitSignature(bytes memory sig) private pure returns (uint8 v, bytes32 r, bytes32 s) {\r\n        require(sig.length == 65);\r\n\r\n        assembly {\r\n            // first 32 bytes, after the length prefix.\r\n            r := mload(add(sig, 32))\r\n            // second 32 bytes.\r\n            s := mload(add(sig, 64))\r\n            // final byte (first byte of the next 32 bytes).\r\n            v := byte(0, mload(add(sig, 96)))\r\n        }\r\n\r\n        return (v, r, s);\r\n    }\r\n\r\n    function recoverSigner(bytes32 message, bytes memory sig) internal pure returns (address) {\r\n        (uint8 v, bytes32 r, bytes32 s) = splitSignature(sig);\r\n\r\n        return ecrecover(message, v, r, s);\r\n    }\r\n\r\n    function prefixed(bytes32 msgHash) internal pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", msgHash));\r\n    }\r\n\r\n    /**\r\n     * @dev Make sure all signatures and signers are valid\r\n     */\r\n    function verifySignature(bytes32 msgHash, bytes memory signature, address signer) internal pure {\r\n        bytes32 message = prefixed(msgHash);\r\n        require(recoverSigner(message, signature) == signer, \"INVALID_SIGNATURE\");\r\n    }\r\n\r\n}\r\n\r\n\r\nenum ProjectState {\r\n  DRAFT,\r\n  READY_FOR_REVIEW,\r\n  APPROVED,\r\n  REJECTED,\r\n  READY_FOR_DEPLOY,\r\n  DEPLOYED,\r\n  FINISHED,\r\n  ERROR\r\n}\r\n\r\nenum VaultType {\r\n  MINT, // New mint NFTs\r\n  MINTED // Use minted NFTs from external contracts\r\n}\r\n\r\nenum SaleType {\r\n  PRESALE,\r\n  PUBLICSALE\r\n}\r\n\r\nstruct DistributorInfo {\r\n  address addr;\r\n  uint256 feeRate;\r\n}\r\n\r\nstruct ProjectRequest {\r\n  uint256 backendId;\r\n  string name;\r\n  string symbol;\r\n  string baseTokenURI;\r\n  uint256 contractType; // 721, 1155, 4907\r\n  uint256 vaultType; // 0: MINT; 1: MINTED\r\n  bool canReveal;\r\n  bool transferUnsoldDisabled;\r\n  address paymentToken; // ERC20 or address(0) in case of native token\r\n  bool affiliateEnabled;\r\n  address[] initialReferrals;\r\n  uint256 adminFeeRate; // 2%\r\n  uint256 affiliateFeeRate;\r\n  DistributorInfo[] distributors;\r\n}\r\n\r\nstruct Project {\r\n  uint256 id;\r\n  uint256 backendId;\r\n  address owner;\r\n  uint256 contractType; // 721, 1155, 4907\r\n  ProjectState state;\r\n  VaultType vaultType;\r\n  address contractAddress;\r\n  uint256 adminFeeRate;\r\n  uint256 affiliateFeeRate;\r\n  bool canReveal;\r\n  bool isRevealed;\r\n  bool affiliateEnabled;\r\n  bool transferUnsoldDisabled;\r\n  address paymentToken; // ERC20 or address(0) in case of native token\r\n  uint256 finishAt;\r\n}\r\n\r\nstruct SaleInfo {\r\n  uint256 startTime;\r\n  uint256 endTime;\r\n  bool whitelistRequired;\r\n  uint256 price;\r\n  uint256 amount;\r\n  uint256 maxPurchase;\r\n}\r\n\r\nstruct Distributor {\r\n  address addr;\r\n  uint256 feeRate;\r\n  uint256 feeAmount;\r\n}\r\n\r\nstruct FundInfo {\r\n  uint256 admin;\r\n  uint256 projectOwner;\r\n  Distributor[] distributors;\r\n}\r\n\r\nstruct SaleData {\r\n  uint256 backendId;\r\n  uint256 vaultType;\r\n  uint256 price;\r\n  bool affiliateEnabled;\r\n  uint256 affiliateFeeRate;\r\n  address contractAddress;\r\n  address paymentToken;\r\n}\r\n\r\n\r\ninterface IT2WebProjectManager {\r\n  event ProjectCreated(uint256 backendId, uint256 projectId, address indexed contractAddress, address indexed owner);\r\n\r\n  event ProjectRevealed(uint256 projectId, bool isRevealed, string baseTokenURI);\r\n\r\n  event ProjectClosed(uint256 projectId);\r\n\r\n  // event ItemSold(\r\n  //   address indexed buyer,\r\n  //   uint256 projectId,\r\n  //   uint256 amount,\r\n  //   uint256 totalAmount,\r\n  //   uint256 saleType,\r\n  //   uint256[] tokenIds,\r\n  //   string referralCode,\r\n  //   address referralAddress\r\n  // );\r\n\r\n  event ItemSold(\r\n    address indexed buyer,\r\n    uint256 projectId,\r\n    uint256 amount,\r\n    uint256 saleType,\r\n    uint256[] tokenIds,\r\n    string referralCode,\r\n    address referralAddress\r\n  );\r\n\r\n  event FeeClaimed(uint256 projectId, address user, uint256 amount);\r\n\r\n  event AffiliateRewardClaimed(address user, uint256 nativeReward, uint256 erc20Reward, address paymentToken);\r\n\r\n  /*\r\n    struct DistributorInfo {\r\n      address addr;\r\n      uint256 feeRate;\r\n    }\r\n\r\n    struct ProjectRequest {\r\n      uint256 backendId;\r\n      string name;\r\n      string symbol;\r\n      string baseTokenURI;\r\n      uint256 contractType; // 721, 1155, 4907\r\n      uint256 vaultType; // 0: MINT; 1: MINTED\r\n      bool canReveal;\r\n      bool transferUnsoldDisabled;\r\n      address paymentToken; // ERC20 or address(0) in case of native token\r\n      bool affiliateEnabled;\r\n      address[] initialReferrals;\r\n      uint256 adminFeeRate; // 2%\r\n      uint256 affiliateFeeRate;\r\n      DistributorInfo[] distributors;\r\n    }\r\n\r\n    struct SaleInfo {\r\n      uint256 startTime;\r\n      uint256 endTime;\r\n      bool whitelistRequired;\r\n      uint256 price;\r\n      uint256 amount;\r\n      uint256 maxPurchase;\r\n    }\r\n\r\n    saleData[0] = presale data (SaleInfo)\r\n    saleData[1] = publicsale data (SaleInfo)\r\n  */\r\n  function createProject(\r\n    ProjectRequest calldata projectInfo_,\r\n    SaleInfo[] calldata saleData_,\r\n    bytes calldata signature_\r\n  ) external returns (uint256);\r\n\r\n  function buy(\r\n    uint256 projectId_,\r\n    uint256 saleType_,\r\n    SaleData memory saleData_,\r\n    uint256 amount_,\r\n    string memory referralCode_,\r\n    bytes calldata signature_\r\n  ) external payable;\r\n\r\n  function closeProject(uint256 projectId) external;\r\n\r\n  function claimItems(uint256 projectId, uint256 amount) external;\r\n\r\n  function claimFee(uint256 projectId, uint256[] memory saleInfo, bytes calldata signature) external payable returns (uint256);\r\n\r\n  // Return affiliate reward in native token and erc20 token\r\n  function getAffiliateReward(address user) external view returns (uint256, uint256);\r\n\r\n  function claimAffiliateReward() external payable returns (uint256, uint256);\r\n\r\n  function getPendingFee(uint256 projectId, address user, uint256[] memory saleInfo) external view returns (uint256);\r\n\r\n  function getMaxSupply(uint256 projectId) external view returns (uint256);\r\n\r\n  function getTotalSupply(uint256 projectId) external view returns (uint256);\r\n}\r\n\r\n\r\ninterface IT2WebProjectMaster {\r\n  function getProject(uint256 projectId_) external view returns (Project memory);\r\n\r\n  function getSaleInfo(uint256 projectId_, uint256 saleType_) external view returns (SaleInfo memory);\r\n\r\n  function getPrice(uint256 projectId_, uint256 saleType_) external view returns (uint256);\r\n\r\n  function createProject(\r\n    address projectOwner_,\r\n    ProjectRequest calldata projectInfo_,\r\n    SaleInfo[] calldata saleData_\r\n  ) external returns (uint256, uint256, address);\r\n\r\n  function setBaseTokenURI(uint256 projectId, string memory baseTokenURI) external;\r\n\r\n  function revealProject(uint256 projectId_, string memory baseTokenURI_) external;\r\n\r\n  function distributeNFTs(\r\n    uint256 backendId_,\r\n    uint256 vaultType_,\r\n    address contractAddress_,\r\n    address to_,\r\n    uint256 amount_\r\n  ) external returns (uint256[] memory);\r\n\r\n  function getCurrentProjectId() external view returns (uint256);\r\n\r\n  function getMaxSupply(uint256 projectId_) external view returns (uint256);\r\n\r\n  function getTotalSupply(uint256 projectId_) external view returns (uint256);\r\n\r\n  function closeProject(uint256 projectId_) external;\r\n\r\n  function claimItems(uint256 projectId_, uint256 amount_, address to_) external;\r\n\r\n  function checkAffiliate(uint256 projectId_, string memory referralCode_) external returns (address);\r\n\r\n  function addReferral(uint256 projectId_, address user_) external;\r\n}\r\n\r\n\r\ninterface IERC1155 {\r\n  function burn(\r\n    address account,\r\n    uint256 id,\r\n    uint256 amount\r\n  ) external;\r\n\r\n  /**\r\n   * @notice Execute a burn with a signed authorization\r\n   * @param account       Owner's address (Authorizer)\r\n   * @param id            Token ID to be burned\r\n   * @param amount        Amount to be burned\r\n   * @param validAfter    The time after which this is valid (unix time)\r\n   * @param validBefore   The time before which this is valid (unix time)\r\n   * @param nonce         Unique nonce\r\n   * @param v             v of the signature\r\n   * @param r             r of the signature\r\n   * @param s             s of the signature\r\n   */\r\n  function burnWithAuthorization(\r\n    address account,\r\n    uint256 id,\r\n    uint256 amount,\r\n    uint256 validAfter,\r\n    uint256 validBefore,\r\n    bytes32 nonce,\r\n    uint8 v,\r\n    bytes32 r,\r\n    bytes32 s\r\n  ) external;\r\n}\r\n\r\n\r\ninterface IERC20 {\r\n  function balanceOf(address account) external view returns (uint256);\r\n\r\n  function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n  function transferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 amount\r\n  ) external returns (bool);\r\n\r\n  /**\r\n   * @notice Execute a transfer with a signed authorization\r\n   * @param from          Payer's address (Authorizer)\r\n   * @param to            Payee's address\r\n   * @param value         Amount to be transferred\r\n   * @param validAfter    The time after which this is valid (unix time)\r\n   * @param validBefore   The time before which this is valid (unix time)\r\n   * @param nonce         Unique nonce\r\n   * @param v             v of the signature\r\n   * @param r             r of the signature\r\n   * @param s             s of the signature\r\n   */\r\n  function transferWithAuthorization(\r\n    address from,\r\n    address to,\r\n    uint256 value,\r\n    uint256 validAfter,\r\n    uint256 validBefore,\r\n    bytes32 nonce,\r\n    uint8 v,\r\n    bytes32 r,\r\n    bytes32 s\r\n  ) external;\r\n}\r\n\r\n\r\ncontract T2WebProjectManager is IT2WebProjectManager, AccessControlUpgradeable {\r\n  using Signature for bytes32;\r\n\r\n  bytes32 public constant OPERATOR_ROLE = keccak256(\"OPERATOR_ROLE\");\r\n\r\n  uint256 public constant A_HUNDRED_PERCENT = 10_000; // 100%\r\n\r\n  IT2WebProjectMaster private _projectMaster;\r\n\r\n  address private _signer;\r\n  address private _adminFeeReceiver; // admin fee receiver\r\n\r\n  // Deprecated: Do not use\r\n  // project id => sale type => user => user purchased amount\r\n  mapping(uint256 => mapping(uint256 => mapping(address => uint256))) private _userPurchased;\r\n\r\n  // Deprecated: Do not use\r\n  // project id => sale type => purchased amount\r\n  mapping(uint256 => mapping(uint256 => uint256)) private _purchased;\r\n\r\n  // Deprecated: Do not use\r\n  // project id => fund info\r\n  mapping(uint256 => FundInfo) private _fundData;\r\n\r\n  // project id => amount\r\n  mapping(uint256 => uint256) private _affiliateFee;\r\n\r\n  // project id => user => amount\r\n  mapping(uint256 => mapping(address => uint256)) private _userClaimedFee;\r\n\r\n  // ==========================================================================\r\n  // Added for optimize gas\r\n  // ==========================================================================\r\n\r\n  // Deprecated: Do not use\r\n  // user => project id => referralCount\r\n  // mapping(address => mapping(uint256 => uint256)) private _userReferralCounts;\r\n\r\n  // project id => project owner\r\n  mapping(uint256 => address) private _projectOwners;\r\n\r\n  // user => project id => affiliate reward\r\n  mapping(address => mapping(uint256 => uint256)) private _userAffiliateReward;\r\n\r\n  // user => native claimed affiliate reward\r\n  mapping(address => uint256) private _userClaimedAffiliateReward;\r\n\r\n  // user => erc20 token claimed affiliate reward\r\n  mapping(address => uint256) private _erc20UserClaimedAffiliateReward;\r\n\r\n  modifier onlyAdmin() {\r\n    require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \"ProjectManager: caller is not admin\");\r\n    _;\r\n  }\r\n\r\n  modifier onlyOperator() {\r\n    require(hasRole(OPERATOR_ROLE, _msgSender()), \"ProjectManager: caller is not operator\");\r\n    _;\r\n  }\r\n\r\n  function initialize(address projectMaster_, address signer_, address adminFeeReceiver_) external initializer {\r\n    __AccessControl_init();\r\n\r\n    _projectMaster = IT2WebProjectMaster(projectMaster_);\r\n    _signer = signer_;\r\n    _adminFeeReceiver = adminFeeReceiver_;\r\n\r\n    address msgSender = _msgSender();\r\n    _setupRole(DEFAULT_ADMIN_ROLE, msgSender);\r\n    _setupRole(OPERATOR_ROLE, msgSender);\r\n  }\r\n\r\n  function setProjectMaster(address projectMaster_) external onlyAdmin {\r\n    _projectMaster = IT2WebProjectMaster(projectMaster_);\r\n  }\r\n\r\n  function setSigner(address signer_) external onlyAdmin {\r\n    _signer = signer_;\r\n  }\r\n\r\n  function setAdminFeeReceiver(address adminFeeReceiver_) external onlyAdmin {\r\n    _adminFeeReceiver = adminFeeReceiver_;\r\n  }\r\n\r\n  function getProjectMaster() external view returns (address) {\r\n    return address(_projectMaster);\r\n  }\r\n\r\n  receive() external payable {}\r\n\r\n  function createProject(\r\n    ProjectRequest calldata projectInfo_,\r\n    SaleInfo[] calldata saleData_,\r\n    bytes calldata signature_\r\n  ) public returns (uint256 projectId) {\r\n    address owner = _msgSender();\r\n    bytes32 messageHash = keccak256(\r\n      abi.encodePacked(\r\n        projectInfo_.backendId,\r\n        owner,\r\n        // presale\r\n        saleData_[0].price,\r\n        saleData_[0].amount,\r\n        saleData_[0].maxPurchase,\r\n        // public sale\r\n        saleData_[1].price,\r\n        saleData_[1].amount,\r\n        saleData_[1].maxPurchase\r\n      )\r\n    );\r\n    messageHash.verifySignature(signature_, _signer);\r\n\r\n    projectId = _createProject(projectInfo_, saleData_, owner);\r\n  }\r\n\r\n  function _createProject(\r\n    ProjectRequest calldata projectInfo_,\r\n    SaleInfo[] calldata saleData_,\r\n    address projectOwner_\r\n  ) internal returns (uint256) {\r\n    (uint256 _projectId, uint256 _backendId, address _contractAddress) = _projectMaster.createProject(\r\n      projectOwner_,\r\n      projectInfo_,\r\n      saleData_\r\n    );\r\n\r\n    uint256 distributorCnt = projectInfo_.distributors.length;\r\n    if (distributorCnt > 0) {\r\n      FundInfo storage fundInfo = _fundData[_projectId];\r\n      for (uint256 i = 0; i < distributorCnt; i++) {\r\n        fundInfo.distributors.push(\r\n          Distributor({ addr: projectInfo_.distributors[i].addr, feeRate: projectInfo_.distributors[i].feeRate, feeAmount: 0 })\r\n        );\r\n      }\r\n    }\r\n\r\n    _projectOwners[_projectId] = projectOwner_;\r\n\r\n    emit ProjectCreated(_backendId, _projectId, _contractAddress, projectOwner_);\r\n\r\n    return _projectId;\r\n  }\r\n\r\n  function revealProject(uint256 projectId_, string memory baseTokenURI_) external {\r\n    require(_projectOwners[projectId_] == msg.sender, \"ProjectManager: caller is not project owner\");\r\n\r\n    _projectMaster.revealProject(projectId_, baseTokenURI_);\r\n\r\n    emit ProjectRevealed(projectId_, true, baseTokenURI_);\r\n  }\r\n\r\n  /*\r\n    funds array\r\n      funds[0]: admin\r\n      funds[1]: affiliate\r\n      funds[2]: project owner\r\n      funds[3]: distributor 1\r\n      funds[4]: distributor 2\r\n      ...\r\n  */\r\n  // function _calcFunds(Project memory project_, uint256 totalPrice_, bool includeAffiliate_) internal returns (uint256[] memory) {\r\n  //   FundInfo storage data = _fundData[project_.id];\r\n\r\n  //   uint256 distributorCnt = data.distributors.length;\r\n  //   uint256[] memory funds = new uint256[](3 + distributorCnt);\r\n  //   funds[0] = (totalPrice_ * project_.adminFeeRate) / A_HUNDRED_PERCENT;\r\n  //   funds[1] = 0;\r\n  //   if (includeAffiliate_) {\r\n  //     funds[1] = (totalPrice_ * project_.affiliateFeeRate) / A_HUNDRED_PERCENT;\r\n  //   }\r\n\r\n  //   funds[2] = totalPrice_ - funds[0] - funds[1];\r\n\r\n  //   for (uint256 i = 0; i < distributorCnt; i++) {\r\n  //     uint256 fee = (totalPrice_ * data.distributors[i].feeRate) / A_HUNDRED_PERCENT;\r\n  //     funds[3 + i] = fee;\r\n  //     funds[2] = funds[2] - fee;\r\n\r\n  //     data.distributors[i].feeAmount += fee;\r\n  //   }\r\n\r\n  //   if (funds[0] > 0) data.admin += funds[0];\r\n  //   if (funds[2] > 0) data.projectOwner += funds[2];\r\n\r\n  //   return funds;\r\n  // }\r\n\r\n  // function _getPresaleRemaining(uint256 projectId_) internal view returns (uint256) {\r\n  //   uint256 soldAmount = _purchased[projectId_][uint256(SaleType.PRESALE)];\r\n  //   SaleInfo memory saleInfo = _projectMaster.getSaleInfo(projectId_, uint256(SaleType.PRESALE));\r\n  //   return saleInfo.amount > soldAmount ? saleInfo.amount - soldAmount : 0;\r\n  // }\r\n\r\n  // function _verifyBuy(address buyer_, uint256 backendId_, uint256 projectId_, uint256 amount_, bytes calldata signature_) internal view {\r\n  //   require(project_.state == ProjectState.DEPLOYED, \"INVALID_STATE\");\r\n  //   require(saleInfo_.amount > 0, \"BUY_NOT_ALLOWED\");\r\n  //   require(block.timestamp >= startTime_ && block.timestamp <= endTime_, \"BUY_NOT_ALLOWED\");\r\n\r\n  //   Check max purchase if required\r\n  //   if (saleInfo_.maxPurchase > 0) {\r\n  //     uint256 purchasedAmount = _userPurchased[project_.id][saleType_][buyer_];\r\n  //     require(purchasedAmount + amount_ <= saleInfo_.maxPurchase, \"AMOUNT_OVER_LIMITATION\");\r\n  //   }\r\n\r\n  //   uint256 soldAmount = _purchased[project_.id][saleType_];\r\n  //   uint256 maxSupply = saleInfo_.amount;\r\n  //   if (project_.transferUnsoldDisabled && SaleType(saleType_) == SaleType.PUBLICSALE) {\r\n  //     maxSupply += _getPresaleRemaining(project_.id);\r\n  //   }\r\n  //   require(soldAmount + amount_ <= maxSupply, \"AMOUNT_INVALID\");\r\n\r\n  //   Check whitelist if required\r\n  //   if (saleInfo_.whitelistRequired) {\r\n  //     bytes32 messageHash = keccak256(abi.encodePacked(project_.backendId, project_.id, buyer_, amount_));\r\n  //     messageHash.verifySignature(signature_, _signer);\r\n  //   }\r\n\r\n  //   // always check signature\r\n  //   bytes32 messageHash = keccak256(abi.encodePacked(backendId_, projectId_, buyer_, amount_));\r\n  //   messageHash.verifySignature(signature_, _signer);\r\n  // }\r\n\r\n  function _buy(\r\n    address buyer_,\r\n    uint256 projectId_,\r\n    uint256 saleType_,\r\n    SaleData calldata saleData_,\r\n    uint256 amount_,\r\n    string memory referralCode_\r\n  ) internal {\r\n    address referral = address(0);\r\n    if (saleData_.affiliateEnabled) {\r\n      referral = _projectMaster.checkAffiliate(projectId_, referralCode_);\r\n    }\r\n\r\n    uint256 totalPrice = saleData_.price * amount_;\r\n    if (saleData_.price > 0) {\r\n      if (address(saleData_.paymentToken) != address(0)) {\r\n        IERC20(saleData_.paymentToken).transferFrom(buyer_, address(this), totalPrice);\r\n      } else {\r\n        require(msg.value == totalPrice, \"ProjectManager: amount does not match with price\");\r\n      }\r\n    }\r\n\r\n    if (referral != address(0)) {\r\n      _projectMaster.addReferral(projectId_, buyer_);\r\n\r\n      uint256 affiliateFee = (totalPrice * saleData_.affiliateFeeRate) / A_HUNDRED_PERCENT;\r\n      if (affiliateFee > 0) {\r\n        _affiliateFee[projectId_] += affiliateFee;\r\n        _userAffiliateReward[referral][projectId_] += affiliateFee;\r\n      }\r\n    }\r\n\r\n    // Distribute NFTs\r\n    uint256[] memory tokenIds = _projectMaster.distributeNFTs(\r\n      saleData_.backendId,\r\n      saleData_.vaultType,\r\n      saleData_.contractAddress,\r\n      buyer_,\r\n      amount_\r\n    );\r\n\r\n    emit ItemSold(buyer_, projectId_, amount_, saleType_, tokenIds, referralCode_, referral);\r\n  }\r\n\r\n  function buy(\r\n    uint256 projectId_,\r\n    uint256 saleType_,\r\n    SaleData calldata saleData_,\r\n    uint256 amount_,\r\n    string memory referralCode_,\r\n    bytes calldata signature_\r\n  ) external payable {\r\n    // Verify signature\r\n    address buyer = _msgSender();\r\n\r\n    bytes32 data = keccak256(\r\n      abi.encodePacked(\r\n        saleData_.contractAddress,\r\n        saleData_.price,\r\n        saleData_.vaultType,\r\n        // saleData_.paymentToken,\r\n        saleData_.affiliateEnabled,\r\n        saleData_.affiliateFeeRate\r\n      )\r\n    );\r\n    bytes32 messageHash = keccak256(abi.encodePacked(saleData_.backendId, projectId_, buyer, amount_, data));\r\n    messageHash.verifySignature(signature_, _signer);\r\n\r\n    _buy(buyer, projectId_, saleType_, saleData_, amount_, referralCode_);\r\n  }\r\n\r\n  function getMaxSupply(uint256 projectId) external view returns (uint256) {\r\n    return _projectMaster.getMaxSupply(projectId);\r\n  }\r\n\r\n  function getTotalSupply(uint256 projectId) external view returns (uint256) {\r\n    return _projectMaster.getTotalSupply(projectId);\r\n  }\r\n\r\n  function _estimateFee(uint256 projectId, address user, uint256[] memory saleInfo) internal view returns (uint256) {\r\n    FundInfo memory funds = _fundData[projectId];\r\n    Project memory project = _projectMaster.getProject(projectId);\r\n    uint256 presalePrice = _projectMaster.getPrice(projectId, 0);\r\n    uint256 publicsalePrice = _projectMaster.getPrice(projectId, 1);\r\n\r\n    uint256 userClaimed = _userClaimedFee[projectId][user];\r\n\r\n    uint256 total = saleInfo[0] * presalePrice + saleInfo[1] * publicsalePrice;\r\n    uint256 adminFee = (total * project.adminFeeRate) / A_HUNDRED_PERCENT;\r\n    uint256 ownerFee = total - adminFee - _affiliateFee[projectId];\r\n\r\n    uint256 distributorFee = 0;\r\n    for (uint256 i = 0; i < funds.distributors.length; i++) {\r\n      uint256 fee = (total * funds.distributors[i].feeRate) / A_HUNDRED_PERCENT;\r\n      if (user == funds.distributors[i].addr) {\r\n        distributorFee = fee;\r\n      }\r\n      ownerFee -= fee;\r\n    }\r\n\r\n    if (user == _adminFeeReceiver) {\r\n      return adminFee - userClaimed;\r\n    }\r\n    if (user == _projectOwners[projectId]) {\r\n      return ownerFee - userClaimed;\r\n    }\r\n    if (distributorFee > 0) {\r\n      return distributorFee - userClaimed;\r\n    }\r\n\r\n    return 0;\r\n  }\r\n\r\n  function getPendingFee(uint256 projectId, address user, uint256[] memory saleInfo) external view returns (uint256) {\r\n    return _estimateFee(projectId, user, saleInfo);\r\n  }\r\n\r\n  function claimFee(uint256 projectId, uint256[] memory saleInfo, bytes calldata signature) external payable returns (uint256) {\r\n    address user = _msgSender();\r\n    Project memory project = _projectMaster.getProject(projectId);\r\n\r\n    bytes32 messageHash = keccak256(\r\n      abi.encodePacked(\r\n        projectId,\r\n        saleInfo[0], // presale sold amount\r\n        saleInfo[1] // publicsale sold amount\r\n      )\r\n    );\r\n    messageHash.verifySignature(signature, _signer);\r\n\r\n    uint256 amount = _estimateFee(projectId, user, saleInfo);\r\n\r\n    if (amount > 0) {\r\n      if (project.paymentToken != address(0)) {\r\n        IERC20 paymentToken = IERC20(project.paymentToken);\r\n\r\n        if (amount > paymentToken.balanceOf(address(this))) {\r\n          amount = paymentToken.balanceOf(address(this));\r\n        }\r\n        _userClaimedFee[projectId][user] += amount;\r\n\r\n        paymentToken.transfer(user, amount);\r\n      } else {\r\n        if (amount > address(this).balance) {\r\n          amount = address(this).balance;\r\n        }\r\n        _userClaimedFee[projectId][user] += amount;\r\n\r\n        payable(user).transfer(amount);\r\n      }\r\n\r\n      emit FeeClaimed(projectId, user, amount);\r\n    }\r\n\r\n    return amount;\r\n  }\r\n\r\n  function claimItems(uint256 projectId, uint256 amount) external {\r\n    require(_projectOwners[projectId] == _msgSender(), \"ProjectManager: caller is not project owner\");\r\n    _projectMaster.claimItems(projectId, amount, _msgSender());\r\n  }\r\n\r\n  function closeProject(uint256 projectId) external {\r\n    require(_projectOwners[projectId] == _msgSender(), \"ProjectManager: caller is not project owner or operator\");\r\n\r\n    _projectMaster.closeProject(projectId);\r\n\r\n    emit ProjectClosed(projectId);\r\n  }\r\n\r\n  function _estimateAffiliateReward(address user) internal view returns (uint256, uint256, address) {\r\n    uint256 native;\r\n    uint256 erc20;\r\n    address paymentToken;\r\n\r\n    uint256 lastProjectId = _projectMaster.getCurrentProjectId();\r\n    for (uint256 pid = 1; pid <= lastProjectId; pid++) {\r\n      Project memory project = _projectMaster.getProject(pid);\r\n      if (project.affiliateEnabled) {\r\n        if (address(project.paymentToken) != address(0)) {\r\n          paymentToken = address(project.paymentToken);\r\n          erc20 += _userAffiliateReward[user][pid];\r\n        } else {\r\n          native += _userAffiliateReward[user][pid];\r\n        }\r\n      }\r\n    }\r\n    native = native - _userClaimedAffiliateReward[user];\r\n    erc20 = erc20 - _erc20UserClaimedAffiliateReward[user];\r\n    return (native, erc20, paymentToken);\r\n  }\r\n\r\n  function getAffiliateReward(address user) external view returns (uint256, uint256) {\r\n    (uint256 nativeReward, uint256 erc20Reward, address paymentToken) = _estimateAffiliateReward(user);\r\n    return (nativeReward, erc20Reward);\r\n  }\r\n\r\n  function claimAffiliateReward() external payable returns (uint256, uint256) {\r\n    address user = _msgSender();\r\n\r\n    (uint256 nativeReward, uint256 erc20Reward, address paymentToken) = _estimateAffiliateReward(user);\r\n\r\n    if (nativeReward > 0) {\r\n      if (nativeReward > address(this).balance) {\r\n        nativeReward = address(this).balance;\r\n      }\r\n      _userClaimedAffiliateReward[user] += nativeReward;\r\n      payable(user).transfer(nativeReward);\r\n    }\r\n\r\n    if (erc20Reward > 0) {\r\n      if (erc20Reward > IERC20(paymentToken).balanceOf(address(this))) {\r\n        erc20Reward = IERC20(paymentToken).balanceOf(address(this));\r\n      }\r\n      _erc20UserClaimedAffiliateReward[user] += erc20Reward;\r\n      IERC20(paymentToken).transfer(user, erc20Reward);\r\n    }\r\n\r\n    emit AffiliateRewardClaimed(user, nativeReward, erc20Reward, paymentToken);\r\n\r\n    return (nativeReward, erc20Reward);\r\n  }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nativeReward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"erc20Reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"}],\"name\":\"AffiliateRewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FeeClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"saleType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"referralCode\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"referralAddress\",\"type\":\"address\"}],\"name\":\"ItemSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"}],\"name\":\"ProjectClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"backendId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ProjectCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isRevealed\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"baseTokenURI\",\"type\":\"string\"}],\"name\":\"ProjectRevealed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"A_HUNDRED_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OPERATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"projectId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saleType_\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"backendId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vaultType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"affiliateEnabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"affiliateFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"}],\"internalType\":\"struct SaleData\",\"name\":\"saleData_\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"referralCode_\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"signature_\",\"type\":\"bytes\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAffiliateReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"saleInfo\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"claimFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimItems\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"}],\"name\":\"closeProject\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"backendId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"baseTokenURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"contractType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vaultType\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"canReveal\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"transferUnsoldDisabled\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"affiliateEnabled\",\"type\":\"bool\"},{\"internalType\":\"address[]\",\"name\":\"initialReferrals\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"adminFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"affiliateFeeRate\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeRate\",\"type\":\"uint256\"}],\"internalType\":\"struct DistributorInfo[]\",\"name\":\"distributors\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ProjectRequest\",\"name\":\"projectInfo_\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"whitelistRequired\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPurchase\",\"type\":\"uint256\"}],\"internalType\":\"struct SaleInfo[]\",\"name\":\"saleData_\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes\",\"name\":\"signature_\",\"type\":\"bytes\"}],\"name\":\"createProject\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getAffiliateReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"}],\"name\":\"getMaxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"saleInfo\",\"type\":\"uint256[]\"}],\"name\":\"getPendingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProjectMaster\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"}],\"name\":\"getTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"projectMaster_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"signer_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"adminFeeReceiver_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"projectId_\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"baseTokenURI_\",\"type\":\"string\"}],\"name\":\"revealProject\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adminFeeReceiver_\",\"type\":\"address\"}],\"name\":\"setAdminFeeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"projectMaster_\",\"type\":\"address\"}],\"name\":\"setProjectMaster\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer_\",\"type\":\"address\"}],\"name\":\"setSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "T2WebProjectManager", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://10b7a37343fce2732e91d63ba363c1a3aedf0ec44fa19252771b3b388bc895af"}