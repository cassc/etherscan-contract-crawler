{"SourceCode": "pragma solidity ^0.7.0;\r\n// SPDX-License-Identifier: MIT\r\n\r\n// This contract handles RPTR bridging between RaptorChain and Polygon (might be forked to other chains in the future)\r\n// Thus, it allows trading RPTR on polygon-based DEXes (e.g. SushiSwap/QuickSwap)\r\n\r\n// calls follow the following path\r\n\r\n// WRAP\r\n// - RaptorChain-side custody contract (holds RPTR) calls RaptorChain-side datafeed (address(0xfeed))\r\n// - RaptorChain-side datafeed throws a cross-chain message\r\n// - a RaptorChain masternode includes it into a beacon block\r\n// - beacon block gets forwarded to Polygon-side handler\r\n// - handler unpacks call and calls token contract\r\n// - token contract mints token\r\n\r\n// UNWRAP\r\n// - user calls `unwrap` method\r\n// - contract burns polygon-side token\r\n// - contract writes data to a slot on polygon-side datafeed (slots can be accessed by raptorchain-side contracts)\r\n// - raptorchain-side custody contract calls raptorchain-side datafeed, which returns slot data\r\n// - raptorchain-side custody contract marks slot as processed (to avoid getting it processed twice)\r\n// - raptorchain-side custody sends RPTR to recipient\r\n\r\ninterface ERC20Interface {\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address tokenOwner) external view returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) external view returns (uint remaining);\r\n    function transfer(address to, uint tokens) external returns (bool success);\r\n    function approve(address spender, uint tokens) external returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) external returns (bool success);\r\n}\r\n\r\ninterface CrossChainFallback {\r\n\tfunction crossChainCall(address from, bytes memory data) external;\r\n}\r\n\r\ninterface DataFeedInterface {\r\n\tfunction write(bytes32 variableKey, bytes memory slotData) external returns (bytes32);\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract Owned {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\tevent OwnershipRenounced();\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n\t\r\n\tfunction _chainId() internal pure returns (uint256) {\r\n\t\tuint256 id;\r\n\t\tassembly {\r\n\t\t\tid := chainid()\r\n\t\t}\r\n\t\treturn id;\r\n\t}\r\n\t\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n\t\r\n\tfunction renounceOwnership() public onlyOwner {\r\n\t\towner = address(0);\r\n\t\tnewOwner = address(0);\r\n\t\temit OwnershipRenounced();\r\n\t}\r\n}\r\n\r\ncontract BridgedRaptor is Owned {\r\n\tusing SafeMath for uint256;\r\n\r\n\taddress public operator;\t// operator on other side of the bridge\r\n\taddress public bridge;\t\t// bridge\r\n\t\r\n\tuint256 systemNonce;\r\n\tuint256 public totalSupply;\t// starts at 0, minted on bridging\r\n\tuint8 public decimals = 18;\r\n\tstring public name = \"Bridged RPTR\";\r\n\tstring public symbol = \"RPTR\";\r\n\r\n\tstruct Account {\r\n\t\tuint256 balance;\r\n\t\tmapping(address => uint256) allowances;\r\n\t\tbytes32[] unwraps;\t// unwrap history sorted by storage slot\r\n\t}\r\n\t\r\n\tmapping(address => Account) public accounts;\r\n\t\r\n\tevent Transfer(address indexed from, address indexed to, uint256 tokens);\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 tokens);\r\n\t\r\n\tevent Wrap(address indexed to, uint256 tokens);\r\n\tevent UnWrap(address indexed from, address indexed to, bytes32 indexed slotKey, uint256 tokens);\r\n\r\n\tevent OperatorChanged(address indexed newOperator);\r\n\tevent BridgeChanged(address indexed newBridge);\r\n\r\n\tmodifier onlyOperator(address from) {\r\n\t\trequire((msg.sender == bridge) && (from == operator), \"ONLY_OPERATOR_CAN_DO_THAT\");\r\n\t\t_;\r\n\t}\r\n\t\r\n\tfunction setOperator(address _operator) public onlyOwner {\r\n\t\toperator = _operator;\r\n\t\temit OperatorChanged(_operator);\r\n\t}\r\n\t\r\n\tfunction setBridge(address _bridge) public onlyOwner {\r\n\t\tbridge = _bridge;\r\n\t\temit BridgeChanged(_bridge);\r\n\t}\r\n\t\r\n\t// system private functions\r\n\tfunction _mint(address to, uint256 tokens) private {\r\n\t\taccounts[to].balance = accounts[to].balance.add(tokens);\r\n\t\ttotalSupply = totalSupply.add(tokens);\r\n\t\temit Transfer(address(0), to, tokens);\r\n\t}\r\n\t\r\n\tfunction _burn(address from, uint256 tokens) private {\r\n\t\taccounts[from].balance = accounts[from].balance.sub(tokens, \"UNSUFFICIENT_BALANCE\");\r\n\t\ttotalSupply = totalSupply.sub(tokens);\r\n\t\temit Transfer(from, address(0), tokens);\r\n\t}\r\n\t\r\n\tfunction _unwrap(address from, address to, uint256 tokens) private {\r\n\t\t_burn(from, tokens);\r\n\t\tbytes32 key = keccak256(abi.encodePacked(to, systemNonce));\r\n\t\tbytes memory data = abi.encode(to, tokens);\r\n\t\tbytes32 slotKey = DataFeedInterface(bridge).write(key, data);\r\n\t\taccounts[to].unwraps.push(slotKey);\r\n\t\temit UnWrap(from, to, slotKey, tokens);\r\n\t\tsystemNonce += 1;\r\n\t}\r\n\t\r\n\tfunction _transfer(address from, address to, uint256 tokens) private {\r\n\t\tif (to == address(0)) {\r\n\t\t\t_unwrap(from, from, tokens);\r\n\t\t} else {\r\n\t\t\taccounts[from].balance = accounts[from].balance.sub(tokens, \"UNSUFFICIENT_BALANCE\");\r\n\t\t\taccounts[to].balance = accounts[to].balance.add(tokens);\r\n\t\t\temit Transfer(from, to, tokens);\r\n\t\t}\r\n\t}\r\n\t\r\n\t// cross-chain call handler\t\r\n\tfunction crossChainCall(address from, bytes memory data) public onlyOperator(from) {\r\n\t\t(address to, uint256 tokens) = abi.decode(data, (address, uint256)); // encoder on raptorchain-side ; data = abi.encode(to, coins)\r\n\t\t_mint(to, tokens);\r\n\t\temit Wrap(to, tokens);\r\n\t}\r\n\t\r\n\t// user-side view functions\r\n\tfunction allowance(address tokenOwner, address spender) public view returns (uint256) {\r\n\t\treturn accounts[tokenOwner].allowances[spender];\r\n\t}\r\n\t\r\n\tfunction balanceOf(address tokenOwner) public view returns (uint256) {\r\n\t\treturn accounts[tokenOwner].balance;\r\n\t}\r\n\t\r\n\tfunction unwrapHistoryOf(address tokenOwner) public view returns (bytes32[] memory) {\r\n\t\treturn accounts[tokenOwner].unwraps;\r\n\t}\r\n\t\r\n\t\r\n\t// user-side functions\r\n\tfunction approve(address spender, uint256 tokens) public returns (bool) {\r\n\t\tAccount storage ownerAcct = accounts[msg.sender];\r\n\t\townerAcct.allowances[spender] = ownerAcct.allowances[spender].add(tokens);\r\n\t\temit Approval(msg.sender, spender, tokens);\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\tfunction transfer(address to, uint256 tokens) public returns (bool) {\r\n\t\t_transfer(msg.sender, to, tokens);\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\tfunction transferFrom(address from, address to, uint256 tokens) public returns (bool) {\r\n\t\tAccount storage ownerAcct = accounts[from];\r\n\t\townerAcct.allowances[msg.sender] = ownerAcct.allowances[msg.sender].sub(tokens, \"UNSUFFICIENT_ALLOWANCE\");\r\n\t\t_transfer(from, to, tokens);\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\tfunction unwrap(uint256 tokens) public {\r\n\t\t_unwrap(msg.sender, msg.sender, tokens);\r\n\t}\r\n\t\r\n\tfunction unwrap(address to, uint256 tokens) public {\r\n\t\t_unwrap(msg.sender, to, tokens);\r\n\t}\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newBridge\",\"type\":\"address\"}],\"name\":\"BridgeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"OperatorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"slotKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"UnWrap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Wrap\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"crossChainCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bridge\",\"type\":\"address\"}],\"name\":\"setBridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"unwrap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"unwrap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"unwrapHistoryOf\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "BridgedRaptor", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b751b9f71c52c0e63c6cec3c4160ee459e2ab7157ed3d92d38b4aba0c58517a9"}