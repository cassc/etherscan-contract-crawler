{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/ERC20Capped.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that adds a cap to the supply of tokens.\\n */\\nabstract contract ERC20Capped is ERC20 {\\n    uint256 private immutable _cap;\\n\\n    /**\\n     * @dev Sets the value of the `cap`. This value is immutable, it can only be\\n     * set once during construction.\\n     */\\n    constructor(uint256 cap_) {\\n        require(cap_ > 0, \\\"ERC20Capped: cap is 0\\\");\\n        _cap = cap_;\\n    }\\n\\n    /**\\n     * @dev Returns the cap on the token's total supply.\\n     */\\n    function cap() public view virtual returns (uint256) {\\n        return _cap;\\n    }\\n\\n    /**\\n     * @dev See {ERC20-_mint}.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual override {\\n        require(ERC20.totalSupply() + amount <= cap(), \\\"ERC20Capped: cap exceeded\\\");\\n        super._mint(account, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/DividendToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\n\\r\\n\\r\\nimport \\\"./utils/SafeMathUint.sol\\\";\\r\\nimport \\\"./utils/SafeMathInt.sol\\\";\\r\\nimport \\\"../contracts/interface/IFundsDistributionToken.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title FundsDistributionToken\\r\\n * @dev A mintable token abastract contract that with dividens distributed proprotinally to its holders based on their token holding every time\\r\\n * this contract is funded with new dividend fund.\\r\\n * token holders can withdraw their holdings which includes dividend.\\r\\n */\\r\\nabstract contract DividendToken is\\r\\n    IFundsDistributionToken,\\r\\n    ERC20,\\r\\n    ERC20Capped\\r\\n{\\r\\n    using SafeMath for uint256;\\r\\n    using SafeMathUint for uint256;\\r\\n    using SafeMathInt for int256;\\r\\n\\r\\n    // State variables. \\r\\n    bool private init;\\r\\n    address public icoContract;\\r\\n\\r\\n\\r\\n    address public adminDiv;\\r\\n    uint256 internal constant pointsMultiplier = 2**128;\\r\\n    uint256 internal pointsPerShare;\\r\\n\\r\\n    mapping(address => int256) internal pointsCorrection;\\r\\n    mapping(address => uint256) internal withdrawnFunds;\\r\\n\\r\\n    // mapping(uint256 => uint256) internal treasuryBalCorrection;\\r\\n    // mapping(address => bool) internal excluded;\\r\\n    // address[] public excludedAddress;\\r\\n\\r\\n    constructor(string memory name_, string memory symbol_, address _admin)\\r\\n        ERC20(name_, symbol_)\\r\\n        ERC20Capped(10000000 * 10**18)\\r\\n    {\\r\\n        adminDiv = _admin;\\r\\n    }\\r\\n\\r\\n    function mint(address to, uint256 amount) external {\\r\\n        require(msg.sender == adminDiv, \\\"Only owner can mint.\\\");\\r\\n        _mint(to, amount);\\r\\n    }\\r\\n\\r\\n    function changeAdminDiv(address newAdminDiv) external{\\r\\n        require(msg.sender == adminDiv, \\\"Only owner can change the admin.\\\");\\r\\n        adminDiv = newAdminDiv;\\r\\n    }\\r\\n\\r\\n    function burn(uint256 amount) external {\\r\\n        address account = _msgSender();\\r\\n        _burn(account, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * prev. distributeDividends\\r\\n     * @notice Distributes funds to token holders.\\r\\n     * @dev It reverts if the total supply of tokens is 0.\\r\\n     * It emits the `FundsDistributed` event if the amount of received ether is greater than 0.\\r\\n     * About undistributed funds:\\r\\n     *   In each distribution, there is a small amount of funds which does not get distributed,\\r\\n     *     which is `(msg.value * pointsMultiplier) % totalSupply()`.\\r\\n     *   With a well-chosen `pointsMultiplier`, the amount funds that are not getting distributed\\r\\n     *     in a distribution can be less than 1 (base unit).\\r\\n     */\\r\\n    function _distributeFunds(uint256 value) internal {\\r\\n        require(\\r\\n            totalSupply() > 0,\\r\\n            \\\"DividendToken._distributeFunds: 0 funds to distribute.\\\"\\r\\n        );\\r\\n        address _fundsToken = address(this);\\r\\n        uint256 _fundsTokenBal = balanceOf(_fundsToken);\\r\\n        uint256 _totalSupp = totalSupply();\\r\\n\\r\\n        // Ensure this contract has funds to distribute.\\r\\n        require(_fundsTokenBal > 0, \\\"SalvaCoin: 0 fund balance.\\\");\\r\\n\\r\\n        uint256 icoContractBal_ = balanceOf(icoContract);\\r\\n        // Deducting this contract balance from totalSupply because this contract is excluded from any dividend.\\r\\n\\r\\n        uint256 _adjustedTSupply = _totalSupp.sub(_fundsTokenBal + icoContractBal_);\\r\\n\\r\\n        // Calculating dividend per Salva Coin.\\r\\n\\r\\n        if (value > 0) {\\r\\n            pointsPerShare = pointsPerShare.add(\\r\\n                value.mul(pointsMultiplier) / (_adjustedTSupply)\\r\\n            );\\r\\n            emit FundsDistributed(msg.sender, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * prev. withdrawDividend\\r\\n     * @notice Prepares funds withdrawal\\r\\n     * @dev It emits a `FundsWithdrawn` event if the amount of withdrawn ether is greater than 0.\\r\\n     */\\r\\n    function _prepareWithdraw() internal returns (uint256) {\\r\\n        address _fundsToken = address(this);\\r\\n        require(msg.sender != _fundsToken, \\\"Treasury not allowed.\\\");\\r\\n        require(\\r\\n            balanceOf(_fundsToken) > 0,\\r\\n            \\\"SalvaContract: 0 funds to distribute.\\\"\\r\\n        );\\r\\n        uint256 _withdrawableDividend = withdrawableFundsOf(msg.sender);\\r\\n\\r\\n        withdrawnFunds[msg.sender] = withdrawnFunds[msg.sender].add(\\r\\n            _withdrawableDividend\\r\\n        );\\r\\n\\r\\n        emit FundsWithdrawn(msg.sender, _withdrawableDividend);\\r\\n\\r\\n        return _withdrawableDividend;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * prev. withdrawableDividendOf\\r\\n     * @notice View the amount of funds that an address can withdraw.\\r\\n     * @param owner_ The address of a token holder.\\r\\n     * @return The amount funds that `owner_` can withdraw.\\r\\n     */\\r\\n    function withdrawableFundsOf(address owner_) public view returns (uint256) {\\r\\n        address _fundsToken = address(this);\\r\\n        require(owner_ != _fundsToken, \\\"Treasury not allowed.\\\");\\r\\n        return accumulativeFundsOf(owner_).sub(withdrawnFunds[owner_]);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * prev. withdrawnDividendOf\\r\\n     * @notice View the amount of funds that an address has withdrawn.\\r\\n     * @param owner_ The address of a token holder.\\r\\n     * @return The amount of funds that `owner_` has withdrawn.\\r\\n     */\\r\\n    function withdrawnFundsOf(address owner_) public view returns (uint256) {\\r\\n        address _fundsToken = address(this);\\r\\n        require(owner_ != _fundsToken, \\\"Treasury not allowed.\\\");\\r\\n        return withdrawnFunds[owner_];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * prev. accumulativeDividendOf\\r\\n     * @notice View the amount of funds that an address has earned in total.\\r\\n     * @dev accumulativeFundsOf(owner_) = withdrawableFundsOf(owner_) + withdrawnFundsOf(owner_)\\r\\n     * = (pointsPerShare * balanceOf(owner_) + pointsCorrection[owner_]) / pointsMultiplier\\r\\n     * @param owner_ The address of a token holder.\\r\\n     * @return _accumulativeFund the amount of funds that `owner_` has earned in total.\\r\\n     */\\r\\n    function accumulativeFundsOf(address owner_)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256 _accumulativeFund)\\r\\n    {\\r\\n        // need to use loop to check unused checkpoints....\\r\\n        // need to add mappin from holder to used snapids.....\\r\\n        address _fundsToken = address(this);\\r\\n\\r\\n        if (owner_ != _fundsToken) {\\r\\n            _accumulativeFund =\\r\\n                pointsPerShare\\r\\n                    .mul(balanceOf(owner_))\\r\\n                    .toInt256Safe()\\r\\n                    .add(pointsCorrection[owner_])\\r\\n                    .toUint256Safe() /\\r\\n                pointsMultiplier;\\r\\n        }\\r\\n\\r\\n        return _accumulativeFund;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function that transfer tokens from one address to another.\\r\\n     * Update pointsCorrection to keep funds unchanged.\\r\\n     * @param from The address to transfer from.\\r\\n     * @param to The address to transfer to.\\r\\n     * @param value The amount to be transferred.\\r\\n     */\\r\\n    function _transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal override {\\r\\n        super._transfer(from, to, value);\\r\\n        address _fundsToken = address(this);\\r\\n\\r\\n        if (from == _fundsToken) {\\r\\n            // skip correction of tresury fund token contract\\r\\n            int256 _magCorrection = pointsPerShare.mul(value).toInt256Safe();\\r\\n            // pointsCorrection[from] = pointsCorrection[from].add(_magCorrection);\\r\\n            pointsCorrection[to] = pointsCorrection[to].sub(_magCorrection);\\r\\n        } else if (to == _fundsToken) {\\r\\n            // skip correction of tresury fund token contract\\r\\n            int256 _magCorrection = pointsPerShare.mul(value).toInt256Safe();\\r\\n\\r\\n            pointsCorrection[from] = pointsCorrection[from].sub(_magCorrection);\\r\\n        } else {\\r\\n            int256 _magCorrection = pointsPerShare.mul(value).toInt256Safe();\\r\\n            pointsCorrection[from] = pointsCorrection[from].add(_magCorrection);\\r\\n            pointsCorrection[to] = pointsCorrection[to].sub(_magCorrection);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function that mints tokens to an account.\\r\\n     * Update pointsCorrection to keep funds unchanged.\\r\\n     * @param account The account that will receive the created tokens.\\r\\n     * @param value The amount that will be created.\\r\\n     */\\r\\n    function _mint(address account, uint256 value)\\r\\n        internal\\r\\n        override(ERC20, ERC20Capped)\\r\\n    {\\r\\n        super._mint(account, value);\\r\\n        address _fundsToken = address(this);\\r\\n\\r\\n        if (account != _fundsToken) {\\r\\n            pointsCorrection[account] = pointsCorrection[account].sub(\\r\\n                (pointsPerShare.mul(value)).toInt256Safe()\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function that burns an amount of the token of a given account.\\r\\n     * Update pointsCorrection to keep funds unchanged.\\r\\n     * @param account The account whose tokens will be burnt.\\r\\n     * @param value The amount that will be burnt.\\r\\n     */\\r\\n    function _burn(address account, uint256 value) internal override {\\r\\n        super._burn(account, value);\\r\\n        address _fundsToken = address(this);\\r\\n\\r\\n        if (account != _fundsToken) {\\r\\n            pointsCorrection[account] = pointsCorrection[account].add(\\r\\n                (pointsPerShare.mul(value)).toInt256Safe()\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function updateIcoAddress(address _icoAddress) external {\\r\\n        require(init == false, \\\"Already updated.\\\");\\r\\n        require(msg.sender == adminDiv);\\r\\n    \\r\\n        icoContract = _icoAddress;\\r\\n        require(icoContract != address(0), \\\"ICO address cannot be zero.\\\");\\r\\n        init = true;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interface/IFundsDistributionToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n\\r\\ninterface IFundsDistributionToken {\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns the total amount of funds a given address is able to withdraw currently.\\r\\n\\t * @param owner Address of FundsDistributionToken holder\\r\\n\\t * @return A uint256 representing the available funds for a given account\\r\\n\\t */\\r\\n\\tfunction withdrawableFundsOf(address owner) external view returns (uint256);\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Withdraws all available funds for a FundsDistributionToken holder.\\r\\n\\t */\\r\\n\\tfunction withdrawFunds() external;\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev This event emits when new funds are distributed\\r\\n\\t * @param by the address of the sender who distributed funds\\r\\n\\t * @param fundsDistributed the amount of funds received for distribution\\r\\n\\t */\\r\\n\\tevent FundsDistributed(address indexed by, uint256 fundsDistributed);\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev This event emits when distributed funds are withdrawn by a token holder.\\r\\n\\t * @param by the address of the receiver of funds\\r\\n\\t * @param fundsWithdrawn the amount of funds that were withdrawn\\r\\n\\t */\\r\\n\\tevent FundsWithdrawn(address indexed by, uint256 fundsWithdrawn);\\r\\n}\"\r\n    },\r\n    \"contracts/SalvaCoin.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../contracts/utils/SafeMathUint.sol\\\";\\r\\nimport \\\"../contracts/utils/SafeMathInt.sol\\\";\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"./interface/IFundsDistributionToken.sol\\\";\\r\\nimport \\\"./DividendToken.sol\\\";\\r\\n\\r\\ncontract SalvaCoin is IFundsDistributionToken, DividendToken, ReentrancyGuard {\\r\\n    using SafeMathUint for uint256;\\r\\n    using SafeMathInt for int256;\\r\\n\\r\\n    // token in which the funds can be sent to the FundsDistributionToken\\r\\n    IERC20 private fundsToken;\\r\\n\\r\\n    // balance of fundsToken that the FundsDistributionToken currently holds\\r\\n    uint256 public fundsTokenBalance;\\r\\n\\r\\n    // Admin of this contract.\\r\\n\\r\\n    uint256 public fundRound;\\r\\n\\r\\n    mapping(uint256 => int256) public fundRoundToLastedFund;\\r\\n\\r\\n    // modifier onlyFundsToken() {\\r\\n    //     require(\\r\\n    //         msg.sender == address(fundsToken),\\r\\n    //         \\\"FDT_ERC20Extension.onlyFundsToken: UNAUTHORIZED_SENDER\\\"\\r\\n    //     );\\r\\n    //     _;\\r\\n    // }\\r\\n\\r\\n    constructor(string memory name_, string memory symbol_, address _admin)\\r\\n        DividendToken(name_, symbol_, _admin)\\r\\n    {\\r\\n        fundsToken = IERC20(address(this));\\r\\n        require(\\r\\n            address(fundsToken) != address(0),\\r\\n            \\\"SalvaCoin: invalid fund contract address.\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Withdraws all available funds for a token holder\\r\\n     */\\r\\n    function withdrawFunds() external nonReentrant {\\r\\n        require(msg.sender != icoContract, \\\"Not allowed!\\\");\\r\\n        uint256 withdrawableFunds = _prepareWithdraw();\\r\\n\\r\\n        require(\\r\\n            withdrawableFunds > 0,\\r\\n            \\\"SalvaCoin.withdrawFunds: Zero caller dividend.\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            fundsToken.transfer(msg.sender, withdrawableFunds),\\r\\n            \\\"SalvaCoin.withdrawFunds: ERC20 TF.\\\"\\r\\n        );\\r\\n\\r\\n        _updateFundsTokenBalance();\\r\\n    }\\r\\n\\r\\n    // Getter for funds token address.\\r\\n\\r\\n    function getFundsToken() public view returns (IERC20) {\\r\\n        return fundsToken;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Updates the current funds token balance\\r\\n     * and returns the difference of new and previous funds token balances\\r\\n     * @return A int256 representing the difference of the new and previous funds token balance\\r\\n     */\\r\\n    function _updateFundsTokenBalance() internal returns (int256) {\\r\\n        uint256 prevFundsTokenBalance = fundsTokenBalance;\\r\\n\\r\\n        fundsTokenBalance = fundsToken.balanceOf(address(this));\\r\\n\\r\\n        return int256(fundsTokenBalance).sub(int256(prevFundsTokenBalance));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Register a payment of funds in tokens. May be called directly after a deposit is made.\\r\\n     * @dev Calls _updateFundsTokenBalance(), whereby the contract computes the delta of the previous and the new\\r\\n     * funds token balance and increments the total received funds (cumulative) by delta by calling _registerFunds()\\r\\n     */\\r\\n\\r\\n    function _updateFundsReceived() internal {\\r\\n        int256 newFunds = _updateFundsTokenBalance();\\r\\n\\r\\n        if (newFunds > 0) {\\r\\n            _distributeFunds(newFunds.toUint256Safe());\\r\\n        }\\r\\n\\r\\n        // Capturing funding round.\\r\\n        fundRound++;\\r\\n        //Mapping to latest fund round to latest fund.\\r\\n        fundRoundToLastedFund[fundRound] = newFunds;\\r\\n\\r\\n        // storing unwithdran treausry bal from previous fundind round to be deducted later\\r\\n        // at the time of beding used in _distributeFunds()\\r\\n        // if (balanceOf(address(this)).toInt256Safe() != newFunds) {\\r\\n        //     treasuryBalCorrection[fundRound] =\\r\\n        //         balanceOf(address(this)) -\\r\\n        //         newFunds.toUint256Safe();\\r\\n        // }\\r\\n    }\\r\\n\\r\\n    function _afterTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal override {\\r\\n        super._afterTokenTransfer(from, to, amount);\\r\\n\\r\\n        address _fundsToken = address(getFundsToken());\\r\\n\\r\\n        if (to == address(_fundsToken)) {\\r\\n            _updateFundsReceived();\\r\\n        }\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/utils/SafeMathInt.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title SafeMathInt\\r\\n * @dev Math operations with safety checks that revert on error\\r\\n * @dev SafeMath adapted for int256\\r\\n * Based on code of  https://github.com/RequestNetwork/requestNetwork/blob/master/packages/requestNetworkSmartContracts/contracts/base/math/SafeMathInt.sol\\r\\n */\\r\\nlibrary SafeMathInt {\\r\\n  function mul(int256 a, int256 b) internal pure returns (int256) {\\r\\n    // Prevent overflow when multiplying INT256_MIN with -1\\r\\n    // https://github.com/RequestNetwork/requestNetwork/issues/43\\r\\n    require(!(a == - 2**255 && b == -1) && !(b == - 2**255 && a == -1));\\r\\n\\r\\n    int256 c = a * b;\\r\\n    require((b == 0) || (c / b == a));\\r\\n    return c;\\r\\n  }\\r\\n\\r\\n  function div(int256 a, int256 b) internal pure returns (int256) {\\r\\n    // Prevent overflow when dividing INT256_MIN by -1\\r\\n    // https://github.com/RequestNetwork/requestNetwork/issues/43\\r\\n    require(!(a == - 2**255 && b == -1) && (b > 0));\\r\\n\\r\\n    return a / b;\\r\\n  }\\r\\n\\r\\n  function sub(int256 a, int256 b) internal pure returns (int256) {\\r\\n    require((b >= 0 && a - b <= a) || (b < 0 && a - b > a));\\r\\n\\r\\n    return a - b;\\r\\n  }\\r\\n\\r\\n  function add(int256 a, int256 b) internal pure returns (int256) {\\r\\n    int256 c = a + b;\\r\\n    require((b >= 0 && c >= a) || (b < 0 && c < a));\\r\\n    return c;\\r\\n  }\\r\\n\\r\\n  function toUint256Safe(int256 a) internal pure returns (uint256) {\\r\\n    require(a >= 0);\\r\\n    return uint256(a);\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/utils/SafeMathUint.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title SafeMathUint\\r\\n * @dev Math operations with safety checks that revert on error\\r\\n */\\r\\nlibrary SafeMathUint {\\r\\n  function toInt256Safe(uint256 a) internal pure returns (int256) {\\r\\n    int256 b = int256(a);\\r\\n    require(b >= 0);\\r\\n    return b;\\r\\n  }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fundsDistributed\",\"type\":\"uint256\"}],\"name\":\"FundsDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fundsWithdrawn\",\"type\":\"uint256\"}],\"name\":\"FundsWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"accumulativeFundsOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_accumulativeFund\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminDiv\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdminDiv\",\"type\":\"address\"}],\"name\":\"changeAdminDiv\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"fundRoundToLastedFund\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundsTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFundsToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"icoContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_icoAddress\",\"type\":\"address\"}],\"name\":\"updateIcoAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"withdrawableFundsOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"withdrawnFundsOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "SalvaCoin", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000d7ccea64c47ef06b7b0a39b6b54781a9c09e238a000000000000000000000000000000000000000000000000000000000000000953616c7661436f696e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000453414c4300000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}