{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/ReleaseQueueLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicensed\\r\\n\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nlibrary ReleaseQueueLib {\\r\\n    uint256 constant MAX_INT = 2 ** 256 - 1;\\r\\n\\r\\n    struct ReleaseQueueItem {\\r\\n        uint256 tokenId;\\r\\n        address contractAddress;\\r\\n        address tokenOwner;\\r\\n        uint256 releaseTimestamp;\\r\\n    }\\r\\n\\r\\n    struct ReleaseQueue {\\r\\n        mapping(uint256 => ReleaseQueueItem) q;\\r\\n        uint256 front;\\r\\n        uint256 back;\\r\\n    }\\r\\n\\r\\n    // Assuming qItem.releaseTimestamp > rQueue.q[rQueue.back].releaseTimestamp\\r\\n    function push(\\r\\n        ReleaseQueue storage rQueue,\\r\\n        ReleaseQueueItem memory qItem\\r\\n    ) internal {\\r\\n        if (isFull(rQueue)) {\\r\\n            revert(\\\"Queue is full\\\");\\r\\n        }\\r\\n\\r\\n        rQueue.q[rQueue.back] = qItem;\\r\\n\\r\\n        if (rQueue.back == MAX_INT) {\\r\\n            rQueue.back = 0;\\r\\n        } else {\\r\\n            rQueue.back++;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Assuming block.timestamp >= rQueue.q[rQueue.front].releaseTimestamp\\r\\n    function pop(\\r\\n        ReleaseQueue storage rQueue\\r\\n    ) internal returns (ReleaseQueueItem memory qItem) {\\r\\n        if (isEmpty(rQueue)) {\\r\\n            revert(\\\"Queue is empty\\\");\\r\\n        }\\r\\n\\r\\n        qItem = rQueue.q[rQueue.front];\\r\\n        delete rQueue.q[rQueue.front];\\r\\n\\r\\n        if (rQueue.front == MAX_INT) {\\r\\n            rQueue.front = 0;\\r\\n        } else {\\r\\n            rQueue.front++;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function isReadyForRelease(\\r\\n        ReleaseQueue storage rQueue\\r\\n    ) internal view returns (bool) {\\r\\n        return\\r\\n            !isEmpty(rQueue) &&\\r\\n            block.timestamp >= rQueue.q[rQueue.front].releaseTimestamp;\\r\\n    }\\r\\n\\r\\n    function isEmpty(ReleaseQueue storage rQueue) internal view returns (bool) {\\r\\n        return rQueue.back == rQueue.front;\\r\\n    }\\r\\n\\r\\n    function isFull(ReleaseQueue storage rQueue) internal view returns (bool) {\\r\\n        return\\r\\n            (rQueue.back == MAX_INT && rQueue.front == 0) ||\\r\\n            (rQueue.front != 0 && rQueue.back == rQueue.front - 1);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Staking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicensed\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport \\\"./ReleaseQueueLib.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\n\\r\\ncontract Staking is Ownable, IERC721Receiver, ReentrancyGuard {\\r\\n    // Using the ReleaseQueueLib for managing NFT release queues\\r\\n    using ReleaseQueueLib for ReleaseQueueLib.ReleaseQueue;\\r\\n\\r\\n    // Mapping to store NFT contracts, indexed by contract address\\r\\n    mapping(address => IERC721) nftContracts;\\r\\n\\r\\n    // Structure to store staked NFT information\\r\\n    struct StakedNFT {\\r\\n        uint256 tokenId;\\r\\n        address contractAddress;\\r\\n        uint256 stakedAt;\\r\\n        address owner;\\r\\n    }\\r\\n\\r\\n    // Structure to represent stake arguments (token ID and contract address)\\r\\n    struct StakeArgs {\\r\\n        uint256 tokenId;\\r\\n        address contractAddress;\\r\\n    }\\r\\n\\r\\n    // Mapping to store staked NFTs using token ID as the key\\r\\n    mapping(bytes32 => StakedNFT) stakedNfts;\\r\\n\\r\\n    // Maximum number of tokens that can be staked in a single transaction\\r\\n    uint8 public MAX_STAKE_PER_TXN;\\r\\n\\r\\n    // Maximum number of tokens that can be released to owner in a single transaction\\r\\n    uint8 public MAX_RELEASE_PER_TXN;\\r\\n\\r\\n    // NFT release period after unstake\\r\\n    uint256 public COOLING_OFF_PERIOD;\\r\\n\\r\\n    // Array of NFT release queues, each queue represents NFTs with the same cooling-off period\\r\\n    ReleaseQueueLib.ReleaseQueue[] releaseQueue;\\r\\n\\r\\n    // Event emitted when an NFT is staked\\r\\n    event NFTStaked(\\r\\n        uint256 tokenId,\\r\\n        address contractAddress,\\r\\n        uint256 stakedAt,\\r\\n        address indexed owner\\r\\n    );\\r\\n\\r\\n    // Event emitted when an NFT is unstaked\\r\\n    event NFTUnstaked(\\r\\n        uint256 tokenId,\\r\\n        address contractAddress,\\r\\n        uint256 unstakedAt,\\r\\n        address indexed owner,\\r\\n        uint256 releaseAfter\\r\\n    );\\r\\n\\r\\n    // Event emitted when an NFT is released to owner\\r\\n    event NFTReleased(\\r\\n        uint256 tokenId,\\r\\n        address contractAddress,\\r\\n        uint256 releasedAt,\\r\\n        address indexed owner\\r\\n    );\\r\\n\\r\\n    // Event emitted when the cooling-off period is changed\\r\\n    event CoolingOffPeriodChanged(uint256 cop);\\r\\n\\r\\n    // Event emitted when the maximum release limit per transaction is changed\\r\\n    event MaxReleasePerTransactionChanged(uint8 maxRelease);\\r\\n\\r\\n    // Event emitted when the maximum stake limit per transaction is changed\\r\\n    event MaxStakePerTransactionChanged(uint8 maxStake);\\r\\n\\r\\n    // Custom error messages for contract requirements\\r\\n    error NFTAlreadyStaked();\\r\\n    error NotTokenOwner();\\r\\n    error ToManyNFTsToStake();\\r\\n    error ToManyNFTsToUnstake();\\r\\n    error ContractNotRegistered();\\r\\n    error NFTNotStaked();\\r\\n\\r\\n    /**\\r\\n     * @dev Constructor function to initialize the staking contract with configurable parameters.\\r\\n     * @param _maxStakePerTxn The maximum number of NFTs that can be staked in a single transaction.\\r\\n     * @param _maxReleasePerTxn The maximum number of NFTs that can be released to the owner in a single transaction.\\r\\n     * @param _coolingOffPeriod The duration of the cooling off period in seconds, during which NFTs are held before they can be released after unstaking.\\r\\n     */\\r\\n    constructor(\\r\\n        uint8 _maxStakePerTxn,\\r\\n        uint8 _maxReleasePerTxn,\\r\\n        uint256 _coolingOffPeriod\\r\\n    ) {\\r\\n        setMaxStakePerTransaction(_maxStakePerTxn);\\r\\n        setMaxReleasePerTransaction(_maxReleasePerTxn);\\r\\n        setCoolingOffPeriod(_coolingOffPeriod);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the address of the NFT contract that can be staked.\\r\\n     * @param _nftContractAddress The address of the NFT contract.\\r\\n     * Only the contract owner can add NFT contracts.\\r\\n     */\\r\\n    function addNFTContract(address _nftContractAddress) external onlyOwner {\\r\\n        nftContracts[_nftContractAddress] = IERC721(_nftContractAddress);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Stakes multiple NFTs to the contract.\\r\\n     * @param args An array of StakeArgs containing token IDs and contract addresses.\\r\\n     * Requirements:\\r\\n     * - The maximum stake limit per transaction is enforced.\\r\\n     * - Each NFT must not be already staked.\\r\\n     * - The caller must be the owner of the NFT.\\r\\n     * - NFTs are transferred from the caller to this contract.\\r\\n     * - Staking information is stored in the `stakedNfts` mapping.\\r\\n     * Emits a {NFTStaked} event for each staked NFT.\\r\\n     */\\r\\n    function stake(StakeArgs[] calldata args) external nonReentrant {\\r\\n        uint256 len = args.length;\\r\\n\\r\\n        if (len > MAX_STAKE_PER_TXN) {\\r\\n            revert ToManyNFTsToStake();\\r\\n        }\\r\\n\\r\\n        for (uint256 i = 0; i < len; i++) {\\r\\n            bytes32 nftMapId = getNFTMapId(\\r\\n                args[i].tokenId,\\r\\n                args[i].contractAddress\\r\\n            );\\r\\n\\r\\n            if (address(nftContracts[args[i].contractAddress]) == address(0)) {\\r\\n                revert ContractNotRegistered();\\r\\n            }\\r\\n\\r\\n            if (stakedNfts[nftMapId].owner != address(0)) {\\r\\n                revert NFTAlreadyStaked();\\r\\n            }\\r\\n\\r\\n            if (\\r\\n                nftContracts[args[i].contractAddress].ownerOf(\\r\\n                    args[i].tokenId\\r\\n                ) != _msgSender()\\r\\n            ) {\\r\\n                revert NotTokenOwner();\\r\\n            }\\r\\n\\r\\n            nftContracts[args[i].contractAddress].safeTransferFrom(\\r\\n                _msgSender(),\\r\\n                address(this),\\r\\n                args[i].tokenId,\\r\\n                \\\"0x00\\\"\\r\\n            );\\r\\n\\r\\n            StakedNFT memory stakedNft = StakedNFT(\\r\\n                args[i].tokenId,\\r\\n                args[i].contractAddress,\\r\\n                block.timestamp,\\r\\n                _msgSender()\\r\\n            );\\r\\n            stakedNfts[nftMapId] = stakedNft;\\r\\n\\r\\n            emit NFTStaked(\\r\\n                stakedNft.tokenId,\\r\\n                stakedNft.contractAddress,\\r\\n                stakedNft.stakedAt,\\r\\n                stakedNft.owner\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Unstakes multiple NFTs from the contract.\\r\\n     * @param args An array of StakeArgs containing token IDs and contract addresses.\\r\\n     * Requirements:\\r\\n     * - The maximum unstake limit per transaction is enforced.\\r\\n     * - Each NFT must be staked by the caller.\\r\\n     * - NFTs are queued to be transferred to the owner after the cooling off period is over.\\r\\n     * - Staking information is removed from the `stakedNfts` mapping.\\r\\n     * Emits a {NFTUnstaked} event for each unstaked NFT.\\r\\n     */\\r\\n    function unstake(StakeArgs[] calldata args) external nonReentrant {\\r\\n        uint256 len = args.length;\\r\\n\\r\\n        if (len > MAX_STAKE_PER_TXN) {\\r\\n            revert ToManyNFTsToUnstake();\\r\\n        }\\r\\n\\r\\n        for (uint256 i = 0; i < len; i++) {\\r\\n            bytes32 nftMapId = getNFTMapId(\\r\\n                args[i].tokenId,\\r\\n                args[i].contractAddress\\r\\n            );\\r\\n\\r\\n            if (stakedNfts[nftMapId].stakedAt == 0) {\\r\\n                revert NFTNotStaked();\\r\\n            }\\r\\n\\r\\n            if (stakedNfts[nftMapId].owner != _msgSender()) {\\r\\n                revert NotTokenOwner();\\r\\n            }\\r\\n\\r\\n            uint256 releaseAfter = block.timestamp + COOLING_OFF_PERIOD;\\r\\n\\r\\n            ReleaseQueueLib.ReleaseQueueItem memory qItem = ReleaseQueueLib\\r\\n                .ReleaseQueueItem(\\r\\n                    args[i].tokenId,\\r\\n                    args[i].contractAddress,\\r\\n                    _msgSender(),\\r\\n                    releaseAfter\\r\\n                );\\r\\n            releaseQueue[releaseQueue.length - 1].push(qItem);\\r\\n            delete stakedNfts[nftMapId];\\r\\n\\r\\n            emit NFTUnstaked(\\r\\n                args[i].tokenId,\\r\\n                args[i].contractAddress,\\r\\n                block.timestamp,\\r\\n                _msgSender(),\\r\\n                releaseAfter\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Releases NFTs to their respective owners.\\r\\n     * NFTs are released if they have completed the cooling off period.\\r\\n     */\\r\\n    function releaseToOwner() external nonReentrant {\\r\\n        uint8 totalReleased = 0;\\r\\n        for (uint i = 0; i < releaseQueue.length; i++) {\\r\\n            while (\\r\\n                releaseQueue[i].isReadyForRelease() &&\\r\\n                totalReleased <= MAX_RELEASE_PER_TXN\\r\\n            ) {\\r\\n                ReleaseQueueLib.ReleaseQueueItem memory qItem = releaseQueue[i]\\r\\n                    .pop();\\r\\n\\r\\n                nftContracts[qItem.contractAddress].safeTransferFrom(\\r\\n                    address(this),\\r\\n                    qItem.tokenOwner,\\r\\n                    qItem.tokenId,\\r\\n                    \\\"0x00\\\"\\r\\n                );\\r\\n\\r\\n                emit NFTReleased(\\r\\n                    qItem.tokenId,\\r\\n                    qItem.contractAddress,\\r\\n                    block.timestamp,\\r\\n                    qItem.tokenOwner\\r\\n                );\\r\\n                totalReleased++;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the cooling off period for NFT release after unstake.\\r\\n     * @param copInSeconds The cooling off period in seconds.\\r\\n     * Only the contract owner can change this period.\\r\\n     */\\r\\n    function setCoolingOffPeriod(uint256 copInSeconds) public onlyOwner {\\r\\n        COOLING_OFF_PERIOD = copInSeconds;\\r\\n        releaseQueue.push();\\r\\n        emit CoolingOffPeriodChanged(copInSeconds);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the maximum number of NFTs that can be staked per transaction.\\r\\n     * @param maxStakeLimit The maximum number of NFTs that can be staked per transaction.\\r\\n     * Only the contract owner can change this limit.\\r\\n     */\\r\\n    function setMaxStakePerTransaction(uint8 maxStakeLimit) public onlyOwner {\\r\\n        MAX_STAKE_PER_TXN = maxStakeLimit;\\r\\n        emit MaxStakePerTransactionChanged(maxStakeLimit);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the maximum number of NFTs that can be released per transaction.\\r\\n     * @param maxReleasePerTxn The maximum number of NFTs that can be released per transaction.\\r\\n     * Only the contract owner can change this limit.\\r\\n     */\\r\\n    function setMaxReleasePerTransaction(\\r\\n        uint8 maxReleasePerTxn\\r\\n    ) public onlyOwner {\\r\\n        MAX_RELEASE_PER_TXN = maxReleasePerTxn;\\r\\n        emit MaxReleasePerTransactionChanged(maxReleasePerTxn);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Checks if there are NFTs ready to be released to their owners.\\r\\n     * @return A boolean indicating whether there are NFTs ready to be released.\\r\\n     */\\r\\n    function isReadyForRelease() public view returns (bool) {\\r\\n        for (uint i = 0; i < releaseQueue.length; i++) {\\r\\n            if (releaseQueue[i].isReadyForRelease()) {\\r\\n                return true;\\r\\n            }\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    // Function required by the ERC721Receiver interface\\r\\n    function onERC721Received(\\r\\n        address,\\r\\n        address,\\r\\n        uint256,\\r\\n        bytes calldata\\r\\n    ) external pure override returns (bytes4) {\\r\\n        return IERC721Receiver.onERC721Received.selector;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Generates a unique map ID for an NFT using its token ID and contract address.\\r\\n     * @param tokenId The token ID of the NFT.\\r\\n     * @param contractAddress The address of the NFT contract.\\r\\n     * @return A bytes32 value representing the unique map ID.\\r\\n     */\\r\\n    function getNFTMapId(\\r\\n        uint256 tokenId,\\r\\n        address contractAddress\\r\\n    ) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encodePacked(contractAddress, tokenId));\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 20000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_maxStakePerTxn\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_maxReleasePerTxn\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_coolingOffPeriod\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ContractNotRegistered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NFTAlreadyStaked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NFTNotStaked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotTokenOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ToManyNFTsToStake\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ToManyNFTsToUnstake\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cop\",\"type\":\"uint256\"}],\"name\":\"CoolingOffPeriodChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"maxRelease\",\"type\":\"uint8\"}],\"name\":\"MaxReleasePerTransactionChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"maxStake\",\"type\":\"uint8\"}],\"name\":\"MaxStakePerTransactionChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"releasedAt\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"NFTReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakedAt\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"NFTStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unstakedAt\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"releaseAfter\",\"type\":\"uint256\"}],\"name\":\"NFTUnstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"COOLING_OFF_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_RELEASE_PER_TXN\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_STAKE_PER_TXN\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftContractAddress\",\"type\":\"address\"}],\"name\":\"addNFTContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isReadyForRelease\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseToOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"copInSeconds\",\"type\":\"uint256\"}],\"name\":\"setCoolingOffPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"maxReleasePerTxn\",\"type\":\"uint8\"}],\"name\":\"setMaxReleasePerTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"maxStakeLimit\",\"type\":\"uint8\"}],\"name\":\"setMaxStakePerTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"internalType\":\"struct Staking.StakeArgs[]\",\"name\":\"args\",\"type\":\"tuple[]\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"internalType\":\"struct Staking.StakeArgs[]\",\"name\":\"args\",\"type\":\"tuple[]\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Staking", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "20000", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000320000000000000000000000000000000000000000000000000000000000093a80", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}