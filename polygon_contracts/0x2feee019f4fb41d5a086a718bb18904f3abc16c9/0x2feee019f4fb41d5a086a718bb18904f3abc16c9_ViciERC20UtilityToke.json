{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"ViciERC20UtilityToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"ViciERC20.sol\\\";\\nimport \\\"IERC20UtilityOperations.sol\\\";\\n\\n/**\\n * @title Vici ERC20 Utility Token\\n * @notice (c) 2023 ViciNFT https://vicinft.com/\\n * @author Josh Davis <josh.davis@vicinft.com>\\n *\\n * @notice This contract extends the behavior of the base Vici ERC20 contract by\\n * providing a limitations to how airdropped tokens can be used by earmarking\\n * tokens or by timelocking tokens.\\n * @notice Earmarked tokens are airdropped to a user for the purpose of allowing\\n * them to attend an event, purchase an NFT, or participate in other experiences\\n * or utilities offered by ViciNFT.\\n * @notice Time-locked tokens are airdropped to VIPs. Over time, time-locked\\n * tokens become unlocked tokens according to a vesting schedule. Time-locked\\n * tokens may also be spent in the same manner as earmarked tokens.\\n * @notice If a user has earmarked tokens and time-locked tokens, the earmarked\\n * tokens are spent first.\\n * @dev Roles used by the access management are\\n * - DEFAULT_ADMIN_ROLE: administers the other roles\\n * - MODERATOR_ROLE_NAME: administers the banned role\\n * - MINTER_ROLE_NAME: can mint/burn tokens\\n * - AIRDROP_ROLE_NAME: can airdrop tokens and manage the list of addresses\\n *   where earmarked tokens may be transferred.\\n * - BANNED_ROLE: cannot send or receive tokens\\n */\\ncontract ViciERC20UtilityToken is ViciERC20 {\\n    event LostTokensRecovered(address from, address to, uint256 value);\\n\\n    function utilityOps()\\n        internal\\n        view\\n        virtual\\n        returns (IERC20UtilityOperations)\\n    {\\n        return IERC20UtilityOperations(address(tokenData));\\n    }\\n\\n    /**\\n     * @notice Transfers tokens from the caller to a recipient and establishes\\n     * a vesting schedule.\\n     * If `recipient` already has a locked balance, then\\n     * - if `amount` is greater than the airdropThreshold AND `release` is later than the current\\n     *      lockReleaseDate, the lockReleaseDate will be updated.\\n     * - if `amount` is less than the airdropThreshold OR `release` is earlier than the current\\n     *      lockReleaseDate, the lockReleaseDate will be left unchanged.\\n     * @param recipient the user receiving the airdrop\\n     * @param amount the amount to transfer\\n     * @param release the new lock release date, as a Unix timestamp in seconds\\n     *\\n     * Requirements:\\n     * - caller MUST have the AIRDROPPER role\\n     * - the transaction MUST meet all requirements for a transfer\\n     * @dev see IERC20Operations.transfer\\n     */\\n    function airdropTimelockedTokens(\\n        address recipient,\\n        uint256 amount,\\n        uint256 release\\n    ) public virtual {\\n        utilityOps().airdropTimelockedTokens(\\n            this,\\n            ERC20TransferData(_msgSender(), _msgSender(), recipient, amount),\\n            release\\n        );\\n        _post_transfer_hook(_msgSender(), recipient, amount);\\n    }\\n\\n    /**\\n     * @notice Unlocks some or all of `account`'s locked tokens.\\n     * @param account the user\\n     * @param unlockAmount the amount to unlock\\n     *\\n     * Requirements:\\n     * - caller MUST be the owner or have the UNLOCK_LOCKED_TOKENS role\\n     * - `unlockAmount` MAY be greater than the locked balance, in which case\\n     *     all of the account's locked tokens are unlocked.\\n     */\\n    function unlockLockedTokens(\\n        address account,\\n        uint256 unlockAmount\\n    ) public virtual {\\n        utilityOps().unlockLockedTokens(\\n            this,\\n            msg.sender,\\n            account,\\n            unlockAmount\\n        );\\n    }\\n\\n    /**\\n     * @notice Resets the lock period for a batch of addresses\\n     * @notice This function has no effect on accounts without a locked token balance\\n     * @param release the new lock release date, as a Unix timestamp in seconds\\n     * @param addresses the list of addresses to be reset\\n     *\\n     * Requirements:\\n     * - caller MUST be the owner or have the UNLOCK_LOCKED_TOKENS role\\n     * - `release` MAY be zero or in the past, in which case the users' entire locked balances become unlocked\\n     * - `addresses` MAY contain accounts without a locked balance, in which case the account is unaffected\\n     */\\n    function updateTimelocks(\\n        uint256 release,\\n        address[] calldata addresses\\n    ) public virtual {\\n        utilityOps().updateTimelocks(this, msg.sender, release, addresses);\\n    }\\n\\n    /**\\n     * @notice Returns the amount of locked tokens for `account`.\\n     * @param account the user address\\n     */\\n    function lockedBalanceOf(\\n        address account\\n    ) public view virtual returns (uint256) {\\n        return utilityOps().lockedBalanceOf(account);\\n    }\\n\\n    /**\\n     * @notice Returns the Unix timestamp when a user's locked tokens will be\\n     * released.\\n     * @param account the user address\\n     */\\n    function lockReleaseDate(\\n        address account\\n    ) public view virtual returns (uint256) {\\n        return utilityOps().lockReleaseDate(account);\\n    }\\n\\n    /**\\n     * @notice Returns the difference between `account`'s total balance and its\\n     * locked balance.\\n     * @param account the user address\\n     */\\n    function unlockedBalanceOf(\\n        address account\\n    ) public view virtual returns (uint256) {\\n        return utilityOps().unlockedBalanceOf(account);\\n    }\\n\\n    /**\\n     * @notice recovers tokens from lost wallets\\n     * @dev emits LostTokensRecovered\\n     *\\n     * Requirements\\n     * - `operator` MUST be the contract owner.\\n     * - `fromAddress` MUST have been marked as a \\\"lost wallet\\\".\\n     * - `toAddress` MUST NOT be banned or OFAC sanctioned\\n     */\\n    function recoverMisplacedTokens(\\n        address lostWallet,\\n        address toAddress\\n    ) public virtual onlyOwner {\\n        uint256 amount = utilityOps().recoverMisplacedTokens(\\n            this,\\n            msg.sender,\\n            lostWallet,\\n            toAddress\\n        );\\n        emit LostTokensRecovered(lostWallet, toAddress, amount);\\n        _post_transfer_hook(lostWallet, toAddress, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"ViciERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"IERC20Metadata.sol\\\";\\nimport \\\"ERC677ReceiverInterface.sol\\\";\\n\\nimport \\\"IBridgeable.sol\\\";\\nimport \\\"BaseViciContract.sol\\\";\\nimport \\\"EIP712.sol\\\";\\nimport \\\"Monotonic.sol\\\";\\nimport \\\"IERC677.sol\\\";\\nimport \\\"IERC20Operations.sol\\\";\\n\\n/**\\n * @title Vici ERC20\\n * @notice (c) 2023 ViciNFT https://vicinft.com/\\n * @author Josh Davis <josh.davis@vicinft.com>\\n *\\n * @dev This contract provides base functionality for an ERC20 token.\\n * @dev It adds support for pausible, ownable, access roles, and OFAC sanctions\\n * compliance.\\n * @dev Roles used by the access management are\\n * - DEFAULT_ADMIN_ROLE: administers the other roles\\n * - MODERATOR_ROLE_NAME: administers the banned role\\n * - MINTER_ROLE_NAME: can mint/burn tokens\\n * - BRIDGE_CONTRACT: a registered bridge\\n * - BANNED_ROLE: cannot send or receive tokens\\n */\\ncontract ViciERC20 is\\n    BaseViciContract,\\n    IERC20Metadata,\\n    IERC677,\\n    IBridgeable,\\n    EIP712\\n{\\n    using Monotonic for Monotonic.Increaser;\\n\\n    event SanctionedAssetsRecovered(address from, address to, uint256 value);\\n\\n    // Creator can create a new token type and mint an initial supply.\\n    bytes32 public constant MINTER_ROLE_NAME = \\\"minter\\\";\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private constant _PERMIT_TYPEHASH =\\n        keccak256(\\n            \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\n        );\\n\\n    /**\\n     * @dev In previous versions `_PERMIT_TYPEHASH` was declared as `immutable`.\\n     * However, to ensure consistency with the upgradeable transpiler, we will continue\\n     * to reserve a slot.\\n     * @custom:oz-renamed-from _PERMIT_TYPEHASH\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private _PERMIT_TYPEHASH_DEPRECATED_SLOT;\\n\\n    mapping(address => Monotonic.Increaser) private _nonces;\\n    string public name;\\n    string public symbol;\\n    uint8 public decimals;\\n\\n    IERC20Operations public tokenData;\\n\\n    bool public isMain;\\n    address public vault;\\n\\n    /* ################################################################\\n     * Initialization\\n     * ##############################################################*/\\n\\n    /**\\n     * @dev Use this one when deploying for the first time on a new chain.\\n     * @dev Use reinit when upgrading from a v1 token\\n     * @param _accessServer The Access Server contract\\n     * @param _tokenData The ERC20 Operations contract. You MUST set this contract as the owner of that contract.\\n     * @param _name the name of the token.\\n     * @param _symbol the token symbol.\\n     * @param _decimals the number of decimals.\\n     */\\n    function initialize(\\n        IAccessServer _accessServer,\\n        IERC20Operations _tokenData,\\n        string calldata _name,\\n        string calldata _symbol,\\n        uint8 _decimals,\\n        bool _isMain\\n    ) public virtual reinitializer(2) {\\n        __ViciERC20_init(\\n            _accessServer,\\n            _tokenData,\\n            _name,\\n            _symbol,\\n            _decimals,\\n            _isMain\\n        );\\n    }\\n\\n    function __ViciERC20_init(\\n        IAccessServer _accessServer,\\n        IERC20Operations _tokenData,\\n        string calldata _name,\\n        string calldata _symbol,\\n        uint8 _decimals,\\n        bool _isMain\\n    ) internal onlyInitializing {\\n        EIP712.__EIP712_init(_name, \\\"1\\\");\\n        BaseViciContract.__BaseViciContract_init(_accessServer);\\n        __ViciERC20_init_unchained(\\n            _tokenData,\\n            _name,\\n            _symbol,\\n            _decimals,\\n            _isMain\\n        );\\n    }\\n\\n    function __ViciERC20_init_unchained(\\n        IERC20Operations _tokenData,\\n        string calldata _name,\\n        string calldata _symbol,\\n        uint8 _decimals,\\n        bool _isMain\\n    ) internal onlyInitializing {\\n        tokenData = _tokenData;\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n        __ViciCoinV02_reinit(_isMain);\\n    }\\n\\n    /**\\n     * @dev Use this one when upgrading from a v1 token\\n     * @dev Use initialize when deploying for the first time on a new chain.\\n     */\\n    function reinit(bool _isMain) public reinitializer(2) {\\n        __ViciCoinV02_reinit(_isMain);\\n    }\\n\\n    function __ViciCoinV02_reinit(bool _isMain) internal onlyInitializing {\\n        isMain = _isMain;\\n        if (isMain) {\\n            vault = address(tokenData);\\n        }\\n    }\\n\\n    /* ################################################################\\n     * Queries\\n     * ##############################################################*/\\n\\n    /**\\n     * @notice Returns the total maximum possible tokens.\\n     */\\n    function maxSupply() public view virtual returns (uint256) {\\n        return tokenData.getMaxSupply();\\n    }\\n\\n    /**\\n     * @inheritdoc IERC20\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return tokenData.totalSupply();\\n    }\\n\\n    function circulatingSupply() public view virtual returns (uint256) {\\n        if (isMain) {\\n            return totalSupply() - balanceOf(vault);\\n        }\\n\\n        return totalSupply();\\n    }\\n\\n    /**\\n     * @notice Returns the total maximum possible tokens.\\n     */\\n    function availableSupply() public view virtual returns (uint256) {\\n        return tokenData.availableSupply();\\n    }\\n\\n    /**\\n     * @dev see IERC20\\n     */\\n    function balanceOf(\\n        address owner\\n    ) public view virtual returns (uint256 balance) {\\n        return tokenData.balanceOf(owner);\\n    }\\n\\n    /**\\n     * @dev Returns the number of distict owners.\\n     * @dev use with `getOwnerAtIndex()` to iterate.\\n     */\\n    function getOwnerCount() public view virtual returns (uint256) {\\n        return tokenData.ownerCount();\\n    }\\n\\n    /**\\n     * @dev Returns the address of the owner at the index.\\n     * @dev use with `ownerCount()` to iterate.\\n     *\\n     * @param index the index into the list of owners\\n     *\\n     * Requirements\\n     * - `index` MUST be less than the number of owners.\\n     */\\n    function getOwnerAtIndex(\\n        uint256 index\\n    ) public view virtual returns (address) {\\n        return tokenData.ownerAtIndex(index);\\n    }\\n\\n    /* ################################################################\\n     * Bridging / Transferring\\n     * ##############################################################*/\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(\\n        address toAddress,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        tokenData.transfer(\\n            this,\\n            ERC20TransferData(_msgSender(), _msgSender(), toAddress, amount)\\n        );\\n        _post_transfer_hook(_msgSender(), toAddress, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     * @dev See {safeTransferFrom}.\\n     *\\n     * Requirements\\n     *\\n     * - `fromAddress` and `toAddress` MUST NOT be the zero address.\\n     * - `toAddress`, `fromAddress`, and calling user MUST NOT be banned.\\n     * - `_tokenId` MUST belong to `fromAddress`.\\n     * - Calling user must be the `fromAddress` or be approved by the `fromAddress`.\\n     * - `_tokenId` must exist\\n     *\\n     * @inheritdoc IERC20\\n     */\\n    function transferFrom(\\n        address fromAddress,\\n        address toAddress,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        tokenData.transfer(\\n            this,\\n            ERC20TransferData(_msgSender(), fromAddress, toAddress, amount)\\n        );\\n        _post_transfer_hook(fromAddress, toAddress, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @inheritdoc IERC677\\n     */\\n    function transferAndCall(\\n        address to,\\n        uint256 value,\\n        bytes calldata data\\n    ) public virtual override returns (bool success) {\\n        transfer(to, value);\\n        ERC677ReceiverInterface receiver = ERC677ReceiverInterface(to);\\n        receiver.onTokenTransfer(_msgSender(), value, data);\\n        return true;\\n    }\\n\\n    /**\\n     * Requirements:\\n     * - caller MUST be a registered bridge contract\\n     * -\\n     *\\n     * @inheritdoc IBridgeable\\n     */\\n    function sentToBridge(\\n        BridgeArgs calldata args\\n    ) public payable onlyRole(BRIDGE_CONTRACT) {\\n        if (isMain) {\\n            tokenData.transfer(\\n                this,\\n                ERC20TransferData(\\n                    args.caller,\\n                    args.fromAddress,\\n                    vault,\\n                    args.amount\\n                )\\n            );\\n            _post_transfer_hook(args.fromAddress, vault, args.amount);\\n        } else {\\n            tokenData.burn(\\n                this,\\n                ERC20BurnData(\\n                    args.caller,\\n                    ANY_ROLE,\\n                    args.fromAddress,\\n                    args.amount\\n                )\\n            );\\n            _post_burn_hook(args.fromAddress, args.amount);\\n        }\\n\\n        emit SentToBridge(\\n            args.fromAddress,\\n            args.toAddress,\\n            1,\\n            args.amount,\\n            args.caller,\\n            args.remoteChainId\\n        );\\n    }\\n\\n    function receivedFromBridge(\\n        BridgeArgs calldata args\\n    ) public payable onlyRole(BRIDGE_CONTRACT) {\\n        if (isMain) {\\n            tokenData.transfer(\\n                this,\\n                ERC20TransferData(vault, vault, args.toAddress, args.amount)\\n            );\\n            _post_transfer_hook(vault, args.toAddress, args.amount);\\n        } else {\\n            tokenData.mint(\\n                this,\\n                ERC20MintData(\\n                    _msgSender(),\\n                    ANY_ROLE,\\n                    args.toAddress,\\n                    args.amount\\n                )\\n            );\\n            _post_mint_hook(args.toAddress, args.amount);\\n        }\\n\\n        emit ReceivedFromBridge(\\n            args.fromAddress,\\n            args.toAddress,\\n            1,\\n            args.amount,\\n            args.caller,\\n            args.remoteChainId\\n        );\\n    }\\n\\n    /* ################################################################\\n     * Approvals / Allowances\\n     * ##############################################################*/\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) public view virtual override returns (uint256) {\\n        return tokenData.allowance(owner, spender);\\n        //return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * Requirements\\n     *\\n     * - caller MUST be the token owner or be approved for all by the token\\n     *     owner.\\n     * - `operator` MUST NOT be the zero address.\\n     * - `operator` and calling user MUST NOT be banned.\\n     *\\n     * @inheritdoc IERC20\\n     */\\n    function approve(\\n        address operator,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        tokenData.permit(this, _msgSender(), operator, amount);\\n        emit Approval(_msgSender(), operator, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-permit}.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(block.timestamp <= deadline, \\\"ERC20Permit: expired deadline\\\");\\n\\n        bytes32 structHash = keccak256(\\n            abi.encode(\\n                _PERMIT_TYPEHASH,\\n                owner,\\n                spender,\\n                value,\\n                _useNonce(owner),\\n                deadline\\n            )\\n        );\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSA.recover(hash, v, r, s);\\n        require(signer == owner, \\\"ERC20Permit: invalid signature\\\");\\n\\n        tokenData.permit(this, owner, spender, value);\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function getChainId() public view returns (uint256) {\\n        return block.chainid;\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-nonces}.\\n     */\\n    function nonces(address owner) public view virtual returns (uint256) {\\n        return _nonces[owner].current();\\n    }\\n\\n    /**\\n     * @notice recover assets in banned or sanctioned accounts\\n     * @dev emits SanctionedAssetsRecovered\\n     *\\n     * Requirements\\n     * - `operator` MUST be the contract owner.\\n     * - `fromAddress` MUST be banned or OFAC sanctioned\\n     * - `toAddress` MAY be the zero address, in which case the\\n     *     assets are burned.\\n     * - `toAddress` MUST NOT be banned or OFAC sanctioned\\n     */\\n    function recoverSanctionedAssets(\\n        address fromAddress,\\n        address toAddress\\n    ) public virtual onlyOwner {\\n        uint256 amount = tokenData.recoverSanctionedAssets(\\n            this,\\n            msg.sender,\\n            fromAddress,\\n            toAddress\\n        );\\n        emit SanctionedAssetsRecovered(fromAddress, toAddress, amount);\\n        _post_transfer_hook(fromAddress, toAddress, amount);\\n    }\\n\\n    /**\\n     * @dev \\\"Consume a nonce\\\": return the current value and increment.\\n     *\\n     * _Available since v4.1._\\n     */\\n    function _useNonce(\\n        address owner\\n    ) internal virtual returns (uint256 current) {\\n        Monotonic.Increaser storage nonce = _nonces[owner];\\n        current = nonce.current();\\n        nonce.add(1);\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    /* ################################################################\\n     * Hooks\\n     * ##############################################################*/\\n\\n    function _post_mint_hook(\\n        address toAddress,\\n        uint256 amount\\n    ) internal virtual {\\n        _post_transfer_hook(address(0), toAddress, amount);\\n    }\\n\\n    function _post_burn_hook(\\n        address fromAddress,\\n        uint256 amount\\n    ) internal virtual {\\n        _post_transfer_hook(fromAddress, address(0), amount);\\n    }\\n\\n    function _post_transfer_hook(\\n        address fromAddress,\\n        address toAddress,\\n        uint256 amount\\n    ) internal virtual {\\n        emit Transfer(fromAddress, toAddress, amount);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[43] private __gap;\\n}\\n\"\r\n    },\r\n    \"IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"ERC677ReceiverInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\ninterface ERC677ReceiverInterface {\\n  function onTokenTransfer(\\n    address sender,\\n    uint256 amount,\\n    bytes calldata data\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"IBridgeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"AccessConstants.sol\\\";\\n\\nstruct BridgeArgs {\\n    address caller;\\n    address fromAddress;\\n    address toAddress;\\n    uint256 remoteChainId;\\n    uint256 itemId;\\n    uint256 amount;\\n}\\n\\nstruct SendParams {\\n    address fromAddress;\\n    uint256 dstChainId;\\n    address toAddress;\\n    uint256 itemId;\\n    uint256 amount;\\n}\\n\\n/**\\n * @title Bridgeable Interface\\n * @dev common interface for bridgeable tokens\\n */\\ninterface IBridgeable {\\n    event SentToBridge(\\n        address indexed fromAddress,\\n        address indexed toAddress,\\n        uint256 indexed itemId,\\n        uint256 amount,\\n        address caller,\\n        uint256 dstChainId\\n    );\\n\\n    event ReceivedFromBridge(\\n        address indexed fromAddress,\\n        address indexed toAddress,\\n        uint256 indexed itemId,\\n        uint256 amount,\\n        address caller,\\n        uint256 srcChainId\\n    );\\n\\n    /**\\n     * @dev Callback function to notify when tokens have been sent through a bridge.\\n     * @dev Implementations SHOULD either lock or burn these tokens.\\n     * @param args.caller the original message sender\\n     * @param args.fromAddress the owner of the tokens that were sent\\n     * @param args.toAddress the destination address on the other chain\\n     * @param args.remoteChainId the chain id for the destination\\n     * @param args.itemId the token id for ERC721 or ERC1155 tokens. Ignored for ERC20 tokens.\\n     * @param args.amount the amount of tokens sent for ERC20 and ERC1155 tokens. Ignored for ERC721 tokens.\\n     */\\n    function sentToBridge(BridgeArgs calldata args) external payable;\\n\\n    /**\\n     * @dev Callback function to notify when tokens have been sent through a bridge.\\n     * @dev Implementations SHOULD either unlock or mint these tokens and send them to the `toAddress`.\\n     * @dev IMPORTANT: access to this function MUST be tightly controlled. Otherwise it's an infinite free tokens function.\\n     * @param args.caller the original message sender\\n     * @param args.fromAddress the owner of the tokens that were sent\\n     * @param args.toAddress the destination address on this chain\\n     * @param args.srcChainId the chain id for the source\\n     * @param args.itemId the token id for ERC721 or ERC1155 tokens. Ignored for ERC20 tokens.\\n     * @param args.amount the amount of tokens sent for ERC20 and ERC1155 tokens. Ignored for ERC721 tokens.\\n     */\\n    function receivedFromBridge(BridgeArgs calldata args) external payable;\\n}\\n\"\r\n    },\r\n    \"AccessConstants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nbytes32 constant DEFAULT_ADMIN = 0x00;\\nbytes32 constant BANNED = \\\"banned\\\";\\nbytes32 constant MODERATOR = \\\"moderator\\\";\\nbytes32 constant ANY_ROLE = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\nbytes32 constant BRIDGE_CONTRACT = keccak256(\\\"BRIDGE_CONTRACT\\\");\\nbytes32 constant BRIDGE_ROLE_MGR = keccak256(\\\"BRIDGE_ROLE_MGR\\\");\\n\"\r\n    },\r\n    \"BaseViciContract.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"IERC20.sol\\\";\\nimport \\\"IERC721.sol\\\";\\nimport \\\"IERC1155.sol\\\";\\n\\nimport \\\"IAccessServer.sol\\\";\\nimport \\\"Pausable.sol\\\";\\nimport \\\"ViciAccess.sol\\\";\\n\\n/**\\n * @title Base Vici Contract\\n * @notice (c) 2023 ViciNFT https://vicinft.com/\\n * @author Josh Davis <josh.davis@vicinft.com>\\n * \\n * @dev This abstract base contract grants the following features to subclasses\\n * - Owner and role based access\\n * - Ability to pause / unpause\\n * - Rescue functions for crypto and tokens transferred to the contract\\n */\\nabstract contract BaseViciContract is ViciAccess, Pausable {\\n    function __BaseViciContract_init(IAccessServer _accessServer) internal onlyInitializing {\\n        __ViciAccess_init(_accessServer);\\n\\t\\t__Pausable_init();\\n        __BaseViciContract_init_unchained();\\n    }\\n\\n    function __BaseViciContract_init_unchained() internal onlyInitializing {}\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - Calling user MUST be owner.\\n     * - The contract must not be paused.\\n     */\\n\\tfunction pause() external onlyOwner {\\n\\t\\t_pause();\\n\\t}\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - Calling user MUST be owner.\\n     * - The contract must be paused.\\n     */\\n\\tfunction unpause() external onlyOwner {\\n\\t\\t_unpause();\\n\\t}\\n\\t\\n\\tfunction _withdrawERC20(\\n\\t\\tuint256 amount,\\n\\t\\taddress payable toAddress,\\n\\t\\tIERC20 tokenContract\\n\\t) internal virtual {\\n\\t\\ttokenContract.transfer(toAddress, amount);\\n\\t}\\n\\t\\n\\tfunction withdrawERC20(\\n\\t\\tuint256 amount,\\n\\t\\taddress payable toAddress,\\n\\t\\tIERC20 tokenContract\\n\\t) public onlyOwner virtual {\\n\\t\\t_withdrawERC20(amount, toAddress, tokenContract);\\n\\t}\\n\\t\\n\\tfunction _withdrawERC721(\\n\\t\\tuint256 tokenId,\\n\\t\\taddress payable toAddress,\\n\\t\\tIERC721 tokenContract\\n\\t) internal virtual {\\n\\t\\ttokenContract.safeTransferFrom(address(this), toAddress, tokenId);\\n\\t}\\n\\t\\n\\tfunction withdrawERC721(\\n\\t\\tuint256 tokenId,\\n\\t\\taddress payable toAddress,\\n\\t\\tIERC721 tokenContract\\n\\t) public virtual onlyOwner {\\n\\t\\t_withdrawERC721(tokenId, toAddress, tokenContract);\\n\\t}\\n\\t\\n\\tfunction _withdrawERC1155(\\n\\t\\tuint256 tokenId,\\n\\t\\tuint256 amount,\\n\\t\\taddress payable toAddress,\\n        bytes calldata data,\\n\\t\\tIERC1155 tokenContract\\n\\t) internal virtual {\\n\\t\\ttokenContract.safeTransferFrom(\\n\\t\\t\\taddress(this), toAddress, tokenId, amount, data\\n\\t\\t);\\n\\t}\\n\\t\\n\\tfunction withdrawERC1155(\\n\\t\\tuint256 tokenId,\\n\\t\\tuint256 amount,\\n\\t\\taddress payable toAddress,\\n        bytes calldata data,\\n\\t\\tIERC1155 tokenContract\\n\\t) public virtual onlyOwner {\\n\\t\\t_withdrawERC1155(tokenId, amount, toAddress, data, tokenContract);\\n\\t}\\n\\t\\n\\tfunction _withdraw(\\n\\t\\taddress payable toAddress\\n\\t) internal virtual {\\n\\t\\ttoAddress.transfer(address(this).balance);\\n\\t}\\n\\t\\n\\tfunction withdraw(\\n\\t\\taddress payable toAddress\\n\\t) public virtual onlyOwner {\\n\\t\\t_withdraw(toAddress);\\n\\t}\\n\\n\\treceive() external payable virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\"\r\n    },\r\n    \"IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"IAccessServer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface ChainalysisSanctionsList {\\n    function isSanctioned(address addr) external view returns (bool);\\n}\\n\\n/**\\n * @title Access Server Interface\\n * @notice (c) 2023 ViciNFT https://vicinft.com/\\n * @author Josh Davis <josh.davis@vicinft.com>\\n *\\n * @dev Interface for the AccessServer.\\n * @dev AccessServer client contracts SHOULD refer to the server contract via\\n * this interface.\\n */\\ninterface IAccessServer {\\n    /**\\n     * @notice Emitted when a new administrator is added.\\n     */\\n    event AdminAddition(address indexed admin);\\n\\n    /**\\n     * @notice Emitted when an administrator is removed.\\n     */\\n    event AdminRemoval(address indexed admin);\\n\\n    /**\\n     * @notice Emitted when a resource is registered.\\n     */\\n    event ResourceRegistration(address indexed resource);\\n\\n    /**\\n     * @notice Emitted when `newAdminRole` is set globally as ``role``'s admin\\n     * role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {GlobalRoleAdminChanged} not being emitted signaling this.\\n     */\\n    event GlobalRoleAdminChanged(\\n        bytes32 indexed role,\\n        bytes32 indexed previousAdminRole,\\n        bytes32 indexed newAdminRole\\n    );\\n\\n    /**\\n     * @notice Emitted when `account` is granted `role` globally.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event GlobalRoleGranted(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n\\n    /**\\n     * @notice Emitted when `account` is revoked `role` globally.\\n     * @notice `account` will still have `role` where it was granted\\n     * specifically for any resources\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event GlobalRoleRevoked(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n\\n    /* ################################################################\\n     * Modifiers / Rule Enforcement\\n     * ##############################################################*/\\n\\n    /**\\n     * @dev Throws if the account is not the resource's owner.\\n     */\\n    function enforceIsOwner(address resource, address account) external view;\\n\\n    /**\\n     * @dev Throws if the account is not the calling resource's owner.\\n     */\\n    function enforceIsMyOwner(address account) external view;\\n\\n    /**\\n     * @dev Reverts if the account is not the resource owner or doesn't have\\n     * the moderator role for the resource.\\n     */\\n    function enforceIsModerator(address resource, address account)\\n        external\\n        view;\\n\\n    /**\\n     * @dev Reverts if the account is not the resource owner or doesn't have\\n     * the moderator role for the calling resource.\\n     */\\n    function enforceIsMyModerator(address account) external view;\\n\\n    /**\\n     * @dev Reverts if the account is under OFAC sanctions or is banned for the\\n     * resource\\n     */\\n    function enforceIsNotBanned(address resource, address account)\\n        external\\n        view;\\n\\n    /**\\n     * @dev Reverts if the account is under OFAC sanctions or is banned for the\\n     * calling resource\\n     */\\n    function enforceIsNotBannedForMe(address account) external view;\\n\\n    /**\\n     * @dev Reverts the account is on the OFAC sanctions list.\\n     */\\n    function enforceIsNotSanctioned(address account) external view;\\n\\n    /**\\n     * @dev Reverts if the account is not the resource owner or doesn't have\\n     * the required role for the resource.\\n     */\\n    function enforceOwnerOrRole(\\n        address resource,\\n        bytes32 role,\\n        address account\\n    ) external view;\\n\\n    /**\\n     * @dev Reverts if the account is not the resource owner or doesn't have\\n     * the required role for the calling resource.\\n     */\\n    function enforceOwnerOrRoleForMe(bytes32 role, address account)\\n        external\\n        view;\\n\\n    /* ################################################################\\n     * Administration\\n     * ##############################################################*/\\n\\n    /**\\n     * @dev Returns `true` if `admin` is an administrator of this AccessServer.\\n     */\\n    function isAdministrator(address admin) external view returns (bool);\\n\\n    /**\\n     * @dev Adds `admin` as an administrator of this AccessServer.\\n     */\\n    function addAdministrator(address admin) external;\\n\\n    /**\\n     * @dev Removes `admin` as an administrator of this AccessServer.\\n     */\\n    function removeAdministrator(address admin) external;\\n\\n    /**\\n     * @dev Returns the number of administrators of this AccessServer.\\n     * @dev Use with `getAdminAt()` to enumerate.\\n     */\\n    function getAdminCount() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the administrator at the index.\\n     * @dev Use with `getAdminCount()` to enumerate.\\n     */\\n    function getAdminAt(uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the list of administrators\\n     */\\n    function getAdmins() external view returns (address[] memory);\\n\\n    /**\\n     * @dev returns the Chainalysis sanctions oracle.\\n     */\\n    function sanctionsList() external view returns (ChainalysisSanctionsList);\\n\\n    /**\\n     * @dev Sets the Chainalysis sanctions oracle.\\n     * @dev setting this to the zero address disables sanctions compliance.\\n     * @dev Don't disable sanctions compliance unless there is some problem\\n     * with the sanctions oracle.\\n     */\\n    function setSanctionsList(ChainalysisSanctionsList _sanctionsList) external;\\n\\n    /**\\n     * @dev Returns `true` if `account` is under OFAC sanctions.\\n     * @dev Returns `false` if sanctions compliance is disabled.\\n     */\\n    function isSanctioned(address account) external view returns (bool);\\n\\n    /* ################################################################\\n     * Registration / Ownership\\n     * ##############################################################*/\\n\\n    /**\\n     * @dev Registers the calling resource and sets the resource owner.\\n     * @dev Grants the default administrator role for the resource to the\\n     * resource owner.\\n     *\\n     * Requirements:\\n     * - caller SHOULD be a contract\\n     * - caller MUST NOT be already registered\\n     * - `owner` MUST NOT be the zero address\\n     * - `owner` MUST NOT be globally banned\\n     * - `owner` MUST NOT be under OFAC sanctions\\n     */\\n    function register(address owner) external;\\n\\n    /**\\n     * @dev Returns `true` if `resource` is registered.\\n     */\\n    function isRegistered(address resource) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the owner of `resource`.\\n     */\\n    function getResourceOwner(address resource) external view returns (address);\\n\\n    /**\\n     * @dev Returns the owner of the calling resource.\\n     */\\n    function getMyOwner() external view returns (address);\\n\\n    /**\\n     * @dev Sets the owner for the calling resource.\\n     *\\n     * Requirements:\\n     * - caller MUST be a registered resource\\n     * - `operator` MUST be the current owner\\n     * - `newOwner` MUST NOT be the zero address\\n     * - `newOwner` MUST NOT be globally banned\\n     * - `newOwner` MUST NOT be banned by the calling resource\\n     * - `newOwner` MUST NOT be under OFAC sanctions\\n     * - `newOwner` MUST NOT be the current owner\\n     */\\n    function setMyOwner(address operator, address newOwner) external;\\n\\n    /* ################################################################\\n     * Role Administration\\n     * ##############################################################*/\\n\\n    /**\\n     * @dev Returns the admin role that controls `role` by default for all\\n     * resources. See {grantRole} and {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getGlobalRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role` for a resource.\\n     * See {grantRole} and {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdminForResource(address resource, bytes32 role)\\n        external\\n        view\\n        returns (bytes32);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role` for the calling resource.\\n     * See {grantRole} and {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getMyRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role on as default all\\n     * resources.\\n     *\\n     * Requirements:\\n     * - caller MUST be an an administrator of this AccessServer\\n     */\\n    function setGlobalRoleAdmin(bytes32 role, bytes32 adminRole) external;\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role on the calling resource.\\n     * @dev There is no set roleAdminForResource vs setRoleAdminForMe.\\n     * @dev Resources must manage their own role admins or use the global\\n     * defaults.\\n     *\\n     * Requirements:\\n     * - caller MUST be a registered resource\\n     */\\n    function setRoleAdmin(\\n        address operator,\\n        bytes32 role,\\n        bytes32 adminRole\\n    ) external;\\n\\n    /* ################################################################\\n     * Checking Role Membership\\n     * ##############################################################*/\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role` as default for\\n     * all resources.\\n     */\\n    function hasGlobalRole(bytes32 role, address account)\\n        external\\n        view\\n        returns (bool);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role` globally or for\\n     * `resource`.\\n     */\\n    function hasRole(\\n        address resource,\\n        bytes32 role,\\n        address account\\n    ) external view returns (bool);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role` for `resource`.\\n     */\\n    function hasLocalRole(\\n        address resource,\\n        bytes32 role,\\n        address account\\n    ) external view returns (bool);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role` globally or for\\n     * the calling resource.\\n     */\\n    function hasRoleForMe(bytes32 role, address account)\\n        external\\n        view\\n        returns (bool);\\n\\n    /**\\n     * @dev Returns `true` if account` is banned globally or from `resource`.\\n     */\\n    function isBanned(address resource, address account)\\n        external\\n        view\\n        returns (bool);\\n\\n    /**\\n     * @dev Returns `true` if account` is banned globally or from the calling\\n     * resource.\\n     */\\n    function isBannedForMe(address account) external view returns (bool);\\n\\n    /**\\n     * @dev Reverts if `account` has not been granted `role` globally or for\\n     * `resource`.\\n     */\\n    function checkRole(\\n        address resource,\\n        bytes32 role,\\n        address account\\n    ) external view;\\n\\n    /**\\n     * @dev Reverts if `account` has not been granted `role` globally or for\\n     * the calling resource.\\n     */\\n    function checkRoleForMe(bytes32 role, address account) external view;\\n\\n    /* ################################################################\\n     * Granting Roles\\n     * ##############################################################*/\\n\\n    /**\\n     * @dev Grants `role` to `account` as default for all resources.\\n     * @dev Warning: This function can do silly things like applying a global\\n     * ban to a resource owner.\\n     *\\n     * Requirements:\\n     * - caller MUST be an an administrator of this AccessServer\\n     * - If `role` is not BANNED_ROLE_NAME, `account` MUST NOT be banned or\\n     *   under OFAC sanctions. Roles cannot be granted to such accounts.\\n     */\\n    function grantGlobalRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Grants `role` to `account` for the calling resource as `operator`.\\n     * @dev There is no set grantRoleForResource vs grantRoleForMe.\\n     * @dev Resources must manage their own roles or use the global defaults.\\n     *\\n     * Requirements:\\n     * - caller MUST be a registered resource\\n     * - `operator` SHOULD be the account that called `grantRole()` on the\\n     *    calling resource.\\n     * - `operator` MUST be the resource owner or have the role admin role\\n     *    for `role` on the calling resource.\\n     * - If `role` is BANNED_ROLE_NAME, `account` MUST NOT be the resource\\n     *   owner. You can't ban the owner.\\n     * - If `role` is not BANNED_ROLE_NAME, `account` MUST NOT be banned or\\n     *   under OFAC sanctions. Roles cannot be granted to such accounts.\\n     */\\n    function grantRole(\\n        address operator,\\n        bytes32 role,\\n        address account\\n    ) external;\\n\\n    /* ################################################################\\n     * Revoking / Renouncing Roles\\n     * ##############################################################*/\\n\\n    /**\\n     * @dev Revokes `role` as default for all resources from `account`.\\n     *\\n     * Requirements:\\n     * - caller MUST be an an administrator of this AccessServer\\n     */\\n    function revokeGlobalRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account` for the calling resource as\\n     * `operator`.\\n     *\\n     * Requirements:\\n     * - caller MUST be a registered resource\\n     * - `operator` SHOULD be the account that called `revokeRole()` on the\\n     *    calling resource.\\n     * - `operator` MUST be the resource owner or have the role admin role\\n     *    for `role` on the calling resource.\\n     * - if `role` is DEFAULT_ADMIN_ROLE, `account` MUST NOT be the calling\\n     *   resource's owner. The admin role cannot be revoked from the owner.\\n     */\\n    function revokeRole(\\n        address operator,\\n        bytes32 role,\\n        address account\\n    ) external;\\n\\n    /**\\n     * @dev Remove the default role for yourself. You will still have the role\\n     * for any resources where it was granted individually.\\n     *\\n     * Requirements:\\n     * - caller MUST have the role they are renouncing at the global level.\\n     * - `role` MUST NOT be BANNED_ROLE_NAME. You can't unban yourself.\\n     */\\n    function renounceRoleGlobally(bytes32 role) external;\\n\\n    /**\\n     * @dev Renounces `role` for the calling resource as `operator`.\\n     *\\n     * Requirements:\\n     * - caller MUST be a registered resource\\n     * - `operator` SHOULD be the account that called `renounceRole()` on the\\n     *    calling resource.\\n     * - `operator` MUST have the role they are renouncing on the calling\\n     *   resource.\\n     * - if `role` is DEFAULT_ADMIN_ROLE, `operator` MUST NOT be the calling\\n     *   resource's owner. The owner cannot renounce the admin role.\\n     * - `role` MUST NOT be BANNED_ROLE_NAME. You can't unban yourself.\\n     */\\n    function renounceRole(address operator, bytes32 role) external;\\n\\n    /* ################################################################\\n     * Enumerating Role Members\\n     * ##############################################################*/\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role` set at the global\\n     * level.\\n     * @dev Use with `getGlobalRoleMember()` to enumerate.\\n     */\\n    function getGlobalRoleMemberCount(bytes32 role) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role` set at the global\\n     * level.\\n     * @dev Use with `getGlobalRoleMemberCount()` to enumerate.\\n     *\\n     * Requirements:\\n     * `index` MUST be >= 0 and < `getGlobalRoleMemberCount(role)`\\n     */\\n    function getGlobalRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the list of accounts that have `role` set at the global\\n     * level.\\n     */\\n    function getGlobalRoleMembers(bytes32 role) external view returns (address[] memory);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role` set globally or for \\n     * `resource`.\\n     * @dev Use with `getRoleMember()` to enumerate.\\n     */\\n    function getRoleMemberCount(address resource, bytes32 role) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role` set globally or for \\n     * `resource`. \\n     * @dev If a role has global and local members, the global members \\n     * will be returned first.\\n     * @dev If a user has the role globally and locally, the same user will be \\n     * returned at two different indexes.\\n     * @dev If you only want locally assigned role members, start the index at\\n     * `getGlobalRoleMemberCount(role)`.\\n     * @dev Use with `getRoleMemberCount()` to enumerate.\\n     *\\n     * Requirements:\\n     * `index` MUST be >= 0 and < `getRoleMemberCount(role)`\\n     */\\n    function getRoleMember(\\n        address resource,\\n        bytes32 role,\\n        uint256 index\\n    ) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role` set globally or for \\n     * the calling resource.\\n     * @dev Use with `getMyRoleMember()` to enumerate.\\n     */\\n    function getMyRoleMemberCount(bytes32 role) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role` set globally or for \\n     * the calling resource.\\n     * @dev If a role has global and local members, the global members \\n     * will be returned first.\\n     * @dev If a user has the role globally and locally, the same user will be \\n     * returned at two different indexes.\\n     * @dev If you only want locally assigned role members, start the index at\\n     * `getGlobalRoleMemberCount(role)`.\\n     * @dev Use with `getMyRoleMemberCount()` to enumerate.\\n     *\\n     * Requirements:\\n     * `index` MUST be >= 0 and < `getMyRoleMemberCount(role)`\\n     */\\n    function getMyRoleMember(bytes32 role, uint256 index) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n *\\n * @dev This contract is a direct copy of OpenZeppelin's PauseableUpgradeable, \\n * moved here, renamed, and modified to use our Context and Initializable \\n * contracts so we don't have to deal with incompatibilities between OZ's\\n * contracts and contracts-upgradeable packages.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.17;\\nimport \\\"Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n *\\n * @dev This contract is a direct copy of OpenZeppelin's ContextUpgradeable, \\n * moved here, renamed, and modified to use our Initializable interface so we \\n * don't have to deal with incompatibilities between OZ'` contracts and \\n * contracts-upgradeable `\\n */\\nabstract contract Context is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"AddressUtils.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n *\\n * @dev This contract is a direct copy of OpenZeppelin's InitializableUpgradeable,\\n * moved here, renamed, and modified to use our AddressUtils library so we\\n * don't have to deal with incompatibilities between OZ'` contracts and\\n * contracts-upgradeable `\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) ||\\n                (!AddressUtils.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(\\n            !_initializing && _initialized < version,\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"AddressUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.17;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n *\\n * @dev This contract is a direct copy of OpenZeppelin's AddressUpgradeable, \\n * moved here and renamed so we don't have to deal with incompatibilities \\n * between OZ'` contracts and contracts-upgradeable `\\n */\\nlibrary AddressUtils {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"ViciAccess.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"ERC165.sol\\\";\\n\\nimport \\\"Context.sol\\\";\\nimport \\\"AccessConstants.sol\\\";\\nimport \\\"IViciAccess.sol\\\";\\nimport {IAccessServer} from \\\"IAccessServer.sol\\\";\\n\\n/**\\n * @title ViciAccess\\n * @notice (c) 2023 ViciNFT https://vicinft.com/\\n * @author Josh Davis <josh.davis@vicinft.com>\\n *\\n * @dev This contract implements OpenZeppelin's IAccessControl and\\n * IAccessControlEnumerable interfaces as well as the behavior of their\\n * Ownable contract.\\n * @dev The differences are:\\n * - Use of an external AccessServer contract to track roles and ownership.\\n * - Support for OFAC sanctions compliance\\n * - Support for a negative BANNED role\\n * - A contract owner is automatically granted the DEFAULT ADMIN role.\\n * - Contract owner cannot renounce ownership, can only transfer it.\\n * - DEFAULT ADMIN role cannot be revoked from the Contract owner, nor can they\\n *   renouce that role.\\n * @dev see `AccessControl`, `AccessControlEnumerable`, and `Ownable` for\\n * additional documentation.\\n */\\nabstract contract ViciAccess is Context, IViciAccess, ERC165 {\\n    IAccessServer public accessServer;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = DEFAULT_ADMIN;\\n\\n    // Role for banned users.\\n    bytes32 public constant BANNED_ROLE_NAME = BANNED;\\n\\n    // Role for moderator.\\n    bytes32 public constant MODERATOR_ROLE_NAME = MODERATOR;\\n\\n    /* ################################################################\\n     * Initialization\\n     * ##############################################################*/\\n\\n    function __ViciAccess_init(\\n        IAccessServer _accessServer\\n    ) internal onlyInitializing {\\n        __ViciAccess_init_unchained(_accessServer);\\n    }\\n\\n    function __ViciAccess_init_unchained(\\n        IAccessServer _accessServer\\n    ) internal onlyInitializing {\\n        accessServer = _accessServer;\\n        accessServer.register(_msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override returns (bool) {\\n        return\\n            interfaceId == type(IAccessControl).interfaceId ||\\n            interfaceId == type(IAccessControlEnumerable).interfaceId ||\\n            ERC165.supportsInterface(interfaceId);\\n    }\\n\\n    /* ################################################################\\n     * Checking Roles\\n     * ##############################################################*/\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev reverts if called by an account that is not the owner and doesn't\\n     *     have the required role.\\n     */\\n    modifier onlyOwnerOrRole(bytes32 role) {\\n        enforceOwnerOrRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        accessServer.enforceIsMyOwner(_msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev reverts if the caller is banned or on the OFAC sanctions list.\\n     */\\n    modifier noBannedAccounts() {\\n        enforceIsNotBanned(_msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev reverts if the account is banned or on the OFAC sanctions list.\\n     */\\n    modifier notBanned(address account) {\\n        enforceIsNotBanned(account);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Revert if the address is on the OFAC sanctions list\\n     */\\n    modifier notSanctioned(address account) {\\n        enforceIsNotSanctioned(account);\\n        _;\\n    }\\n\\n    /**\\n     * @dev reverts if the account is not the owner and doesn't have the required role.\\n     */\\n    function enforceOwnerOrRole(\\n        bytes32 role,\\n        address account\\n    ) public view virtual override {\\n        if (account != owner()) {\\n            _checkRole(role, account);\\n        }\\n    }\\n\\n    /**\\n     * @dev reverts if the account is banned or on the OFAC sanctions list.\\n     */\\n    function enforceIsNotBanned(address account) public view virtual override {\\n        accessServer.enforceIsNotBannedForMe(account);\\n    }\\n\\n    /**\\n     * @dev Revert if the address is on the OFAC sanctions list\\n     */\\n    function enforceIsNotSanctioned(\\n        address account\\n    ) public view virtual override {\\n        accessServer.enforceIsNotSanctioned(account);\\n    }\\n\\n    /**\\n     * @dev returns true if the account is banned.\\n     */\\n    function isBanned(\\n        address account\\n    ) public view virtual override returns (bool) {\\n        return accessServer.isBannedForMe(account);\\n    }\\n\\n    /**\\n     * @dev returns true if the account is on the OFAC sanctions list.\\n     */\\n    function isSanctioned(\\n        address account\\n    ) public view virtual override returns (bool) {\\n        return accessServer.isSanctioned(account);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(\\n        bytes32 role,\\n        address account\\n    ) public view virtual override returns (bool) {\\n        return accessServer.hasRoleForMe(role, account);\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (role != ANY_ROLE) {\\n            accessServer.checkRoleForMe(role, account);\\n        }\\n    }\\n\\n    /* ################################################################\\n     * Owner management\\n     * ##############################################################*/\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual override returns (address) {\\n        return accessServer.getMyOwner();\\n    }\\n\\n    /**\\n     * Make another account the owner of this contract.\\n     * @param newOwner the new owner.\\n     *\\n     * Requirements:\\n     *\\n     * - Calling user MUST be owner.\\n     * - `newOwner` MUST NOT have the banned role.\\n     */\\n    function transferOwnership(address newOwner) public virtual {\\n        address oldOwner = owner();\\n        accessServer.setMyOwner(_msgSender(), newOwner);\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /* ################################################################\\n     * Role Administration\\n     * ##############################################################*/\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(\\n        bytes32 role\\n    ) public view virtual override returns (bytes32) {\\n        return accessServer.getMyRoleAdmin(role);\\n    }\\n\\n    /**\\n     * @dev Sets the admin role that controls a role.\\n     *\\n     * Requirements:\\n     * - caller MUST be the owner or have the admin role.\\n     */\\n    function setRoleAdmin(bytes32 role, bytes32 adminRole) public virtual {\\n        accessServer.setRoleAdmin(_msgSender(), role, adminRole);\\n    }\\n\\n    /* ################################################################\\n     * Enumerating role members\\n     * ##############################################################*/\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(\\n        bytes32 role,\\n        uint256 index\\n    ) public view virtual override returns (address) {\\n        return accessServer.getMyRoleMember(role, index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(\\n        bytes32 role\\n    ) public view virtual override returns (uint256) {\\n        return accessServer.getMyRoleMemberCount(role);\\n    }\\n\\n    /* ################################################################\\n     * Granting / Revoking / Renouncing roles\\n     * ##############################################################*/\\n\\n    /**\\n     *  Requirements:\\n     *\\n     * - Calling user MUST have the admin role\\n     * - If `role` is banned, calling user MUST be the owner\\n     *   and `address` MUST NOT be the owner.\\n     * - If `role` is not banned, `account` MUST NOT be under sanctions.\\n     *\\n     * @inheritdoc IAccessControl\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override {\\n        if (!hasRole(role, account)) {\\n            accessServer.grantRole(_msgSender(), role, account);\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * Take the role away from the account. This will throw an exception\\n     * if you try to take the admin role (0x00) away from the owner.\\n     *\\n     * Requirements:\\n     *\\n     * - Calling user has admin role.\\n     * - If `role` is admin, `address` MUST NOT be owner.\\n     * - if `role` is banned, calling user MUST be owner.\\n     *\\n     * @inheritdoc IAccessControl\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override {\\n        if (hasRole(role, account)) {\\n            accessServer.revokeRole(_msgSender(), role, account);\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * Take a role away from yourself. This will throw an exception if you\\n     * are the contract owner and you are trying to renounce the admin role (0x00).\\n     *\\n     * Requirements:\\n     *\\n     * - if `role` is admin, calling user MUST NOT be owner.\\n     * - `account` is ignored.\\n     * - `role` MUST NOT be banned.\\n     *\\n     * @inheritdoc IAccessControl\\n     */\\n    function renounceRole(bytes32 role, address) public virtual override {\\n        renounceRole(role);\\n    }\\n\\n    /**\\n     * Take a role away from yourself. This will throw an exception if you\\n     * are the contract owner and you are trying to renounce the admin role (0x00).\\n     *\\n     * Requirements:\\n     *\\n     * - if `role` is admin, calling user MUST NOT be owner.\\n     * - `role` MUST NOT be banned.\\n     */\\n    function renounceRole(bytes32 role) public virtual {\\n        accessServer.renounceRole(_msgSender(), role);\\n        emit RoleRevoked(role, _msgSender(), _msgSender());\\n        // if (hasRole(role, _msgSender())) {\\n        // }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"IViciAccess.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"IAccessControlEnumerable.sol\\\";\\n\\n/**\\n * @title ViciAccess Interface\\n * @notice (c) 2023 ViciNFT https://vicinft.com/\\n * @author Josh Davis <josh.davis@vicinft.com>\\n *\\n * @dev Interface for ViciAccess.\\n * @dev External contracts SHOULD refer to implementers via this interface.\\n */\\ninterface IViciAccess is IAccessControlEnumerable {\\n    /**\\n     * @dev emitted when the owner changes.\\n     */\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Revert if the address is on the OFAC sanctions list\\n     */\\n    function enforceIsNotSanctioned(address account) external view;\\n\\n    /**\\n     * @dev reverts if the account is banned or on the OFAC sanctions list.\\n     */\\n    function enforceIsNotBanned(address account) external view;\\n\\n    /**\\n     * @dev reverts if the account is not the owner and doesn't have the required role.\\n     */\\n    function enforceOwnerOrRole(bytes32 role, address account) external view;\\n\\n    /**\\n     * @dev returns true if the account is on the OFAC sanctions list.\\n     */\\n    function isSanctioned(address account) external view returns (bool);\\n\\n    /**\\n     * @dev returns true if the account is banned.\\n     */\\n    function isBanned(address account) external view returns (bool);\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() external view returns (address);\\n}\"\r\n    },\r\n    \"IAccessControlEnumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"EIP712.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"ECDSA.sol\\\";\\nimport \\\"Initializable.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n *\\n * @custom:storage-size 52\\n */\\nabstract contract EIP712 is Initializable {\\n    /* solhint-disable var-name-mixedcase */\\n    bytes32 private _HASHED_NAME;\\n    bytes32 private _HASHED_VERSION;\\n    bytes32 private constant _TYPE_HASH = keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\\n        __EIP712_init_unchained(name, version);\\n    }\\n\\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        return _buildDomainSeparator(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash());\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev The hash of the name parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712NameHash() internal virtual view returns (bytes32) {\\n        return _HASHED_NAME;\\n    }\\n\\n    /**\\n     * @dev The hash of the version parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712VersionHash() internal virtual view returns (bytes32) {\\n        return _HASHED_VERSION;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"Monotonic.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Copyright (c) 2021 the ethier authors (github.com/divergencetech/ethier)\\npragma solidity ^0.8.17;\\n\\n/**\\n@notice Provides monotonic increasing and decreasing values, similar to\\nOpenZeppelin's Counter but (a) limited in direction, and (b) allowing for steps\\n> 1.\\n */\\nlibrary Monotonic {\\n    /**\\n    @notice Holds a value that can only increase.\\n    @dev The internal value MUST NOT be accessed directly. Instead use current()\\n    and add().\\n     */\\n    struct Increaser {\\n        uint256 value;\\n    }\\n\\n    /// @notice Returns the current value of the Increaser.\\n    function current(Increaser storage incr) internal view returns (uint256) {\\n        return incr.value;\\n    }\\n\\n    /// @notice Adds x to the Increaser's value.\\n    function add(Increaser storage incr, uint256 x) internal {\\n        incr.value += x;\\n    }\\n\\n    /**\\n    @notice Holds a value that can only decrease.\\n    @dev The internal value MUST NOT be accessed directly. Instead use current()\\n    and subtract().\\n     */\\n    struct Decreaser {\\n        uint256 value;\\n    }\\n\\n    /// @notice Returns the current value of the Decreaser.\\n    function current(Decreaser storage decr) internal view returns (uint256) {\\n        return decr.value;\\n    }\\n\\n    /// @notice Subtracts x from the Decreaser's value.\\n    function subtract(Decreaser storage decr, uint256 x) internal {\\n        decr.value -= x;\\n    }\\n\\n    struct Counter{\\n        uint256 value;\\n    }\\n\\n    function current(Counter storage _counter) internal view returns (uint256) {\\n        return _counter.value;\\n    }\\n\\n    function add(Counter storage _augend, uint256 _addend) internal returns (uint256) {\\n        _augend.value += _addend;\\n        return _augend.value;\\n    }\\n\\n    function subtract(Counter storage _minuend, uint256 _subtrahend) internal returns (uint256) {\\n        _minuend.value -= _subtrahend;\\n        return _minuend.value;\\n    }\\n\\n    function increment(Counter storage _counter) internal returns (uint256) {\\n        return add(_counter, 1);\\n    }\\n\\n    function decrement(Counter storage _counter) internal returns (uint256) {\\n        return subtract(_counter, 1);\\n    }\\n\\n    function reset(Counter storage _counter) internal {\\n        _counter.value = 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"IERC677.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"IERC20Metadata.sol\\\";\\n\\n/**\\n * @title IERC677 interface\\n * @notice ERC677 extends ERC20 by adding the transfer and call function.\\n */\\ninterface IERC677 is IERC20Metadata {\\n\\n    /**\\n     * @notice transfers `value` to `to` and calls `onTokenTransfer()`.\\n     * @param to the ERC677 Receiver\\n     * @param value the amount to transfer\\n     * @param data the abi encoded call data\\n     * \\n     * Requirements:\\n     * - `to` MUST implement ERC677ReceiverInterface.\\n     * - `value` MUST be sufficient to cover the receiving contract's fee.\\n     * - `data` MUST be the types expected by the receiving contract.\\n     * - caller MUST be a contract that implements the callback function \\n     *     required by the receiving contract.\\n     * - this contract must represent a token that is accepted by the receiving\\n     *     contract.\\n     */\\n    function transferAndCall(\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) external returns (bool success);\\n}\\n\"\r\n    },\r\n    \"IERC20Operations.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"IViciAccess.sol\\\";\\nimport \\\"IOwnerOperator.sol\\\";\\n\\n/**\\n * Information needed to mint a single token.\\n */\\nstruct ERC20MintData {\\n    address operator;\\n    bytes32 requiredRole;\\n    address toAddress;\\n    uint256 amount;\\n}\\n\\n/**\\n * Information needed to transfer a token.\\n */\\nstruct ERC20TransferData {\\n    address operator;\\n    address fromAddress;\\n    address toAddress;\\n    uint256 amount;\\n}\\n\\n/**\\n * Information needed to burn a token.\\n */\\nstruct ERC20BurnData {\\n    address operator;\\n    bytes32 requiredRole;\\n    address fromAddress;\\n    uint256 amount;\\n}\\n\\n/**\\n * @title ERC20 Operations Interface\\n * @notice (c) 2023 ViciNFT https://vicinft.com/\\n * @author Josh Davis <josh.davis@vicinft.com>\\n *\\n * @dev Interface for ERC20 Operations.\\n * @dev Main contracts SHOULD refer to the ops contract via the this interface.\\n */\\ninterface IERC20Operations is IOwnerOperator {\\n    /* ################################################################\\n     * Queries\\n     * ##############################################################*/\\n\\n    /**\\n     * @dev Returns the total maximum possible that can be minted.\\n     */\\n    function getMaxSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount that has been minted so far.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev returns the amount available to be minted.\\n     * @dev {total available} = {max supply} - {amount minted so far}\\n     */\\n    function availableSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev see IERC20\\n     */\\n    function balanceOf(address account) external view returns (uint256 balance);\\n\\n    /* ################################################################\\n     * Minting / Burning / Transferring\\n     * ##############################################################*/\\n\\n    /**\\n     * @dev Safely mints a new token and transfers it to the specified address.\\n     * @dev Updates available quantities\\n     *\\n     * Requirements:\\n     *\\n     * - `mintData.operator` MUST be owner or have the required role.\\n     * - `mintData.operator` MUST NOT be banned.\\n     * - `mintData.toAddress` MUST NOT be 0x0.\\n     * - `mintData.toAddress` MUST NOT be banned.\\n     * - If `mintData.toAddress` refers to a smart contract, it must implement\\n     *      {IERC20Receiver-onERC20Received}, which is called upon a safe\\n     *      transfer.\\n     */\\n    function mint(IViciAccess ams, ERC20MintData memory mintData) external;\\n\\n    /**\\n     * @dev see IERC20\\n     */\\n    function transfer(\\n        IViciAccess ams,\\n        ERC20TransferData memory transferData\\n    ) external;\\n\\n    /**\\n     * @dev Burns the identified token.\\n     * @dev Updates available quantities\\n     *\\n     * Requirements:\\n     *\\n     * - `burnData.operator` MUST be owner or have the required role.\\n     * - `burnData.operator` MUST NOT be banned.\\n     * - `burnData.operator` MUST own the token or be authorized by the\\n     *     owner to transfer the token.\\n     */\\n    function burn(IViciAccess ams, ERC20BurnData memory burnData) external;\\n\\n    /* ################################################################\\n     * Approvals / Allowances\\n     * ##############################################################*/\\n\\n    /**\\n     * @dev see IERC20\\n     */\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev See {IERC20Permit-permit}.\\n     */\\n    function permit(\\n        IViciAccess ams,\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) external;\\n\\n    /**\\n     * @notice recover assets in banned or sanctioned accounts\\n     *\\n     * Requirements\\n     * - `operator` MUST be the contract owner.\\n     * - `fromAddress` MUST be banned or OFAC sanctioned\\n     * - `toAddress` MAY be the zero address, in which case the\\n     *     assets are burned.\\n     * - `toAddress` MUST NOT be banned or OFAC sanctioned\\n     */\\n    function recoverSanctionedAssets(\\n        IViciAccess ams,\\n        address operator,\\n        address fromAddress,\\n        address toAddress\\n    ) external returns (uint256 amount);\\n}\\n\"\r\n    },\r\n    \"IOwnerOperator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n/**\\n * @title Owner Operator Interface\\n * @notice (c) 2023 ViciNFT https://vicinft.com/\\n * @author Josh Davis <josh.davis@vicinft.com>\\n * \\n * @dev public interface for the Owner Operator contract\\n */\\ninterface IOwnerOperator {\\n    /**\\n     * @dev revert if the item does not exist\\n     */\\n    function enforceItemExists(uint256 thing) external view;\\n\\n    /* ################################################################\\n     * Queries\\n     * ##############################################################*/\\n\\n    /**\\n     * @dev Returns whether `thing` exists. Things are created by transferring\\n     *     from the null address, and things are destroyed by tranferring to\\n     *     the null address.\\n     * @dev COINS: returns whether any have been minted and are not all burned.\\n     *\\n     * @param thing identifies the thing.\\n     *\\n     * Requirements:\\n     * - COINS: `thing` SHOULD be 1.\\n     */\\n    function exists(uint256 thing) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the number of distict owners.\\n     * @dev use with `ownerAtIndex()` to iterate.\\n     */\\n    function ownerCount() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the address of the owner at the index.\\n     * @dev use with `ownerCount()` to iterate.\\n     *\\n     * @param index the index into the list of owners\\n     *\\n     * Requirements\\n     * - `index` MUST be less than the number of owners.\\n     */\\n    function ownerAtIndex(uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of distict items.\\n     * @dev use with `itemAtIndex()` to iterate.\\n     * @dev COINS: returns 1 or 0 depending on whether any tokens exist.\\n     */\\n    function itemCount() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the ID of the item at the index.\\n     * @dev use with `itemCount()` to iterate.\\n     * @dev COINS: don't use this function. The ID is always 1.\\n     *\\n     * @param index the index into the list of items\\n     *\\n     * Requirements\\n     * - `index` MUST be less than the number of items.\\n     */\\n    function itemAtIndex(uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev for a given item, returns the number that exist.\\n     * @dev NFTS: don't use this function. It returns 1 or 0 depending on\\n     *     whether the item exists. Use `exists()` instead.\\n     */\\n    function itemSupply(uint256 thing) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns how much of an item is held by an address.\\n     * @dev NFTS: Returns 0 or 1 depending on whether the address owns the item.\\n     *\\n     * @param owner the owner\\n     * @param thing identifies the item.\\n     *\\n     * Requirements:\\n     * - `owner` MUST NOT be the null address.\\n     * - `thing` MUST exist.\\n     */\\n    function getBalance(address owner, uint256 thing)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Returns the list of distinct items held by an address.\\n     * @dev COINS: Don't use this function.\\n     *\\n     * @param user the user\\n     *\\n     * Requirements:\\n     * - `owner` MUST NOT be the null address.\\n     */\\n    function userWallet(address user) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev For a given address, returns the number of distinct items.\\n     * @dev Returns 0 if the address doesn't own anything here.\\n     * @dev use with `itemOfOwnerByIndex()` to iterate.\\n     * @dev COINS: don't use this function. It returns 1 or 0 depending on\\n     *     whether the address has a balance. Use `balance()` instead.\\n     *\\n     * Requirements:\\n     * - `owner` MUST NOT be the null address.\\n     * - `thing` MUST exist.\\n     */\\n    function ownerItemCount(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev For a given address, returns the id of the item at the index.\\n     * @dev COINS: don't use this function.\\n     *\\n     * @param owner the owner.\\n     * @param index the index in the list of items.\\n     *\\n     * Requirements:\\n     * - `owner` MUST NOT be the null address.\\n     * - `index` MUST be less than the number of items.\\n     */\\n    function itemOfOwnerByIndex(address owner, uint256 index)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev For a given item, returns the number of owners.\\n     * @dev use with `ownerOfItemAtIndex()` to iterate.\\n     * @dev COINS: don't use this function. Use `ownerCount()` instead.\\n     * @dev NFTS: don't use this function. If `thing` exists, the answer is 1.\\n     *\\n     * Requirements:\\n     * - `thing` MUST exist.\\n     */\\n    function itemOwnerCount(uint256 thing) external view returns (uint256);\\n\\n    /**\\n     * @dev For a given item, returns the owner at the index.\\n     * @dev use with `itemOwnerCount()` to iterate.\\n     * @dev COINS: don't use this function. Use `ownerAtIndex()` instead.\\n     * @dev NFTS: Returns the owner.\\n     *\\n     * @param thing identifies the item.\\n     * @param index the index in the list of owners.\\n     *\\n     * Requirements:\\n     * - `thing` MUST exist.\\n     * - `index` MUST be less than the number of owners.\\n     * - NFTS: `index` MUST be 0.\\n     */\\n    function ownerOfItemAtIndex(uint256 thing, uint256 index)\\n        external\\n        view\\n        returns (address owner);\\n\\n    /* ################################################################\\n     * Minting / Burning / Transferring\\n     * ##############################################################*/\\n\\n    /**\\n     * @dev transfers an amount of thing from one address to another.\\n     * @dev if `fromAddress` is the null address, `amount` of `thing` is\\n     *     created.\\n     * @dev if `toAddress` is the null address, `amount` of `thing` is\\n     *     destroyed.\\n     *\\n     * @param operator the operator\\n     * @param fromAddress the current owner\\n     * @param toAddress the current owner\\n     * @param thing identifies the item.\\n     * @param amount the amount\\n     *\\n     * Requirements:\\n     * - NFTS: `amount` SHOULD be 1\\n     * - COINS: `thing` SHOULD be 1\\n     * - `fromAddress` and `toAddress` MUST NOT both be the null address\\n     * - `amount` MUST be greater than 0\\n     * - if `fromAddress` is not the null address\\n     *   - `amount` MUST NOT be greater than the current owner's balance\\n     *   - `operator` MUST be approved\\n     */\\n    function doTransfer(\\n        address operator,\\n        address fromAddress,\\n        address toAddress,\\n        uint256 thing,\\n        uint256 amount\\n    ) external;\\n\\n    /* ################################################################\\n     * Allowances / Approvals\\n     * ##############################################################*/\\n\\n    /**\\n     * @dev Reverts if `operator` is allowed to transfer `amount` of `thing` on\\n     *     behalf of `fromAddress`.\\n     * @dev Reverts if `fromAddress` is not an owner of at least `amount` of\\n     *     `thing`.\\n     *\\n     * @param operator the operator\\n     * @param fromAddress the owner\\n     * @param thing identifies the item.\\n     * @param amount the amount\\n     *\\n     * Requirements:\\n     * - NFTS: `amount` SHOULD be 1\\n     * - COINS: `thing` SHOULD be 1\\n     */\\n    function enforceAccess(\\n        address operator,\\n        address fromAddress,\\n        uint256 thing,\\n        uint256 amount\\n    ) external view;\\n\\n    /**\\n     * @dev Returns whether `operator` is allowed to transfer `amount` of\\n     *     `thing` on behalf of `fromAddress`.\\n     *\\n     * @param operator the operator\\n     * @param fromAddress the owner\\n     * @param thing identifies the item.\\n     * @param amount the amount\\n     *\\n     * Requirements:\\n     * - NFTS: `amount` SHOULD be 1\\n     * - COINS: `thing` SHOULD be 1\\n     */\\n    function isApproved(\\n        address operator,\\n        address fromAddress,\\n        uint256 thing,\\n        uint256 amount\\n    ) external view returns (bool);\\n\\n    /**\\n     * @dev Returns whether an operator is approved for all items belonging to\\n     *     an owner.\\n     *\\n     * @param fromAddress the owner\\n     * @param operator the operator\\n     */\\n    function isApprovedForAll(address fromAddress, address operator)\\n        external\\n        view\\n        returns (bool);\\n\\n    /**\\n     * @dev Toggles whether an operator is approved for all items belonging to\\n     *     an owner.\\n     *\\n     * @param fromAddress the owner\\n     * @param operator the operator\\n     * @param approved the new approval status\\n     *\\n     * Requirements:\\n     * - `fromUser` MUST NOT be the null address\\n     * - `operator` MUST NOT be the null address\\n     * - `operator` MUST NOT be the `fromUser`\\n     */\\n    function setApprovalForAll(\\n        address fromAddress,\\n        address operator,\\n        bool approved\\n    ) external;\\n\\n    /**\\n     * @dev returns the approved allowance for an operator.\\n     * @dev NFTS: Don't use this function. Use `getApprovedForItem()`\\n     *\\n     * @param fromAddress the owner\\n     * @param operator the operator\\n     * @param thing identifies the item.\\n     *\\n     * Requirements:\\n     * - COINS: `thing` SHOULD be 1\\n     */\\n    function allowance(\\n        address fromAddress,\\n        address operator,\\n        uint256 thing\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev sets the approval amount for an operator.\\n     * @dev NFTS: Don't use this function. Use `approveForItem()`\\n     *\\n     * @param fromAddress the owner\\n     * @param operator the operator\\n     * @param thing identifies the item.\\n     * @param amount the allowance amount.\\n     *\\n     * Requirements:\\n     * - COINS: `thing` SHOULD be 1\\n     * - `fromUser` MUST NOT be the null address\\n     * - `operator` MUST NOT be the null address\\n     * - `operator` MUST NOT be the `fromUser`\\n     */\\n    function approve(\\n        address fromAddress,\\n        address operator,\\n        uint256 thing,\\n        uint256 amount\\n    ) external;\\n\\n    /**\\n     * @dev Returns the address of the operator who is approved for an item.\\n     * @dev Returns the null address if there is no approved operator.\\n     * @dev COINS: Don't use this function.\\n     *\\n     * @param fromAddress the owner\\n     * @param thing identifies the item.\\n     *\\n     * Requirements:\\n     * - `thing` MUST exist\\n     */\\n    function getApprovedForItem(address fromAddress, uint256 thing)\\n        external\\n        view\\n        returns (address);\\n\\n    /**\\n     * @dev Approves `operator` to transfer `thing` to another account.\\n     * @dev COINS: Don't use this function. Use `setApprovalForAll()` or\\n     *     `approve()`\\n     *\\n     * @param fromAddress the owner\\n     * @param operator the operator\\n     * @param thing identifies the item.\\n     *\\n     * Requirements:\\n     * - `fromUser` MUST NOT be the null address\\n     * - `operator` MAY be the null address\\n     * - `operator` MUST NOT be the `fromUser`\\n     * - `fromUser` MUST be an owner of `thing`\\n     */\\n    function approveForItem(\\n        address fromAddress,\\n        address operator,\\n        uint256 thing\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"IERC20UtilityOperations.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"IERC20Operations.sol\\\";\\nimport \\\"Vesting.sol\\\";\\n\\nbytes32 constant AIRDROP_ROLE_NAME = \\\"airdrop\\\";\\nbytes32 constant LOST_WALLET = keccak256(\\\"lost wallet\\\");\\nbytes32 constant UNLOCK_LOCKED_TOKENS = keccak256(\\\"UNLOCK_LOCKED_TOKENS\\\");\\n\\n/**\\n * @title ERC20 Utility Operations Interface\\n * @notice (c) 2023 ViciNFT https://vicinft.com/\\n * @author Josh Davis <josh.davis@vicinft.com>\\n *\\n * @dev Interface for ERC20 utiity token operations\\n * @dev Main contracts SHOULD refer to the ops contract via the this interface.\\n */\\ninterface IERC20UtilityOperations is IERC20Operations {\\n\\n    /**\\n     * @notice Transfers tokens from the caller to a recipient and establishes\\n     * a vesting schedule.\\n     * If `transferData.toAddress` already has a locked balance, then\\n     * - if `transferData.amount` is greater than the airdropThreshold AND `release` is later than the current\\n     *      lockReleaseDate, the lockReleaseDate will be updated.\\n     * - if `transferData.amount` is less than the airdropThreshold OR `release` is earlier than the current\\n     *      lockReleaseDate, the lockReleaseDate will be left unchanged.\\n     * @param transferData describes the token transfer\\n     * @param release the new lock release date, as a Unix timestamp in seconds\\n     *\\n     * Requirements:\\n     * - caller MUST have the AIRDROPPER role\\n     * - the transaction MUST meet all requirements for a transfer\\n     * @dev see IERC20Operations.transfer\\n     */\\n    function airdropTimelockedTokens(\\n        IViciAccess ams,\\n        ERC20TransferData memory transferData,\\n        uint256 release\\n    ) external;\\n\\n    /**\\n     * @notice Unlocks some or all of `account`'s locked tokens.\\n     * @param account the user\\n     * @param unlockAmount the amount to unlock\\n     *\\n     * Requirements:\\n     * - caller MUST be the owner or have the UNLOCK_LOCKED_TOKENS role\\n     * - `unlockAmount` MAY be greater than the locked balance, in which case\\n     *     all of the account's locked tokens are unlocked.\\n     */\\n    function unlockLockedTokens(\\n        IViciAccess ams,\\n        address operator,\\n        address account,\\n        uint256 unlockAmount\\n    ) external;\\n\\n    /**\\n     * @notice Resets the lock period for a batch of addresses\\n     * @notice This function has no effect on accounts without a locked token balance\\n     * @param release the new lock release date, as a Unix timestamp in seconds\\n     * @param addresses the list of addresses to be reset\\n     *\\n     * Requirements:\\n     * - caller MUST be the owner or have the UNLOCK_LOCKED_TOKENS role\\n     * - `release` MAY be zero or in the past, in which case the users' entire locked balances become unlocked\\n     * - `addresses` MAY contain accounts without a locked balance, in which case the account is unaffected\\n     */\\n    function updateTimelocks(\\n        IViciAccess ams,\\n        address operator,\\n        uint256 release,\\n        address[] calldata addresses\\n    ) external;\\n\\n    /**\\n     * @notice Returns the amount of locked tokens for `account`.\\n     * @param account the user address\\n     */\\n    function lockedBalanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the Unix timestamp when a user's locked tokens will be\\n     * released.\\n     * @param account the user address\\n     */\\n    function lockReleaseDate(address account) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the difference between `account`'s total balance and its\\n     * locked balance.\\n     * @param account the user address\\n     */\\n    function unlockedBalanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @notice recovers tokens from lost wallets\\n     */\\n    function recoverMisplacedTokens(\\n        IViciAccess ams,\\n        address operator,\\n        address fromAddress,\\n        address toAddress\\n    ) external returns (uint256 amount);\\n}\\n\"\r\n    },\r\n    \"Vesting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n/**\\n * @title Vesting library\\n * @notice (c) 2023 ViciNFT https://vicinft.com/\\n * @author Josh Davis <josh.davis@vicinft.com>\\n *\\n * @dev  This library defines a struct and provides utility functions for \\n * tracking an amount that vests over time.\\n * @dev Unvested amounts may be spent to attend events, purchase NFTs, or \\n * participate in other experiences or utilities offered by ViciNFT.\\n */\\n\\nstruct VestingSchedule {\\n    // the initial amount of the airdrop\\n    uint256 startingAmount;\\n    // total funds spent purchasing from ViciNFT\\n    uint256 amountSpent;\\n    // vesting start time\\n    uint64 start;\\n    // length of the vesting period\\n    uint64 duration;\\n}\\n\\nlibrary Vesting {\\n    /**\\n     * @dev Returns the portion of the original amount that remains unvested, \\n     * less any amount that has been spent through ViciNFT.\\n     */\\n    function getLockedAmount(\\n        VestingSchedule storage schedule,\\n        uint256 timestamp\\n    ) internal view returns (uint256) {\\n        // start == 0 means the thing is uninitialized\\n        // current time after start+duration means fully vested\\n        if (\\n            schedule.start == 0 ||\\n            timestamp >= schedule.start + schedule.duration\\n        ) {\\n            return 0;\\n        }\\n\\n        // current time before start means not vested\\n        if (timestamp <= schedule.start) {\\n            return schedule.startingAmount - schedule.amountSpent;\\n        }\\n\\n        // total amount * percent of vesting period past\\n        uint256 preSpendingLockAmount = schedule.startingAmount -\\n            (schedule.startingAmount * (timestamp - schedule.start)) /\\n            schedule.duration;\\n\\n        // we've spent all the remaining locked tokens\\n        if (schedule.amountSpent > preSpendingLockAmount) {\\n            return 0;\\n        }\\n\\n        // remaining locked tokens less tokens spent through ViciNFT\\n        return preSpendingLockAmount - schedule.amountSpent;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"libraries\": {\r\n      \"ViciERC20UtilityToken.sol\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"LostTokensRecovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"srcChainId\",\"type\":\"uint256\"}],\"name\":\"ReceivedFromBridge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SanctionedAssetsRecovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dstChainId\",\"type\":\"uint256\"}],\"name\":\"SentToBridge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BANNED_ROLE_NAME\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE_NAME\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MODERATOR_ROLE_NAME\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accessServer\",\"outputs\":[{\"internalType\":\"contract IAccessServer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"release\",\"type\":\"uint256\"}],\"name\":\"airdropTimelockedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"availableSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"circulatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"enforceIsNotBanned\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"enforceIsNotSanctioned\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"enforceOwnerOrRole\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getOwnerAtIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwnerCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAccessServer\",\"name\":\"_accessServer\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Operations\",\"name\":\"_tokenData\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"_isMain\",\"type\":\"bool\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isBanned\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMain\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isSanctioned\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"lockReleaseDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"lockedBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fromAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"remoteChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct BridgeArgs\",\"name\":\"args\",\"type\":\"tuple\"}],\"name\":\"receivedFromBridge\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lostWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"}],\"name\":\"recoverMisplacedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"}],\"name\":\"recoverSanctionedAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isMain\",\"type\":\"bool\"}],\"name\":\"reinit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fromAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"remoteChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct BridgeArgs\",\"name\":\"args\",\"type\":\"tuple\"}],\"name\":\"sentToBridge\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"adminRole\",\"type\":\"bytes32\"}],\"name\":\"setRoleAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenData\",\"outputs\":[{\"internalType\":\"contract IERC20Operations\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transferAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"unlockAmount\",\"type\":\"uint256\"}],\"name\":\"unlockLockedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"unlockedBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"release\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"updateTimelocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"toAddress\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"toAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"contract IERC1155\",\"name\":\"tokenContract\",\"type\":\"address\"}],\"name\":\"withdrawERC1155\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"toAddress\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenContract\",\"type\":\"address\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"toAddress\",\"type\":\"address\"},{\"internalType\":\"contract IERC721\",\"name\":\"tokenContract\",\"type\":\"address\"}],\"name\":\"withdrawERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ViciERC20UtilityToken", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "istanbul", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}