{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/mocks/Message.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.14;\\n\\n/// @title\\n/// @author 0xKurt\\n/// @notice Abstract contract to verify proofs\\nabstract contract Solve3Verify {\\n    // ============ Storage ============\\n\\n    // The Solve3Master contract\\n    ISolve3Master public solve3Master;\\n\\n    // If Solve3 is disabled\\n    bool public solve3Disabled;\\n\\n    // The timestamp from which the signature is valid\\n    uint256 public validFromTimestamp;\\n\\n    // The period in seconds for which the signature is valid\\n    uint256 public validPeriodSeconds;\\n\\n    // ============ Initializer ============\\n    /// @notice Initialize the contract with default values\\n    /// @dev Default values are: validFromTimestamp = block timestamp, validPeriodSeconds = 300\\n    /// @param _solve3Master the Solve3Master contract\\n    function __init_Solve3Verify(address _solve3Master) internal {\\n        if (_solve3Master == address(0)) revert Solve3VerifyInitializedAlready();\\n        solve3Master = ISolve3Master(_solve3Master);\\n        validFromTimestamp = block.timestamp;\\n        validPeriodSeconds = 300;\\n        emit Solve3VerifyInitialized(_solve3Master);\\n    }\\n\\n    // ============ Modifiers ============\\n\\n    /// @notice Verify the proof\\n    /// @dev If Solve3 is disabled, the modifier will not verify the proof\\n    /// @dev Will revert if the proof is not valid or the timestamp is invalid or the account is not the sender\\n    /// @param _proof the proof to verify\\n    modifier solve3Verify(bytes memory _proof) {\\n        if (!solve3Disabled && solve3Master != ISolve3Master(address(0))) {\\n            (address account, uint256 timestamp, bool verified) = solve3Master.verifyProof(_proof);\\n\\n            if (!verified) revert Solve3VerifyUnableToVerify();\\n            if (account != msg.sender) revert Solve3VerifyAddressMismatch();\\n            if (timestamp < validFrom()) revert Solve3VerifyMsgSignedTooEarly();\\n            if (timestamp + validPeriod() < block.timestamp) {\\n                revert Solve3VerifySignatureInvalid();\\n            }\\n            emit Solve3VerifySuccess(account, timestamp);\\n        }\\n        _;\\n    }\\n\\n    /// @notice Modifier to if Solve3 is disabled\\n    modifier solve3IsDisabled() {\\n        if (!solve3Disabled) revert Solve3VerifyIsNotDisabled();\\n        _;\\n    }\\n\\n    /// @notice Modifier to if Solve3 is not disabled\\n    modifier solve3IsNotDisabled() {\\n        if (solve3Disabled) revert Solve3VerifyIsDisabled();\\n        _;\\n    }\\n\\n    // ============ Functions ============\\n    /// @notice Get the timestamp from which the signature is valid\\n    /// @dev Overridable function to allow for changing the timestamp from which the signature is valid\\n    /// @return the timestamp from which the signature is valid\\n    function validFrom() public view virtual returns (uint256) {\\n        return validFromTimestamp;\\n    }\\n\\n    /// @notice Get the period in seconds for which the signature is valid\\n    /// @dev Overridable function to allow for changing the period in seconds for which the signature is valid\\n    /// @return the period in seconds for which the signature is valid\\n    function validPeriod() public view virtual returns (uint256) {\\n        return validPeriodSeconds;\\n    }\\n\\n    /// @notice Abstract function to disable Solve3\\n    /// @dev Must be implemented by the inheriting contract to be able to disable Solve3\\n    /// @param _disabled If Solve3 should be disabled\\n    function disableSolve3(bool _disabled) external virtual;\\n\\n    /// @notice Internal function to disable Solve3\\n    /// @dev Can be used by the abstract function to disable Solve3\\n    function _disableSolve3(bool _disabled) internal {\\n        solve3Disabled = _disabled;\\n        emit Solve3VerifyDisabled(_disabled);\\n    }\\n\\n    /// @notice Set the Valid From Timestamp\\n    /// @dev Can be used to change the timestamp from which the signature is valid\\n    function _setValidFromTimestamp(uint256 _validFromTimestamp) internal {\\n        validFromTimestamp = _validFromTimestamp;\\n        emit Solve3ValidFromTimestampSet(_validFromTimestamp);\\n    }\\n\\n    /// @notice Abstract function to set the Valid Period Seconds\\n    /// @dev Can be used to change the period in seconds for which the signature is valid\\n    /// @param _validPeriodSeconds the period in seconds for which the signature is valid\\n    function setValidPeriodSeconds(uint256 _validPeriodSeconds) external virtual {\\n        _setValidPeriodSeconds(_validPeriodSeconds);\\n    }\\n\\n    /// @notice Internal function to set the Valid Period Seconds\\n    /// @dev Can be used by the abstract function to change the period in seconds for which the signature is valid\\n    /// @param _validPeriodSeconds the period in seconds for which the signature is valid\\n    function _setValidPeriodSeconds(uint256 _validPeriodSeconds) internal {\\n        validPeriodSeconds = _validPeriodSeconds;\\n        emit Solve3ValidPeriodSecondsSet(_validPeriodSeconds);\\n    }\\n\\n    // ============ Events ============\\n\\n    event Solve3VerifyDisabled(bool disabled);\\n    event Solve3VerifyInitialized(address indexed solve3Master);\\n    event Solve3VerifySuccess(address indexed account, uint256 timestamp);\\n    event Solve3ValidFromTimestampSet(uint256 validFromTimestamp);\\n    event Solve3ValidPeriodSecondsSet(uint256 validPeriodSeconds);\\n\\n    // ============ Errors ============\\n\\n    error Solve3VerifyInitializedAlready();\\n    error Solve3VerifyIsDisabled();\\n    error Solve3VerifyIsNotDisabled();\\n    error Solve3VerifyUnableToVerify();\\n    error Solve3VerifyAddressMismatch();\\n    error Solve3VerifyMsgSignedTooEarly();\\n    error Solve3VerifySignatureInvalid();\\n}\\n\\npragma solidity >=0.8.14;\\n\\ninterface ISolve3Master {\\n    function initialize(address _signer) external;\\n\\n    // ============ Views ============\\n\\n    function getNonce(address _account) external view returns (uint256);\\n\\n    // ============ Owner Functions ============\\n\\n    function setSigner(address _account, bool _flag) external;\\n\\n    function transferOwnership(address _newOwner) external;\\n\\n    function recoverERC20(address _token) external;\\n\\n    // ============ EIP 712 Functions ============\\n\\n    function verifyProof(bytes calldata _proof) external returns (address account, uint256 timestamp, bool verified);\\n}\\n\\npragma solidity 0.8.19;\\n\\ncontract Message is Solve3Verify {\\n    mapping(address => string) public messages;\\n    address public owner;\\n\\n    constructor(address _solve3Master) {\\n        owner = msg.sender;\\n        __init_Solve3Verify(_solve3Master);\\n    }\\n\\n    function setMessage(string memory _message, bytes memory _proof) external solve3Verify(_proof) {\\n        messages[msg.sender] = _message;\\n        emit NewMessage(msg.sender, _message);\\n    }\\n\\n    function getMessage(address _account) external view returns (string memory result) {\\n        result = messages[_account];\\n        if (keccak256(abi.encode(result)) == keccak256(abi.encode(\\\"\\\"))) {\\n            result = \\\"Hello World!\\\";\\n        }\\n    }\\n\\n    function disableSolve3(bool _flag) external override {\\n        if (msg.sender != owner) revert();\\n        _disableSolve3(_flag);\\n    }\\n\\n    event NewMessage(address indexed sender, string msg);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_solve3Master\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Solve3VerifyAddressMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Solve3VerifyInitializedAlready\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Solve3VerifyIsDisabled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Solve3VerifyIsNotDisabled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Solve3VerifyMsgSignedTooEarly\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Solve3VerifySignatureInvalid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Solve3VerifyUnableToVerify\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"msg\",\"type\":\"string\"}],\"name\":\"NewMessage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"validFromTimestamp\",\"type\":\"uint256\"}],\"name\":\"Solve3ValidFromTimestampSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"validPeriodSeconds\",\"type\":\"uint256\"}],\"name\":\"Solve3ValidPeriodSecondsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"disabled\",\"type\":\"bool\"}],\"name\":\"Solve3VerifyDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"solve3Master\",\"type\":\"address\"}],\"name\":\"Solve3VerifyInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Solve3VerifySuccess\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_flag\",\"type\":\"bool\"}],\"name\":\"disableSolve3\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getMessage\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"result\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"messages\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_message\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"}],\"name\":\"setMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_validPeriodSeconds\",\"type\":\"uint256\"}],\"name\":\"setValidPeriodSeconds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"solve3Disabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"solve3Master\",\"outputs\":[{\"internalType\":\"contract ISolve3Master\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validFromTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validPeriodSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Message", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000a564de1b600e99704c412460cfec1e32185484e1", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}