{"SourceCode": "// File: https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\n/** ****************************************************************************\r\n * @notice Interface for contracts using VRF randomness\r\n * *****************************************************************************\r\n * @dev PURPOSE\r\n *\r\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\r\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\r\n * @dev making his output up to suit himself. Reggie provides Vera a public key\r\n * @dev to which he knows the secret key. Each time Vera provides a seed to\r\n * @dev Reggie, he gives back a value which is computed completely\r\n * @dev deterministically from the seed and the secret key.\r\n *\r\n * @dev Reggie provides a proof by which Vera can verify that the output was\r\n * @dev correctly computed once Reggie tells it to her, but without that proof,\r\n * @dev the output is indistinguishable to her from a uniform random sample\r\n * @dev from the output space.\r\n *\r\n * @dev The purpose of this contract is to make it easy for unrelated contracts\r\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\r\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\r\n * @dev 1. The fulfillment came from the VRFCoordinator\r\n * @dev 2. The consumer contract implements fulfillRandomWords.\r\n * *****************************************************************************\r\n * @dev USAGE\r\n *\r\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\r\n * @dev initialize VRFConsumerBase's attributes in their constructor as\r\n * @dev shown:\r\n *\r\n * @dev   contract VRFConsumer {\r\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\r\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\r\n * @dev         <initialization with other arguments goes here>\r\n * @dev       }\r\n * @dev   }\r\n *\r\n * @dev The oracle will have given you an ID for the VRF keypair they have\r\n * @dev committed to (let's call it keyHash). Create subscription, fund it\r\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\r\n * @dev subscription management functions).\r\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\r\n * @dev callbackGasLimit, numWords),\r\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\r\n *\r\n * @dev Once the VRFCoordinator has received and validated the oracle's response\r\n * @dev to your request, it will call your contract's fulfillRandomWords method.\r\n *\r\n * @dev The randomness argument to fulfillRandomWords is a set of random words\r\n * @dev generated from your requestId and the blockHash of the request.\r\n *\r\n * @dev If your contract could have concurrent requests open, you can use the\r\n * @dev requestId returned from requestRandomWords to track which response is associated\r\n * @dev with which randomness request.\r\n * @dev See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\r\n * @dev if your contract could have multiple requests in flight simultaneously.\r\n *\r\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\r\n * @dev differ.\r\n *\r\n * *****************************************************************************\r\n * @dev SECURITY CONSIDERATIONS\r\n *\r\n * @dev A method with the ability to call your fulfillRandomness method directly\r\n * @dev could spoof a VRF response with any random value, so it's critical that\r\n * @dev it cannot be directly called by anything other than this base contract\r\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\r\n *\r\n * @dev For your users to trust that your contract's random behavior is free\r\n * @dev from malicious interference, it's best if you can write it so that all\r\n * @dev behaviors implied by a VRF response are executed *during* your\r\n * @dev fulfillRandomness method. If your contract must store the response (or\r\n * @dev anything derived from it) and use it later, you must ensure that any\r\n * @dev user-significant behavior which depends on that stored value cannot be\r\n * @dev manipulated by a subsequent VRF request.\r\n *\r\n * @dev Similarly, both miners and the VRF oracle itself have some influence\r\n * @dev over the order in which VRF responses appear on the blockchain, so if\r\n * @dev your contract could have multiple VRF requests in flight simultaneously,\r\n * @dev you must ensure that the order in which the VRF responses arrive cannot\r\n * @dev be used to manipulate your contract's user-significant behavior.\r\n *\r\n * @dev Since the block hash of the block which contains the requestRandomness\r\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\r\n * @dev miner could, in principle, fork the blockchain to evict the block\r\n * @dev containing the request, forcing the request to be included in a\r\n * @dev different block with a different hash, and therefore a different input\r\n * @dev to the VRF. However, such an attack would incur a substantial economic\r\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\r\n * @dev until it calls responds to a request. It is for this reason that\r\n * @dev that you can signal to an oracle you'd like them to wait longer before\r\n * @dev responding to the request (however this is not enforced in the contract\r\n * @dev and so remains effective only in the case of unmodified oracle software).\r\n */\r\nabstract contract VRFConsumerBaseV2 {\r\n  error OnlyCoordinatorCanFulfill(address have, address want);\r\n  address private immutable vrfCoordinator;\r\n\r\n  /**\r\n   * @param _vrfCoordinator address of VRFCoordinator contract\r\n   */\r\n  constructor(address _vrfCoordinator) {\r\n    vrfCoordinator = _vrfCoordinator;\r\n  }\r\n\r\n  /**\r\n   * @notice fulfillRandomness handles the VRF response. Your contract must\r\n   * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\r\n   * @notice principles to keep in mind when implementing your fulfillRandomness\r\n   * @notice method.\r\n   *\r\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\r\n   * @dev signature, and will call it once it has verified the proof\r\n   * @dev associated with the randomness. (It is triggered via a call to\r\n   * @dev rawFulfillRandomness, below.)\r\n   *\r\n   * @param requestId The Id initially returned by requestRandomness\r\n   * @param randomWords the VRF output expanded to the requested number of words\r\n   */\r\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\r\n\r\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\r\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\r\n  // the origin of the call\r\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\r\n    if (msg.sender != vrfCoordinator) {\r\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\r\n    }\r\n    fulfillRandomWords(requestId, randomWords);\r\n  }\r\n}\r\n\r\n// File: https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface VRFCoordinatorV2Interface {\r\n  /**\r\n   * @notice Get configuration relevant for making requests\r\n   * @return minimumRequestConfirmations global min for request confirmations\r\n   * @return maxGasLimit global max for request gas limit\r\n   * @return s_provingKeyHashes list of registered key hashes\r\n   */\r\n  function getRequestConfig()\r\n    external\r\n    view\r\n    returns (\r\n      uint16,\r\n      uint32,\r\n      bytes32[] memory\r\n    );\r\n\r\n  /**\r\n   * @notice Request a set of random words.\r\n   * @param keyHash - Corresponds to a particular oracle job which uses\r\n   * that key for generating the VRF proof. Different keyHash's have different gas price\r\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\r\n   * @param subId  - The ID of the VRF subscription. Must be funded\r\n   * with the minimum subscription balance required for the selected keyHash.\r\n   * @param minimumRequestConfirmations - How many blocks you'd like the\r\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\r\n   * for why you may want to request more. The acceptable range is\r\n   * [minimumRequestBlockConfirmations, 200].\r\n   * @param callbackGasLimit - How much gas you'd like to receive in your\r\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\r\n   * may be slightly less than this amount because of gas used calling the function\r\n   * (argument decoding etc.), so you may need to request slightly more than you expect\r\n   * to have inside fulfillRandomWords. The acceptable range is\r\n   * [0, maxGasLimit]\r\n   * @param numWords - The number of uint256 random values you'd like to receive\r\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\r\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\r\n   * @return requestId - A unique identifier of the request. Can be used to match\r\n   * a request to a response in fulfillRandomWords.\r\n   */\r\n  function requestRandomWords(\r\n    bytes32 keyHash,\r\n    uint64 subId,\r\n    uint16 minimumRequestConfirmations,\r\n    uint32 callbackGasLimit,\r\n    uint32 numWords\r\n  ) external returns (uint256 requestId);\r\n\r\n  /**\r\n   * @notice Create a VRF subscription.\r\n   * @return subId - A unique subscription id.\r\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\r\n   * @dev Note to fund the subscription, use transferAndCall. For example\r\n   * @dev  LINKTOKEN.transferAndCall(\r\n   * @dev    address(COORDINATOR),\r\n   * @dev    amount,\r\n   * @dev    abi.encode(subId));\r\n   */\r\n  function createSubscription() external returns (uint64 subId);\r\n\r\n  /**\r\n   * @notice Get a VRF subscription.\r\n   * @param subId - ID of the subscription\r\n   * @return balance - LINK balance of the subscription in juels.\r\n   * @return reqCount - number of requests for this subscription, determines fee tier.\r\n   * @return owner - owner of the subscription.\r\n   * @return consumers - list of consumer address which are able to use this subscription.\r\n   */\r\n  function getSubscription(uint64 subId)\r\n    external\r\n    view\r\n    returns (\r\n      uint96 balance,\r\n      uint64 reqCount,\r\n      address owner,\r\n      address[] memory consumers\r\n    );\r\n\r\n  /**\r\n   * @notice Request subscription owner transfer.\r\n   * @param subId - ID of the subscription\r\n   * @param newOwner - proposed new owner of the subscription\r\n   */\r\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\r\n\r\n  /**\r\n   * @notice Request subscription owner transfer.\r\n   * @param subId - ID of the subscription\r\n   * @dev will revert if original owner of subId has\r\n   * not requested that msg.sender become the new owner.\r\n   */\r\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\r\n\r\n  /**\r\n   * @notice Add a consumer to a VRF subscription.\r\n   * @param subId - ID of the subscription\r\n   * @param consumer - New consumer which can use the subscription\r\n   */\r\n  function addConsumer(uint64 subId, address consumer) external;\r\n\r\n  /**\r\n   * @notice Remove a consumer from a VRF subscription.\r\n   * @param subId - ID of the subscription\r\n   * @param consumer - Consumer to remove from the subscription\r\n   */\r\n  function removeConsumer(uint64 subId, address consumer) external;\r\n\r\n  /**\r\n   * @notice Cancel a subscription\r\n   * @param subId - ID of the subscription\r\n   * @param to - Where to send the remaining LINK to\r\n   */\r\n  function cancelSubscription(uint64 subId, address to) external;\r\n\r\n  /*\r\n   * @notice Check to see if there exists a request commitment consumers\r\n   * for all consumers and keyhashes for a given sub.\r\n   * @param subId - ID of the subscription\r\n   * @return true if there exists at least one unfulfilled request for the subscription, false\r\n   * otherwise.\r\n   */\r\n  function pendingRequestExists(uint64 subId) external view returns (bool);\r\n}\r\n\r\n// File: contracts/Admin/data/GachaStruct.sol\r\n\r\n\r\npragma solidity ^0.8.18;\r\n\r\n    enum GachaType {\r\n        None,\r\n        Character,\r\n        FateCore\r\n    }\r\n\r\n    struct InputGachaInfo {\r\n        uint256 tokenId;\r\n        string name;\r\n        uint256[] tierRatio;\r\n        uint256[][] gachaGradeRatio;\r\n        uint256[] gachaFateCoreRatio;\r\n        uint256[] gachaFateCoreList;\r\n        GachaType gachaType;\r\n        bool isValid;\r\n    }\r\n\r\n    struct GachaInfo {\r\n        uint256 tokenId;\r\n        string name;\r\n        uint256[] tierRatio;\r\n        uint256[][] gachaGradeRatio;\r\n        bool isValid;\r\n    }\r\n\r\n    struct FateCoreGachaInfo {\r\n        uint256 tokenId;\r\n        string name;\r\n        uint256[] gachaFateCoreRatio;\r\n        uint256[] gachaFateCoreList;\r\n        bool isValid;\r\n    }\r\n// File: @openzeppelin/contracts/security/ReentrancyGuard.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Strings.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n    uint8 private constant _ADDRESS_LENGTH = 20;\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(address addr) internal pure returns (string memory) {\r\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n                /// @solidity memory-safe-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/ERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev _Available since v3.1._\r\n */\r\ninterface IERC1155Receiver is IERC165 {\r\n    /**\r\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\r\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\r\n     *\r\n     * NOTE: To accept the transfer, this must return\r\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\r\n     * (i.e. 0xf23a6e61, or its own function selector).\r\n     *\r\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\r\n     * @param from The address which previously owned the token\r\n     * @param id The ID of the token being transferred\r\n     * @param value The amount of tokens being transferred\r\n     * @param data Additional data with no specified format\r\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\r\n     */\r\n    function onERC1155Received(\r\n        address operator,\r\n        address from,\r\n        uint256 id,\r\n        uint256 value,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n\r\n    /**\r\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\r\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\r\n     * been updated.\r\n     *\r\n     * NOTE: To accept the transfer(s), this must return\r\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\r\n     * (i.e. 0xbc197c81, or its own function selector).\r\n     *\r\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\r\n     * @param from The address which previously owned the token\r\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\r\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\r\n     * @param data Additional data with no specified format\r\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\r\n     */\r\n    function onERC1155BatchReceived(\r\n        address operator,\r\n        address from,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata values,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @dev _Available since v3.1._\r\n */\r\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\r\n *\r\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\r\n * stuck.\r\n *\r\n * @dev _Available since v3.1._\r\n */\r\ncontract ERC1155Holder is ERC1155Receiver {\r\n    function onERC1155Received(\r\n        address,\r\n        address,\r\n        uint256,\r\n        uint256,\r\n        bytes memory\r\n    ) public virtual override returns (bytes4) {\r\n        return this.onERC1155Received.selector;\r\n    }\r\n\r\n    function onERC1155BatchReceived(\r\n        address,\r\n        address,\r\n        uint256[] memory,\r\n        uint256[] memory,\r\n        bytes memory\r\n    ) public virtual override returns (bytes4) {\r\n        return this.onERC1155BatchReceived.selector;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC1155/IERC1155.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\r\n *\r\n * _Available since v3.1._\r\n */\r\ninterface IERC1155 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\r\n     */\r\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\r\n\r\n    /**\r\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\r\n     * transfers.\r\n     */\r\n    event TransferBatch(\r\n        address indexed operator,\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256[] ids,\r\n        uint256[] values\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\r\n     * `approved`.\r\n     */\r\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\r\n     *\r\n     * If an {URI} event was emitted for `id`, the standard\r\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\r\n     * returned by {IERC1155MetadataURI-uri}.\r\n     */\r\n    event URI(string value, uint256 indexed id);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function balanceOf(address account, uint256 id) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `accounts` and `ids` must have the same length.\r\n     */\r\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\r\n        external\r\n        view\r\n        returns (uint256[] memory);\r\n\r\n    /**\r\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `operator` cannot be the caller.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) external;\r\n\r\n    /**\r\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\r\n     *\r\n     * See {setApprovalForAll}.\r\n     */\r\n    function isApprovedForAll(address account, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\r\n     *\r\n     * Emits a {TransferSingle} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\r\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\r\n     *\r\n     * Emits a {TransferBatch} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `ids` and `amounts` must have the same length.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeBatchTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata amounts,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\r\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\r\n *\r\n * _Available since v3.1._\r\n */\r\ninterface IERC1155MetadataURI is IERC1155 {\r\n    /**\r\n     * @dev Returns the URI for token type `id`.\r\n     *\r\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\r\n     * clients with the actual token type ID.\r\n     */\r\n    function uri(uint256 id) external view returns (string memory);\r\n}\r\n\r\n// File: contracts/LUXON/utils/IERC721LUXON.sol\r\n\r\n\r\npragma solidity ^0.8.16;\r\n\r\ninterface IERC721LUXON {\r\n    function mintByCharacterName(address mintUser, uint256 quantity, string[] memory gachaIds) external;\r\n    function nextTokenId() external view returns (uint256);\r\n    function burn(uint256 tokenId) external;\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n    function totalSupply() external view returns (uint256);\r\n    function mint(address mintUser, uint256 quantity) external;\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n}\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC1155/ERC1155.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/ERC1155.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the basic standard multi-token.\r\n * See https://eips.ethereum.org/EIPS/eip-1155\r\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\r\n *\r\n * _Available since v3.1._\r\n */\r\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\r\n    using Address for address;\r\n\r\n    // Mapping from token ID to account balances\r\n    mapping(uint256 => mapping(address => uint256)) private _balances;\r\n\r\n    // Mapping from account to operator approvals\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\r\n    string private _uri;\r\n\r\n    /**\r\n     * @dev See {_setURI}.\r\n     */\r\n    constructor(string memory uri_) {\r\n        _setURI(uri_);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return\r\n            interfaceId == type(IERC1155).interfaceId ||\r\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155MetadataURI-uri}.\r\n     *\r\n     * This implementation returns the same URI for *all* token types. It relies\r\n     * on the token type ID substitution mechanism\r\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\r\n     *\r\n     * Clients calling this function must replace the `\\{id\\}` substring with the\r\n     * actual token type ID.\r\n     */\r\n    function uri(uint256) public view virtual override returns (string memory) {\r\n        return _uri;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-balanceOf}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\r\n        require(account != address(0), \"ERC1155: address zero is not a valid owner\");\r\n        return _balances[id][account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-balanceOfBatch}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `accounts` and `ids` must have the same length.\r\n     */\r\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256[] memory)\r\n    {\r\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\r\n\r\n        uint256[] memory batchBalances = new uint256[](accounts.length);\r\n\r\n        for (uint256 i = 0; i < accounts.length; ++i) {\r\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\r\n        }\r\n\r\n        return batchBalances;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) public virtual override {\r\n        _setApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\r\n        return _operatorApprovals[account][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes memory data\r\n    ) public virtual override {\r\n        require(\r\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\r\n            \"ERC1155: caller is not token owner nor approved\"\r\n        );\r\n        _safeTransferFrom(from, to, id, amount, data);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-safeBatchTransferFrom}.\r\n     */\r\n    function safeBatchTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    ) public virtual override {\r\n        require(\r\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\r\n            \"ERC1155: caller is not token owner nor approved\"\r\n        );\r\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\r\n     *\r\n     * Emits a {TransferSingle} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function _safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes memory data\r\n    ) internal virtual {\r\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\r\n\r\n        address operator = _msgSender();\r\n        uint256[] memory ids = _asSingletonArray(id);\r\n        uint256[] memory amounts = _asSingletonArray(amount);\r\n\r\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\r\n\r\n        uint256 fromBalance = _balances[id][from];\r\n        require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\r\n        unchecked {\r\n            _balances[id][from] = fromBalance - amount;\r\n        }\r\n        _balances[id][to] += amount;\r\n\r\n        emit TransferSingle(operator, from, to, id, amount);\r\n\r\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\r\n\r\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\r\n    }\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\r\n     *\r\n     * Emits a {TransferBatch} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function _safeBatchTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    ) internal virtual {\r\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\r\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\r\n\r\n        address operator = _msgSender();\r\n\r\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\r\n\r\n        for (uint256 i = 0; i < ids.length; ++i) {\r\n            uint256 id = ids[i];\r\n            uint256 amount = amounts[i];\r\n\r\n            uint256 fromBalance = _balances[id][from];\r\n            require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\r\n            unchecked {\r\n                _balances[id][from] = fromBalance - amount;\r\n            }\r\n            _balances[id][to] += amount;\r\n        }\r\n\r\n        emit TransferBatch(operator, from, to, ids, amounts);\r\n\r\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\r\n\r\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets a new URI for all token types, by relying on the token type ID\r\n     * substitution mechanism\r\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\r\n     *\r\n     * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\r\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\r\n     * clients with the token type ID.\r\n     *\r\n     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\r\n     * interpreted by clients as\r\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\r\n     * for token type ID 0x4cce0.\r\n     *\r\n     * See {uri}.\r\n     *\r\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\r\n     * this function emits no events.\r\n     */\r\n    function _setURI(string memory newuri) internal virtual {\r\n        _uri = newuri;\r\n    }\r\n\r\n    /**\r\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\r\n     *\r\n     * Emits a {TransferSingle} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function _mint(\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes memory data\r\n    ) internal virtual {\r\n        require(to != address(0), \"ERC1155: mint to the zero address\");\r\n\r\n        address operator = _msgSender();\r\n        uint256[] memory ids = _asSingletonArray(id);\r\n        uint256[] memory amounts = _asSingletonArray(amount);\r\n\r\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\r\n\r\n        _balances[id][to] += amount;\r\n        emit TransferSingle(operator, address(0), to, id, amount);\r\n\r\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\r\n\r\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\r\n    }\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\r\n     *\r\n     * Emits a {TransferBatch} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `ids` and `amounts` must have the same length.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function _mintBatch(\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    ) internal virtual {\r\n        require(to != address(0), \"ERC1155: mint to the zero address\");\r\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\r\n\r\n        address operator = _msgSender();\r\n\r\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\r\n\r\n        for (uint256 i = 0; i < ids.length; i++) {\r\n            _balances[ids[i]][to] += amounts[i];\r\n        }\r\n\r\n        emit TransferBatch(operator, address(0), to, ids, amounts);\r\n\r\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\r\n\r\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens of token type `id` from `from`\r\n     *\r\n     * Emits a {TransferSingle} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `from` must have at least `amount` tokens of token type `id`.\r\n     */\r\n    function _burn(\r\n        address from,\r\n        uint256 id,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC1155: burn from the zero address\");\r\n\r\n        address operator = _msgSender();\r\n        uint256[] memory ids = _asSingletonArray(id);\r\n        uint256[] memory amounts = _asSingletonArray(amount);\r\n\r\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\r\n\r\n        uint256 fromBalance = _balances[id][from];\r\n        require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[id][from] = fromBalance - amount;\r\n        }\r\n\r\n        emit TransferSingle(operator, from, address(0), id, amount);\r\n\r\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\r\n     *\r\n     * Emits a {TransferBatch} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `ids` and `amounts` must have the same length.\r\n     */\r\n    function _burnBatch(\r\n        address from,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC1155: burn from the zero address\");\r\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\r\n\r\n        address operator = _msgSender();\r\n\r\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\r\n\r\n        for (uint256 i = 0; i < ids.length; i++) {\r\n            uint256 id = ids[i];\r\n            uint256 amount = amounts[i];\r\n\r\n            uint256 fromBalance = _balances[id][from];\r\n            require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\r\n            unchecked {\r\n                _balances[id][from] = fromBalance - amount;\r\n            }\r\n        }\r\n\r\n        emit TransferBatch(operator, from, address(0), ids, amounts);\r\n\r\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `operator` to operate on all of `owner` tokens\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function _setApprovalForAll(\r\n        address owner,\r\n        address operator,\r\n        bool approved\r\n    ) internal virtual {\r\n        require(owner != operator, \"ERC1155: setting approval status for self\");\r\n        _operatorApprovals[owner][operator] = approved;\r\n        emit ApprovalForAll(owner, operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning, as well as batched variants.\r\n     *\r\n     * The same hook is called on both single and batched variants. For single\r\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\r\n     *\r\n     * Calling conditions (for each `id` and `amount` pair):\r\n     *\r\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * of token type `id` will be  transferred to `to`.\r\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\r\n     * for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\r\n     * will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     * - `ids` and `amounts` have the same, non-zero length.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any token transfer. This includes minting\r\n     * and burning, as well as batched variants.\r\n     *\r\n     * The same hook is called on both single and batched variants. For single\r\n     * transfers, the length of the `id` and `amount` arrays will be 1.\r\n     *\r\n     * Calling conditions (for each `id` and `amount` pair):\r\n     *\r\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * of token type `id` will be  transferred to `to`.\r\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\r\n     * for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\r\n     * will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     * - `ids` and `amounts` have the same, non-zero length.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    ) internal virtual {}\r\n\r\n    function _doSafeTransferAcceptanceCheck(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes memory data\r\n    ) private {\r\n        if (to.isContract()) {\r\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\r\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\r\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\r\n                }\r\n            } catch Error(string memory reason) {\r\n                revert(reason);\r\n            } catch {\r\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\r\n            }\r\n        }\r\n    }\r\n\r\n    function _doSafeBatchTransferAcceptanceCheck(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    ) private {\r\n        if (to.isContract()) {\r\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\r\n                bytes4 response\r\n            ) {\r\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\r\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\r\n                }\r\n            } catch Error(string memory reason) {\r\n                revert(reason);\r\n            } catch {\r\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\r\n            }\r\n        }\r\n    }\r\n\r\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\r\n        uint256[] memory array = new uint256[](1);\r\n        array[0] = element;\r\n\r\n        return array;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC1155/extensions/ERC1155Supply.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC1155/extensions/ERC1155Supply.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Extension of ERC1155 that adds tracking of total supply per id.\r\n *\r\n * Useful for scenarios where Fungible and Non-fungible tokens have to be\r\n * clearly identified. Note: While a totalSupply of 1 might mean the\r\n * corresponding is an NFT, there is no guarantees that no other token with the\r\n * same id are not going to be minted.\r\n */\r\nabstract contract ERC1155Supply is ERC1155 {\r\n    mapping(uint256 => uint256) private _totalSupply;\r\n\r\n    /**\r\n     * @dev Total amount of tokens in with a given id.\r\n     */\r\n    function totalSupply(uint256 id) public view virtual returns (uint256) {\r\n        return _totalSupply[id];\r\n    }\r\n\r\n    /**\r\n     * @dev Indicates whether any token exist with a given id, or not.\r\n     */\r\n    function exists(uint256 id) public view virtual returns (bool) {\r\n        return ERC1155Supply.totalSupply(id) > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev See {ERC1155-_beforeTokenTransfer}.\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    ) internal virtual override {\r\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\r\n\r\n        if (from == address(0)) {\r\n            for (uint256 i = 0; i < ids.length; ++i) {\r\n                _totalSupply[ids[i]] += amounts[i];\r\n            }\r\n        }\r\n\r\n        if (to == address(0)) {\r\n            for (uint256 i = 0; i < ids.length; ++i) {\r\n                uint256 id = ids[i];\r\n                uint256 amount = amounts[i];\r\n                uint256 supply = _totalSupply[id];\r\n                require(supply >= amount, \"ERC1155: burn amount exceeds totalSupply\");\r\n                unchecked {\r\n                    _totalSupply[id] = supply - amount;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: contracts/Admin/data/DataAddress.sol\r\n\r\n\r\npragma solidity ^0.8.16;\r\n\r\n\r\ncontract DspDataAddress is Ownable {\r\n\r\n    event SetDataAddress(string indexed name, address indexed dataAddress, bool indexed isValid);\r\n\r\n    struct DataAddressInfo {\r\n        string name;\r\n        address dataAddress;\r\n        bool isValid;\r\n    }\r\n\r\n    mapping(string => DataAddressInfo) private dataAddresses;\r\n\r\n    function getDataAddress(string memory _name) public view returns (address) {\r\n        require(dataAddresses[_name].isValid, \"this data address is not valid\");\r\n        return dataAddresses[_name].dataAddress;\r\n    }\r\n\r\n    function setDataAddress(DataAddressInfo memory _dataAddressInfo) external onlyOwner {\r\n        dataAddresses[_dataAddressInfo.name] = _dataAddressInfo;\r\n        emit SetDataAddress(_dataAddressInfo.name, _dataAddressInfo.dataAddress, _dataAddressInfo.isValid);\r\n    }\r\n\r\n    function setDataAddresses(DataAddressInfo[] memory _dataAddressInfos) external onlyOwner {\r\n        for (uint256 i = 0; i < _dataAddressInfos.length; i++) {\r\n            dataAddresses[_dataAddressInfos[i].name] = _dataAddressInfos[i];\r\n            emit SetDataAddress(_dataAddressInfos[i].name, _dataAddressInfos[i].dataAddress, _dataAddressInfos[i].isValid);\r\n        }\r\n    }\r\n}\r\n// File: contracts/LUXON/utils/LuxOnData.sol\r\n\r\n\r\npragma solidity ^0.8.16;\r\n\r\n\r\n\r\ncontract LuxOnData is Ownable {\r\n    address private luxonData;\r\n    event SetLuxonData(address indexed luxonData);\r\n\r\n    constructor(\r\n        address _luxonData\r\n    ) {\r\n        luxonData = _luxonData;\r\n    }\r\n\r\n    function getLuxOnData() public view returns (address) {\r\n        return luxonData;\r\n    }\r\n\r\n    function setLuxOnData(address _luxonData) external onlyOwner {\r\n        luxonData = _luxonData;\r\n        emit SetLuxonData(_luxonData);\r\n    }\r\n\r\n    function getDataAddress(string memory _name) public view returns (address) {\r\n        return DspDataAddress(luxonData).getDataAddress(_name);\r\n    }\r\n}\r\n// File: contracts/Admin/data/GachaDataV2.sol\r\n\r\n\r\npragma solidity ^0.8.16;\r\n\r\n\r\n\r\ncontract DspGachaData is Ownable {\r\n\r\n    event SetGachaInfo(uint256 indexed tokenId, string indexed name, uint256[] tierRatio, uint256[][]gachaGradeRatio, bool isValid);\r\n    event SetFateCoreGachaInfo(uint256 indexed tokenId, string indexed name, uint256[] ratio, uint256[]list, bool isValid);\r\n    event RemoveGachaInfo(uint256 indexed tokenId, string indexed name, uint256[] tierRatio, uint256[][]gachaGradeRatio, bool isValid);\r\n    event RemoveFateCoreGachaInfo(uint256 indexed tokenId, string indexed name, uint256[] ratio, uint256[] list, bool isValid);\r\n\r\n    uint256 private gachaCount;\r\n\r\n    // tokenId => GachaInfo\r\n    mapping(uint256 => GachaInfo) private gachaInfo;\r\n\r\n    // tokenId => FateCoreGachaInfo\r\n    mapping(uint256 => FateCoreGachaInfo) private fateCoreGachaInfo;\r\n\r\n    // token id => type\r\n    mapping(uint256 => uint256) private gachaTypeByTokenId;\r\n\r\n    function getGachaCount() public view returns (uint256) {\r\n        return gachaCount;\r\n    }\r\n\r\n    function getGachaInfo(uint256 _tokenId) public view returns (GachaInfo memory) {\r\n        return gachaInfo[_tokenId];\r\n    }\r\n\r\n    function getFateCoreGachaInfo(uint256 _tokenId) public view returns (FateCoreGachaInfo memory) {\r\n        return fateCoreGachaInfo[_tokenId];\r\n    }\r\n\r\n    function getGachaType(uint256 _tokenId) public view returns (uint256) {\r\n        return uint256(gachaTypeByTokenId[_tokenId]);\r\n    }\r\n\r\n    function getGachaTierRatio(uint256 _tokenId) public view returns (uint256[] memory, uint256) {\r\n        uint256 sum = 0;\r\n        for (uint256 i = 0; i < gachaInfo[_tokenId].tierRatio.length; i++) {\r\n            sum += gachaInfo[_tokenId].tierRatio[i];\r\n        }\r\n        return (gachaInfo[_tokenId].tierRatio, sum);\r\n    }\r\n\r\n    function getGachaGachaGradeRatio(uint256 _tokenId) public view returns (uint256[][] memory, uint256[] memory) {\r\n        uint256[] memory sum = new uint256[](gachaInfo[_tokenId].gachaGradeRatio.length);\r\n        for (uint256 i = 0; i < gachaInfo[_tokenId].gachaGradeRatio.length; i++) {\r\n            for (uint256 j = 0; j < gachaInfo[_tokenId].gachaGradeRatio[i].length; j++) {\r\n                sum[i] += gachaInfo[_tokenId].gachaGradeRatio[i][j];\r\n            }\r\n        }\r\n        return (gachaInfo[_tokenId].gachaGradeRatio, sum);\r\n    }\r\n\r\n    function getGachaFateCoreRatio(uint256 _tokenId) public view returns (uint256[] memory, uint256) {\r\n        uint256 sum = 0;\r\n        for (uint256 i = 0; i < fateCoreGachaInfo[_tokenId].gachaFateCoreRatio.length; i++) {\r\n            sum += fateCoreGachaInfo[_tokenId].gachaFateCoreRatio[i];\r\n        }\r\n        return (fateCoreGachaInfo[_tokenId].gachaFateCoreRatio, sum);\r\n    }\r\n\r\n    function getFateCoreByIndex(uint256 _tokenId, uint256 index) public view returns (uint256) {\r\n        return fateCoreGachaInfo[_tokenId].gachaFateCoreList[index];\r\n    }\r\n\r\n    function setGachaInfo(InputGachaInfo memory _inputGachaInfo) external onlyOwner {\r\n        require(_inputGachaInfo.tokenId != 0, \"gacha id not valid\");\r\n        if (GachaType.Character == _inputGachaInfo.gachaType) {\r\n            GachaInfo memory _gachaInfo = GachaInfo(_inputGachaInfo.tokenId, _inputGachaInfo.name, _inputGachaInfo.tierRatio, _inputGachaInfo.gachaGradeRatio, _inputGachaInfo.isValid);\r\n            uint256 sumTierRatio = 0;\r\n            for (uint256 i = 0; i < _gachaInfo.tierRatio.length; i++) {\r\n                sumTierRatio += _gachaInfo.tierRatio[i];\r\n            }\r\n            require(sumTierRatio != 0, \"gacha ratio sum 0\");\r\n            if (!gachaInfo[_gachaInfo.tokenId].isValid) {\r\n                gachaCount++;\r\n            }\r\n            for (uint256 i = 0; i < _gachaInfo.gachaGradeRatio.length; i++) {\r\n                if (_gachaInfo.tierRatio[i] != 0) {\r\n                    uint256 sumGachaGradeRatio = 0;\r\n                    for (uint256 j = 0; j < _gachaInfo.gachaGradeRatio[i].length; j++) {\r\n                        sumGachaGradeRatio += _gachaInfo.gachaGradeRatio[i][j];\r\n                    }\r\n                    require(sumGachaGradeRatio != 0, \"gacha gacha grade ratio sum 0\");\r\n                }\r\n            }\r\n            gachaTypeByTokenId[_gachaInfo.tokenId] = uint256(GachaType.Character);\r\n            gachaInfo[_gachaInfo.tokenId] = _gachaInfo;\r\n            emit SetGachaInfo(_gachaInfo.tokenId, _gachaInfo.name, _gachaInfo.tierRatio, _gachaInfo.gachaGradeRatio, _gachaInfo.isValid);\r\n        } else if (GachaType.FateCore == _inputGachaInfo.gachaType) {\r\n            FateCoreGachaInfo memory _fateCoreGachaInfo = FateCoreGachaInfo(_inputGachaInfo.tokenId, _inputGachaInfo.name, _inputGachaInfo.gachaFateCoreRatio, _inputGachaInfo.gachaFateCoreList, _inputGachaInfo.isValid);\r\n            uint256 sumRatio = 0;\r\n            for (uint256 i = 0; i < _fateCoreGachaInfo.gachaFateCoreRatio.length; i++) {\r\n                sumRatio += _fateCoreGachaInfo.gachaFateCoreRatio[i];\r\n            }\r\n            require(sumRatio != 0, \"gacha ratio sum 0\");\r\n            require(_fateCoreGachaInfo.gachaFateCoreRatio.length == _fateCoreGachaInfo.gachaFateCoreList.length, \"not same count\");\r\n            if (!fateCoreGachaInfo[_fateCoreGachaInfo.tokenId].isValid) {\r\n                gachaCount++;\r\n            }\r\n            gachaTypeByTokenId[_fateCoreGachaInfo.tokenId] = uint256(GachaType.FateCore);\r\n            fateCoreGachaInfo[_fateCoreGachaInfo.tokenId] = _fateCoreGachaInfo;\r\n            emit SetFateCoreGachaInfo(_fateCoreGachaInfo.tokenId, _fateCoreGachaInfo.name, _fateCoreGachaInfo.gachaFateCoreRatio, _fateCoreGachaInfo.gachaFateCoreList, _fateCoreGachaInfo.isValid);\r\n        }\r\n    }\r\n\r\n    function setGachaInfos(InputGachaInfo[] memory _inputGachaInfo) external onlyOwner {\r\n        for (uint256 k = 0; k < _inputGachaInfo.length; k++) {\r\n            require(_inputGachaInfo[k].tokenId != 0, \"gacha id not valid\");\r\n            if (GachaType.Character == _inputGachaInfo[k].gachaType) {\r\n                GachaInfo memory _gachaInfo = GachaInfo(_inputGachaInfo[k].tokenId, _inputGachaInfo[k].name, _inputGachaInfo[k].tierRatio, _inputGachaInfo[k].gachaGradeRatio, _inputGachaInfo[k].isValid);\r\n                uint256 sumTierRatio = 0;\r\n                for (uint256 i = 0; i < _gachaInfo.tierRatio.length; i++) {\r\n                    sumTierRatio += _gachaInfo.tierRatio[i];\r\n                }\r\n                require(sumTierRatio != 0, \"gacha ratio sum 0\");\r\n                if (!gachaInfo[_gachaInfo.tokenId].isValid) {\r\n                    gachaCount++;\r\n                }\r\n                for (uint256 i = 0; i < _gachaInfo.gachaGradeRatio.length; i++) {\r\n                    if (_gachaInfo.tierRatio[i] != 0) {\r\n                        uint256 sumGachaGradeRatio = 0;\r\n                        for (uint256 j = 0; j < _gachaInfo.gachaGradeRatio[i].length; j++) {\r\n                            sumGachaGradeRatio += _gachaInfo.gachaGradeRatio[i][j];\r\n                        }\r\n                        require(sumGachaGradeRatio != 0, \"gacha gacha grade ratio sum 0\");\r\n                    }\r\n                }\r\n                gachaTypeByTokenId[_gachaInfo.tokenId] = uint256(GachaType.Character);\r\n                gachaInfo[_gachaInfo.tokenId] = _gachaInfo;\r\n                emit SetGachaInfo(_gachaInfo.tokenId, _gachaInfo.name, _gachaInfo.tierRatio, _gachaInfo.gachaGradeRatio, _gachaInfo.isValid);\r\n            } else if (GachaType.FateCore == _inputGachaInfo[k].gachaType) {\r\n                FateCoreGachaInfo memory _fateCoreGachaInfo = FateCoreGachaInfo(_inputGachaInfo[k].tokenId, _inputGachaInfo[k].name, _inputGachaInfo[k].gachaFateCoreRatio, _inputGachaInfo[k].gachaFateCoreList, _inputGachaInfo[k].isValid);\r\n                uint256 sumRatio = 0;\r\n                for (uint256 i = 0; i < _fateCoreGachaInfo.gachaFateCoreRatio.length; i++) {\r\n                    sumRatio += _fateCoreGachaInfo.gachaFateCoreRatio[i];\r\n                }\r\n                require(sumRatio != 0, \"gacha ratio sum 0\");\r\n                require(_fateCoreGachaInfo.gachaFateCoreRatio.length == _fateCoreGachaInfo.gachaFateCoreList.length, \"not same count\");\r\n                if (!fateCoreGachaInfo[_fateCoreGachaInfo.tokenId].isValid) {\r\n                    gachaCount++;\r\n                }\r\n                gachaTypeByTokenId[_fateCoreGachaInfo.tokenId] = uint256(GachaType.FateCore);\r\n                fateCoreGachaInfo[_fateCoreGachaInfo.tokenId] = _fateCoreGachaInfo;\r\n                emit SetFateCoreGachaInfo(_fateCoreGachaInfo.tokenId, _fateCoreGachaInfo.name, _fateCoreGachaInfo.gachaFateCoreRatio, _fateCoreGachaInfo.gachaFateCoreList, _fateCoreGachaInfo.isValid);\r\n            }\r\n        }\r\n    }\r\n\r\n    function removeGachaInfo(uint256 _tokenId) external onlyOwner {\r\n        require(_tokenId != 0, \"gacha id not valid\");\r\n        if (gachaInfo[_tokenId].isValid) {\r\n            gachaCount--;\r\n        }\r\n        emit RemoveGachaInfo(_tokenId, gachaInfo[_tokenId].name, gachaInfo[_tokenId].tierRatio, gachaInfo[_tokenId].gachaGradeRatio, gachaInfo[_tokenId].isValid);\r\n        delete gachaInfo[_tokenId];\r\n    }\r\n\r\n    function removeFateCoreGachaInfo(uint256 _tokenId) external onlyOwner {\r\n        require(_tokenId != 0, \"gacha id not valid\");\r\n        if (fateCoreGachaInfo[_tokenId].isValid) {\r\n            gachaCount--;\r\n        }\r\n        emit RemoveFateCoreGachaInfo(_tokenId, fateCoreGachaInfo[_tokenId].name, fateCoreGachaInfo[_tokenId].gachaFateCoreRatio, fateCoreGachaInfo[_tokenId].gachaFateCoreList, fateCoreGachaInfo[_tokenId].isValid);\r\n        delete fateCoreGachaInfo[_tokenId];\r\n    }\r\n}\r\n// File: contracts/Admin/LuxOnAdmin.sol\r\n\r\n\r\npragma solidity ^0.8.16;\r\n\r\n\r\ncontract LuxOnAdmin is Ownable {\r\n\r\n    mapping(string => mapping(address => bool)) private _superOperators;\r\n\r\n    event SuperOperator(string operator, address superOperator, bool enabled);\r\n\r\n    function setSuperOperator(string memory operator, address[] memory _operatorAddress, bool enabled) external onlyOwner {\r\n        for (uint256 i = 0; i < _operatorAddress.length; i++) {\r\n            _superOperators[operator][_operatorAddress[i]] = enabled;\r\n            emit SuperOperator(operator, _operatorAddress[i], enabled);\r\n        }\r\n    }\r\n\r\n    function isSuperOperator(string memory operator, address who) public view returns (bool) {\r\n        return _superOperators[operator][who];\r\n    }\r\n}\r\n// File: contracts/LUXON/utils/LuxOnSuperOperators.sol\r\n\r\n\r\npragma solidity ^0.8.16;\r\n\r\n\r\n\r\ncontract LuxOnSuperOperators is Ownable {\r\n\r\n    event SetLuxOnAdmin(address indexed luxOnAdminAddress);\r\n    event SetOperator(string indexed operator);\r\n\r\n    address private luxOnAdminAddress;\r\n    string private operator;\r\n\r\n    constructor(\r\n        string memory _operator,\r\n        address _luxOnAdminAddress\r\n    ) {\r\n        operator = _operator;\r\n        luxOnAdminAddress = _luxOnAdminAddress;\r\n    }\r\n\r\n    modifier onlySuperOperator() {\r\n        require(LuxOnAdmin(luxOnAdminAddress).isSuperOperator(operator, msg.sender), \"LuxOnSuperOperators: not super operator\");\r\n        _;\r\n    }\r\n\r\n    function getLuxOnAdmin() public view returns (address) {\r\n        return luxOnAdminAddress;\r\n    }\r\n\r\n    function getOperator() public view returns (string memory) {\r\n        return operator;\r\n    }\r\n\r\n    function setLuxOnAdmin(address _luxOnAdminAddress) external onlyOwner {\r\n        luxOnAdminAddress = _luxOnAdminAddress;\r\n        emit SetLuxOnAdmin(_luxOnAdminAddress);\r\n    }\r\n\r\n    function setOperator(string memory _operator) external onlyOwner {\r\n        operator = _operator;\r\n        emit SetOperator(_operator);\r\n    }\r\n\r\n    function isSuperOperator(address spender) public view returns (bool) {\r\n        return LuxOnAdmin(luxOnAdminAddress).isSuperOperator(operator, spender);\r\n    }\r\n}\r\n// File: contracts/LUXON/utils/RandomSeedNumber.sol\r\n\r\n\r\npragma solidity ^0.8.16;\r\n\r\n\r\n\r\n\r\ncontract RandomSeedNumber is VRFConsumerBaseV2, LuxOnSuperOperators {\r\n    event RequestSent(address indexed userAddress, uint256 indexed gachaTicketTokenId, uint256 indexed tokenId, uint256 requestId);\r\n    event RequestFulfilled(address indexed userAddress, uint256 indexed requestId, uint256[] indexed randomWords);\r\n\r\n    struct RequestStatus {\r\n        bool fulfilled;\r\n        bool exists;\r\n        uint256[] randomWords;\r\n    }\r\n\r\n    mapping(uint256 => RequestStatus) public s_requests;\r\n    VRFCoordinatorV2Interface COORDINATOR;\r\n    uint64 s_subscriptionId;\r\n\r\n    // past requests Id.\r\n    uint256[] public requestIds;\r\n    uint256 public lastRequestId;\r\n    // keyHash = the maximum gas price you are willing to pay for a request in wei\r\n    //https://docs.chain.link/vrf/v2/subscription/supported-networks\r\n    // -> VRFCoordinator, keyHash \uc218\uc815\r\n    bytes32 keyHash = 0xcc294a196eeeb44da2888d17c0625cc88d70d9760a69d58d853ba6581a9ab0cd;\r\n    uint32 callbackGasLimit = 100000;\r\n    uint16 requestConfirmations = 3;\r\n    uint32 numWords = 1;\r\n    address vrfCoordinator = 0xAE975071Be8F8eE67addBC1A82488F1C24858067;\r\n\r\n    constructor(\r\n        uint64 subscriptionId,\r\n        string memory operator,\r\n        address luxOnAdmin\r\n    )\r\n    VRFConsumerBaseV2(vrfCoordinator) LuxOnSuperOperators(operator, luxOnAdmin)\r\n    {\r\n        COORDINATOR = VRFCoordinatorV2Interface(vrfCoordinator);\r\n        s_subscriptionId = subscriptionId;\r\n    }\r\n\r\n    function requestRandomWords(address userAddress, uint256 gachaTicketTokenId, uint256 tokenId)\r\n    external\r\n    onlySuperOperator\r\n    {\r\n        uint256 requestId = COORDINATOR.requestRandomWords(\r\n            keyHash,\r\n            s_subscriptionId,\r\n            requestConfirmations,\r\n            callbackGasLimit,\r\n            numWords\r\n        );\r\n        s_requests[requestId] = RequestStatus({\r\n        randomWords : new uint256[](0),\r\n        exists : true,\r\n        fulfilled : false\r\n        });\r\n        requestIds.push(requestId);\r\n        lastRequestId = requestId;\r\n        emit RequestSent(userAddress, gachaTicketTokenId, tokenId, requestId);\r\n    }\r\n\r\n    function fulfillRandomWords(\r\n        uint256 _requestId,\r\n        uint256[] memory _randomWords\r\n    ) internal override {\r\n        require(s_requests[_requestId].exists, \"request not found\");\r\n        s_requests[_requestId].fulfilled = true;\r\n        s_requests[_requestId].randomWords = _randomWords;\r\n        emit RequestFulfilled(msg.sender, _requestId, _randomWords);\r\n    }\r\n\r\n    function getRequestStatus(\r\n        uint256 _requestId\r\n    ) external view returns (bool fulfilled) {\r\n        require(s_requests[_requestId].exists, \"request not found\");\r\n        RequestStatus memory request = s_requests[_requestId];\r\n        return request.fulfilled;\r\n    }\r\n\r\n    function getRequestStatusMany(uint256[] memory _requestIdArray) external view returns (bool[] memory fulfilled) {\r\n        bool[] memory fulfilledResults = new bool[](_requestIdArray.length);\r\n        for (uint i = 0; i < _requestIdArray.length; i++) {\r\n            require(s_requests[_requestIdArray[i]].exists, \"request not found\");\r\n            RequestStatus memory request = s_requests[_requestIdArray[i]];\r\n            fulfilledResults[i] = request.fulfilled;\r\n        }\r\n        return fulfilledResults;\r\n\r\n    }\r\n\r\n    function getRandomNumber(\r\n        uint256 _requestId\r\n    ) external view returns (uint256 randomWord) {\r\n        require(s_requests[_requestId].exists, \"request not found\");\r\n        RequestStatus memory request = s_requests[_requestId];\r\n        return request.randomWords[0];\r\n    }\r\n}\r\n\r\n// File: contracts/LUXON/utils/ERC1155LUXON.sol\r\n\r\n\r\npragma solidity ^0.8.16;\r\n\r\n\r\n\r\n\r\n\r\ncontract ERC1155LUXON is ERC1155, ERC1155Supply, LuxOnSuperOperators {\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    constructor(\r\n        string memory name_,\r\n        string memory symbol_,\r\n        string memory uri_,\r\n        string memory operator,\r\n        address luxOnAdmin\r\n    ) ERC1155(uri_) LuxOnSuperOperators(operator, luxOnAdmin) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    function setName(string memory name_) external virtual onlyOwner {\r\n        _name = name_;\r\n    }\r\n\r\n    function setSymbol(string memory symbol_) external virtual onlyOwner {\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    function name() public view virtual returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function setURI(string memory newuri) external virtual onlyOwner {\r\n        _setURI(newuri);\r\n    }\r\n\r\n    function mint(address account, uint256 id, uint256 amount, bytes memory data) external virtual onlySuperOperator {\r\n        _mint(account, id, amount, data);\r\n    }\r\n\r\n    function mintBatch(address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) external virtual onlySuperOperator {\r\n        _mintBatch(to, ids, amounts, data);\r\n    }\r\n\r\n    function burn(address account, uint256 id, uint256 value) external virtual onlySuperOperator {\r\n        _burn(account, id, value);\r\n    }\r\n\r\n    function burnBatch(address account, uint256[] memory ids, uint256[] memory values) external virtual onlySuperOperator {\r\n        _burnBatch(account, ids, values);\r\n    }\r\n\r\n    function _beforeTokenTransfer(address operator, address from, address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) internal virtual override (ERC1155, ERC1155Supply) {\r\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\r\n    }\r\n\r\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes memory data) public virtual override {\r\n        require(\r\n            from == _msgSender() || isSuperOperator(msg.sender) || isApprovedForAll(from, _msgSender()),\r\n            \"ERC1155: caller is not owner nor approved\"\r\n        );\r\n        _safeTransferFrom(from, to, id, amount, data);\r\n    }\r\n\r\n    function uri(uint256 _tokenId) override public view returns (string memory) {\r\n        return string(\r\n            abi.encodePacked(\r\n                super.uri(0), \"/\", Strings.toString(_tokenId)\r\n            )\r\n        );\r\n    }\r\n}\r\n// File: contracts/LUXON/utils/IGachaTicket.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.16;\r\n\r\n\r\ninterface IGachaTicket {\r\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes memory data) external;\r\n    function mint(address account, uint256 id, uint256 amount, bytes memory data) external;\r\n    function mintBatch(address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) external;\r\n    function balanceOf(address account, uint256 id) external returns (uint256);\r\n    function burn(address account, uint256 id, uint256 value) external;\r\n    function burnBatch(address account, uint256[] memory ids, uint256[] memory values) external;\r\n}\r\n\r\n// File: contracts/Admin/LuxOnService.sol\r\n\r\n\r\npragma solidity ^0.8.15;\r\n\r\n\r\ncontract LuxOnService is Ownable {\r\n    mapping(address => bool) isInspection;\r\n\r\n    event Inspection(address contractAddress, uint256 timestamp, bool live);\r\n\r\n    function isLive(address contractAddress) public view returns (bool) {\r\n        return !isInspection[contractAddress];\r\n    }\r\n\r\n    function setInspection(address[] memory contractAddresses, bool _isInspection) external onlyOwner {\r\n        for (uint256 i = 0; i < contractAddresses.length; i++) {\r\n            isInspection[contractAddresses[i]] = _isInspection;\r\n            emit Inspection(contractAddresses[i], block.timestamp, _isInspection);\r\n        }\r\n    }\r\n}\r\n// File: contracts/LUXON/utils/LuxOnLive.sol\r\n\r\n\r\npragma solidity ^0.8.16;\r\n\r\n\r\n\r\ncontract LuxOnLive is Ownable {\r\n    address private luxOnService;\r\n\r\n    event SetLuxOnService(address indexed luxOnService);\r\n\r\n    constructor(\r\n        address _luxOnService\r\n    ) {\r\n        luxOnService = _luxOnService;\r\n    }\r\n\r\n    function getLuxOnService() public view returns (address) {\r\n        return luxOnService;\r\n    }\r\n\r\n    function setLuxOnService(address _luxOnService) external onlyOwner {\r\n        luxOnService = _luxOnService;\r\n        emit SetLuxOnService(_luxOnService);\r\n    }\r\n\r\n    modifier isLive() {\r\n        require(LuxOnService(luxOnService).isLive(address(this)), \"LuxOnLive: not live\");\r\n        _;\r\n    }\r\n}\r\n// File: contracts/LUXON/store/desperado/GachaMachineByGachaTicketV3.sol\r\n\r\n\r\npragma solidity ^0.8.16;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract GachaMachineByGachaTicket is ReentrancyGuard, LuxOnLive, ERC1155Holder, LuxOnData {\r\n    event GachaByGachaTicket(address indexed owner, uint256 indexed gachaTicketTokenId, uint256 indexed tokenId, uint256 requestId);\r\n\r\n    event SetMintGoodsInfo(address indexed mintGoodsAddress, uint256[] tokenIds);\r\n    event SetMintAddress(address indexed mintAddress);\r\n    event SetRandomSeedAddress(address indexed randomSeedAddress);\r\n    event Withdraw(uint256 amount);\r\n\r\n    struct UsedGoods {\r\n        uint256 tokenId;\r\n        uint256 amount;\r\n    }\r\n\r\n    struct MintGoodsInfo {\r\n        address mintGoodsAddress;\r\n        uint256[] tokenIds;\r\n    }\r\n\r\n    MintGoodsInfo private mintGoodsInfo;\r\n    mapping(address => mapping(uint256 => bool)) private mintGoodsList;\r\n\r\n    address private mintAddress;\r\n\r\n    string public gachaData = \"DspGachaData\";\r\n\r\n    address public randomSeedAddress;\r\n\r\n    constructor(\r\n        address _mintAddress,\r\n        MintGoodsInfo memory _mintGoodsInfo,\r\n        address dataAddress,\r\n        address luxOnService,\r\n        address _randomSeedAddress\r\n    ) LuxOnData(dataAddress) LuxOnLive(luxOnService) {\r\n        mintGoodsInfo = _mintGoodsInfo;\r\n        for (uint256 i = 0; i < _mintGoodsInfo.tokenIds.length; i++) {\r\n            mintGoodsList[_mintGoodsInfo.mintGoodsAddress][_mintGoodsInfo.tokenIds[i]] = true;\r\n        }\r\n        mintAddress = _mintAddress;\r\n        randomSeedAddress = _randomSeedAddress;\r\n    }\r\n\r\n    //------------------ get ------------------//\r\n\r\n    function getMintGoodsInfo() public view returns (MintGoodsInfo memory) {\r\n        return mintGoodsInfo;\r\n    }\r\n\r\n    function getMintAddress() public view returns (address) {\r\n        return mintAddress;\r\n    }\r\n\r\n    function getRandomSeedAddress() public view returns (address) {\r\n        return randomSeedAddress;\r\n    }\r\n    //------------------ set ------------------//\r\n\r\n    function setMintGoodsInfo(MintGoodsInfo memory _mintGoodsInfo) external onlyOwner {\r\n        for (uint256 i = 0; i < mintGoodsInfo.tokenIds.length; i++) {\r\n            mintGoodsList[mintGoodsInfo.mintGoodsAddress][mintGoodsInfo.tokenIds[i]] = false;\r\n        }\r\n        mintGoodsInfo = _mintGoodsInfo;\r\n        for (uint256 i = 0; i < mintGoodsInfo.tokenIds.length; i++) {\r\n            mintGoodsList[mintGoodsInfo.mintGoodsAddress][mintGoodsInfo.tokenIds[i]] = true;\r\n        }\r\n\r\n        emit SetMintGoodsInfo(_mintGoodsInfo.mintGoodsAddress, _mintGoodsInfo.tokenIds);\r\n    }\r\n\r\n    function setMintAddress(address _mintAddress) external onlyOwner {\r\n        mintAddress = _mintAddress;\r\n        emit SetMintAddress(_mintAddress);\r\n    }\r\n\r\n    function setRandomSeedAddress(address _address) public {\r\n        randomSeedAddress = _address;\r\n        emit SetRandomSeedAddress(_address);\r\n    }\r\n    //------------------ gacha ------------------//\r\n\r\n    function gacha(UsedGoods memory _gachaInfo) external isLive {\r\n        mintPay(_gachaInfo);\r\n        IERC721LUXON(mintAddress).mint(msg.sender, _gachaInfo.amount);\r\n\r\n        uint256 lastTokenId = IERC721LUXON(mintAddress).nextTokenId() - 1;\r\n        uint256[] memory tokenIds = new uint256[](_gachaInfo.amount);\r\n        for (uint256 i = 0; i < _gachaInfo.amount; i++) {\r\n            uint256 tokenId = lastTokenId - _gachaInfo.amount + i + 1;\r\n            tokenIds[i] = tokenId;\r\n            RandomSeedNumber(randomSeedAddress).requestRandomWords(msg.sender, _gachaInfo.tokenId, tokenId);\r\n            //emit GachaByGachaTicket(msg.sender, _gachaInfo.tokenId, tokenId, requestId);\r\n        }\r\n    }\r\n\r\n    function withdraw() external onlyOwner nonReentrant {\r\n        (bool success,) = msg.sender.call{value : address(this).balance}(\"\");\r\n        require(success, \"Transfer failed.\");\r\n        emit Withdraw(address(this).balance);\r\n    }\r\n\r\n    //------------------ private ------------------//\r\n\r\n    function mintPay(UsedGoods memory _gachaInfo) private {\r\n        require(mintGoodsList[mintGoodsInfo.mintGoodsAddress][_gachaInfo.tokenId], \"not valid token id\");\r\n\r\n        address gachaDataAddress = getDataAddress(gachaData);\r\n        uint256 gachaType = DspGachaData(gachaDataAddress).getGachaType(_gachaInfo.tokenId);\r\n        if (uint256(GachaType.Character) == gachaType) {\r\n            GachaInfo memory gachaInfo = DspGachaData(gachaDataAddress).getGachaInfo(_gachaInfo.tokenId);\r\n            require(gachaInfo.isValid, \"not valid token id\");\r\n        } else if (uint256(GachaType.FateCore) == gachaType) {\r\n            FateCoreGachaInfo memory fateCoreGachaInfo = DspGachaData(gachaDataAddress).getFateCoreGachaInfo(_gachaInfo.tokenId);\r\n            require(fateCoreGachaInfo.isValid, \"not valid token id\");\r\n        }\r\n        IGachaTicket(mintGoodsInfo.mintGoodsAddress).burn(msg.sender, _gachaInfo.tokenId, _gachaInfo.amount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mintAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"mintGoodsAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct GachaMachineByGachaTicket.MintGoodsInfo\",\"name\":\"_mintGoodsInfo\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"dataAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"luxOnService\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_randomSeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gachaTicketTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"GachaByGachaTicket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"luxOnService\",\"type\":\"address\"}],\"name\":\"SetLuxOnService\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"luxonData\",\"type\":\"address\"}],\"name\":\"SetLuxonData\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"mintAddress\",\"type\":\"address\"}],\"name\":\"SetMintAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"mintGoodsAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"SetMintGoodsInfo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"randomSeedAddress\",\"type\":\"address\"}],\"name\":\"SetRandomSeedAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct GachaMachineByGachaTicket.UsedGoods\",\"name\":\"_gachaInfo\",\"type\":\"tuple\"}],\"name\":\"gacha\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gachaData\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"getDataAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLuxOnData\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLuxOnService\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMintAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMintGoodsInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"mintGoodsAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct GachaMachineByGachaTicket.MintGoodsInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRandomSeedAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"randomSeedAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_luxonData\",\"type\":\"address\"}],\"name\":\"setLuxOnData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_luxOnService\",\"type\":\"address\"}],\"name\":\"setLuxOnService\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mintAddress\",\"type\":\"address\"}],\"name\":\"setMintAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"mintGoodsAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct GachaMachineByGachaTicket.MintGoodsInfo\",\"name\":\"_mintGoodsInfo\",\"type\":\"tuple\"}],\"name\":\"setMintGoodsInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setRandomSeedAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "GachaMachineByGachaTicket", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000241e78d45c0a7c263bf9d230a229f0bafb42cda300000000000000000000000000000000000000000000000000000000000000a000000000000000000000000047e02786b3aefe45f4db89d296b5b9c5d7ed6c530000000000000000000000008186780f64aa472c16874464d21485f60826c60d000000000000000000000000b75b14f5bb549ae951202cb4f93c6a968897fe0800000000000000000000000046f9fff0252375dfe38f8e79c4983f85cc6e29ea00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000016e361000000000000000000000000000000000000000000000000000000000016e362000000000000000000000000000000000000000000000000000000000016e363000000000000000000000000000000000000000000000000000000000016e364000000000000000000000000000000000000000000000000000000000016e554000000000000000000000000000000000000000000000000000000000016e555000000000000000000000000000000000000000000000000000000000016e556000000000000000000000000000000000000000000000000000000000016e557000000000000000000000000000000000000000000000000000000000016e558000000000000000000000000000000000000000000000000000000000016e559000000000000000000000000000000000000000000000000000000000016e55a000000000000000000000000000000000000000000000000000000000016e55b000000000000000000000000000000000000000000000000000000000016e55c000000000000000000000000000000000000000000000000000000000016e55d000000000000000000000000000000000000000000000000000000000016e55e000000000000000000000000000000000000000000000000000000000016e55f000000000000000000000000000000000000000000000000000000000016e560000000000000000000000000000000000000000000000000000000000016e561000000000000000000000000000000000000000000000000000000000016e562000000000000000000000000000000000000000000000000000000000016e563000000000000000000000000000000000000000000000000000000000016e564000000000000000000000000000000000000000000000000000000000016e565", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://833189e88a638d4814defe2e5be537996c98285a291e74008776e38167a6fde3"}