{"SourceCode": "// SPDX-License-Identifier: GPL-3.0\r\n/**\r\n *\r\n * CUBIX USDT wallet\r\n * URL: cubixpro.world/\r\n *\r\n */\r\npragma solidity >=0.6.0;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, 'SafeMath: addition overflow');\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, 'SafeMath: subtraction overflow');\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, 'SafeMath: multiplication overflow');\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, 'SafeMath: division by zero');\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\ninterface ERC720 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function balanceOf(\r\n        address tokenOwner\r\n    ) external view returns (uint256 balance);\r\n\r\n    function allowance(\r\n        address _owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ncontract CubixWallet {\r\n    using SafeMath for uint256;\r\n\r\n    ERC720 public token;\r\n    address public managerAdress;\r\n    address public ownerAddress;\r\n    bool public isSelfAllow = false;\r\n    mapping(address => uint256) public holderBalance;\r\n    mapping(uint256 => bool) public txDone;\r\n\r\n    event Deposit(address _address, uint256 _amount, uint256 _time);\r\n    event Withdraw(address _address, uint256 _amount, uint256 id, uint256 _time);\r\n\r\n    constructor(address _managerAdress, address _token) {\r\n        managerAdress = _managerAdress;\r\n        ownerAddress = msg.sender;\r\n        token = ERC720(_token);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == ownerAddress, 'Only owner');\r\n        _;\r\n    }\r\n\r\n    modifier onlyManager() {\r\n        require(msg.sender == managerAdress, 'Only Manager');\r\n        _;\r\n    }\r\n\r\n    function deposit(uint256 amount) public payable {\r\n        uint256 balance = token.balanceOf(msg.sender);\r\n        uint256 allowance = token.allowance(msg.sender, address(this));\r\n\r\n        require(balance >= amount, 'Error: Insufficient Balance');\r\n        require(allowance >= amount, 'Error: Allowance less than spending');\r\n\r\n        token.transferFrom(msg.sender, address(this), amount);\r\n        holderBalance[msg.sender] = holderBalance[msg.sender].add(amount);\r\n        emit Deposit(msg.sender, amount, block.timestamp);\r\n    }\r\n\r\n    function withdrawMultiple(\r\n        address[] calldata _address,\r\n        uint256[] calldata _amount,\r\n        uint256[] calldata id\r\n    ) public payable onlyManager {\r\n        for (uint256 index = 0; index < _address.length; index++) {\r\n            withdraw(_address[index], _amount[index], id[index]);\r\n        }\r\n    }\r\n\r\n    function withdraw(\r\n        address _address,\r\n        uint256 _amount,\r\n        uint256 id\r\n    ) public payable onlyManager {\r\n        require(txDone[id] == false, 'ID already handled');\r\n        if (holderBalance[_address] >= _amount) {\r\n            holderBalance[_address] = holderBalance[_address].sub(_amount);\r\n        }\r\n        token.transfer(_address, _amount);\r\n        txDone[id] = true;\r\n        emit Withdraw(_address, _amount, id, block.timestamp);\r\n    }\r\n\r\n    function withdrawSelf(\r\n        address _address,\r\n        uint256 _amount,\r\n        uint256 id\r\n    ) public payable onlyManager {\r\n        require(isSelfAllow, 'Self withdraw not allowed');\r\n        _withdraw(_address, _amount, id);\r\n    }\r\n\r\n    function _withdraw(\r\n        address _address,\r\n        uint256 _amount,\r\n        uint256 id\r\n    ) internal {\r\n        require(\r\n            holderBalance[_address] >= _amount,\r\n            'Error: Insufficient Balance'\r\n        );\r\n        require(txDone[id] == false, 'ID already handled');\r\n        token.transfer(_address, _amount);\r\n        holderBalance[_address] = holderBalance[_address].sub(_amount);\r\n        txDone[id] = true;\r\n        emit Withdraw(_address, _amount, id, block.timestamp);\r\n    }\r\n\r\n    function handleTransaction(\r\n        address _address,\r\n        uint256 _amount,\r\n        uint256 id,\r\n        uint256 operation\r\n    ) public onlyManager {\r\n        if (operation == 0) {\r\n            holderBalance[_address] = holderBalance[_address].add(_amount);\r\n            emit Deposit(_address, _amount, block.timestamp);\r\n        }\r\n        require(txDone[id] == false, 'ID already handled');\r\n        if (operation == 1) {\r\n            holderBalance[_address] = holderBalance[_address].sub(_amount);\r\n            txDone[id] = true;\r\n            emit Withdraw(_address, _amount, id, block.timestamp);\r\n        }\r\n    }\r\n\r\n    function ChangeSelfAllowed(bool _isSelfAllow) public payable onlyManager {\r\n        isSelfAllow = _isSelfAllow;\r\n    }\r\n\r\n    function changeManager(address _address) public onlyOwner {\r\n        managerAdress = _address;\r\n    }\r\n\r\n    function changeOwner(address _address) public onlyOwner {\r\n        ownerAddress = _address;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_managerAdress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isSelfAllow\",\"type\":\"bool\"}],\"name\":\"ChangeSelfAllowed\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"changeManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"operation\",\"type\":\"uint256\"}],\"name\":\"handleTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"holderBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSelfAllow\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"managerAdress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract ERC720\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"txDone\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_address\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amount\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"id\",\"type\":\"uint256[]\"}],\"name\":\"withdrawMultiple\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"withdrawSelf\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "CubixWallet", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000c78a2d6348eb50ae0d3f3fcbc7b992ca1082d99000000000000000000000000a0e5c8b2b2e345c72f452880b2c164b944012907", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://5f024aad2c9c4c2573951606b7269fe93d3ad349cdff344f9c44a0b1dca937fe"}