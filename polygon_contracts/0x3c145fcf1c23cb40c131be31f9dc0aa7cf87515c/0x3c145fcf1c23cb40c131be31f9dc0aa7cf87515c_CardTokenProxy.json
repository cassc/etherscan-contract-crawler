{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/card/CardTokenProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * FANZONE.io NFT implementation of the LUKSO LSP-8-IdentifiableDigitalAsset standard\\n * for more see https://fanzone.io/nfts\\n */\\n\\n// constants\\nimport { CARD_TOKEN_SCORING_NAME_HASH } from \\\"../registry/constants.sol\\\";\\n\\n// libs\\nimport \\\"../royalties/RoyaltySharesLib.sol\\\";\\n\\n// interfaces\\nimport \\\"../registry/IContractRegistry.sol\\\";\\nimport \\\"./ICardTokenScoring.sol\\\";\\nimport \\\"./ICardToken.sol\\\";\\nimport \\\"./ICardTokenProxy.sol\\\";\\n\\n// modules\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@lukso/lsp-smart-contracts/contracts/LSP8IdentifiableDigitalAsset/extensions/LSP8CappedSupplyInitAbstract.sol\\\";\\nimport \\\"@lukso/lsp-smart-contracts/contracts/LSP8IdentifiableDigitalAsset/extensions/LSP8CompatibilityForERC721InitAbstract.sol\\\";\\nimport \\\"../lsp/LSP8Metadata.sol\\\";\\nimport \\\"../lsp/OpenSeaCompatForLSP8.sol\\\";\\nimport \\\"../registry/UsesContractRegistryProxy.sol\\\";\\nimport \\\"../royalties/RoyaltySharesProxy.sol\\\";\\nimport \\\"./CardMarket.sol\\\";\\n// TODO: remove me one day soon\\nimport \\\"../lsp/TemporaryLSP4Compatability.sol\\\";\\n\\ncontract CardTokenProxy is\\n    ICardToken,\\n    ICardTokenProxy,\\n    Initializable,\\n    Pausable,\\n    LSP8CompatibilityForERC721InitAbstract,\\n    LSP8CappedSupplyInitAbstract,\\n    LSP8Metadata,\\n    RoyaltySharesProxy,\\n    UsesContractRegistryProxy,\\n    TemporaryLSP4Compatability,\\n    CardMarket,\\n    OpenSeaCompatForLSP8\\n{\\n    //\\n    // --- Storage\\n    //\\n\\n    // TODO: could pack score values together to save some gas on initialize\\n    uint256 private _scoreMin;\\n    uint256 private _scoreMax;\\n    uint256 private _scoreScale;\\n    uint256 private _scoreMaxTokenId;\\n\\n    //\\n    // --- Errors\\n    //\\n\\n    error CardTokenScoreRange();\\n    error CardTokenScoreScaleZero();\\n    error CardTokenScoreMaxTokenIdZero();\\n    error CardTokenScoreMaxTokenIdLargerThanSupplyCap();\\n    error CardTokenInvalidTokenId(bytes32 tokenId);\\n\\n    //\\n    // --- Modifiers\\n    //\\n\\n    modifier onlyValidTokenId(bytes32 tokenId) {\\n        _onlyValidTokenId(tokenId);\\n\\n        _;\\n    }\\n\\n    function _onlyValidTokenId(bytes32 tokenId) internal view {\\n        uint256 tokenIdAsNumber = uint256(tokenId);\\n\\n        if (tokenIdAsNumber == 0 || tokenIdAsNumber > tokenSupplyCap()) {\\n            revert CardTokenInvalidTokenId(tokenId);\\n        }\\n    }\\n\\n    //\\n    // --- Initialize\\n    //\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    constructor() initializer {\\n        // when the base logic contract is deployed, the initialized flag should get set so its not\\n        // possible to call `initialize(...)`\\n    }\\n\\n    function initialize(\\n        address owner,\\n        string memory name,\\n        string memory symbol,\\n        address contractRegistry,\\n        address[] memory creators,\\n        uint96[] memory creatorRoyaltyShares,\\n        uint256 tokenSupplyCap,\\n        uint256 scoreMin,\\n        uint256 scoreMax,\\n        uint256 scoreScale,\\n        uint256 scoreMaxTokenId\\n    ) public override initializer {\\n        LSP8CompatibilityForERC721InitAbstract._initialize(name, symbol, owner);\\n        LSP8CappedSupplyInitAbstract._initialize(tokenSupplyCap);\\n        _initializeUsesContractRegistry(contractRegistry);\\n        _initializeRoyaltyShares(creators, creatorRoyaltyShares);\\n\\n        if (scoreMin > scoreMax) {\\n            revert CardTokenScoreRange();\\n        }\\n        _scoreMin = scoreMin;\\n        _scoreMax = scoreMax;\\n\\n        if (scoreScale == 0) {\\n            revert CardTokenScoreScaleZero();\\n        }\\n        _scoreScale = scoreScale;\\n\\n        if (scoreMaxTokenId == 0) {\\n            revert CardTokenScoreMaxTokenIdZero();\\n        }\\n        if (scoreMaxTokenId > tokenSupplyCap) {\\n            revert CardTokenScoreMaxTokenIdLargerThanSupplyCap();\\n        }\\n        _scoreMaxTokenId = scoreMaxTokenId;\\n    }\\n\\n    //\\n    // --- Token queries\\n    //\\n\\n    /**\\n     * @dev Returns the number of tokens available to be minted.\\n     */\\n    function mintableSupply() public view override returns (uint256) {\\n        return tokenSupplyCap() - totalSupply();\\n    }\\n\\n    //\\n    // --- TokenId queries\\n    //\\n\\n    /**\\n     * @dev Returns the score for a given `tokenId`.\\n     */\\n    function calculateScore(bytes32 tokenId)\\n        public\\n        view\\n        override\\n        onlyValidTokenId(tokenId)\\n        returns (string memory)\\n    {\\n        uint256 tokenIdAsNumber = uint256(tokenId);\\n\\n        return\\n            ICardTokenScoring(_getCardTokenScoringAddress()).calculateScore(\\n                tokenSupplyCap(),\\n                _scoreMin,\\n                _scoreMax,\\n                _scoreScale,\\n                _scoreMaxTokenId,\\n                tokenIdAsNumber\\n            );\\n    }\\n\\n    //\\n    // --- Unpacking logic\\n    //\\n\\n    /**\\n     * @dev Mints a `tokenId` to `to`.\\n     *\\n     * Returns the `mintableSupply` for the caller to know when it is no longer available for unpack\\n     * requests.\\n     *\\n     * Requirements:\\n     *\\n     * - `mintableSupply()` must be greater than zero.\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function unpackCard(address to, bytes32 tokenId)\\n        public\\n        override\\n        onlyOwner\\n        onlyValidTokenId(tokenId)\\n        returns (uint256)\\n    {\\n        // TODO(future version): eventually this function should be called from a CardManager contract for better\\n        // control of unpacking on-chain and visibility when creating new cards; instead of onlyOwner\\n        // modifier we might want a different access control pattern\\n\\n        // using force=true to allow minting a token to an EOA or contract that isnt an UniversalProfile\\n        _mint(to, tokenId, true, \\\"\\\");\\n\\n        // inform the caller about mintable supply\\n        return mintableSupply();\\n    }\\n\\n    //\\n    // --- Pause logic\\n    //\\n\\n    function pause() public onlyOwner {\\n        _pause();\\n    }\\n\\n    //\\n    // --- Metadata logic\\n    //\\n\\n    /*\\n     * @dev Creates a metadata contract (ERC725Y) for `tokenId`.\\n     *\\n     * Returns the created contract address.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function createMetadataFor(bytes32 tokenId)\\n        public\\n        override\\n        onlyOwner\\n        onlyValidTokenId(tokenId)\\n        whenNotPaused\\n        returns (address)\\n    {\\n        _existsOrError(tokenId);\\n\\n        // TODO(future version): eventually this function could be called from a CardManager contract for better\\n        // control over all deployed CardTokens; instead of onlyOwner modifier we might want a\\n        // different access control pattern\\n\\n        return _createMetadataFor(tokenId);\\n    }\\n\\n    //\\n    // --- Contract Registry queries\\n    //\\n\\n    function _getCardTokenScoringAddress() internal view returns (address) {\\n        return\\n            IContractRegistry(UsesContractRegistryProxy.contractRegistry())\\n                .getRegisteredContract(CARD_TOKEN_SCORING_NAME_HASH);\\n    }\\n\\n    //\\n    // --- Public override\\n    //\\n\\n    // TODO: we shouldnt need to do this.. instead each initialize function should have unique name\\n    // so we dont have function selector collision (ie. __LSP8IdentifiableDigitalAsset_initialize)\\n    function _initialize(\\n        string memory name_,\\n        string memory symbol_,\\n        address newOwner_\\n    )\\n        internal\\n        virtual\\n        override(\\n            LSP8IdentifiableDigitalAssetInitAbstract,\\n            LSP8CompatibilityForERC721InitAbstract\\n        )\\n    {\\n        super.initialize(name_, symbol_, newOwner_);\\n    }\\n\\n    function authorizeOperator(address operator, bytes32 tokenId)\\n        public\\n        virtual\\n        override(\\n            ILSP8IdentifiableDigitalAsset,\\n            LSP8IdentifiableDigitalAssetCore,\\n            LSP8CompatibilityForERC721Core,\\n            LSP8CompatibilityForERC721InitAbstract\\n        )\\n    {\\n        super.authorizeOperator(operator, tokenId);\\n    }\\n\\n    /**\\n     * @inheritdoc ILSP8CompatibilityForERC721\\n     * @dev Compatible with ERC721 safeTransferFrom.\\n     * Using force=true so that any address may receive the tokenId.\\n     * Change added to support transfer on third-party platforms (ex: OpenSea)\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external virtual override {\\n        return transfer(from, to, bytes32(tokenId), true, \\\"\\\");\\n    }\\n\\n    /**\\n     * @inheritdoc ILSP8CompatibilityForERC721\\n     * @dev Compatible with ERC721 safeTransferFrom.\\n     * Using force=true so that any address may receive the tokenId.\\n     * Change added to support transfer on third-party platforms (ex: OpenSea)\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) external virtual override {\\n        return transfer(from, to, bytes32(tokenId), true, data);\\n    }\\n\\n    function isApprovedForAll(address tokenOwner, address operator)\\n        public\\n        view\\n        virtual\\n        override(LSP8CompatibilityForERC721Core, OpenSeaCompatForLSP8)\\n        returns (bool)\\n    {\\n        return super.isApprovedForAll(tokenOwner, operator);\\n    }\\n\\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        virtual\\n        override(LSP8CompatibilityForERC721Core, OpenSeaCompatForLSP8)\\n        returns (string memory)\\n    {\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    //\\n    // --- Internal override\\n    //\\n\\n    function _transfer(\\n        address from,\\n        address to,\\n        bytes32 tokenId,\\n        bool force,\\n        bytes memory data\\n    )\\n        internal\\n        virtual\\n        override(\\n            LSP8IdentifiableDigitalAssetCore,\\n            LSP8CompatibilityForERC721Core,\\n            LSP8CompatibilityForERC721InitAbstract,\\n            CardMarket,\\n            TemporaryLSP4Compatability\\n        )\\n        whenNotPaused\\n    {\\n        super._transfer(from, to, tokenId, force, data);\\n    }\\n\\n    function _mint(\\n        address to,\\n        bytes32 tokenId,\\n        bool force,\\n        bytes memory data\\n    )\\n        internal\\n        virtual\\n        override(\\n            LSP8IdentifiableDigitalAssetCore,\\n            LSP8CompatibilityForERC721Core,\\n            LSP8CompatibilityForERC721InitAbstract,\\n            LSP8CappedSupplyInitAbstract,\\n            TemporaryLSP4Compatability\\n        )\\n        whenNotPaused\\n    {\\n        super._mint(to, tokenId, force, data);\\n    }\\n\\n    function _burn(bytes32 tokenId, bytes memory data)\\n        internal\\n        virtual\\n        override(\\n            LSP8IdentifiableDigitalAssetCore,\\n            LSP8CompatibilityForERC721Core,\\n            LSP8CompatibilityForERC721InitAbstract,\\n            CardMarket\\n        )\\n        whenNotPaused\\n    {\\n        super._burn(tokenId, data);\\n    }\\n\\n    function _isOperatorOrOwner(address caller, bytes32 tokenId)\\n        internal\\n        view\\n        virtual\\n        override(LSP8IdentifiableDigitalAssetCore, OpenSeaCompatForLSP8)\\n        returns (bool)\\n    {\\n        return super._isOperatorOrOwner(caller, tokenId);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/registry/constants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.0;\\n\\n// keccak256(\\\"FeeCollector\\\")\\nbytes32 constant FEE_COLLECTOR_NAME_HASH = 0xd59ed7e0cf777b70bff43b36b5e7942a53db5cdc1ed3eac0584ffe6898bb47cd;\\n\\n// keccak256(\\\"CardTokenScoring\\\")\\nbytes32 constant CARD_TOKEN_SCORING_NAME_HASH = 0xdffe073e73d032dfae2943de6514599be7d9b1cd7b5ff3c3cafaeafef9ce8120;\\n\\n// keccak256(\\\"OpenSeaProxy\\\")\\nbytes32 constant OPENSEA_PROXY_NAME_HASH = 0x0cef494da2369e60d9db5c21763fa9ba82fceb498a37b9aaa12fe66296738da9;\\n\"\r\n    },\r\n    \"contracts/royalties/RoyaltySharesLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.0;\\n\\nlibrary RoyaltySharesLib {\\n    struct RoyaltyShare {\\n        address receiver;\\n        // using basis points to describe shares\\n        uint96 share;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/registry/IContractRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.0;\\n\\ninterface IContractRegistry {\\n    //\\n    // --- Events\\n    //\\n\\n    event RegisteredContract(bytes32 nameHash, address target);\\n    event WhitelistedToken(address token, bool whitelisted);\\n\\n    //\\n    // --- Registry Queries\\n    //\\n\\n    function getRegisteredContract(bytes32 nameHash)\\n        external\\n        view\\n        returns (address);\\n\\n    //\\n    // --- Registry Logic\\n    //\\n\\n    function setRegisteredContract(bytes32 nameHash, address target) external;\\n\\n    function removeRegisteredContract(bytes32 nameHash) external;\\n\\n    //\\n    // --- Whitelist Token Queries\\n    //\\n\\n    function isWhitelistedToken(address token) external view returns (bool);\\n\\n    function allWhitelistedTokens() external view returns (address[] memory);\\n\\n    //\\n    // --- Whitelist Token Logic\\n    //\\n\\n    function setWhitelistedToken(address token) external;\\n\\n    function removeWhitelistedToken(address token) external;\\n}\\n\"\r\n    },\r\n    \"contracts/card/ICardTokenScoring.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.0;\\n\\ninterface ICardTokenScoring {\\n    function calculateScore(\\n        uint256 tokenSupply,\\n        uint256 scoreMin,\\n        uint256 scoreMax,\\n        uint256 scoreScale,\\n        uint256 scoreMaxTokenId,\\n        uint256 tokenId\\n    ) external pure returns (string memory);\\n}\\n\"\r\n    },\r\n    \"contracts/card/ICardToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CC0-1.0\\n\\npragma solidity ^0.8.0;\\n\\ninterface ICardToken {\\n    //\\n    // --- Token queries\\n    //\\n\\n    /**\\n     * @dev Returns the number of tokens available to be minted.\\n     */\\n    function mintableSupply() external view returns (uint256);\\n\\n    //\\n    // --- TokenId queries\\n    //\\n\\n    /**\\n     * @dev Returns the score for a given `tokenId`.\\n     */\\n    function calculateScore(bytes32 tokenId) external returns (string memory);\\n\\n    //\\n    // --- Unpacking logic\\n    //\\n\\n    /**\\n     * @dev Mints a `tokenId` and transfers it to `to`.\\n     *\\n     * Returns the `mintableSupply` for the caller to know when it is no longer available for unpack\\n     * requests.\\n     *\\n     * Requirements:\\n     *\\n     * - `mintableSupply()` must be greater than zero.\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function unpackCard(address to, bytes32 tokenId) external returns (uint256);\\n\\n    //\\n    // --- Owner logic\\n    //\\n\\n    /*\\n     * @dev Creates a metadata contract (ERC725Y) for `tokenId`.\\n     *\\n     * Returns the created contract address.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function createMetadataFor(bytes32 tokenId) external returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/card/ICardTokenProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CC0-1.0\\n\\npragma solidity ^0.8.0;\\n\\ninterface ICardTokenProxy {\\n    function initialize(\\n        address owner,\\n        string memory name,\\n        string memory symbol,\\n        address contractRegistry,\\n        address[] memory creators,\\n        uint96[] memory creatorRoyaltyShares,\\n        uint256 tokenSupplyCap,\\n        uint256 scoreMin,\\n        uint256 scoreMax,\\n        uint256 scoreScale,\\n        uint256 scoreMaxTokenId\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !Address.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@lukso/lsp-smart-contracts/contracts/LSP8IdentifiableDigitalAsset/extensions/LSP8CappedSupplyInitAbstract.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// modules\\nimport \\\"./LSP8CappedSupplyCore.sol\\\";\\nimport \\\"../LSP8IdentifiableDigitalAssetInit.sol\\\";\\n\\n/**\\n * @dev LSP8 extension, adds token supply cap.\\n */\\nabstract contract LSP8CappedSupplyInitAbstract is\\n    Initializable,\\n    LSP8CappedSupplyCore,\\n    LSP8IdentifiableDigitalAssetInit\\n{\\n    function _initialize(uint256 tokenSupplyCap_)\\n        internal\\n        virtual\\n        onlyInitializing\\n    {\\n        if (tokenSupplyCap_ == 0) {\\n            revert LSP8CappedSupplyRequired();\\n        }\\n\\n        _tokenSupplyCap = tokenSupplyCap_;\\n    }\\n\\n    // --- Overrides\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenSupplyCap() - totalSupply()` must be greater than zero.\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(\\n        address to,\\n        bytes32 tokenId,\\n        bool force,\\n        bytes memory data\\n    )\\n        internal\\n        virtual\\n        override(LSP8IdentifiableDigitalAssetCore, LSP8CappedSupplyCore)\\n    {\\n        super._mint(to, tokenId, force, data);\\n    }\\n}\\n\"\r\n    },\r\n    \"@lukso/lsp-smart-contracts/contracts/LSP8IdentifiableDigitalAsset/extensions/LSP8CompatibilityForERC721InitAbstract.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// modules\\nimport \\\"./LSP8CompatibilityForERC721Core.sol\\\";\\nimport \\\"../LSP8IdentifiableDigitalAssetInitAbstract.sol\\\";\\n\\n// constants\\nimport \\\"./LSP8CompatibilityConstants.sol\\\";\\n\\n/**\\n * @dev LSP8 extension, for compatibility for clients / tools that expect ERC721.\\n */\\ncontract LSP8CompatibilityForERC721InitAbstract is\\n    LSP8CompatibilityForERC721Core,\\n    LSP8IdentifiableDigitalAssetInitAbstract\\n{\\n    function _initialize(\\n        string memory name_,\\n        string memory symbol_,\\n        address newOwner_\\n    ) internal virtual override onlyInitializing {\\n        LSP8IdentifiableDigitalAssetInitAbstract._initialize(\\n            name_,\\n            symbol_,\\n            newOwner_\\n        );\\n    }\\n\\n    function authorizeOperator(address operator, bytes32 tokenId)\\n        public\\n        virtual\\n        override(\\n            LSP8IdentifiableDigitalAssetCore,\\n            LSP8CompatibilityForERC721Core\\n        )\\n    {\\n        super.authorizeOperator(operator, tokenId);\\n    }\\n\\n    function _transfer(\\n        address from,\\n        address to,\\n        bytes32 tokenId,\\n        bool force,\\n        bytes memory data\\n    )\\n        internal\\n        virtual\\n        override(\\n            LSP8IdentifiableDigitalAssetCore,\\n            LSP8CompatibilityForERC721Core\\n        )\\n    {\\n        super._transfer(from, to, tokenId, force, data);\\n    }\\n\\n    function _mint(\\n        address to,\\n        bytes32 tokenId,\\n        bool force,\\n        bytes memory data\\n    )\\n        internal\\n        virtual\\n        override(\\n            LSP8IdentifiableDigitalAssetCore,\\n            LSP8CompatibilityForERC721Core\\n        )\\n    {\\n        super._mint(to, tokenId, force, data);\\n    }\\n\\n    function _burn(bytes32 tokenId, bytes memory data)\\n        internal\\n        virtual\\n        override(\\n            LSP8IdentifiableDigitalAssetCore,\\n            LSP8CompatibilityForERC721Core\\n        )\\n    {\\n        super._burn(tokenId, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(IERC165, LSP8IdentifiableDigitalAssetInitAbstract)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == _INTERFACEID_ERC721 ||\\n            interfaceId == _INTERFACEID_ERC721METADATA ||\\n            super.supportsInterface(interfaceId);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lsp/LSP8Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.0;\\n\\n// libraries\\nimport \\\"@lukso/lsp-smart-contracts/contracts/Utils/ERC725Utils.sol\\\";\\n\\n// modules\\nimport \\\"@lukso/lsp-smart-contracts/contracts/LSP8IdentifiableDigitalAsset/LSP8IdentifiableDigitalAssetCore.sol\\\";\\nimport \\\"@erc725/smart-contracts/contracts/ERC725YCore.sol\\\";\\n\\n// TODO: this should be in\\n// \\\"@lukso/lsp-smart-contracts/contracts/LSP8IdentifiableDigitalAsset/extensions\\\"\\n\\nabstract contract LSP8Metadata is\\n    LSP8IdentifiableDigitalAssetCore,\\n    ERC725YCore\\n{\\n    //\\n    // --- Metadata queries\\n    //\\n\\n    event MetadataAddressCreated(\\n        bytes32 indexed tokenId,\\n        address metadataAddress\\n    );\\n\\n    function metadataAddressOf(bytes32 tokenId) public view returns (address) {\\n        require(\\n            _exists(tokenId),\\n            \\\"LSP8Metadata: metadata query for nonexistent token\\\"\\n        );\\n\\n        bytes memory value = ERC725Utils.getDataSingle(\\n            this,\\n            _buildMetadataKey(tokenId, true)\\n        );\\n\\n        if (value.length == 0) {\\n            return address(0);\\n        } else {\\n            return address(bytes20(value));\\n        }\\n    }\\n\\n    function metadataJsonOf(bytes32 tokenId)\\n        public\\n        view\\n        returns (string memory)\\n    {\\n        require(\\n            _exists(tokenId),\\n            \\\"LSP8Metadata: metadata query for nonexistent token\\\"\\n        );\\n\\n        bytes memory value = ERC725Utils.getDataSingle(\\n            this,\\n            _buildMetadataKey(tokenId, false)\\n        );\\n\\n        return abi.decode(value, (string));\\n    }\\n\\n    function _buildMetadataKey(bytes32 tokenId, bool buildAddressKey)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        return\\n            bytes32(\\n                abi.encodePacked(\\n                    buildAddressKey\\n                        ? _LSP8_METADATA_ADDRESS_KEY_PREFIX\\n                        : _LSP8_METADATA_JSON_KEY_PREFIX,\\n                    bytes20(keccak256(abi.encodePacked(tokenId)))\\n                )\\n            );\\n    }\\n\\n    //\\n    // --- Metadata functionality\\n    //\\n\\n    /**\\n     * @dev Create a ERC725Y contract to be used for metadata storage of `tokenId`.\\n     */\\n    function _createMetadataFor(bytes32 tokenId)\\n        internal\\n        virtual\\n        returns (address)\\n    {\\n        require(\\n            _exists(tokenId),\\n            \\\"LSP8: metadata creation for nonexistent token\\\"\\n        );\\n\\n        bytes32 metadataKeyForTokenId = _buildMetadataKey(tokenId, true);\\n\\n        bytes memory existingMetadataValue = _getData(metadataKeyForTokenId);\\n        if (existingMetadataValue.length > 0) {\\n            address existingMetadataAddress = address(\\n                bytes20(existingMetadataValue)\\n            );\\n            return existingMetadataAddress;\\n        }\\n\\n        // TODO: can use a proxy pattern here / have a factory registed in ContractRegistry\\n        //\\n        // NOTE: the owner for the ERC725Y will be the current owner of the CardToken. If the owner\\n        // for CardToken ever changes, all metadata contracts could also have their owner changed..\\n        address metadataAddress = address(new ERC725Y(_msgSender()));\\n        _setData(metadataKeyForTokenId, abi.encodePacked(metadataAddress));\\n\\n        emit MetadataAddressCreated(tokenId, metadataAddress);\\n\\n        return metadataAddress;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lsp/OpenSeaCompatForLSP8.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.0;\\n\\n// constants\\nimport { OPENSEA_PROXY_NAME_HASH } from \\\"../registry/constants.sol\\\";\\n\\n// libs\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n// interfaces\\nimport \\\"../registry/IContractRegistry.sol\\\";\\n\\n// modules\\nimport \\\"@lukso/lsp-smart-contracts/contracts/LSP8IdentifiableDigitalAsset/extensions/LSP8CompatibilityForERC721Core.sol\\\";\\nimport \\\"../registry/UsesContractRegistryProxy.sol\\\";\\n\\n// NOTE: this contract allows OpenSea to be able to sell & auction tokens\\n//\\n// https://docs.opensea.io/docs/polygon-basic-integration\\nabstract contract OpenSeaCompatForLSP8 is\\n    LSP8CompatibilityForERC721Core,\\n    UsesContractRegistryProxy\\n{\\n    using ERC725Utils for IERC725Y;\\n\\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (string memory)\\n    {\\n        // this is expected to return a string like `ipfs://ipfs-cid-for-a-directory/0.json`\\n        string memory uriString = super.tokenURI(tokenId);\\n\\n        if (tokenId == 0) {\\n            // this is returning the `0.json` ipfs path\\n            return uriString;\\n        } else {\\n            // this is the offset to use, so we get the string `ipfs://ipfs-cid-for-a-directory/`\\n            uint256 ipfsDirectoryPrefixSize = 54;\\n            bytes memory ipfsURIForTokenId = new bytes(ipfsDirectoryPrefixSize);\\n\\n            bytes memory strBytes = bytes(uriString);\\n            for (uint256 i = 0; i < ipfsDirectoryPrefixSize; i++) {\\n                ipfsURIForTokenId[i] = strBytes[i];\\n            }\\n\\n            return\\n                string(\\n                    abi.encodePacked(\\n                        ipfsURIForTokenId,\\n                        Strings.toString(tokenId),\\n                        \\\".json\\\"\\n                    )\\n                );\\n        }\\n    }\\n\\n    function contractURI() public view returns (string memory) {\\n        return tokenURI(0);\\n    }\\n\\n    // support for ERC721\\n    function isApprovedForAll(address tokenOwner, address operator)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        if (operator == _getOpenSeaProxyAddress()) {\\n            return true;\\n        }\\n\\n        return super.isApprovedForAll(tokenOwner, operator);\\n    }\\n\\n    // support for LSP8\\n    function _isOperatorOrOwner(address caller, bytes32 tokenId)\\n        internal\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        if (caller == _getOpenSeaProxyAddress()) {\\n            return true;\\n        }\\n\\n        return super._isOperatorOrOwner(caller, tokenId);\\n    }\\n\\n    //\\n    // --- Contract Registry queries\\n    //\\n\\n    function _getOpenSeaProxyAddress() internal view returns (address) {\\n        return\\n            IContractRegistry(UsesContractRegistryProxy.contractRegistry())\\n                .getRegisteredContract(OPENSEA_PROXY_NAME_HASH);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/registry/UsesContractRegistryProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.0;\\n\\n// interfaces\\nimport \\\"./IUsesContractRegistry.sol\\\";\\n\\n// modules\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\n\\nabstract contract UsesContractRegistryProxy is\\n    IUsesContractRegistry,\\n    Initializable\\n{\\n    //\\n    // --- Errors\\n    //\\n\\n    error ContractRegistryRequired();\\n\\n    //\\n    // --- Storage\\n    //\\n\\n    address private _contractRegistry;\\n\\n    //\\n    // --- Initialize\\n    //\\n\\n    function _initializeUsesContractRegistry(address contractRegistry_)\\n        internal\\n        onlyInitializing\\n    {\\n        if (contractRegistry_ == address(0)) {\\n            revert ContractRegistryRequired();\\n        }\\n        _contractRegistry = contractRegistry_;\\n    }\\n\\n    //\\n    // --- Queries\\n    //\\n\\n    function contractRegistry() public view override returns (address) {\\n        return _contractRegistry;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/royalties/RoyaltySharesProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.0;\\n\\n// constants\\nimport { FEE_SCALE } from \\\"../royalties/constants.sol\\\";\\n\\n// libs\\nimport \\\"./RoyaltySharesLib.sol\\\";\\n\\n// interfaces\\nimport \\\"../royalties/IRoyaltyShares.sol\\\";\\n\\n// modules\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\n\\nabstract contract RoyaltySharesProxy is IRoyaltyShares, Initializable {\\n    //\\n    // --- Errors\\n    //\\n\\n    error RoyaltySharesRoyaltiesRequired();\\n    error RoyaltySharesRoyaltiesSum();\\n\\n    //\\n    // --- Storage\\n    //\\n\\n    RoyaltySharesLib.RoyaltyShare[] private _royalties;\\n\\n    //\\n    // --- Initialize\\n    //\\n\\n    function _initializeRoyaltyShares(\\n        address[] memory receivers,\\n        uint96[] memory receiverRoyaltyShares\\n    ) internal onlyInitializing {\\n        if (\\n            receivers.length == 0 ||\\n            receivers.length != receiverRoyaltyShares.length\\n        ) {\\n            revert RoyaltySharesRoyaltiesRequired();\\n        }\\n\\n        uint256 revenueShareSum;\\n        for (uint256 i = 0; i < receiverRoyaltyShares.length; i++) {\\n            revenueShareSum += receiverRoyaltyShares[i];\\n            _royalties.push(\\n                RoyaltySharesLib.RoyaltyShare({\\n                    receiver: receivers[i],\\n                    share: receiverRoyaltyShares[i]\\n                })\\n            );\\n        }\\n\\n        if (revenueShareSum != FEE_SCALE) {\\n            revert RoyaltySharesRoyaltiesSum();\\n        }\\n    }\\n\\n    //\\n    // --- Royalty Queries\\n    //\\n\\n    function royaltyShares()\\n        public\\n        view\\n        override\\n        returns (RoyaltySharesLib.RoyaltyShare[] memory)\\n    {\\n        return _royalties;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/card/CardMarket.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.0;\\n\\n// constants\\nimport { FEE_COLLECTOR_NAME_HASH } from \\\"../registry/constants.sol\\\";\\n\\n// interfaces\\nimport \\\"@lukso/lsp-smart-contracts/contracts/LSP7DigitalAsset/extensions/ILSP7CompatibilityForERC20.sol\\\";\\nimport \\\"../registry/IContractRegistry.sol\\\";\\nimport \\\"../royalties/IFeeCollector.sol\\\";\\nimport \\\"../royalties/IFeeCollectorRevenueShareCallback.sol\\\";\\nimport \\\"./ICardMarket.sol\\\";\\n\\n// modules\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@lukso/lsp-smart-contracts/contracts/LSP8IdentifiableDigitalAsset/LSP8IdentifiableDigitalAssetCore.sol\\\";\\nimport \\\"../registry/UsesContractRegistryProxy.sol\\\";\\nimport \\\"../royalties/RoyaltySharesProxy.sol\\\";\\n\\nabstract contract CardMarket is\\n    ICardMarket,\\n    IFeeCollectorRevenueShareCallback,\\n    LSP8IdentifiableDigitalAssetCore,\\n    RoyaltySharesProxy,\\n    UsesContractRegistryProxy\\n{\\n    //\\n    // --- Errors\\n    //\\n\\n    error CardMarketNotTokenOwner(\\n        address owner,\\n        address operator,\\n        bytes32 tokenId\\n    );\\n    error CardMarketNoMarket(bytes32 tokenId);\\n    error CardMarketMinimumAmountRequired();\\n    error CardMarketTokenNotWhitelisted(address token);\\n    error CardMarketBuyAmountTooSmall(uint256 minimumAmount, uint256 amount);\\n\\n    //\\n    // --- Storage\\n    //\\n\\n    mapping(bytes32 => CardMarketState) private _marketStateForTokenId;\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n    EnumerableSet.Bytes32Set private _allMarkets;\\n\\n    //\\n    // --- Market queries\\n    //\\n\\n    function marketFor(bytes32 tokenId)\\n        public\\n        view\\n        override\\n        returns (CardMarketState memory)\\n    {\\n        CardMarketState storage market = _marketStateForTokenId[tokenId];\\n        if (market.minimumAmount == 0) {\\n            revert CardMarketNoMarket(tokenId);\\n        }\\n\\n        return market;\\n    }\\n\\n    function getAllMarkets()\\n        public\\n        view\\n        override\\n        returns (CardMarketState[] memory)\\n    {\\n        uint256 _allMarketsLength = _allMarkets.length();\\n        CardMarketState[] memory _allMarketsStates = new CardMarketState[](\\n            _allMarketsLength\\n        );\\n\\n        for (uint256 index = 0; index < _allMarketsLength; index++) {\\n            bytes32 _tokenId = _allMarkets.at(index);\\n\\n            _allMarketsStates[index] = marketFor(_tokenId);\\n        }\\n        return _allMarketsStates;\\n    }\\n\\n    //\\n    // --- Market logic\\n    //\\n\\n    function setMarketFor(\\n        bytes32 tokenId,\\n        address acceptedToken,\\n        uint256 minimumAmount\\n    ) public override {\\n        address tokenOwner = tokenOwnerOf(tokenId);\\n        address operator = _msgSender();\\n        if (tokenOwner != operator) {\\n            revert CardMarketNotTokenOwner(tokenOwner, operator, tokenId);\\n        }\\n\\n        if (minimumAmount == 0) {\\n            revert CardMarketMinimumAmountRequired();\\n        }\\n\\n        if (\\n            !IContractRegistry(UsesContractRegistryProxy.contractRegistry())\\n                .isWhitelistedToken(acceptedToken)\\n        ) {\\n            revert CardMarketTokenNotWhitelisted(acceptedToken);\\n        }\\n\\n        _marketStateForTokenId[tokenId] = CardMarketState({\\n            tokenId: tokenId,\\n            minimumAmount: minimumAmount,\\n            acceptedToken: acceptedToken\\n        });\\n\\n        _allMarkets.add(tokenId);\\n\\n        emit MarketSet(tokenId, acceptedToken, minimumAmount);\\n    }\\n\\n    function removeMarketFor(bytes32 tokenId) public override {\\n        address tokenOwner = tokenOwnerOf(tokenId);\\n        address operator = _msgSender();\\n        if (tokenOwner != operator) {\\n            revert CardMarketNotTokenOwner(tokenOwner, operator, tokenId);\\n        }\\n\\n        CardMarketState storage market = _marketStateForTokenId[tokenId];\\n        if (market.minimumAmount == 0) {\\n            revert CardMarketNoMarket(tokenId);\\n        }\\n\\n        _removeMarketFor(tokenId);\\n\\n        emit MarketRemove(tokenId);\\n    }\\n\\n    function buyFromMarket(\\n        bytes32 tokenId,\\n        uint256 amount,\\n        address referrer\\n    ) public override {\\n        CardMarketState memory market = _marketStateForTokenId[tokenId];\\n        if (market.minimumAmount == 0) {\\n            revert CardMarketNoMarket(tokenId);\\n        }\\n        if (amount < market.minimumAmount) {\\n            revert CardMarketBuyAmountTooSmall(market.minimumAmount, amount);\\n        }\\n\\n        address buyer = _msgSender();\\n        address tokenOwner = tokenOwnerOf(tokenId);\\n\\n        _removeMarketFor(tokenId);\\n\\n        uint256 totalFee = IFeeCollector(_getFeeCollectorAddress())\\n            .shareRevenue(\\n                market.acceptedToken,\\n                amount,\\n                referrer,\\n                RoyaltySharesProxy.royaltyShares(),\\n                abi.encode(buyer, market.acceptedToken)\\n            );\\n        uint256 tokenOwnerAmount = amount - totalFee;\\n\\n        ILSP7CompatibilityForERC20(market.acceptedToken).transferFrom(\\n            buyer,\\n            tokenOwner,\\n            tokenOwnerAmount\\n        );\\n\\n        _transfer(tokenOwner, buyer, tokenId, true, \\\"\\\");\\n\\n        emit MarketBuy(tokenId, buyer, amount);\\n    }\\n\\n    function _removeMarketFor(bytes32 tokenId) internal {\\n        delete _marketStateForTokenId[tokenId];\\n        _allMarkets.remove(tokenId);\\n    }\\n\\n    //\\n    // --- FeeCollectorCallback logic\\n    //\\n\\n    function revenueShareCallback(\\n        uint256 totalFee,\\n        bytes calldata dataForCallback\\n    ) external override {\\n        address feeCollector = _getFeeCollectorAddress();\\n\\n        if (msg.sender != feeCollector) {\\n            revert RevenueShareCallbackInvalidSender();\\n        }\\n\\n        (address feePayer, address token) = abi.decode(\\n            dataForCallback,\\n            (address, address)\\n        );\\n\\n        ILSP7CompatibilityForERC20(token).transferFrom(\\n            feePayer,\\n            feeCollector,\\n            totalFee\\n        );\\n    }\\n\\n    //\\n    // --- Contract Registry queries\\n    //\\n\\n    function _getFeeCollectorAddress() internal view returns (address) {\\n        return\\n            IContractRegistry(UsesContractRegistryProxy.contractRegistry())\\n                .getRegisteredContract(FEE_COLLECTOR_NAME_HASH);\\n    }\\n\\n    //\\n    // --- Internal overrides\\n    //\\n\\n    function _transfer(\\n        address from,\\n        address to,\\n        bytes32 tokenId,\\n        bool force,\\n        bytes memory data\\n    ) internal virtual override {\\n        _removeMarketFor(tokenId);\\n\\n        super._transfer(from, to, tokenId, force, data);\\n    }\\n\\n    function _burn(bytes32 tokenId, bytes memory data)\\n        internal\\n        virtual\\n        override\\n    {\\n        _removeMarketFor(tokenId);\\n\\n        super._burn(tokenId, data);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lsp/TemporaryLSP4Compatability.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.0;\\n\\n//\\n// --- This file contains temporary code to support the change from old LSP4DigitalCertificate\\n//\\n\\nimport \\\"@lukso/lsp-smart-contracts/contracts/LSP8IdentifiableDigitalAsset/LSP8IdentifiableDigitalAssetCore.sol\\\";\\n\\n// TODO: only here to satisfy current client expectation that token holders can be discovered\\n// directly from the contract (this is a leftover from LSP4DigitalCertificate)\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nabstract contract TemporaryLSP4Compatability is\\n    LSP8IdentifiableDigitalAssetCore\\n{\\n    //\\n    // --- Storage\\n    //\\n\\n    // TODO: only here to satisfy current client expectation that token holders can be discovered\\n    // directly from the contract (this is a leftover from LSP4DigitalCertificate)\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    EnumerableSet.AddressSet private _tokenHolders;\\n\\n    //\\n    // --- Queries\\n    //\\n\\n    /**\\n     * @dev Returns a bytes32 array of all token holder addresses\\n     */\\n    function allTokenHolders() public view returns (bytes32[] memory) {\\n        // TODO: only here to satisfy current client expectation that token holders can be discovered\\n        // directly from the contract (this is a leftover from LSP4DigitalCertificate)\\n        return _tokenHolders._inner._values;\\n    }\\n\\n    //\\n    // --- Overrides\\n    //\\n\\n    function _transfer(\\n        address from,\\n        address to,\\n        bytes32 tokenId,\\n        bool force,\\n        bytes memory data\\n    ) internal virtual override {\\n        super._transfer(from, to, tokenId, force, data);\\n\\n        // TODO: only here to satisfy current client expectation that token holders can be discovered\\n        // directly from the contract (this is a leftover from LSP4DigitalCertificate)\\n        _tokenHolders.add(to);\\n        if (balanceOf(from) == 0) {\\n            _tokenHolders.remove(from);\\n        }\\n    }\\n\\n    function _mint(\\n        address to,\\n        bytes32 tokenId,\\n        bool force,\\n        bytes memory data\\n    ) internal virtual override {\\n        super._mint(to, tokenId, force, data);\\n\\n        // TODO: only here to satisfy current client expectation that token holders can be discovered\\n        // directly from the contract (this is a leftover from LSP4DigitalCertificate)\\n        _tokenHolders.add(to);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@lukso/lsp-smart-contracts/contracts/LSP8IdentifiableDigitalAsset/extensions/LSP8CappedSupplyCore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// modules\\nimport \\\"../LSP8IdentifiableDigitalAssetCore.sol\\\";\\n\\n// interfaces\\nimport \\\"./ILSP8CappedSupply.sol\\\";\\n\\n/**\\n * @dev LSP8 extension, adds token supply cap.\\n */\\nabstract contract LSP8CappedSupplyCore is\\n    ILSP8CappedSupply,\\n    LSP8IdentifiableDigitalAssetCore\\n{\\n    // --- Errors\\n\\n    error LSP8CappedSupplyRequired();\\n    error LSP8CappedSupplyCannotMintOverCap();\\n\\n    // --- Storage\\n\\n    uint256 internal _tokenSupplyCap;\\n\\n    // --- Token queries\\n\\n    /**\\n     * @inheritdoc ILSP8CappedSupply\\n     */\\n    function tokenSupplyCap() public view virtual override returns (uint256) {\\n        return _tokenSupplyCap;\\n    }\\n\\n    // --- Transfer functionality\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenSupplyCap() - totalSupply()` must be greater than zero.\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(\\n        address to,\\n        bytes32 tokenId,\\n        bool force,\\n        bytes memory data\\n    ) internal virtual override {\\n        if (totalSupply() + 1 > tokenSupplyCap()) {\\n            revert LSP8CappedSupplyCannotMintOverCap();\\n        }\\n\\n        super._mint(to, tokenId, force, data);\\n    }\\n}\\n\"\r\n    },\r\n    \"@lukso/lsp-smart-contracts/contracts/LSP8IdentifiableDigitalAsset/LSP8IdentifiableDigitalAssetInit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.0;\\n\\n// modules\\nimport \\\"./LSP8IdentifiableDigitalAssetInitAbstract.sol\\\";\\n\\n/**\\n * @title LSP8IdentifiableDigitalAsset contract\\n * @author Matthew Stevens\\n * @dev Proxy Implementation of a LSP8 compliant contract.\\n */\\ncontract LSP8IdentifiableDigitalAssetInit is\\n    LSP8IdentifiableDigitalAssetInitAbstract\\n{\\n    /**\\n     * @notice Sets the token-Metadata\\n     * @param name_ The name of the token\\n     * @param symbol_ The symbol of the token\\n     * @param newOwner_ The owner of the the token-Metadata\\n     */\\n    function initialize(\\n        string memory name_,\\n        string memory symbol_,\\n        address newOwner_\\n    ) public virtual initializer {\\n        LSP8IdentifiableDigitalAssetInitAbstract._initialize(\\n            name_,\\n            symbol_,\\n            newOwner_\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"@lukso/lsp-smart-contracts/contracts/LSP8IdentifiableDigitalAsset/LSP8IdentifiableDigitalAssetCore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.0;\\n\\n// modules\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@erc725/smart-contracts/contracts/ERC725Y.sol\\\";\\n\\n// interfaces\\nimport \\\"../LSP1UniversalReceiver/ILSP1UniversalReceiver.sol\\\";\\nimport \\\"./ILSP8IdentifiableDigitalAsset.sol\\\";\\n\\n// libraries\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"../Utils/ERC725Utils.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\n\\n// constants\\nimport \\\"./LSP8Constants.sol\\\";\\nimport \\\"../LSP1UniversalReceiver/LSP1Constants.sol\\\";\\nimport \\\"../LSP4DigitalAssetMetadata/LSP4Constants.sol\\\";\\n\\n/**\\n * @title LSP8IdentifiableDigitalAsset contract\\n * @author Matthew Stevens\\n * @dev Core Implementation of a LSP8 compliant contract.\\n */\\nabstract contract LSP8IdentifiableDigitalAssetCore is\\n    Context,\\n    ILSP8IdentifiableDigitalAsset\\n{\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n    using Address for address;\\n\\n    // --- Errors\\n\\n    error LSP8NonExistentTokenId(bytes32 tokenId);\\n    error LSP8NotTokenOwner(\\n        address tokenOwner,\\n        bytes32 tokenId,\\n        address caller\\n    );\\n    error LSP8NotTokenOperator(bytes32 tokenId, address caller);\\n    error LSP8CannotUseAddressZeroAsOperator();\\n    error LSP8CannotSendToAddressZero();\\n    error LSP8TokenIdAlreadyMinted(bytes32 tokenId);\\n    error LSP8InvalidTransferBatch();\\n    error LSP8NotifyTokenReceiverContractMissingLSP1Interface(\\n        address tokenReceiver\\n    );\\n    error LSP8NotifyTokenReceiverIsEOA(address tokenReceiver);\\n\\n    // --- Storage\\n\\n    uint256 internal _existingTokens;\\n\\n    // Mapping from `tokenId` to `tokenOwner`\\n    mapping(bytes32 => address) internal _tokenOwners;\\n\\n    // Mapping `tokenOwner` to owned tokenIds\\n    mapping(address => EnumerableSet.Bytes32Set) internal _ownedTokens;\\n\\n    // Mapping a `tokenId` to its authorized operator addresses.\\n    mapping(bytes32 => EnumerableSet.AddressSet) internal _operators;\\n\\n    // --- Token queries\\n\\n    /**\\n     * @inheritdoc ILSP8IdentifiableDigitalAsset\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _existingTokens;\\n    }\\n\\n    // --- Token owner queries\\n\\n    /**\\n     * @inheritdoc ILSP8IdentifiableDigitalAsset\\n     */\\n    function balanceOf(address tokenOwner)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _ownedTokens[tokenOwner].length();\\n    }\\n\\n    /**\\n     * @inheritdoc ILSP8IdentifiableDigitalAsset\\n     */\\n    function tokenOwnerOf(bytes32 tokenId)\\n        public\\n        view\\n        override\\n        returns (address)\\n    {\\n        address tokenOwner = _tokenOwners[tokenId];\\n\\n        if (tokenOwner == address(0)) {\\n            revert LSP8NonExistentTokenId(tokenId);\\n        }\\n\\n        return tokenOwner;\\n    }\\n\\n    /**\\n     * @inheritdoc ILSP8IdentifiableDigitalAsset\\n     */\\n    function tokenIdsOf(address tokenOwner)\\n        public\\n        view\\n        override\\n        returns (bytes32[] memory)\\n    {\\n        return _ownedTokens[tokenOwner].values();\\n    }\\n\\n    // --- Operator functionality\\n\\n    /**\\n     * @inheritdoc ILSP8IdentifiableDigitalAsset\\n     */\\n    function authorizeOperator(address operator, bytes32 tokenId)\\n        public\\n        virtual\\n        override\\n    {\\n        address tokenOwner = tokenOwnerOf(tokenId);\\n        address caller = _msgSender();\\n\\n        if (tokenOwner != caller) {\\n            revert LSP8NotTokenOwner(tokenOwner, tokenId, caller);\\n        }\\n\\n        if (operator == address(0)) {\\n            revert LSP8CannotUseAddressZeroAsOperator();\\n        }\\n\\n        // tokenOwner is always their own operator, no update required\\n        if (tokenOwner == operator) {\\n            return;\\n        }\\n\\n        _operators[tokenId].add(operator);\\n\\n        emit AuthorizedOperator(operator, tokenOwner, tokenId);\\n    }\\n\\n    /**\\n     * @inheritdoc ILSP8IdentifiableDigitalAsset\\n     */\\n    function revokeOperator(address operator, bytes32 tokenId)\\n        public\\n        virtual\\n        override\\n    {\\n        address tokenOwner = tokenOwnerOf(tokenId);\\n        address caller = _msgSender();\\n\\n        if (tokenOwner != caller) {\\n            revert LSP8NotTokenOwner(tokenOwner, tokenId, caller);\\n        }\\n\\n        if (operator == address(0)) {\\n            revert LSP8CannotUseAddressZeroAsOperator();\\n        }\\n\\n        // tokenOwner is always their own operator, no update required\\n        if (tokenOwner == operator) {\\n            return;\\n        }\\n\\n        _revokeOperator(operator, tokenOwner, tokenId);\\n    }\\n\\n    /**\\n     * @inheritdoc ILSP8IdentifiableDigitalAsset\\n     */\\n    function isOperatorFor(address operator, bytes32 tokenId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        _existsOrError(tokenId);\\n\\n        return _isOperatorOrOwner(operator, tokenId);\\n    }\\n\\n    /**\\n     * @inheritdoc ILSP8IdentifiableDigitalAsset\\n     */\\n    function getOperatorsOf(bytes32 tokenId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (address[] memory)\\n    {\\n        _existsOrError(tokenId);\\n\\n        return _operators[tokenId].values();\\n    }\\n\\n    function _isOperatorOrOwner(address caller, bytes32 tokenId)\\n        internal\\n        view\\n        virtual\\n        returns (bool)\\n    {\\n        address tokenOwner = tokenOwnerOf(tokenId);\\n\\n        return (caller == tokenOwner || _operators[tokenId].contains(caller));\\n    }\\n\\n    // --- Transfer functionality\\n\\n    /**\\n     * @inheritdoc ILSP8IdentifiableDigitalAsset\\n     */\\n    function transfer(\\n        address from,\\n        address to,\\n        bytes32 tokenId,\\n        bool force,\\n        bytes memory data\\n    ) public virtual override {\\n        address operator = _msgSender();\\n\\n        if (!_isOperatorOrOwner(operator, tokenId)) {\\n            revert LSP8NotTokenOperator(tokenId, operator);\\n        }\\n\\n        _transfer(from, to, tokenId, force, data);\\n    }\\n\\n    /**\\n     * @inheritdoc ILSP8IdentifiableDigitalAsset\\n     */\\n    function transferBatch(\\n        address[] memory from,\\n        address[] memory to,\\n        bytes32[] memory tokenId,\\n        bool force,\\n        bytes[] memory data\\n    ) external virtual override {\\n        if (\\n            from.length != to.length ||\\n            from.length != tokenId.length ||\\n            from.length != data.length\\n        ) {\\n            revert LSP8InvalidTransferBatch();\\n        }\\n\\n        for (uint256 i = 0; i < from.length; i++) {\\n            transfer(from[i], to[i], tokenId[i], force, data[i]);\\n        }\\n    }\\n\\n    function _revokeOperator(\\n        address operator,\\n        address tokenOwner,\\n        bytes32 tokenId\\n    ) internal virtual {\\n        _operators[tokenId].remove(operator);\\n        emit RevokedOperator(operator, tokenOwner, tokenId);\\n    }\\n\\n    function _clearOperators(address tokenOwner, bytes32 tokenId)\\n        internal\\n        virtual\\n    {\\n        // TODO: here is a good exmaple of why having multiple operators will be expensive.. we\\n        // need to clear them on token transfer\\n        //\\n        // NOTE: this may cause a tx to fail if there is too many operators to clear, in which case\\n        // the tokenOwner needs to call `revokeOperator` until there is less operators to clear and\\n        // the desired `transfer` or `burn` call can succeed.\\n        EnumerableSet.AddressSet storage operatorsForTokenId = _operators[\\n            tokenId\\n        ];\\n\\n        uint256 operatorListLength = operatorsForTokenId.length();\\n        for (uint256 i = 0; i < operatorListLength; i++) {\\n            // we are emptying the list, always remove from index 0\\n            address operator = operatorsForTokenId.at(0);\\n            _revokeOperator(operator, tokenOwner, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens start existing when they are minted (`_mint`), and stop existing when they are burned\\n     * (`_burn`).\\n     */\\n    function _exists(bytes32 tokenId) internal view virtual returns (bool) {\\n        return _tokenOwners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev When `tokenId` does not exist then revert with an error.\\n     */\\n    function _existsOrError(bytes32 tokenId) internal view {\\n        if (!_exists(tokenId)) {\\n            revert LSP8NonExistentTokenId(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(\\n        address to,\\n        bytes32 tokenId,\\n        bool force,\\n        bytes memory data\\n    ) internal virtual {\\n        if (to == address(0)) {\\n            revert LSP8CannotSendToAddressZero();\\n        }\\n\\n        if (_exists(tokenId)) {\\n            revert LSP8TokenIdAlreadyMinted(tokenId);\\n        }\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _ownedTokens[to].add(tokenId);\\n        _tokenOwners[tokenId] = to;\\n\\n        emit Transfer(operator, address(0), to, tokenId, force, data);\\n\\n        _notifyTokenReceiver(address(0), to, tokenId, force, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`, clearing authorized operators.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(bytes32 tokenId, bytes memory data) internal virtual {\\n        address tokenOwner = tokenOwnerOf(tokenId);\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(tokenOwner, address(0), tokenId);\\n\\n        _clearOperators(tokenOwner, tokenId);\\n\\n        _ownedTokens[tokenOwner].remove(tokenId);\\n        delete _tokenOwners[tokenId];\\n\\n        emit Transfer(operator, tokenOwner, address(0), tokenId, false, data);\\n\\n        _notifyTokenSender(tokenOwner, address(0), tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        bytes32 tokenId,\\n        bool force,\\n        bytes memory data\\n    ) internal virtual {\\n        address tokenOwner = tokenOwnerOf(tokenId);\\n        if (tokenOwner != from) {\\n            revert LSP8NotTokenOwner(tokenOwner, tokenId, from);\\n        }\\n\\n        if (to == address(0)) {\\n            revert LSP8CannotSendToAddressZero();\\n        }\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        _clearOperators(from, tokenId);\\n\\n        _ownedTokens[from].remove(tokenId);\\n        _ownedTokens[to].add(tokenId);\\n        _tokenOwners[tokenId] = to;\\n\\n        emit Transfer(operator, from, to, tokenId, force, data);\\n\\n        _notifyTokenSender(from, to, tokenId, data);\\n        _notifyTokenReceiver(from, to, tokenId, force, data);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        bytes32 tokenId\\n    ) internal virtual {\\n        // silence compiler warning about unused variable\\n        tokenId;\\n\\n        // token being minted\\n        if (from == address(0)) {\\n            _existingTokens += 1;\\n        }\\n\\n        // token being burned\\n        if (to == address(0)) {\\n            _existingTokens -= 1;\\n        }\\n    }\\n\\n    /**\\n     * @dev An attempt is made to notify the token sender about the `tokenId` changing owners using\\n     * LSP1 interface.\\n     */\\n    function _notifyTokenSender(\\n        address from,\\n        address to,\\n        bytes32 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        if (\\n            ERC165Checker.supportsERC165(from) &&\\n            ERC165Checker.supportsInterface(from, _INTERFACEID_LSP1)\\n        ) {\\n            bytes memory packedData = abi.encodePacked(from, to, tokenId, data);\\n            ILSP1UniversalReceiver(from).universalReceiver(\\n                _TYPEID_LSP8_TOKENSSENDER,\\n                packedData\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev An attempt is made to notify the token receiver about the `tokenId` changing owners\\n     * using LSP1 interface. When force is FALSE the token receiver MUST support LSP1.\\n     *\\n     * The receiver may revert when the token being sent is not wanted.\\n     */\\n    function _notifyTokenReceiver(\\n        address from,\\n        address to,\\n        bytes32 tokenId,\\n        bool force,\\n        bytes memory data\\n    ) internal virtual {\\n        if (\\n            ERC165Checker.supportsERC165(to) &&\\n            ERC165Checker.supportsInterface(to, _INTERFACEID_LSP1)\\n        ) {\\n            bytes memory packedData = abi.encodePacked(from, to, tokenId, data);\\n            ILSP1UniversalReceiver(to).universalReceiver(\\n                _TYPEID_LSP8_TOKENSRECIPIENT,\\n                packedData\\n            );\\n        } else if (!force) {\\n            if (to.code.length > 0) {\\n                revert LSP8NotifyTokenReceiverContractMissingLSP1Interface(to);\\n            } else {\\n                revert LSP8NotifyTokenReceiverIsEOA(to);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@lukso/lsp-smart-contracts/contracts/LSP8IdentifiableDigitalAsset/extensions/ILSP8CappedSupply.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// interfaces\\nimport \\\"../ILSP8IdentifiableDigitalAsset.sol\\\";\\n\\n/**\\n * @dev LSP8 extension, adds token supply cap.\\n */\\ninterface ILSP8CappedSupply is ILSP8IdentifiableDigitalAsset {\\n    /**\\n     * @dev Returns the number of tokens that can be minted.\\n     * @return The token max supply\\n     */\\n    function tokenSupplyCap() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@erc725/smart-contracts/contracts/ERC725Y.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n// modules\\nimport \\\"./ERC725YCore.sol\\\";\\n\\n/**\\n * @title ERC725 Y General key/value store\\n * @author Fabian Vogelsteller <fabian@lukso.network>\\n * @dev Contract module which provides the ability to set arbitrary key value sets that can be changed over time\\n * It is intended to standardise certain keys value pairs to allow automated retrievals and interactions\\n * from interfaces and other smart contracts\\n */\\ncontract ERC725Y is ERC725YCore {\\n    /**\\n     * @notice Sets the owner of the contract and register ERC725Y interfaceId\\n     * @param _newOwner the owner of the contract\\n     */\\n    constructor(address _newOwner) {\\n        // This is necessary to prevent a contract that implements both ERC725X and ERC725Y to call both constructors\\n        if (_newOwner != owner()) {\\n            OwnableUnset.initOwner(_newOwner);\\n        }\\n\\n        _registerInterface(_INTERFACEID_ERC725Y);\\n    }\\n}\\n\"\r\n    },\r\n    \"@lukso/lsp-smart-contracts/contracts/LSP1UniversalReceiver/ILSP1UniversalReceiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title The interface for LSP1UniversalReceiver\\n * @dev LSP1UniversalReceiver allows to receive arbitrary messages and to be informed when assets are sent or received\\n */\\ninterface ILSP1UniversalReceiver {\\n    /**\\n     * @notice Emitted when the universalReceiver function is succesfully executed\\n     * @param from The address calling the universalReceiver function\\n     * @param typeId The hash of a specific standard or a hook\\n     * @param returnedValue The return value of universalReceiver function\\n     * @param receivedData The arbitrary data passed to universalReceiver function\\n     */\\n    event UniversalReceiver(\\n        address indexed from,\\n        bytes32 indexed typeId,\\n        bytes indexed returnedValue,\\n        bytes receivedData\\n    );\\n\\n    /**\\n     * @param typeId The hash of a specific standard or a hook\\n     * @param data The arbitrary data received with the call\\n     * @dev Emits an event when it's succesfully executed\\n     *\\n     * Call the universalReceiverDelegate function in the UniversalReceiverDelegate (URD) contract, if the address of the URD\\n     * was set as a value for the `_UniversalReceiverKey` in the account key/value value store of the same contract implementing\\n     * the universalReceiver function and if the URD contract has the LSP1UniversalReceiverDelegate Interface Id registred using ERC165\\n     *\\n     * Emits a {UniversalReceiver} event\\n     */\\n    function universalReceiver(bytes32 typeId, bytes calldata data)\\n        external\\n        returns (bytes memory);\\n}\\n\"\r\n    },\r\n    \"@lukso/lsp-smart-contracts/contracts/LSP8IdentifiableDigitalAsset/ILSP8IdentifiableDigitalAsset.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// interfaces\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport \\\"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol\\\";\\n\\n/**\\n * @dev Required interface of a LSP8 compliant contract.\\n */\\ninterface ILSP8IdentifiableDigitalAsset is IERC165, IERC725Y {\\n    // --- Events\\n\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     * @param operator The address of operator sending tokens\\n     * @param from The address which tokens are sent\\n     * @param to The receiving address\\n     * @param tokenId The tokenId transferred\\n     * @param force When set to TRUE, `to` may be any address but\\n     * when set to FALSE `to` must be a contract that supports LSP1 UniversalReceiver\\n     * @param data Additional data the caller wants included in the emitted event, and sent in the hooks to `from` and `to` addresses\\n     */\\n    event Transfer(\\n        address operator,\\n        address indexed from,\\n        address indexed to,\\n        bytes32 indexed tokenId,\\n        bool force,\\n        bytes data\\n    );\\n\\n    /**\\n     * @dev Emitted when `tokenOwner` enables `operator` for `tokenId`.\\n     * @param operator The address authorized as an operator\\n     * @param tokenOwner The token owner\\n     * @param tokenId The tokenId `operator` address has access to from `tokenOwner`\\n     */\\n    event AuthorizedOperator(\\n        address indexed operator,\\n        address indexed tokenOwner,\\n        bytes32 indexed tokenId\\n    );\\n\\n    /**\\n     * @dev Emitted when `tokenOwner` disables `operator` for `tokenId`.\\n     * @param operator The address revoked from operating\\n     * @param tokenOwner The token owner\\n     * @param tokenId The tokenId `operator` is revoked from operating\\n     */\\n    event RevokedOperator(\\n        address indexed operator,\\n        address indexed tokenOwner,\\n        bytes32 indexed tokenId\\n    );\\n\\n    // --- Token queries\\n\\n    /**\\n     * @dev Returns the number of existing tokens.\\n     * @return The number of existing tokens\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    //\\n    // --- Token owner queries\\n    //\\n\\n    /**\\n     * @dev Returns the number of tokens owned by `tokenOwner`.\\n     * @param tokenOwner The address to query\\n     * @return The number of tokens owned by this address\\n     */\\n    function balanceOf(address tokenOwner) external view returns (uint256);\\n\\n    /**\\n     * @param tokenId The tokenId to query\\n     * @return The address owning the `tokenId`\\n     * @dev Returns the `tokenOwner` address of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function tokenOwnerOf(bytes32 tokenId) external view returns (address);\\n\\n    /**\\n     * @dev Returns the list of `tokenIds` for the `tokenOwner` address.\\n     * @param tokenOwner The address to query owned tokens\\n     * @return List of owned tokens by `tokenOwner` address\\n     */\\n    function tokenIdsOf(address tokenOwner)\\n        external\\n        view\\n        returns (bytes32[] memory);\\n\\n    // --- Operator functionality\\n\\n    /**\\n     * @param operator The address to authorize as an operator.\\n     * @param tokenId The tokenId operator has access to.\\n     * @dev Makes `operator` address an operator of `tokenId`.\\n     *\\n     * See {isOperatorFor}.\\n     *\\n     * Requirements\\n     *\\n     * - `tokenId` must exist.\\n     * - caller must be current `tokenOwner` of `tokenId`.\\n     * - `operator` cannot be the zero address.\\n     *\\n     * Emits an {AuthorizedOperator} event.\\n     */\\n    function authorizeOperator(address operator, bytes32 tokenId) external;\\n\\n    /**\\n     * @param operator The address to revoke as an operator.\\n     * @param tokenId The tokenId `operator` is revoked from operating\\n     * @dev Removes `operator` address as an operator of `tokenId`.\\n     *\\n     * See {isOperatorFor}.\\n     *\\n     * Requirements\\n     *\\n     * - `tokenId` must exist.\\n     * - caller must be current `tokenOwner` of `tokenId`.\\n     * - `operator` cannot be the zero address.\\n     *\\n     * Emits a {RevokedOperator} event.\\n     */\\n    function revokeOperator(address operator, bytes32 tokenId) external;\\n\\n    /**\\n     * @param operator The address to query\\n     * @param tokenId The tokenId to query\\n     * @return True if the owner of `tokenId` is `operator` address, false otherwise\\n     * @dev Returns whether `operator` address is an operator of `tokenId`.\\n     * Operators can send and burn tokens on behalf of their owners. The tokenOwner is their own\\n     * operator.\\n     *\\n     * Requirements\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function isOperatorFor(address operator, bytes32 tokenId)\\n        external\\n        view\\n        returns (bool);\\n\\n    /**\\n     * @param tokenId The tokenId to query\\n     * @return The list of operators for the `tokenId`\\n     * @dev Returns all `operator` addresses of `tokenId`.\\n     *\\n     * Requirements\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getOperatorsOf(bytes32 tokenId)\\n        external\\n        view\\n        returns (address[] memory);\\n\\n    // --- Transfer functionality\\n\\n    /**\\n     * @param from The sending address.\\n     * @param to The receiving address.\\n     * @param tokenId The tokenId to transfer.\\n     * @param force When set to TRUE, to may be any address but\\n     * when set to FALSE to must be a contract that supports LSP1 UniversalReceiver\\n     * @param data Additional data the caller wants included in the emitted event, and sent in the hooks to `from` and `to` addresses.\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be an operator of `tokenId`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(\\n        address from,\\n        address to,\\n        bytes32 tokenId,\\n        bool force,\\n        bytes memory data\\n    ) external;\\n\\n    /**\\n     * @param from The list of sending addresses.\\n     * @param to The list of receiving addresses.\\n     * @param tokenId The list of tokenId to transfer.\\n     * @param force When set to TRUE, to may be any address but\\n     * when set to FALSE to must be a contract that supports LSP1 UniversalReceiver\\n     * @param data Additional data the caller wants included in the emitted event, and sent in the hooks to `from` and `to` addresses.\\n     *\\n     * @dev Transfers many tokens based on the list `from`, `to`, `tokenId`. If any transfer fails\\n     * the call will revert.\\n     *\\n     * Requirements:\\n     *\\n     * - `from`, `to`, `tokenId` lists are the same length.\\n     * - no values in `from` can be the zero address.\\n     * - no values in `to` can be the zero address.\\n     * - each `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be an operator of each `tokenId`.\\n     *\\n     * Emits {Transfer} events.\\n     */\\n    function transferBatch(\\n        address[] memory from,\\n        address[] memory to,\\n        bytes32[] memory tokenId,\\n        bool force,\\n        bytes[] memory data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"@lukso/lsp-smart-contracts/contracts/Utils/ERC725Utils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n// interfaces\\nimport \\\"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol\\\";\\n\\nlibrary ERC725Utils {\\n    /**\\n     * @dev Gets one value from account storage\\n     */\\n    function getDataSingle(IERC725Y _account, bytes32 _key)\\n        internal\\n        view\\n        returns (bytes memory)\\n    {\\n        bytes32[] memory keys = new bytes32[](1);\\n        keys[0] = _key;\\n        bytes memory fetchResult = _account.getData(keys)[0];\\n        return fetchResult;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface,\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            _supportsERC165Interface(account, type(IERC165).interfaceId) &&\\n            !_supportsERC165Interface(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && _supportsERC165Interface(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds)\\n        internal\\n        view\\n        returns (bool[] memory)\\n    {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = _supportsERC165Interface(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in _interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!_supportsERC165Interface(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function _supportsERC165Interface(address account, bytes4 interfaceId) private view returns (bool) {\\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\\n        (bool success, bytes memory result) = account.staticcall{gas: 30000}(encodedParams);\\n        if (result.length < 32) return false;\\n        return success && abi.decode(result, (bool));\\n    }\\n}\\n\"\r\n    },\r\n    \"@lukso/lsp-smart-contracts/contracts/LSP8IdentifiableDigitalAsset/LSP8Constants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.0;\\n\\n// --- ERC165 interface ids\\nbytes4 constant _INTERFACEID_LSP8 = 0x49399145;\\n\\n// --- ERC725Y Keys\\n\\n// bytes8('LSP8MetadataAddress') + bytes4(0)\\nbytes12 constant _LSP8_METADATA_ADDRESS_KEY_PREFIX = 0x73dcc7c3c4096cdc00000000;\\n\\n// bytes8('LSP8MetadataJSON') + bytes4(0)\\nbytes12 constant _LSP8_METADATA_JSON_KEY_PREFIX = 0x9a26b4060ae7f7d500000000;\\n\\n// --- Token Hooks\\n\\n// keccak256('LSP8TokensSender')\\nbytes32 constant _TYPEID_LSP8_TOKENSSENDER = 0x3724c94f0815e936299cca424da4140752198e0beb7931a6e0925d11bc97544c;\\n\\n// keccak256('LSP8TokensRecipient')\\nbytes32 constant _TYPEID_LSP8_TOKENSRECIPIENT = 0xc7a120a42b6057a0cbed111fbbfbd52fcd96748c04394f77fc2c3adbe0391e01;\\n\"\r\n    },\r\n    \"@lukso/lsp-smart-contracts/contracts/LSP1UniversalReceiver/LSP1Constants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n// --- ERC165 interface ids\\nbytes4 constant _INTERFACEID_LSP1 = 0x6bb56a14;\\nbytes4 constant _INTERFACEID_LSP1_DELEGATE = 0xc2d7bcc1;\\n\\n// --- ERC725Y Keys\\n\\n// keccak256('LSP1UniversalReceiverDelegate')\\nbytes32 constant _LSP1_UNIVERSAL_RECEIVER_DELEGATE_KEY = 0x0cfc51aec37c55a4d0b1a65c6255c4bf2fbdf6277f3cc0730c45b828b6db8b47;\\n\"\r\n    },\r\n    \"@lukso/lsp-smart-contracts/contracts/LSP4DigitalAssetMetadata/LSP4Constants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.0;\\n\\n// --- ERC725Y entries\\n\\n// bytes16(keccak256('SupportedStandard')) + bytes12(0) + bytes4(keccak256('LSP4DigitalAsset'))\\nbytes32 constant _LSP4_SUPPORTED_STANDARDS_KEY = 0xeafec4d89fa9619884b6b89135626455000000000000000000000000a4d96624;\\n\\n// bytes4(keccak256('LSP4DigitalAsset'))\\nbytes constant _LSP4_SUPPORTED_STANDARDS_VALUE = hex\\\"a4d96624\\\";\\n\\n// keccak256('LSP4TokenName')\\nbytes32 constant _LSP4_TOKEN_NAME_KEY = 0xdeba1e292f8ba88238e10ab3c7f88bd4be4fac56cad5194b6ecceaf653468af1;\\n\\n// keccak256('LSP4TokenSymbol')\\nbytes32 constant _LSP4_TOKEN_SYMBOL_KEY = 0x2f0a68ab07768e01943a599e73362a0e17a63a72e94dd2e384d2c1d4db932756;\\n\\n// keccak256('LSP4Creators[]')\\nbytes32 constant _LSP4_CREATORS_ARRAY_KEY = 0x114bd03b3a46d48759680d81ebb2b414fda7d030a7105a851867accf1c2352e7;\\n\\n// bytes8(keccak256('LSP4CreatorsMap')) + bytes4(0)\\nbytes12 constant _LSP4_CREATORS_MAP_KEY_PREFIX = 0x6de85eaf5d982b4e00000000;\\n\\n// keccak256('LSP4Metadata')\\nbytes32 constant _LSP4_METADATA_KEY = 0x9afb95cacc9f95858ec44aa8c3b685511002e30ae54415823f406128b85b238e;\\n\"\r\n    },\r\n    \"@erc725/smart-contracts/contracts/ERC725YCore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n// constants\\nimport \\\"./constants.sol\\\";\\n\\n// interfaces\\nimport \\\"./interfaces/IERC725Y.sol\\\";\\n\\n// modules\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\nimport \\\"./utils/OwnableUnset.sol\\\";\\n\\n// libraries\\nimport \\\"./utils/GasLib.sol\\\";\\n\\n/**\\n * @title Core implementation of ERC725 Y General key/value store\\n * @author Fabian Vogelsteller <fabian@lukso.network>\\n * @dev Contract module which provides the ability to set arbitrary key value sets that can be changed over time\\n * It is intended to standardise certain keys value pairs to allow automated retrievals and interactions\\n * from interfaces and other smart contracts\\n */\\nabstract contract ERC725YCore is OwnableUnset, ERC165Storage, IERC725Y {\\n    /**\\n     * @dev Map the keys to their values\\n     */\\n    mapping(bytes32 => bytes) internal store;\\n\\n    /* Public functions */\\n\\n    /**\\n     * @inheritdoc IERC725Y\\n     */\\n    function getData(bytes32[] memory keys)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bytes[] memory values)\\n    {\\n        values = new bytes[](keys.length);\\n\\n        for (uint256 i = 0; i < keys.length; i = GasLib.unchecked_inc(i)) {\\n            values[i] = _getData(keys[i]);\\n        }\\n\\n        return values;\\n    }\\n\\n    /**\\n     * @inheritdoc IERC725Y\\n     */\\n    function setData(bytes32[] memory _keys, bytes[] memory _values)\\n        public\\n        virtual\\n        override\\n        onlyOwner\\n    {\\n        require(_keys.length == _values.length, \\\"Keys length not equal to values length\\\");\\n        for (uint256 i = 0; i < _keys.length; i = GasLib.unchecked_inc(i)) {\\n            _setData(_keys[i], _values[i]);\\n        }\\n    }\\n\\n    /* Internal functions */\\n\\n    /**\\n     * @notice Gets singular data at a given `key`\\n     * @param key The key which value to retrieve\\n     * @return value The data stored at the key\\n     */\\n    function _getData(bytes32 key) internal view virtual returns (bytes memory value) {\\n        return store[key];\\n    }\\n\\n    /**\\n     * @notice Sets singular data at a given `key`\\n     * @param key The key which value to retrieve\\n     * @param value The value to set\\n     */\\n    function _setData(bytes32 key, bytes memory value) internal virtual {\\n        store[key] = value;\\n        emit DataChanged(key, value);\\n    }\\n}\\n\"\r\n    },\r\n    \"@erc725/smart-contracts/contracts/constants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n// interfaces\\nimport \\\"./interfaces/IERC725X.sol\\\";\\nimport \\\"./interfaces/IERC725Y.sol\\\";\\n\\n// >> INTERFACES\\n\\n// ERC725 - Smart Contract based Account\\nbytes4 constant _INTERFACEID_ERC725X = 0x44c028fe;\\nbytes4 constant _INTERFACEID_ERC725Y = 0x5a988c0f;\\n\\n// >> OPERATIONS\\nuint256 constant OPERATION_CALL = 0;\\nuint256 constant OPERATION_CREATE = 1;\\nuint256 constant OPERATION_CREATE2 = 2;\\nuint256 constant OPERATION_STATICCALL = 3;\\nuint256 constant OPERATION_DELEGATECALL = 4;\\n\"\r\n    },\r\n    \"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title The interface for ERC725Y General key/value store\\n * @dev ERC725Y provides the ability to set arbitrary key value sets that can be changed over time\\n * It is intended to standardise certain keys value pairs to allow automated retrievals and interactions\\n * from interfaces and other smart contracts\\n */\\ninterface IERC725Y {\\n    /**\\n     * @notice Emitted when data at a key is changed\\n     * @param key The key which value is set\\n     * @param value The value to set\\n     */\\n    event DataChanged(bytes32 indexed key, bytes value);\\n\\n    /**\\n     * @notice Gets array of data at multiple given keys\\n     * @param keys The array of keys which values to retrieve\\n     * @return values The array of data stored at multiple keys\\n     */\\n    function getData(bytes32[] memory keys) external view returns (bytes[] memory values);\\n\\n    /**\\n     * @param keys The array of keys which values to set\\n     * @param values The array of values to set\\n     * @dev Sets array of data at multiple given `key`\\n     * SHOULD only be callable by the owner of the contract set via ERC173\\n     *\\n     * Emits a {DataChanged} event.\\n     */\\n    function setData(bytes32[] memory keys, bytes[] memory values) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165Storage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC165.sol\\\";\\n\\n/**\\n * @dev Storage based implementation of the {IERC165} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterface} to declare\\n * their support of an interface.\\n */\\nabstract contract ERC165Storage is ERC165 {\\n    /**\\n     * @dev Mapping of interface ids to whether or not it's supported.\\n     */\\n    mapping(bytes4 => bool) private _supportedInterfaces;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return super.supportsInterface(interfaceId) || _supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @dev Registers the contract as an implementer of the interface defined by\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\n     * registering its interface id is not required.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * Requirements:\\n     *\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\n     */\\n    function _registerInterface(bytes4 interfaceId) internal virtual {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        _supportedInterfaces[interfaceId] = true;\\n    }\\n}\\n\"\r\n    },\r\n    \"@erc725/smart-contracts/contracts/utils/OwnableUnset.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// modules\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/**\\n * @dev Modified version of ERC173 with no constructor, instead should call `initOwner` function\\n * Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUnset is Context {\\n    address private _owner;\\n\\n    bool private _initiatedOwner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev initiate the owner for the contract\\n     * It can be called once\\n     */\\n    function initOwner(address newOwner) internal {\\n        require(!_initiatedOwner, \\\"Ownable: owner can only be initiated once\\\");\\n        _initiatedOwner = true;\\n        _setOwner(newOwner);\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@erc725/smart-contracts/contracts/utils/GasLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library to add all efficient functions that could get repeated.\\n */\\nlibrary GasLib {\\n    /**\\n     * @dev Will return unchecked incremented uint256\\n     */\\n    function unchecked_inc(uint256 i) internal pure returns (uint256) {\\n        unchecked {\\n            return i + 1;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@erc725/smart-contracts/contracts/interfaces/IERC725X.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title The interface for ERC725X General executor\\n * @dev ERC725X provides the ability to call arbitrary functions at any other smart contract and itself,\\n * including using `delegatecall`, `staticcall`, as well creating contracts using `create` and `create2`\\n * This is the basis for a smart contract based account system, but could also be used as a proxy account system\\n */\\ninterface IERC725X {\\n    /**\\n     * @notice Emitted when a contract is created\\n     * @param operation The operation used to create a contract\\n     * @param contractAddress The created contract address\\n     * @param value The value sent to the created contract address\\n     */\\n    event ContractCreated(\\n        uint256 indexed operation,\\n        address indexed contractAddress,\\n        uint256 indexed value\\n    );\\n\\n    /**\\n     * @notice Emitted when a contract executed.\\n     * @param operation The operation used to execute a contract\\n     * @param to The address where the call is executed\\n     * @param value The value sent to the created contract address\\n     * @param data The data sent with the call\\n     */\\n    event Executed(\\n        uint256 indexed operation,\\n        address indexed to,\\n        uint256 indexed value,\\n        bytes data\\n    );\\n\\n    /**\\n     * @param operationType The operation to execute: CALL = 0 CREATE = 1 CREATE2 = 2 STATICCALL = 3 DELEGATECALL = 4\\n     * @param to The smart contract or address to interact with, `to` will be unused if a contract is created (operation 1 and 2)\\n     * @param value The value to transfer\\n     * @param data The call data, or the contract data to deploy\\n     * @dev Executes any other smart contract.\\n     * SHOULD only be callable by the owner of the contract set via ERC173\\n     *\\n     * Emits a {Executed} event, when a call is executed under `operationType` 0, 3 and 4\\n     * Emits a {ContractCreated} event, when a contract is created under `operationType` 1 and 2\\n     */\\n    function execute(\\n        uint256 operationType,\\n        address to,\\n        uint256 value,\\n        bytes calldata data\\n    ) external payable returns (bytes memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@lukso/lsp-smart-contracts/contracts/LSP8IdentifiableDigitalAsset/LSP8IdentifiableDigitalAssetInitAbstract.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.0;\\n\\n// modules\\nimport \\\"./LSP8IdentifiableDigitalAssetCore.sol\\\";\\nimport \\\"../LSP4DigitalAssetMetadata/LSP4DigitalAssetMetadataInitAbstract.sol\\\";\\n\\n// constants\\nimport \\\"./LSP8Constants.sol\\\";\\nimport \\\"../LSP4DigitalAssetMetadata/LSP4Constants.sol\\\";\\n\\n/**\\n * @title LSP8IdentifiableDigitalAsset contract\\n * @author Matthew Stevens\\n * @dev Proxy Implementation of a LSP8 compliant contract.\\n */\\nabstract contract LSP8IdentifiableDigitalAssetInitAbstract is\\n    LSP8IdentifiableDigitalAssetCore,\\n    Initializable,\\n    LSP4DigitalAssetMetadataInitAbstract\\n{\\n    function _initialize(\\n        string memory name_,\\n        string memory symbol_,\\n        address newOwner_\\n    ) internal virtual override onlyInitializing {\\n        LSP4DigitalAssetMetadataInitAbstract._initialize(\\n            name_,\\n            symbol_,\\n            newOwner_\\n        );\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(IERC165, ERC165Storage)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == _INTERFACEID_LSP8 ||\\n            super.supportsInterface(interfaceId);\\n    }\\n}\\n\"\r\n    },\r\n    \"@lukso/lsp-smart-contracts/contracts/LSP4DigitalAssetMetadata/LSP4DigitalAssetMetadataInitAbstract.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// modules\\nimport \\\"@erc725/smart-contracts/contracts/ERC725YInitAbstract.sol\\\";\\n\\n// constants\\nimport \\\"./LSP4Constants.sol\\\";\\n\\n/**\\n * @title LSP4DigitalAssetMetadata\\n * @author Matthew Stevens\\n * @dev Inheritable Proxy Implementation of a LSP8 compliant contract.\\n */\\nabstract contract LSP4DigitalAssetMetadataInitAbstract is\\n    Initializable,\\n    ERC725YInitAbstract\\n{\\n    function _initialize(\\n        string memory name_,\\n        string memory symbol_,\\n        address newOwner_\\n    ) internal virtual onlyInitializing {\\n        ERC725YInitAbstract._initialize(newOwner_);\\n\\n        // set SupportedStandards:LSP4DigitalAsset\\n        _setData(\\n            _LSP4_SUPPORTED_STANDARDS_KEY,\\n            _LSP4_SUPPORTED_STANDARDS_VALUE\\n        );\\n\\n        _setData(_LSP4_TOKEN_NAME_KEY, bytes(name_));\\n        _setData(_LSP4_TOKEN_SYMBOL_KEY, bytes(symbol_));\\n    }\\n}\\n\"\r\n    },\r\n    \"@erc725/smart-contracts/contracts/ERC725YInitAbstract.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n// modules\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"./ERC725YCore.sol\\\";\\n\\n/**\\n * @title Inheritable Proxy Implementation of ERC725 Y General key/value store\\n * @author Fabian Vogelsteller <fabian@lukso.network>\\n * @dev Contract module which provides the ability to set arbitrary key value sets that can be changed over time\\n * It is intended to standardise certain keys value pairs to allow automated retrievals and interactions\\n * from interfaces and other smart contracts\\n */\\nabstract contract ERC725YInitAbstract is ERC725YCore, Initializable {\\n    function _initialize(address _newOwner) internal virtual onlyInitializing {\\n        // This is necessary to prevent a contract that implements both ERC725X and ERC725Y to call both constructors\\n        if (_newOwner != owner()) {\\n            OwnableUnset.initOwner(_newOwner);\\n        }\\n\\n        _registerInterface(_INTERFACEID_ERC725Y);\\n    }\\n}\\n\"\r\n    },\r\n    \"@lukso/lsp-smart-contracts/contracts/LSP8IdentifiableDigitalAsset/extensions/LSP8CompatibilityForERC721Core.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// modules\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"../LSP8IdentifiableDigitalAssetCore.sol\\\";\\nimport \\\"../../LSP4DigitalAssetMetadata/LSP4Compatibility.sol\\\";\\n\\n// libraries\\nimport \\\"solidity-bytes-utils/contracts/BytesLib.sol\\\";\\n\\n// interfaces\\nimport \\\"./ILSP8CompatibilityForERC721.sol\\\";\\n\\n// constants\\nimport \\\"./LSP8CompatibilityConstants.sol\\\";\\n\\n/**\\n * @dev LSP8 extension, for compatibility for clients / tools that expect ERC721.\\n */\\nabstract contract LSP8CompatibilityForERC721Core is\\n    ILSP8CompatibilityForERC721,\\n    LSP8IdentifiableDigitalAssetCore,\\n    LSP4Compatibility\\n{\\n    using ERC725Utils for IERC725Y;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    /*\\n     * @inheritdoc ILSP8CompatibilityForERC721\\n     */\\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (string memory)\\n    {\\n        // silence compiler warning about unused variable\\n        tokenId;\\n\\n        bytes memory data = _getData(_LSP4_METADATA_KEY);\\n\\n        // offset = bytes4(hashSig) + bytes32(contentHash) -> 4 + 32 = 36\\n        uint256 offset = 36;\\n\\n        bytes memory uriBytes = BytesLib.slice(\\n            data,\\n            offset,\\n            data.length - offset\\n        );\\n        return string(uriBytes);\\n    }\\n\\n    /**\\n     * @inheritdoc ILSP8CompatibilityForERC721\\n     */\\n    function ownerOf(uint256 tokenId)\\n        external\\n        view\\n        virtual\\n        override\\n        returns (address)\\n    {\\n        return tokenOwnerOf(bytes32(tokenId));\\n    }\\n\\n    /**\\n     * @inheritdoc ILSP8CompatibilityForERC721\\n     */\\n    function approve(address operator, uint256 tokenId)\\n        external\\n        virtual\\n        override\\n    {\\n        authorizeOperator(operator, bytes32(tokenId));\\n\\n        emit Approval(tokenOwnerOf(bytes32(tokenId)), operator, tokenId);\\n    }\\n\\n    /**\\n     * @inheritdoc ILSP8CompatibilityForERC721\\n     */\\n    function getApproved(uint256 tokenId)\\n        external\\n        view\\n        virtual\\n        override\\n        returns (address)\\n    {\\n        bytes32 tokenIdAsBytes32 = bytes32(tokenId);\\n        _existsOrError(tokenIdAsBytes32);\\n\\n        EnumerableSet.AddressSet storage operatorsForTokenId = _operators[\\n            tokenIdAsBytes32\\n        ];\\n        uint256 operatorListLength = operatorsForTokenId.length();\\n\\n        if (operatorListLength == 0) {\\n            return address(0);\\n        } else {\\n            // Read the last added operator authorized to provide \\\"best\\\" compatibility.\\n            // In ERC721 there is one operator address at a time for a tokenId, so multiple calls to\\n            // `approve` would cause `getApproved` to return the last added operator. In this\\n            // compatibility version the same is true, when the authorized operators were not previously\\n            // authorized. If addresses are removed, then `getApproved` returned address can change due\\n            // to implementation of `EnumberableSet._remove`.\\n            return operatorsForTokenId.at(operatorListLength - 1);\\n        }\\n    }\\n\\n    /*\\n     * @inheritdoc ILSP8CompatibilityForERC721\\n     */\\n    function isApprovedForAll(address tokenOwner, address operator)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        // silence compiler warning about unused variable\\n        tokenOwner;\\n        operator;\\n\\n        return false;\\n    }\\n\\n    /**\\n     * @inheritdoc ILSP8CompatibilityForERC721\\n     * @dev Compatible with ERC721 transferFrom.\\n     * Using force=true so that EOA and any contract may receive the tokenId.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external virtual override {\\n        return transfer(from, to, bytes32(tokenId), true, \\\"\\\");\\n    }\\n\\n    /**\\n     * @inheritdoc ILSP8CompatibilityForERC721\\n     * @dev Compatible with ERC721 safeTransferFrom.\\n     * Using force=false so that no EOA and only contracts supporting LSP1 interface may receive the tokenId.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external virtual override {\\n        return transfer(from, to, bytes32(tokenId), false, \\\"\\\");\\n    }\\n\\n    /*\\n     * @dev Compatible with ERC721 safeTransferFrom.\\n     * Using force=false so that no EOA and only contracts supporting LSP1 interface may receive the tokenId.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) external virtual override {\\n        return transfer(from, to, bytes32(tokenId), false, data);\\n    }\\n\\n    // --- Overrides\\n\\n    function authorizeOperator(address operator, bytes32 tokenId)\\n        public\\n        virtual\\n        override(\\n            ILSP8IdentifiableDigitalAsset,\\n            LSP8IdentifiableDigitalAssetCore\\n        )\\n    {\\n        super.authorizeOperator(operator, tokenId);\\n\\n        emit Approval(\\n            tokenOwnerOf(tokenId),\\n            operator,\\n            abi.decode(abi.encodePacked(tokenId), (uint256))\\n        );\\n    }\\n\\n    function _transfer(\\n        address from,\\n        address to,\\n        bytes32 tokenId,\\n        bool force,\\n        bytes memory data\\n    ) internal virtual override {\\n        super._transfer(from, to, tokenId, force, data);\\n\\n        emit Transfer(\\n            from,\\n            to,\\n            abi.decode(abi.encodePacked(tokenId), (uint256))\\n        );\\n    }\\n\\n    function _mint(\\n        address to,\\n        bytes32 tokenId,\\n        bool force,\\n        bytes memory data\\n    ) internal virtual override {\\n        super._mint(to, tokenId, force, data);\\n\\n        emit Transfer(\\n            address(0),\\n            to,\\n            abi.decode(abi.encodePacked(tokenId), (uint256))\\n        );\\n    }\\n\\n    function _burn(bytes32 tokenId, bytes memory data)\\n        internal\\n        virtual\\n        override\\n    {\\n        address tokenOwner = tokenOwnerOf(tokenId);\\n\\n        super._burn(tokenId, data);\\n\\n        emit Transfer(\\n            tokenOwner,\\n            address(0),\\n            abi.decode(abi.encodePacked(tokenId), (uint256))\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"@lukso/lsp-smart-contracts/contracts/LSP8IdentifiableDigitalAsset/extensions/LSP8CompatibilityConstants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.0;\\n\\n// --- ERC165 interface ids\\nbytes4 constant _INTERFACEID_ERC721 = 0x80ac58cd;\\nbytes4 constant _INTERFACEID_ERC721METADATA = 0x5b5e139f;\\n\"\r\n    },\r\n    \"@lukso/lsp-smart-contracts/contracts/LSP4DigitalAssetMetadata/LSP4Compatibility.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// modules\\nimport \\\"@erc725/smart-contracts/contracts/ERC725YCore.sol\\\";\\n\\n// interfaces\\nimport \\\"./ILSP4Compatibility.sol\\\";\\n\\n// libraries\\nimport \\\"../Utils/ERC725Utils.sol\\\";\\n\\n// constants\\nimport \\\"./LSP4Constants.sol\\\";\\n\\n/**\\n * @title LSP4Compatibility\\n * @author Matthew Stevens\\n * @dev LSP4 extension, for compatibility with clients & tools that expect ERC20/721.\\n */\\nabstract contract LSP4Compatibility is ILSP4Compatibility, ERC725YCore {\\n    // --- Token queries\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     * @return The name of the token\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        bytes memory data = _getData(_LSP4_TOKEN_NAME_KEY);\\n        return string(data);\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the name.\\n     * @return The symbol of the token\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        bytes memory data = _getData(_LSP4_TOKEN_SYMBOL_KEY);\\n        return string(data);\\n    }\\n}\\n\"\r\n    },\r\n    \"solidity-bytes-utils/contracts/BytesLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\u00e7alo S\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity >=0.8.0 <0.9.0;\\n\\n\\nlibrary BytesLib {\\n    function concat(\\n        bytes memory _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Store the length of the first bytes array at the beginning of\\n            // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n            // Maintain a memory counter for the current write location in the\\n            // temp bytes array by adding the 32 bytes for the array length to\\n            // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n            // Stop copying when the memory counter reaches the length of the\\n            // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n                // Initialize a copy counter to the start of the _preBytes data,\\n                // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n                // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                // Write the _preBytes data into the tempBytes memory 32 bytes\\n                // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Add the length of _postBytes to the current length of tempBytes\\n            // and store it as the new length in the first 32 bytes of the\\n            // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n            // Move the memory counter back from a multiple of 0x20 to the\\n            // actual end of the _preBytes data.\\n            mc := end\\n            // Stop copying when the memory counter reaches the new combined\\n            // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Update the free-memory pointer by padding our last write location\\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n            // next 32 byte block, then round down to the nearest multiple of\\n            // 32. If the sum of the length of the two arrays is zero then add\\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(0x40, and(\\n              add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n              not(31) // Round down to the nearest 32 bytes.\\n            ))\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\n        assembly {\\n            // Read the first 32 bytes of _preBytes storage, which is the length\\n            // of the array. (We don't need to use the offset into the slot\\n            // because arrays use the entire slot.)\\n            let fslot := sload(_preBytes.slot)\\n            // Arrays of 31 bytes or less have an even value in their slot,\\n            // while longer arrays have an odd value. The actual length is\\n            // the slot divided by two for odd values, and the lowest order\\n            // byte divided by two for even values.\\n            // If the slot is even, bitwise and the slot with 255 and divide by\\n            // two to get the length. If the slot is odd, bitwise and the slot\\n            // with -1 and divide by two.\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n            let newlength := add(slength, mlength)\\n            // slength can contain both the length and contents of the array\\n            // if length < 32 bytes so let's prepare for that\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n            switch add(lt(slength, 32), lt(newlength, 32))\\n            case 2 {\\n                // Since the new array still fits in the slot, we just need to\\n                // update the contents of the slot.\\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n                sstore(\\n                    _preBytes.slot,\\n                    // all the modifications to the slot are inside this\\n                    // next block\\n                    add(\\n                        // we can just add to the slot contents because the\\n                        // bytes we want to change are the LSBs\\n                        fslot,\\n                        add(\\n                            mul(\\n                                div(\\n                                    // load the bytes from memory\\n                                    mload(add(_postBytes, 0x20)),\\n                                    // zero all bytes to the right\\n                                    exp(0x100, sub(32, mlength))\\n                                ),\\n                                // and now shift left the number of bytes to\\n                                // leave space for the length in the slot\\n                                exp(0x100, sub(32, newlength))\\n                            ),\\n                            // increase length by the double of the memory\\n                            // bytes length\\n                            mul(mlength, 2)\\n                        )\\n                    )\\n                )\\n            }\\n            case 1 {\\n                // The stored value fits in the slot, but the combined value\\n                // will exceed it.\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // The contents of the _postBytes array start 32 bytes into\\n                // the structure. Our first read should obtain the `submod`\\n                // bytes that can fit into the unused space in the last word\\n                // of the stored array. To get this, we read 32 bytes starting\\n                // from `submod`, so the data we read overlaps with the array\\n                // contents by `submod` bytes. Masking the lowest-order\\n                // `submod` bytes allows us to add that value directly to the\\n                // stored value.\\n\\n                let submod := sub(32, slength)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(\\n                    sc,\\n                    add(\\n                        and(\\n                            fslot,\\n                            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\\n                        ),\\n                        and(mload(mc), mask)\\n                    )\\n                )\\n\\n                for {\\n                    mc := add(mc, 0x20)\\n                    sc := add(sc, 1)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n            default {\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                // Start copying to the last used word of the stored array.\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // Copy over the first `submod` bytes of the new data as in\\n                // case 1 above.\\n                let slengthmod := mod(slength, 32)\\n                let mlengthmod := mod(mlength, 32)\\n                let submod := sub(32, slengthmod)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n\\n                for {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n        }\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\\n        require(_bytes.length >= _start + 1 , \\\"toUint8_outOfBounds\\\");\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\\n        require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\n        uint16 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\\n        require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\n        uint32 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\\n        require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\n        uint64 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x8), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\\n        require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\n        uint96 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0xc), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\\n        require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\n        uint128 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x10), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\\n        require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\n        bytes32 tempBytes32;\\n\\n        assembly {\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempBytes32;\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n                // cb is a circuit breaker in the for loop since there's\\n                //  no said feature for inline assembly loops\\n                // cb = 1 - don't breaker\\n                // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(_preBytes, 0x20)\\n                let end := add(mc, length)\\n\\n                for {\\n                    let cc := add(_postBytes, 0x20)\\n                // the next line is the loop condition:\\n                // while(uint256(mc < end) + cb == 2)\\n                } eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                        // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(\\n        bytes storage _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        bool success = true;\\n\\n        assembly {\\n            // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes.slot)\\n            // Decode the length of the stored array like in concatStorage().\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n            case 1 {\\n                // slength can contain both the length and contents of the array\\n                // if length < 32 bytes so let's prepare for that\\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                if iszero(iszero(slength)) {\\n                    switch lt(slength, 32)\\n                    case 1 {\\n                        // blank the last byte which is the length\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                            // unsuccess:\\n                            success := 0\\n                        }\\n                    }\\n                    default {\\n                        // cb is a circuit breaker in the for loop since there's\\n                        //  no said feature for inline assembly loops\\n                        // cb = 1 - don't breaker\\n                        // cb = 0 - break\\n                        let cb := 1\\n\\n                        // get the keccak hash to get the contents of the array\\n                        mstore(0x0, _preBytes.slot)\\n                        let sc := keccak256(0x0, 0x20)\\n\\n                        let mc := add(_postBytes, 0x20)\\n                        let end := add(mc, mlength)\\n\\n                        // the next line is the loop condition:\\n                        // while(uint256(mc < end) + cb == 2)\\n                        for {} eq(add(lt(mc, end), cb), 2) {\\n                            sc := add(sc, 1)\\n                            mc := add(mc, 0x20)\\n                        } {\\n                            if iszero(eq(sload(sc), mload(mc))) {\\n                                // unsuccess:\\n                                success := 0\\n                                cb := 0\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n}\\n\"\r\n    },\r\n    \"@lukso/lsp-smart-contracts/contracts/LSP8IdentifiableDigitalAsset/extensions/ILSP8CompatibilityForERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// interfaces\\nimport \\\"../ILSP8IdentifiableDigitalAsset.sol\\\";\\n\\n/**\\n * @dev LSP8 extension, for compatibility for clients / tools that expect ERC721.\\n */\\ninterface ILSP8CompatibilityForERC721 is ILSP8IdentifiableDigitalAsset {\\n    /**\\n     * @notice To provide compatibility with indexing ERC721 events.\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     * @param from The sending address\\n     * @param to The receiving address\\n     * @param tokenId The tokenId to transfer\\n     */\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 indexed tokenId\\n    );\\n\\n    /**\\n     * @notice To provide compatibility with indexing ERC721 events.\\n     * @dev Emitted when `owner` enables `approved` for `tokenId`.\\n     * @param owner The address of the owner of the `tokenId`\\n     * @param approved The address set as operator\\n     * @param tokenId The approved tokenId\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed approved,\\n        uint256 indexed tokenId\\n    );\\n\\n    /**\\n     * @dev Compatible with ERC721 transferFrom.\\n     * @param from The sending address\\n     * @param to The receiving address\\n     * @param tokenId The tokenId to transfer\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Compatible with ERC721 transferFrom.\\n     * @param from The sending address\\n     * @param to The receiving address\\n     * @param tokenId The tokenId to transfer\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Compatible with ERC721 safeTransferFrom.\\n     * @param from The sending address\\n     * @param to The receiving address\\n     * @param tokenId The tokenId to transfer\\n     * @param data The data to be sent with the transfer\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) external;\\n\\n    /**\\n     * @dev Compatible with ERC721 ownerOf.\\n     * @param tokenId The tokenId to query\\n     * @return The owner of the tokenId\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address);\\n\\n    /**\\n     * @dev Compatible with ERC721 approve.\\n     * @param operator The address to approve for `amount`\\n     * @param tokenId The tokenId to approve\\n     */\\n    function approve(address operator, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Compatible with ERC721 getApproved.\\n     * @param tokenId The tokenId to query\\n     * @return The address of the operator for `tokenId`\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address);\\n\\n    /*\\n     * @dev Compatible with ERC721 isApprovedForAll.\\n     * @param owner The tokenOwner address to query\\n     * @param operator The operator address to query\\n     * @return Returns if the `operator` is allowed to manage all of the assets of `owner`\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /*\\n     * @dev Compatible with ERC721Metadata tokenURI.\\n     * @param tokenId The tokenId to query\\n     * @return The token URI\\n     */\\n    function tokenURI(uint256 tokenId) external returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@lukso/lsp-smart-contracts/contracts/LSP4DigitalAssetMetadata/ILSP4Compatibility.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// interfaces\\nimport \\\"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol\\\";\\n\\n/**\\n * @dev LSP4 extension, for compatibility with clients & tools that expect ERC20/721.\\n */\\ninterface ILSP4Compatibility is IERC725Y {\\n    /**\\n     * @dev Returns the name of the token.\\n     * @return The name of the token\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the name.\\n     * @return The symbol of the token\\n     */\\n    function symbol() external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/registry/IUsesContractRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.0;\\n\\ninterface IUsesContractRegistry {\\n    function contractRegistry() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/royalties/constants.sol\": {\r\n      \"content\": \"// using basis points to describe fees\\nuint256 constant FEE_SCALE = 100_00;\\n\"\r\n    },\r\n    \"contracts/royalties/IRoyaltyShares.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.0;\\n\\n// libs\\nimport \\\"./RoyaltySharesLib.sol\\\";\\n\\ninterface IRoyaltyShares {\\n    //\\n    // --- Royalty Queries\\n    //\\n\\n    function royaltyShares()\\n        external\\n        view\\n        returns (RoyaltySharesLib.RoyaltyShare[] memory royaltiesForAsset);\\n}\\n\"\r\n    },\r\n    \"@lukso/lsp-smart-contracts/contracts/LSP7DigitalAsset/extensions/ILSP7CompatibilityForERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// interfaces\\nimport \\\"../ILSP7DigitalAsset.sol\\\";\\n\\n/**\\n * @dev LSP8 extension, for compatibility for clients / tools that expect ERC20.\\n */\\ninterface ILSP7CompatibilityForERC20 is ILSP7DigitalAsset {\\n    /**\\n     * @notice To provide compatibility with indexing ERC20 events.\\n     * @dev Emitted when `amount` tokens is transferred from `from` to `to`.\\n     * @param from The sending address\\n     * @param to The receiving address\\n     * @param value The amount of tokens transfered.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @notice To provide compatibility with indexing ERC20 events.\\n     * @dev Emitted when `owner` enables `spender` for `value` tokens.\\n     * @param owner The account giving approval\\n     * @param spender The account receiving approval\\n     * @param value The amount of tokens `spender` has access to from `owner`\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /*\\n     * @dev Compatible with ERC20 transfer\\n     * @param to The receiving address\\n     * @param amount The amount of tokens to transfer\\n     */\\n    function transfer(address to, uint256 amount) external;\\n\\n    /*\\n     * @dev Compatible with ERC20 transferFrom\\n     * @param from The sending address\\n     * @param to The receiving address\\n     * @param amount The amount of tokens to transfer\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external;\\n\\n    /*\\n     * @dev Compatible with ERC20 approve\\n     * @param operator The address to approve for `amount`\\n     * @param amount The amount to approve\\n     */\\n    function approve(address operator, uint256 amount) external;\\n\\n    /*\\n     * @dev Compatible with ERC20 allowance\\n     * @param tokenOwner The address of the token owner\\n     * @param operator The address approved by the `tokenOwner`\\n     * @return The amount `operator` is approved by `tokenOwner`\\n     */\\n    function allowance(address tokenOwner, address operator)\\n        external\\n        returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/royalties/IFeeCollector.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.0;\\n\\n// libs\\nimport \\\"./RoyaltySharesLib.sol\\\";\\n\\ninterface IFeeCollector {\\n    //\\n    // --- Struct\\n    //\\n\\n    // NOTE: packed into one storage slot\\n    struct RevenueShareFees {\\n        uint16 platform;\\n        uint16 creator;\\n        uint16 referral;\\n    }\\n\\n    //\\n    // --- Fee queries\\n    //\\n\\n    function feeBalance(address receiver, address token)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function revenueShareFees() external view returns (RevenueShareFees memory);\\n\\n    function baseRevenueShareFee() external view returns (uint256);\\n\\n    function platformFeeReceiver() external view returns (address);\\n\\n    //\\n    // --- Fee logic\\n    //\\n\\n    function shareRevenue(\\n        address token,\\n        uint256 amount,\\n        address referrer,\\n        RoyaltySharesLib.RoyaltyShare[] calldata creatorRoyalties,\\n        bytes calldata dataForCallback\\n    ) external returns (uint256);\\n\\n    function withdrawTokens(address[] calldata tokenList) external;\\n\\n    function withdrawTokensForMany(\\n        address[] calldata addressList,\\n        address[] calldata tokenList\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/royalties/IFeeCollectorRevenueShareCallback.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.0;\\n\\ninterface IFeeCollectorRevenueShareCallback {\\n    error RevenueShareCallbackInvalidSender();\\n\\n    // @notice Called to `msg.sender` after FeeCollector.revenueShare is called.\\n    // @param totalFee The amount expected to be transfered to the FeeCollector after the callback is complete\\n    // @param dataForCallback The data provided when calling FeeCollector.revenueShare to process the callback\\n    function revenueShareCallback(\\n        uint256 totalFee,\\n        bytes memory dataForCallback\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/card/ICardMarket.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CC0-1.0\\n\\npragma solidity ^0.8.0;\\n\\ninterface ICardMarket {\\n    //\\n    // --- Structs\\n    //\\n\\n    struct CardMarketState {\\n        bytes32 tokenId;\\n        uint256 minimumAmount;\\n        address acceptedToken;\\n    }\\n\\n    //\\n    // --- Events\\n    //\\n\\n    event MarketSet(\\n        bytes32 indexed tokenId,\\n        address indexed acceptedToken,\\n        uint256 amount\\n    );\\n\\n    event MarketRemove(bytes32 indexed tokenId);\\n\\n    event MarketBuy(\\n        bytes32 indexed tokenId,\\n        address indexed buyer,\\n        uint256 amount\\n    );\\n\\n    //\\n    // --- Market queries\\n    //\\n\\n    function marketFor(bytes32 tokenId)\\n        external\\n        returns (CardMarketState memory);\\n\\n    function getAllMarkets() external returns (CardMarketState[] memory);\\n\\n    //\\n    // --- Market logic\\n    //\\n\\n    function setMarketFor(\\n        bytes32 tokenId,\\n        address acceptedToken,\\n        uint256 minimumAmount\\n    ) external;\\n\\n    function removeMarketFor(bytes32 tokenId) external;\\n\\n    function buyFromMarket(\\n        bytes32 tokenId,\\n        uint256 amount,\\n        address referrer\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@lukso/lsp-smart-contracts/contracts/LSP7DigitalAsset/ILSP7DigitalAsset.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// interfaces\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport \\\"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol\\\";\\n\\n/**\\n * @dev Required interface of a LSP8 compliant contract.\\n */\\ninterface ILSP7DigitalAsset is IERC165, IERC725Y {\\n    // --- Events\\n\\n    /**\\n     * @dev Emitted when `amount` tokens is transferred from `from` to `to`.\\n     * @param operator The address of operator sending tokens\\n     * @param from The address which tokens are sent\\n     * @param to The receiving address\\n     * @param amount The amount of tokens transferred\\n     * @param force When set to TRUE, `to` may be any address but\\n     * when set to FALSE `to` must be a contract that supports LSP1 UniversalReceiver\\n     * @param data Additional data the caller wants included in the emitted event, and sent in the hooks to `from` and `to` addresses\\n     */\\n    event Transfer(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256 amount,\\n        bool force,\\n        bytes data\\n    );\\n\\n    /**\\n     * @dev Emitted when `tokenOwner` enables `operator` for `amount` tokens.\\n     * @param operator The address authorized as an operator\\n     * @param tokenOwner The token owner\\n     * @param amount The amount of tokens `operator` address has access to from `tokenOwner`\\n     */\\n    event AuthorizedOperator(\\n        address indexed operator,\\n        address indexed tokenOwner,\\n        uint256 indexed amount\\n    );\\n\\n    /**\\n     * @dev Emitted when `tokenOwner` disables `operator` for `amount` tokens.\\n     * @param operator The address revoked from operating\\n     * @param tokenOwner The token owner\\n     */\\n    event RevokedOperator(address indexed operator, address indexed tokenOwner);\\n\\n    // --- Token queries\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation\\n     * If the contract represents a NFT then 0 SHOULD be used, otherwise 18 is the common value\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {balanceOf} and {transfer}.\\n     */\\n    function decimals() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the number of existing tokens.\\n     * @return The number of existing tokens\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    // --- Token owner queries\\n\\n    /**\\n     * @dev Returns the number of tokens owned by `tokenOwner`.\\n     * @param tokenOwner The address to query\\n     * @return The number of tokens owned by this address\\n     */\\n    function balanceOf(address tokenOwner) external view returns (uint256);\\n\\n    // --- Operator functionality\\n\\n    /**\\n     * @param operator The address to authorize as an operator.\\n     * @param amount The amount of tokens operator has access to.\\n     * @dev Sets `amount` as the amount of tokens `operator` address has access to from callers tokens.\\n     *\\n     * See {isOperatorFor}.\\n     *\\n     * Requirements\\n     *\\n     * - `operator` cannot be the zero address.\\n     *\\n     * Emits an {AuthorizedOperator} event.\\n     */\\n    function authorizeOperator(address operator, uint256 amount) external;\\n\\n    /**\\n     * @param operator The address to revoke as an operator.\\n     * @dev Removes `operator` address as an operator of callers tokens.\\n     *\\n     * See {isOperatorFor}.\\n     *\\n     * Requirements\\n     *\\n     * - `operator` cannot be the zero address.\\n     *\\n     * Emits a {RevokedOperator} event.\\n     */\\n    function revokeOperator(address operator) external;\\n\\n    /**\\n     * @param operator The address to query operator status for.\\n     * @param tokenOwner The token owner.\\n     * @return The amount of tokens `operator` address has access to from `tokenOwner`.\\n     * @dev Returns amount of tokens `operator` address has access to from `tokenOwner`.\\n     * Operators can send and burn tokens on behalf of their owners. The tokenOwner is their own\\n     * operator.\\n     */\\n    function isOperatorFor(address operator, address tokenOwner)\\n        external\\n        view\\n        returns (uint256);\\n\\n    // --- Transfer functionality\\n\\n    /**\\n     * @param from The sending address.\\n     * @param to The receiving address.\\n     * @param amount The amount of tokens to transfer.\\n     * @param force When set to TRUE, to may be any address but\\n     * when set to FALSE to must be a contract that supports LSP1 UniversalReceiver\\n     * @param data Additional data the caller wants included in the emitted event, and sent in the hooks to `from` and `to` addresses.\\n     *\\n     * @dev Transfers `amount` of tokens from `from` to `to`. The `force` parameter will be used\\n     * when notifying the token sender and receiver.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `amount` tokens must be owned by `from`.\\n     * - If the caller is not `from`, it must be an operator for `from` with access to at least\\n     * `amount` tokens.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bool force,\\n        bytes memory data\\n    ) external;\\n\\n    /**\\n     * @param from The list of sending addresses.\\n     * @param to The list of receiving addresses.\\n     * @param amount The amount of tokens to transfer.\\n     * @param force When set to TRUE, to may be any address but\\n     * when set to FALSE to must be a contract that supports LSP1 UniversalReceiver\\n     * @param data Additional data the caller wants included in the emitted event, and sent in the hooks to `from` and `to` addresses.\\n     *\\n     * @dev Transfers many tokens based on the list `from`, `to`, `amount`. If any transfer fails\\n     * the call will revert.\\n     *\\n     * Requirements:\\n     *\\n     * - `from`, `to`, `amount` lists are the same length.\\n     * - no values in `from` can be the zero address.\\n     * - no values in `to` can be the zero address.\\n     * - each `amount` tokens must be owned by `from`.\\n     * - If the caller is not `from`, it must be an operator for `from` with access to at least\\n     * `amount` tokens.\\n     *\\n     * Emits {Transfer} events.\\n     */\\n    function transferBatch(\\n        address[] memory from,\\n        address[] memory to,\\n        uint256[] memory amount,\\n        bool force,\\n        bytes[] memory data\\n    ) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minimumAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CardMarketBuyAmountTooSmall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CardMarketMinimumAmountRequired\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"}],\"name\":\"CardMarketNoMarket\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"}],\"name\":\"CardMarketNotTokenOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"CardMarketTokenNotWhitelisted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"}],\"name\":\"CardTokenInvalidTokenId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CardTokenScoreMaxTokenIdLargerThanSupplyCap\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CardTokenScoreMaxTokenIdZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CardTokenScoreRange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CardTokenScoreScaleZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ContractRegistryRequired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LSP8CannotSendToAddressZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LSP8CannotUseAddressZeroAsOperator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LSP8CappedSupplyCannotMintOverCap\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LSP8CappedSupplyRequired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LSP8InvalidTransferBatch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"}],\"name\":\"LSP8NonExistentTokenId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"LSP8NotTokenOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"LSP8NotTokenOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenReceiver\",\"type\":\"address\"}],\"name\":\"LSP8NotifyTokenReceiverContractMissingLSP1Interface\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenReceiver\",\"type\":\"address\"}],\"name\":\"LSP8NotifyTokenReceiverIsEOA\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"}],\"name\":\"LSP8TokenIdAlreadyMinted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RevenueShareCallbackInvalidSender\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RoyaltySharesRoyaltiesRequired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RoyaltySharesRoyaltiesSum\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"}],\"name\":\"AuthorizedOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"value\",\"type\":\"bytes\"}],\"name\":\"DataChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MarketBuy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"}],\"name\":\"MarketRemove\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"acceptedToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MarketSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"metadataAddress\",\"type\":\"address\"}],\"name\":\"MetadataAddressCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"}],\"name\":\"RevokedOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"force\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"allTokenHolders\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"}],\"name\":\"authorizeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"buyFromMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"}],\"name\":\"calculateScore\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"}],\"name\":\"createMetadataFor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllMarkets\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"minimumAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"acceptedToken\",\"type\":\"address\"}],\"internalType\":\"struct ICardMarket.CardMarketState[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"keys\",\"type\":\"bytes32[]\"}],\"name\":\"getData\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"values\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"}],\"name\":\"getOperatorsOf\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"newOwner_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"contractRegistry\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"creators\",\"type\":\"address[]\"},{\"internalType\":\"uint96[]\",\"name\":\"creatorRoyaltyShares\",\"type\":\"uint96[]\"},{\"internalType\":\"uint256\",\"name\":\"tokenSupplyCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"scoreMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"scoreMax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"scoreScale\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"scoreMaxTokenId\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"}],\"name\":\"isOperatorFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"}],\"name\":\"marketFor\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"minimumAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"acceptedToken\",\"type\":\"address\"}],\"internalType\":\"struct ICardMarket.CardMarketState\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"}],\"name\":\"metadataAddressOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"}],\"name\":\"metadataJsonOf\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintableSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"}],\"name\":\"removeMarketFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"dataForCallback\",\"type\":\"bytes\"}],\"name\":\"revenueShareCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltyShares\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"share\",\"type\":\"uint96\"}],\"internalType\":\"struct RoyaltySharesLib.RoyaltyShare[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_keys\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_values\",\"type\":\"bytes[]\"}],\"name\":\"setData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"acceptedToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minimumAmount\",\"type\":\"uint256\"}],\"name\":\"setMarketFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"tokenIdsOf\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"}],\"name\":\"tokenOwnerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenSupplyCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"force\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"from\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"tokenId\",\"type\":\"bytes32[]\"},{\"internalType\":\"bool\",\"name\":\"force\",\"type\":\"bool\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"transferBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"}],\"name\":\"unpackCard\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CardTokenProxy", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}