{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 2000\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@adrastia-oracle/adrastia-core/contracts/accumulators/AbstractAccumulator.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity =0.8.13;\\n\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin-v4/contracts/utils/introspection/IERC165.sol\\\";\\nimport \\\"@openzeppelin-v4/contracts/utils/math/SafeCast.sol\\\";\\n\\nimport \\\"../interfaces/IAccumulator.sol\\\";\\n\\nabstract contract AbstractAccumulator is IERC165, IAccumulator {\\n    uint256 public immutable override changePrecision = 10 ** 8;\\n\\n    uint256 internal immutable theUpdateThreshold;\\n\\n    constructor(uint256 updateThreshold_) {\\n        theUpdateThreshold = updateThreshold_;\\n    }\\n\\n    function updateThreshold() external view virtual override returns (uint256) {\\n        return _updateThreshold();\\n    }\\n\\n    /// @inheritdoc IAccumulator\\n    function updateThresholdSurpassed(bytes memory data) public view virtual override returns (bool) {\\n        return changeThresholdSurpassed(data, _updateThreshold());\\n    }\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccumulator).interfaceId;\\n    }\\n\\n    function _updateThreshold() internal view virtual returns (uint256) {\\n        return theUpdateThreshold;\\n    }\\n\\n    function calculateChange(uint256 a, uint256 b) internal view virtual returns (uint256 change, bool isInfinite) {\\n        // Ensure a is never smaller than b\\n        if (a < b) {\\n            uint256 temp = a;\\n            a = b;\\n            b = temp;\\n        }\\n\\n        // a >= b\\n\\n        if (a == 0) {\\n            // a == b == 0 (since a >= b), therefore no change\\n            return (0, false);\\n        } else if (b == 0) {\\n            // (a > 0 && b == 0) => change threshold passed\\n            // Zero to non-zero always returns true\\n            return (0, true);\\n        }\\n\\n        unchecked {\\n            uint256 delta = a - b; // a >= b, therefore no underflow\\n            uint256 preciseDelta = delta * changePrecision;\\n\\n            // If the delta is so large that multiplying by CHANGE_PRECISION overflows, we assume that\\n            // the change threshold has been surpassed.\\n            // If our assumption is incorrect, the accumulator will be extra-up-to-date, which won't\\n            // really break anything, but will cost more gas in keeping this accumulator updated.\\n            if (preciseDelta < delta) return (0, true);\\n\\n            change = preciseDelta / b;\\n            isInfinite = false;\\n        }\\n    }\\n\\n    function changeThresholdSurpassed(\\n        uint256 a,\\n        uint256 b,\\n        uint256 changeThreshold\\n    ) internal view virtual returns (bool) {\\n        (uint256 change, bool isInfinite) = calculateChange(a, b);\\n\\n        return isInfinite || change >= changeThreshold;\\n    }\\n}\\n\"\r\n    },\r\n    \"@adrastia-oracle/adrastia-core/contracts/accumulators/PriceAccumulator.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity =0.8.13;\\n\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin-v4/contracts/utils/introspection/IERC165.sol\\\";\\nimport \\\"@openzeppelin-v4/contracts/utils/math/SafeCast.sol\\\";\\n\\nimport \\\"./AbstractAccumulator.sol\\\";\\nimport \\\"../interfaces/IPriceAccumulator.sol\\\";\\nimport \\\"../interfaces/IPriceOracle.sol\\\";\\nimport \\\"../libraries/ObservationLibrary.sol\\\";\\nimport \\\"../libraries/AddressLibrary.sol\\\";\\nimport \\\"../libraries/SafeCastExt.sol\\\";\\nimport \\\"../utils/SimpleQuotationMetadata.sol\\\";\\nimport \\\"../strategies/averaging/IAveragingStrategy.sol\\\";\\n\\nabstract contract PriceAccumulator is\\n    IERC165,\\n    IPriceAccumulator,\\n    IPriceOracle,\\n    AbstractAccumulator,\\n    SimpleQuotationMetadata\\n{\\n    using AddressLibrary for address;\\n    using SafeCast for uint256;\\n    using SafeCastExt for uint256;\\n\\n    IAveragingStrategy public immutable averagingStrategy;\\n\\n    mapping(address => AccumulationLibrary.PriceAccumulator) public accumulations;\\n    mapping(address => ObservationLibrary.PriceObservation) public observations;\\n\\n    uint256 internal immutable minUpdateDelay;\\n    uint256 internal immutable maxUpdateDelay;\\n\\n    /**\\n     * @notice Emitted when the observed price is validated against a user (updater) provided price.\\n     * @param token The token that the price validation is for.\\n     * @param observedPrice The observed price from the on-chain data source.\\n     * @param providedPrice The price provided externally by the user (updater).\\n     * @param timestamp The timestamp of the block that the validation was performed in.\\n     * @param providedTimestamp The timestamp of the block that the provided price was observed in.\\n     * @param succeeded True if the observed price closely matches the provided price; false otherwise.\\n     */\\n    event ValidationPerformed(\\n        address indexed token,\\n        uint256 observedPrice,\\n        uint256 providedPrice,\\n        uint256 timestamp,\\n        uint256 providedTimestamp,\\n        bool succeeded\\n    );\\n\\n    constructor(\\n        IAveragingStrategy averagingStrategy_,\\n        address quoteToken_,\\n        uint256 updateThreshold_,\\n        uint256 minUpdateDelay_,\\n        uint256 maxUpdateDelay_\\n    ) AbstractAccumulator(updateThreshold_) SimpleQuotationMetadata(quoteToken_) {\\n        require(maxUpdateDelay_ >= minUpdateDelay_, \\\"PriceAccumulator: INVALID_UPDATE_DELAYS\\\");\\n\\n        averagingStrategy = averagingStrategy_;\\n        minUpdateDelay = minUpdateDelay_;\\n        maxUpdateDelay = maxUpdateDelay_;\\n    }\\n\\n    /// @inheritdoc IAccumulator\\n    function updateDelay() external view virtual override returns (uint256) {\\n        return _updateDelay();\\n    }\\n\\n    /// @inheritdoc IAccumulator\\n    function heartbeat() external view virtual override returns (uint256) {\\n        return _heartbeat();\\n    }\\n\\n    /// @inheritdoc IPriceAccumulator\\n    function calculatePrice(\\n        AccumulationLibrary.PriceAccumulator calldata firstAccumulation,\\n        AccumulationLibrary.PriceAccumulator calldata secondAccumulation\\n    ) external view virtual override returns (uint112 price) {\\n        require(firstAccumulation.timestamp != 0, \\\"PriceAccumulator: TIMESTAMP_CANNOT_BE_ZERO\\\");\\n\\n        uint256 deltaTime = secondAccumulation.timestamp - firstAccumulation.timestamp;\\n        require(deltaTime != 0, \\\"PriceAccumulator: DELTA_TIME_CANNOT_BE_ZERO\\\");\\n\\n        price = calculateTimeWeightedAverage(\\n            secondAccumulation.cumulativePrice,\\n            firstAccumulation.cumulativePrice,\\n            deltaTime\\n        ).toUint112();\\n    }\\n\\n    /// @inheritdoc IAccumulator\\n    function changeThresholdSurpassed(\\n        bytes memory data,\\n        uint256 changeThreshold\\n    ) public view virtual override returns (bool) {\\n        uint256 price = fetchPrice(data);\\n        address token = abi.decode(data, (address));\\n\\n        ObservationLibrary.PriceObservation storage lastObservation = observations[token];\\n\\n        return changeThresholdSurpassed(price, lastObservation.price, changeThreshold);\\n    }\\n\\n    /// @notice Checks if this accumulator needs an update by checking the time since the last update and the change in\\n    ///   liquidities.\\n    /// @param data The encoded address of the token for which to perform the update.\\n    /// @inheritdoc IUpdateable\\n    function needsUpdate(bytes memory data) public view virtual override returns (bool) {\\n        uint256 deltaTime = timeSinceLastUpdate(data);\\n        if (deltaTime < _updateDelay()) {\\n            // Ensures updates occur at most once every minUpdateDelay (seconds)\\n            return false;\\n        } else if (deltaTime >= _heartbeat()) {\\n            // Ensures updates occur (optimistically) at least once every heartbeat (seconds)\\n            return true;\\n        }\\n\\n        /*\\n         * heartbeat > deltaTime >= minUpdateDelay\\n         *\\n         * Check if the % change in price warrants an update (saves gas vs. always updating on change)\\n         */\\n        return updateThresholdSurpassed(data);\\n    }\\n\\n    /// @param data The encoded address of the token for which to perform the update.\\n    /// @inheritdoc IUpdateable\\n    function canUpdate(bytes memory data) public view virtual override returns (bool) {\\n        return needsUpdate(data);\\n    }\\n\\n    /// @notice Updates the accumulator for a specific token.\\n    /// @dev Must be called by an EOA to limit the attack vector, unless it's the first observation for a token.\\n    /// @param data Encoding of the token address followed by the expected price.\\n    /// @return updated True if anything was updated; false otherwise.\\n    function update(bytes memory data) public virtual override returns (bool) {\\n        if (needsUpdate(data)) return performUpdate(data);\\n\\n        return false;\\n    }\\n\\n    /// @param data The encoded address of the token for which the update relates to.\\n    /// @inheritdoc IUpdateable\\n    function lastUpdateTime(bytes memory data) public view virtual override returns (uint256) {\\n        address token = abi.decode(data, (address));\\n\\n        return observations[token].timestamp;\\n    }\\n\\n    /// @param data The encoded address of the token for which the update relates to.\\n    /// @inheritdoc IUpdateable\\n    function timeSinceLastUpdate(bytes memory data) public view virtual override returns (uint256) {\\n        return block.timestamp - lastUpdateTime(data);\\n    }\\n\\n    /// @inheritdoc IPriceAccumulator\\n    function getLastAccumulation(\\n        address token\\n    ) public view virtual override returns (AccumulationLibrary.PriceAccumulator memory) {\\n        return accumulations[token];\\n    }\\n\\n    /// @inheritdoc IPriceAccumulator\\n    function getCurrentAccumulation(\\n        address token\\n    ) public view virtual override returns (AccumulationLibrary.PriceAccumulator memory accumulation) {\\n        ObservationLibrary.PriceObservation storage lastObservation = observations[token];\\n        require(lastObservation.timestamp != 0, \\\"PriceAccumulator: UNINITIALIZED\\\");\\n\\n        accumulation = accumulations[token]; // Load last accumulation\\n\\n        uint256 deltaTime = block.timestamp - lastObservation.timestamp;\\n        if (deltaTime != 0) {\\n            // The last observation price has existed for some time, so we add that\\n            uint224 timeWeightedPrice = calculateTimeWeightedValue(lastObservation.price, deltaTime).toUint224();\\n            unchecked {\\n                // Overflow is desired and results in correct functionality\\n                accumulation.cumulativePrice += timeWeightedPrice;\\n            }\\n            accumulation.timestamp = block.timestamp.toUint32();\\n        }\\n    }\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(IERC165, SimpleQuotationMetadata, AbstractAccumulator) returns (bool) {\\n        return\\n            interfaceId == type(IPriceAccumulator).interfaceId ||\\n            interfaceId == type(IPriceOracle).interfaceId ||\\n            interfaceId == type(IUpdateable).interfaceId ||\\n            SimpleQuotationMetadata.supportsInterface(interfaceId) ||\\n            AbstractAccumulator.supportsInterface(interfaceId);\\n    }\\n\\n    /// @inheritdoc IPriceOracle\\n    function consultPrice(address token) public view virtual override returns (uint112 price) {\\n        if (token == quoteTokenAddress()) return uint112(10 ** quoteTokenDecimals());\\n\\n        ObservationLibrary.PriceObservation storage observation = observations[token];\\n\\n        require(observation.timestamp != 0, \\\"PriceAccumulator: MISSING_OBSERVATION\\\");\\n\\n        return observation.price;\\n    }\\n\\n    /// @param maxAge The maximum age of the quotation, in seconds. If 0, fetches the real-time price.\\n    /// @inheritdoc IPriceOracle\\n    function consultPrice(address token, uint256 maxAge) public view virtual override returns (uint112 price) {\\n        if (token == quoteTokenAddress()) return uint112(10 ** quoteTokenDecimals());\\n\\n        if (maxAge == 0) return fetchPrice(abi.encode(token));\\n\\n        ObservationLibrary.PriceObservation storage observation = observations[token];\\n\\n        require(observation.timestamp != 0, \\\"PriceAccumulator: MISSING_OBSERVATION\\\");\\n        require(block.timestamp <= observation.timestamp + maxAge, \\\"PriceAccumulator: RATE_TOO_OLD\\\");\\n\\n        return observation.price;\\n    }\\n\\n    function _updateDelay() internal view virtual returns (uint256) {\\n        return minUpdateDelay;\\n    }\\n\\n    function _heartbeat() internal view virtual returns (uint256) {\\n        return maxUpdateDelay;\\n    }\\n\\n    function calculateTimeWeightedValue(uint256 value, uint256 time) internal view virtual returns (uint256) {\\n        return averagingStrategy.calculateWeightedValue(value, time);\\n    }\\n\\n    function calculateTimeWeightedAverage(\\n        uint224 cumulativeNew,\\n        uint224 cumulativeOld,\\n        uint256 deltaTime\\n    ) internal view virtual returns (uint256) {\\n        uint256 totalWeightedValues;\\n        unchecked {\\n            // Underflow is desired and results in correct functionality\\n            totalWeightedValues = cumulativeNew - cumulativeOld;\\n        }\\n        return averagingStrategy.calculateWeightedAverage(totalWeightedValues, deltaTime);\\n    }\\n\\n    function performUpdate(bytes memory data) internal virtual returns (bool) {\\n        uint112 price = fetchPrice(data);\\n        address token = abi.decode(data, (address));\\n\\n        // If the observation fails validation, do not update anything\\n        if (!validateObservation(data, price)) return false;\\n\\n        ObservationLibrary.PriceObservation storage observation = observations[token];\\n        AccumulationLibrary.PriceAccumulator storage accumulation = accumulations[token];\\n\\n        if (observation.timestamp == 0) {\\n            /*\\n             * Initialize\\n             */\\n            observation.price = price;\\n            observation.timestamp = accumulation.timestamp = block.timestamp.toUint32();\\n\\n            emit Updated(token, price, block.timestamp);\\n\\n            return true;\\n        }\\n\\n        /*\\n         * Update\\n         */\\n        uint256 deltaTime = block.timestamp - observation.timestamp;\\n        if (deltaTime != 0) {\\n            uint224 timeWeightedPrice = calculateTimeWeightedValue(observation.price, deltaTime).toUint224();\\n            unchecked {\\n                // Overflow is desired and results in correct functionality\\n                accumulation.cumulativePrice += timeWeightedPrice;\\n            }\\n            observation.price = price;\\n            observation.timestamp = accumulation.timestamp = block.timestamp.toUint32();\\n\\n            emit Updated(token, price, block.timestamp);\\n\\n            return true;\\n        }\\n\\n        return false;\\n    }\\n\\n    /// @notice Requires the message sender of an update to not be a smart contract.\\n    /// @dev Can be overridden to disable this requirement.\\n    function validateObservationRequireEoa() internal virtual {\\n        // Message sender should never be a smart contract. Smart contracts can use flash attacks to manipulate data.\\n        require(msg.sender == tx.origin, \\\"PriceAccumulator: MUST_BE_EOA\\\");\\n    }\\n\\n    function validateObservationAllowedChange(address) internal virtual returns (uint256) {\\n        // Allow the price to change by half of the update threshold\\n        return _updateThreshold() / 2;\\n    }\\n\\n    function validateAllowedTimeDifference() internal virtual returns (uint32) {\\n        return 5 minutes; // Allow time for the update to be mined\\n    }\\n\\n    function validateObservationTime(uint32 providedTimestamp) internal virtual returns (bool) {\\n        uint32 allowedTimeDifference = validateAllowedTimeDifference();\\n\\n        return\\n            block.timestamp <= providedTimestamp + allowedTimeDifference &&\\n            block.timestamp >= providedTimestamp - 10 seconds; // Allow for some clock drift\\n    }\\n\\n    function validateObservation(bytes memory updateData, uint112 price) internal virtual returns (bool) {\\n        validateObservationRequireEoa();\\n\\n        // Extract provided price\\n        // The message sender should call consultPrice immediately before calling the update function, passing\\n        //   the returned value into the update data.\\n        // We could also use this to anchor the price to an off-chain price\\n        (address token, uint112 pPrice, uint32 pTimestamp) = abi.decode(updateData, (address, uint112, uint32));\\n\\n        uint256 allowedChangeThreshold = validateObservationAllowedChange(token);\\n\\n        // We require the price to not change by more than the threshold above\\n        // This check limits the ability of MEV and flashbots from manipulating data\\n        bool priceValidated = !changeThresholdSurpassed(price, pPrice, allowedChangeThreshold);\\n        bool timeValidated = validateObservationTime(pTimestamp);\\n\\n        bool validated = priceValidated && timeValidated;\\n\\n        emit ValidationPerformed(token, price, pPrice, block.timestamp, pTimestamp, validated);\\n\\n        return validated;\\n    }\\n\\n    function fetchPrice(bytes memory data) internal view virtual returns (uint112 price);\\n}\\n\"\r\n    },\r\n    \"@adrastia-oracle/adrastia-core/contracts/accumulators/proto/compound/CometRateAccumulator.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity =0.8.13;\\n\\nimport \\\"../../PriceAccumulator.sol\\\";\\nimport \\\"../../../libraries/SafeCastExt.sol\\\";\\n\\nabstract contract IComet {\\n    function getSupplyRate(uint utilization) public view virtual returns (uint64);\\n\\n    function getBorrowRate(uint utilization) public view virtual returns (uint64);\\n\\n    function getUtilization() public view virtual returns (uint);\\n\\n    function baseToken() external view virtual returns (address);\\n}\\n\\ncontract CometRateAccumulator is PriceAccumulator {\\n    using SafeCastExt for uint256;\\n\\n    address public immutable comet;\\n\\n    error InvalidRateType(uint256 rateType);\\n\\n    constructor(\\n        IAveragingStrategy averagingStrategy_,\\n        address comet_,\\n        uint256 updateTheshold_,\\n        uint256 minUpdateDelay_,\\n        uint256 maxUpdateDelay_\\n    )\\n        PriceAccumulator(\\n            averagingStrategy_,\\n            IComet(comet_).baseToken(),\\n            updateTheshold_,\\n            minUpdateDelay_,\\n            maxUpdateDelay_\\n        )\\n    {\\n        comet = comet_;\\n    }\\n\\n    function fetchPrice(bytes memory data) internal view virtual override returns (uint112 rate) {\\n        uint256 rateType = abi.decode(data, (uint256));\\n\\n        uint256 utilization = IComet(comet).getUtilization();\\n\\n        if (rateType == 16) {\\n            rate = uint112(IComet(comet).getSupplyRate(utilization));\\n        } else if (rateType == 17) {\\n            rate = uint112(IComet(comet).getBorrowRate(utilization));\\n        } else {\\n            revert InvalidRateType(rateType);\\n        }\\n\\n        // Convert from second rate to yearly rate\\n        rate *= 365 days;\\n    }\\n}\\n\"\r\n    },\r\n    \"@adrastia-oracle/adrastia-core/contracts/interfaces/IAccumulator.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0 <0.9.0;\\n\\n/**\\n * @title IAccumulator\\n * @notice An interface that defines an accumulator - that is, a contract that updates cumulative value(s) when the\\n *   underlying value(s) change by more than the update threshold.\\n */\\nabstract contract IAccumulator {\\n    /// @notice Gets the scalar (as a power of 10) to be used for calculating changes in value.\\n    /// @return The scalar to be used for calculating changes in value.\\n    function changePrecision() external view virtual returns (uint256);\\n\\n    /// @notice Gets the threshold at which an update to the cumulative value(s) should be performed.\\n    /// @return A percentage scaled by the change precision.\\n    function updateThreshold() external view virtual returns (uint256);\\n\\n    /// @notice Gets the minimum delay between updates to the cumulative value(s).\\n    /// @return The minimum delay between updates to the cumulative value(s), in seconds.\\n    function updateDelay() external view virtual returns (uint256);\\n\\n    /// @notice Gets the maximum delay (target) between updates to the cumulative value(s), without requiring a change\\n    ///   past the update threshold.\\n    /// @return The maximum delay (target) between updates to the cumulative value(s), in seconds.\\n    function heartbeat() external view virtual returns (uint256);\\n\\n    /// @notice Determines whether the specified change threshold has been surpassed with respect to the specified\\n    ///   data.\\n    /// @dev Calculates the change from the stored observation to the current observation.\\n    /// @param data Amy data relating to the update.\\n    /// @param changeThreshold The change threshold as a percentage multiplied by the change precision\\n    ///   (`changePrecision`). Ex: a 1% change is respresented as 0.01 * `changePrecision`.\\n    /// @return surpassed True if the update threshold has been surpassed; false otherwise.\\n    function changeThresholdSurpassed(bytes memory data, uint256 changeThreshold) public view virtual returns (bool);\\n\\n    /// @notice Determines whether the update threshold has been surpassed with respect to the specified data.\\n    /// @dev Calculates the change from the stored observation to the current observation.\\n    /// @param data Amy data relating to the update.\\n    /// @return surpassed True if the update threshold has been surpassed; false otherwise.\\n    function updateThresholdSurpassed(bytes memory data) public view virtual returns (bool);\\n}\\n\"\r\n    },\r\n    \"@adrastia-oracle/adrastia-core/contracts/interfaces/IPriceAccumulator.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0 <0.9.0;\\n\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IAccumulator.sol\\\";\\n\\nimport \\\"../libraries/AccumulationLibrary.sol\\\";\\nimport \\\"../libraries/ObservationLibrary.sol\\\";\\n\\n/**\\n * @title IPriceAccumulator\\n * @notice An interface that defines a \\\"price accumulator\\\" - that is, a cumulative price - with a single quote token\\n *   and many exchange tokens.\\n * @dev Price accumulators are used to calculate time-weighted average prices.\\n */\\nabstract contract IPriceAccumulator is IAccumulator {\\n    /// @notice Emitted when the accumulator is updated.\\n    /// @dev The accumulator's observation and cumulative values are updated when this is emitted.\\n    /// @param token The address of the token that the update is for.\\n    /// @param price The quote token denominated price for a whole token.\\n    /// @param timestamp The epoch timestamp of the update (in seconds).\\n    event Updated(address indexed token, uint256 price, uint256 timestamp);\\n\\n    /**\\n     * @notice Calculates a price from two different cumulative prices.\\n     * @param firstAccumulation The first cumulative price.\\n     * @param secondAccumulation The last cumulative price.\\n     * @dev Reverts if the timestamp of the first accumulation is 0, or if it's not strictly less than the timestamp of\\n     *  the second.\\n     * @return price A time-weighted average price derived from two cumulative prices.\\n     */\\n    function calculatePrice(\\n        AccumulationLibrary.PriceAccumulator calldata firstAccumulation,\\n        AccumulationLibrary.PriceAccumulator calldata secondAccumulation\\n    ) external view virtual returns (uint112 price);\\n\\n    /// @notice Gets the last cumulative price that was stored.\\n    /// @param token The address of the token to get the cumulative price for.\\n    /// @return The last cumulative price along with the timestamp of that price.\\n    function getLastAccumulation(\\n        address token\\n    ) public view virtual returns (AccumulationLibrary.PriceAccumulator memory);\\n\\n    /// @notice Gets the current cumulative price.\\n    /// @param token The address of the token to get the cumulative price for.\\n    /// @return The current cumulative price along with the timestamp of that price.\\n    function getCurrentAccumulation(\\n        address token\\n    ) public view virtual returns (AccumulationLibrary.PriceAccumulator memory);\\n}\\n\"\r\n    },\r\n    \"@adrastia-oracle/adrastia-core/contracts/interfaces/IPriceOracle.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0 <0.9.0;\\n\\nimport \\\"./IUpdateable.sol\\\";\\nimport \\\"./IQuoteToken.sol\\\";\\n\\n/// @title IPriceOracle\\n/// @notice An interface that defines a price oracle with a single quote token (or currency) and many exchange tokens.\\nabstract contract IPriceOracle is IUpdateable, IQuoteToken {\\n    /**\\n     * @notice Gets the price of a token in terms of the quote token.\\n     * @param token The token to get the price of.\\n     * @return price The quote token denominated price for a whole token.\\n     */\\n    function consultPrice(address token) public view virtual returns (uint112 price);\\n\\n    /**\\n     * @notice Gets the price of a token in terms of the quote token, reverting if the quotation is older than the\\n     *  maximum allowable age.\\n     * @dev Using maxAge of 0 can be gas costly and the returned data is easier to manipulate.\\n     * @param token The token to get the price of.\\n     * @param maxAge The maximum age of the quotation, in seconds. If 0, the function gets the instant rates as of the\\n     *   latest block, straight from the source.\\n     * @return price The quote token denominated price for a whole token.\\n     */\\n    function consultPrice(address token, uint256 maxAge) public view virtual returns (uint112 price);\\n}\\n\"\r\n    },\r\n    \"@adrastia-oracle/adrastia-core/contracts/interfaces/IQuoteToken.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0 <0.9.0;\\n\\n/**\\n * @title IQuoteToken\\n * @notice An interface that defines a contract containing a quote token (or currency), providing the associated\\n *  metadata.\\n */\\nabstract contract IQuoteToken {\\n    /// @notice Gets the quote token (or currency) name.\\n    /// @return The name of the quote token (or currency).\\n    function quoteTokenName() public view virtual returns (string memory);\\n\\n    /// @notice Gets the quote token address (if any).\\n    /// @dev This may return address(0) if no specific quote token is used (such as an aggregate of quote tokens).\\n    /// @return The address of the quote token, or address(0) if no specific quote token is used.\\n    function quoteTokenAddress() public view virtual returns (address);\\n\\n    /// @notice Gets the quote token (or currency) symbol.\\n    /// @return The symbol of the quote token (or currency).\\n    function quoteTokenSymbol() public view virtual returns (string memory);\\n\\n    /// @notice Gets the number of decimal places that quote prices have.\\n    /// @return The number of decimals of the quote token (or currency) that quote prices have.\\n    function quoteTokenDecimals() public view virtual returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@adrastia-oracle/adrastia-core/contracts/interfaces/IUpdateable.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0 <0.9.0;\\n\\n/// @title IUpdateByToken\\n/// @notice An interface that defines a contract that is updateable as per the input data.\\nabstract contract IUpdateable {\\n    /// @notice Performs an update as per the input data.\\n    /// @param data Any data needed for the update.\\n    /// @return b True if anything was updated; false otherwise.\\n    function update(bytes memory data) public virtual returns (bool b);\\n\\n    /// @notice Checks if an update needs to be performed.\\n    /// @param data Any data relating to the update.\\n    /// @return b True if an update needs to be performed; false otherwise.\\n    function needsUpdate(bytes memory data) public view virtual returns (bool b);\\n\\n    /// @notice Check if an update can be performed by the caller (if needed).\\n    /// @dev Tries to determine if the caller can call update with a valid observation being stored.\\n    /// @dev This is not meant to be called by state-modifying functions.\\n    /// @param data Any data relating to the update.\\n    /// @return b True if an update can be performed by the caller; false otherwise.\\n    function canUpdate(bytes memory data) public view virtual returns (bool b);\\n\\n    /// @notice Gets the timestamp of the last update.\\n    /// @param data Any data relating to the update.\\n    /// @return A unix timestamp.\\n    function lastUpdateTime(bytes memory data) public view virtual returns (uint256);\\n\\n    /// @notice Gets the amount of time (in seconds) since the last update.\\n    /// @param data Any data relating to the update.\\n    /// @return Time in seconds.\\n    function timeSinceLastUpdate(bytes memory data) public view virtual returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@adrastia-oracle/adrastia-core/contracts/libraries/AccumulationLibrary.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0 <0.9.0;\\n\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @notice A library for calculating and storing accumulations of time-weighted average values in the form of sumations\\n *   of (value * time).\\n */\\nlibrary AccumulationLibrary {\\n    /**\\n     * @notice A struct for storing a snapshot of liquidity accumulations.\\n     * @dev The difference of a newer snapshot against an older snapshot can be used to derive time-weighted average\\n     *   liquidities by dividing the difference in value by the difference in time.\\n     */\\n    struct LiquidityAccumulator {\\n        /*\\n         * @notice Accumulates time-weighted average liquidity of the token in the form of a sumation of (price * time),\\n         *   with time measured in seconds.\\n         * @dev Overflow is desired and results in correct behavior as long as the difference between two snapshots\\n         *   is less than or equal to 2^112.\\n         */\\n        uint112 cumulativeTokenLiquidity;\\n        /*\\n         * @notice Accumulates time-weighted average liquidity of the quote token in the form of a sumation of\\n         *   (price * time), with time measured in seconds..\\n         * @dev Overflow is desired and results in correct behavior as long as the difference between two snapshots\\n         *   is less than or equal to 2^112.\\n         */\\n        uint112 cumulativeQuoteTokenLiquidity;\\n        /*\\n         * @notice The unix timestamp (in seconds) of the last update of (addition to) the cumulative price.\\n         */\\n        uint32 timestamp;\\n    }\\n\\n    /**\\n     * @notice A struct for storing a snapshot of price accumulations.\\n     * @dev The difference of a newer snapshot against an older snapshot can be used to derive a time-weighted average\\n     *   price by dividing the difference in value by the difference in time.\\n     */\\n    struct PriceAccumulator {\\n        /*\\n         * @notice Accumulates time-weighted average prices in the form of a sumation of (price * time), with time\\n         *   measured in seconds.\\n         * @dev Overflow is desired and results in correct behavior as long as the difference between two snapshots\\n         *   is less than or equal to 2^112.\\n         */\\n        uint224 cumulativePrice;\\n        /*\\n         * @notice The unix timestamp (in seconds) of the last update of (addition to) the cumulative price.\\n         */\\n        uint32 timestamp;\\n    }\\n}\\n\"\r\n    },\r\n    \"@adrastia-oracle/adrastia-core/contracts/libraries/AddressLibrary.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0 <0.9.0;\\n\\npragma experimental ABIEncoderV2;\\n\\nlibrary AddressLibrary {\\n    /**\\n     * @notice Determines whether an address contains code (i.e. is a smart contract).\\n     * @dev Use with caution: if called within a constructor, will return false.\\n     * @param self The address to check.\\n     * @return b True if the address contains code, false otherwise.\\n     */\\n    function isContract(address self) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(self)\\n        }\\n        return size > 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@adrastia-oracle/adrastia-core/contracts/libraries/ObservationLibrary.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0 <0.9.0;\\n\\npragma experimental ABIEncoderV2;\\n\\nlibrary ObservationLibrary {\\n    struct ObservationMetadata {\\n        address oracle;\\n    }\\n\\n    struct Observation {\\n        uint112 price;\\n        uint112 tokenLiquidity;\\n        uint112 quoteTokenLiquidity;\\n        uint32 timestamp;\\n    }\\n\\n    struct MetaObservation {\\n        ObservationMetadata metadata;\\n        Observation data;\\n    }\\n\\n    struct LiquidityObservation {\\n        uint112 tokenLiquidity;\\n        uint112 quoteTokenLiquidity;\\n        uint32 timestamp;\\n    }\\n\\n    struct PriceObservation {\\n        uint112 price;\\n        uint32 timestamp;\\n    }\\n}\\n\"\r\n    },\r\n    \"@adrastia-oracle/adrastia-core/contracts/libraries/SafeCastExt.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCastExt {\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n}\\n\"\r\n    },\r\n    \"@adrastia-oracle/adrastia-core/contracts/strategies/averaging/IAveragingStrategy.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0 <0.9.0;\\n\\n/// @title IAveragingStrategy\\n/// @notice An interface defining a strategy for calculating weighted averages.\\ninterface IAveragingStrategy {\\n    /// @notice An error that is thrown when we try calculating a weighted average with a total weight of zero.\\n    /// @dev A total weight of zero is ambiguous, so we throw an error.\\n    error TotalWeightCannotBeZero();\\n\\n    /// @notice Calculates a weighted value.\\n    /// @param value The value to weight.\\n    /// @param weight The weight to apply to the value.\\n    /// @return The weighted value.\\n    function calculateWeightedValue(uint256 value, uint256 weight) external pure returns (uint256);\\n\\n    /// @notice Calculates a weighted average.\\n    /// @param totalWeightedValues The sum of the weighted values.\\n    /// @param totalWeight The sum of the weights.\\n    /// @return The weighted average.\\n    /// @custom:throws TotalWeightCannotBeZero if the total weight is zero.\\n    function calculateWeightedAverage(uint256 totalWeightedValues, uint256 totalWeight) external pure returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@adrastia-oracle/adrastia-core/contracts/utils/SimpleQuotationMetadata.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity =0.8.13;\\n\\nimport \\\"@openzeppelin-v4/contracts/utils/introspection/IERC165.sol\\\";\\nimport \\\"@openzeppelin-v4/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\nimport \\\"../interfaces/IQuoteToken.sol\\\";\\n\\ncontract SimpleQuotationMetadata is IQuoteToken, IERC165 {\\n    address public immutable quoteToken;\\n\\n    constructor(address quoteToken_) {\\n        quoteToken = quoteToken_;\\n    }\\n\\n    /// @inheritdoc IQuoteToken\\n    function quoteTokenName() public view virtual override returns (string memory) {\\n        return getStringOrBytes32(quoteToken, IERC20Metadata.name.selector);\\n    }\\n\\n    /// @inheritdoc IQuoteToken\\n    function quoteTokenAddress() public view virtual override returns (address) {\\n        return quoteToken;\\n    }\\n\\n    /// @inheritdoc IQuoteToken\\n    function quoteTokenSymbol() public view virtual override returns (string memory) {\\n        return getStringOrBytes32(quoteToken, IERC20Metadata.symbol.selector);\\n    }\\n\\n    /// @inheritdoc IQuoteToken\\n    function quoteTokenDecimals() public view virtual override returns (uint8) {\\n        (bool success, bytes memory result) = quoteToken.staticcall(\\n            abi.encodeWithSelector(IERC20Metadata.decimals.selector)\\n        );\\n        if (!success) return 18; // Return 18 by default\\n\\n        return abi.decode(result, (uint8));\\n    }\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IQuoteToken).interfaceId;\\n    }\\n\\n    function bytes32ToString(bytes32 _bytes32) internal pure returns (string memory) {\\n        // Calculate string length\\n        uint256 i = 0;\\n        while (i < 32 && _bytes32[i] != 0) ++i;\\n\\n        bytes memory bytesArray = new bytes(i);\\n\\n        // Extract characters\\n        for (i = 0; i < 32 && _bytes32[i] != 0; ++i) bytesArray[i] = _bytes32[i];\\n\\n        return string(bytesArray);\\n    }\\n\\n    function getStringOrBytes32(address contractAddress, bytes4 selector) internal view returns (string memory) {\\n        (bool success, bytes memory result) = contractAddress.staticcall(abi.encodeWithSelector(selector));\\n        if (!success) return \\\"\\\";\\n\\n        return result.length == 32 ? bytes32ToString(bytes32(result)) : abi.decode(result, (string));\\n    }\\n}\\n\"\r\n    },\r\n    \"@adrastia-oracle/adrastia-periphery/contracts/access/Roles.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0 <0.9.0;\\n\\nlibrary Roles {\\n    bytes32 public constant ADMIN = keccak256(\\\"ADMIN_ROLE\\\");\\n\\n    bytes32 public constant UPDATER_ADMIN = keccak256(\\\"UPDATER_ADMIN_ROLE\\\");\\n\\n    bytes32 public constant ORACLE_UPDATER = keccak256(\\\"ORACLE_UPDATER_ROLE\\\");\\n\\n    bytes32 public constant RATE_ADMIN = keccak256(\\\"RATE_ADMIN_ROLE\\\");\\n\\n    bytes32 public constant UPDATE_PAUSE_ADMIN = keccak256(\\\"UPDATE_PAUSE_ADMIN_ROLE\\\");\\n\\n    bytes32 public constant CONFIG_ADMIN = keccak256(\\\"CONFIG_ADMIN_ROLE\\\");\\n}\\n\"\r\n    },\r\n    \"@adrastia-oracle/adrastia-periphery/contracts/accumulators/AccumulatorConfig.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.13;\\n\\nimport \\\"@openzeppelin-v4/contracts/access/AccessControlEnumerable.sol\\\";\\nimport \\\"../access/Roles.sol\\\";\\n\\n/// @title AccumulatorConfig\\n/// @notice A contract for managing the configuration of an accumulator.\\ncontract AccumulatorConfig is AccessControlEnumerable {\\n    /// @dev A struct that holds configuration values for the accumulator.\\n    struct Config {\\n        uint32 updateThreshold;\\n        uint32 updateDelay;\\n        uint32 heartbeat;\\n    }\\n\\n    /// @dev Emitted when the configuration is updated.\\n    event ConfigUpdated(Config oldConfig, Config newConfig);\\n\\n    /// @dev The current configuration.\\n    Config internal config;\\n\\n    /// @dev An error thrown when attempting to set an invalid configuration.\\n    error InvalidConfig(Config config);\\n\\n    /// @notice An error thrown when attempting to call a function that requires a certain role.\\n    /// @param account The account that is missing the role.\\n    /// @param role The role that is missing.\\n    error MissingRole(address account, bytes32 role);\\n\\n    /// @notice Constructs a new AccumulatorConfig with the given configuration values.\\n    /// @param updateThreshold_ The initial value for the update threshold.\\n    /// @param updateDelay_ The initial value for the update delay.\\n    /// @param heartbeat_ The initial value for the heartbeat.\\n    constructor(uint32 updateThreshold_, uint32 updateDelay_, uint32 heartbeat_) {\\n        initializeRoles();\\n\\n        config.updateThreshold = updateThreshold_;\\n        config.updateDelay = updateDelay_;\\n        config.heartbeat = heartbeat_;\\n    }\\n\\n    /**\\n     * @notice Modifier to make a function callable only by a certain role. In addition to checking the sender's role,\\n     * `address(0)` 's role is also considered. Granting a role to `address(0)` is equivalent to enabling this role for\\n     * everyone.\\n     * @param role The role to check.\\n     */\\n    modifier onlyRoleOrOpenRole(bytes32 role) {\\n        if (!hasRole(role, address(0))) {\\n            if (!hasRole(role, msg.sender)) revert MissingRole(msg.sender, role);\\n        }\\n        _;\\n    }\\n\\n    /// @notice Sets a new configuration.\\n    /// @param newConfig The new configuration values.\\n    /// @dev Only accounts with the CONFIG_ADMIN role can call this function.\\n    function setConfig(Config calldata newConfig) external virtual onlyRole(Roles.CONFIG_ADMIN) {\\n        // Ensure that updateDelay is not greater than heartbeat\\n        if (newConfig.updateDelay > newConfig.heartbeat) revert InvalidConfig(newConfig);\\n\\n        // Ensure that updateThreshold is not zero\\n        if (newConfig.updateThreshold == 0) revert InvalidConfig(newConfig);\\n\\n        Config memory oldConfig = config;\\n        config = newConfig;\\n        emit ConfigUpdated(oldConfig, newConfig);\\n    }\\n\\n    function initializeRoles() internal virtual {\\n        // Setup admin role, setting msg.sender as admin\\n        _setupRole(Roles.ADMIN, msg.sender);\\n        _setRoleAdmin(Roles.ADMIN, Roles.ADMIN);\\n\\n        // CONFIG_ADMIN is managed by ADMIN\\n        _setRoleAdmin(Roles.CONFIG_ADMIN, Roles.ADMIN);\\n\\n        // UPDATER_ADMIN is managed by ADMIN\\n        _setRoleAdmin(Roles.UPDATER_ADMIN, Roles.ADMIN);\\n\\n        // ORACLE_UPDATER is managed by UPDATER_ADMIN\\n        _setRoleAdmin(Roles.ORACLE_UPDATER, Roles.UPDATER_ADMIN);\\n\\n        // Hierarchy:\\n        // ADMIN\\n        //   - CONFIG_ADMIN\\n        //   - UPDATER_ADMIN\\n        //     - ORACLE_UPDATER\\n    }\\n}\\n\"\r\n    },\r\n    \"@adrastia-oracle/adrastia-periphery/contracts/accumulators/proto/compound/ManagedCometRateAccumulator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.13;\\n\\nimport \\\"@adrastia-oracle/adrastia-core/contracts/accumulators/proto/compound/CometRateAccumulator.sol\\\";\\n\\nimport \\\"../../AccumulatorConfig.sol\\\";\\n\\ncontract ManagedCometRateAccumulator is CometRateAccumulator, AccumulatorConfig {\\n    constructor(\\n        IAveragingStrategy averagingStrategy_,\\n        address comet_,\\n        uint256 updateTheshold_,\\n        uint256 minUpdateDelay_,\\n        uint256 maxUpdateDelay_\\n    )\\n        CometRateAccumulator(averagingStrategy_, comet_, updateTheshold_, minUpdateDelay_, maxUpdateDelay_)\\n        AccumulatorConfig(uint32(updateTheshold_), uint32(minUpdateDelay_), uint32(maxUpdateDelay_))\\n    {}\\n\\n    function canUpdate(bytes memory data) public view virtual override returns (bool) {\\n        // Return false if the message sender is missing the required role\\n        if (!hasRole(Roles.ORACLE_UPDATER, address(0)) && !hasRole(Roles.ORACLE_UPDATER, msg.sender)) return false;\\n\\n        return super.canUpdate(data);\\n    }\\n\\n    function update(bytes memory data) public virtual override onlyRoleOrOpenRole(Roles.ORACLE_UPDATER) returns (bool) {\\n        return super.update(data);\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(AccessControlEnumerable, PriceAccumulator) returns (bool) {\\n        return\\n            AccessControlEnumerable.supportsInterface(interfaceId) || PriceAccumulator.supportsInterface(interfaceId);\\n    }\\n\\n    function _updateDelay() internal view virtual override returns (uint256) {\\n        return config.updateDelay;\\n    }\\n\\n    function _heartbeat() internal view virtual override returns (uint256) {\\n        return config.heartbeat;\\n    }\\n\\n    function _updateThreshold() internal view virtual override returns (uint256) {\\n        return config.updateThreshold;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin-v4/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin-v4/contracts/access/AccessControlEnumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin-v4/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin-v4/contracts/access/IAccessControlEnumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin-v4/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin-v4/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin-v4/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin-v4/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin-v4/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin-v4/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin-v4/contracts/utils/math/SafeCast.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin-v4/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/AdrastiaVersioning.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity =0.8.13;\\n\\ncontract AdrastiaVersioning {\\n    string public constant ADRASTIA_CORE_VERSION = \\\"v4.0.0-beta.2\\\";\\n    string public constant ADRASTIA_PERIPHERY_VERSION = \\\"v4.0.0-beta.2\\\";\\n    string public constant ADRASTIA_PROTOCOL_VERSION = \\\"v0.1.0\\\";\\n}\\n\"\r\n    },\r\n    \"contracts/accumulators/CometRateAccumulator.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity =0.8.13;\\n\\nimport \\\"@adrastia-oracle/adrastia-periphery/contracts/accumulators/proto/compound/ManagedCometRateAccumulator.sol\\\";\\n\\nimport \\\"../AdrastiaVersioning.sol\\\";\\n\\ncontract AdrastiaCometRateAccumulator is AdrastiaVersioning, ManagedCometRateAccumulator {\\n    struct RateAccumulatorParams {\\n        IAveragingStrategy averagingStrategy;\\n        address comet;\\n        uint256 updateThreshold;\\n        uint256 minUpdateDelay;\\n        uint256 maxUpdateDelay;\\n    }\\n\\n    string public name;\\n\\n    constructor(\\n        string memory name_,\\n        RateAccumulatorParams memory params\\n    )\\n        ManagedCometRateAccumulator(\\n            params.averagingStrategy,\\n            params.comet,\\n            params.updateThreshold,\\n            params.minUpdateDelay,\\n            params.maxUpdateDelay\\n        )\\n    {\\n        name = name_;\\n    }\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"contract IAveragingStrategy\",\"name\":\"averagingStrategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"comet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"updateThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minUpdateDelay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxUpdateDelay\",\"type\":\"uint256\"}],\"internalType\":\"struct AdrastiaCometRateAccumulator.RateAccumulatorParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"updateThreshold\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"updateDelay\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"heartbeat\",\"type\":\"uint32\"}],\"internalType\":\"struct AccumulatorConfig.Config\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"InvalidConfig\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rateType\",\"type\":\"uint256\"}],\"name\":\"InvalidRateType\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"MissingRole\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"updateThreshold\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"updateDelay\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"heartbeat\",\"type\":\"uint32\"}],\"indexed\":false,\"internalType\":\"struct AccumulatorConfig.Config\",\"name\":\"oldConfig\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"updateThreshold\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"updateDelay\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"heartbeat\",\"type\":\"uint32\"}],\"indexed\":false,\"internalType\":\"struct AccumulatorConfig.Config\",\"name\":\"newConfig\",\"type\":\"tuple\"}],\"name\":\"ConfigUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Updated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"observedPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"providedPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"providedTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"succeeded\",\"type\":\"bool\"}],\"name\":\"ValidationPerformed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADRASTIA_CORE_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ADRASTIA_PERIPHERY_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ADRASTIA_PROTOCOL_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accumulations\",\"outputs\":[{\"internalType\":\"uint224\",\"name\":\"cumulativePrice\",\"type\":\"uint224\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"averagingStrategy\",\"outputs\":[{\"internalType\":\"contract IAveragingStrategy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint224\",\"name\":\"cumulativePrice\",\"type\":\"uint224\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"}],\"internalType\":\"struct AccumulationLibrary.PriceAccumulator\",\"name\":\"firstAccumulation\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint224\",\"name\":\"cumulativePrice\",\"type\":\"uint224\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"}],\"internalType\":\"struct AccumulationLibrary.PriceAccumulator\",\"name\":\"secondAccumulation\",\"type\":\"tuple\"}],\"name\":\"calculatePrice\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"price\",\"type\":\"uint112\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"canUpdate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"changePrecision\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"changeThreshold\",\"type\":\"uint256\"}],\"name\":\"changeThresholdSurpassed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"comet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxAge\",\"type\":\"uint256\"}],\"name\":\"consultPrice\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"price\",\"type\":\"uint112\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"consultPrice\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"price\",\"type\":\"uint112\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getCurrentAccumulation\",\"outputs\":[{\"components\":[{\"internalType\":\"uint224\",\"name\":\"cumulativePrice\",\"type\":\"uint224\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"}],\"internalType\":\"struct AccumulationLibrary.PriceAccumulator\",\"name\":\"accumulation\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getLastAccumulation\",\"outputs\":[{\"components\":[{\"internalType\":\"uint224\",\"name\":\"cumulativePrice\",\"type\":\"uint224\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"}],\"internalType\":\"struct AccumulationLibrary.PriceAccumulator\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"heartbeat\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"needsUpdate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"observations\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"price\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quoteToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quoteTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quoteTokenDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quoteTokenName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quoteTokenSymbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"updateThreshold\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"updateDelay\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"heartbeat\",\"type\":\"uint32\"}],\"internalType\":\"struct AccumulatorConfig.Config\",\"name\":\"newConfig\",\"type\":\"tuple\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"timeSinceLastUpdate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"update\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"updateThresholdSurpassed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "AdrastiaCometRateAccumulator", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "2000", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000f6bfde89e4848b299e36b91acf6d327e04c19520000000000000000000000000f25212e676d1f7f89cd72ffee66158f54124644500000000000000000000000000000000000000000000000000000000001e8480000000000000000000000000000000000000000000000000000000000000003c00000000000000000000000000000000000000000000000000000000000151800000000000000000000000000000000000000000000000000000000000000022436f6d706f756e64204949492055534443205261746520416363756d756c61746f72000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}