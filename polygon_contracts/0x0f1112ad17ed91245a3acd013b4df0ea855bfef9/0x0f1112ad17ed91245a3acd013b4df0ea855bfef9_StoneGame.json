{"SourceCode": "{\"InterfaceMainLP.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface InterfaceMainLP {\\n\\n    function getBankroll() external view returns(uint);\\n\\n    function getBalance() external;\\n\\n    function mint(address _player, uint amount) external;\\n\\n    function rewardTokenHolders(address _tokenHolder, uint _withdrawTokens) external;\\n\\n    function depo(address _player) external payable;\\n\\n    function gameplay(address _player, uint _userBet) external payable;\\n\\n    function getPartnerFee(uint _partnerFee, address owner) external;\\n\\n    function payReward(address _player, uint _reward) external;\\n\\n}\"},\"IVRFv2Consumer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IVRFv2Consumer {\\n    function requestRandomWords() external returns (uint256 requestId);\\n\\n    function fulfillRandomWords(uint256 _requestId, uint256[] memory _randomWords) external;\\n\\n    function getRequestStatus(uint256 _requestId) external view returns (bool fulfilled, uint256[] memory randomWords);\\n\\n    function getCurrentRandom(uint _requestId) external view returns(uint256);\\n\\n    function getFulfillStatus(uint _requestId) external view returns(bool);\\n\\n    function existOrNot(uint _requestId) external view returns(bool);\\n\\n    function getLastRequestId() external view returns(uint);\\n\\n    function closeRandom(uint _requestId) external;\\n\\n}\"},\"StoneGame.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\nimport \\\"./InterfaceMainLP.sol\\\";\\nimport \\\"./IVRFv2Consumer.sol\\\";\\n\\npragma solidity ^0.8.0;\\n\\n// the rock-paper-scissors game\\n\\n    contract StoneGame {\\n        address public owner;\\n        uint public userBet;\\n        uint public userChoice;\\n        address public addressPlayer;\\n        uint public degree = 1000000000000000000; // 10**18\\n        uint public minDepo = 100000000000000000; // 0,1 Matic \\n        uint public minBet = 10000000000000000; // 0,01 Matic\\n\\n        uint public botChoice;\\n        uint public rate;\\n        bool public nextUser;\\n        uint public currentRandomWord;\\n        uint public randomNumber;\\n        uint public roundWinner;\\n\\n        IVRFv2Consumer random_contract;\\n        InterfaceMainLP main_contract;\\n        address public main_payable;\\n\\n    constructor(address _random_contract, address _main_contract) {\\n        owner = msg.sender;\\n        random_contract = IVRFv2Consumer(_random_contract);\\n        main_contract = InterfaceMainLP(_main_contract);\\n        main_payable = _main_contract;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Only an owner\\\");\\n        _;\\n    }\\n\\n    function setRate(uint _rate) public onlyOwner {\\n       rate = _rate;\\n    }\\n\\n    function setRandomContract(IVRFv2Consumer _random_contract) public onlyOwner {\\n        random_contract = _random_contract;\\n    }\\n\\n    function setMainContract(InterfaceMainLP _main_contract) public onlyOwner {\\n        main_contract = _main_contract;\\n    }\\n\\n    event Rewarding(address receiver, uint howManyRewards);\\n    event RewardTokens(address receiver);\\n    event Draw(string);\\n\\n  // start game: tx contains 1) userChoice and 2) bet\\n    function startRequestRandom(uint256 _userChoice) public payable {\\n        require(!nextUser, \\\"Wait in line\\\");\\n        require(msg.sender != owner, \\\"You are Owner!\\\");\\n        require(msg.value \\u003e= minBet, \\\"Need more 0.01\\\");\\n        uint bankroll = main_contract.getBankroll();\\n\\n        require(msg.value \\u003c bankroll, \\\"Not enouth funds in game!\\\");\\n        random_contract.requestRandomWords();\\n        address payable toPay = payable(main_payable);\\n        toPay.transfer(msg.value);\\n        userBet = msg.value;\\n        addressPlayer = payable(msg.sender);\\n        userChoice = _userChoice;\\n        nextUser = !nextUser;\\n    }\\n   // summing up the results\\n    function getGameStatus(uint256 _requestId) public {\\n        require(nextUser, \\\"Wait next play!\\\");\\n        require(msg.sender == addressPlayer || msg.sender == owner, \\\"You aren\\u0027t player. Wait in line!\\\");\\n        require(random_contract.existOrNot(_requestId), \\\"request not found\\\");\\n        require(random_contract.getFulfillStatus(_requestId), \\\"Wait random!\\\");\\n\\n        currentRandomWord = random_contract.getCurrentRandom(_requestId);\\n        randomNumber = currentRandomWord % rate;\\n\\n           if(randomNumber \\u003c= 2) {\\n            botChoice = randomNumber;\\n            roundWinner = checkWinner(userChoice, botChoice);\\n           } else {\\n            roundWinner = 0;\\n           }\\n\\n        playGame(roundWinner);\\n        nextUser = !nextUser;\\n        random_contract.closeRandom(_requestId);\\n    }\\n\\n    function checkWinner(uint256 _userChoice, uint256 _botChoice) private pure returns(uint){\\n\\n          if(_userChoice == _botChoice){\\n              return 2;\\n            }\\n          if(_userChoice == 0 \\u0026\\u0026 _botChoice == 1 || _userChoice == 1 \\u0026\\u0026 _botChoice == 2 || _userChoice == 2 \\u0026\\u0026 _botChoice == 0 ){\\n            return 1;\\n            }\\n          return 0;\\n          }\\n\\n    function playGame(uint _result) private {\\n\\n        uint rewardPlayer = userBet * 2;\\n\\n        if(_result == 1) {\\n            main_contract.payReward(addressPlayer, rewardPlayer);\\n\\n            emit Rewarding(addressPlayer, rewardPlayer);\\n        } else if(_result == 0) {\\n            main_contract.gameplay(addressPlayer, userBet);\\n\\n            emit RewardTokens(addressPlayer);\\n        } else if(_result == 2) {\\n            main_contract.payReward(addressPlayer, userBet);\\n            \\n            emit Draw(\\\"Draw\\\");\\n        }\\n    }\\n\\n//////// delivering liquidity to the game\\n    function depo() public payable {\\n        require(msg.sender != owner, \\\"You are an Owner!\\\");\\n        require(msg.value \\u003e= minDepo, \\\"Incorrect sum!\\\"); // 0,1 Matic\\n    \\n        main_contract.depo{value: msg.value}(msg.sender);\\n    }\\n//////// change tokens to Matic\\n    function rewardTokenUsers(uint _withdrawTokens) public {\\n        main_contract.rewardTokenHolders(msg.sender, _withdrawTokens);\\n    }\\n//////// change Partner tokens to Matic\\n    function getPartnerReward(uint _partnerTokenReward) public onlyOwner {\\n        main_contract.getPartnerFee(_partnerTokenReward, owner);\\n    }\\n}\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_random_contract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_main_contract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"Draw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"RewardTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"howManyRewards\",\"type\":\"uint256\"}],\"name\":\"Rewarding\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"addressPlayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"botChoice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRandomWord\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"degree\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depo\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"getGameStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_partnerTokenReward\",\"type\":\"uint256\"}],\"name\":\"getPartnerReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"main_payable\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minDepo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"randomNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawTokens\",\"type\":\"uint256\"}],\"name\":\"rewardTokenUsers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roundWinner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract InterfaceMainLP\",\"name\":\"_main_contract\",\"type\":\"address\"}],\"name\":\"setMainContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IVRFv2Consumer\",\"name\":\"_random_contract\",\"type\":\"address\"}],\"name\":\"setRandomContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_userChoice\",\"type\":\"uint256\"}],\"name\":\"startRequestRandom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userBet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userChoice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "StoneGame", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000a4f89acbf9f1ff14ddddafe87fb766af8c5931760000000000000000000000007bf2b791d5e8e46e2506a0d2c4a74a3e8d243b54", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://decbb4264dd693ea65b68894089f737fd3f17b53e61ad2dab369fa85ef31651e"}