{"SourceCode": "/**\r\n\r\n                                                                                                    \r\n        ((((((((   .((((\"/(((       (((((,                 .((((/        /(((((((   *((((((((       \r\n     ,/(((((((((   .((((\"//(((/*    (((((((,             (((((((/     ./(((((((((   /((((((((((*    \r\n    ((((((                 ((((**       ((((((.       *((((((       .(((((                  /((((   \r\n    (((/((                 (((((*          .#####   ,##((           ,(/(((                 ./\"/\"/   \r\n    ((((((                 (((((/             *#####((              .((((/                 .////(   \r\n    ((((((                 (((((*             ,((####(              .(((((                 ./((/(   \r\n    ((((((                 (((((*             ,((((###/             ./((((                 .((((/   \r\n    ((((((                 (((/(*           \"//(((((/(#(/           .(###(                 .((((/   \r\n    *(((((                 (((((/          *####...*\"/###           .(####                 ./((((   \r\n    (((((/                 ###((/       (####.          (###(       ,((#((                  (((#(   \r\n     \"/((######(    ((#######/*,    (((##( .             . *#((((     .,(((((((#(   ,((##((((((*    \r\n        (######(    (#######(       (#(#(*                 .(((((        ((((((##   *(#((##((*      \r\n                                                                                                    \r\n\r\n    \ud835\ude83\ud835\ude91\ud835\ude92\ud835\ude9c \ud835\ude8d\ud835\ude8e\ud835\ude8c\ud835\ude8e\ud835\ude97\ud835\ude9d\ud835\ude9b\ud835\ude8a\ud835\ude95\ud835\ude92\ud835\udea3\ud835\ude8e\ud835\ude8d \ud835\ude8e\ud835\udea1\ud835\ude8c\ud835\ude91\ud835\ude8a\ud835\ude97\ud835\ude90\ud835\ude8e (\ud835\ude73\ud835\ude74\ud835\ude87) \ud835\ude99\ud835\ude9b\ud835\ude92\ud835\ude98\ud835\ude9b\ud835\ude92\ud835\ude9d\ud835\ude92\ud835\udea3\ud835\ude8e\ud835\ude9c \ud835\ude99\ud835\ude9b\ud835\ude92\ud835\ude9f\ud835\ude8a\ud835\ude8c\ud835\udea2 \ud835\ude8b\ud835\udea2 \ud835\ude8c\ud835\ude98\ud835\ude97\ud835\ude8c\ud835\ude8e\ud835\ude8a\ud835\ude95\ud835\ude92\ud835\ude97\ud835\ude90 \ud835\ude9c\ud835\udea0\ud835\ude8a\ud835\ude99\ud835\ude9c \ud835\ude98\ud835\ude9b \ud835\ude9d\ud835\ude9b\ud835\ude8a\ud835\ude97\ud835\ude9c\ud835\ude8a\ud835\ude8c\ud835\ude9d\ud835\ude92\ud835\ude98\ud835\ude97\ud835\ude9c, \r\n    \ud835\ude96\ud835\ude8a\ud835\ude94\ud835\ude92\ud835\ude97\ud835\ude90 \ud835\ude92\ud835\ude9d \ud835\ude8a \ud835\ude9c\ud835\ude8e\ud835\ude8c\ud835\ude9e\ud835\ude9b\ud835\ude8e \ud835\ude99\ud835\ude95\ud835\ude8a\ud835\ude9d\ud835\ude8f\ud835\ude98\ud835\ude9b\ud835\ude96 \ud835\ude8f\ud835\ude98\ud835\ude9b \ud835\ude8a\ud835\ude97\ud835\ude98\ud835\ude97\ud835\udea2\ud835\ude96\ud835\ude98\ud835\ude9e\ud835\ude9c \ud835\ude9d\ud835\ude9b\ud835\ude8a\ud835\ude8d\ud835\ude92\ud835\ude97\ud835\ude90. \r\n    \r\n    \ud835\ude70\ud835\ude8d\ud835\ude8d\ud835\ude92\ud835\ude9d\ud835\ude92\ud835\ude98\ud835\ude97\ud835\ude8a\ud835\ude95\ud835\ude95\ud835\udea2, \ud835\ude8f\ud835\ude8e\ud835\ude8e\ud835\ude9c \ud835\ude8c\ud835\ude98\ud835\ude95\ud835\ude95\ud835\ude8e\ud835\ude8c\ud835\ude9d\ud835\ude8e\ud835\ude8d \ud835\ude8b\ud835\udea2 \ud835\ude9d\ud835\ude91\ud835\ude8e \ud835\ude8e\ud835\udea1\ud835\ude8c\ud835\ude91\ud835\ude8a\ud835\ude97\ud835\ude90\ud835\ude8e \ud835\ude8a\ud835\ude9b\ud835\ude8e \ud835\ude8d\ud835\ude92\ud835\ude9c\ud835\ude9d\ud835\ude9b\ud835\ude92\ud835\ude8b\ud835\ude9e\ud835\ude9d\ud835\ude8e\ud835\ude8d \ud835\ude9d\ud835\ude98 \ud835\ude91\ud835\ude98\ud835\ude95\ud835\ude8d\ud835\ude8e\ud835\ude9b\ud835\ude9c \ud835\ude98\ud835\ude8f $0\ud835\udea10 \ud835\ude9d\ud835\ude98\ud835\ude94\ud835\ude8e\ud835\ude97\ud835\ude9c, \r\n    \ud835\ude92\ud835\ude97\ud835\ude8c\ud835\ude8e\ud835\ude97\ud835\ude9d\ud835\ude92\ud835\ude9f\ud835\ude92\ud835\udea3\ud835\ude92\ud835\ude97\ud835\ude90 \ud835\ude9e\ud835\ude9c\ud835\ude8e\ud835\ude9b\ud835\ude9c \ud835\ude9d\ud835\ude98 \ud835\ude91\ud835\ude98\ud835\ude95\ud835\ude8d \ud835\ude8a\ud835\ude97\ud835\ude8d \ud835\ude9e\ud835\ude9c\ud835\ude8e \ud835\ude9d\ud835\ude91\ud835\ude8e \ud835\ude99\ud835\ude95\ud835\ude8a\ud835\ude9d\ud835\ude8f\ud835\ude98\ud835\ude9b\ud835\ude96'\ud835\ude9c \ud835\ude97\ud835\ude8a\ud835\ude9d\ud835\ude92\ud835\ude9f\ud835\ude8e \ud835\ude9d\ud835\ude98\ud835\ude94\ud835\ude8e\ud835\ude97. \ud835\ude75\ud835\ude9e\ud835\ude9b\ud835\ude9d\ud835\ude91\ud835\ude8e\ud835\ude9b\ud835\ude96\ud835\ude98\ud835\ude9b\ud835\ude8e, \ud835\ude9e\ud835\ude9c\ud835\ude8e\ud835\ude9b\ud835\ude9c \ud835\ude91\ud835\ude98\ud835\ude95\ud835\ude8d\ud835\ude92\ud835\ude97\ud835\ude90 \r\n    \ud835\ude96\ud835\ude98\ud835\ude9b\ud835\ude8e \ud835\ude9d\ud835\ude91\ud835\ude8a\ud835\ude97 \ud835\udff7 \ud835\ude96\ud835\ude92\ud835\ude95\ud835\ude95\ud835\ude92\ud835\ude98\ud835\ude97 $0\ud835\udea10 \ud835\ude9d\ud835\ude98\ud835\ude94\ud835\ude8e\ud835\ude97\ud835\ude9c \ud835\ude8a\ud835\ude9b\ud835\ude8e \ud835\ude8e\ud835\ude95\ud835\ude92\ud835\ude90\ud835\ude92\ud835\ude8b\ud835\ude95\ud835\ude8e \ud835\ude8f\ud835\ude98\ud835\ude9b \ud835\ude8a \ud835\udffb0% \ud835\ude8d\ud835\ude92\ud835\ude9c\ud835\ude8c\ud835\ude98\ud835\ude9e\ud835\ude97\ud835\ude9d \ud835\ude98\ud835\ude97 \ud835\ude9d\ud835\ude9b\ud835\ude8a\ud835\ude97\ud835\ude9c\ud835\ude8a\ud835\ude8c\ud835\ude9d\ud835\ude92\ud835\ude98\ud835\ude97 \ud835\ude8f\ud835\ude8e\ud835\ude8e\ud835\ude9c, \r\n    \ud835\ude96\ud835\ude8a\ud835\ude94\ud835\ude92\ud835\ude97\ud835\ude90 \ud835\ude92\ud835\ude9d \ud835\ude8e\ud835\ude9f\ud835\ude8e\ud835\ude97 \ud835\ude96\ud835\ude98\ud835\ude9b\ud835\ude8e \ud835\ude8a\ud835\ude99\ud835\ude99\ud835\ude8e\ud835\ude8a\ud835\ude95\ud835\ude92\ud835\ude97\ud835\ude90 \ud835\ude8f\ud835\ude98\ud835\ude9b \ud835\ude8f\ud835\ude9b\ud835\ude8e\ud835\ude9a\ud835\ude9e\ud835\ude8e\ud835\ude97\ud835\ude9d \ud835\ude9d\ud835\ude9b\ud835\ude8a\ud835\ude8d\ud835\ude8e\ud835\ude9b\ud835\ude9c.\r\n\r\n*/\r\n\r\n\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n// File: interfaces/IOxODexFactory.sol\r\n\r\npragma solidity ^0.8.5;\r\n\r\ninterface IOxODexFactory {\r\n    function createPool(address token) external returns (address vault);\r\n    function allPoolsLength() external view returns (uint);\r\n    function getPool(address token) external view returns (address);\r\n    function setManager(address _manager) external;\r\n    function setTreasurerAddress(address _treasurerAddress) external;\r\n    function managerAddress() external view returns (address);\r\n    function treasurerAddress() external view returns (address);\r\n    function setFee(uint256 _fee) external;\r\n    function fee() external view returns (uint256);\r\n    function allPools(uint256) external view returns (address);\r\n    function getTokenFeeDiscountLimit() external view returns (uint256);\r\n    function token() external view returns (address);\r\n    function tokenFee() external view returns (uint256);\r\n}\r\n\r\n\r\n// File: interfaces/IOxODexPool.sol\r\n\r\npragma solidity ^0.8.5;\r\n\r\nlibrary Types {\r\n\r\n    enum WithdrawalType {\r\n        Direct,\r\n        Swap\r\n    }\r\n}\r\n\r\n\r\ninterface IOxODexPool {\r\n    function initialize(address _token, address _factory) external;\r\n    function withdraw(\r\n        address payable recipient, uint256 amountToken, uint256 ringIndex,\r\n        uint256 c0, uint256[2] memory keyImage, uint256[] memory s, Types.WithdrawalType wType\r\n    ) external;\r\n    function deposit(uint _amount, uint256[4] memory publicKey) external;\r\n    function getBalance() external view returns (uint256);\r\n    function getCurrentRingIndex(uint256 amountToken) external view\r\n        returns (uint256);\r\n    function getRingMaxParticipants() external pure\r\n        returns (uint256);\r\n    function getParticipant(uint packedData) external view returns (uint256);\r\n    function getWParticipant(uint packedData) external view returns (uint256);\r\n    function getRingPackedData(uint packedData) external view returns (uint256, uint256, uint256);\r\n    function getPublicKeys(uint256 amountToken, uint256 index) external view\r\n        returns (bytes32[2][5] memory);\r\n    function getPoolBalance() external view returns (uint256);\r\n    function swapTokenForToken(\r\n        address tokenOut, \r\n        address router,\r\n        bytes memory params, \r\n        uint256[4] memory publicKey, \r\n        uint256 amountToken, \r\n        uint256 ringIndex,\r\n        uint256 c0, \r\n        uint256[2] memory keyImage, \r\n        uint256[] memory s\r\n    ) external;\r\n    function getFeeForAmount(uint256 amount) external view returns(uint256);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n// File: .deps/npm/@openzeppelin/contracts/utils/Context.sol\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.5;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n// File: .deps/npm/@openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.5;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n// File: .deps/npm/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\npragma solidity ^0.8.5;\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n// File: .deps/npm/@openzeppelin/contracts/token/ERC20/ERC20.sol\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\r\n\r\npragma solidity ^0.8.5;\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` and `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``from``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `from` to `to`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\r\n            // decrementing then incrementing.\r\n            _balances[to] += amount;\r\n        }\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        unchecked {\r\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\r\n            _balances[account] += amount;\r\n        }\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\r\n            _totalSupply -= amount;\r\n        }\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\r\n     *\r\n     * Does not update the allowance amount in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Might emit an {Approval} event.\r\n     */\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\n\r\n\r\n\r\n\r\n// File: lib/AltBn128.sol\r\n\r\npragma solidity ^0.8.5;\r\n\r\n// https://github.com/ethereum/py_ecc/blob/master/py_ecc/bn128/bn128_curve.py\r\n\r\n\r\nlibrary AltBn128 {    \r\n    // https://github.com/ethereum/py_ecc/blob/master/py_ecc/bn128/bn128_curve.py\r\n    uint256 constant public G1x = uint256(0x01);\r\n    uint256 constant public G1y = uint256(0x02);\r\n\r\n    // Number of elements in the field (often called `q`)\r\n    // n = n(u) = 36u^4 + 36u^3 + 18u^2 + 6u + 1\r\n    uint256 constant public N = 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001;\r\n\r\n    // p = p(u) = 36u^4 + 36u^3 + 24u^2 + 6u + 1\r\n    // Field Order\r\n    uint256 constant public P = 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47;\r\n\r\n    // (p+1) / 4\r\n    uint256 constant public A = 0xc19139cb84c680a6e14116da060561765e05aa45a1c72a34f082305b61f3f52;\r\n    \r\n\r\n    /* ECC Functions */\r\n    function ecAdd(uint256[2] memory p0, uint256[2] memory p1) public view\r\n        returns (uint256[2] memory retP)\r\n    {\r\n        uint256[4] memory i = [p0[0], p0[1], p1[0], p1[1]];\r\n        \r\n        assembly {\r\n            // call ecadd precompile\r\n            // inputs are: x1, y1, x2, y2\r\n            if iszero(staticcall(not(0), 0x06, i, 0x80, retP, 0x40)) {\r\n                revert(0, 0)\r\n            }\r\n        }\r\n    }\r\n\r\n    function ecMul(uint256[2] memory p, uint256 s) public view\r\n        returns (uint256[2] memory retP)\r\n    {\r\n        // With a public key (x, y), this computes p = scalar * (x, y).\r\n        uint256[3] memory i = [p[0], p[1], s];\r\n        \r\n        assembly {\r\n            // call ecmul precompile\r\n            // inputs are: x, y, scalar\r\n            if iszero(staticcall(not(0), 0x07, i, 0x60, retP, 0x40)) {\r\n                revert(0, 0)\r\n            }\r\n        }\r\n    }\r\n\r\n    function ecMulG(uint256 s) public view\r\n        returns (uint256[2] memory retP)\r\n    {\r\n        return ecMul([G1x, G1y], s);\r\n    }\r\n\r\n    function powmod(uint256 base, uint256 e, uint256 m) public view\r\n        returns (uint256 o)\r\n    {\r\n        // returns pow(base, e) % m\r\n        assembly {\r\n            // define pointer\r\n            let p := mload(0x40)\r\n\r\n            // Store data assembly-favouring ways\r\n            mstore(p, 0x20)             // Length of Base\r\n            mstore(add(p, 0x20), 0x20)  // Length of Exponent\r\n            mstore(add(p, 0x40), 0x20)  // Length of Modulus\r\n            mstore(add(p, 0x60), base)  // Base\r\n            mstore(add(p, 0x80), e)     // Exponent\r\n            mstore(add(p, 0xa0), m)     // Modulus\r\n\r\n            // call modexp precompile! -- old school gas handling\r\n            let success := staticcall(sub(gas(), 2000), 0x05, p, 0xc0, p, 0x20)\r\n\r\n            // gas fiddling\r\n            switch success case 0 {\r\n                revert(0, 0)\r\n            }\r\n\r\n            // data\r\n            o := mload(p)\r\n        }\r\n    }\r\n\r\n    // Keep everything contained within this lib\r\n    function addmodn(uint256 x, uint256 n) public pure\r\n        returns (uint256)\r\n    {\r\n        return addmod(x, n, N);\r\n    }\r\n\r\n    function modn(uint256 x) public pure\r\n        returns (uint256)\r\n    {\r\n        return x % N;\r\n    }\r\n\r\n    /*\r\n       Checks if the points x, y exists on alt_bn_128 curve\r\n    */\r\n    function onCurve(uint256 x, uint256 y) public pure\r\n        returns(bool)\r\n    {\r\n        uint256 beta = mulmod(x, x, P);\r\n        beta = mulmod(beta, x, P);\r\n        beta = addmod(beta, 3, P);\r\n\r\n        return onCurveBeta(beta, y);\r\n    }\r\n\r\n    function onCurveBeta(uint256 beta, uint256 y) public pure\r\n        returns(bool)\r\n    {\r\n        return beta == mulmod(y, y, P);\r\n    }\r\n\r\n    /*\r\n    * Calculates point y value given x\r\n    */\r\n    function evalCurve(uint256 x) public view\r\n        returns (uint256, uint256)\r\n    {\r\n        uint256 beta = mulmod(x, x, P);\r\n        beta = mulmod(beta, x, P);\r\n        beta = addmod(beta, 3, P);\r\n\r\n        uint256 y = powmod(beta, A, P);\r\n\r\n        // require(beta == mulmod(y, y, P), \"Invalid x for evalCurve\");\r\n        return (beta, y);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n// File: lib/LSAG.sol\r\n\r\npragma solidity ^0.8.5;\r\n\r\n/*\r\nLinkable Spontaneous Anonymous Groups\r\nhttps://eprint.iacr.org/2004/027.pdf\r\n*/\r\n\r\nlibrary LSAG {\r\n    // abi.encodePacked is the \"concat\" or \"serialization\"\r\n    // of all supplied arguments into one long bytes value\r\n    // i.e. abi.encodePacked :: [a] -> bytes\r\n\r\n    /**\r\n    * Converts an integer to an elliptic curve point\r\n    */\r\n    function intToPoint(uint256 _x) public view\r\n         returns (uint256[2] memory)\r\n    {\r\n        uint256 x = _x;\r\n        uint256 y;\r\n        uint256 beta;\r\n\r\n        while (true) {\r\n            (beta, y) = AltBn128.evalCurve(x);\r\n\r\n            if (AltBn128.onCurveBeta(beta, y)) {\r\n                return [x, y];\r\n            }\r\n\r\n            x = AltBn128.addmodn(x, 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Returns an integer representation of the hash\r\n    * of the input\r\n    */\r\n    function H1(bytes memory b) public pure\r\n        returns (uint256)\r\n    {\r\n        return AltBn128.modn(uint256(keccak256(b)));\r\n    }\r\n\r\n    /**\r\n    * Returns elliptic curve point of the integer representation\r\n    * of the hash of the input\r\n    */\r\n    function H2(bytes memory b) public view\r\n        returns (uint256[2] memory)\r\n    {\r\n        return intToPoint(H1(b));\r\n    }\r\n\r\n    /**\r\n    * Helper function to calculate Z1\r\n    * Avoids stack too deep problem\r\n    */\r\n    function ringCalcZ1(\r\n        uint256[2] memory pubKey,\r\n        uint256 c,\r\n        uint256 s\r\n    ) public view\r\n        returns (uint256[2] memory)\r\n    {\r\n        return AltBn128.ecAdd(\r\n            AltBn128.ecMulG(s),\r\n            AltBn128.ecMul(pubKey, c)\r\n        );\r\n    }\r\n\r\n    /**\r\n    * Helper function to calculate Z2\r\n    * Avoids stack too deep problem\r\n    */\r\n    function ringCalcZ2(\r\n        uint256[2] memory keyImage,\r\n        uint256[2] memory h,\r\n        uint256 s,\r\n        uint256 c\r\n    ) public view\r\n        returns (uint256[2] memory)\r\n    {\r\n        return AltBn128.ecAdd(\r\n            AltBn128.ecMul(h, s),\r\n            AltBn128.ecMul(keyImage, c)\r\n        );\r\n    }\r\n\r\n\r\n    /**\r\n    * Verifies the ring signature\r\n    * Section 4.2 of the paper https://eprint.iacr.org/2004/027.pdf\r\n    */\r\n    function verify(\r\n        bytes memory message,\r\n        uint256 c0,\r\n        uint256[2] memory keyImage,\r\n        uint256[] memory s,\r\n        uint256[2][] memory publicKeys\r\n    ) public view\r\n        returns (bool)\r\n    {\r\n        require(publicKeys.length >= 2, \"Signature size too small\");\r\n        require(publicKeys.length == s.length, \"Signature sizes do not match!\");\r\n\r\n        uint256 c = c0;\r\n        uint256 i = 0;\r\n\r\n        // Step 1\r\n        // Extract out public key bytes\r\n        bytes memory hBytes = \"\";\r\n\r\n        for (i = 0; i < publicKeys.length; i++) {\r\n            hBytes = abi.encodePacked(\r\n                hBytes,\r\n                publicKeys[i]\r\n            );\r\n        }\r\n\r\n        uint256[2] memory h = H2(hBytes);\r\n\r\n        // Step 2\r\n        uint256[2] memory z_1;\r\n        uint256[2] memory z_2;\r\n\r\n\r\n        for (i = 0; i < publicKeys.length; i++) {\r\n            z_1 = ringCalcZ1(publicKeys[i], c, s[i]);\r\n            z_2 = ringCalcZ2(keyImage, h, s[i], c);\r\n\r\n            if (i != publicKeys.length - 1) {\r\n                c = H1(\r\n                    abi.encodePacked(\r\n                        hBytes,\r\n                        keyImage,\r\n                        message,\r\n                        z_1,\r\n                        z_2\r\n                    )\r\n                );\r\n            }\r\n        }\r\n\r\n        return c0 == H1(\r\n            abi.encodePacked(\r\n                hBytes,\r\n                keyImage,\r\n                message,\r\n                z_1,\r\n                z_2\r\n            )\r\n        );\r\n    }\r\n}\r\n\r\n\r\n// File: OxODexPool.sol\r\n\r\npragma solidity ^0.8.5;\r\n\r\ncontract OxODexPool {\r\n\r\n    // =============================================================\r\n    //                           ERRORS\r\n    // =============================================================\r\n    \r\n    error AlreadyInitialized();\r\n    error NotInitialized();\r\n\r\n    // =============================================================\r\n    //                           EVENTS\r\n    // =============================================================\r\n    \r\n    event Deposit(address, uint256 tokenAmount, uint256 ringIndex);\r\n    event Withdraw(address, uint256 tokenAmount, uint256 ringIndex);\r\n    event Swap(address indexed tokenOut, uint256 tokenAmountIn, uint256 tokenAmountOut);\r\n\r\n    // =============================================================\r\n    //                           CONSTANTS\r\n    // =============================================================\r\n\r\n    /// @notice Maximum number of participants in a ring It can be changed to a higher value, \r\n    /// but it will increase the gas cost.\r\n    uint256 constant MAX_RING_PARTICIPANT = 2;\r\n\r\n    /// @notice Minimum number of blocks that needs to be mined before user can forcefully close the ring\r\n    /// NOTE: This is only for testing purposes, in production\r\n    /// this should be set to a higher value\r\n    uint256 constant CLOSE_RING_BLOCK_THRESHOLD = 10;\r\n\r\n    /// The number of participants in the ring\r\n    uint256 constant _BITPOS_NUMBER_PARTICIPANTS = 32;\r\n\r\n    /// The number of withdrawals in the ring\r\n    uint256 constant _BITPOS_NUMBER_WITHDRAWALS = 48;\r\n\r\n    /// The participant value would use 16 bits\r\n    uint256 constant _BITWIDTH_PARTICIPANTS = 16;\r\n\r\n    /// The Block value would use 16 bits\r\n    uint256 constant _BITWIDTH_BLOCK_NUM = 32;\r\n\r\n    /// Bitmask for `numberOfParticipants`\r\n    uint256 constant _BITMASK_PARTICIPANTS = (1 << _BITWIDTH_PARTICIPANTS) -1;\r\n\r\n    /// Bitmask for `blockNumber`\r\n    uint256 constant _BITMASK_BLOCK_NUM = (1 << _BITWIDTH_BLOCK_NUM) -1;\r\n\r\n\r\n    // =============================================================\r\n    //                           STORAGE\r\n    // =============================================================\r\n\r\n    struct Ring {\r\n        /// The total amount deposited in the ring\r\n        uint256 amountDeposited;\r\n\r\n        /// Bits Layout:\r\n        /// - [0..32]    `initiatedBlockNumber` \r\n        /// - [32..48]   `numberOfParticipants`\r\n        /// - [48..64]   `numberOfWithdrawnParticipants`\r\n        uint256 packedRingData; \r\n\r\n        /// The public keys of the participants\r\n        mapping (uint256 => uint256[2]) publicKeys;\r\n\r\n        /// The key images from successfully withdrawn participants\r\n        /// NOTE: This is used to prevent double spending\r\n        mapping (uint256 => uint256[2]) keyImages;\r\n        bytes32 ringHash;\r\n    }\r\n\r\n    address public token;\r\n    uint256 public tokenDecimals;\r\n    address public factory;\r\n\r\n    /// tokenAmount => ringIndex\r\n    mapping(uint256 => uint256) public ringsNumber;\r\n\r\n    /// tokenAmount => ringIndex => Ring\r\n    mapping (uint256 => mapping(uint256 => Ring)) public rings;\r\n\r\n    /// @notice Initialize the vault to use and accept `token`\r\n    /// @param _token The address of the token to use\r\n    function initialize(address _token, address _factory) external {\r\n        require(_token != address(0), \"ZERO_ADDRESS\");\r\n        require(_factory != address(0), \"ZERO_ADDRESS\");\r\n\r\n        if (token != address(0)) revert AlreadyInitialized();\r\n        factory = _factory;\r\n        token = _token;\r\n        tokenDecimals = ERC20(_token).decimals();\r\n    }\r\n\r\n    /// @notice Deposit `amount` of `token` into the vault\r\n    /// @param _amount The amount of `token` to deposit\r\n    /// @param _publicKey The public key of the participant\r\n    function deposit(uint _amount, uint256[4] memory _publicKey) external {\r\n        require(_amount > 0, \"AMOUNT_MUST_BE_GREATER_THAN_ZERO\");\r\n\r\n        IOxODexFactory factoryContract = IOxODexFactory(factory);\r\n\r\n        if(ERC20(factoryContract.token()).balanceOf(msg.sender) < factoryContract.getTokenFeeDiscountLimit()) {\r\n            uint256 fee = getFeeForAmount(_amount);\r\n            ERC20(token).transferFrom(msg.sender, address(this), _amount+fee);\r\n\r\n            /// Transfer the fee to the treasurer\r\n            ERC20(token).transfer(factoryContract.treasurerAddress(), fee);   \r\n        }else{\r\n            uint256 fee = getDiscountFeeForAmount(_amount);\r\n            ERC20(token).transferFrom(msg.sender, address(this), _amount+fee);\r\n\r\n            if(fee > 0) {\r\n                /// Transfer the fee to the treasurer\r\n                ERC20(token).transfer(factoryContract.treasurerAddress(), fee);  \r\n            }\r\n        }\r\n        \r\n        /// Round down to the nearest even number\r\n        _amount = uint256(int256(_amount) & ~1);\r\n        uint256 amountTokenRecieved = _amount / 2;\r\n\r\n        if (!AltBn128.onCurve(uint256(_publicKey[0]), uint256(_publicKey[1]))) {\r\n            revert(\"PK_NOT_ON_CURVE\");\r\n        }\r\n\r\n        /// Gets the current ring for the amounts\r\n        uint256 ringIndex = ringsNumber[amountTokenRecieved];\r\n        Ring storage ring = rings[amountTokenRecieved][ringIndex];\r\n\r\n        (uint wParticipants,\r\n        uint participants, uint blockNum) = getRingPackedData(ring.packedRingData);\r\n\r\n        /// Making sure no duplicate public keys are added\r\n        for (uint256 i = 0; i < participants;) {\r\n            if (ring.publicKeys[i][0] == _publicKey[0] &&\r\n                ring.publicKeys[i][1] == _publicKey[1]) {\r\n                revert(\"PK_ALREADY_IN_RING\");\r\n            }\r\n\r\n            if (ring.publicKeys[i][0] == _publicKey[2] &&\r\n                ring.publicKeys[i][1] == _publicKey[3]) {\r\n                revert(\"PK_ALREADY_IN_RING\");\r\n            }\r\n\r\n            unchecked {\r\n                i++;\r\n            }\r\n        }\r\n\r\n        if (participants == 0) {\r\n            blockNum = block.number - 1;\r\n        }\r\n\r\n        ring.publicKeys[participants] = [_publicKey[0], _publicKey[1]];\r\n        ring.publicKeys[participants + 1] = [_publicKey[2], _publicKey[3]];\r\n        ring.amountDeposited += _amount;\r\n        unchecked {\r\n            participants += 2;\r\n        }\r\n\r\n        uint packedData = (wParticipants << _BITWIDTH_PARTICIPANTS) | participants;\r\n        packedData = (packedData << _BITWIDTH_BLOCK_NUM) | blockNum;\r\n        ring.packedRingData = packedData;\r\n\r\n        /// If the ring is full, start a new ring\r\n        if (participants >= MAX_RING_PARTICIPANT) {\r\n            ring.ringHash = hashRing(amountTokenRecieved, ringIndex);\r\n            \r\n            /// Add new Ring pool\r\n            ringsNumber[amountTokenRecieved] += 1;\r\n        }\r\n\r\n        emit Deposit(msg.sender, amountTokenRecieved * 2, ringIndex);\r\n    }\r\n\r\n\r\n    /// @notice Withdraw `amount` of `token` from the vault\r\n    /// @param recipient The address to send the withdrawn tokens to\r\n    /// @param amountToken The amount of `token` to withdraw\r\n    /// @param ringIndex The index of the ring to withdraw from\r\n    /// @param keyImage The key image of the participant\r\n    /// @param c0 signature\r\n    /// @param s signature\r\n    function withdraw(\r\n        address payable recipient, uint256 amountToken, uint256 ringIndex,\r\n        uint256 c0, uint256[2] memory keyImage, uint256[] memory s, Types.WithdrawalType wType\r\n    ) public\r\n    {\r\n        uint256 _amount = uint256(int256(amountToken) & ~1);\r\n        amountToken = _amount / 2;\r\n\r\n        Ring storage ring = rings[amountToken][ringIndex];\r\n\r\n        if(amountToken > ring.amountDeposited) {\r\n            revert(\"AMOUNT_EXCEEDS_DEPOSITED\");\r\n        }\r\n\r\n        (uint wParticipants,\r\n        uint participants,) = getRingPackedData(ring.packedRingData);\r\n\r\n        if (recipient == address(0)) {\r\n            revert(\"ZERO_ADDRESS\");\r\n        }\r\n        \r\n        if (wParticipants >= MAX_RING_PARTICIPANT) {\r\n            revert(\"ALL_FUNDS_WITHDRAWN\");\r\n        }\r\n\r\n        if (ring.ringHash == bytes32(0x00)) {\r\n            revert(\"RING_NOT_CLOSED\");\r\n        }\r\n\r\n        uint256[2][] memory publicKeys = new uint256[2][](MAX_RING_PARTICIPANT);\r\n\r\n        for (uint256 i = 0; i < MAX_RING_PARTICIPANT;) {\r\n            publicKeys[i] = ring.publicKeys[i];\r\n            unchecked {\r\n                i++;\r\n            }\r\n        }\r\n    \r\n        /// Attempts to verify ring signature\r\n        bool signatureVerified = LSAG.verify(\r\n            abi.encodePacked(ring.ringHash, recipient), // Convert to bytes\r\n            c0,\r\n            keyImage,\r\n            s,\r\n            publicKeys\r\n        );\r\n\r\n        if (!signatureVerified) {\r\n            revert(\"INVALID_SIGNATURE\");\r\n        }\r\n\r\n        /// Confirm key image is not already used (no double spends)\r\n        for (uint i = 0; i < wParticipants;) {\r\n            if (ring.keyImages[i][0] == keyImage[0] &&\r\n                ring.keyImages[i][1] == keyImage[1]) {\r\n                revert(\"USED_SIGNATURE\");\r\n            }\r\n\r\n            unchecked {\r\n                i++;\r\n            }\r\n        }    \r\n\r\n        ring.keyImages[wParticipants] = keyImage;\r\n        unchecked {\r\n            wParticipants++;\r\n        }\r\n\r\n        uint packedData = (wParticipants << _BITWIDTH_PARTICIPANTS) | participants;\r\n        packedData  = (packedData << _BITWIDTH_BLOCK_NUM) | 0; // blockNum set to zero\r\n        ring.packedRingData = packedData;  \r\n\r\n        // Transfer tokens to recipient\r\n        // If recipient is the contract, don't transfer. Used in swap\r\n        if(wType == Types.WithdrawalType.Direct){\r\n            // Transfer amount to recipient\r\n            ERC20(token).transfer(\r\n                recipient, \r\n                _amount\r\n            );\r\n        }\r\n\r\n        emit Withdraw(recipient, _amount, ringIndex);\r\n    }\r\n\r\n    /// @notice Calculate the fee for a given amount\r\n    /// @param amount The amount to calculate the fee for\r\n    function getFeeForAmount(uint256 amount) public view returns(uint256){\r\n        return (amount * IOxODexFactory(factory).fee()) / 10_000;\r\n    }\r\n    \r\n    /// @notice Get the fee for Discount holders\r\n    /// @param amount The amount to calculate the fee for\r\n    function getDiscountFeeForAmount(uint256 amount) public view returns(uint256){\r\n        return (amount * IOxODexFactory(factory).tokenFee()) / 10_000;\r\n    }\r\n\r\n    /// @notice Withdraw `amount` of `token` from the vault\r\n    /// @param recipient The address to send the withdrawn tokens to\r\n    /// @param amountToken The amount of `token` to withdraw\r\n    /// @param ringIndex The index of the ring to withdraw from\r\n    /// @param keyImage The key image of the participant\r\n    /// @param c0 signature\r\n    /// @param s signature\r\n    function swapOnWithdrawal(\r\n        address tokenOut,\r\n        address router,\r\n        bytes memory params, \r\n        address payable recipient, \r\n        uint256 amountToken, \r\n        uint256 ringIndex,\r\n        uint256 c0,\r\n        uint256[2] memory keyImage, \r\n        uint256[] memory s\r\n    ) external {\r\n        \r\n        uint256 poolTokenBalance = IERC20(tokenOut).balanceOf(address(this));\r\n\r\n        withdraw(recipient, amountToken, ringIndex, c0, keyImage, s, Types.WithdrawalType.Swap);\r\n        IERC20(token).approve(router, amountToken);\r\n\r\n        (bool success, bytes memory data) = address(router).call(params);\r\n\r\n        if (success == false) {\r\n            assembly {\r\n                // Copy the returned error string to memory\r\n                // and revert with it.\r\n                revert(add(data,32),mload(data))\r\n            }\r\n        }\r\n\r\n        uint256 amountOut = IERC20(tokenOut).balanceOf(address(this)) - poolTokenBalance;\r\n\r\n        IERC20(tokenOut).transfer(recipient, amountOut);\r\n\r\n        emit Swap(tokenOut, amountToken, amountOut);\r\n    }\r\n\r\n    /// @notice Generates a hash of the ring\r\n    /// @param _amountToken The amount of `token` in the ring\r\n    /// @param _ringIndex The index of the ring\r\n    function hashRing(uint256 _amountToken, uint256 _ringIndex) internal view\r\n        returns (bytes32)\r\n    {\r\n        uint256[2][MAX_RING_PARTICIPANT] memory publicKeys;\r\n        uint256 receivedToken = _amountToken;\r\n\r\n        Ring storage ring = rings[receivedToken][_ringIndex];\r\n\r\n        for (uint8 i = 0; i < MAX_RING_PARTICIPANT;) {\r\n            publicKeys[i] = ring.publicKeys[i];\r\n\r\n            unchecked {\r\n                i++;\r\n            }\r\n        }\r\n\r\n        (uint participants,, uint blockNum) = getRingPackedData(ring.packedRingData);\r\n\r\n        bytes memory b = abi.encodePacked(\r\n            blockhash(block.number - 1),\r\n            blockNum,\r\n            ring.amountDeposited,\r\n            participants,\r\n            publicKeys\r\n        );\r\n\r\n        return keccak256(b);\r\n    }\r\n\r\n    /// @notice Gets the hash of the ring\r\n    /// @param _amountToken The amount of `token` in the ring\r\n    /// @param _ringIndex The index of the ring\r\n    function getRingHash(uint256 _amountToken, uint256 _ringIndex) public view\r\n        returns (bytes32)\r\n    {\r\n        uint256 receivedToken = _amountToken;\r\n        return rings[receivedToken][_ringIndex].ringHash;\r\n    }\r\n\r\n    /// @notice Gets the total amount of `token` in the ring\r\n    function getPoolBalance() external view returns (uint256) {\r\n        return ERC20(token).balanceOf(address(this));\r\n    }\r\n\r\n    // =============================================================\r\n    //                           UTILITIES\r\n    // =============================================================\r\n\r\n\r\n    /// @notice Gets the public keys of the ring\r\n    /// @param amountToken The amount of `token` in the ring\r\n    /// @param ringIndex The index of the ring\r\n    function getPublicKeys(uint256 amountToken, uint256 ringIndex) public view\r\n        returns (bytes32[2][MAX_RING_PARTICIPANT] memory)\r\n    {\r\n        bytes32[2][MAX_RING_PARTICIPANT] memory publicKeys;\r\n\r\n        for (uint i = 0; i < MAX_RING_PARTICIPANT; i++) {\r\n            publicKeys[i][0] = bytes32(rings[amountToken][ringIndex].publicKeys[i][0]);\r\n            publicKeys[i][1] = bytes32(rings[amountToken][ringIndex].publicKeys[i][1]);\r\n        }\r\n\r\n        return publicKeys;\r\n    }\r\n\r\n    /// @notice Gets the unpacked, packed ring data\r\n    /// @param packedData The packed ring data\r\n    function getRingPackedData(uint packedData) public pure returns (uint256, uint256, uint256){\r\n        uint256 p = packedData >> _BITWIDTH_BLOCK_NUM;\r\n        \r\n        return (\r\n            p >> _BITWIDTH_PARTICIPANTS,\r\n            p & _BITMASK_PARTICIPANTS,\r\n            packedData & _BITMASK_BLOCK_NUM\r\n        );\r\n    }\r\n\r\n    /// @notice Gets the number of participants that have withdrawn from the ring\r\n    /// @param packedData The packed ring data\r\n    function getWParticipant(uint256 packedData) public pure returns (uint256){\r\n        return (packedData >> _BITWIDTH_BLOCK_NUM) >> _BITWIDTH_PARTICIPANTS;\r\n    }\r\n\r\n    /// @notice Gets the number of participants in the ring\r\n    /// @param packedData The packed ring data\r\n    function getParticipant(uint256 packedData) public pure returns (uint256){\r\n        uint256 p = packedData >> _BITWIDTH_BLOCK_NUM;\r\n        \r\n        return p & _BITMASK_PARTICIPANTS;\r\n    }\r\n\r\n    /// @notice Gets the maximum number of participants in any ring\r\n    function getRingMaxParticipants() external pure\r\n        returns (uint256)\r\n    {\r\n        return MAX_RING_PARTICIPANT;\r\n    }\r\n\r\n    /// @notice Gets the lates ring index for `amountToken`\r\n    /// @param amountToken The amount of `token` in the ring\r\n    function getCurrentRingIndex(uint256 amountToken) external view\r\n        returns (uint256)\r\n    {\r\n        return ringsNumber[amountToken];\r\n    }\r\n}\r\n\r\n\r\n\r\n// File: OxODexFactory.sol\r\n\r\npragma solidity ^0.8.5;\r\n\r\ncontract OxODexFactory {\r\n\r\n    enum FeeType {\r\n        TOKEN,\r\n        POOL\r\n    } \r\n\r\n    /// Errors\r\n    error PoolExists();\r\n    error ZeroAddress();\r\n    error Forbidden();\r\n\r\n    /// Events\r\n    event PoolCreated(address indexed token, address poolAddress);\r\n    event ManagerChanged(address indexed newManager);\r\n    event FeeChanged(uint256 newFee, FeeType feeType); \r\n    event TokenChanged(address indexed newToken);\r\n    event TreasurerChanged(address indexed newTreasurer);\r\n\r\n    address[] public allPools;\r\n    address public managerAddress = 0x0000BA9FF5c97f33Bd62c216A56b3D02aE6Ac4Bb;\r\n    address public treasurerAddress = 0xdf5888F30a4A99BD23913ae002D5aF4DBf0502B4;\r\n    address public token = 0x5a3e6A77ba2f983eC0d371ea3B475F8Bc0811AD5;\r\n    uint256 public tokenFeeDiscountPercent = 100; // 0.1% of total supply  \r\n\r\n    uint256 public fee = 90; // 0.9 fee\r\n    uint256 public tokenFee = 45; // 0.45% fee\r\n    \r\n    /// token => pool\r\n    mapping(address => address) public pools;\r\n    \r\n    /// @notice Creates a new pool for the given token\r\n    /// @param _token The token to create the pool for\r\n    /// @return vault The address of the new pool\r\n    function createPool(address _token) external onlyManager returns (address vault) {\r\n        if (_token == address(0)) revert ZeroAddress();\r\n        if(pools[_token] != address(0)) revert PoolExists();\r\n\r\n        bytes memory bytecode = type(OxODexPool).creationCode;\r\n        bytes32 salt = keccak256(abi.encodePacked(_token));\r\n\r\n        assembly {\r\n            vault := create2(0, add(bytecode, 32), mload(bytecode), salt)\r\n        }\r\n\r\n        IOxODexPool(vault).initialize(_token, address(this));\r\n\r\n        pools[_token] = vault;\r\n        allPools.push(vault);\r\n\r\n        emit PoolCreated(_token, vault);\r\n    }\r\n\r\n    /// @notice Returns the pool address for the given token\r\n    /// @param _token The token to get the pool for\r\n    /// @return The address of the pool\r\n    function getPool(address _token) external view returns (address) {\r\n        return pools[_token];\r\n    }\r\n\r\n    /// @notice Returns the address of the pool for the given token\r\n    /// @return The length of all pools\r\n    function allPoolsLength() external view returns (uint) {\r\n        return allPools.length;\r\n    }\r\n\r\n    modifier onlyManager() {\r\n        if (msg.sender != managerAddress) revert Forbidden();\r\n        _;\r\n    }\r\n\r\n    modifier limitFee(uint256 _fee) {\r\n        require(_fee <= 300, \"Fee too high\");\r\n        _;\r\n    }\r\n\r\n    /// @notice Sets the manager address\r\n    /// @param _managerAddress The new manager address\r\n    function setManager(address _managerAddress) external onlyManager {\r\n        if(_managerAddress == address(0)) revert ZeroAddress();\r\n        managerAddress = _managerAddress;\r\n\r\n        emit ManagerChanged(_managerAddress);\r\n    }\r\n\r\n    /// @notice Sets the treasurer address\r\n    /// @param _treasurerAddress The new treasurer address\r\n    function setTreasurerAddress(address _treasurerAddress) external onlyManager {\r\n        if(_treasurerAddress == address(0)) revert ZeroAddress();\r\n        treasurerAddress = _treasurerAddress;\r\n\r\n        emit TreasurerChanged(_treasurerAddress);\r\n    }\r\n\r\n    /// @notice Sets the token address\r\n    /// @param _token The new token address\r\n    function setToken(address _token) external onlyManager {\r\n        if(_token == address(0)) revert ZeroAddress();\r\n        token = _token;\r\n        \r\n        emit TokenChanged(_token);\r\n    }\r\n\r\n    /// @notice Set the percentage threshold for fee free transactions\r\n    /// @param _value the new percentage threshold\r\n    function setTokenFeeDiscountPercent(uint256 _value) external onlyManager {\r\n        tokenFeeDiscountPercent = _value;\r\n    }\r\n\r\n    /// @notice Set token fee\r\n    /// @param _fee the new percentage threshold\r\n    function setTokenFee(uint256 _fee) external onlyManager limitFee(_fee){\r\n        tokenFee = _fee;\r\n\r\n        emit FeeChanged(_fee, FeeType.TOKEN);\r\n    }\r\n\r\n    /// @notice Sets the fee\r\n    /// @param _fee The new fee\r\n    function setFee(uint256 _fee) external onlyManager limitFee(_fee){\r\n        fee = _fee;\r\n\r\n        emit FeeChanged(_fee, FeeType.POOL);\r\n    }\r\n\r\n    function getTokenFeeDiscountLimit() external view returns (uint256) {\r\n        return (ERC20(token).totalSupply() * tokenFeeDiscountPercent) / 100_000;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"name\":\"AlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitialized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ringIndex\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmountOut\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ringIndex\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[4]\",\"name\":\"_publicKey\",\"type\":\"uint256[4]\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"}],\"name\":\"getCurrentRingIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getDiscountFeeForAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getFeeForAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"packedData\",\"type\":\"uint256\"}],\"name\":\"getParticipant\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ringIndex\",\"type\":\"uint256\"}],\"name\":\"getPublicKeys\",\"outputs\":[{\"internalType\":\"bytes32[2][2]\",\"name\":\"\",\"type\":\"bytes32[2][2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ringIndex\",\"type\":\"uint256\"}],\"name\":\"getRingHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRingMaxParticipants\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"packedData\",\"type\":\"uint256\"}],\"name\":\"getRingPackedData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"packedData\",\"type\":\"uint256\"}],\"name\":\"getWParticipant\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountDeposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"packedRingData\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"ringHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ringsNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ringIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"c0\",\"type\":\"uint256\"},{\"internalType\":\"uint256[2]\",\"name\":\"keyImage\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[]\",\"name\":\"s\",\"type\":\"uint256[]\"}],\"name\":\"swapOnWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ringIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"c0\",\"type\":\"uint256\"},{\"internalType\":\"uint256[2]\",\"name\":\"keyImage\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[]\",\"name\":\"s\",\"type\":\"uint256[]\"},{\"internalType\":\"enum Types.WithdrawalType\",\"name\":\"wType\",\"type\":\"uint8\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "OxODexPool", "CompilerVersion": "v0.8.5+commit.a4f2e591", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "AltBn128:558fccffa1bb9e436a43db75d1074dceb0929007;LSAG:347af0c868c13ce6ec379d688b1fafc14021d779", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://07deed0873daf9b7c61c362047541e135f0e0116403963a6bc3eafd05ad9113e"}