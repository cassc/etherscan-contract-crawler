{"SourceCode": "// Sources flattened with hardhat v2.4.1 https://hardhat.org\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.2.0\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol@v4.2.0\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v4.2.0\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/ERC20.sol@v4.2.0\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[sender] = senderBalance - amount;\r\n        }\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n\r\n        _afterTokenTransfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/proxy/Clones.sol@v4.2.0\r\n\r\n/**\r\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\r\n * deploying minimal proxy contracts, also known as \"clones\".\r\n *\r\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\r\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\r\n *\r\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\r\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\r\n * deterministic method.\r\n *\r\n * _Available since v3.4._\r\n */\r\nlibrary Clones {\r\n    /**\r\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\r\n     *\r\n     * This function uses the create opcode, which should never revert.\r\n     */\r\n    function clone(address implementation) internal returns (address instance) {\r\n        assembly {\r\n            let ptr := mload(0x40)\r\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\r\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\r\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\r\n            instance := create(0, ptr, 0x37)\r\n        }\r\n        require(instance != address(0), \"ERC1167: create failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\r\n     *\r\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\r\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\r\n     * the clones cannot be deployed twice at the same address.\r\n     */\r\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\r\n        assembly {\r\n            let ptr := mload(0x40)\r\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\r\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\r\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\r\n            instance := create2(0, ptr, 0x37, salt)\r\n        }\r\n        require(instance != address(0), \"ERC1167: create2 failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\r\n     */\r\n    function predictDeterministicAddress(\r\n        address implementation,\r\n        bytes32 salt,\r\n        address deployer\r\n    ) internal pure returns (address predicted) {\r\n        assembly {\r\n            let ptr := mload(0x40)\r\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\r\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\r\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\r\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\r\n            mstore(add(ptr, 0x4c), salt)\r\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\r\n            predicted := keccak256(add(ptr, 0x37), 0x55)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\r\n     */\r\n    function predictDeterministicAddress(address implementation, bytes32 salt)\r\n        internal\r\n        view\r\n        returns (address predicted)\r\n    {\r\n        return predictDeterministicAddress(implementation, salt, address(this));\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/access/Ownable.sol@v4.2.0\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/interfaces/IFarmFactory.sol\r\n\r\n\r\ninterface IFarmFactory {\r\n    /**\r\n     * Assume claimFee uses msg.sender, and returns the amount of WETH sent to the caller\r\n     */\r\n    function getFarm(address depositToken, address rewardToken, uint version) external view returns (address farm);\r\n    function getFarmIndex(address depositToken, address rewardToken) external view returns (uint fID);\r\n\r\n    function whitelist(address _address) external view returns (bool);\r\n    function governance() external view returns (address);\r\n    function incinerator() external view returns (address);\r\n    function harvestFee() external view returns (uint);\r\n    function gfi() external view returns (address);\r\n    function feeManager() external view returns (address);\r\n    function allFarms(uint fid) external view returns (address); \r\n    function createFarm(address depositToken, address rewardToken, uint amount, uint blockReward, uint start, uint end, uint bonusEnd, uint bonus) external;\r\n    function farmVersion(address deposit, address reward) external view returns(uint);\r\n}\r\n\r\n\r\n// File contracts/interfaces/IFarmV2.sol\r\n\r\nstruct UserInfo {\r\n        uint256 amount;     // LP tokens provided.\r\n        uint256 rewardDebt; // Reward debt.\r\n}\r\n\r\nstruct FarmInfo {\r\n    IERC20 lpToken;\r\n    IERC20 rewardToken;\r\n    uint startBlock;\r\n    uint blockReward;\r\n    uint bonusEndBlock;\r\n    uint bonus;\r\n    uint endBlock;\r\n    uint lastRewardBlock;  // Last block number that reward distribution occurs.\r\n    uint accRewardPerShare; // rewards per share, times 1e12\r\n    uint farmableSupply; // total amount of tokens farmable\r\n    uint numFarmers; // total amount of farmers\r\n}\r\n\r\ninterface IFarmV2 {\r\n\r\n    function initialize() external;\r\n    function withdrawRewards(uint256 amount) external;\r\n    function FarmFactory() external view returns(address);\r\n    function init(address depositToken, address rewardToken, uint amount, uint blockReward, uint start, uint end, uint bonusEnd, uint bonus) external; \r\n    function pendingReward(address _user) external view returns (uint256);\r\n\r\n    function userInfo(address user) external view returns (UserInfo memory);\r\n    function farmInfo() external view returns (FarmInfo memory);\r\n    function deposit(uint256 _amount) external;\r\n    function withdraw(uint256 _amount) external;\r\n    \r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/proxy/utils/Initializable.sol@v4.2.0\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n *\r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\r\n *\r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n */\r\nabstract contract Initializable {\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Modifier to protect an initializer function from being invoked twice.\r\n     */\r\n    modifier initializer() {\r\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\r\n\r\n        bool isTopLevelCall = !_initializing;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n            _initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/helper/ERC20Initializable.sol\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20Initializable is Context, IERC20, IERC20Metadata, Initializable {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    /*\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n    */\r\n    function initializeERC20(string memory name_, string memory symbol_) internal initializer{\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n    \r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[sender] = senderBalance - amount;\r\n        }\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n\r\n        _afterTokenTransfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Counters.sol@v4.2.0\r\n\r\n/**\r\n * @title Counters\r\n * @author Matt Condon (@shrugs)\r\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\r\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\r\n *\r\n * Include with `using Counters for Counters.Counter;`\r\n */\r\nlibrary Counters {\r\n    struct Counter {\r\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\r\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\r\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\r\n        uint256 _value; // default: 0\r\n    }\r\n\r\n    function current(Counter storage counter) internal view returns (uint256) {\r\n        return counter._value;\r\n    }\r\n\r\n    function increment(Counter storage counter) internal {\r\n        unchecked {\r\n            counter._value += 1;\r\n        }\r\n    }\r\n\r\n    function decrement(Counter storage counter) internal {\r\n        uint256 value = counter._value;\r\n        require(value > 0, \"Counter: decrement overflow\");\r\n        unchecked {\r\n            counter._value = value - 1;\r\n        }\r\n    }\r\n\r\n    function reset(Counter storage counter) internal {\r\n        counter._value = 0;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/math/Math.sol@v4.2.0\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute.\r\n        return (a / 2) + (b / 2) + (((a % 2) + (b % 2)) / 2);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the ceiling of the division of two numbers.\r\n     *\r\n     * This differs from standard division with `/` in that it rounds up instead\r\n     * of rounding down.\r\n     */\r\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b - 1) / b can overflow on addition, so we distribute.\r\n        return a / b + (a % b == 0 ? 0 : 1);\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Arrays.sol@v4.2.0\r\n\r\n/**\r\n * @dev Collection of functions related to array types.\r\n */\r\nlibrary Arrays {\r\n    /**\r\n     * @dev Searches a sorted `array` and returns the first index that contains\r\n     * a value greater or equal to `element`. If no such index exists (i.e. all\r\n     * values in the array are strictly less than `element`), the array length is\r\n     * returned. Time complexity O(log n).\r\n     *\r\n     * `array` is expected to be sorted in ascending order, and to contain no\r\n     * repeated elements.\r\n     */\r\n    function findUpperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\r\n        if (array.length == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 low = 0;\r\n        uint256 high = array.length;\r\n\r\n        while (low < high) {\r\n            uint256 mid = Math.average(low, high);\r\n\r\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\r\n            // because Math.average rounds down (it does integer division with truncation).\r\n            if (array[mid] > element) {\r\n                high = mid;\r\n            } else {\r\n                low = mid + 1;\r\n            }\r\n        }\r\n\r\n        // At this point `low` is the exclusive upper bound. We will return the inclusive upper bound.\r\n        if (low > 0 && array[low - 1] == element) {\r\n            return low - 1;\r\n        } else {\r\n            return low;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/DeFi/ERC20SnapshotInitializable.sol\r\n\r\n\r\n\r\n/**\r\n * @dev This contract extends an ERC20 token with a snapshot mechanism. When a snapshot is created, the balances and\r\n * total supply at the time are recorded for later access.\r\n *\r\n * This can be used to safely create mechanisms based on token balances such as trustless dividends or weighted voting.\r\n * In naive implementations it's possible to perform a \"double spend\" attack by reusing the same balance from different\r\n * accounts. By using snapshots to calculate dividends or voting power, those attacks no longer apply. It can also be\r\n * used to create an efficient ERC20 forking mechanism.\r\n *\r\n * Snapshots are created by the internal {_snapshot} function, which will emit the {Snapshot} event and return a\r\n * snapshot id. To get the total supply at the time of a snapshot, call the function {totalSupplyAt} with the snapshot\r\n * id. To get the balance of an account at the time of a snapshot, call the {balanceOfAt} function with the snapshot id\r\n * and the account address.\r\n *\r\n * NOTE: Snapshot policy can be customized by overriding the {_getCurrentSnapshotId} method. For example, having it\r\n * return `block.number` will trigger the creation of snapshot at the begining of each new block. When overridding this\r\n * function, be careful about the monotonicity of its result. Non-monotonic snapshot ids will break the contract.\r\n *\r\n * Implementing snapshots for every block using this method will incur significant gas costs. For a gas-efficient\r\n * alternative consider {ERC20Votes}.\r\n *\r\n * ==== Gas Costs\r\n *\r\n * Snapshots are efficient. Snapshot creation is _O(1)_. Retrieval of balances or total supply from a snapshot is _O(log\r\n * n)_ in the number of snapshots that have been created, although _n_ for a specific account will generally be much\r\n * smaller since identical balances in subsequent snapshots are stored as a single entry.\r\n *\r\n * There is a constant overhead for normal ERC20 transfers due to the additional snapshot bookkeeping. This overhead is\r\n * only significant for the first transfer that immediately follows a snapshot for a particular account. Subsequent\r\n * transfers will have normal cost until the next snapshot, and so on.\r\n */\r\n\r\nabstract contract ERC20SnapshotInitializable is ERC20Initializable {\r\n    // Inspired by Jordi Baylina's MiniMeToken to record historical balances:\r\n    // https://github.com/Giveth/minimd/blob/ea04d950eea153a04c51fa510b068b9dded390cb/contracts/MiniMeToken.sol\r\n\r\n    using Arrays for uint256[];\r\n    using Counters for Counters.Counter;\r\n\r\n    // Snapshotted values have arrays of ids and the value corresponding to that id. These could be an array of a\r\n    // Snapshot struct, but that would impede usage of functions that work on an array.\r\n    struct Snapshots {\r\n        uint256[] ids;\r\n        uint256[] values;\r\n    }\r\n\r\n    mapping(address => Snapshots) private _accountBalanceSnapshots;\r\n    Snapshots private _totalSupplySnapshots;\r\n\r\n    // Snapshot ids increase monotonically, with the first value being 1. An id of 0 is invalid.\r\n    Counters.Counter private _currentSnapshotId;\r\n\r\n    /**\r\n     * @dev Emitted by {_snapshot} when a snapshot identified by `id` is created.\r\n     */\r\n    event Snapshot(uint256 id);\r\n\r\n    /**\r\n     * @dev Creates a new snapshot and returns its snapshot id.\r\n     *\r\n     * Emits a {Snapshot} event that contains the same id.\r\n     *\r\n     * {_snapshot} is `internal` and you have to decide how to expose it externally. Its usage may be restricted to a\r\n     * set of accounts, for example using {AccessControl}, or it may be open to the public.\r\n     *\r\n     * [WARNING]\r\n     * ====\r\n     * While an open way of calling {_snapshot} is required for certain trust minimization mechanisms such as forking,\r\n     * you must consider that it can potentially be used by attackers in two ways.\r\n     *\r\n     * First, it can be used to increase the cost of retrieval of values from snapshots, although it will grow\r\n     * logarithmically thus rendering this attack ineffective in the long term. Second, it can be used to target\r\n     * specific accounts and increase the cost of ERC20 transfers for them, in the ways specified in the Gas Costs\r\n     * section above.\r\n     *\r\n     * We haven't measured the actual numbers; if this is something you're interested in please reach out to us.\r\n     * ====\r\n     */\r\n    function _snapshot() internal virtual returns (uint256) {\r\n        _currentSnapshotId.increment();\r\n\r\n        uint256 currentId = _getCurrentSnapshotId();\r\n        emit Snapshot(currentId);\r\n        return currentId;\r\n    }\r\n\r\n    /**\r\n     * @dev Get the current snapshotId\r\n     */\r\n    function _getCurrentSnapshotId() internal view virtual returns (uint256) {\r\n        return _currentSnapshotId.current();\r\n    }\r\n\r\n    /**\r\n     * @dev Retrieves the balance of `account` at the time `snapshotId` was created.\r\n     */\r\n    function balanceOfAt(address account, uint256 snapshotId) public view virtual returns (uint256) {\r\n        (bool snapshotted, uint256 value) = _valueAt(snapshotId, _accountBalanceSnapshots[account]);\r\n\r\n        return snapshotted ? value : balanceOf(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Retrieves the total supply at the time `snapshotId` was created.\r\n     */\r\n    function totalSupplyAt(uint256 snapshotId) public view virtual returns (uint256) {\r\n        (bool snapshotted, uint256 value) = _valueAt(snapshotId, _totalSupplySnapshots);\r\n\r\n        return snapshotted ? value : totalSupply();\r\n    }\r\n\r\n    // Update balance and/or total supply snapshots before the values are modified. This is implemented\r\n    // in the _beforeTokenTransfer hook, which is executed for _mint, _burn, and _transfer operations.\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual override {\r\n        super._beforeTokenTransfer(from, to, amount);\r\n\r\n        if (from == address(0)) {\r\n            // mint\r\n            _updateAccountSnapshot(to);\r\n            _updateTotalSupplySnapshot();\r\n        } else if (to == address(0)) {\r\n            // burn\r\n            _updateAccountSnapshot(from);\r\n            _updateTotalSupplySnapshot();\r\n        } else {\r\n            // transfer\r\n            _updateAccountSnapshot(from);\r\n            _updateAccountSnapshot(to);\r\n        }\r\n    }\r\n\r\n    function _valueAt(uint256 snapshotId, Snapshots storage snapshots) private view returns (bool, uint256) {\r\n        require(snapshotId > 0, \"ERC20Snapshot: id is 0\");\r\n        require(snapshotId <= _getCurrentSnapshotId(), \"ERC20Snapshot: nonexistent id\");\r\n\r\n        // When a valid snapshot is queried, there are three possibilities:\r\n        //  a) The queried value was not modified after the snapshot was taken. Therefore, a snapshot entry was never\r\n        //  created for this id, and all stored snapshot ids are smaller than the requested one. The value that corresponds\r\n        //  to this id is the current one.\r\n        //  b) The queried value was modified after the snapshot was taken. Therefore, there will be an entry with the\r\n        //  requested id, and its value is the one to return.\r\n        //  c) More snapshots were created after the requested one, and the queried value was later modified. There will be\r\n        //  no entry for the requested id: the value that corresponds to it is that of the smallest snapshot id that is\r\n        //  larger than the requested one.\r\n        //\r\n        // In summary, we need to find an element in an array, returning the index of the smallest value that is larger if\r\n        // it is not found, unless said value doesn't exist (e.g. when all values are smaller). Arrays.findUpperBound does\r\n        // exactly this.\r\n\r\n        uint256 index = snapshots.ids.findUpperBound(snapshotId);\r\n\r\n        if (index == snapshots.ids.length) {\r\n            return (false, 0);\r\n        } else {\r\n            return (true, snapshots.values[index]);\r\n        }\r\n    }\r\n\r\n    function _updateAccountSnapshot(address account) private {\r\n        _updateSnapshot(_accountBalanceSnapshots[account], balanceOf(account));\r\n    }\r\n\r\n    function _updateTotalSupplySnapshot() private {\r\n        _updateSnapshot(_totalSupplySnapshots, totalSupply());\r\n    }\r\n\r\n    function _updateSnapshot(Snapshots storage snapshots, uint256 currentValue) private {\r\n        uint256 currentId = _getCurrentSnapshotId();\r\n        if (_lastSnapshotId(snapshots.ids) < currentId) {\r\n            snapshots.ids.push(currentId);\r\n            snapshots.values.push(currentValue);\r\n        }\r\n    }\r\n\r\n    function _lastSnapshotId(uint256[] storage ids) private view returns (uint256) {\r\n        if (ids.length == 0) {\r\n            return 0;\r\n        } else {\r\n            return ids[ids.length - 1];\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/interfaces/ICompounderFactory.sol\r\n\r\nstruct ShareInfo{\r\n    address depositToken;\r\n    address rewardToken;\r\n    address shareToken;\r\n    uint vaultFee;\r\n    uint minHarvest;\r\n    uint maxCallerReward;\r\n    uint callerFeePercent;\r\n    bool lpFarm;\r\n    address lpA; //only applies to lpFarms\r\n    address lpB;\r\n}\r\n\r\ninterface ICompounderFactory {\r\n\r\n    function farmAddressToShareInfo(address farm) external view returns(ShareInfo memory);\r\n    function tierManager() external view returns(address);\r\n    function getFarm(address shareToken) external view returns(address);\r\n    function gfi() external view returns(address);\r\n    function swapFactory() external view returns(address);\r\n    function createCompounder(address _farmAddress, address _depositToken, address _rewardToken, uint _maxCallerReward, uint _callerFee, uint _minHarvest, bool _lpFarm, address _lpA, address _lpB) external;\r\n}\r\n\r\n\r\n// File contracts/DeFi/uniswapv2/interfaces/IUniswapV2Pair.sol\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function HOLDING_ADDRESS() external view returns (address);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n    function destroy(uint value) external returns(bool);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n\r\n    function handleEarnings() external returns(uint amount);\r\n}\r\n\r\n\r\n// File contracts/DeFi/uniswapv2/interfaces/IUniswapV2Factory.sol\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeToSetter() external view returns (address);\r\n    function migrator() external view returns (address);\r\n    function weth() external view returns (address);\r\n    function wbtc() external view returns (address);\r\n    function gfi() external view returns (address);\r\n    function earningsManager() external view returns (address);\r\n    function feeManager() external view returns (address);\r\n    function dustPan() external view returns (address);\r\n    function governor() external view returns (address);\r\n    function priceOracle() external view returns (address);\r\n    function pathOracle() external view returns (address);\r\n    function router() external view returns (address);\r\n    function paused() external view returns (bool);\r\n    function slippage() external view returns (uint);\r\n\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeToSetter(address) external;\r\n    function setMigrator(address) external;\r\n}\r\n\r\n\r\n// File contracts/DeFi/Share.sol\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract Share is ERC20SnapshotInitializable {\r\n\r\n\r\n    ICompounderFactory public CompounderFactory;\r\n    //At the time of snapshot save these values so we can use them to evaluate shares worth later\r\n    uint public shareToDepositToken;\r\n    uint public depositTokenToGFI;\r\n\r\n    function initialize() external initializer{\r\n        CompounderFactory = ICompounderFactory(msg.sender);\r\n        initializeERC20(\"Gravity Finance Farm Share\", \"GFI-FS\");\r\n    }\r\n\r\n    modifier onlyFactory() {\r\n        require(msg.sender == address(CompounderFactory), \"Caller is not Compounder Factory\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyTierManager() {\r\n        require(msg.sender == CompounderFactory.tierManager(), \"Caller is not Tier Manager\");\r\n        _;\r\n    }\r\n\r\n    function mint(address to, uint _amount) external onlyFactory returns(bool){\r\n        _mint(to, _amount);\r\n        return true;\r\n    }\r\n\r\n    function burn(address from, uint _amount) external onlyFactory returns(bool){\r\n        _burn(from, _amount);\r\n        return true;\r\n    }\r\n\r\n    function takeSnapshot() external onlyTierManager{\r\n        _snapshot();\r\n\r\n        //record shareToDepositToken evaluation\r\n        address farm = CompounderFactory.getFarm(address(this));\r\n        UserInfo memory stats = IFarmV2(farm).userInfo(address(CompounderFactory));\r\n        shareToDepositToken = (10 ** decimals()) * stats.amount/totalSupply(); \r\n\r\n        //record depositTokenToGFI evaluation\r\n        ShareInfo memory shareStats = CompounderFactory.farmAddressToShareInfo(farm);\r\n        if(CompounderFactory.gfi()  == shareStats.depositToken){\r\n            depositTokenToGFI = (10 ** decimals());\r\n        }\r\n        else if(shareStats.lpFarm){\r\n            address pair = IUniswapV2Factory(CompounderFactory.swapFactory()).getPair(shareStats.lpA, shareStats.lpB);\r\n            uint GFIinPair = IERC20(CompounderFactory.gfi()).balanceOf(pair);\r\n            depositTokenToGFI = ( (10 ** decimals()) * GFIinPair ) / IUniswapV2Pair(pair).totalSupply();\r\n        }\r\n        else{\r\n            depositTokenToGFI = 0; //deposit token is not an Lp token or GFI so there is no conversion\r\n        }\r\n\r\n    }\r\n\r\n    function getSharesGFIWorthAtLastSnapshot(address _address) view external returns(uint shareValuation){\r\n        //grab the amount of shares _address had at last snapshot, then use  shareToDepositToken, and depositTokenToGFI\r\n        //to calculate GFI worth\r\n        uint userSnapshotBalance = balanceOfAt(_address, _getCurrentSnapshotId());\r\n        shareValuation = ( ( (userSnapshotBalance * shareToDepositToken) / (10 ** decimals()) ) * depositTokenToGFI ) / (10 ** decimals());\r\n    } \r\n\r\n    function getSharesGFICurrentWorth(address _address) view external returns(uint shareValuation){\r\n        //record shareToDepositToken evaluation\r\n        address farm = CompounderFactory.getFarm(address(this));\r\n        UserInfo memory stats = IFarmV2(farm).userInfo(address(CompounderFactory));\r\n        uint tmpshareToDepositToken = ( (10 ** decimals()) * stats.amount ) / totalSupply(); \r\n\r\n        //record depositTokenToGFI evaluation\r\n        uint tmpdepositTokenToGFI;\r\n        ShareInfo memory shareStats = CompounderFactory.farmAddressToShareInfo(farm);\r\n        if(CompounderFactory.gfi()  == shareStats.depositToken){\r\n            tmpdepositTokenToGFI = (10 ** decimals());\r\n        }\r\n        else if(shareStats.lpFarm){\r\n            address pair = IUniswapV2Factory(CompounderFactory.swapFactory()).getPair(shareStats.lpA, shareStats.lpB);\r\n            uint GFIinPair = IERC20(CompounderFactory.gfi()).balanceOf(pair);\r\n            tmpdepositTokenToGFI = ( (10 ** decimals()) * GFIinPair ) / IUniswapV2Pair(pair).totalSupply();\r\n        }\r\n        else{\r\n            tmpdepositTokenToGFI = 0; //deposit token is not an Lp token or GFI so there is no conversion\r\n        }\r\n\r\n        shareValuation = ( ( (balanceOf(_address) * tmpshareToDepositToken) / (10 ** decimals()) ) * tmpdepositTokenToGFI ) / (10 ** decimals());\r\n    }\r\n\r\n    function viewCurrentSnapshotID() external view returns(uint ID){\r\n        ID = _getCurrentSnapshotId();\r\n    }\r\n\r\n}\r\n\r\n\r\n// File contracts/interfaces/IShare.sol\r\n\r\ninterface IShare is IERC20{\r\n    function mint(address to, uint _amount) external returns(bool);\r\n    function burn(address from, uint _amount) external returns(bool);\r\n    function initialize() external;\r\n    function initializeERC20(string memory name_, string memory symbol_) external;\r\n    function getSharesGFIWorthAtLastSnapshot(address _address) view external returns(uint);\r\n}\r\n\r\n\r\n// File contracts/interfaces/iGravityToken.sol\r\n\r\ninterface iGravityToken is IERC20 {\r\n\r\n    function setGovernanceAddress(address _address) external;\r\n\r\n    function changeGovernanceForwarding(bool _bool) external;\r\n\r\n    function burn(uint256 _amount) external returns (bool);\r\n}\r\n\r\n\r\n// File contracts/DeFi/uniswapv2/interfaces/IUniswapV2Router01.sol\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\n\r\n// File contracts/DeFi/uniswapv2/interfaces/IUniswapV2Router02.sol\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n\r\n// File contracts/interfaces/ITierManager.sol\r\n\r\n\r\ninterface ITierManager {\r\n    function checkTier(address caller) external returns(uint);\r\n}\r\n\r\n\r\n// File contracts/interfaces/iGovernance.sol\r\n\r\n\r\ninterface iGovernance {\r\n    /**\r\n     * Assume claimFee uses msg.sender, and returns the amount of WETH sent to the caller\r\n     */\r\n    function delegateFee(address reciever) external returns (uint256);\r\n\r\n    function claimFee() external returns (uint256);\r\n\r\n    function tierLedger(address user, uint index) external returns(uint);\r\n\r\n    function depositFee(uint256 amountWETH, uint256 amountWBTC) external;\r\n\r\n    function Tiers(uint index) external returns(uint);\r\n}\r\n\r\n\r\n// File contracts/interfaces/IIncinerator.sol\r\n\r\n\r\ninterface IIncinerator {\r\n    /**\r\n     * Assume claimFee uses msg.sender, and returns the amount of WETH sent to the caller\r\n     */\r\n    function convertEarningsToGFIandBurn() external;\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Address.sol@v4.2.0\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) private pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol@v4.2.0\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract CompounderFactory is Ownable{\r\n    mapping(address => ShareInfo) public farmAddressToShareInfo;\r\n    iGravityToken GFI;\r\n    IFarmFactory Factory;\r\n    address public ShareTokenImplementation;\r\n    mapping(address => address) public getShareToken;//input the farm address to get it's share token\r\n    mapping(address => address) public getFarm;//input the share address to get it's farm\r\n    address[] public allShareTokens;\r\n    mapping(address => uint) public rewardBalance;\r\n    mapping(address => uint) public lastHarvestDate;\r\n    bool public useOptimizedReinvest = true;\r\n    mapping(address => bool) public performBuyBacks;\r\n    bool public txOriginOrWhitelist;\r\n    address public buybacks;\r\n    address public dustPan;\r\n    address public feeManager;\r\n    address public swapFactory;\r\n    address public router;\r\n    address public tierManager;\r\n    address public gfi;\r\n    uint public requiredTier;\r\n    bool public checkTiers;\r\n    address public governor;\r\n    address public incinerator;\r\n    mapping(address => bool) public whitelist;\r\n\r\n    /**\r\n    @dev emitted when a new compounder is created\r\n    **/\r\n    event CompounderCreated(address _farmAddress, uint requiredTier);\r\n\r\n    /**\r\n    * @dev emitted when owner changes the whitelist\r\n    * @param _address the address that had its whitelist status changed\r\n    * @param newBool the new state of the address\r\n    **/\r\n    event whiteListChanged(address _address, bool newBool);\r\n\r\n    event TierManagerChanged(address newManager);\r\n\r\n    event TierCheckingUpdated(bool newState);\r\n\r\n    event GovernorChanged(address governor);\r\n\r\n    event IncineratorChanged(address incinerator);\r\n\r\n    event ShareInfoUpdated(address farmAddress, uint _minHarvest, uint _maxCallerReward, uint _callerFeePercent, uint _vaultFee);\r\n\r\n    event SharedVariablesUpdated(address _dustPan, address _feeManager, address _swapFactory, address _router);\r\n\r\n    event Compounded(address farmAddress, uint timestamp);\r\n\r\n    event ChangeBuyBacksState(bool state);\r\n\r\n    event ChangeBuyBacksAddress(address _address);\r\n\r\n    event ChangeCompoundCaller(bool state);\r\n\r\n    modifier compounderExists(address farmAddress){\r\n        require(getShareToken[farmAddress] != address(0), \"Compounder does not exist!\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyWhitelist() {\r\n        require(whitelist[msg.sender], \"Caller is not in whitelist!\");\r\n        _;\r\n    }\r\n\r\n    constructor(address gfiAddress, address farmFactoryAddress, uint _requiredTier, address _tierManager) {\r\n        GFI = iGravityToken(gfiAddress);\r\n        gfi = gfiAddress;\r\n        Factory = IFarmFactory(farmFactoryAddress);\r\n        Share ShareTokenRoot = new Share();\r\n        ShareTokenImplementation = address(ShareTokenRoot);\r\n        requiredTier = _requiredTier;\r\n        tierManager = _tierManager;\r\n    }\r\n\r\n    function setOptimizedReinvest(bool state) external onlyOwner{\r\n        useOptimizedReinvest = state;\r\n    }\r\n\r\n    function setPerformBuyBacks(address farmAddress, bool state) external onlyOwner{\r\n        performBuyBacks[farmAddress] = state;\r\n        emit ChangeBuyBacksState(state);\r\n    }\r\n\r\n    function changeBuyBacks(address _address) external onlyOwner{\r\n        buybacks = _address;\r\n        emit ChangeBuyBacksAddress(_address);\r\n    }\r\n\r\n    function setTxOriginOrWhitelist(bool state) external onlyOwner{\r\n        txOriginOrWhitelist = state;\r\n        emit ChangeCompoundCaller(state);\r\n    }\r\n\r\n    function getShareWorthInDepositToken(address farmAddress, uint amount) external view returns(uint worth){\r\n        IShare ShareToken = IShare(farmAddressToShareInfo[farmAddress].shareToken);\r\n        IFarmV2 Farm = IFarmV2(farmAddress);\r\n        worth = amount * Farm.userInfo(address(this)).amount/ShareToken.totalSupply();\r\n    }\r\n\r\n    function adjustWhitelist(address _address, bool _bool) external onlyOwner {\r\n        whitelist[_address] = _bool;\r\n        emit whiteListChanged(_address, _bool);\r\n    }\r\n\r\n    function changeTierManager(address _tierManager) external onlyOwner{\r\n        tierManager = _tierManager;\r\n        emit TierManagerChanged(tierManager);\r\n    }\r\n\r\n    function changeGovernor(address _governor) external onlyOwner{\r\n        governor = _governor;\r\n        emit GovernorChanged(governor);\r\n    }\r\n\r\n    function changeIncinerator(address _incinerator) external onlyOwner{\r\n        incinerator = _incinerator;\r\n        emit IncineratorChanged(incinerator);\r\n    }\r\n    \r\n    function changeCheckTiers(bool _bool) external onlyOwner{\r\n        checkTiers = _bool;\r\n        emit TierCheckingUpdated(checkTiers);\r\n    }\r\n\r\n    function changeShareInfo(address farmAddress, uint _minHarvest, uint _maxCallerReward, uint _callerFeePercent, uint _vaultFee) external onlyOwner compounderExists(farmAddress){\r\n        require(_callerFeePercent <= 10000, 'Gravity Finance: INVALID CALLER FEE PERCENT');\r\n        require(_vaultFee <= 500, 'Gravity Finance: Vault Fee too high');\r\n\r\n        farmAddressToShareInfo[farmAddress].vaultFee = _vaultFee;\r\n        farmAddressToShareInfo[farmAddress].minHarvest = _minHarvest;\r\n        farmAddressToShareInfo[farmAddress].maxCallerReward = _maxCallerReward;\r\n        farmAddressToShareInfo[farmAddress].callerFeePercent = _callerFeePercent;\r\n        emit ShareInfoUpdated(farmAddress, _minHarvest, _maxCallerReward, _callerFeePercent, _vaultFee);\r\n    }\r\n\r\n    function updateSharedVariables(address _dustPan, address _feeManager, address _swapFactory, address _router) external onlyOwner{\r\n        dustPan = _dustPan;\r\n        feeManager = _feeManager;\r\n        swapFactory = _swapFactory;\r\n        router = _router;\r\n        emit SharedVariablesUpdated(_dustPan, _feeManager, _swapFactory, _router);\r\n    }\r\n\r\n    function createCompounder(address _farmAddress, address _depositToken, address _rewardToken, uint _vaultFee, uint _maxCallerReward, uint _callerFee, uint _minHarvest, bool _lpFarm, address _lpA, address _lpB) external onlyWhitelist{\r\n        if(_lpFarm && _rewardToken != _lpA){\r\n            require(IUniswapV2Factory(swapFactory).getPair(_rewardToken, _lpA) != address(0), \"Reward token must have a swap pair with lpA if they are not the same\");\r\n        }\r\n        require(getShareToken[_farmAddress] == address(0), \"Share token already exists!\");\r\n        require(_callerFee <= 10000, 'Gravity Finance: INVALID CALLER FEE PERCENT');\r\n        require(_vaultFee <= 500, 'Gravity Finance: Vault Fee too high');\r\n\r\n        //Create the clone proxy, and add it to the getFarm mappping, and allFarms array\r\n        bytes32 salt = keccak256(abi.encodePacked(_farmAddress));\r\n        address shareClone = Clones.cloneDeterministic(ShareTokenImplementation, salt);\r\n        getShareToken[_farmAddress] = shareClone;\r\n        getFarm[shareClone] = _farmAddress;\r\n        allShareTokens.push(shareClone);\r\n        farmAddressToShareInfo[_farmAddress] = ShareInfo({\r\n            depositToken: _depositToken,\r\n            rewardToken: _rewardToken,\r\n            shareToken: shareClone,\r\n            vaultFee: _vaultFee,\r\n            minHarvest: _minHarvest,\r\n            maxCallerReward: _maxCallerReward,\r\n            callerFeePercent: _callerFee,\r\n            lpFarm: _lpFarm,\r\n            lpA: _lpA,\r\n            lpB: _lpB\r\n        });\r\n        IShare(shareClone).initialize();\r\n        emit CompounderCreated(_farmAddress, requiredTier);\r\n    }\r\n\r\n    /**\r\n    * @dev allows caller to deposit the depositToken corresponding to the given fid. \r\n    * In return caller is minted Shares for that farm\r\n    **/\r\n    function depositCompounding(address farmAddress, uint amountToDeposit) external compounderExists(farmAddress){\r\n        if(checkTiers){\r\n            require(ITierManager(tierManager).checkTier(msg.sender) >= requiredTier, \"Caller does not hold high enough tier\");\r\n        }\r\n        IERC20 DepositToken = IERC20(farmAddressToShareInfo[farmAddress].depositToken);\r\n        IShare ShareToken = IShare(farmAddressToShareInfo[farmAddress].shareToken);\r\n        IFarmV2 Farm = IFarmV2(farmAddress);\r\n\r\n        //If this is the first deposit, then make sure amountToDeposit is atleast 1000\r\n        if(ShareToken.totalSupply() == 0){\r\n            require(amountToDeposit >= 1000, \"Gravty Finance: Min first deposit not met\");\r\n        }\r\n        //require deposit tokens are transferred into compounder\r\n        SafeERC20.safeTransferFrom(DepositToken, msg.sender, address(this), amountToDeposit);\r\n\r\n        //figure out the amount of shares owed to caller\r\n        uint sharesOwed;\r\n        if(ShareToken.totalSupply() != 0){\r\n            sharesOwed = amountToDeposit * ShareToken.totalSupply()/Farm.userInfo(address(this)).amount;\r\n        }\r\n        else{\r\n            sharesOwed = amountToDeposit; //mint the caller as many shares as the initial deposit\r\n        }\r\n\r\n        //deposit tokens into farm, but keep track of how much reward token we get\r\n        DepositToken.approve(farmAddress, amountToDeposit);\r\n        uint rewardToReinvest = Farm.pendingReward(address(this));\r\n        Farm.deposit(amountToDeposit);\r\n\r\n        //mint caller their share tokens\r\n        require(ShareToken.mint(msg.sender, sharesOwed), 'Gravity Finance: SHARE MINT FAILED');\r\n\r\n        rewardBalance[farmAddress] += rewardToReinvest;\r\n    }\r\n\r\n    /**\r\n    * @dev allows caller to exchange farm share tokens for corresponding farms deposit token\r\n    **/\r\n    function withdrawCompounding(address farmAddress, uint amountToWithdraw) external compounderExists(farmAddress){\r\n        IERC20 DepositToken = IERC20(farmAddressToShareInfo[farmAddress].depositToken);\r\n        IShare ShareToken = IShare(farmAddressToShareInfo[farmAddress].shareToken);\r\n        IFarmV2 Farm = IFarmV2(farmAddress);\r\n\r\n        //figure out the amount of deposit tokens owed to caller\r\n        uint depositTokensOwed = amountToWithdraw * Farm.userInfo(address(this)).amount/ShareToken.totalSupply();\r\n\r\n        //require shares are burned\r\n        require(ShareToken.burn(msg.sender, amountToWithdraw), 'Gravity Finance: SHARE BURN FAILED');\r\n\r\n        //withdraw depositTokensOwed but keep track of rewards harvested\r\n        uint rewardToReinvest = Farm.pendingReward(address(this));\r\n        Farm.withdraw(depositTokensOwed);\r\n\r\n        //Transfer depositToken to caller\r\n        SafeERC20.safeTransfer(DepositToken, msg.sender, depositTokensOwed);\r\n\r\n        rewardBalance[farmAddress] += rewardToReinvest;\r\n    }\r\n\r\n    /**\r\n    * @dev allows caller to harvest compounding farms pending rewards, in exchange for a callers fee(paid in reward token)\r\n    use rewardBalance[farmAddress] and reinvest that\r\n    * If reward token and deposit token are the same, then it just reinvests teh tokens.\r\n    * If the deposit token is an LP token, then it swaps half the reward token for deposittokens\r\n    **/\r\n    function harvestCompounding(address farmAddress, uint[5] memory minAmounts) external compounderExists(farmAddress){\r\n        if(txOriginOrWhitelist){\r\n            require(whitelist[msg.sender], \"Caller is not in whitelist!\");\r\n        }\r\n        else{\r\n            require(msg.sender == tx.origin, \"Smart Contracts are not allowed\");\r\n            minAmounts[0] = 0;\r\n            minAmounts[1] = 0;\r\n            minAmounts[2] = 0;\r\n            minAmounts[3] = 0;\r\n            minAmounts[4] = 0;\r\n        }\r\n\r\n\r\n        IERC20 RewardToken = IERC20(farmAddressToShareInfo[farmAddress].rewardToken);//could also do Farm.farmInfo.rewardToken....\r\n        uint rewardToReinvest;\r\n        {\r\n            IFarmV2 Farm = IFarmV2(farmAddress);\r\n            //make sure pending reward is greater than min harvest\r\n            require((Farm.pendingReward(address(this)) + rewardBalance[farmAddress]) >= farmAddressToShareInfo[farmAddress].minHarvest, 'Gravity Finance: MIN HARVEST NOT MET');\r\n            //harvest reward keeping track of rewards harvested\r\n            rewardToReinvest = Farm.pendingReward(address(this));\r\n            Farm.deposit(0);\r\n            rewardToReinvest += rewardBalance[farmAddress];\r\n        }\r\n        uint reward = _reinvest(farmAddress, rewardToReinvest, minAmounts);\r\n        rewardBalance[farmAddress] = 0;\r\n        lastHarvestDate[farmAddress] = block.timestamp;\r\n        if(reward > 0) {SafeERC20.safeTransfer(RewardToken, msg.sender, reward);}\r\n        emit Compounded(farmAddress, block.timestamp);\r\n        \r\n    }\r\n\r\n    /**\r\n    * @dev called at the end of harvestCompounding\r\n    * to take any harvested rewards, convert them into the deposit token, and reinvest them\r\n    * In order for single sided farms with different reward and deposit tokens to work, their needs to be\r\n    * a swap pair with the reward and deposit tokens\r\n    * In order for LP farms to work, there needs to be swap pair between reward, and lpA\r\n    **/\r\n    function _reinvest(address farmAddress, uint amountToReinvest, uint[5] memory minAmounts) internal returns(uint callerReward){\r\n        IERC20 DepositToken = IERC20(farmAddressToShareInfo[farmAddress].depositToken);\r\n        IERC20 RewardToken = IERC20(farmAddressToShareInfo[farmAddress].rewardToken);//could also do Farm.farmInfo.rewardToken....\r\n        IFarmV2 Farm = IFarmV2(farmAddress);\r\n\r\n        if(farmAddressToShareInfo[farmAddress].vaultFee > 0){//handle vault fee\r\n            uint fee = farmAddressToShareInfo[farmAddress].vaultFee * amountToReinvest / 10000;\r\n            amountToReinvest = amountToReinvest - fee;\r\n            if(performBuyBacks[farmAddress]){\r\n                SafeERC20.safeTransfer(RewardToken, buybacks, fee);\r\n            }\r\n            else{\r\n                if(farmAddressToShareInfo[farmAddress].rewardToken == address(GFI)){//burn it\r\n                    GFI.burn(fee);\r\n                }\r\n                else{//send it to fee manager\r\n                    SafeERC20.safeTransfer(RewardToken, feeManager, fee);\r\n                }\r\n            }\r\n        }\r\n        //handle caller reward\r\n        if(farmAddressToShareInfo[farmAddress].callerFeePercent > 0){\r\n            callerReward = farmAddressToShareInfo[farmAddress].callerFeePercent * amountToReinvest / 10000;\r\n            if (callerReward > farmAddressToShareInfo[farmAddress].maxCallerReward){\r\n                callerReward = farmAddressToShareInfo[farmAddress].maxCallerReward;\r\n            }\r\n            amountToReinvest = amountToReinvest - callerReward;\r\n        } \r\n\r\n        //check if the deposit token and the reward token are not the same\r\n        if (farmAddressToShareInfo[farmAddress].depositToken != farmAddressToShareInfo[farmAddress].rewardToken){\r\n            address[] memory path = new address[](2);\r\n            uint[] memory amounts = new uint[](2);\r\n\r\n            if (farmAddressToShareInfo[farmAddress].lpFarm){//Dealing with an LP farm so swap half the reward for deposit and supply liqduity\r\n                if(farmAddressToShareInfo[farmAddress].rewardToken != farmAddressToShareInfo[farmAddress].lpA){\r\n                    path[0] = farmAddressToShareInfo[farmAddress].rewardToken;\r\n                    path[1] = farmAddressToShareInfo[farmAddress].lpA;\r\n                    RewardToken.approve(router, amountToReinvest);\r\n                    amounts = IUniswapV2Router02(router).swapExactTokensForTokens(\r\n                        amountToReinvest,\r\n                        minAmounts[0],\r\n                        path,\r\n                        address(this),\r\n                        block.timestamp\r\n                    );\r\n                }\r\n                else{\r\n                    amounts[1] = amountToReinvest;\r\n                }\r\n\r\n                path[0] = farmAddressToShareInfo[farmAddress].lpA;\r\n                path[1] = farmAddressToShareInfo[farmAddress].lpB;\r\n                if(useOptimizedReinvest){\r\n                    uint optimalAmountA;\r\n                    IUniswapV2Pair tokenPair = IUniswapV2Pair(address(DepositToken));\r\n                    (uint112 resA, uint112 resB,) = tokenPair.getReserves();\r\n                    if( tokenPair.token0() == path[0]){\r\n                        optimalAmountA = _getSwapAmt(amounts[1], resA);\r\n                    }\r\n                    else {\r\n                        optimalAmountA = _getSwapAmt(amounts[1], resB);\r\n                    }\r\n                    //require(amounts[1]/2 >= optimalAmountA, \"WHATTTTTTTT\");\r\n                    uint tmp = amounts[1] - optimalAmountA;\r\n                    IERC20(path[0]).approve(router, optimalAmountA);\r\n                    amounts = IUniswapV2Router02(router).swapExactTokensForTokens(\r\n                        optimalAmountA,\r\n                        minAmounts[1],\r\n                        path,\r\n                        address(this),\r\n                        block.timestamp\r\n                    );\r\n                    amounts[0] = tmp;\r\n                }\r\n                else{\r\n                    IERC20(path[0]).approve(router, amounts[1]/2);\r\n                    amounts = IUniswapV2Router02(router).swapExactTokensForTokens(\r\n                        amounts[1] / 2,\r\n                        minAmounts[1],\r\n                        path,\r\n                        address(this),\r\n                        block.timestamp\r\n                    );\r\n                }\r\n                \r\n                IERC20(path[0]).approve(router, amounts[0]);\r\n                IERC20(path[1]).approve(router, amounts[1]);\r\n                uint token0Var;\r\n                uint token1Var;\r\n                (token0Var, token1Var, amountToReinvest) = IUniswapV2Router02(router).addLiquidity(\r\n                    path[0],\r\n                    path[1],\r\n                    amounts[0],\r\n                    amounts[1],\r\n                    minAmounts[2],\r\n                    minAmounts[3],\r\n                    address(this),\r\n                    block.timestamp\r\n                );\r\n\r\n                require(amountToReinvest >= minAmounts[4], 'Min LP tokens not met');\r\n\r\n                if((amounts[0] - token0Var) > 0){\r\n                    //safe transfer\r\n                    if((amounts[0] - token0Var) > IERC20(path[0]).balanceOf(address(this))){\r\n                        SafeERC20.safeTransfer(IERC20(path[0]), dustPan, IERC20(path[0]).balanceOf(address(this)));\r\n                    }\r\n                    else{\r\n                        SafeERC20.safeTransfer(IERC20(path[0]), dustPan, (amounts[0] - token0Var));\r\n                    }\r\n                }\r\n                if((amounts[1] - token1Var) > 0){\r\n                    if((amounts[1] - token1Var) > IERC20(path[1]).balanceOf(address(this))){\r\n                        SafeERC20.safeTransfer(IERC20(path[1]), dustPan, IERC20(path[1]).balanceOf(address(this)));\r\n                    }\r\n                    else {\r\n                        SafeERC20.safeTransfer(IERC20(path[1]), dustPan, (amounts[1] - token1Var));\r\n                    }\r\n                }\r\n\r\n            }\r\n            else{//need to swap all reward for deposit token\r\n                path[0] = farmAddressToShareInfo[farmAddress].rewardToken;\r\n                path[1] = farmAddressToShareInfo[farmAddress].depositToken;\r\n                RewardToken.approve(router, amountToReinvest);\r\n                amounts = IUniswapV2Router02(router).swapExactTokensForTokens(\r\n                    amountToReinvest,\r\n                    minAmounts[0],\r\n                    path,\r\n                    address(this),\r\n                    block.timestamp\r\n                );\r\n                amountToReinvest = amounts[1]; //What we got out of the swap\r\n            }\r\n        }\r\n        DepositToken.approve(address(Farm), amountToReinvest);\r\n        Farm.deposit(amountToReinvest);\r\n    }\r\n\r\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\r\n    function sqrt(uint y) internal pure returns (uint z) {\r\n        if (y > 3) {\r\n            z = y;\r\n            uint x = y / 2 + 1;\r\n            while (x < z) {\r\n                z = x;\r\n                x = (y / x + x) / 2;\r\n            }\r\n        } else if (y != 0) {\r\n            z = 1;\r\n        }\r\n    }\r\n\r\n    function _getSwapAmt(uint amtA, uint resA) internal pure returns(uint amount){\r\n        amount = ( sqrt( (1997**2 * resA**2) + (4 * 997 * 1000 * amtA * resA) ) - (1997 * resA) ) / 1994;\r\n    }\r\n\r\n    function sendEarningsToIncinerator() external{\r\n        require(incinerator != address(0), \"Incinerator can't be Zero Address!\");\r\n        iGovernance(governor).delegateFee(incinerator);\r\n        IIncinerator(incinerator).convertEarningsToGFIandBurn();\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gfiAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"farmFactoryAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_requiredTier\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tierManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"ChangeBuyBacksAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"ChangeBuyBacksState\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"ChangeCompoundCaller\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"farmAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Compounded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_farmAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requiredTier\",\"type\":\"uint256\"}],\"name\":\"CompounderCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"governor\",\"type\":\"address\"}],\"name\":\"GovernorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"incinerator\",\"type\":\"address\"}],\"name\":\"IncineratorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"farmAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_minHarvest\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxCallerReward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_callerFeePercent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_vaultFee\",\"type\":\"uint256\"}],\"name\":\"ShareInfoUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_dustPan\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_feeManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_swapFactory\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"SharedVariablesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newState\",\"type\":\"bool\"}],\"name\":\"TierCheckingUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newManager\",\"type\":\"address\"}],\"name\":\"TierManagerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newBool\",\"type\":\"bool\"}],\"name\":\"whiteListChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ShareTokenImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_bool\",\"type\":\"bool\"}],\"name\":\"adjustWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allShareTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buybacks\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"changeBuyBacks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_bool\",\"type\":\"bool\"}],\"name\":\"changeCheckTiers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governor\",\"type\":\"address\"}],\"name\":\"changeGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_incinerator\",\"type\":\"address\"}],\"name\":\"changeIncinerator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"farmAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minHarvest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxCallerReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_callerFeePercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vaultFee\",\"type\":\"uint256\"}],\"name\":\"changeShareInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tierManager\",\"type\":\"address\"}],\"name\":\"changeTierManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkTiers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_farmAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_depositToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_vaultFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxCallerReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_callerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minHarvest\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_lpFarm\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_lpA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lpB\",\"type\":\"address\"}],\"name\":\"createCompounder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"farmAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountToDeposit\",\"type\":\"uint256\"}],\"name\":\"depositCompounding\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dustPan\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"farmAddressToShareInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"depositToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"shareToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"vaultFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minHarvest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxCallerReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"callerFeePercent\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"lpFarm\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"lpA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lpB\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getFarm\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getShareToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"farmAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getShareWorthInDepositToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"worth\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gfi\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"farmAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[5]\",\"name\":\"minAmounts\",\"type\":\"uint256[5]\"}],\"name\":\"harvestCompounding\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"incinerator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastHarvestDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"performBuyBacks\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requiredTier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendEarningsToIncinerator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setOptimizedReinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"farmAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setPerformBuyBacks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setTxOriginOrWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tierManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txOriginOrWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dustPan\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_swapFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"updateSharedVariables\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"useOptimizedReinvest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"farmAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountToWithdraw\",\"type\":\"uint256\"}],\"name\":\"withdrawCompounding\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CompounderFactory", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000874e178a2f3f3f9d34db862453cd756e7eab038100000000000000000000000041d8920282eedccfc2f857e5e40aa560a65d762b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://939715c9cbba81a289d88a78b6cd580ba63af1545093486264b057a95a1d6ded"}