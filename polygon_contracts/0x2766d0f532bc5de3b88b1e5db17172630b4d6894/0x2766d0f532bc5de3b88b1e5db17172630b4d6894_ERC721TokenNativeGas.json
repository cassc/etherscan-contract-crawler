{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/Clones.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create(0, 0x09, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create2(0, 0x09, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(add(ptr, 0x38), deployer)\\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\\n            mstore(add(ptr, 0x14), implementation)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\\n            mstore(add(ptr, 0x58), salt)\\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\\n            predicted := keccak256(add(ptr, 0x43), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/tokens/erc721/clones/gasless/ERC721TokenNativeGaslessMintFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\n\\nimport \\\"../interfaces/IERC721Token.sol\\\";\\n\\n/// @title ERC721TokenNativeGaslessMintFactory\\n/// @notice Factory contract that can deploy ERC721, ERC721 Soulbound tokens for use on Coinvise Campaigns\\n/// @author Coinvise\\ncontract ERC721TokenNativeGaslessMintFactory is Ownable {\\n  /// @notice Emitted when trying to set `erc721TokenImpl`, `erc721SoulboundTokenImpl`, `erc721TokenNativeGaslessMintImpl`, `erc721SoulboundTokenNativeGaslessMintImpl` to zero address\\n  error InvalidAddress();\\n\\n  /// @notice Emitted when `fee * _maxSupply` is not passed in as msg.value during `deployERC721Token()`\\n  error InvalidFee();\\n\\n  /// @notice Emitted when ether transfer reverted\\n  error TransferFailed();\\n\\n  /// @notice Emitted when an ERC721Token clone is deployed\\n  /// @param _tokenType type of token deployed\\n  /// @param _erc721TokenClone address of the deployed clone\\n  /// @param _creator address of the creator of the deployed clone\\n  /// @param _erc721TokenImpl address of the implementation used for the deployed clone\\n  event ERC721TokenDeployed(\\n    TokenType indexed _tokenType,\\n    address _erc721TokenClone,\\n    address indexed _creator,\\n    address indexed _erc721TokenImpl\\n  );\\n\\n  /// @notice Emitted when funds are withdrawn\\n  /// @param _feeTreasury treasury address to which fees are withdrawn\\n  /// @param _amount amount of funds withdrawn to `_feeTreasury`\\n  event Withdrawal(address _feeTreasury, uint256 _amount);\\n\\n  /// @notice Emitted when erc721TokenImpl is changed\\n  /// @param _oldERC721TokenImpl old erc721TokenImpl\\n  /// @param _newERC721TokenImpl new erc721TokenImpl\\n  event ERC721TokenImplSet(\\n    address _oldERC721TokenImpl,\\n    address _newERC721TokenImpl\\n  );\\n\\n  /// @notice Emitted when erc721SoulboundTokenImpl is changed\\n  /// @param _oldERC721SoulboundTokenImpl old erc721SoulboundTokenImpl\\n  /// @param _newERC721SoulboundTokenImpl new erc721SoulboundTokenImpl\\n  event ERC721SoulboundTokenImplSet(\\n    address _oldERC721SoulboundTokenImpl,\\n    address _newERC721SoulboundTokenImpl\\n  );\\n\\n  /// @notice Emitted when erc721TokenNativeGaslessMintImpl is changed\\n  /// @param _oldERC721TokenNativeGaslessMintImpl old erc721TokenNativeGaslessMintImpl\\n  /// @param _newERC721TokenNativeGaslessMintImpl new erc721TokenNativeGaslessMintImpl\\n  event ERC721TokenNativeGaslessMintImplSet(\\n    address _oldERC721TokenNativeGaslessMintImpl,\\n    address _newERC721TokenNativeGaslessMintImpl\\n  );\\n\\n  /// @notice Emitted when erc721SoulboundTokenNativeGaslessMintImpl is changed\\n  /// @param _oldERC721SoulboundTokenNativeGaslessMintImpl old erc721SoulboundTokenNativeGaslessMintImpl\\n  /// @param _newERC721SoulboundTokenNativeGaslessMintImpl new erc721SoulboundTokenNativeGaslessMintImpl\\n  event ERC721SoulboundTokenNativeGaslessMintImplSet(\\n    address _oldERC721SoulboundTokenNativeGaslessMintImpl,\\n    address _newERC721SoulboundTokenNativeGaslessMintImpl\\n  );\\n\\n  /// @notice Emitted when fee is changed\\n  /// @param _oldFee old fee\\n  /// @param _newFee new fee\\n  event FeeSet(uint256 _oldFee, uint256 _newFee);\\n\\n  /// @notice Enum to differentiate type of token to deploy\\n  enum TokenType {\\n    ERC721Token,\\n    ERC721SoulboundToken,\\n    ERC721TokenNativeGaslessMint,\\n    ERC721SoulboundTokenNativeGaslessMint\\n  }\\n\\n  /// @notice Implementation contract address used to deploy ERC721Token clones\\n  address public erc721TokenImpl;\\n\\n  /// @notice Implementation contract address used to deploy ERC721SoulboundToken clones\\n  address public erc721SoulboundTokenImpl;\\n\\n  /// @notice Implementation contract address used to deploy ERC721TokenNativeGaslessMint clones\\n  address public erc721TokenNativeGaslessMintImpl;\\n\\n  /// @notice Implementation contract address used to deploy ERC721SoulboundTokenNativeGaslessMint clones\\n  address public erc721SoulboundTokenNativeGaslessMintImpl;\\n\\n  /// @notice Fee per _maxSupply to be paid\\n  /// @dev `fee * _maxSupply` should be passed in as msg.value during `deployERC721Token()`\\n  uint256 public fee;\\n\\n  /// @notice Sets `_erc721TokenImpl`, `_erc721SoulboundTokenImpl`, `_fee`\\n  /// @dev Reverts if `_erc721TokenImpl` or `_erc721SoulboundTokenImpl` param is address(0)\\n  /// @param _erc721TokenImpl ERC721Token implementation contract address\\n  /// @param _erc721SoulboundTokenImpl ERC721SoulboundToken implementation contract address\\n  /// @param _erc721TokenNativeGaslessMintImpl ERC721TokenNativeGaslessMint implementation contract address\\n  /// @param _erc721SoulboundTokenNativeGaslessMintImpl ERC721SoulboundTokenNativeGaslessMint implementation contract address\\n  /// @param _fee fee per _maxSupply to be paid\\n  constructor(\\n    address _erc721TokenImpl,\\n    address _erc721SoulboundTokenImpl,\\n    address _erc721TokenNativeGaslessMintImpl,\\n    address _erc721SoulboundTokenNativeGaslessMintImpl,\\n    uint256 _fee\\n  ) {\\n    /* if (\\n      _erc721TokenImpl == address(0) ||\\n      _erc721SoulboundTokenImpl == address(0) ||\\n      _erc721TokenNativeGaslessMintImpl == address(0) ||\\n      _erc721SoulboundTokenNativeGaslessMintImpl == address(0)\\n    ) revert InvalidAddress(); */\\n\\n    assembly {\\n      if or(\\n        or(iszero(_erc721TokenImpl), iszero(_erc721SoulboundTokenImpl)),\\n        or(\\n          iszero(_erc721TokenNativeGaslessMintImpl),\\n          iszero(_erc721SoulboundTokenNativeGaslessMintImpl)\\n        )\\n      ) {\\n        mstore(0x00, 0xe6c4247b) // InvalidAddress()\\n        revert(0x1c, 0x04)\\n      }\\n    }\\n\\n    erc721TokenImpl = _erc721TokenImpl;\\n    erc721SoulboundTokenImpl = _erc721SoulboundTokenImpl;\\n    erc721TokenNativeGaslessMintImpl = _erc721TokenNativeGaslessMintImpl;\\n    erc721SoulboundTokenNativeGaslessMintImpl = _erc721SoulboundTokenNativeGaslessMintImpl;\\n    fee = _fee;\\n  }\\n\\n  /// @notice Deploys and initializes a new token clone with the params\\n  /// @dev Uses all token params + `_saltNonce` to calculate salt for clone.\\n  ///      Reverts if `fee * _maxSupply` is not passed in as msg.value.\\n  ///      Emits `ERC721TokenDeployed` or `ERC721SoulboundTokenDeployed`\\n  /// @param _tokenType Enum to differentiate type of token to deploy: ERC721Token | ERC721SoulboundToken | ERC721TokenNativeGaslessMint | ERC721SoulboundTokenNativeGaslessMint\\n  /// @param _name Token name\\n  /// @param _symbol Token symbol\\n  /// @param contractURI_ Token contract metadata URI\\n  /// @param tokenURI_ Token metadata URI\\n  /// @param _trustedAddress Address used for signatures\\n  /// @param _maxSupply Max allowed token amount\\n  /// @param _saltNonce Salt nonce to be used for the clone\\n  /// @return Address of the newly deployed clone\\n  function deployERC721Token(\\n    TokenType _tokenType,\\n    string memory _name,\\n    string memory _symbol,\\n    string memory contractURI_,\\n    string memory tokenURI_,\\n    address _trustedAddress,\\n    uint256 _maxSupply,\\n    uint256 _saltNonce\\n  ) external payable returns (address) {\\n    if (msg.value != fee * _maxSupply) revert InvalidFee();\\n\\n    address impl;\\n    if (_tokenType == TokenType.ERC721Token) impl = erc721TokenImpl;\\n    else if (_tokenType == TokenType.ERC721SoulboundToken)\\n      impl = erc721SoulboundTokenImpl;\\n    else if (_tokenType == TokenType.ERC721TokenNativeGaslessMint)\\n      impl = erc721TokenNativeGaslessMintImpl;\\n    else if (_tokenType == TokenType.ERC721SoulboundTokenNativeGaslessMint)\\n      impl = erc721SoulboundTokenNativeGaslessMintImpl;\\n\\n    address erc721TokenClone = Clones.cloneDeterministic(\\n      impl,\\n      keccak256(\\n        abi.encodePacked(\\n          _name,\\n          _symbol,\\n          contractURI_,\\n          tokenURI_,\\n          msg.sender,\\n          _trustedAddress,\\n          _maxSupply,\\n          _saltNonce\\n        )\\n      )\\n    );\\n    IERC721Token(erc721TokenClone).initialize(\\n      _name,\\n      _symbol,\\n      contractURI_,\\n      tokenURI_,\\n      msg.sender,\\n      _trustedAddress,\\n      _maxSupply\\n    );\\n\\n    /* emit ERC721TokenDeployed(_tokenType, erc721TokenClone, msg.sender, impl); */\\n    assembly {\\n      let memPtr := mload(64)\\n      mstore(memPtr, erc721TokenClone)\\n      log4(\\n        memPtr,\\n        32, // _erc721TokenClone\\n        0x23899f3b1fe55da77188b135df7513bf63e425a3958ee2866b3a19547c56effe, // ERC721TokenDeployed(uint8,address,address,address)\\n        _tokenType, // _tokenType\\n        caller(), // _creator\\n        impl // _erc721TokenImpl\\n      )\\n    }\\n\\n    return erc721TokenClone;\\n  }\\n\\n  /// @notice Set ERC721Token implementation contract address\\n  /// @dev Callable only by `owner`.\\n  ///      Reverts if `_erc721TokenImpl` is address(0).\\n  ///      Emits `ERC721TokenImplSet`\\n  /// @param _erc721TokenImpl ERC721Token implementation contract address\\n  function setERC721TokenImplAddress(\\n    address _erc721TokenImpl\\n  ) external onlyOwner {\\n    /* if (_erc721TokenImpl == address(0)) revert InvalidAddress(); */\\n\\n    assembly {\\n      if iszero(_erc721TokenImpl) {\\n        mstore(0x00, 0xe6c4247b) // InvalidAddress()\\n        revert(0x1c, 0x04)\\n      }\\n    }\\n\\n    address _oldERC721TokenImpl = erc721TokenImpl;\\n\\n    erc721TokenImpl = _erc721TokenImpl;\\n\\n    /* emit ERC721TokenImplSet(_oldERC721TokenImpl, _erc721TokenImpl); */\\n    assembly {\\n      let memPtr := mload(64)\\n      mstore(memPtr, _oldERC721TokenImpl) // _oldERC721TokenImpl\\n      mstore(add(memPtr, 32), _erc721TokenImpl) // _newERC721TokenImpl\\n      log1(\\n        memPtr,\\n        64,\\n        0xcbc745d8ffafdbb1db5af2ff6acd261357d2d6fa74ac0ea4389b92c8891a6bd8 // ERC721TokenImplSet(address,address)\\n      )\\n    }\\n  }\\n\\n  /// @notice Set ERC721SoulboundToken implementation contract address\\n  /// @dev Callable only by `owner`.\\n  ///      Reverts if `_erc721SoulboundTokenImpl` is address(0).\\n  ///      Emits `ERC721SoulboundTokenImplSet`\\n  /// @param _erc721SoulboundTokenImpl ERC721SoulboundToken implementation contract address\\n  function setERC721SoulboundTokenImplAddress(\\n    address _erc721SoulboundTokenImpl\\n  ) external onlyOwner {\\n    /* if (_erc721SoulboundTokenImpl == address(0)) revert InvalidAddress(); */\\n\\n    assembly {\\n      if iszero(_erc721SoulboundTokenImpl) {\\n        mstore(0x00, 0xe6c4247b) // InvalidAddress()\\n        revert(0x1c, 0x04)\\n      }\\n    }\\n\\n    address _oldERC721SoulboundTokenImpl = erc721SoulboundTokenImpl;\\n\\n    erc721SoulboundTokenImpl = _erc721SoulboundTokenImpl;\\n\\n    /* emit ERC721SoulboundTokenImplSet(\\n      _oldERC721SoulboundTokenImpl,\\n      _erc721SoulboundTokenImpl\\n    ); */\\n    assembly {\\n      let memPtr := mload(64)\\n      mstore(memPtr, _oldERC721SoulboundTokenImpl) // _oldERC721SoulboundTokenImpl\\n      mstore(add(memPtr, 32), _erc721SoulboundTokenImpl) // _newERC721SoulboundTokenImpl\\n      log1(\\n        memPtr,\\n        64,\\n        0x9367781c37dc381ab012632d88359dc932afe7feabe3bc1a25a1f244c7324d03 // ERC721SoulboundTokenImplSet(address,address)\\n      )\\n    }\\n  }\\n\\n  /// @notice Set ERC721TokenNativeGaslessMint implementation contract address\\n  /// @dev Callable only by `owner`.\\n  ///      Reverts if `_erc721TokenNativeGaslessMintImpl` is address(0).\\n  ///      Emits `ERC721TokenNativeGaslessMintImplSet`\\n  /// @param _erc721TokenNativeGaslessMintImpl ERC721TokenNativeGaslessMint implementation contract address\\n  function setERC721TokenNativeGaslessMintImplAddress(\\n    address _erc721TokenNativeGaslessMintImpl\\n  ) external onlyOwner {\\n    /* if (_erc721TokenNativeGaslessMintImpl == address(0)) revert InvalidAddress(); */\\n\\n    assembly {\\n      if iszero(_erc721TokenNativeGaslessMintImpl) {\\n        mstore(0x00, 0xe6c4247b) // InvalidAddress()\\n        revert(0x1c, 0x04)\\n      }\\n    }\\n\\n    address _oldERC721TokenNativeGaslessMintImpl = erc721TokenNativeGaslessMintImpl;\\n\\n    erc721TokenNativeGaslessMintImpl = _erc721TokenNativeGaslessMintImpl;\\n\\n    /* emit ERC721TokenNativeGaslessMintImplSet(\\n      _oldERC721TokenNativeGaslessMintImpl,\\n      _erc721TokenNativeGaslessMintImpl\\n    ); */\\n    assembly {\\n      let memPtr := mload(64)\\n      mstore(memPtr, _oldERC721TokenNativeGaslessMintImpl) // _oldERC721TokenNativeGaslessMintImpl\\n      mstore(add(memPtr, 32), _erc721TokenNativeGaslessMintImpl) // _newERC721TokenNativeGaslessMintImpl\\n      log1(\\n        memPtr,\\n        64,\\n        0x082b95c02b3eb688d1f091aae892ca75f69239366bbf8ecef64dbe962733f2b4 // ERC721TokenNativeGaslessMintImplSet(address,address)\\n      )\\n    }\\n  }\\n\\n  /// @notice Set ERC721SoulboundTokenNativeGaslessMint implementation contract address\\n  /// @dev Callable only by `owner`.\\n  ///      Reverts if `_erc721SoulboundTokenNativeGaslessMintImpl` is address(0).\\n  ///      Emits `ERC721SoulboundTokenNativeGaslessMintImplSet`\\n  /// @param _erc721SoulboundTokenNativeGaslessMintImpl ERC721SoulboundTokenNativeGaslessMint implementation contract address\\n  function setERC721SoulboundTokenNativeGaslessMintImplAddress(\\n    address _erc721SoulboundTokenNativeGaslessMintImpl\\n  ) external onlyOwner {\\n    /* if (_erc721SoulboundTokenNativeGaslessMintImpl == address(0)) revert InvalidAddress(); */\\n\\n    assembly {\\n      if iszero(_erc721SoulboundTokenNativeGaslessMintImpl) {\\n        mstore(0x00, 0xe6c4247b) // InvalidAddress()\\n        revert(0x1c, 0x04)\\n      }\\n    }\\n\\n    address _oldERC721SoulboundTokenNativeGaslessMintImpl = erc721SoulboundTokenNativeGaslessMintImpl;\\n\\n    erc721SoulboundTokenNativeGaslessMintImpl = _erc721SoulboundTokenNativeGaslessMintImpl;\\n\\n    /* emit ERC721SoulboundTokenNativeGaslessMintImplSet(\\n      _oldERC721SoulboundTokenNativeGaslessMintImpl,\\n      _erc721SoulboundTokenNativeGaslessMintImpl\\n    ); */\\n    assembly {\\n      let memPtr := mload(64)\\n      mstore(memPtr, _oldERC721SoulboundTokenNativeGaslessMintImpl) // _oldERC721SoulboundTokenNativeGaslessMintImpl\\n      mstore(add(memPtr, 32), _erc721SoulboundTokenNativeGaslessMintImpl) // _newERC721SoulboundTokenNativeGaslessMintImpl\\n      log1(\\n        memPtr,\\n        64,\\n        0x2d8808514ecfc7e19bbed72dc7ad5d4e76fc343879db03af8dc1195c437ff9f9 // ERC721SoulboundTokenNativeGaslessMintImplSet(address,address)\\n      )\\n    }\\n  }\\n\\n  /// @notice Set fee\\n  /// @dev Callable only by `owner`.\\n  ///      Emits `FeeSet`\\n  /// @param _fee fee per _maxSupply\\n  function setFee(uint256 _fee) external onlyOwner {\\n    uint256 _oldFee = fee;\\n    fee = _fee;\\n\\n    /* emit FeeSet(_oldFee, _fee); */\\n    assembly {\\n      let memPtr := mload(64)\\n      mstore(memPtr, _oldFee) // _oldFee\\n      mstore(add(memPtr, 32), _fee) // _newFee\\n      log1(\\n        memPtr,\\n        64,\\n        0x74dbbbe280ef27b79a8a0c449d5ae2ba7a31849103241d0f98df70bbc9d03e37 // FeeSet(uint256,uint256)\\n      )\\n    }\\n  }\\n\\n  /// @notice Withdraw funds to `_feeTreasury`\\n  /// @dev Transfers contract balance only to `_feeTreasury`, iff balance > 0.\\n  ///      Emits `Withdrawal`\\n  function withdraw(address _feeTreasury) external onlyOwner {\\n    uint256 _balance = address(this).balance;\\n\\n    if (_balance > 0) {\\n      (bool success, ) = _feeTreasury.call{value: _balance}(\\\"\\\");\\n      /* if (!success) revert TransferFailed(); */\\n      assembly {\\n        if iszero(success) {\\n          mstore(0x00, 0x90b8ec18) // TransferFailed()\\n          revert(0x1c, 0x04)\\n        }\\n      }\\n\\n      /* emit Withdrawal(_feeTreasury, _balance); */\\n      assembly {\\n        let memPtr := mload(64)\\n        mstore(memPtr, _feeTreasury) // _feeTreasury\\n        mstore(add(memPtr, 32), _balance) // _amount\\n        log1(\\n          memPtr,\\n          64,\\n          0x7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b65 // Withdrawal(address,uint256)\\n        )\\n      }\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/tokens/erc721/clones/interfaces/IERC721Token.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC721Token {\\n  function initialize(\\n    string memory _name,\\n    string memory _symbol,\\n    string memory contractURI_,\\n    string memory tokenURI_,\\n    address _owner,\\n    address _trustedAddress,\\n    uint256 _maxSupply\\n  ) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 800\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc721TokenImpl\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_erc721SoulboundTokenImpl\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_erc721TokenNativeGaslessMintImpl\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_erc721SoulboundTokenNativeGaslessMintImpl\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidFee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_oldERC721SoulboundTokenImpl\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newERC721SoulboundTokenImpl\",\"type\":\"address\"}],\"name\":\"ERC721SoulboundTokenImplSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_oldERC721SoulboundTokenNativeGaslessMintImpl\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newERC721SoulboundTokenNativeGaslessMintImpl\",\"type\":\"address\"}],\"name\":\"ERC721SoulboundTokenNativeGaslessMintImplSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum ERC721TokenNativeGaslessMintFactory.TokenType\",\"name\":\"_tokenType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_erc721TokenClone\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_erc721TokenImpl\",\"type\":\"address\"}],\"name\":\"ERC721TokenDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_oldERC721TokenImpl\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newERC721TokenImpl\",\"type\":\"address\"}],\"name\":\"ERC721TokenImplSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_oldERC721TokenNativeGaslessMintImpl\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newERC721TokenNativeGaslessMintImpl\",\"type\":\"address\"}],\"name\":\"ERC721TokenNativeGaslessMintImplSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"FeeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_feeTreasury\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"enum ERC721TokenNativeGaslessMintFactory.TokenType\",\"name\":\"_tokenType\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"contractURI_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenURI_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_trustedAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_saltNonce\",\"type\":\"uint256\"}],\"name\":\"deployERC721Token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc721SoulboundTokenImpl\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc721SoulboundTokenNativeGaslessMintImpl\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc721TokenImpl\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc721TokenNativeGaslessMintImpl\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc721SoulboundTokenImpl\",\"type\":\"address\"}],\"name\":\"setERC721SoulboundTokenImplAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc721SoulboundTokenNativeGaslessMintImpl\",\"type\":\"address\"}],\"name\":\"setERC721SoulboundTokenNativeGaslessMintImplAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc721TokenImpl\",\"type\":\"address\"}],\"name\":\"setERC721TokenImplAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc721TokenNativeGaslessMintImpl\",\"type\":\"address\"}],\"name\":\"setERC721TokenNativeGaslessMintImplAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeTreasury\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ERC721TokenNativeGaslessMintFactory", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "800", "ConstructorArguments": "000000000000000000000000ba6ba1fb7597cf8692a46c9c63e8ea2e510b9c140000000000000000000000009712b99c1a86a1e16ad92330219003ac253aed940000000000000000000000006bfc8913b304e4c192a3e2673eaaaea681008ede000000000000000000000000b63fcc5324b23aa01ad9186a5f1cb4fef5baa1fc0000000000000000000000000000000000000000000000000001c6bf52634000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}