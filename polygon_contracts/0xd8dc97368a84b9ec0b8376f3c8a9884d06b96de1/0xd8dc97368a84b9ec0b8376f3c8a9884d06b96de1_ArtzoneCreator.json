{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Artzone/ArtzoneCreator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.11;\\n\\nimport \\\"../ERC1155/ERC1155CreatorBase.sol\\\";\\nimport \\\"./IArtzoneCreator.sol\\\";\\nimport \\\"../Helpers/Permissions/PermissionControl.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\ncontract ArtzoneCreator is\\n  ReentrancyGuard,\\n  ERC1155CreatorBase,\\n  IArtzoneCreator,\\n  PermissionControl\\n{\\n  uint64 public constant MAX_BPS = 10_000;\\n  uint256 public ARTZONE_MINTER_FEE_BPS;\\n\\n  mapping(uint256 => address) internal _tokenRevenueRecipient;\\n  mapping(uint256 => mapping(address => uint256)) internal _userTokenClaimCount;\\n\\n  constructor(\\n    string memory name_,\\n    string memory symbol_,\\n    uint256 feeBps_\\n  ) ERC1155CreatorBase(name_, symbol_) {\\n    ARTZONE_MINTER_FEE_BPS = feeBps_;\\n  }\\n\\n  modifier checkTokenClaimable(uint256 tokenId, address user) {\\n    TokenClaimType claimStatus = _tokenMetadata[tokenId].claimStatus;\\n    if (isPermissionedUser(user)) {\\n      require(\\n        claimStatus == TokenClaimType.PUBLIC || claimStatus == TokenClaimType.ADMIN,\\n        \\\"Token mint disabled\\\"\\n      );\\n    } else {\\n      require(claimStatus == TokenClaimType.PUBLIC, \\\"Token public mint disabled\\\");\\n    }\\n    _;\\n  }\\n\\n  /**\\n   * @dev See {IArtzoneCreator-initialiseNewSingleToken}.\\n   */\\n  function initialiseNewSingleToken(\\n    TokenMetadataConfig calldata tokenConfig,\\n    address revenueRecipient\\n  ) external onlyPermissionedUser returns (uint256 tokenId) {\\n    tokenId = _initialiseToken(tokenConfig, revenueRecipient);\\n  }\\n\\n  /**\\n   * @dev See {IArtzoneCreator-initialiseNewMultipleToken}.\\n   */\\n  function initialiseNewMultipleTokens(\\n    TokenMetadataConfig[] calldata tokenConfigs,\\n    address[] calldata revenueRecipients\\n  ) external onlyPermissionedUser returns (uint256[] memory tokenIds) {\\n    uint256 length = tokenConfigs.length;\\n    tokenIds = new uint256[](length);\\n\\n    for (uint256 i = 0; i < length; ) {\\n      uint256 tokenId = _initialiseToken(tokenConfigs[i], revenueRecipients[i]);\\n      tokenIds[i] = tokenId;\\n      unchecked {\\n        i++;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Internal function to initialise a token via all the parameters of `TokenMetadataConfig` specified alongside with the `revenueRecipient` for mint fee collection.\\n   */\\n  function _initialiseToken(TokenMetadataConfig calldata tokenConfig, address revenueRecipient)\\n    internal\\n    returns (uint256 tokenId)\\n  {\\n    require(tokenConfig.totalSupply == 0, \\\"Initial total supply should be 0\\\");\\n    require(tokenConfig.maxSupply > 0, \\\"Invalid amount\\\");\\n    require(tokenConfig.maxClaimPerUser > 0, \\\"Invalid max claim quantity\\\");\\n    require(\\n      tokenConfig.maxClaimPerUser <= tokenConfig.maxSupply,\\n      \\\"Invalid individual claim quantity\\\"\\n    );\\n\\n    tokenId = ++_tokenCount;\\n\\n    _tokenMetadata[tokenId] = tokenConfig;\\n    _tokenRevenueRecipient[tokenId] = revenueRecipient;\\n\\n    emit TokenInitialised(\\n      tokenId,\\n      tokenConfig.maxSupply,\\n      tokenConfig.price,\\n      tokenConfig.maxClaimPerUser,\\n      tokenConfig.uri,\\n      revenueRecipient\\n    );\\n  }\\n\\n  /**\\n   * @dev See {IArtzoneCreator-mintExistingSingleToken}.\\n   */\\n  function mintExistingSingleToken(\\n    address receiver,\\n    uint256 tokenId,\\n    uint256 amount\\n  ) external payable {\\n    require(amount > 0, \\\"Invalid amount\\\");\\n    if (!isPermissionedUser(msg.sender) && _tokenMetadata[tokenId].price > 0) {\\n      uint256 totalPayableAmount = _tokenMetadata[tokenId].price * amount;\\n      require(msg.value == totalPayableAmount, \\\"Unmatched value sent\\\");\\n      _processMintFees(tokenId, totalPayableAmount);\\n    }\\n    _mintExistingToken(tokenId, receiver, amount);\\n  }\\n\\n  /**\\n   * @dev See {IArtzoneCreator-mintExistingMultipleToken}.\\n   */\\n  function mintExistingMultipleTokens(\\n    address[] calldata receivers,\\n    uint256[] calldata tokenIds,\\n    uint256[] calldata amounts\\n  ) external payable {\\n    require(\\n      receivers.length == tokenIds.length && tokenIds.length == amounts.length,\\n      \\\"Invalid inputs\\\"\\n    );\\n    uint256 length = receivers.length;\\n\\n    if (!isPermissionedUser(msg.sender)) {\\n      uint256 totalPayableAmount;\\n      uint256[] memory payableAmounts = new uint256[](length);\\n      for (uint256 i = 0; i < length; ) {\\n        uint256 payableAmount = _tokenMetadata[tokenIds[i]].price * amounts[i];\\n        totalPayableAmount += payableAmount;\\n        payableAmounts[i] = payableAmount;\\n        unchecked {\\n          i++;\\n        }\\n      }\\n      require(msg.value == totalPayableAmount, \\\"Unmatched value sent\\\");\\n      _batchProcessMintFees(tokenIds, payableAmounts);\\n    }\\n\\n    for (uint256 i = 0; i < length; ) {\\n      require(amounts[i] > 0, \\\"Invalid amount\\\");\\n      _mintExistingToken(tokenIds[i], receivers[i], amounts[i]);\\n      unchecked {\\n        i++;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Internal function to process minting of a valid `tokenId` with the specified `amount` and `receiver`.\\n   */\\n  function _mintExistingToken(\\n    uint256 tokenId,\\n    address receiver,\\n    uint256 amount\\n  ) internal nonReentrant checkTokenClaimable(tokenId, msg.sender) {\\n    require(tokenId <= _tokenCount, \\\"Invalid tokenId specified\\\");\\n    require(\\n      _tokenMetadata[tokenId].totalSupply + amount <= _tokenMetadata[tokenId].maxSupply,\\n      \\\"Invalid amount specified\\\"\\n    );\\n    require(\\n      _userTokenClaimCount[tokenId][receiver] + amount <= _tokenMetadata[tokenId].maxClaimPerUser,\\n      \\\"Exceed token max claim limit\\\"\\n    );\\n\\n    _tokenMetadata[tokenId].totalSupply += amount;\\n    _userTokenClaimCount[tokenId][receiver] += amount;\\n    _mint(receiver, tokenId, amount, \\\"\\\");\\n\\n    emit TokenMint(tokenId, amount, receiver, msg.sender, _tokenMetadata[tokenId].price * amount);\\n  }\\n\\n  /**\\n   * @dev Internal function to handle multiple processing of mint fees when `mintExistingMultipleTokens` is called via a non-permissioned user.\\n   */\\n  function _batchProcessMintFees(uint256[] calldata tokenIds, uint256[] memory payableAmounts)\\n    internal\\n  {\\n    for (uint256 i = 0; i < tokenIds.length; ) {\\n      if (payableAmounts[i] > 0) {\\n        _processMintFees(tokenIds[i], payableAmounts[i]);\\n      }\\n      unchecked {\\n        i++;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Internal function to process mint fees and transfer outstanding payable revenue to `revenueRecipient` after deducting from Artzone's fee cut portion.\\n   */\\n  function _processMintFees(uint256 tokenId, uint256 totalPayableAmount) internal nonReentrant {\\n    uint256 artzoneFee = (totalPayableAmount * ARTZONE_MINTER_FEE_BPS) / MAX_BPS;\\n    payable(_tokenRevenueRecipient[tokenId]).transfer(totalPayableAmount - artzoneFee);\\n  }\\n\\n  /**\\n   * @dev Set token uri after a token is minted by permissioned user.\\n   */\\n  function updateTokenURI(uint256 tokenId, string calldata uri)\\n    external\\n    override(ERC1155CreatorBase, IERC1155CreatorBase)\\n    onlyPermissionedUser\\n  {\\n    _setTokenURI(tokenId, uri);\\n  }\\n\\n  /**\\n   * @dev Set token uri after a token is minted by permissioned user.\\n   */\\n  function updateTokenClaimStatus(uint256 tokenId, TokenClaimType claimStatus)\\n    external\\n    override(ERC1155CreatorBase, IERC1155CreatorBase)\\n    onlyPermissionedUser\\n  {\\n    _setTokenClaimStatus(tokenId, claimStatus);\\n  }\\n\\n  /**\\n   * @dev Set secondary royalties for a particular tokenId by permissioned user.\\n   */\\n  function setRoyalties(\\n    uint256 tokenId,\\n    address payable[] calldata receivers,\\n    uint256[] calldata basisPoints\\n  ) external override(ERC1155CreatorBase, IERC1155CreatorBase) onlyPermissionedUser {\\n    _setRoyalties(tokenId, receivers, basisPoints);\\n  }\\n\\n  /**\\n   * @dev See {IArtzoneCreator-updateTokenRevenueRecipient}.\\n   */\\n  function updateTokenRevenueRecipient(uint256 tokenId, address newRecipient)\\n    external\\n    isExistingToken(tokenId)\\n    onlyPermissionedUser\\n  {\\n    require(newRecipient != address(0), \\\"Null address\\\");\\n    _tokenRevenueRecipient[tokenId] = newRecipient;\\n\\n    emit TokenRevenueRecipientUpdate(tokenId, newRecipient);\\n  }\\n\\n  /**\\n   * @dev See {IArtzoneCreator-updateArtzoneFeeBps}.\\n   */\\n  function updateArtzoneFeeBps(uint256 bps) external onlyPermissionedUser {\\n    require(bps < MAX_BPS, \\\"Invalid basis points\\\");\\n    ARTZONE_MINTER_FEE_BPS = bps;\\n  }\\n\\n   /**\\n   * @dev See {IArtzoneCreator-updateArtzoneFeeBps}.\\n   */\\n   function tokenAmountClaimedByUser(uint256 tokenId, address recipient) external view returns (uint256) {\\n      return _userTokenClaimCount[tokenId][recipient];\\n   }\\n\\n  /**\\n   * @dev See {IERC165-supportsInterface}.\\n   */\\n  function supportsInterface(bytes4 interfaceId)\\n    public\\n    view\\n    virtual\\n    override(ERC1155CreatorBase, PermissionControl, IERC165)\\n    returns (bool)\\n  {\\n    return super.supportsInterface(interfaceId) ||\\n      ERC1155CreatorBase.supportsInterface(interfaceId) ||\\n      PermissionControl.supportsInterface(interfaceId);\\n  }\\n\\n  /**\\n   * @dev See {IArtzoneCreator-withdraw}.\\n   */\\n  function withdraw(address recipient) external payable onlyOwner {\\n    payable(recipient).transfer(address(this).balance);\\n  }\\n\\n  /// @dev Lets the contract receives native tokens from `nativeTokenWrapper` withdraw.\\n  receive() external payable {}\\n}\\n\"\r\n    },\r\n    \"contracts/ERC1155/ERC1155CreatorBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nimport \\\"./ERC1155Core.sol\\\";\\nimport \\\"./IERC1155CreatorBase.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\nabstract contract ERC1155CreatorBase is ERC1155Core, IERC1155CreatorBase, ReentrancyGuard {\\n  using Strings for uint256;\\n\\n  uint256 internal _tokenCount = 0;\\n\\n  mapping(uint256 => TokenMetadataConfig) internal _tokenMetadata;\\n  // mapping(uint256 => uint256) internal _tokenSupply;\\n  // // Mapping for individual token URIs\\n  // mapping(uint256 => string) internal _tokenURIs;\\n  // mapping(uint256 => RoyaltyConfig[]) internal _tokenRoyalty;\\n\\n  bytes4 private constant ERC1155_CREATORBASE_V1 = 0x28f10a21;\\n\\n  /**\\n   * External interface identifiers for royalties\\n   */\\n\\n  /**\\n   *  @dev CreatorCore\\n   *\\n   *  bytes4(keccak256('getRoyalties(uint256)')) == 0xbb3bafd6\\n   *\\n   *  => 0xbb3bafd6 = 0xbb3bafd6\\n   */\\n  bytes4 private constant INTERFACE_ID_ROYALTIES_CREATORBASE = 0xbb3bafd6;\\n\\n  /**\\n   *  @dev Rarible: RoyaltiesV1\\n   *\\n   *  bytes4(keccak256('getFeeRecipients(uint256)')) == 0xb9c4d9fb\\n   *  bytes4(keccak256('getFeeBps(uint256)')) == 0x0ebd4c7f\\n   *\\n   *  => 0xb9c4d9fb ^ 0x0ebd4c7f = 0xb7799584\\n   */\\n  bytes4 private constant INTERFACE_ID_ROYALTIES_RARIBLE = 0xb7799584;\\n\\n  /**\\n   *  @dev Foundation\\n   *\\n   *  bytes4(keccak256('getFees(uint256)')) == 0xd5a06d4c\\n   *\\n   *  => 0xd5a06d4c = 0xd5a06d4c\\n   */\\n  bytes4 private constant INTERFACE_ID_ROYALTIES_FOUNDATION = 0xd5a06d4c;\\n\\n  /**\\n   *  @dev EIP-2981\\n   *\\n   * bytes4(keccak256(\\\"royaltyInfo(uint256,uint256)\\\")) == 0x2a55205a\\n   *\\n   * => 0x2a55205a = 0x2a55205a\\n   */\\n  bytes4 private constant INTERFACE_ID_ROYALTIES_EIP2981 = 0x2a55205a;\\n\\n  modifier isExistingToken(uint256 tokenId) {\\n    require(tokenId > 0 && tokenId <= _tokenCount, \\\"Invalid token\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n   */\\n  constructor(string memory name_, string memory symbol_) {\\n    _name = name_;\\n    _symbol = symbol_;\\n  }\\n\\n  /**\\n   * @dev See {IERC165-supportsInterface}.\\n   */\\n  function supportsInterface(bytes4 interfaceId)\\n    public\\n    view\\n    virtual\\n    override(ERC1155Core, IERC165)\\n    returns (bool)\\n  {\\n    return\\n      interfaceId == type(IERC1155CreatorBase).interfaceId ||\\n      interfaceId == ERC1155_CREATORBASE_V1 ||\\n      super.supportsInterface(interfaceId) ||\\n      interfaceId == INTERFACE_ID_ROYALTIES_CREATORBASE ||\\n      interfaceId == INTERFACE_ID_ROYALTIES_RARIBLE ||\\n      interfaceId == INTERFACE_ID_ROYALTIES_FOUNDATION ||\\n      interfaceId == INTERFACE_ID_ROYALTIES_EIP2981;\\n  }\\n\\n  /**\\n   * @dev See {IERC1155CreatorBase-updateTokenURI}.\\n   */\\n  function updateTokenURI(uint256 tokenId, string calldata uri) external virtual {\\n    _setTokenURI(tokenId, uri);\\n  }\\n\\n  /**\\n   * @dev See {IERC1155CreatorBase-updateTokenClaimStatus}.\\n   */\\n  function updateTokenClaimStatus(uint256 tokenId, TokenClaimType claimStatus) external virtual {\\n    _setTokenClaimStatus(tokenId, claimStatus);\\n  }\\n\\n  /**\\n   * @dev See {IERC1155CreatorBase-updateTokenURI}.\\n   */\\n  function setRoyalties(\\n    uint256 tokenId,\\n    address payable[] calldata receivers,\\n    uint256[] calldata basisPoints\\n  ) external virtual {\\n    _setRoyalties(tokenId, receivers, basisPoints);\\n  }\\n\\n  /**\\n   * @dev Set token uri for an existing tokenId.\\n   */\\n  function _setTokenURI(uint256 tokenId, string calldata uri)\\n    internal\\n    virtual\\n    isExistingToken(tokenId)\\n  {\\n    _tokenMetadata[tokenId].uri = uri;\\n  }\\n\\n  /**\\n   * @dev Set new public mint price for an existing tokenId.\\n   */\\n  function _setTokenMintPrice(uint256 tokenId, uint256 newPrice)\\n    internal\\n    virtual\\n    isExistingToken(tokenId)\\n  {\\n    _tokenMetadata[tokenId].price = newPrice;\\n  }\\n\\n  /**\\n   * @dev Set claim status for an existing tokenId.\\n   */\\n  function _setTokenClaimStatus(uint256 tokenId, TokenClaimType claimStatus)\\n    internal\\n    virtual\\n    isExistingToken(tokenId)\\n  {\\n    _tokenMetadata[tokenId].claimStatus = claimStatus;\\n\\n    emit TokenClaimStatusUpdate(tokenId, claimStatus);\\n  }\\n\\n  /**\\n   * @dev See {IERC1155MetadataURI-uri}.\\n   */\\n  function uri(uint256 id) external view returns (string memory tokenURI) {\\n    tokenURI = _tokenURI(id);\\n  }\\n\\n  /**\\n   * @dev See {IERC1155CreatorBase-totalSupply}.\\n   */\\n  function totalSupply(uint256 tokenId)\\n    external\\n    view\\n    isExistingToken(tokenId)\\n    returns (uint256 totalSupply)\\n  {\\n    totalSupply = _tokenMetadata[tokenId].totalSupply;\\n  }\\n\\n  /**\\n   * @dev See {IERC1155CreatorBase-maxSupply}.\\n   */\\n  function maxSupply(uint256 tokenId)\\n    external\\n    view\\n    isExistingToken(tokenId)\\n    returns (uint256 maxSupply)\\n  {\\n    maxSupply = _tokenMetadata[tokenId].maxSupply;\\n  }\\n\\n  /**\\n   * @dev See {IERC1155CreatorBase-publicMintPrice}.\\n   */\\n  function publicMintPrice(uint256 tokenId)\\n    external\\n    view\\n    isExistingToken(tokenId)\\n    returns (uint256 mintPrice)\\n  {\\n    mintPrice = _tokenMetadata[tokenId].price;\\n  }\\n\\n  /**\\n   * @dev See {IERC1155CreatorBase-publicMintPrice}.\\n   */\\n  function updateTokenMintPrice(uint256 tokenId, uint256 newPrice) external {\\n    _tokenMetadata[tokenId].price = newPrice;\\n  }\\n\\n  /**\\n   * @dev See {IERC1155CreatorBase-tokenMetadata}.\\n   */\\n  function tokenMetadata(uint256 tokenId)\\n    external\\n    view\\n    isExistingToken(tokenId)\\n    returns (\\n      uint256 totalSupply,\\n      uint256 maxSupply,\\n      uint256 mintPrice,\\n      uint256 maxClaimPerUser,\\n      string memory uri,\\n      TokenClaimType claimStatus\\n    )\\n  {\\n    TokenMetadataConfig memory tokenMetadata = _tokenMetadata[tokenId];\\n    totalSupply = tokenMetadata.totalSupply;\\n    maxSupply = tokenMetadata.maxSupply;\\n    mintPrice = tokenMetadata.price;\\n    maxClaimPerUser = tokenMetadata.maxClaimPerUser;\\n    uri = tokenMetadata.uri;\\n    claimStatus = tokenMetadata.claimStatus;\\n  }\\n\\n  /**\\n   * @dev Retrieve an existing token's URI\\n   */\\n  function _tokenURI(uint256 tokenId)\\n    internal\\n    view\\n    isExistingToken(tokenId)\\n    returns (string memory uri)\\n  {\\n    uri = _tokenMetadata[tokenId].uri;\\n  }\\n\\n  /**\\n   * @dev See {ICreatorCore-getRoyalties}.\\n   */\\n  function getRoyalties(uint256 tokenId)\\n    external\\n    view\\n    virtual\\n    override\\n    returns (address payable[] memory, uint256[] memory)\\n  {\\n    return _getRoyalties(tokenId);\\n  }\\n\\n  /**\\n   * @dev See {ICreatorCore-getFees}.\\n   */\\n  function getFees(uint256 tokenId)\\n    external\\n    view\\n    virtual\\n    override\\n    returns (address payable[] memory, uint256[] memory)\\n  {\\n    return _getRoyalties(tokenId);\\n  }\\n\\n  /**\\n   * @dev See {ICreatorCore-getFeeRecipients}.\\n   */\\n  function getFeeRecipients(uint256 tokenId)\\n    external\\n    view\\n    virtual\\n    override\\n    returns (address payable[] memory)\\n  {\\n    return _getRoyaltyReceivers(tokenId);\\n  }\\n\\n  /**\\n   * @dev See {ICreatorCore-getFeeBps}.\\n   */\\n  function getFeeBps(uint256 tokenId) external view virtual override returns (uint256[] memory) {\\n    return _getRoyaltyBPS(tokenId);\\n  }\\n\\n  /**\\n   * @dev See {ICreatorCore-royaltyInfo}.\\n   */\\n  function royaltyInfo(uint256 tokenId, uint256 value)\\n    external\\n    view\\n    virtual\\n    override\\n    returns (address, uint256)\\n  {\\n    return _getRoyaltyInfo(tokenId, value);\\n  }\\n\\n  /**\\n   * Helper to get royalties for a token\\n   */\\n  function _getRoyalties(uint256 tokenId)\\n    internal\\n    view\\n    isExistingToken(tokenId)\\n    returns (address payable[] memory receivers, uint256[] memory bps)\\n  {\\n    RoyaltyConfig[] memory royalties = _tokenMetadata[tokenId].royalties;\\n\\n    if (royalties.length == 0) {\\n      receivers = new address payable[](1);\\n      receivers[0] = payable(address(0));\\n      bps = new uint256[](1);\\n      bps[0] = 0;\\n    }\\n\\n    if (royalties.length > 0) {\\n      receivers = new address payable[](royalties.length);\\n      bps = new uint256[](royalties.length);\\n      for (uint256 i; i < royalties.length; ) {\\n        receivers[i] = royalties[i].receiver;\\n        bps[i] = royalties[i].bps;\\n        unchecked {\\n          ++i;\\n        }\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Helper to get royalty receivers for a token\\n   */\\n  function _getRoyaltyReceivers(uint256 tokenId)\\n    internal\\n    view\\n    returns (address payable[] memory recievers)\\n  {\\n    (recievers, ) = _getRoyalties(tokenId);\\n  }\\n\\n  /**\\n   * Helper to get royalty basis points for a token\\n   */\\n  function _getRoyaltyBPS(uint256 tokenId) internal view returns (uint256[] memory bps) {\\n    (, bps) = _getRoyalties(tokenId);\\n  }\\n\\n  function _getRoyaltyInfo(uint256 tokenId, uint256 value)\\n    internal\\n    view\\n    returns (address receiver, uint256 amount)\\n  {\\n    (address payable[] memory receivers, uint256[] memory bps) = _getRoyalties(tokenId);\\n    require(receivers.length <= 1, \\\"More than 1 royalty receiver\\\");\\n\\n    if (receivers.length == 0) {\\n      return (address(this), 0);\\n    }\\n    return (receivers[0], (bps[0] * value) / 10000);\\n  }\\n\\n  /**\\n   * Set royalties for a token\\n   */\\n  function _setRoyalties(\\n    uint256 tokenId,\\n    address payable[] calldata receivers,\\n    uint256[] calldata basisPoints\\n  ) internal {\\n    _checkRoyalties(receivers, basisPoints);\\n    delete _tokenMetadata[tokenId].royalties;\\n    _setRoyalties(receivers, basisPoints, _tokenMetadata[tokenId].royalties);\\n    emit RoyaltiesUpdated(tokenId, receivers, basisPoints);\\n  }\\n\\n  /**\\n   * Helper function to set royalties\\n   */\\n  function _setRoyalties(\\n    address payable[] calldata receivers,\\n    uint256[] calldata basisPoints,\\n    RoyaltyConfig[] storage royalties\\n  ) private {\\n    for (uint256 i; i < basisPoints.length; ) {\\n      royalties.push(RoyaltyConfig({receiver: receivers[i], bps: uint16(basisPoints[i])}));\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Helper function to check that royalties provided are valid\\n   */\\n  function _checkRoyalties(address payable[] calldata receivers, uint256[] calldata basisPoints)\\n    private\\n    pure\\n  {\\n    require(receivers.length == basisPoints.length, \\\"Invalid receivers & bps input\\\");\\n\\n    uint256 totalBasisPoints;\\n    for (uint256 i; i < basisPoints.length; ) {\\n      totalBasisPoints += basisPoints[i];\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n    require(totalBasisPoints < 10000, \\\"Invalid total royalties\\\");\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/Artzone/IArtzoneCreator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.11;\\n\\nimport \\\"../ERC1155/IERC1155CreatorBase.sol\\\";\\n\\ninterface IArtzoneCreator is IERC1155CreatorBase {\\n  /**\\n   * @dev Event when a Token parameters are initialised.\\n   */\\n  event TokenInitialised(\\n    uint256 indexed tokenId,\\n    uint256 maxSupply,\\n    uint256 price,\\n    uint256 maxClaimPerUser,\\n    string tokenUri,\\n    address revenueRecipient\\n  );\\n\\n  /**\\n   * @dev Event when an Initialised Token has been minted.\\n   */\\n  event TokenMint(\\n    uint256 indexed tokenId,\\n    uint256 amount,\\n    address receiver,\\n    address minter,\\n    uint256 value\\n  );\\n\\n  /**\\n   * @dev Event when a revenue recipient of an initialised token has been updated.\\n   */\\n  event TokenRevenueRecipientUpdate(uint256 indexed tokenId, address revenueRecipient);\\n\\n\\n  /**\\n   * @dev Set the parameters for a tokenId - tokenUri and maximum amount to be minted. Returns tokenId assigned. Can only be called by Admin.\\n   */\\n  function initialiseNewSingleToken(\\n    TokenMetadataConfig calldata tokenConfig,\\n    address revenueRecipient\\n  ) external returns (uint256);\\n\\n  /**\\n   * @dev Set the parameters for multiple tokenIds - tokenUri and maximum amount to be minted.  Can only be called by owner/admin. Returns array of tokenIds assigned.\\n   */\\n  function initialiseNewMultipleTokens(\\n    TokenMetadataConfig[] calldata tokenConfigs,\\n    address[] calldata revenueRecipients\\n  ) external returns (uint256[] memory);\\n\\n  /**\\n   * @dev Mints existing single token.  Can be called by any user. Returns tokenId assigned.\\n   */\\n  function mintExistingSingleToken(\\n    address receiver,\\n    uint256 tokenId,\\n    uint256 amount\\n  ) external payable;\\n\\n  /**\\n   * @dev Mints multiple tokens.  Can be called by any user. Returns tokenId assigned.\\n   */\\n  function mintExistingMultipleTokens(\\n    address[] calldata receivers,\\n    uint256[] calldata tokenIds,\\n    uint256[] calldata amounts\\n  ) external payable;\\n\\n  /**\\n   * @dev Returns the total quantity claimed by a user for a token.\\n   */\\n  function tokenAmountClaimedByUser(uint256 tokenId, address recipient) external view returns(uint256);\\n\\n  /**\\n   * @dev Update revenue recipient for an initialised token. Can only be called by Admin.\\n   */\\n  function updateTokenRevenueRecipient(uint256 tokenId, address newRecipient) external;\\n\\n  /**\\n   * @dev Update Artzone Minter fee basis points for NFT minting sale. Can only be called by Admin.\\n   */\\n  function updateArtzoneFeeBps(uint256 bps) external;\\n\\n  /**\\n   * @dev Withdraw function to withdraw fees collected from each paid NFT mint by public users to a specified recipient. To only be called by Admin.\\n   */\\n  function withdraw(address recipient) external payable;\\n}\\n\"\r\n    },\r\n    \"contracts/Helpers/Permissions/PermissionControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"../BoringOwnable.sol\\\";\\nimport \\\"./IPermissionControl.sol\\\";\\n\\nabstract contract PermissionControl is IPermissionControl, BoringOwnable, ERC165 {\\n  using EnumerableSet for EnumerableSet.AddressSet;\\n\\n  EnumerableSet.AddressSet private _permissionedUsers;\\n\\n  /**\\n   * @dev Only allows approved admins or owner to call the specified function\\n   */\\n  modifier onlyPermissionedUser() {\\n    require(\\n      owner == msg.sender || _permissionedUsers.contains(msg.sender),\\n      \\\"PermissionControl: Only owner or existing admin allowed.\\\"\\n    );\\n    _;\\n  }\\n\\n  /**\\n   * @dev See {IERC165-supportsInterface}.\\n   */\\n  function supportsInterface(bytes4 interfaceId)\\n    public\\n    view\\n    virtual\\n    override(ERC165, IERC165)\\n    returns (bool)\\n  {\\n    return\\n      interfaceId == type(IPermissionControl).interfaceId || super.supportsInterface(interfaceId);\\n  }\\n\\n  /**\\n   * @dev See {IAdminControl-getAdmins}.\\n   */\\n  function getAllPermissionedUsers()\\n    external\\n    view\\n    override\\n    returns (address[] memory permissionedUsers)\\n  {\\n    permissionedUsers = new address[](_permissionedUsers.length());\\n    for (uint256 i = 0; i < _permissionedUsers.length(); i++) {\\n      permissionedUsers[i] = _permissionedUsers.at(i);\\n    }\\n  }\\n\\n  /**\\n   * @dev See {IPernissionControl-grantPermissionToUser}.\\n   */\\n  function grantPermissionToUser(address newAdmin) external override onlyOwner {\\n    if (!_permissionedUsers.contains(newAdmin)) {\\n      emit PermissionGranted(newAdmin, msg.sender);\\n      _permissionedUsers.add(newAdmin);\\n    }\\n  }\\n\\n  /**\\n   * @dev See {IPernissionControl-revokePermission}.\\n   */\\n  function revokePermission(address newAdmin) external override onlyOwner {\\n    if (_permissionedUsers.contains(newAdmin)) {\\n      emit PermissionRevoked(newAdmin, msg.sender);\\n      _permissionedUsers.remove(newAdmin);\\n    }\\n  }\\n\\n  /**\\n   * @dev See {IAdminControl-isAdmin}.\\n   */\\n  function isPermissionedUser(address user) public view override returns (bool) {\\n    return (owner == user || _permissionedUsers.contains(user));\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface,\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            _supportsERC165Interface(account, type(IERC165).interfaceId) &&\\n            !_supportsERC165Interface(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && _supportsERC165Interface(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds)\\n        internal\\n        view\\n        returns (bool[] memory)\\n    {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = _supportsERC165Interface(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in _interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!_supportsERC165Interface(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function _supportsERC165Interface(address account, bytes4 interfaceId) private view returns (bool) {\\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\\n        (bool success, bytes memory result) = account.staticcall{gas: 30000}(encodedParams);\\n        if (result.length < 32) return false;\\n        return success && abi.decode(result, (bool));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ERC1155/ERC1155Core.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\nabstract contract ERC1155Core is ERC165, IERC1155, IERC1155MetadataURI {\\n  using Address for address;\\n\\n  // Token name\\n  string internal _name;\\n\\n  // Token symbol\\n  string internal _symbol;\\n\\n  // Mapping from token ID to account balances\\n  mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n  // Mapping from account to operator approvals\\n  mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n  /**\\n   * @dev See {IERC165-supportsInterface}.\\n   */\\n  function supportsInterface(bytes4 interfaceId)\\n    public\\n    view\\n    virtual\\n    override(ERC165, IERC165)\\n    returns (bool)\\n  {\\n    return\\n      interfaceId == type(IERC1155).interfaceId ||\\n      interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n      super.supportsInterface(interfaceId);\\n  }\\n\\n  /**\\n   * @dev See {IERC1155-balanceOf}.\\n   *\\n   * Requirements:\\n   *\\n   * - `account` cannot be the zero address.\\n   */\\n  function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n    require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n    return _balances[id][account];\\n  }\\n\\n  /**\\n   * @dev See {IERC1155-balanceOfBatch}.\\n   *\\n   * Requirements:\\n   *\\n   * - `accounts` and `ids` must have the same length.\\n   */\\n  function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (uint256[] memory)\\n  {\\n    require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n    uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n    for (uint256 i = 0; i < accounts.length; ++i) {\\n      batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n    }\\n\\n    return batchBalances;\\n  }\\n\\n  function name() public view virtual returns (string memory) {\\n    return _name;\\n  }\\n\\n  function symbol() public view virtual returns (string memory) {\\n    return _symbol;\\n  }\\n\\n  /**\\n   * @dev See {IERC1155-setApprovalForAll}.\\n   */\\n  function setApprovalForAll(address operator, bool approved) public virtual override {\\n    _setApprovalForAll(msg.sender, operator, approved);\\n  }\\n\\n  /**\\n   * @dev See {IERC1155-isApprovedForAll}.\\n   */\\n  function isApprovedForAll(address account, address operator)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (bool)\\n  {\\n    return _operatorApprovals[account][operator];\\n  }\\n\\n  /**\\n   * @dev See {IERC1155-safeTransferFrom}.\\n   */\\n  function safeTransferFrom(\\n    address from,\\n    address to,\\n    uint256 id,\\n    uint256 amount,\\n    bytes memory data\\n  ) public virtual override {\\n    require(\\n      from == msg.sender || isApprovedForAll(from, msg.sender),\\n      \\\"ERC1155: caller is not token owner or approved\\\"\\n    );\\n    _safeTransferFrom(from, to, id, amount, data);\\n  }\\n\\n  /**\\n   * @dev See {IERC1155-safeBatchTransferFrom}.\\n   */\\n  function safeBatchTransferFrom(\\n    address from,\\n    address to,\\n    uint256[] memory ids,\\n    uint256[] memory amounts,\\n    bytes memory data\\n  ) public virtual override {\\n    require(\\n      from == msg.sender || isApprovedForAll(from, msg.sender),\\n      \\\"ERC1155: caller is not token owner or approved\\\"\\n    );\\n    _safeBatchTransferFrom(from, to, ids, amounts, data);\\n  }\\n\\n  /**\\n   * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n   *\\n   * Emits a {TransferSingle} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `to` cannot be the zero address.\\n   * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n   * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n   * acceptance magic value.\\n   */\\n  function _safeTransferFrom(\\n    address from,\\n    address to,\\n    uint256 id,\\n    uint256 amount,\\n    bytes memory data\\n  ) internal virtual {\\n    require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n    address operator = msg.sender;\\n    uint256[] memory ids = _asSingletonArray(id);\\n    uint256[] memory amounts = _asSingletonArray(amount);\\n\\n    _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n    uint256 fromBalance = _balances[id][from];\\n    require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n    unchecked {\\n      _balances[id][from] = fromBalance - amount;\\n    }\\n    _balances[id][to] += amount;\\n\\n    emit TransferSingle(operator, from, to, id, amount);\\n\\n    _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n    _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n  }\\n\\n  /**\\n   * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n   *\\n   * Emits a {TransferBatch} event.\\n   *\\n   * Requirements:\\n   *\\n   * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n   * acceptance magic value.\\n   */\\n  function _safeBatchTransferFrom(\\n    address from,\\n    address to,\\n    uint256[] memory ids,\\n    uint256[] memory amounts,\\n    bytes memory data\\n  ) internal virtual {\\n    require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n    require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n    address operator = msg.sender;\\n\\n    _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n    for (uint256 i = 0; i < ids.length; ++i) {\\n      uint256 id = ids[i];\\n      uint256 amount = amounts[i];\\n\\n      uint256 fromBalance = _balances[id][from];\\n      require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n      unchecked {\\n        _balances[id][from] = fromBalance - amount;\\n      }\\n      _balances[id][to] += amount;\\n    }\\n\\n    emit TransferBatch(operator, from, to, ids, amounts);\\n\\n    _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n    _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n  }\\n\\n  /**\\n   * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n   *\\n   * Emits a {TransferSingle} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `to` cannot be the zero address.\\n   * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n   * acceptance magic value.\\n   */\\n  function _mint(\\n    address to,\\n    uint256 id,\\n    uint256 amount,\\n    bytes memory data\\n  ) internal virtual {\\n    require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n    address operator = msg.sender;\\n    uint256[] memory ids = _asSingletonArray(id);\\n    uint256[] memory amounts = _asSingletonArray(amount);\\n\\n    _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n    _balances[id][to] += amount;\\n    emit TransferSingle(operator, address(0), to, id, amount);\\n\\n    _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n    _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n  }\\n\\n  /**\\n   * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n   *\\n   * Emits a {TransferBatch} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `ids` and `amounts` must have the same length.\\n   * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n   * acceptance magic value.\\n   */\\n  function _mintBatch(\\n    address to,\\n    uint256[] memory ids,\\n    uint256[] memory amounts,\\n    bytes memory data\\n  ) internal virtual {\\n    require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n    require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n    address operator = msg.sender;\\n\\n    _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n    for (uint256 i = 0; i < ids.length; i++) {\\n      _balances[ids[i]][to] += amounts[i];\\n    }\\n\\n    emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n    _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n    _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n  }\\n\\n  /**\\n   * @dev Destroys `amount` tokens of token type `id` from `from`\\n   *\\n   * Emits a {TransferSingle} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `from` cannot be the zero address.\\n   * - `from` must have at least `amount` tokens of token type `id`.\\n   */\\n  function _burn(\\n    address from,\\n    uint256 id,\\n    uint256 amount\\n  ) internal virtual {\\n    require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n    address operator = msg.sender;\\n    uint256[] memory ids = _asSingletonArray(id);\\n    uint256[] memory amounts = _asSingletonArray(amount);\\n\\n    _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n    uint256 fromBalance = _balances[id][from];\\n    require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n    unchecked {\\n      _balances[id][from] = fromBalance - amount;\\n    }\\n\\n    emit TransferSingle(operator, from, address(0), id, amount);\\n\\n    _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n  }\\n\\n  /**\\n   * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n   *\\n   * Emits a {TransferBatch} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `ids` and `amounts` must have the same length.\\n   */\\n  function _burnBatch(\\n    address from,\\n    uint256[] memory ids,\\n    uint256[] memory amounts\\n  ) internal virtual {\\n    require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n    require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n    address operator = msg.sender;\\n\\n    _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n    for (uint256 i = 0; i < ids.length; i++) {\\n      uint256 id = ids[i];\\n      uint256 amount = amounts[i];\\n\\n      uint256 fromBalance = _balances[id][from];\\n      require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n      unchecked {\\n        _balances[id][from] = fromBalance - amount;\\n      }\\n    }\\n\\n    emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n    _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n  }\\n\\n  /**\\n   * @dev Approve `operator` to operate on all of `owner` tokens\\n   *\\n   * Emits an {ApprovalForAll} event.\\n   */\\n  function _setApprovalForAll(\\n    address owner,\\n    address operator,\\n    bool approved\\n  ) internal virtual {\\n    require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n    _operatorApprovals[owner][operator] = approved;\\n    emit ApprovalForAll(owner, operator, approved);\\n  }\\n\\n  /**\\n   * @dev Hook that is called before any token transfer. This includes minting\\n   * and burning, as well as batched variants.\\n   *\\n   * The same hook is called on both single and batched variants. For single\\n   * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n   *\\n   * Calling conditions (for each `id` and `amount` pair):\\n   *\\n   * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n   * of token type `id` will be  transferred to `to`.\\n   * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n   * for `to`.\\n   * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n   * will be burned.\\n   * - `from` and `to` are never both zero.\\n   * - `ids` and `amounts` have the same, non-zero length.\\n   *\\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n   */\\n  function _beforeTokenTransfer(\\n    address operator,\\n    address from,\\n    address to,\\n    uint256[] memory ids,\\n    uint256[] memory amounts,\\n    bytes memory data\\n  ) internal virtual {}\\n\\n  /**\\n   * @dev Hook that is called after any token transfer. This includes minting\\n   * and burning, as well as batched variants.\\n   *\\n   * The same hook is called on both single and batched variants. For single\\n   * transfers, the length of the `id` and `amount` arrays will be 1.\\n   *\\n   * Calling conditions (for each `id` and `amount` pair):\\n   *\\n   * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n   * of token type `id` will be  transferred to `to`.\\n   * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n   * for `to`.\\n   * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n   * will be burned.\\n   * - `from` and `to` are never both zero.\\n   * - `ids` and `amounts` have the same, non-zero length.\\n   *\\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n   */\\n  function _afterTokenTransfer(\\n    address operator,\\n    address from,\\n    address to,\\n    uint256[] memory ids,\\n    uint256[] memory amounts,\\n    bytes memory data\\n  ) internal virtual {}\\n\\n  function _doSafeTransferAcceptanceCheck(\\n    address operator,\\n    address from,\\n    address to,\\n    uint256 id,\\n    uint256 amount,\\n    bytes memory data\\n  ) private {\\n    if (to.isContract()) {\\n      try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (\\n        bytes4 response\\n      ) {\\n        if (response != IERC1155Receiver.onERC1155Received.selector) {\\n          revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n        }\\n      } catch Error(string memory reason) {\\n        revert(reason);\\n      } catch {\\n        revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n      }\\n    }\\n  }\\n\\n  function _doSafeBatchTransferAcceptanceCheck(\\n    address operator,\\n    address from,\\n    address to,\\n    uint256[] memory ids,\\n    uint256[] memory amounts,\\n    bytes memory data\\n  ) private {\\n    if (to.isContract()) {\\n      try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n        bytes4 response\\n      ) {\\n        if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n          revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n        }\\n      } catch Error(string memory reason) {\\n        revert(reason);\\n      } catch {\\n        revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n      }\\n    }\\n  }\\n\\n  function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n    uint256[] memory array = new uint256[](1);\\n    array[0] = element;\\n\\n    return array;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/ERC1155/IERC1155CreatorBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.11;\\n\\nimport \\\"../Helpers/Royalties/IRoyalties.sol\\\";\\n\\ninterface IERC1155CreatorBase is IRoyalties {\\n  struct RoyaltyConfig {\\n    address payable receiver;\\n    uint16 bps;\\n  }\\n\\n  enum TokenClaimType {\\n    PUBLIC,\\n    ADMIN,\\n    DISABLED\\n  }\\n\\n  struct TokenMetadataConfig {\\n    uint256 totalSupply;\\n    uint256 maxSupply;\\n    uint256 maxClaimPerUser;\\n    uint256 price;\\n    string uri;\\n    RoyaltyConfig[] royalties;\\n    TokenClaimType claimStatus;\\n  }\\n\\n  event TokenClaimStatusUpdate(uint256 indexed tokenId, TokenClaimType claimStatus);\\n\\n  /**\\n   * @dev Set secondary royalties configuration(s) for token by admin.\\n   */\\n  function setRoyalties(\\n    uint256 tokenId,\\n    address payable[] calldata receivers,\\n    uint256[] calldata basisPoints\\n  ) external;\\n\\n  /**\\n   * @dev Update token uri after a token is minted by permissioned user.\\n   */\\n  function updateTokenURI(uint256 tokenId, string calldata uri) external;\\n\\n  /**\\n   * @dev Toggle `claimable` flag for claiming of tokens\\n   */\\n  function updateTokenClaimStatus(uint256 tokenId, TokenClaimType claimStatus) external;\\n\\n  /**\\n   * @dev Update token public minting price.\\n   */\\n  function updateTokenMintPrice(uint256 tokenId, uint256 newPrice) external;\\n\\n  /**\\n   * @dev Total amount of tokens in with a given tokenId.\\n   */\\n  function totalSupply(uint256 tokenId) external view returns (uint256);\\n\\n  /**\\n   * @dev Maximum amount of supply to be minted with a given tokenId.\\n   */\\n  function maxSupply(uint256 tokenId) external view returns (uint256);\\n\\n  /**\\n   * @dev Price to mint a given initialised tokenId.\\n   */\\n  function publicMintPrice(uint256 tokenId) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns TokenMetadataConfig specified by a tokenId.\\n   */\\n  function tokenMetadata(uint256 tokenId)\\n    external\\n    view\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256,\\n      uint256,\\n      string memory,\\n      TokenClaimType\\n    );\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Helpers/Royalties/IRoyalties.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\ninterface IRoyalties is IERC165 {\\n  event RoyaltiesUpdated(\\n    uint256 indexed tokenId,\\n    address payable[] receivers,\\n    uint256[] basisPoints\\n  );\\n\\n  /**\\n   * @dev Get royalites of a token.  Returns list of receivers and basisPoints\\n   */\\n  function getRoyalties(uint256 tokenId)\\n    external\\n    view\\n    returns (address payable[] memory, uint256[] memory);\\n\\n  // Royalty support for various other standards\\n  function getFeeRecipients(uint256 tokenId) external view returns (address payable[] memory);\\n\\n  function getFeeBps(uint256 tokenId) external view returns (uint256[] memory);\\n\\n  function getFees(uint256 tokenId)\\n    external\\n    view\\n    returns (address payable[] memory, uint256[] memory);\\n\\n  function royaltyInfo(uint256 tokenId, uint256 value) external view returns (address, uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/Helpers/BoringOwnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract BoringOwnableData {\\n  address public owner;\\n  address public pendingOwner;\\n}\\n\\ncontract BoringOwnable is BoringOwnableData {\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n  /// @notice `owner` defaults to msg.sender on construction.\\n  constructor() {\\n    owner = msg.sender;\\n    emit OwnershipTransferred(address(0), msg.sender);\\n  }\\n\\n  /// @notice Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner.\\n  /// Can only be invoked by the current `owner`.\\n  /// @param newOwner Address of the new owner.\\n  /// @param direct True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.\\n  /// @param renounce Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise.\\n  function transferOwnership(\\n    address newOwner,\\n    bool direct,\\n    bool renounce\\n  ) public onlyOwner {\\n    if (direct) {\\n      // Checks\\n      require(newOwner != address(0) || renounce, \\\"Ownable: zero address\\\");\\n\\n      // Effects\\n      emit OwnershipTransferred(owner, newOwner);\\n      owner = newOwner;\\n      pendingOwner = address(0);\\n    } else {\\n      // Effects\\n      pendingOwner = newOwner;\\n    }\\n  }\\n\\n  /// @notice Needs to be called by `pendingOwner` to claim ownership.\\n  function claimOwnership() public {\\n    address _pendingOwner = pendingOwner;\\n\\n    // Checks\\n    require(msg.sender == _pendingOwner, \\\"Ownable: caller != pending owner\\\");\\n\\n    // Effects\\n    emit OwnershipTransferred(owner, _pendingOwner);\\n    owner = _pendingOwner;\\n    pendingOwner = address(0);\\n  }\\n\\n  /// @notice Only allows the `owner` to execute the function.\\n  modifier onlyOwner() {\\n    require(msg.sender == owner, \\\"Ownable: caller is not the owner\\\");\\n    _;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/Helpers/Permissions/IPermissionControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\ninterface IPermissionControl is IERC165 {\\n  event PermissionGranted(address indexed newAdmin, address indexed assigner);\\n  event PermissionRevoked(address indexed oldAdmin, address indexed assigner);\\n\\n  /**\\n   * @dev gets address of all approved admins.\\n   */\\n  function getAllPermissionedUsers() external view returns (address[] memory);\\n\\n  /**\\n   * @dev add an admin.  Can only be called by contract owner.\\n   */\\n  function grantPermissionToUser(address admin) external;\\n\\n  /**\\n   * @dev remove an admin.  Can only be called by contract owner.\\n   */\\n  function revokePermission(address admin) external;\\n\\n  /**\\n   * @dev checks whether or not given address is an admin, which includes owner\\n   * Returns True if they are\\n   */\\n  function isPermissionedUser(address admin) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 3000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"feeBps_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assigner\",\"type\":\"address\"}],\"name\":\"PermissionGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assigner\",\"type\":\"address\"}],\"name\":\"PermissionRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address payable[]\",\"name\":\"receivers\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"basisPoints\",\"type\":\"uint256[]\"}],\"name\":\"RoyaltiesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum IERC1155CreatorBase.TokenClaimType\",\"name\":\"claimStatus\",\"type\":\"uint8\"}],\"name\":\"TokenClaimStatusUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxClaimPerUser\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tokenUri\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"revenueRecipient\",\"type\":\"address\"}],\"name\":\"TokenInitialised\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TokenMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"revenueRecipient\",\"type\":\"address\"}],\"name\":\"TokenRevenueRecipientUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ARTZONE_MINTER_FEE_BPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_BPS\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllPermissionedUsers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"permissionedUsers\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getFeeBps\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getFeeRecipients\",\"outputs\":[{\"internalType\":\"address payable[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getFees\",\"outputs\":[{\"internalType\":\"address payable[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getRoyalties\",\"outputs\":[{\"internalType\":\"address payable[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"grantPermissionToUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxClaimPerUser\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"bps\",\"type\":\"uint16\"}],\"internalType\":\"struct IERC1155CreatorBase.RoyaltyConfig[]\",\"name\":\"royalties\",\"type\":\"tuple[]\"},{\"internalType\":\"enum IERC1155CreatorBase.TokenClaimType\",\"name\":\"claimStatus\",\"type\":\"uint8\"}],\"internalType\":\"struct IERC1155CreatorBase.TokenMetadataConfig[]\",\"name\":\"tokenConfigs\",\"type\":\"tuple[]\"},{\"internalType\":\"address[]\",\"name\":\"revenueRecipients\",\"type\":\"address[]\"}],\"name\":\"initialiseNewMultipleTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxClaimPerUser\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"bps\",\"type\":\"uint16\"}],\"internalType\":\"struct IERC1155CreatorBase.RoyaltyConfig[]\",\"name\":\"royalties\",\"type\":\"tuple[]\"},{\"internalType\":\"enum IERC1155CreatorBase.TokenClaimType\",\"name\":\"claimStatus\",\"type\":\"uint8\"}],\"internalType\":\"struct IERC1155CreatorBase.TokenMetadataConfig\",\"name\":\"tokenConfig\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"revenueRecipient\",\"type\":\"address\"}],\"name\":\"initialiseNewSingleToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isPermissionedUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"receivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"mintExistingMultipleTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintExistingSingleToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"publicMintPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mintPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"revokePermission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address payable[]\",\"name\":\"receivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"basisPoints\",\"type\":\"uint256[]\"}],\"name\":\"setRoyalties\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"tokenAmountClaimedByUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenMetadata\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxClaimPerUser\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"enum IERC1155CreatorBase.TokenClaimType\",\"name\":\"claimStatus\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"direct\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"renounce\",\"type\":\"bool\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bps\",\"type\":\"uint256\"}],\"name\":\"updateArtzoneFeeBps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enum IERC1155CreatorBase.TokenClaimType\",\"name\":\"claimStatus\",\"type\":\"uint8\"}],\"name\":\"updateTokenClaimStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"updateTokenMintPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newRecipient\",\"type\":\"address\"}],\"name\":\"updateTokenRevenueRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"updateTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ArtzoneCreator", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "3000", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000000000000000000007414320546573740000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000074143205465737400000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}