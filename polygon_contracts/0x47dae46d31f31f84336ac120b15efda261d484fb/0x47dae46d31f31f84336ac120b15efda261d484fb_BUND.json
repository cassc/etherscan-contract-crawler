{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/BUND.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\nimport \\\"./LERC20.sol\\\";\\n\\ncontract BUND is LERC20 {\\n    constructor(\\n        uint256 totalSupply_,\\n        string memory name_,\\n        string memory symbol_,\\n        address admin_,\\n        address recoveryAdmin_,\\n        uint256 timelockPeriod_,\\n        address lossless_\\n    )\\n        LERC20(\\n            totalSupply_,\\n            name_,\\n            symbol_,\\n            admin_,\\n            recoveryAdmin_,\\n            timelockPeriod_,\\n            lossless_\\n        )\\n    {}\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILosslessController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ILosslessERC20.sol\\\";\\nimport \\\"./ILosslessGovernance.sol\\\";\\nimport \\\"./ILosslessStaking.sol\\\";\\nimport \\\"./ILosslessReporting.sol\\\";\\nimport \\\"./IProtectionStrategy.sol\\\";\\n\\ninterface ILssController {\\n    // function getLockedAmount(ILERC20 _token, address _account)  returns (uint256);\\n    // function getAvailableAmount(ILERC20 _token, address _account) external view returns (uint256 amount);\\n    function retrieveBlacklistedFunds(\\n        address[] calldata _addresses,\\n        ILERC20 _token,\\n        uint256 _reportId\\n    ) external returns (uint256);\\n\\n    function whitelist(address _adr) external view returns (bool);\\n\\n    function dexList(address _dexAddress) external returns (bool);\\n\\n    function blacklist(address _adr) external view returns (bool);\\n\\n    function admin() external view returns (address);\\n\\n    function pauseAdmin() external view returns (address);\\n\\n    function recoveryAdmin() external view returns (address);\\n\\n    function guardian() external view returns (address);\\n\\n    function losslessStaking() external view returns (ILssStaking);\\n\\n    function losslessReporting() external view returns (ILssReporting);\\n\\n    function losslessGovernance() external view returns (ILssGovernance);\\n\\n    function dexTranferThreshold() external view returns (uint256);\\n\\n    function settlementTimeLock() external view returns (uint256);\\n\\n    function extraordinaryRetrievalProposalPeriod()\\n        external\\n        view\\n        returns (uint256);\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    function setAdmin(address _newAdmin) external;\\n\\n    function setRecoveryAdmin(address _newRecoveryAdmin) external;\\n\\n    function setPauseAdmin(address _newPauseAdmin) external;\\n\\n    function setSettlementTimeLock(uint256 _newTimelock) external;\\n\\n    function setDexTransferThreshold(uint256 _newThreshold) external;\\n\\n    function setDexList(address[] calldata _dexList, bool _value) external;\\n\\n    function setWhitelist(address[] calldata _addrList, bool _value) external;\\n\\n    function addToBlacklist(address _adr) external;\\n\\n    function resolvedNegatively(address _adr) external;\\n\\n    function setStakingContractAddress(ILssStaking _adr) external;\\n\\n    function setReportingContractAddress(ILssReporting _adr) external;\\n\\n    function setGovernanceContractAddress(ILssGovernance _adr) external;\\n\\n    function setTokenMintLimit(ILERC20 _token, uint256 limit) external;\\n\\n    function setTokenMintPeriod(ILERC20 _token, uint256 _period) external;\\n\\n    function setTokenBurnLimit(ILERC20 _token, uint256 _limit) external;\\n\\n    function setTokenBurnPeriod(ILERC20 _token, uint256 _period) external;\\n\\n    function proposeNewSettlementPeriod(ILERC20 _token, uint256 _seconds)\\n        external;\\n\\n    function executeNewSettlementPeriod(ILERC20 _token) external;\\n\\n    function activateEmergency(ILERC20 _token) external;\\n\\n    function deactivateEmergency(ILERC20 _token) external;\\n\\n    function setGuardian(address _newGuardian) external;\\n\\n    function removeProtectedAddress(ILERC20 _token, address _protectedAddresss)\\n        external;\\n\\n    function beforeTransfer(\\n        address _sender,\\n        address _recipient,\\n        uint256 _amount\\n    ) external;\\n\\n    function beforeTransferFrom(\\n        address _msgSender,\\n        address _sender,\\n        address _recipient,\\n        uint256 _amount\\n    ) external;\\n\\n    function beforeApprove(\\n        address _sender,\\n        address _spender,\\n        uint256 _amount\\n    ) external;\\n\\n    function beforeIncreaseAllowance(\\n        address _msgSender,\\n        address _spender,\\n        uint256 _addedValue\\n    ) external;\\n\\n    function beforeDecreaseAllowance(\\n        address _msgSender,\\n        address _spender,\\n        uint256 _subtractedValue\\n    ) external;\\n\\n    function beforeMint(address _to, uint256 _amount) external;\\n\\n    function beforeBurn(address _account, uint256 _amount) external;\\n\\n    function afterTransfer(\\n        address _sender,\\n        address _recipient,\\n        uint256 _amount\\n    ) external;\\n\\n    function setProtectedAddress(\\n        ILERC20 _token,\\n        address _protectedAddress,\\n        ProtectionStrategy _strategy\\n    ) external;\\n\\n    function setExtraordinaryRetrievalPeriod(uint256 _newPEriod) external;\\n\\n    function extraordinaryRetrieval(\\n        ILERC20 _token,\\n        address[] calldata addresses,\\n        uint256 fundsToRetrieve\\n    ) external;\\n\\n    event AdminChange(address indexed _newAdmin);\\n    event RecoveryAdminChange(address indexed _newAdmin);\\n    event PauseAdminChange(address indexed _newAdmin);\\n    event GuardianSet(\\n        address indexed _oldGuardian,\\n        address indexed _newGuardian\\n    );\\n    event NewProtectedAddress(\\n        ILERC20 indexed _token,\\n        address indexed _protectedAddress,\\n        address indexed _strategy\\n    );\\n    event RemovedProtectedAddress(\\n        ILERC20 indexed _token,\\n        address indexed _protectedAddress\\n    );\\n    event NewSettlementPeriodProposal(ILERC20 indexed _token, uint256 _seconds);\\n    event SettlementPeriodChange(\\n        ILERC20 indexed _token,\\n        uint256 _proposedTokenLockTimeframe\\n    );\\n    event NewSettlementTimelock(uint256 indexed _timelock);\\n    event NewDexThreshold(uint256 indexed _newThreshold);\\n    event NewDex(address indexed _dexAddress);\\n    event DexRemoval(address indexed _dexAddress);\\n    event NewWhitelistedAddress(address indexed _whitelistAdr);\\n    event WhitelistedAddressRemoval(address indexed _whitelistAdr);\\n    event NewBlacklistedAddress(address indexed _blacklistedAddres);\\n    event AccountBlacklistRemoval(address indexed _adr);\\n    event NewStakingContract(ILssStaking indexed _newAdr);\\n    event NewReportingContract(ILssReporting indexed _newAdr);\\n    event NewGovernanceContract(ILssGovernance indexed _newAdr);\\n    event EmergencyActive(ILERC20 indexed _token);\\n    event EmergencyDeactivation(ILERC20 indexed _token);\\n    event NewMint(\\n        ILERC20 indexed token,\\n        address indexed account,\\n        uint256 indexed amount\\n    );\\n    event NewMintLimit(ILERC20 indexed token, uint256 indexed limit);\\n    event NewMintPeriod(ILERC20 indexed token, uint256 indexed period);\\n    event NewBurn(\\n        ILERC20 indexed token,\\n        address indexed account,\\n        uint256 indexed amount\\n    );\\n    event NewBurnLimit(ILERC20 indexed token, uint256 indexed limit);\\n    event NewBurnPeriod(ILERC20 indexed token, uint256 indexed period);\\n    event NewExtraordinaryPeriod(\\n        uint256 indexed extraordinaryRetrievalProposalPeriod\\n    );\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILosslessERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ILERC20 {\\n    function name() external view returns (string memory);\\n\\n    function admin() external view returns (address);\\n\\n    function getAdmin() external view returns (address);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address _account) external view returns (uint256);\\n\\n    function transfer(address _recipient, uint256 _amount)\\n        external\\n        returns (bool);\\n\\n    function allowance(address _owner, address _spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function approve(address _spender, uint256 _amount) external returns (bool);\\n\\n    function transferFrom(\\n        address _sender,\\n        address _recipient,\\n        uint256 _amount\\n    ) external returns (bool);\\n\\n    function increaseAllowance(address _spender, uint256 _addedValue)\\n        external\\n        returns (bool);\\n\\n    function decreaseAllowance(address _spender, uint256 _subtractedValue)\\n        external\\n        returns (bool);\\n\\n    function transferOutBlacklistedFunds(address[] calldata _from) external;\\n\\n    function setLosslessAdmin(address _newAdmin) external;\\n\\n    function transferRecoveryAdminOwnership(\\n        address _candidate,\\n        bytes32 _keyHash\\n    ) external;\\n\\n    function acceptRecoveryAdminOwnership(bytes memory _key) external;\\n\\n    function proposeLosslessTurnOff() external;\\n\\n    function executeLosslessTurnOff() external;\\n\\n    function executeLosslessTurnOn() external;\\n\\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\\n    event Approval(\\n        address indexed _owner,\\n        address indexed _spender,\\n        uint256 _value\\n    );\\n    event NewAdmin(address indexed _newAdmin);\\n    event NewRecoveryAdminProposal(address indexed _candidate);\\n    event NewRecoveryAdmin(address indexed _newAdmin);\\n    event LosslessTurnOffProposal(uint256 _turnOffDate);\\n    event LosslessOff();\\n    event LosslessOn();\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILosslessGovernance.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ILosslessERC20.sol\\\";\\nimport \\\"./ILosslessStaking.sol\\\";\\nimport \\\"./ILosslessReporting.sol\\\";\\nimport \\\"./ILosslessController.sol\\\";\\n\\ninterface ILssGovernance {\\n    function LSS_TEAM_INDEX() external view returns (uint256);\\n\\n    function TOKEN_OWNER_INDEX() external view returns (uint256);\\n\\n    function COMMITEE_INDEX() external view returns (uint256);\\n\\n    function committeeMembersCount() external view returns (uint256);\\n\\n    function walletDisputePeriod() external view returns (uint256);\\n\\n    function losslessStaking() external view returns (ILssStaking);\\n\\n    function losslessReporting() external view returns (ILssReporting);\\n\\n    function losslessController() external view returns (ILssController);\\n\\n    function isCommitteeMember(address _account) external view returns (bool);\\n\\n    function getIsVoted(uint256 _reportId, uint256 _voterIndex)\\n        external\\n        view\\n        returns (bool);\\n\\n    function getVote(uint256 _reportId, uint256 _voterIndex)\\n        external\\n        view\\n        returns (bool);\\n\\n    function isReportSolved(uint256 _reportId) external view returns (bool);\\n\\n    function reportResolution(uint256 _reportId) external view returns (bool);\\n\\n    function getAmountReported(uint256 _reportId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function setDisputePeriod(uint256 _timeFrame) external;\\n\\n    function addCommitteeMembers(address[] memory _members) external;\\n\\n    function removeCommitteeMembers(address[] memory _members) external;\\n\\n    function losslessVote(uint256 _reportId, bool _vote) external;\\n\\n    function tokenOwnersVote(uint256 _reportId, bool _vote) external;\\n\\n    function committeeMemberVote(uint256 _reportId, bool _vote) external;\\n\\n    function resolveReport(uint256 _reportId) external;\\n\\n    function proposeWallet(uint256 _reportId, address wallet) external;\\n\\n    function rejectWallet(uint256 _reportId) external;\\n\\n    function retrieveFunds(uint256 _reportId) external;\\n\\n    function retrieveCompensation() external;\\n\\n    function claimCommitteeReward(uint256 _reportId) external;\\n\\n    function setCompensationAmount(uint256 _amount) external;\\n\\n    function losslessClaim(uint256 _reportId) external;\\n\\n    function extaordinaryRetrieval(address[] calldata _address, ILERC20 _token)\\n        external;\\n\\n    event NewCommitteeMembers(address[] _members);\\n    event CommitteeMembersRemoval(address[] _members);\\n    event LosslessTeamPositiveVote(uint256 indexed _reportId);\\n    event LosslessTeamNegativeVote(uint256 indexed _reportId);\\n    event TokenOwnersPositiveVote(uint256 indexed _reportId);\\n    event TokenOwnersNegativeVote(uint256 indexed _reportId);\\n    event CommitteeMemberPositiveVote(\\n        uint256 indexed _reportId,\\n        address indexed _member\\n    );\\n    event CommitteeMemberNegativeVote(\\n        uint256 indexed _reportId,\\n        address indexed _member\\n    );\\n    event ReportResolve(uint256 indexed _reportId, bool indexed _resolution);\\n    event WalletProposal(uint256 indexed _reportId, address indexed _wallet);\\n    event CommitteeMemberClaim(\\n        uint256 indexed _reportId,\\n        address indexed _member,\\n        uint256 indexed _amount\\n    );\\n    event CommitteeMajorityReach(\\n        uint256 indexed _reportId,\\n        bool indexed _result\\n    );\\n    event NewDisputePeriod(uint256 indexed _newPeriod);\\n    event WalletRejection(uint256 indexed _reportId);\\n    event FundsRetrieval(uint256 indexed _reportId, uint256 indexed _amount);\\n    event CompensationRetrieval(\\n        address indexed _wallet,\\n        uint256 indexed _amount\\n    );\\n    event LosslessClaim(\\n        ILERC20 indexed _token,\\n        uint256 indexed _reportID,\\n        uint256 indexed _amount\\n    );\\n    event ExtraordinaryProposalAccept(ILERC20 indexed _token);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILosslessReporting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ILosslessERC20.sol\\\";\\nimport \\\"./ILosslessGovernance.sol\\\";\\nimport \\\"./ILosslessStaking.sol\\\";\\nimport \\\"./ILosslessController.sol\\\";\\n\\ninterface ILssReporting {\\n    function reporterReward() external returns (uint256);\\n\\n    function losslessReward() external returns (uint256);\\n\\n    function stakersReward() external returns (uint256);\\n\\n    function committeeReward() external returns (uint256);\\n\\n    function reportLifetime() external view returns (uint256);\\n\\n    function reportingAmount() external returns (uint256);\\n\\n    function reportCount() external returns (uint256);\\n\\n    function stakingToken() external returns (ILERC20);\\n\\n    function losslessController() external returns (ILssController);\\n\\n    function losslessGovernance() external returns (ILssGovernance);\\n\\n    function getVersion() external pure returns (uint256);\\n\\n    function getRewards()\\n        external\\n        view\\n        returns (\\n            uint256 _reporter,\\n            uint256 _lossless,\\n            uint256 _committee,\\n            uint256 _stakers\\n        );\\n\\n    function report(ILERC20 _token, address _account)\\n        external\\n        returns (uint256);\\n\\n    function reporterClaimableAmount(uint256 _reportId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getReportInfo(uint256 _reportId)\\n        external\\n        view\\n        returns (\\n            address _reporter,\\n            address _reportedAddress,\\n            address _secondReportedAddress,\\n            uint256 _reportTimestamps,\\n            ILERC20 _reportTokens,\\n            bool _secondReports,\\n            bool _reporterClaimStatus\\n        );\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    function setStakingToken(ILERC20 _stakingToken) external;\\n\\n    function setLosslessGovernance(ILssGovernance _losslessGovernance) external;\\n\\n    function setReportingAmount(uint256 _reportingAmount) external;\\n\\n    function setReporterReward(uint256 _reward) external;\\n\\n    function setLosslessReward(uint256 _reward) external;\\n\\n    function setStakersReward(uint256 _reward) external;\\n\\n    function setCommitteeReward(uint256 _reward) external;\\n\\n    function setReportLifetime(uint256 _lifetime) external;\\n\\n    function secondReport(uint256 _reportId, address _account) external;\\n\\n    function reporterClaim(uint256 _reportId) external;\\n\\n    function retrieveCompensation(address _adr, uint256 _amount) external;\\n\\n    event ReportSubmission(\\n        ILERC20 indexed _token,\\n        address indexed _account,\\n        uint256 indexed _reportId\\n    );\\n    event SecondReportSubmission(\\n        ILERC20 indexed _token,\\n        address indexed _account,\\n        uint256 indexed _reportId\\n    );\\n    event NewReportingAmount(uint256 indexed _newAmount);\\n    event NewStakingToken(ILERC20 indexed _token);\\n    event NewGovernanceContract(ILssGovernance indexed _adr);\\n    event NewReporterReward(uint256 indexed _newValue);\\n    event NewLosslessReward(uint256 indexed _newValue);\\n    event NewStakersReward(uint256 indexed _newValue);\\n    event NewCommitteeReward(uint256 indexed _newValue);\\n    event NewReportLifetime(uint256 indexed _newValue);\\n    event ReporterClaim(\\n        address indexed _reporter,\\n        uint256 indexed _reportId,\\n        uint256 indexed _amount\\n    );\\n    event CompensationRetrieve(address indexed _adr, uint256 indexed _amount);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILosslessStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ILosslessERC20.sol\\\";\\nimport \\\"./ILosslessGovernance.sol\\\";\\nimport \\\"./ILosslessReporting.sol\\\";\\nimport \\\"./ILosslessController.sol\\\";\\n\\ninterface ILssStaking {\\n    function stakingToken() external returns (ILERC20);\\n\\n    function losslessReporting() external returns (ILssReporting);\\n\\n    function losslessController() external returns (ILssController);\\n\\n    function losslessGovernance() external returns (ILssGovernance);\\n\\n    function stakingAmount() external returns (uint256);\\n\\n    function getVersion() external pure returns (uint256);\\n\\n    function getIsAccountStaked(uint256 _reportId, address _account)\\n        external\\n        view\\n        returns (bool);\\n\\n    function getStakerCoefficient(uint256 _reportId, address _address)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function stakerClaimableAmount(uint256 _reportId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function reportCoefficient(uint256 _reportId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    function setLssReporting(ILssReporting _losslessReporting) external;\\n\\n    function setStakingToken(ILERC20 _stakingToken) external;\\n\\n    function setLosslessGovernance(ILssGovernance _losslessGovernance) external;\\n\\n    function setStakingAmount(uint256 _stakingAmount) external;\\n\\n    function stake(uint256 _reportId) external;\\n\\n    function stakerClaim(uint256 _reportId) external;\\n\\n    event NewStake(\\n        ILERC20 indexed _token,\\n        address indexed _account,\\n        uint256 indexed _reportId\\n    );\\n    event StakerClaim(\\n        address indexed _staker,\\n        ILERC20 indexed _token,\\n        uint256 indexed _reportID,\\n        uint256 _amount\\n    );\\n    event NewStakingAmount(uint256 indexed _newAmount);\\n    event NewStakingToken(ILERC20 indexed _newToken);\\n    event NewReportingContract(ILssReporting indexed _newContract);\\n    event NewGovernanceContract(ILssGovernance indexed _newContract);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IProtectionStrategy.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\n\\ninterface ProtectionStrategy {\\n    function isTransferAllowed(\\n        address token,\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/LERC20.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\nimport \\\"./interfaces/ILosslessERC20.sol\\\";\\nimport \\\"./interfaces/ILosslessController.sol\\\";\\n\\ncontract LERC20 is Context, ILERC20 {\\n    mapping(address => uint256) private _balances;\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n    uint256 private _totalSupply;\\n    string private _name;\\n    string private _symbol;\\n\\n    address public recoveryAdmin;\\n    address private recoveryAdminCandidate;\\n    bytes32 private recoveryAdminKeyHash;\\n    address public override admin;\\n    uint256 public timelockPeriod;\\n    uint256 public losslessTurnOffTimestamp;\\n    bool public isLosslessOn = true;\\n    ILssController public lossless;\\n\\n    constructor(\\n        uint256 totalSupply_,\\n        string memory name_,\\n        string memory symbol_,\\n        address admin_,\\n        address recoveryAdmin_,\\n        uint256 timelockPeriod_,\\n        address lossless_\\n    ) {\\n        _mint(_msgSender(), totalSupply_);\\n        _name = name_;\\n        _symbol = symbol_;\\n        admin = admin_;\\n        recoveryAdmin = recoveryAdmin_;\\n        recoveryAdminCandidate = address(0);\\n        recoveryAdminKeyHash = \\\"\\\";\\n        timelockPeriod = timelockPeriod_;\\n        losslessTurnOffTimestamp = 0;\\n        lossless = ILssController(lossless_);\\n    }\\n\\n    // --- LOSSLESS modifiers ---\\n\\n    modifier lssAprove(address spender, uint256 amount) {\\n        if (isLosslessOn) {\\n            lossless.beforeApprove(_msgSender(), spender, amount);\\n        }\\n        _;\\n    }\\n\\n    modifier lssTransfer(address recipient, uint256 amount) {\\n        if (isLosslessOn) {\\n            lossless.beforeTransfer(_msgSender(), recipient, amount);\\n        }\\n        _;\\n    }\\n\\n    modifier lssTransferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) {\\n        if (isLosslessOn) {\\n            lossless.beforeTransferFrom(\\n                _msgSender(),\\n                sender,\\n                recipient,\\n                amount\\n            );\\n        }\\n        _;\\n    }\\n\\n    modifier lssIncreaseAllowance(address spender, uint256 addedValue) {\\n        if (isLosslessOn) {\\n            lossless.beforeIncreaseAllowance(_msgSender(), spender, addedValue);\\n        }\\n        _;\\n    }\\n\\n    modifier lssDecreaseAllowance(address spender, uint256 subtractedValue) {\\n        if (isLosslessOn) {\\n            lossless.beforeDecreaseAllowance(\\n                _msgSender(),\\n                spender,\\n                subtractedValue\\n            );\\n        }\\n        _;\\n    }\\n\\n    modifier onlyRecoveryAdmin() {\\n        require(\\n            _msgSender() == recoveryAdmin,\\n            \\\"LERC20: Must be recovery admin\\\"\\n        );\\n        _;\\n    }\\n\\n    // --- LOSSLESS management ---\\n    function transferOutBlacklistedFunds(address[] calldata from)\\n        external\\n        override\\n    {\\n        require(\\n            _msgSender() == address(lossless),\\n            \\\"LERC20: Only lossless contract\\\"\\n        );\\n\\n        uint256 fromLength = from.length;\\n        uint256 totalAmount = 0;\\n\\n        for (uint256 i = 0; i < fromLength; i++) {\\n            address fromAddress = from[i];\\n            uint256 fromBalance = _balances[fromAddress];\\n            _balances[fromAddress] = 0;\\n            totalAmount += fromBalance;\\n            emit Transfer(fromAddress, address(lossless), fromBalance);\\n        }\\n\\n        _balances[address(lossless)] += totalAmount;\\n    }\\n\\n    function setLosslessAdmin(address newAdmin)\\n        external\\n        override\\n        onlyRecoveryAdmin\\n    {\\n        require(newAdmin != admin, \\\"LERC20: Cannot set same address\\\");\\n        emit NewAdmin(newAdmin);\\n        admin = newAdmin;\\n    }\\n\\n    function transferRecoveryAdminOwnership(address candidate, bytes32 keyHash)\\n        external\\n        override\\n        onlyRecoveryAdmin\\n    {\\n        recoveryAdminCandidate = candidate;\\n        recoveryAdminKeyHash = keyHash;\\n        emit NewRecoveryAdminProposal(candidate);\\n    }\\n\\n    function acceptRecoveryAdminOwnership(bytes memory key) external override {\\n        require(\\n            _msgSender() == recoveryAdminCandidate,\\n            \\\"LERC20: Must be canditate\\\"\\n        );\\n        require(keccak256(key) == recoveryAdminKeyHash, \\\"LERC20: Invalid key\\\");\\n        emit NewRecoveryAdmin(recoveryAdminCandidate);\\n        recoveryAdmin = recoveryAdminCandidate;\\n        recoveryAdminCandidate = address(0);\\n    }\\n\\n    function proposeLosslessTurnOff() external override onlyRecoveryAdmin {\\n        require(\\n            losslessTurnOffTimestamp == 0,\\n            \\\"LERC20: TurnOff already proposed\\\"\\n        );\\n        require(isLosslessOn, \\\"LERC20: Lossless already off\\\");\\n        losslessTurnOffTimestamp = block.timestamp + timelockPeriod;\\n        emit LosslessTurnOffProposal(losslessTurnOffTimestamp);\\n    }\\n\\n    function executeLosslessTurnOff() external override onlyRecoveryAdmin {\\n        require(losslessTurnOffTimestamp != 0, \\\"LERC20: TurnOff not proposed\\\");\\n        require(\\n            losslessTurnOffTimestamp <= block.timestamp,\\n            \\\"LERC20: Time lock in progress\\\"\\n        );\\n        isLosslessOn = false;\\n        losslessTurnOffTimestamp = 0;\\n        emit LosslessOff();\\n    }\\n\\n    function executeLosslessTurnOn() external override onlyRecoveryAdmin {\\n        require(!isLosslessOn, \\\"LERC20: Lossless already on\\\");\\n        losslessTurnOffTimestamp = 0;\\n        isLosslessOn = true;\\n        emit LosslessOn();\\n    }\\n\\n    function getAdmin() public view virtual override returns (address) {\\n        return admin;\\n    }\\n\\n    // --- ERC20 methods ---\\n\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function balanceOf(address account)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return _balances[account];\\n    }\\n\\n    function transfer(address recipient, uint256 amount)\\n        public\\n        virtual\\n        override\\n        lssTransfer(recipient, amount)\\n        returns (bool)\\n    {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    function allowance(address owner, address spender)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return _allowances[owner][spender];\\n    }\\n\\n    function approve(address spender, uint256 amount)\\n        public\\n        virtual\\n        override\\n        lssAprove(spender, amount)\\n        returns (bool)\\n    {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    )\\n        public\\n        virtual\\n        override\\n        lssTransferFrom(sender, recipient, amount)\\n        returns (bool)\\n    {\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(\\n            currentAllowance >= amount,\\n            \\\"LERC20: transfer amount exceeds allowance\\\"\\n        );\\n        _transfer(sender, recipient, amount);\\n\\n        _approve(sender, _msgSender(), currentAllowance - amount);\\n\\n        return true;\\n    }\\n\\n    function increaseAllowance(address spender, uint256 addedValue)\\n        public\\n        virtual\\n        override\\n        lssIncreaseAllowance(spender, addedValue)\\n        returns (bool)\\n    {\\n        _approve(\\n            _msgSender(),\\n            spender,\\n            _allowances[_msgSender()][spender] + addedValue\\n        );\\n        return true;\\n    }\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\n        public\\n        virtual\\n        override\\n        lssDecreaseAllowance(spender, subtractedValue)\\n        returns (bool)\\n    {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(\\n            currentAllowance >= subtractedValue,\\n            \\\"LERC20: decreased allowance below zero\\\"\\n        );\\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n\\n        return true;\\n    }\\n\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"LERC20: transfer from the zero address\\\");\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(\\n            senderBalance >= amount,\\n            \\\"LERC20: transfer amount exceeds balance\\\"\\n        );\\n        _balances[sender] = senderBalance - amount;\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"LERC20: mint to the zero address\\\");\\n\\n        _totalSupply += amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalSupply_\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"admin_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recoveryAdmin_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timelockPeriod_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"lossless_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LosslessOff\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LosslessOn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_turnOffDate\",\"type\":\"uint256\"}],\"name\":\"LosslessTurnOffProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"NewAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"NewRecoveryAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"NewRecoveryAdminProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"key\",\"type\":\"bytes\"}],\"name\":\"acceptRecoveryAdminOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executeLosslessTurnOff\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executeLosslessTurnOn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLosslessOn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lossless\",\"outputs\":[{\"internalType\":\"contract ILssController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"losslessTurnOffTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposeLosslessTurnOff\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recoveryAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"setLosslessAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timelockPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"from\",\"type\":\"address[]\"}],\"name\":\"transferOutBlacklistedFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"}],\"name\":\"transferRecoveryAdminOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BUND", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000069e10de76676d080000000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000a65eba30e7cd074ece823bb658e5710ef03af45d000000000000000000000000a65eba30e7cd074ece823bb658e5710ef03af45d000000000000000000000000000000000000000000000000000000000001518000000000000000000000000066622e2c1b991983e88132da19b2c31f71009035000000000000000000000000000000000000000000000000000000000000000942756e642056322e300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000442554e4400000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}