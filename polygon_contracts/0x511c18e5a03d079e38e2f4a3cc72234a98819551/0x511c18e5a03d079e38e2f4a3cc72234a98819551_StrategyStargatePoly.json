{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/common/IFeeConfig.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.19;\\n\\ninterface IFeeConfig {\\n    struct FeeCategory {\\n        uint256 total; // total fee charged on each harvest\\n        uint256 manager; // split of total fee going to gravity fee batcher\\n        uint256 call; // split of total fee going to harvest caller\\n        uint256 partner; // split of total fee going to developer of the strategy\\n        string label; // description of the type of fee category\\n        bool active; // on/off switch for fee category\\n    }\\n    struct AllFees {\\n        FeeCategory performance;\\n        uint256 deposit;\\n        uint256 withdraw;\\n    }\\n\\n    function getFees(\\n        address strategy\\n    ) external view returns (FeeCategory memory);\\n\\n    function stratFeeId(address strategy) external view returns (uint256);\\n\\n    function setStratFeeId(uint256 feeId) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/common/IGFITierChecker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.19;\\n\\ninterface IGFITierChecker {\\n    function checkTier(address caller) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/common/IMasterChef.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.9.0;\\n\\ninterface IMasterChef {\\n    function deposit(uint256 _pid, uint256 _amount) external;\\n    function withdraw(uint256 _pid, uint256 _amount) external;\\n    function enterStaking(uint256 _amount) external;\\n    function leaveStaking(uint256 _amount) external;\\n    function userInfo(uint256 _pid, address _user) external view returns (uint256, uint256);\\n    function emergencyWithdraw(uint256 _pid) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/common/IUniswapRouterETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.9.0;\\n\\ninterface IUniswapRouterETH {\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n\\n    function swapExactTokensForTokens(\\n        uint amountIn, \\n        uint amountOutMin, \\n        address[] calldata path, \\n        address to, \\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    \\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n}\"\r\n    },\r\n    \"contracts/interfaces/stargate/IStargateRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.9.0;\\n\\ninterface IStargateRouter {\\n        function addLiquidity(\\n        uint256 _poolId,\\n        uint256 _amountLD,\\n        address _to\\n    ) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/sushi/IBentoBox.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.9.0;\\n\\ninterface IBentoBox {\\n    function setMasterContractApproval(\\n        address user,\\n        address masterContract,\\n        bool approved,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/sushi/IBentoPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IBentoPool {\\n    struct TokenAmount {\\n        address token;\\n        uint256 amount;\\n    }\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getAmountOut(bytes calldata data) external view returns (uint256 finalAmountOut);\\n    function getNativeReserves() external view returns (\\n        uint256 _nativeReserve0,\\n        uint256 _nativeReserve1,\\n        uint32 _blockTimestampLast\\n    );\\n    function burn(\\n        bytes calldata data\\n    ) external returns (TokenAmount[] memory withdrawnAmounts);\\n}\"\r\n    },\r\n    \"contracts/interfaces/sushi/ITridentRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\ninterface ITridentRouter {\\n    struct Path {\\n        address pool;\\n        bytes data;\\n    }\\n\\n    struct ExactInputParams {\\n        address tokenIn;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        Path[] path;\\n    }\\n\\n    struct ExactInputSingleParams {\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        address pool;\\n        address tokenIn;\\n        bytes data;\\n    }\\n\\n    struct TokenInput {\\n        address token;\\n        bool native;\\n        uint256 amount;\\n    }\\n\\n    function exactInputWithNativeToken(ExactInputParams calldata params) external returns (uint256 amountOut);\\n\\n    function exactInputSingleWithNativeToken(\\n        ExactInputSingleParams calldata params\\n    ) external returns (uint256 amountOut);\\n\\n    function addLiquidity(\\n        TokenInput[] calldata tokenInput,\\n        address pool,\\n        uint256 minLiquidity,\\n        bytes calldata data\\n    ) external returns (uint256 liquidity);\\n\\n    function bento() external view returns (address);\\n}\"\r\n    },\r\n    \"contracts/strategies/Common/StratFeeManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"../../interfaces/common/IFeeConfig.sol\\\";\\nimport \\\"../../interfaces/common/IGFITierChecker.sol\\\";\\n\\ncontract StratFeeManager is Ownable, Pausable {\\n    struct CommonAddresses {\\n        address vault;\\n        address unirouter;\\n        address keeper;\\n        address manager;\\n        address partner;\\n        address gravityFeeConfig;\\n        address tierChecker;\\n    }\\n\\n    struct FeeConfig {\\n        uint256 managerFee;\\n        uint256 partnerFee;\\n    }\\n\\n    FeeConfig harvestFees;\\n    FeeConfig withdrawalFees;\\n\\n    // common addresses for the strategy\\n    address public vault;\\n    address public unirouter;\\n    address public keeper;\\n\\n    address public managerReceiver;\\n    address public partnerReceiver;\\n\\n    IFeeConfig public gravityFeeConfig;\\n\\n    address public tierChecker;\\n\\n    uint256 constant DIVISOR = 1 ether;\\n\\n    uint256 public constant WITHDRAWAL_MAX = 10000;\\n\\n    uint256 public constant FULL_PERCENT = 10000; // 0.1% = 10, 1% = 100,  10% = 1000, 100% = 10000\\n\\n    uint256 constant WITHDRAWAL_FEE_CAP = 1000; // Withdrawal fee cap is up to 10%\\n    uint256 constant HARVEST_FEE_CAP = 1000; // Performance fee cap is up to 10%\\n\\n    uint256 internal withdrawalFee = 10;\\n\\n    uint256[4] public withdrawalFeePerTier = [0, 0, 0, 0];\\n\\n    event SetKeeper(address keeper);\\n    event SetStratFeeId(uint256 feeId);\\n    event SetWithdrawalFee(uint256 withdrawalFee);\\n    event SetVault(address vault);\\n    event SetUnirouter(address unirouter);\\n    event SetManager(address manager);\\n    event SetPartner(address strategist);\\n\\n    event SetGravityFeeConfig(address gravityFeeConfig);\\n    event SetWithdrawalFeePerTier(uint256 indexed tierNo, uint256 indexed fee);\\n\\n    event SetHarvestFees(\\n        uint256 indexed managerFee,\\n        uint256 indexed partnerFee\\n    );\\n\\n    event SetWithdrawalFees(\\n        uint256 indexed managerFee,\\n        uint256 indexed partnerFee\\n    );\\n\\n    constructor(CommonAddresses memory _commonAddresses) {\\n        vault = _commonAddresses.vault;\\n        unirouter = _commonAddresses.unirouter;\\n\\n        keeper = _commonAddresses.keeper;\\n\\n        managerReceiver = _commonAddresses.manager;\\n        partnerReceiver = _commonAddresses.partner;\\n\\n        gravityFeeConfig = IFeeConfig(_commonAddresses.gravityFeeConfig);\\n        tierChecker = _commonAddresses.tierChecker;\\n        harvestFees = FeeConfig(800, 0);\\n    }\\n\\n    // checks that caller is either owner or manager.\\n    modifier onlyManager() {\\n        _checkManager();\\n        _;\\n    }\\n\\n    function _checkManager() internal view {\\n        require(msg.sender == owner() || msg.sender == keeper, \\\"!manager\\\");\\n    }\\n\\n    // fetch fees from config contract\\n    function getFees() internal view returns (IFeeConfig.FeeCategory memory) {\\n        return gravityFeeConfig.getFees(address(this));\\n    }\\n\\n    // fetch fees from config contract and dynamic deposit/withdraw fees\\n    function getAllFees() external view returns (IFeeConfig.AllFees memory) {\\n        return IFeeConfig.AllFees(getFees(), depositFee(), withdrawFee());\\n    }\\n\\n    function getStratFeeId() external view returns (uint256) {\\n        return gravityFeeConfig.stratFeeId(address(this));\\n    }\\n\\n    function setStratFeeId(uint256 _feeId) external onlyManager {\\n        gravityFeeConfig.setStratFeeId(_feeId);\\n        emit SetStratFeeId(_feeId);\\n    }\\n\\n    // adjust withdrawal fee\\n    function setWithdrawalFee(uint256 _fee) public onlyManager {\\n        require(_fee <= WITHDRAWAL_FEE_CAP, \\\"!cap\\\");\\n        withdrawalFee = _fee;\\n        emit SetWithdrawalFee(_fee);\\n    }\\n\\n    // set new vault (only for strategy upgrades)\\n    function setVault(address _vault) external onlyOwner {\\n        vault = _vault;\\n        emit SetVault(_vault);\\n    }\\n\\n    function setTierChecker(address _tierChecker) external onlyOwner {\\n        tierChecker = _tierChecker;\\n    }\\n\\n    // set new unirouter\\n    function setUnirouter(address _unirouter) external onlyOwner {\\n        unirouter = _unirouter;\\n        emit SetUnirouter(_unirouter);\\n    }\\n\\n    // set new keeper to manage strat\\n    function setKeeper(address _keeper) external onlyManager {\\n        keeper = _keeper;\\n        emit SetKeeper(_keeper);\\n    }\\n\\n    // set new manager to manage strat\\n    function setManager(address _manager) external onlyManager {\\n        managerReceiver = _manager;\\n        emit SetManager(_manager);\\n    }\\n\\n    // set new strategist address to receive strat fees\\n    function setPartner(address _partner) external onlyManager {\\n        partnerReceiver = _partner;\\n        emit SetPartner(_partner);\\n    }\\n\\n    // set new fee config address to fetch fees\\n    function setGravityFeeConfig(address _gravityFeeConfig) external onlyOwner {\\n        gravityFeeConfig = IFeeConfig(_gravityFeeConfig);\\n        emit SetGravityFeeConfig(_gravityFeeConfig);\\n    }\\n\\n    function depositFee() public view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    function withdrawFee() public view virtual returns (uint256) {\\n        return paused() ? 0 : withdrawalFee;\\n    }\\n\\n    function getHarvestFees() external view returns (FeeConfig memory) {\\n        return harvestFees;\\n    }\\n\\n    function getWithdrawalFees() external view returns (FeeConfig memory) {\\n        return withdrawalFees;\\n    }\\n\\n    function beforeDeposit() external virtual {}\\n\\n    function setWithdrawalFeeTier(\\n        uint256[4] memory _feeList\\n    ) external onlyManager {\\n        for (uint i = 0; i < 4; i++) {\\n            require(_feeList[i] <= WITHDRAWAL_FEE_CAP, \\\"!cap\\\");\\n        }\\n        withdrawalFeePerTier = _feeList;\\n    }\\n\\n    function setWithdrawalFeePerTier(\\n        uint256 tierNo,\\n        uint256 fee\\n    ) external onlyManager {\\n        require(fee <= WITHDRAWAL_FEE_CAP, \\\"!cap\\\");\\n\\n        withdrawalFeePerTier[tierNo] = fee;\\n\\n        emit SetWithdrawalFeePerTier(tierNo, fee);\\n    }\\n\\n    function getWithdrawalFee(address caller) public view returns (uint256) {\\n        return\\n            withdrawalFeePerTier[\\n                IGFITierChecker(tierChecker).checkTier(caller)\\n            ];\\n    }\\n\\n    function getAllWithdrawalFeePerTier()\\n        external\\n        view\\n        returns (uint256[4] memory)\\n    {\\n        return withdrawalFeePerTier;\\n    }\\n\\n    function setHarvestFees(\\n        uint256 managerFee,\\n        uint256 partnerFee\\n    ) external onlyManager {\\n        require(\\n            managerFee <= HARVEST_FEE_CAP && partnerFee <= HARVEST_FEE_CAP,\\n            \\\"!cap\\\"\\n        );\\n\\n        harvestFees = FeeConfig(managerFee, partnerFee);\\n\\n        emit SetHarvestFees(managerFee, partnerFee);\\n    }\\n\\n    function setWithdrawalFees(\\n        uint256 managerFee,\\n        uint256 partnerFee\\n    ) external onlyManager {\\n        require((managerFee + partnerFee) <= FULL_PERCENT, \\\"Overflow!\\\");\\n\\n        withdrawalFees = FeeConfig(managerFee, partnerFee);\\n\\n        emit SetWithdrawalFees(managerFee, partnerFee);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/strategies/Stargate/StrategyStargatePoly.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../../interfaces/common/IUniswapRouterETH.sol\\\";\\nimport \\\"../../interfaces/sushi/ITridentRouter.sol\\\";\\nimport \\\"../../interfaces/sushi/IBentoPool.sol\\\";\\nimport \\\"../../interfaces/sushi/IBentoBox.sol\\\";\\nimport \\\"../../interfaces/common/IMasterChef.sol\\\";\\nimport \\\"../../interfaces/stargate/IStargateRouter.sol\\\";\\nimport \\\"../Common/StratFeeManager.sol\\\";\\nimport \\\"../../utils/StringUtils.sol\\\";\\n\\ncontract StrategyStargatePoly is StratFeeManager {\\n    using SafeERC20 for IERC20;\\n\\n    struct Routes {\\n        address[] outputToStableRoute;\\n        address outputToStablePool;\\n        address[] stableToNativeRoute;\\n        address[] stableToInputRoute;\\n    }\\n\\n    // Tokens used\\n    address public native;\\n    address public output;\\n    address public want;\\n    address public stable;\\n    address public input;\\n\\n    // Third party contracts\\n    address public chef = address(0x8731d54E9D02c286767d56ac03e8037C07e01e98);\\n    uint256 public poolId;\\n    address public stargateRouter =\\n        address(0x45A01E4e04F14f7A4a6702c74187c5F6222033cd);\\n    address public quickRouter =\\n        address(0xa5E0829CaCEd8fFDD4De3c43696c57F7D7A678ff);\\n    uint256 public routerPoolId;\\n    address public bentoBox =\\n        address(0x0319000133d3AdA02600f0875d2cf03D442C3367);\\n\\n    bool public harvestOnDeposit;\\n    uint256 public lastHarvest;\\n    string public pendingRewardsFunctionName;\\n\\n    // Routes\\n    address[] public outputToStableRoute;\\n    ITridentRouter.ExactInputSingleParams public outputToStableParams;\\n    address[] public stableToNativeRoute;\\n    address[] public stableToInputRoute;\\n\\n    event StratHarvest(\\n        address indexed harvester,\\n        uint256 wantHarvested,\\n        uint256 tvl\\n    );\\n    event Deposit(uint256 tvl);\\n    event Withdraw(uint256 tvl);\\n    event ChargedFees(\\n        uint256 callFees,\\n        uint256 gravityFees,\\n        uint256 strategistFees\\n    );\\n\\n    event ChargedHarvestFees(uint256 managerFee, uint256 partnerFee);\\n    event ChargedWithdrawalFees(uint256 managerFee, uint256 partnerFee);\\n\\n    constructor(\\n        address _want,\\n        uint256 _poolId,\\n        uint256 _routerPoolId,\\n        Routes memory _routes,\\n        CommonAddresses memory _commonAddresses\\n    ) StratFeeManager(_commonAddresses) {\\n        want = _want;\\n        poolId = _poolId;\\n        routerPoolId = _routerPoolId;\\n\\n        output = _routes.outputToStableRoute[0];\\n        stable = _routes.outputToStableRoute[\\n            _routes.outputToStableRoute.length - 1\\n        ];\\n        native = _routes.stableToNativeRoute[\\n            _routes.stableToNativeRoute.length - 1\\n        ];\\n        input = _routes.stableToInputRoute[\\n            _routes.stableToInputRoute.length - 1\\n        ];\\n\\n        require(\\n            _routes.stableToNativeRoute[0] == stable,\\n            \\\"stableToNativeRoute[0] != stable\\\"\\n        );\\n        require(\\n            _routes.stableToInputRoute[0] == stable,\\n            \\\"stableToInputRoute[0] != stable\\\"\\n        );\\n        outputToStableRoute = _routes.outputToStableRoute;\\n        stableToNativeRoute = _routes.stableToNativeRoute;\\n        stableToInputRoute = _routes.stableToInputRoute;\\n\\n        outputToStableParams = ITridentRouter.ExactInputSingleParams(\\n            0,\\n            1,\\n            _routes.outputToStablePool,\\n            output,\\n            abi.encode(output, address(this), true)\\n        );\\n\\n        IBentoBox(bentoBox).setMasterContractApproval(\\n            address(this),\\n            unirouter,\\n            true,\\n            0,\\n            bytes32(0),\\n            bytes32(0)\\n        );\\n\\n        _giveAllowances();\\n    }\\n\\n    // puts the funds to work\\n    function deposit() public whenNotPaused {\\n        uint256 wantBal = IERC20(want).balanceOf(address(this));\\n\\n        if (wantBal > 0) {\\n            IMasterChef(chef).deposit(poolId, wantBal);\\n            emit Deposit(balanceOf());\\n        }\\n    }\\n\\n    function withdraw(uint256 _amount) external {\\n        require(msg.sender == vault, \\\"!vault\\\");\\n\\n        uint256 wantBal = IERC20(want).balanceOf(address(this));\\n\\n        if (wantBal < _amount) {\\n            IMasterChef(chef).withdraw(poolId, _amount - wantBal);\\n            wantBal = IERC20(want).balanceOf(address(this));\\n        }\\n\\n        if (wantBal > _amount) {\\n            wantBal = _amount;\\n        }\\n\\n        if (tx.origin != owner() && !paused()) {\\n            uint256 withdrawalFeeAmount = (wantBal *\\n                getWithdrawalFee(tx.origin)) / WITHDRAWAL_MAX;\\n            if (withdrawalFeeAmount > 0) {\\n                wantBal = wantBal - withdrawalFeeAmount;\\n                chargeWithdrawalFees(withdrawalFeeAmount);\\n            }\\n        }\\n\\n        IERC20(want).safeTransfer(vault, wantBal);\\n\\n        emit Withdraw(balanceOf());\\n    }\\n\\n    function chargeWithdrawalFees(uint256 _feeAmount) internal {\\n        uint256 partnerFee;\\n        uint256 managerFee;\\n\\n        if (withdrawalFees.managerFee > 0) {\\n            managerFee =\\n                (_feeAmount * withdrawalFees.managerFee) /\\n                FULL_PERCENT;\\n\\n            IERC20(want).safeTransfer(managerReceiver, managerFee);\\n        }\\n\\n        if (withdrawalFees.partnerFee > 0) {\\n            partnerFee =\\n                (_feeAmount * withdrawalFees.partnerFee) /\\n                FULL_PERCENT;\\n\\n            IERC20(want).safeTransfer(partnerReceiver, partnerFee);\\n        }\\n\\n        emit ChargedWithdrawalFees(managerFee, partnerFee);\\n    }\\n\\n    function beforeDeposit() external override {\\n        if (harvestOnDeposit) {\\n            require(msg.sender == vault, \\\"!vault\\\");\\n            _harvest(tx.origin);\\n        }\\n    }\\n\\n    function harvest(address callFeeRecipient) external virtual {\\n        _harvest(callFeeRecipient);\\n    }\\n\\n    function managerHarvest() external onlyManager {\\n        _harvest(tx.origin);\\n    }\\n\\n    // compounds earnings and charges performance fee\\n    function _harvest(address callFeeRecipient) internal whenNotPaused {\\n        IMasterChef(chef).deposit(poolId, 0);\\n        uint256 outputBal = IERC20(output).balanceOf(address(this));\\n        if (outputBal > 0) {\\n            chargeFees(callFeeRecipient);\\n            addLiquidity();\\n            uint256 wantHarvested = balanceOfWant();\\n            deposit();\\n\\n            lastHarvest = block.timestamp;\\n            emit StratHarvest(msg.sender, wantHarvested, balanceOf());\\n        }\\n    }\\n\\n    // performance fees\\n    function chargeFees(address callFeeRecipient) internal {\\n        outputToStableParams.amountIn = IERC20(output).balanceOf(address(this));\\n        ITridentRouter(unirouter).exactInputSingleWithNativeToken(\\n            outputToStableParams\\n        );\\n\\n        uint256 toNative = (IERC20(stable).balanceOf(address(this)) * 45) /\\n            1000;\\n\\n        if (toNative > 0) {\\n            uint256 partnerFeeAmount;\\n            uint256 managerFeeAmount;\\n\\n            if (harvestFees.managerFee > 0) {\\n                managerFeeAmount =\\n                    (toNative * harvestFees.managerFee) /\\n                    FULL_PERCENT;\\n\\n                IERC20(stable).safeTransfer(managerReceiver, managerFeeAmount);\\n            }\\n\\n            if (harvestFees.partnerFee > 0) {\\n                partnerFeeAmount =\\n                    (toNative * harvestFees.partnerFee) /\\n                    FULL_PERCENT;\\n\\n                IERC20(stable).safeTransfer(partnerReceiver, partnerFeeAmount);\\n            }\\n\\n            emit ChargedHarvestFees(managerFeeAmount, partnerFeeAmount);\\n        }\\n    }\\n\\n    // Adds liquidity to AMM and gets more LP tokens.\\n    function addLiquidity() internal {\\n        if (stable != input) {\\n            uint256 toInput = IERC20(stable).balanceOf(address(this));\\n            if (toInput > 0) {\\n                IUniswapRouterETH(quickRouter).swapExactTokensForTokens(\\n                    toInput,\\n                    0,\\n                    stableToInputRoute,\\n                    address(this),\\n                    block.timestamp\\n                );\\n            }\\n        }\\n\\n        uint256 inputBal = IERC20(input).balanceOf(address(this));\\n        if (inputBal > 0) {\\n            IStargateRouter(stargateRouter).addLiquidity(\\n                routerPoolId,\\n                inputBal,\\n                address(this)\\n            );\\n        }\\n    }\\n\\n    // calculate the total underlaying 'want' held by the strat.\\n    function balanceOf() public view returns (uint256) {\\n        return balanceOfWant() + balanceOfPool();\\n    }\\n\\n    // it calculates how much 'want' this contract holds.\\n    function balanceOfWant() public view returns (uint256) {\\n        return IERC20(want).balanceOf(address(this));\\n    }\\n\\n    // it calculates how much 'want' the strategy has working in the farm.\\n    function balanceOfPool() public view returns (uint256) {\\n        (uint256 _amount, ) = IMasterChef(chef).userInfo(poolId, address(this));\\n        return _amount;\\n    }\\n\\n    function setPendingRewardsFunctionName(\\n        string calldata _pendingRewardsFunctionName\\n    ) external onlyManager {\\n        pendingRewardsFunctionName = _pendingRewardsFunctionName;\\n    }\\n\\n    // returns rewards unharvested\\n    function rewardsAvailable() public view returns (uint256) {\\n        string memory signature = StringUtils.concat(\\n            pendingRewardsFunctionName,\\n            \\\"(uint256,address)\\\"\\n        );\\n        bytes memory result = Address.functionStaticCall(\\n            chef,\\n            abi.encodeWithSignature(signature, poolId, address(this))\\n        );\\n        return abi.decode(result, (uint256));\\n    }\\n\\n    // native reward amount for calling harvest\\n    function callReward() external view returns (uint256) {\\n        uint256 outputBal = rewardsAvailable();\\n        uint256 nativeOut;\\n        if (outputBal > 0) {\\n            bytes memory data = abi.encode(output, outputBal);\\n            uint256 inputBal = IBentoPool(outputToStableParams.pool)\\n                .getAmountOut(data);\\n            if (inputBal > 0) {\\n                uint256[] memory amountOut = IUniswapRouterETH(quickRouter)\\n                    .getAmountsOut(inputBal, stableToNativeRoute);\\n                nativeOut = amountOut[amountOut.length - 1];\\n            }\\n        }\\n\\n        IFeeConfig.FeeCategory memory fees = getFees();\\n        return (((nativeOut * fees.total) / DIVISOR) * fees.call) / DIVISOR;\\n    }\\n\\n    function setHarvestOnDeposit(bool _harvestOnDeposit) external onlyManager {\\n        harvestOnDeposit = _harvestOnDeposit;\\n\\n        if (harvestOnDeposit) {\\n            setWithdrawalFee(0);\\n        } else {\\n            setWithdrawalFee(10);\\n        }\\n    }\\n\\n    // called as part of strat migration. Sends all the available funds back to the vault.\\n    function retireStrat() external {\\n        require(msg.sender == vault, \\\"!vault\\\");\\n\\n        IMasterChef(chef).emergencyWithdraw(poolId);\\n\\n        uint256 wantBal = IERC20(want).balanceOf(address(this));\\n        IERC20(want).transfer(vault, wantBal);\\n    }\\n\\n    // pauses deposits and withdraws all funds from third party systems.\\n    function panic() public onlyManager {\\n        pause();\\n        IMasterChef(chef).emergencyWithdraw(poolId);\\n    }\\n\\n    function pause() public onlyManager {\\n        _pause();\\n\\n        _removeAllowances();\\n    }\\n\\n    function unpause() external onlyManager {\\n        _unpause();\\n\\n        _giveAllowances();\\n\\n        deposit();\\n    }\\n\\n    function _giveAllowances() internal {\\n        IERC20(want).safeApprove(chef, type(uint).max);\\n        IERC20(output).safeApprove(bentoBox, type(uint).max);\\n        IERC20(stable).safeApprove(quickRouter, type(uint).max);\\n        IERC20(input).safeApprove(stargateRouter, type(uint).max);\\n    }\\n\\n    function _removeAllowances() internal {\\n        IERC20(want).safeApprove(chef, 0);\\n        IERC20(output).safeApprove(bentoBox, 0);\\n        IERC20(stable).safeApprove(quickRouter, 0);\\n        IERC20(input).safeApprove(stargateRouter, 0);\\n    }\\n\\n    function outputToStable() external view returns (address[] memory) {\\n        return outputToStableRoute;\\n    }\\n\\n    function stableToNative() external view returns (address[] memory) {\\n        return stableToNativeRoute;\\n    }\\n\\n    function stableToInput() external view returns (address[] memory) {\\n        return stableToInputRoute;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/StringUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.9.0;\\n\\nlibrary StringUtils {\\n    function concat(string memory a, string memory b) internal pure returns (string memory) {\\n        return string(abi.encodePacked(a, b));\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_want\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_routerPoolId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"outputToStableRoute\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"outputToStablePool\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"stableToNativeRoute\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"stableToInputRoute\",\"type\":\"address[]\"}],\"internalType\":\"struct StrategyStargatePoly.Routes\",\"name\":\"_routes\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"unirouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"partner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gravityFeeConfig\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tierChecker\",\"type\":\"address\"}],\"internalType\":\"struct StratFeeManager.CommonAddresses\",\"name\":\"_commonAddresses\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"callFees\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gravityFees\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"strategistFees\",\"type\":\"uint256\"}],\"name\":\"ChargedFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"managerFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"partnerFee\",\"type\":\"uint256\"}],\"name\":\"ChargedHarvestFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"managerFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"partnerFee\",\"type\":\"uint256\"}],\"name\":\"ChargedWithdrawalFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tvl\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"gravityFeeConfig\",\"type\":\"address\"}],\"name\":\"SetGravityFeeConfig\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"managerFee\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"partnerFee\",\"type\":\"uint256\"}],\"name\":\"SetHarvestFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"}],\"name\":\"SetKeeper\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"SetManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"strategist\",\"type\":\"address\"}],\"name\":\"SetPartner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeId\",\"type\":\"uint256\"}],\"name\":\"SetStratFeeId\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"unirouter\",\"type\":\"address\"}],\"name\":\"SetUnirouter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"SetVault\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawalFee\",\"type\":\"uint256\"}],\"name\":\"SetWithdrawalFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tierNo\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"SetWithdrawalFeePerTier\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"managerFee\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"partnerFee\",\"type\":\"uint256\"}],\"name\":\"SetWithdrawalFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"harvester\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wantHarvested\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tvl\",\"type\":\"uint256\"}],\"name\":\"StratHarvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tvl\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FULL_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAWAL_MAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfWant\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beforeDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bentoBox\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"callReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chef\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllFees\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"manager\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"call\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"partner\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"label\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"internalType\":\"struct IFeeConfig.FeeCategory\",\"name\":\"performance\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdraw\",\"type\":\"uint256\"}],\"internalType\":\"struct IFeeConfig.AllFees\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllWithdrawalFeePerTier\",\"outputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"\",\"type\":\"uint256[4]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHarvestFees\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"managerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"partnerFee\",\"type\":\"uint256\"}],\"internalType\":\"struct StratFeeManager.FeeConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStratFeeId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"getWithdrawalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWithdrawalFees\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"managerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"partnerFee\",\"type\":\"uint256\"}],\"internalType\":\"struct StratFeeManager.FeeConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gravityFeeConfig\",\"outputs\":[{\"internalType\":\"contract IFeeConfig\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"callFeeRecipient\",\"type\":\"address\"}],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestOnDeposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"input\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keeper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastHarvest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"managerHarvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"managerReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"native\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"output\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"outputToStable\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"outputToStableParams\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMinimum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"outputToStableRoute\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"panic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"partnerReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingRewardsFunctionName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quickRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retireStrat\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsAvailable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"routerPoolId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gravityFeeConfig\",\"type\":\"address\"}],\"name\":\"setGravityFeeConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"managerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"partnerFee\",\"type\":\"uint256\"}],\"name\":\"setHarvestFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_harvestOnDeposit\",\"type\":\"bool\"}],\"name\":\"setHarvestOnDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeper\",\"type\":\"address\"}],\"name\":\"setKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_partner\",\"type\":\"address\"}],\"name\":\"setPartner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_pendingRewardsFunctionName\",\"type\":\"string\"}],\"name\":\"setPendingRewardsFunctionName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeId\",\"type\":\"uint256\"}],\"name\":\"setStratFeeId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tierChecker\",\"type\":\"address\"}],\"name\":\"setTierChecker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_unirouter\",\"type\":\"address\"}],\"name\":\"setUnirouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"setVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setWithdrawalFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tierNo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setWithdrawalFeePerTier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"_feeList\",\"type\":\"uint256[4]\"}],\"name\":\"setWithdrawalFeeTier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"managerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"partnerFee\",\"type\":\"uint256\"}],\"name\":\"setWithdrawalFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stable\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stableToInput\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stableToInputRoute\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stableToNative\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stableToNativeRoute\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stargateRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tierChecker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unirouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"want\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"withdrawalFeePerTier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "StrategyStargatePoly", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000029e38769f23701a2e4a8ef0492e19da4604be62c0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c5017be80b4446988e8686168396289a9a62668e000000000000000000000000eb678812778b68a48001b4a9a4a04c4924c335980000000000000000000000004806b246f710d0a8d92fe2d4ae2dced1adb83d0f0000000000000000000000004806b246f710d0a8d92fe2d4ae2dced1adb83d0f000000000000000000000000c6a195f87d1e0a4b69052a111139dc268c037569000000000000000000000000960d850c906301eea00e8d5c61acefed3783e2060000000000000000000000000000000000000000000000000000000000000080000000000000000000000000ca5953773602e8c789f0635f40e05e816165b85c00000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000000020000000000000000000000002f6f07cdcf3588944bf4c42ac74ff24bf56e75900000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000000000000000000000000000000000000020000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa841740000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf127000000000000000000000000000000000000000000000000000000000000000020000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa84174000000000000000000000000c2132d05d31c914a87c6611c10748aeb04b58e8f", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}