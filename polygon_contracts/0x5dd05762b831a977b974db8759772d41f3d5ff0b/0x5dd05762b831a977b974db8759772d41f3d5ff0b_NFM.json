{"SourceCode": "//SPDX-License-Identifier:MIT\r\n\r\npragma solidity ^0.8.13;\r\n\r\n//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n// LIBRARIES\r\n//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n// SAFEMATH its a Openzeppelin Lib. Check out for more info @ https://docs.openzeppelin.com/contracts/2.x/api/math\r\n//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n// INTERFACES\r\n//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n// INFMCONTROLLER\r\n//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\ninterface INfmController {\r\n    function _checkWLSC(address Controller, address Client)\r\n        external\r\n        pure\r\n        returns (bool);\r\n\r\n    function _getController() external pure returns (address);\r\n\r\n    function _getNFM() external pure returns (address);\r\n\r\n    function _getTimer() external pure returns (address);\r\n\r\n    function _getPad() external pure returns (address);\r\n\r\n    function _getMinting() external pure returns (address);\r\n\r\n    function _getBurning() external pure returns (address);\r\n\r\n    function _getSwap() external pure returns (address);\r\n\r\n    function _getLiquidity() external pure returns (address);\r\n\r\n    function _getUV2Pool() external pure returns (address);\r\n\r\n    function _getBonusBuyBack() external pure returns (address, address);\r\n\r\n    function _getNFMStaking() external pure returns (address);\r\n\r\n    function _getNFMStakingTreasuryERC20() external view returns (address);\r\n\r\n    function _getTreasury() external view returns (address);\r\n\r\n    function _getAirdrop() external view returns (address);\r\n}\r\n\r\n//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n// INFMTIMER\r\n//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\ninterface INfmTimer {\r\n    function _getStartTime() external pure returns (uint256);\r\n\r\n    function _getEndMintTime() external pure returns (uint256);\r\n\r\n    function _getDailyMintTime() external pure returns (uint256);\r\n\r\n    function _getStartBurnTime() external pure returns (uint256);\r\n\r\n    function _getUV2_LiquidityTime() external pure returns (uint256);\r\n\r\n    function _getUV2_SwapTime() external pure returns (uint256);\r\n\r\n    function _getExtraBonusAllTime() external view returns (uint256);\r\n\r\n    function _getEndExtraBonusAllTime() external view returns (uint256);\r\n\r\n    function _updateExtraBonusAll() external returns (bool);\r\n\r\n    function _getLogicCountdown() external view returns (uint256);\r\n\r\n    function _getStartBuyBackTime() external view returns (uint256);\r\n\r\n    function _updateStartBuyBack() external returns (bool);\r\n\r\n    function _getExtraBonusAirdropTime() external view returns (uint256);\r\n\r\n    function _getEndExtraBonusAirdropTime() external view returns (uint256);\r\n\r\n    function _getUV2_RemoveLiquidityTime() external view returns (uint256);\r\n\r\n    function _updateExtraBonusAirdrop() external returns (bool);\r\n\r\n    function _updateUV2_RemoveLiquidity_event() external returns (bool);\r\n}\r\n\r\n//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n// INFMPAD\r\n//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\ninterface INfmPad {\r\n    function balancePAD(address account) external pure returns (uint256);\r\n\r\n    function _PADCHECK(address from, uint256 amount) external returns (bool);\r\n}\r\n\r\n//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n// INFMMINTING\r\n//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\ninterface INfmMinting {\r\n    function _minting(address sender) external returns (bool);\r\n\r\n    function _updateBNFTAmount(address minter) external returns (bool);\r\n}\r\n\r\n//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n// INFMSWAP\r\n//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\ninterface INfmSwap {\r\n    function _LiquifyAndSwap() external returns (bool);\r\n}\r\n\r\n//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n// INFMLIQUIDITY\r\n//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\ninterface INfmAddLiquidity {\r\n    function _addLiquidity() external returns (bool);\r\n}\r\n\r\n//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n// INFMBURNING\r\n//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\ninterface INfmBurning {\r\n    function checkburn(uint256 amount)\r\n        external\r\n        view\r\n        returns (\r\n            bool state,\r\n            bool typ,\r\n            uint256 bfee,\r\n            uint256 stakefee\r\n        );\r\n}\r\n\r\n//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n// INFMBUYBACK\r\n//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\ninterface INfmBuyBack {\r\n    function _BuyBack() external returns (bool);\r\n}\r\n\r\n//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n// INFMBUYBACK\r\n//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\ninterface INfmUV2Pool {\r\n    function redeemLPToken() external returns (bool);\r\n}\r\n\r\n//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n// INFMAIRDROP\r\n//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\ninterface INfmAirdrop {\r\n    function _checkPayment(address sender) external view returns (uint256);\r\n\r\n    function _getAirdrop(address Sender) external returns (bool);\r\n\r\n    function _getWithdraw() external returns (bool);\r\n}\r\n\r\n//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n// INFMBONUS\r\n//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\ninterface INfmExtraBonus {\r\n    function _getBonus(address winner) external returns (bool);\r\n\r\n    function _returnPayoutRule() external view returns (uint256);\r\n\r\n    function updateSchalter() external returns (bool);\r\n\r\n    function _getWithdraw(\r\n        address To,\r\n        uint256 amount,\r\n        bool percent\r\n    ) external returns (bool);\r\n\r\n    function updatePayoutRule() external returns (bool);\r\n}\r\n\r\n//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n/// @title NFM.sol\r\n/// @author Fernando Viktor Seidl E-mail: viktorseidl@gmail.com\r\n/// @notice ERC20 Token Standard Contract with special extensions in the \"_transfer\" functionality *** NFM ERC20 TOKEN ***\r\n/// @dev This ERC20 contract includes all functionalities of an ERC20 standard. The only difference to the standard are the built-in\r\n///            extensions in the _transfer function.\r\n///            The following interfaces are required for the smooth functionality of the extensions:\r\n///            -    Controller Interface\r\n///            -    Timer Interface\r\n///            -    PAD Interface\r\n///            -    Minting Interface\r\n///            -    Swap Interface\r\n///            -    Liquidity Interface\r\n///            -    Burning Interface\r\n///            -    Bonus Interface\r\n///            -    Airdrop Interface\r\n///            -    Vault Interface\r\n///            -    LP-Redemption Interface\r\n///            -    BuyBack Interface\r\n///\r\n///            TOKEN DETAILS:\r\n///            -    Inicial total supply 400,000,000 NFM\r\n///            -    Final total supply 1,000,000,000 NFM\r\n///            -    Token Decimals 18\r\n///            -    Token Name: Nftismus\r\n///            -    Token Symbol: NFM\r\n///\r\n///            TOKEN EXTENSIONS:\r\n///            -    PAD (Pump and Dump security): Used to protect against pump and dump actions. All accounts have a daily\r\n///                 transaction limit of 1 million NFM. Large investors can whitelist this up to 1.5 million for a fee of 10,000 NFM\r\n///            -    Minting: 7,600,000,000 NFM are created by minting in 8 years. 60% of the amount can only be obtained via\r\n///                 the staking pool. 15% is allocated to the Uniswap protocol. 5% goes to AFT Governance. 10% to the developers\r\n///                 and 10% to the NFM Treasury for investments to generate profits for the Bonus Event.\r\n///            -    Burning and Community: 7,000,000,000 NFM are destroyed by burning process starting after 4 years with a burning\r\n///                 fee of 2%  and a Community Fee of 2%. The burning fee will be maintained until the total amount has shrunk back to\r\n///                 1 billion. When this is done, the burning fee will be credited to the community. The community fee is a staking contribution.\r\n///                 Since the staking pool is funded by the minting protocol, which is finite. An infinite interest system is created by the\r\n///                 community fee, so that interest can still be generated in the stake even after minting.\r\n///            -    Liquidity: extension implements Uniswapv2 Protocol and adds liquidity to different markets.\r\n///            -    Swap: extension implements Uniswapv2 Protocol and exchanges the NFM for different currencies for the Liquidity extension\r\n///                 10% of every realized swap goes into the Bonus Event.\r\n///            -    Timer: controls the timing of all extensions of the protocol\r\n///            -    Bonus: allows NFM owners to receive profit distributions of the protocol in other currencies such\r\n///                 as WBTC,WBNB,WETH,WMATIC,DAI,... every 100 days\r\n///            -    Airdrop: allows NFM owners to receive profit distributions of the protocol in other currencies from the IDO\r\n///                 Launchpad or listed Airdrops from other projects... every 6 days\r\n///            -    LP-Redemption: Redeem the locked LP tokens step by step. 20% goes to the NFM Community through the Bonus Event. The\r\n///                 remaining 80% goes to NFM Treasury, AFT Governance and Developers on a 40/30/10 split\r\n///            -    Vault Interface: Makes investments in different protocols like Aave, Uniswap,... to generate additional profits for the bonus payouts.\r\n///            -    BuyBack: Buyback program will start after reaching the final total supply of 1 billion NFM. Buybacks are executed monthly (30 day interval)\r\n///                 via the decentralized markets on UniswapV2.\r\n///\r\n///            TOKEN USE CASE:\r\n///            -    The principal application of the NFM token is the creation of value. This should not only be borne by the token itself,\r\n///                 but also by future projects in the art, real estate and financial sectors\r\n///            -    We as founders have the idea of \u200b\u200bcreating something completely new, which not only refers to the digital values, but also\r\n///                 includes the physical real value.\r\n///            -    The token can be viewed as an auto-generating yield token. With the help of the extensions, the NFM receives a share\r\n///                 of bonus payments and airdrops. These are distributed via the stake or via trading\r\n///            -    Our vision is to add real products to the returns in the future.\r\n//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\ncontract NFM {\r\n    //include SafeMath\r\n    using SafeMath for uint256;\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    /*\r\n    STANDARD ERC20 MAPPINGS:\r\n    _balances(owner address, nfm amount)\r\n    _allowances(owner address, spender address, nfm amount)\r\n     */\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    mapping(address => uint256) public _balances;\r\n    mapping(address => mapping(address => uint256)) public _allowances;\r\n    mapping(address => uint256) private _BonusTracker;\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    /*\r\n    CONTRACT EVENTS\r\n    STANDARD ERC20 EVENTS:\r\n    Transfer(sender, receiver, amount);\r\n    Approval(owner, spender, amount);\r\n    SPECIAL EVENT:\r\n    Burning(sender, receiver, BurningFee, Timestamp\r\n    );\r\n     */\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Burning(\r\n        address indexed sender,\r\n        address indexed receiver,\r\n        uint256 BFee,\r\n        uint256 Time\r\n    );\r\n\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    /*\r\n    ERC20 STANDARD ATTRIBUTES\r\n    _TokenName           => Name of the Token (Nftismus)\r\n    _TokenSymbol         => Symbol of the Token (NFM)\r\n    _TokenDecimals      =>  Precision of the Token (18 Decimals)\r\n    _TotalSupply            =>  Total Amount of Tokens (Inicial 400 Million NFM)\r\n     */\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    string private _TokenName;\r\n    string private _TokenSymbol;\r\n    uint256 private _TokenDecimals;\r\n    uint256 private _TotalSupply;\r\n\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    /*\r\n    SECURITY ATTRIBUTES\r\n    _paused        => Pausing can only be commissioned by the Dao.\r\n     */\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    uint256 private _paused;\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    /*\r\n    CONTROLLER\r\n    OWNER = MSG.SENDER ownership will be handed over to dao\r\n     */\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    address private _Owner;\r\n    INfmController public _Controller;\r\n    address private _SController;\r\n\r\n    constructor(\r\n        string memory TokenName,\r\n        string memory TokenSymbol,\r\n        uint256 TokenDecimals,\r\n        address Controller\r\n    ) {\r\n        _TokenName = TokenName;\r\n        _TokenSymbol = TokenSymbol;\r\n        _TokenDecimals = TokenDecimals;\r\n        _TotalSupply = 400000000 * 10**TokenDecimals;\r\n        _Owner = msg.sender;\r\n        _SController = Controller;\r\n        INfmController Cont = INfmController(Controller);\r\n        _Controller = Cont;\r\n        _balances[_Owner] = _TotalSupply;\r\n        emit Transfer(address(0), _Owner, _TotalSupply);\r\n        _paused = 0;\r\n    }\r\n\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    /*\r\n    @name() returns (string);\r\n    Strandard ERC20 Function\r\n     */\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    function name() public view returns (string memory) {\r\n        return _TokenName;\r\n    }\r\n\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    /*\r\n    @symbol() returns (string);\r\n    Strandard ERC20 Function\r\n     */\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    function symbol() public view returns (string memory) {\r\n        return _TokenSymbol;\r\n    }\r\n\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    /*\r\n    @decimals() returns (uint256);\r\n    Strandard ERC20 Function\r\n     */\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    function decimals() public view returns (uint256) {\r\n        return _TokenDecimals;\r\n    }\r\n\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    /*\r\n    @totalSupply() returns (uint256);\r\n    Strandard ERC20 Function\r\n     */\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    function totalSupply() public view returns (uint256) {\r\n        return _TotalSupply;\r\n    }\r\n\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    /*\r\n    @balanceOf(address account) returns (uint256);\r\n    Strandard ERC20 Function\r\n     */\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    /*\r\n    @bonusCheck(address account) returns (uint256, uint256, bool);\r\n    Special Function for Bonus Extension\r\n     */\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    function bonusCheck(address account) public view returns (uint256) {\r\n        require(\r\n            _Controller._checkWLSC(_SController, msg.sender) == true ||\r\n                msg.sender == _Owner,\r\n            \"oO\"\r\n        );\r\n        return _BonusTracker[account];\r\n    }\r\n\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    /*\r\n    @allowance(address owner, address spender) returns (uint256);\r\n    Strandard ERC20 Function\r\n     */\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    /*\r\n    @onOffNFM() returns (bool);\r\n    This function can only be executed by the Dao and is used to pause the protocol\r\n     */\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    function onOffNFM() public returns (bool) {\r\n        require(msg.sender != address(0), \"0A\");\r\n        require(\r\n            _Controller._checkWLSC(_SController, msg.sender) == true ||\r\n                msg.sender == _Owner,\r\n            \"oO\"\r\n        );\r\n        if (_paused == 0) {\r\n            _paused = 1;\r\n        } else {\r\n            _paused = 0;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    /*\r\n    @transfer(address to, uint256 amount)  returns (bool);\r\n    Strandard ERC20 Function \r\n     */\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    function transfer(address to, uint256 amount) public returns (bool) {\r\n        address owner = msg.sender;\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    /*\r\n    @transferFrom(address from, address to, uint256 amount)   returns (bool);\r\n    Strandard ERC20 Function\r\n     */\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public returns (bool) {\r\n        address spender = msg.sender;\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    /*\r\n    @_transfer(address from, address to, uint256 amount)  returns (bool);\r\n    Strandard ERC20 Function with implemented Extensions and ReentrancyGuard as safety mechanism\r\n     */\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"0A\");\r\n        require(to != address(0), \"0A\");\r\n        require(_paused == 0, \"_P\");\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"<B\");\r\n        //--------------------------------------------------------------------------------------------\r\n        /**\r\n        IF ADDRESS IS WHITELISTED\r\n        THEN DON'T APPLY LOGIC SMART CONTRACT IS CALLING\r\n        */\r\n        //--------------------------------------------------------------------------------------------\r\n        if (_Controller._checkWLSC(_SController, msg.sender) == true) {\r\n            unchecked {\r\n                _balances[from] = SafeMath.sub(fromBalance, amount);\r\n            }\r\n            if (\r\n                block.timestamp <\r\n                INfmTimer(address(_Controller._getTimer()))\r\n                    ._getExtraBonusAllTime() &&\r\n                block.timestamp <\r\n                INfmTimer(address(_Controller._getTimer()))\r\n                    ._getExtraBonusAirdropTime()\r\n            ) {\r\n                _BonusTracker[to] = _balances[to] + amount;\r\n                _BonusTracker[from] = _balances[from];\r\n            }\r\n\r\n            _balances[to] += amount;\r\n\r\n            emit Transfer(from, to, amount);\r\n        } else {\r\n            //--------------------------------------------------------------------------------------------\r\n            /**\r\n            IF ADDRESS IS NOT WHITELISTED \r\n            LOGIC MUST BE APPLIED\r\n             */\r\n            //--------------------------------------------------------------------------------------------\r\n\r\n            //--------------------------------------------------------------------------------------------\r\n            /**\r\n            1 - )   APPLY PAD SECURITY\r\n             */\r\n            //--------------------------------------------------------------------------------------------\r\n            require(\r\n                INfmPad(_Controller._getPad())._PADCHECK(from, amount) == true,\r\n                \"PAD\"\r\n            );\r\n\r\n            //--------------------------------------------------------------------------------------------\r\n            /**\r\n            INICIALIZE TIMER INTERFACE FOR ALL OTHER EXTENSION-CHECKS\r\n             */\r\n            //--------------------------------------------------------------------------------------------\r\n            INfmTimer Timer = INfmTimer(_Controller._getTimer());\r\n\r\n            //--------------------------------------------------------------------------------------------\r\n            /**\r\n            CHECK IF THE LOGIC OF THE PROTOCOL HAS BEEN INICIALIZED, IF NOT THEN\r\n            NO EXTENSIONS  CAN BE APPLIED (TOKEN IS ALREADY ON\r\n             */\r\n            //--------------------------------------------------------------------------------------------\r\n            if (\r\n                Timer._getStartTime() > 0 &&\r\n                Timer._getStartTime() < block.timestamp\r\n            ) {\r\n                //--------------------------------------------------------------------------------------------\r\n                /**\r\n                INICIALIZE TLOCKER VARIABLE\r\n                (ALLOWS ONLY ONE EXTENSION TO BE EXECUTED AT A TIME)\r\n                */\r\n                //--------------------------------------------------------------------------------------------\r\n                bool tlocker = false;\r\n\r\n                //--------------------------------------------------------------------------------------------\r\n                /**\r\n                2 - )   MINTING EXTENSION \r\n                */\r\n                //--------------------------------------------------------------------------------------------\r\n                if (\r\n                    block.timestamp <= Timer._getEndMintTime() &&\r\n                    block.timestamp >= Timer._getDailyMintTime()\r\n                ) {\r\n                    INfmMinting Minter = INfmMinting(_Controller._getMinting());\r\n                    if (Minter._minting(from) == true) {\r\n                        tlocker = true;\r\n                    }\r\n                }\r\n                //--------------------------------------------------------------------------------------------\r\n                /**\r\n                3 - )   LIQUIDITY EXTENSION \r\n                */\r\n                //--------------------------------------------------------------------------------------------\r\n                if (\r\n                    tlocker == false &&\r\n                    block.timestamp >= Timer._getUV2_LiquidityTime() &&\r\n                    block.timestamp <= Timer._getEndMintTime()\r\n                ) {\r\n                    INfmAddLiquidity Liquidity = INfmAddLiquidity(\r\n                        _Controller._getLiquidity()\r\n                    );\r\n                    if (Liquidity._addLiquidity() == true) {\r\n                        INfmMinting(_Controller._getMinting())\r\n                            ._updateBNFTAmount(msg.sender);\r\n                        tlocker = true;\r\n                    }\r\n                }\r\n                //--------------------------------------------------------------------------------------------\r\n                /**\r\n                4 - )   SWAP EXTENSION \r\n                */\r\n                //--------------------------------------------------------------------------------------------\r\n                if (\r\n                    tlocker == false &&\r\n                    block.timestamp >= Timer._getUV2_SwapTime() &&\r\n                    block.timestamp <= Timer._getEndMintTime()\r\n                ) {\r\n                    //Start Swapping\r\n                    INfmSwap Swapper = INfmSwap(_Controller._getSwap());\r\n                    if (Swapper._LiquifyAndSwap() == true) {\r\n                        INfmMinting(_Controller._getMinting())\r\n                            ._updateBNFTAmount(msg.sender);\r\n                        tlocker = true;\r\n                    }\r\n                }\r\n                //--------------------------------------------------------------------------------------------\r\n                /**\r\n                7 - )   LP-TOKEN REDEMPTION \r\n                */\r\n                //--------------------------------------------------------------------------------------------\r\n                if (\r\n                    tlocker == false &&\r\n                    block.timestamp >= Timer._getUV2_RemoveLiquidityTime()\r\n                ) {\r\n                    //Start LP-Redemption\r\n                    INfmUV2Pool UV2Pool = INfmUV2Pool(\r\n                        _Controller._getUV2Pool()\r\n                    );\r\n                    if (UV2Pool.redeemLPToken() == true) {\r\n                        tlocker = true;\r\n                    }\r\n                }\r\n                //--------------------------------------------------------------------------------------------\r\n                /**\r\n                8 - )   BUYBACK EXTENSION \r\n                */\r\n                //--------------------------------------------------------------------------------------------\r\n                if (\r\n                    tlocker == false &&\r\n                    block.timestamp >= Timer._getStartBuyBackTime()\r\n                ) {\r\n                    //Start BuyBack\r\n                    (, address BBack) = _Controller._getBonusBuyBack();\r\n                    INfmBuyBack BuyBack = INfmBuyBack(BBack);\r\n                    if (BuyBack._BuyBack() == true) {\r\n                        tlocker = true;\r\n                    }\r\n                }\r\n                //--------------------------------------------------------------------------------------------\r\n                /**\r\n                5 - )   BONUS EXTENSION \r\n                */\r\n                //--------------------------------------------------------------------------------------------\r\n                if (\r\n                    tlocker == false &&\r\n                    block.timestamp >= Timer._getExtraBonusAllTime() &&\r\n                    _BonusTracker[from] >= 150 * 10**18\r\n                ) {\r\n                    if (block.timestamp >= Timer._getEndExtraBonusAllTime()) {\r\n                        //bonus finalized\r\n                        (address IBonus, ) = _Controller._getBonusBuyBack();\r\n                        INfmExtraBonus Bonus = INfmExtraBonus(IBonus);\r\n                        if (Bonus._returnPayoutRule() == 0) {\r\n                            //Make Withdraw to Stake 50%\r\n                            if (\r\n                                Bonus._getWithdraw(\r\n                                    address(\r\n                                        _Controller\r\n                                            ._getNFMStakingTreasuryERC20()\r\n                                    ),\r\n                                    50,\r\n                                    true\r\n                                ) == true\r\n                            ) {\r\n                                Bonus.updatePayoutRule();\r\n                                tlocker = true;\r\n                            }\r\n                        } else if (Bonus._returnPayoutRule() == 1) {\r\n                            //Make Withdraw to Treasury 50%\r\n                            if (\r\n                                Bonus._getWithdraw(\r\n                                    address(_Controller._getTreasury()),\r\n                                    0,\r\n                                    false\r\n                                ) == true\r\n                            ) {\r\n                                Bonus.updatePayoutRule();\r\n                                tlocker = true;\r\n                            }\r\n                        } else {\r\n                            Bonus.updatePayoutRule();\r\n                            if (Bonus.updateSchalter() == true) {\r\n                                Timer._updateExtraBonusAll();\r\n                                tlocker = true;\r\n                            }\r\n                        }\r\n                    } else {\r\n                        //Bonus still going\r\n                        (address IBonus, ) = _Controller._getBonusBuyBack();\r\n                        INfmExtraBonus Bonus = INfmExtraBonus(IBonus);\r\n                        if (Bonus._getBonus(from) == true) {\r\n                            tlocker = true;\r\n                        }\r\n                    }\r\n                }\r\n                //--------------------------------------------------------------------------------------------\r\n                /**\r\n                6 - )   AIRDROP EXTENSION \r\n                */\r\n                //--------------------------------------------------------------------------------------------\r\n                if (\r\n                    tlocker == false &&\r\n                    block.timestamp >= Timer._getExtraBonusAirdropTime() &&\r\n                    _BonusTracker[from] >= 150 * 10**18\r\n                ) {\r\n                    if (\r\n                        block.timestamp >= Timer._getEndExtraBonusAirdropTime()\r\n                    ) {\r\n                        INfmAirdrop Airdrop = INfmAirdrop(\r\n                            address(_Controller._getAirdrop())\r\n                        );\r\n                        if (Airdrop._getWithdraw() == true) {\r\n                            tlocker = true;\r\n                        }\r\n                    } else {\r\n                        //Airdrop already in place\r\n                        INfmAirdrop Airdrop = INfmAirdrop(\r\n                            address(_Controller._getAirdrop())\r\n                        );\r\n                        if (\r\n                            Airdrop._checkPayment(from) !=\r\n                            Timer._getEndExtraBonusAirdropTime()\r\n                        ) {\r\n                            if (Airdrop._getAirdrop(from) == true) {\r\n                                tlocker = true;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                //--------------------------------------------------------------------------------------------\r\n                /**\r\n                9 - )   BURNING EXTENSION \r\n                */\r\n                //--------------------------------------------------------------------------------------------\r\n                if (\r\n                    tlocker == false &&\r\n                    block.timestamp >= Timer._getStartBurnTime()\r\n                ) {\r\n                    //Start Burning\r\n\r\n                    INfmBurning Burner = INfmBurning(_Controller._getBurning());\r\n                    (\r\n                        bool state,\r\n                        bool typ,\r\n                        uint256 bfee,\r\n                        uint256 stakefee\r\n                    ) = Burner.checkburn(amount);\r\n                    if (state == true) {\r\n                        tlocker = true;\r\n                        if (typ == true) {\r\n                            _burn(from, bfee);\r\n                            fromBalance = _balances[from];\r\n                            unchecked {\r\n                                _balances[from] = SafeMath.sub(\r\n                                    fromBalance,\r\n                                    stakefee\r\n                                );\r\n                            }\r\n                            _balances[\r\n                                address(\r\n                                    _Controller._getNFMStakingTreasuryERC20()\r\n                                )\r\n                            ] += stakefee;\r\n                            emit Transfer(\r\n                                from,\r\n                                address(\r\n                                    _Controller._getNFMStakingTreasuryERC20()\r\n                                ),\r\n                                stakefee\r\n                            );\r\n                            amount = SafeMath.sub(amount, (bfee + stakefee));\r\n                        } else {\r\n                            fromBalance = _balances[from];\r\n                            unchecked {\r\n                                _balances[from] = SafeMath.sub(\r\n                                    fromBalance,\r\n                                    stakefee * 2\r\n                                );\r\n                            }\r\n                            _balances[\r\n                                address(\r\n                                    _Controller._getNFMStakingTreasuryERC20()\r\n                                )\r\n                            ] += stakefee * 2;\r\n                            emit Transfer(\r\n                                from,\r\n                                address(\r\n                                    _Controller._getNFMStakingTreasuryERC20()\r\n                                ),\r\n                                stakefee * 2\r\n                            );\r\n                            amount = SafeMath.sub(amount, stakefee * 2);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            fromBalance = _balances[from];\r\n            unchecked {\r\n                _balances[from] = SafeMath.sub(fromBalance, amount);\r\n            }\r\n            if (\r\n                block.timestamp <\r\n                INfmTimer(address(_Controller._getTimer()))\r\n                    ._getExtraBonusAllTime() &&\r\n                block.timestamp <\r\n                INfmTimer(address(_Controller._getTimer()))\r\n                    ._getExtraBonusAirdropTime()\r\n            ) {\r\n                _BonusTracker[to] = _balances[to] + amount;\r\n                _BonusTracker[from] = _balances[from];\r\n            }\r\n            _balances[to] += amount;\r\n            emit Transfer(from, to, amount);\r\n        }\r\n    }\r\n\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    /*\r\n    @_spendAllowance(address owner, address spender, uint256 amount);\r\n    Strandard ERC20 Function\r\n     */\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"<A\");\r\n            unchecked {\r\n                _approve(\r\n                    owner,\r\n                    spender,\r\n                    SafeMath.sub(currentAllowance, amount)\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    /*\r\n    @_approve(address owner, address spender, uint256 amount);\r\n    Strandard ERC20 Function\r\n     */\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"0A\");\r\n        require(spender != address(0), \"0A\");\r\n        require(_paused == 0, \"_P\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    /*\r\n    @approve(address spender, uint256 amount) return (bool);\r\n    Strandard ERC20 Function\r\n     */\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    /*\r\n    @increaseAllowance(address spender, uint256 amount) return (bool);\r\n    Strandard ERC20 Function\r\n     */\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        address owner = msg.sender;\r\n        _approve(\r\n            owner,\r\n            spender,\r\n            SafeMath.add(allowance(owner, spender), addedValue)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    /*\r\n    @decreaseAllowance(address spender, uint256 amount) return (bool);\r\n    Strandard ERC20 Function\r\n     */\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        address owner = msg.sender;\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance >= subtractedValue, \"_D\");\r\n        unchecked {\r\n            _approve(\r\n                owner,\r\n                spender,\r\n                SafeMath.sub(currentAllowance, subtractedValue)\r\n            );\r\n        }\r\n        return true;\r\n    }\r\n\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    /*\r\n    @_mint(address to, uint256 amount);\r\n    Strandard ERC20 Function has been modified for the protocol\r\n     */\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    function _mint(address to, uint256 amount) public virtual {\r\n        require(msg.sender != address(0), \"0A\");\r\n        require(to != address(0), \"0A\");\r\n        require(_Controller._checkWLSC(_SController, msg.sender) == true, \"oO\");\r\n        _TotalSupply += amount;\r\n        _balances[to] += amount;\r\n        _BonusTracker[to] = _balances[to];\r\n        emit Transfer(address(0), to, amount);\r\n    }\r\n\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    /*\r\n    @_burn(address account, uint256 amount);\r\n    Strandard ERC20 Function has been modified for the protocol\r\n     */\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"0A\");\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"A>B\");\r\n        unchecked {\r\n            _balances[account] = SafeMath.sub(accountBalance, amount);\r\n        }\r\n        _BonusTracker[account] = _balances[account];\r\n        _TotalSupply = SafeMath.sub(_TotalSupply, amount);\r\n        emit Burning(account, address(0), amount, block.timestamp);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    /*\r\n    @_bridgeImp(address account, uint256 amount, uint256 amount) returns (bool);\r\n    Bridge Implementation Function. This feature allows for future bridge implementations. Only allowed \r\n    addresses by the controller can call this function.\r\n     */\r\n    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    function _bridgeImp(\r\n        address sender,\r\n        uint256 amount,\r\n        uint256 typ\r\n    ) public virtual returns (bool) {\r\n        require(msg.sender != address(0), \"0A\");\r\n        require(sender != address(0), \"0A\");\r\n        require(_Controller._checkWLSC(_SController, msg.sender) == true, \"oO\");\r\n        if (typ == 0) {\r\n            //mint\r\n            _mint(sender, amount);\r\n            return true;\r\n        } else {\r\n            //burn\r\n            _burn(sender, amount);\r\n            return true;\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"TokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"TokenSymbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"TokenDecimals\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"Controller\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"BFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Time\",\"type\":\"uint256\"}],\"name\":\"Burning\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_Controller\",\"outputs\":[{\"internalType\":\"contract INfmController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_allowances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"typ\",\"type\":\"uint256\"}],\"name\":\"_bridgeImp\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"_mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"bonusCheck\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onOffNFM\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "NFM", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000012000000000000000000000000f4dc0c3c0141477742078e4676c909650e29a71b00000000000000000000000000000000000000000000000000000000000000084e465449534d55530000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004204e464d00000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://581abc9957424178eac13677ae8f5d6f1e44c6b6cbaf1583fef600bdfafd28fb"}