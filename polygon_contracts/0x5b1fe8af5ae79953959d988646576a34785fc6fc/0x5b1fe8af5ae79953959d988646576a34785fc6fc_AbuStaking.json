{"SourceCode": "{\"Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn\\u0027t rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length \\u003e 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn\\u0027t, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length \\u003e 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"},\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"},\"IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IERC20 {\\n    // === Public ===\\n    function transfer(address to, uint256 amount) external returns (bool);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function increaseAllowance(address spender,uint256 addedValue) external returns (bool);\\n    function decreaseAllowance(address spender,uint256 subtractedValue) external returns (bool);\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n    function mint(address to, uint256 value) external returns (bool);\\n    function burn(uint256 amount) external returns (bool);\\n\\n    // === Views ===\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    // === Events ===\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\"},\"IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``\\u0027s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"},\"MadApeStaking.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./Address.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IRarityChecker {\\n    function getMultiplierForTokenId(uint256 tokenId) view external returns (uint256);\\n}\\n\\ncontract MadApeStaking is Ownable {\\n    using Address for address;\\n\\n    IERC20 private _rewardToken;\\n    IERC721 private _stakeToken;\\n    IRarityChecker private _rarityChecker;\\n\\n    mapping(address =\\u003e bool) internal operators;\\n    mapping(uint256 =\\u003e bool) internal _isTokenStakedMapping;\\n    mapping(uint256 =\\u003e address) internal _tokenStakedByMapping;\\n    mapping(address =\\u003e uint256[]) internal _allTokensStakedByAddressMapping;\\n    mapping(address =\\u003e mapping(uint256 =\\u003e uint256)) internal _ownerStakedTokenTimeSinceLastRewardMapping;\\n\\n    bool internal _isActive;\\n    uint256 internal _deactivationTime;\\n    uint256 internal _baseReward;\\n    uint256 internal _rewardInterval;\\n\\n    /**\\n     * @dev Emitted when the reward token has changed.\\n     */\\n    event RewardTokenChanged(address previousToken, address newToken);\\n\\n    /**\\n     * @dev Emitted when the rarity checker has changed.\\n     */\\n    event RarityCheckerChanged(address previousChecker, address newChecker);\\n\\n    /**\\n     * @dev Emitted when the base reward has changed.\\n     */\\n    event BaseRewardChanged(uint256 previousBaseReward, uint256 newBaseReward);\\n\\n    /**\\n     * @dev Emitted when the reward interval has changed.\\n     */\\n    event RewardIntervalChanged(uint256 previousRewardInterval, uint256 newRewardInterval);\\n\\n    /**\\n    * @dev Emitted when the stake token has changed.\\n    */\\n    event StakeTokenChanged(address previousToken, address newToken);\\n\\n    /**\\n    * @dev Emitted when the isActive has changed.\\n    */\\n    event IsActiveChanged(bool previousState, bool newState);\\n\\n    /**\\n    * @dev Emitted when the token has been staked.\\n    */\\n    event TokenIdStaked(address owner, uint256 tokenId);\\n\\n    /**\\n    * @dev Emitted when the token has been unstaked.\\n    */\\n    event TokenIdUnstaked(address owner, uint256 tokenId);\\n\\n    /**\\n    * @dev Emitted when the owner of the token has changed.\\n    */\\n    event UnstakedByOperator(address oldOwner, address newOwner, uint256 tokenId, uint256 timestamp);\\n\\n    /**\\n    * @dev Emitted when the rewards have been claimed.\\n    */\\n    event RewardClaimed(uint256 tokenId, uint256 rewards);\\n\\n    /**\\n     * @dev Emitted when operator is added.\\n     */\\n    event OperatorAdded(address operator);\\n\\n    /**\\n     * @dev Emitted when operator is removed.\\n     */\\n    event OperatorRemoved(address operator);\\n\\n    constructor(address _rewardTokenAddress, address _stakeTokenAddress, address _rarityCheckerAddress){\\n        changeRewardToken(_rewardTokenAddress);\\n        changeStakeToken(_stakeTokenAddress);\\n        changeRarityChecker(_rarityCheckerAddress);\\n        changeBaseReward(1 ether);\\n        changeRewardInterval(86400);\\n        changeIsActive(true);\\n    }\\n\\n    // =========== MODIFIERS METHODS ==========\\n    /**\\n     * @dev Throws if called by any account other than an operator.\\n     */\\n    modifier onlyOperator() {\\n        require(operators[_msgSender()], \\\"MadApeStaking: caller is not an operator\\\");\\n        _;\\n    }\\n    // =========== MODIFIERS METHODS ==========\\n\\n    // =========== APE METHODS ================\\n    function apeMultiStake(uint256[] memory tokenIds) public returns (bool){\\n        for (uint256 i = 0; i \\u003c tokenIds.length; i++) {\\n            apeStake(tokenIds[i]);\\n        }\\n        return true;\\n    }\\n\\n    function apeStake(uint256 tokenId) public returns (bool){\\n        require(getIsActive(), \\\"MadApeStaking: Staking is currently not active\\\");\\n        require(_stakeToken.ownerOf(tokenId) == _msgSender(), \\\"MadApeStaking: Message sender not currently the owner of this token\\\");\\n        require(!_isTokenStakedMapping[tokenId], \\\"MadApeStaking: Token already staked\\\");\\n\\n        _isTokenStakedMapping[tokenId] = true;\\n        _tokenStakedByMapping[tokenId] = _msgSender();\\n        _ownerStakedTokenTimeSinceLastRewardMapping[_msgSender()][tokenId] = block.timestamp;\\n\\n        _allTokensStakedByAddressMapping[_msgSender()].push(tokenId);\\n\\n        emit TokenIdStaked(_msgSender(), tokenId);\\n        return true;\\n    }\\n\\n    function apeUnstake(uint256 tokenId) public returns (bool){\\n        require(_stakeToken.ownerOf(tokenId) == _msgSender(), \\\"MadApeStaking: Message sender not currently the owner of this token\\\");\\n        return _unstake(_msgSender(), tokenId);\\n    }\\n\\n    function apeMultiClaim(uint256[] memory tokenIds) public returns (bool){\\n        for (uint256 i = 0; i \\u003c tokenIds.length; i++) {\\n            apeClaim(tokenIds[i]);\\n        }\\n        return true;\\n    }\\n\\n    function apeClaim(uint256 tokenId) public returns (uint256) {\\n        require(_stakeToken.ownerOf(tokenId) == _msgSender(), \\\"MadApeStaking: Message sender not currently the owner of this token\\\");\\n        uint256 reward = _claimReward(_msgSender(), tokenId);\\n        require(reward \\u003e 0, \\\"MadApeStaking: There is no reward to be claimed\\\");\\n        return reward;\\n    }\\n\\n    function apeIsStaked(uint256 tokenId) public view returns (bool) {\\n        return _isTokenStakedMapping[tokenId];\\n    }\\n\\n    function apeCheckBalance(uint256 tokenId) public view returns (uint256) {\\n        address owner = _tokenStakedByMapping[tokenId];\\n        return _calculateReward(owner, tokenId);\\n    }\\n\\n    function apeCheckBalanceOf(address owner, uint256 tokenId) public view returns (uint256) {\\n        return _calculateReward(owner, tokenId);\\n    }\\n\\n    function apeAllStakedForWallet(address owner) public view returns (uint256[] memory){\\n        return _allTokensStakedByAddressMapping[owner];\\n    }\\n    // =========== APE METHODS ================\\n\\n    // =========== OPERATOR METHODS ===========\\n    function operatorUnstake(address oldOwner, address newOwner, uint256 tokenId) public onlyOperator {\\n        _unstake(oldOwner, tokenId);\\n        emit UnstakedByOperator(oldOwner, newOwner, tokenId, block.timestamp);\\n    }\\n    // =========== OPERATOR METHODS ===========\\n\\n    // =========== PUBLIC METHODS =============\\n\\n    /**\\n     * @dev Returns accrued rewards so far.\\n     */\\n    function getAccruedRewards(address owner, uint256 tokenId) public view returns (uint256 rewardTokens){\\n        return _calculateReward(owner, tokenId);\\n    }\\n\\n    /**\\n     * @dev Returns address of staker.\\n     */\\n    function getStakerAddress(uint256 tokenId) public view returns (address){\\n        return _tokenStakedByMapping[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns boolean if given address is an operator.\\n     */\\n    function isOperator(address operator) public view returns (bool){\\n        return operators[operator];\\n    }\\n    // =========== PUBLIC METHODS =============\\n\\n    // =========== INTERNAL METHODS ===========\\n    function _unstake(address owner, uint256 tokenId) internal returns (bool){\\n        require(_isTokenStakedMapping[tokenId], \\\"MadApeStaking: Token not currently staked\\\");\\n\\n        _claimReward(owner, tokenId);\\n        _isTokenStakedMapping[tokenId] = false;\\n        _tokenStakedByMapping[tokenId] = address(0);\\n\\n        uint256[] storage tokens = _allTokensStakedByAddressMapping[owner];\\n        for (uint256 i = 0; i \\u003c tokens.length; i++) {\\n            if (tokenId != tokens[i]) continue;\\n            tokens[i] = tokens[tokens.length - 1];\\n            tokens.pop();\\n        }\\n        _allTokensStakedByAddressMapping[owner] = tokens;\\n\\n        emit TokenIdUnstaked(owner, tokenId);\\n        return true;\\n    }\\n\\n    function _claimReward(address owner, uint256 tokenId) internal returns (uint256 reward){\\n        reward = _calculateReward(owner, tokenId);\\n        _ownerStakedTokenTimeSinceLastRewardMapping[owner][tokenId] = block.timestamp;\\n        _rewardToken.transfer(owner, reward);\\n        emit RewardClaimed(tokenId, reward);\\n    }\\n\\n    function _calculateReward(address owner, uint256 tokenId) internal view returns (uint256 rewardTokens){\\n        if (!apeIsStaked(tokenId)) {\\n            return 0;\\n        }\\n        uint256 timeStakingSinceLastRewardInSeconds;\\n        if (!getIsActive()) {\\n            timeStakingSinceLastRewardInSeconds = SafeMath.sub(_deactivationTime, _ownerStakedTokenTimeSinceLastRewardMapping[owner][tokenId]);\\n        } else {\\n            timeStakingSinceLastRewardInSeconds = SafeMath.sub(block.timestamp, _ownerStakedTokenTimeSinceLastRewardMapping[owner][tokenId]);\\n        }\\n        uint256 daysStaking = SafeMath.div(timeStakingSinceLastRewardInSeconds, getRewardInterval());\\n        if (daysStaking == 0) {\\n            return 0;\\n        }\\n        //Multiplier returns as a multiple of 100; 1.25 multiplier would be represented as 125.\\n        uint256 rarityMultiplier = _rarityChecker.getMultiplierForTokenId(tokenId);\\n        uint256 baseReward = getBaseReward();\\n        uint256 baseRewardMultipliedByDays = SafeMath.mul(baseReward, daysStaking);\\n        uint256 rewardMultipliedByRarity = SafeMath.mul(baseRewardMultipliedByDays, rarityMultiplier);\\n        uint256 normalisedReward = SafeMath.div(rewardMultipliedByRarity, 100);\\n        return normalisedReward;\\n    }\\n    // =========== INTERNAL METHODS ===========\\n\\n    // =========== GETTERS/SETTERS ============\\n    /**\\n         * @dev Changes the rarity checker.\\n     *\\n     * Emits an {RarityCheckerChanged} event.\\n     */\\n    function changeRarityChecker(address newRarityChecker) public onlyOwner {\\n        emit RarityCheckerChanged(getRarityChecker(), newRarityChecker);\\n        setRarityChecker(newRarityChecker);\\n    }\\n\\n    /**\\n    * @dev Stores a new address for rarity checker.\\n    */\\n    function setRarityChecker(address newRarityChecker) internal {\\n        _rarityChecker = IRarityChecker(newRarityChecker);\\n    }\\n\\n    /**\\n    * @dev Returns current rarity checker.\\n    */\\n    function getRarityChecker() public view returns (address) {\\n        return address(_rarityChecker);\\n    }\\n\\n    /**\\n     * @dev Changes the base reward.\\n     *\\n     * Emits an {BaseRewardChanged} event.\\n     */\\n    function changeBaseReward(uint256 newBaseReward) public onlyOwner {\\n        emit BaseRewardChanged(getBaseReward(), newBaseReward);\\n        setBaseReward(newBaseReward);\\n    }\\n\\n    /**\\n    * @dev Stores a new value for base reward.\\n    */\\n    function setBaseReward(uint256 newBaseReward) internal {\\n        _baseReward = newBaseReward;\\n    }\\n\\n    /**\\n    * @dev Returns current base reward.\\n    */\\n    function getBaseReward() public view returns (uint256) {\\n        return _baseReward;\\n    }\\n\\n    /**\\n     * @dev Changes the reward interval.\\n     *\\n     * Emits an {RewardIntervalChanged} event.\\n     */\\n    function changeRewardInterval(uint256 newRewardInterval) public onlyOwner {\\n        emit RewardIntervalChanged(getRewardInterval(), newRewardInterval);\\n        setRewardInterval(newRewardInterval);\\n    }\\n\\n    /**\\n    * @dev Stores a new value for reward interval.\\n    */\\n    function setRewardInterval(uint256 newRewardInterval) internal {\\n        _rewardInterval = newRewardInterval;\\n    }\\n\\n    /**\\n    * @dev Returns current reward interval.\\n    */\\n    function getRewardInterval() public view returns (uint256) {\\n        return _rewardInterval;\\n    }\\n\\n    /**\\n     * @dev Changes the reward token.\\n     *\\n     * Emits an {RewardTokenChanged} event.\\n     */\\n    function changeRewardToken(address newRewardToken) public onlyOwner {\\n        emit RewardTokenChanged(getRewardToken(), newRewardToken);\\n        setRewardToken(newRewardToken);\\n    }\\n\\n    /**\\n    * @dev Stores a new address for reward token.\\n    */\\n    function setRewardToken(address newRewardToken) internal {\\n        _rewardToken = IERC20(newRewardToken);\\n    }\\n\\n    /**\\n    * @dev Returns current reward token.\\n    */\\n    function getRewardToken() public view returns (address) {\\n        return address(_rewardToken);\\n    }\\n\\n    /**\\n     * @dev Changes the stake token.\\n     *\\n     * Emits an {StakeTokenChanged} event.\\n     */\\n    function changeStakeToken(address newStakeToken) public onlyOwner {\\n        emit StakeTokenChanged(getStakeToken(), newStakeToken);\\n        setStakeToken(newStakeToken);\\n    }\\n\\n    /**\\n    * @dev Stores a new address for stake token.\\n    */\\n    function setStakeToken(address newStakeToken) internal {\\n        _stakeToken = IERC721(newStakeToken);\\n    }\\n\\n    /**\\n    * @dev Returns current stake token.\\n    */\\n    function getStakeToken() public view returns (address) {\\n        return address(_stakeToken);\\n    }\\n\\n    /**\\n     * @dev Changes isActive state.\\n     *\\n     * Emits an {ActiveStateChanged} event.\\n     */\\n    function changeIsActive(bool isActive) public onlyOwner {\\n        emit IsActiveChanged(getIsActive(), isActive);\\n        setIsActive(isActive);\\n    }\\n\\n    /**\\n    * @dev Sets isActive.\\n    */\\n    function setIsActive(bool isActive) internal {\\n        _isActive = isActive;\\n        if (!isActive) {\\n            _deactivationTime = block.timestamp;\\n        }\\n    }\\n\\n    /**\\n    * @dev Returns isActive.\\n    */\\n    function getIsActive() public view returns (bool) {\\n        return _isActive;\\n    }\\n    // =========== GETTERS/SETTERS ============\\n\\n    // =========== ADMIN METHODS ==============\\n    /**\\n     * @dev Add address as operator.\\n     * Can only be called by the current owner.\\n     */\\n    function setOperator(address operator) public onlyOwner {\\n        operators[operator] = true;\\n        emit OperatorAdded(operator);\\n    }\\n\\n    /**\\n     * @dev Remove operator.\\n     * Can only be called by the current owner.\\n     */\\n    function removeOperator(address operator) public onlyOwner {\\n        operators[operator] = false;\\n        emit OperatorRemoved(operator);\\n    }\\n\\n    /**\\n      * @dev Method to withdraw all native currency. Only callable by owner.\\n      */\\n    function withdraw() public onlyOwner {\\n        (bool success,) = payable(msg.sender).call{value : address(this).balance}(\\\"\\\");\\n        require(success);\\n    }\\n\\n    /**\\n      * @dev Method to withdraw all tokens complying to ERC20 interface. Only callable by owner.\\n      */\\n    function withdrawERC20(address _token) public onlyOwner {\\n        IERC20 token = IERC20(_token);\\n        require(token.balanceOf(address(this)) \\u003e 0, \\\"SafeERC20: Balance already 0\\\");\\n\\n        bytes memory data = abi.encodeWithSelector(token.transfer.selector, owner(), token.balanceOf(address(this)));\\n        bytes memory return_data = address(_token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (return_data.length \\u003e 0) {\\n            // Return data is optional to support crappy tokens like BNB and others not complying to ERC20 interface\\n            require(abi.decode(return_data, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n    // =========== ADMIN METHODS ==============\\n}\\n\\ncontract AbuStaking is MadApeStaking {\\n    constructor(address _rewardTokenAddress, address _stakeTokenAddress, address _rarityCheckerAddress) MadApeStaking (_rewardTokenAddress, _stakeTokenAddress, _rarityCheckerAddress) {\\n    }\\n}\\n\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler\\u0027s built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c \\u003c a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b \\u003e a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n            // benefit is lost if \\u0027b\\u0027 is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b \\u003c= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b \\u003e 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b \\u003e 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakeTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rarityCheckerAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousBaseReward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBaseReward\",\"type\":\"uint256\"}],\"name\":\"BaseRewardChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"previousState\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newState\",\"type\":\"bool\"}],\"name\":\"IsActiveChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"OperatorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"OperatorRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousChecker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newChecker\",\"type\":\"address\"}],\"name\":\"RarityCheckerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"}],\"name\":\"RewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousRewardInterval\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRewardInterval\",\"type\":\"uint256\"}],\"name\":\"RewardIntervalChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newToken\",\"type\":\"address\"}],\"name\":\"RewardTokenChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newToken\",\"type\":\"address\"}],\"name\":\"StakeTokenChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"TokenIdStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"TokenIdUnstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"UnstakedByOperator\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"apeAllStakedForWallet\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"apeCheckBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"apeCheckBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"apeClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"apeIsStaked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"apeMultiClaim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"apeMultiStake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"apeStake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"apeUnstake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBaseReward\",\"type\":\"uint256\"}],\"name\":\"changeBaseReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"name\":\"changeIsActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRarityChecker\",\"type\":\"address\"}],\"name\":\"changeRarityChecker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRewardInterval\",\"type\":\"uint256\"}],\"name\":\"changeRewardInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRewardToken\",\"type\":\"address\"}],\"name\":\"changeRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newStakeToken\",\"type\":\"address\"}],\"name\":\"changeStakeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getAccruedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardTokens\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBaseReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getIsActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRarityChecker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getStakerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"operatorUnstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"removeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AbuStaking", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000031e480d9ec9fd36f5faff6c9f4875772d8b0e6210000000000000000000000002447be8f413125505b154737c5d90ec020b1c17200000000000000000000000086841960eccde88505b75052d7cfdfdcffa87cd7", "EVMVersion": "istanbul", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://90c19b096a13e5802157e9414ad3833d8f524b12827668e6e4d5c4cb8dc3d43d"}