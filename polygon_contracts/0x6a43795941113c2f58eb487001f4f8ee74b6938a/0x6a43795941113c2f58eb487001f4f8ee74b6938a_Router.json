{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/AssimilatorFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./assimilators/AssimilatorV2.sol\\\";\\nimport \\\"./interfaces/IAssimilatorFactory.sol\\\";\\nimport \\\"./interfaces/IOracle.sol\\\";\\n\\ncontract AssimilatorFactory is IAssimilatorFactory, Ownable {\\n\\tevent NewAssimilator(\\n\\t\\taddress indexed caller,\\n\\t\\tbytes32 indexed id,\\n\\t\\taddress indexed assimilator,\\n\\t\\taddress oracle,\\n\\t\\taddress token\\n\\t);\\n\\tevent AssimilatorRevoked(\\n\\t\\taddress indexed caller,\\n\\t\\tbytes32 indexed id,\\n\\t\\taddress indexed assimilator\\n\\t);\\n\\tevent CurveFactoryUpdated(\\n\\t\\taddress indexed caller,\\n\\t\\taddress indexed curveFactory\\n\\t);\\n\\tmapping(bytes32 => AssimilatorV2) public assimilators;\\n\\n\\taddress public curveFactory;\\n\\n\\tmodifier onlyCurveFactoryOrOwner() {\\n\\t\\trequire(\\n\\t\\t\\tmsg.sender == curveFactory || msg.sender == owner(),\\n\\t\\t\\t\\\"unauthorized\\\"\\n\\t\\t);\\n\\t\\t_;\\n\\t}\\n\\n\\tfunction setCurveFactory(address _curveFactory) external onlyOwner {\\n\\t\\trequire(\\n\\t\\t\\t_curveFactory != address(0),\\n\\t\\t\\t\\\"AssimFactory/curve factory zero address!\\\"\\n\\t\\t);\\n\\t\\tcurveFactory = _curveFactory;\\n\\t\\temit CurveFactoryUpdated(msg.sender, curveFactory);\\n\\t}\\n\\n\\tfunction getAssimilator(\\n\\t\\taddress _token\\n\\t) external view override returns (AssimilatorV2) {\\n\\t\\tbytes32 assimilatorID = keccak256(abi.encode(_token));\\n\\t\\treturn assimilators[assimilatorID];\\n\\t}\\n\\n\\tfunction newAssimilator(\\n\\t\\tIOracle _oracle,\\n\\t\\taddress _token,\\n\\t\\tuint256 _tokenDecimals\\n\\t) external override onlyCurveFactoryOrOwner returns (AssimilatorV2) {\\n\\t\\tbytes32 assimilatorID = keccak256(abi.encode(_token));\\n\\t\\tif (address(assimilators[assimilatorID]) != address(0))\\n\\t\\t\\trevert(\\\"AssimilatorFactory/oracle-stablecoin-pair-already-exists\\\");\\n\\n\\t\\tAssimilatorV2 assimilator = new AssimilatorV2(\\n\\t\\t\\t_oracle,\\n\\t\\t\\t_token,\\n\\t\\t\\t_tokenDecimals,\\n\\t\\t\\tIOracle(_oracle).decimals()\\n\\t\\t);\\n\\t\\tassimilators[assimilatorID] = assimilator;\\n\\t\\temit NewAssimilator(\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\tassimilatorID,\\n\\t\\t\\taddress(assimilator),\\n\\t\\t\\taddress(_oracle),\\n\\t\\t\\t_token\\n\\t\\t);\\n\\t\\treturn assimilator;\\n\\t}\\n\\n\\tfunction revokeAssimilator(address _token) external onlyOwner {\\n\\t\\tbytes32 assimilatorID = keccak256(abi.encode(_token));\\n\\t\\taddress _assimAddress = address(assimilators[assimilatorID]);\\n\\t\\tassimilators[assimilatorID] = AssimilatorV2(address(0));\\n\\t\\temit AssimilatorRevoked(\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\tassimilatorID,\\n\\t\\t\\taddress(_assimAddress)\\n\\t\\t);\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/Assimilators.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"./interfaces/IAssimilator.sol\\\";\\nimport \\\"./lib/ABDKMath64x64.sol\\\";\\nimport \\\"./Structs.sol\\\";\\n\\nlibrary Assimilators {\\n\\tusing ABDKMath64x64 for int128;\\n\\tusing Address for address;\\n\\n\\tIAssimilator public constant iAsmltr = IAssimilator(address(0));\\n\\n\\tfunction delegate(\\n\\t\\taddress _callee,\\n\\t\\tbytes memory _data\\n\\t) internal returns (bytes memory) {\\n\\t\\trequire(_callee.isContract(), \\\"Assimilators/callee-is-not-a-contract\\\");\\n\\n\\t\\t// solhint-disable-next-line\\n\\t\\t(bool _success, bytes memory returnData_) = _callee.delegatecall(_data);\\n\\n\\t\\t// solhint-disable-next-line\\n\\t\\tassembly {\\n\\t\\t\\tif eq(_success, 0) {\\n\\t\\t\\t\\trevert(add(returnData_, 0x20), returndatasize())\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn returnData_;\\n\\t}\\n\\n\\tfunction getRate(address _assim) internal view returns (uint256 amount_) {\\n\\t\\tamount_ = IAssimilator(_assim).getRate();\\n\\t}\\n\\n\\tfunction viewRawAmount(\\n\\t\\taddress _assim,\\n\\t\\tint128 _amt\\n\\t) internal view returns (uint256 amount_) {\\n\\t\\tamount_ = IAssimilator(_assim).viewRawAmount(_amt);\\n\\t}\\n\\n\\tfunction viewRawAmountLPRatio(\\n\\t\\taddress _assim,\\n\\t\\tuint256 _baseWeight,\\n\\t\\tuint256 _quoteWeight,\\n\\t\\tint128 _amount\\n\\t) internal view returns (uint256 amount_) {\\n\\t\\tamount_ = IAssimilator(_assim).viewRawAmountLPRatio(\\n\\t\\t\\t_baseWeight,\\n\\t\\t\\t_quoteWeight,\\n\\t\\t\\taddress(this),\\n\\t\\t\\t_amount\\n\\t\\t);\\n\\t}\\n\\n\\tfunction viewNumeraireAmount(\\n\\t\\taddress _assim,\\n\\t\\tuint256 _amt\\n\\t) internal view returns (int128 amt_) {\\n\\t\\tamt_ = IAssimilator(_assim).viewNumeraireAmount(_amt);\\n\\t}\\n\\n\\tfunction viewNumeraireAmountAndBalance(\\n\\t\\taddress _assim,\\n\\t\\tuint256 _amt\\n\\t) internal view returns (int128 amt_, int128 bal_) {\\n\\t\\t(amt_, bal_) = IAssimilator(_assim).viewNumeraireAmountAndBalance(\\n\\t\\t\\taddress(this),\\n\\t\\t\\t_amt\\n\\t\\t);\\n\\t}\\n\\n\\tfunction viewNumeraireBalance(\\n\\t\\taddress _assim\\n\\t) internal view returns (int128 bal_) {\\n\\t\\tbal_ = IAssimilator(_assim).viewNumeraireBalance(address(this));\\n\\t}\\n\\n\\tfunction viewNumeraireBalanceLPRatio(\\n\\t\\tuint256 _baseWeight,\\n\\t\\tuint256 _quoteWeight,\\n\\t\\taddress _assim\\n\\t) internal view returns (int128 bal_) {\\n\\t\\tbal_ = IAssimilator(_assim).viewNumeraireBalanceLPRatio(\\n\\t\\t\\t_baseWeight,\\n\\t\\t\\t_quoteWeight,\\n\\t\\t\\taddress(this)\\n\\t\\t);\\n\\t}\\n\\n\\tfunction intakeRaw(\\n\\t\\taddress _assim,\\n\\t\\tuint256 _amt\\n\\t) internal returns (int128 amt_) {\\n\\t\\tbytes memory data = abi.encodeWithSelector(\\n\\t\\t\\tiAsmltr.intakeRaw.selector,\\n\\t\\t\\t_amt\\n\\t\\t);\\n\\n\\t\\tamt_ = abi.decode(delegate(_assim, data), (int128));\\n\\t}\\n\\n\\tfunction intakeRawAndGetBalance(\\n\\t\\taddress _assim,\\n\\t\\tuint256 _amt\\n\\t) internal returns (int128 amt_, int128 bal_) {\\n\\t\\tbytes memory data = abi.encodeWithSelector(\\n\\t\\t\\tiAsmltr.intakeRawAndGetBalance.selector,\\n\\t\\t\\t_amt\\n\\t\\t);\\n\\n\\t\\t(amt_, bal_) = abi.decode(delegate(_assim, data), (int128, int128));\\n\\t}\\n\\n\\tfunction intakeNumeraire(\\n\\t\\taddress _assim,\\n\\t\\tint128 _amt\\n\\t) internal returns (uint256 amt_) {\\n\\t\\tbytes memory data = abi.encodeWithSelector(\\n\\t\\t\\tiAsmltr.intakeNumeraire.selector,\\n\\t\\t\\t_amt\\n\\t\\t);\\n\\n\\t\\tamt_ = abi.decode(delegate(_assim, data), (uint256));\\n\\t}\\n\\n\\tfunction intakeNumeraireLPRatio(\\n\\t\\taddress _assim,\\n\\t\\tIntakeNumLpRatioInfo memory info\\n\\t) internal returns (uint256 amt_) {\\n\\t\\tbytes memory data = abi.encodeWithSelector(\\n\\t\\t\\tiAsmltr.intakeNumeraireLPRatio.selector,\\n\\t\\t\\tinfo.baseWeight,\\n\\t\\t\\tinfo.minBase,\\n\\t\\t\\tinfo.maxBase,\\n\\t\\t\\tinfo.quoteWeight,\\n\\t\\t\\tinfo.minQuote,\\n\\t\\t\\tinfo.maxQuote,\\n\\t\\t\\taddress(this),\\n\\t\\t\\t// _amount\\n\\t\\t\\tinfo.amount\\n\\t\\t);\\n\\n\\t\\tamt_ = abi.decode(delegate(_assim, data), (uint256));\\n\\t}\\n\\n\\tfunction outputRaw(\\n\\t\\taddress _assim,\\n\\t\\taddress _dst,\\n\\t\\tuint256 _amt\\n\\t) internal returns (int128 amt_) {\\n\\t\\tbytes memory data = abi.encodeWithSelector(\\n\\t\\t\\tiAsmltr.outputRaw.selector,\\n\\t\\t\\t_dst,\\n\\t\\t\\t_amt\\n\\t\\t);\\n\\n\\t\\tamt_ = abi.decode(delegate(_assim, data), (int128));\\n\\n\\t\\tamt_ = amt_.neg();\\n\\t}\\n\\n\\tfunction outputRawAndGetBalance(\\n\\t\\taddress _assim,\\n\\t\\taddress _dst,\\n\\t\\tuint256 _amt\\n\\t) internal returns (int128 amt_, int128 bal_) {\\n\\t\\tbytes memory data = abi.encodeWithSelector(\\n\\t\\t\\tiAsmltr.outputRawAndGetBalance.selector,\\n\\t\\t\\t_dst,\\n\\t\\t\\t_amt\\n\\t\\t);\\n\\n\\t\\t(amt_, bal_) = abi.decode(delegate(_assim, data), (int128, int128));\\n\\n\\t\\tamt_ = amt_.neg();\\n\\t}\\n\\n\\tfunction outputNumeraire(\\n\\t\\taddress _assim,\\n\\t\\taddress _dst,\\n\\t\\tint128 _amt\\n\\t) internal returns (uint256 amt_) {\\n\\t\\tbytes memory data = abi.encodeWithSelector(\\n\\t\\t\\tiAsmltr.outputNumeraire.selector,\\n\\t\\t\\t_dst,\\n\\t\\t\\t_amt.abs()\\n\\t\\t);\\n\\n\\t\\tamt_ = abi.decode(delegate(_assim, data), (uint256));\\n\\t}\\n\\n\\tfunction transferFee(\\n\\t\\taddress _assim,\\n\\t\\tint128 _amt,\\n\\t\\taddress _treasury\\n\\t) internal {\\n\\t\\tbytes memory data = abi.encodeWithSelector(\\n\\t\\t\\tiAsmltr.transferFee.selector,\\n\\t\\t\\t_amt,\\n\\t\\t\\t_treasury\\n\\t\\t);\\n\\t\\tdelegate(_assim, data);\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/assimilators/AssimilatorV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport \\\"../lib/ABDKMath64x64.sol\\\";\\nimport \\\"../interfaces/IAssimilator.sol\\\";\\nimport \\\"../interfaces/IOracle.sol\\\";\\n\\ncontract AssimilatorV2 is IAssimilator, ReentrancyGuard {\\n\\tusing ABDKMath64x64 for int128;\\n\\tusing ABDKMath64x64 for uint256;\\n\\n\\tusing SafeMath for uint256;\\n\\tusing SafeERC20 for IERC20;\\n\\n\\tIERC20 public immutable usdc;\\n\\n\\tIOracle public immutable oracle;\\n\\tIERC20 public immutable token;\\n\\tuint256 public immutable oracleDecimals;\\n\\tuint256 public immutable tokenDecimals;\\n\\n\\t// solhint-disable-next-line\\n\\tconstructor(\\n\\t\\tIOracle _oracle,\\n\\t\\taddress _token,\\n\\t\\tuint256 _tokenDecimals,\\n\\t\\tuint256 _oracleDecimals\\n\\t) {\\n\\t\\toracle = _oracle;\\n\\t\\ttoken = IERC20(_token);\\n\\t\\toracleDecimals = _oracleDecimals;\\n\\t\\ttokenDecimals = _tokenDecimals;\\n\\t\\tusdc = IERC20(quoteAddress());\\n\\t}\\n\\n\\tfunction quoteAddress() internal view returns (address) {\\n\\t\\tuint256 chainID;\\n\\t\\tassembly {\\n\\t\\t\\tchainID := chainid()\\n\\t\\t}\\n\\t\\tif (chainID == 1) {\\n\\t\\t\\treturn 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\\n\\t\\t} else if (chainID == 137 || chainID == 31337) {\\n\\t\\t\\treturn 0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174;\\n\\t\\t} else if (chainID == 80001) {\\n\\t\\t\\treturn 0x77730cF052837ebc2f8f1398CAD38D946e58d432;\\n\\t\\t}  else if (chainID == 42161) {\\n\\t\\t\\treturn 0xFF970A61A04b1cA14834A43f5dE4533eBDDB5CC8;\\n\\t\\t} else {\\n\\t\\t\\treturn address(0);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction getRate() public view override returns (uint256) {\\n\\t\\t(, int256 price, , , ) = oracle.latestRoundData();\\n\\t\\treturn uint256(price);\\n\\t}\\n\\n\\t// takes raw eurs amount, transfers it in, calculates corresponding numeraire amount and returns it\\n\\tfunction intakeRawAndGetBalance(\\n\\t\\tuint256 _amount\\n\\t) external override returns (int128 amount_, int128 balance_) {\\n\\t\\ttoken.safeTransferFrom(msg.sender, address(this), _amount);\\n\\n\\t\\tuint256 _balance = token.balanceOf(address(this));\\n\\n\\t\\tuint256 _rate = getRate();\\n\\n\\t\\tbalance_ = ((_balance * _rate) / 10 ** oracleDecimals).divu(\\n\\t\\t\\t10 ** tokenDecimals\\n\\t\\t);\\n\\n\\t\\tamount_ = ((_amount * _rate) / 10 ** oracleDecimals).divu(\\n\\t\\t\\t10 ** tokenDecimals\\n\\t\\t);\\n\\t}\\n\\n\\t// takes raw eurs amount, transfers it in, calculates corresponding numeraire amount and returns it\\n\\tfunction intakeRaw(\\n\\t\\tuint256 _amount\\n\\t) external override returns (int128 amount_) {\\n\\t\\ttoken.safeTransferFrom(msg.sender, address(this), _amount);\\n\\n\\t\\tuint256 _rate = getRate();\\n\\n\\t\\tamount_ = ((_amount * _rate) / 10 ** oracleDecimals).divu(\\n\\t\\t\\t10 ** tokenDecimals\\n\\t\\t);\\n\\t}\\n\\n\\t// takes a numeraire amount, calculates the raw amount of eurs, transfers it in and returns the corresponding raw amount\\n\\tfunction intakeNumeraire(\\n\\t\\tint128 _amount\\n\\t) external override returns (uint256 amount_) {\\n\\t\\tuint256 _rate = getRate();\\n\\n\\t\\tamount_ =\\n\\t\\t\\t(_amount.mulu(10 ** tokenDecimals) * 10 ** oracleDecimals) /\\n\\t\\t\\t_rate;\\n\\t\\t\\n\\t\\trequire(amount_ > 0, \\\"intakeNumeraire/zero-amount!\\\");\\n\\t\\t\\n\\t\\ttoken.safeTransferFrom(msg.sender, address(this), amount_);\\n\\t}\\n\\n\\t// takes a numeraire amount, calculates the raw amount of eurs, transfers it in and returns the corresponding raw amount\\n\\tfunction intakeNumeraireLPRatio(\\n\\t\\tuint256 _baseWeight,\\n\\t\\tuint256 _minBaseAmount,\\n\\t\\tuint256 _maxBaseAmount,\\n\\t\\tuint256 _quoteWeight,\\n\\t\\tuint256 _minQuoteAmount,\\n\\t\\tuint256 _maxQuoteAmount,\\n\\t\\taddress _addr,\\n\\t\\tint128 _amount\\n\\t) external override returns (uint256 amount_) {\\n\\t\\tuint256 _tokenBal = token.balanceOf(_addr);\\n\\n\\t\\tif (_tokenBal <= 0) return 0;\\n\\n\\t\\t_tokenBal = _tokenBal.mul(1e18).div(_baseWeight);\\n\\n\\t\\tuint256 _usdcBal = usdc.balanceOf(_addr).mul(1e18).div(_quoteWeight);\\n\\n\\t\\t// Rate is in 1e6\\n\\t\\tuint256 _rate = _usdcBal.mul(10 ** tokenDecimals).div(_tokenBal);\\n\\n\\t\\tamount_ = (_amount.mulu(10 ** tokenDecimals) * 1e6) / _rate;\\n\\n\\t\\tif (address(token) == address(usdc)) {\\n\\t\\t\\trequire(\\n\\t\\t\\t\\tamount_ >= _minQuoteAmount && amount_ <= _maxQuoteAmount,\\n\\t\\t\\t\\t\\\"Assimilator/LP Ratio imbalanced!\\\"\\n\\t\\t\\t);\\n\\t\\t} else {\\n\\t\\t\\trequire(\\n\\t\\t\\t\\tamount_ >= _minBaseAmount && amount_ <= _maxBaseAmount,\\n\\t\\t\\t\\t\\\"Assimilator/LP Ratio imbalanced!\\\"\\n\\t\\t\\t);\\n\\t\\t}\\n\\t\\trequire(amount_ > 0, \\\"intakeNumeraire/zero-amount!\\\");\\n\\t\\t\\n\\t\\ttoken.safeTransferFrom(msg.sender, address(this), amount_);\\n\\t}\\n\\n\\t// takes a raw amount of eurs and transfers it out, returns numeraire value of the raw amount\\n\\tfunction outputRawAndGetBalance(\\n\\t\\taddress _dst,\\n\\t\\tuint256 _amount\\n\\t) external override returns (int128 amount_, int128 balance_) {\\n\\t\\tuint256 _rate = getRate();\\n\\n\\t\\ttoken.safeTransfer(_dst, _amount);\\n\\n\\t\\tuint256 _balance = token.balanceOf(address(this));\\n\\n\\t\\tamount_ = ((_amount * _rate) / 10 ** oracleDecimals).divu(\\n\\t\\t\\t10 ** tokenDecimals\\n\\t\\t);\\n\\n\\t\\tbalance_ = ((_balance * _rate) / 10 ** oracleDecimals).divu(\\n\\t\\t\\t10 ** tokenDecimals\\n\\t\\t);\\n\\t}\\n\\n\\t// takes a raw amount of eurs and transfers it out, returns numeraire value of the raw amount\\n\\tfunction outputRaw(\\n\\t\\taddress _dst,\\n\\t\\tuint256 _amount\\n\\t) external override returns (int128 amount_) {\\n\\t\\tuint256 _rate = getRate();\\n\\n\\t\\ttoken.safeTransfer(_dst, _amount);\\n\\n\\t\\tamount_ = ((_amount * _rate) / 10 ** oracleDecimals).divu(\\n\\t\\t\\t10 ** tokenDecimals\\n\\t\\t);\\n\\t}\\n\\n\\t// takes a numeraire value of eurs, figures out the raw amount, transfers raw amount out, and returns raw amount\\n\\tfunction outputNumeraire(\\n\\t\\taddress _dst,\\n\\t\\tint128 _amount\\n\\t) external override returns (uint256 amount_) {\\n\\t\\tuint256 _rate = getRate();\\n\\n\\t\\tamount_ =\\n\\t\\t\\t(_amount.mulu(10 ** tokenDecimals) * 10 ** oracleDecimals) /\\n\\t\\t\\t_rate;\\n\\n\\t\\ttoken.safeTransfer(_dst, amount_);\\n\\t}\\n\\n\\t// takes a numeraire amount and returns the raw amount\\n\\tfunction viewRawAmount(\\n\\t\\tint128 _amount\\n\\t) external view override returns (uint256 amount_) {\\n\\t\\tuint256 _rate = getRate();\\n\\n\\t\\tamount_ =\\n\\t\\t\\t(_amount.mulu(10 ** tokenDecimals) * 10 ** oracleDecimals) /\\n\\t\\t\\t_rate;\\n\\t}\\n\\n\\tfunction viewRawAmountLPRatio(\\n\\t\\tuint256 _baseWeight,\\n\\t\\tuint256 _quoteWeight,\\n\\t\\taddress _addr,\\n\\t\\tint128 _amount\\n\\t) external view override returns (uint256 amount_) {\\n\\t\\tuint256 _tokenBal = token.balanceOf(_addr);\\n\\n\\t\\tif (_tokenBal <= 0) return 0;\\n\\n\\t\\t// 1e2\\n\\t\\t_tokenBal = _tokenBal.mul(1e18).div(_baseWeight);\\n\\n\\t\\t// 1e6\\n\\t\\tuint256 _usdcBal = usdc.balanceOf(_addr).mul(1e18).div(_quoteWeight);\\n\\n\\t\\t// Rate is in 1e6\\n\\t\\tuint256 _rate = _usdcBal.mul(10 ** tokenDecimals).div(_tokenBal);\\n\\n\\t\\tamount_ = (_amount.mulu(10 ** tokenDecimals) * 1e6) / _rate;\\n\\t}\\n\\n\\t// takes a raw amount and returns the numeraire amount\\n\\tfunction viewNumeraireAmount(\\n\\t\\tuint256 _amount\\n\\t) external view override returns (int128 amount_) {\\n\\t\\tuint256 _rate = getRate();\\n\\n\\t\\tamount_ = ((_amount * _rate) / 10 ** oracleDecimals).divu(\\n\\t\\t\\t10 ** tokenDecimals\\n\\t\\t);\\n\\t}\\n\\n\\t// views the numeraire value of the current balance of the reserve, in this case eurs\\n\\tfunction viewNumeraireBalance(\\n\\t\\taddress _addr\\n\\t) external view override returns (int128 balance_) {\\n\\t\\tuint256 _rate = getRate();\\n\\n\\t\\tuint256 _balance = token.balanceOf(_addr);\\n\\n\\t\\tif (_balance <= 0) return ABDKMath64x64.fromUInt(0);\\n\\n\\t\\tbalance_ = ((_balance * _rate) / 10 ** oracleDecimals).divu(\\n\\t\\t\\t10 ** tokenDecimals\\n\\t\\t);\\n\\t}\\n\\n\\t// views the numeraire value of the current balance of the reserve, in this case eurs\\n\\tfunction viewNumeraireAmountAndBalance(\\n\\t\\taddress _addr,\\n\\t\\tuint256 _amount\\n\\t) external view override returns (int128 amount_, int128 balance_) {\\n\\t\\tuint256 _rate = getRate();\\n\\n\\t\\tamount_ = ((_amount * _rate) / 10 ** oracleDecimals).divu(\\n\\t\\t\\t10 ** tokenDecimals\\n\\t\\t);\\n\\n\\t\\tuint256 _balance = token.balanceOf(_addr);\\n\\n\\t\\tbalance_ = ((_balance * _rate) / 10 ** oracleDecimals).divu(\\n\\t\\t\\t10 ** tokenDecimals\\n\\t\\t);\\n\\t}\\n\\n\\t// views the numeraire value of the current balance of the reserve, in this case eurs\\n\\t// instead of calculating with chainlink's \\\"rate\\\" it'll be determined by the existing\\n\\t// token ratio. This is in here to prevent LPs from losing out on future oracle price updates\\n\\tfunction viewNumeraireBalanceLPRatio(\\n\\t\\tuint256 _baseWeight,\\n\\t\\tuint256 _quoteWeight,\\n\\t\\taddress _addr\\n\\t) external view override returns (int128 balance_) {\\n\\t\\tuint256 _tokenBal = token.balanceOf(_addr);\\n\\n\\t\\tif (_tokenBal <= 0) return ABDKMath64x64.fromUInt(0);\\n\\n\\t\\tuint256 _usdcBal = usdc.balanceOf(_addr).mul(1e18).div(_quoteWeight);\\n\\n\\t\\t// Rate is in 1e6\\n\\t\\tuint256 _rate = _usdcBal.mul(1e18).div(\\n\\t\\t\\t_tokenBal.mul(1e18).div(_baseWeight)\\n\\t\\t);\\n\\n\\t\\tbalance_ = ((_tokenBal * _rate) / 1e6).divu(1e18);\\n\\t}\\n\\n\\tfunction transferFee(int128 _amount, address _treasury) external override {\\n\\t\\tuint256 _rate = getRate();\\n\\t\\tif (_amount < 0) _amount = -(_amount);\\n\\t\\tuint256 amount = (_amount.mulu(10 ** tokenDecimals) *\\n\\t\\t\\t10 ** oracleDecimals) / _rate;\\n\\t\\ttoken.safeTransfer(_treasury, amount);\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/Curve.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity 0.8.19;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"./interfaces/IFlashCallback.sol\\\";\\n\\nimport \\\"./lib/ABDKMath64x64.sol\\\";\\n\\nimport \\\"./lib/FullMath.sol\\\";\\n\\nimport \\\"./lib/NoDelegateCall.sol\\\";\\n\\nimport \\\"./Orchestrator.sol\\\";\\n\\nimport \\\"./ProportionalLiquidity.sol\\\";\\n\\nimport \\\"./Swaps.sol\\\";\\n\\nimport \\\"./ViewLiquidity.sol\\\";\\n\\nimport \\\"./Storage.sol\\\";\\n\\nimport \\\"./interfaces/IFreeFromUpTo.sol\\\";\\n\\nimport \\\"./interfaces/ICurveFactory.sol\\\";\\n\\nimport \\\"./Structs.sol\\\";\\n\\nlibrary Curves {\\n\\tusing ABDKMath64x64 for int128;\\n\\n\\tevent Approval(\\n\\t\\taddress indexed _owner,\\n\\t\\taddress indexed spender,\\n\\t\\tuint256 value\\n\\t);\\n\\tevent Transfer(address indexed from, address indexed to, uint256 value);\\n\\n\\tfunction add(\\n\\t\\tuint256 x,\\n\\t\\tuint256 y,\\n\\t\\tstring memory errorMessage\\n\\t) private pure returns (uint256 z) {\\n\\t\\trequire((z = x + y) >= x, errorMessage);\\n\\t}\\n\\n\\tfunction sub(\\n\\t\\tuint256 x,\\n\\t\\tuint256 y,\\n\\t\\tstring memory errorMessage\\n\\t) private pure returns (uint256 z) {\\n\\t\\trequire((z = x - y) <= x, errorMessage);\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC20-transfer}.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `recipient` cannot be the zero address.\\n\\t * - the caller must have a balance of at least `amount`.\\n\\t */\\n\\tfunction transfer(\\n\\t\\tStorage.Curve storage curve,\\n\\t\\taddress recipient,\\n\\t\\tuint256 amount\\n\\t) external returns (bool) {\\n\\t\\t_transfer(curve, msg.sender, recipient, amount);\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC20-approve}.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `spender` cannot be the zero address.\\n\\t */\\n\\tfunction approve(\\n\\t\\tStorage.Curve storage curve,\\n\\t\\taddress spender,\\n\\t\\tuint256 amount\\n\\t) external returns (bool) {\\n\\t\\t_approve(curve, msg.sender, spender, amount);\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC20-transferFrom}.\\n\\t *\\n\\t * Emits an {Approval} event indicating the updated allowance. This is not\\n\\t * required by the EIP. See the note at the beginning of {ERC20};\\n\\t *\\n\\t * Requirements:\\n\\t * - `sender` and `recipient` cannot be the zero address.\\n\\t * - `sender` must have a balance of at least `amount`.\\n\\t * - the caller must have allowance for `sender`'s tokens of at least\\n\\t * `amount`\\n\\t */\\n\\tfunction transferFrom(\\n\\t\\tStorage.Curve storage curve,\\n\\t\\taddress sender,\\n\\t\\taddress recipient,\\n\\t\\tuint256 amount\\n\\t) external returns (bool) {\\n\\t\\t_transfer(curve, sender, recipient, amount);\\n\\t\\t_approve(\\n\\t\\t\\tcurve,\\n\\t\\t\\tsender,\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\tsub(\\n\\t\\t\\t\\tcurve.allowances[sender][msg.sender],\\n\\t\\t\\t\\tamount,\\n\\t\\t\\t\\t\\\"Curve/insufficient-allowance\\\"\\n\\t\\t\\t)\\n\\t\\t);\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Atomically increases the allowance granted to `spender` by the caller.\\n\\t *\\n\\t * This is an alternative to {approve} that can be used as a mitigation for\\n\\t * problems described in {IERC20-approve}.\\n\\t *\\n\\t * Emits an {Approval} event indicating the updated allowance.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `spender` cannot be the zero address.\\n\\t */\\n\\tfunction increaseAllowance(\\n\\t\\tStorage.Curve storage curve,\\n\\t\\taddress spender,\\n\\t\\tuint256 addedValue\\n\\t) external returns (bool) {\\n\\t\\t_approve(\\n\\t\\t\\tcurve,\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\tspender,\\n\\t\\t\\tadd(\\n\\t\\t\\t\\tcurve.allowances[msg.sender][spender],\\n\\t\\t\\t\\taddedValue,\\n\\t\\t\\t\\t\\\"Curve/approval-overflow\\\"\\n\\t\\t\\t)\\n\\t\\t);\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n\\t *\\n\\t * This is an alternative to {approve} that can be used as a mitigation for\\n\\t * problems described in {IERC20-approve}.\\n\\t *\\n\\t * Emits an {Approval} event indicating the updated allowance.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `spender` cannot be the zero address.\\n\\t * - `spender` must have allowance for the caller of at least\\n\\t * `subtractedValue`.\\n\\t */\\n\\tfunction decreaseAllowance(\\n\\t\\tStorage.Curve storage curve,\\n\\t\\taddress spender,\\n\\t\\tuint256 subtractedValue\\n\\t) external returns (bool) {\\n\\t\\t_approve(\\n\\t\\t\\tcurve,\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\tspender,\\n\\t\\t\\tsub(\\n\\t\\t\\t\\tcurve.allowances[msg.sender][spender],\\n\\t\\t\\t\\tsubtractedValue,\\n\\t\\t\\t\\t\\\"Curve/allowance-decrease-underflow\\\"\\n\\t\\t\\t)\\n\\t\\t);\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Moves tokens `amount` from `sender` to `recipient`.\\n\\t *\\n\\t * This is public function is equivalent to {transfer}, and can be used to\\n\\t * e.g. implement automatic token fees, slashing mechanisms, etc.\\n\\t *\\n\\t * Emits a {Transfer} event.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `sender` cannot be the zero address.\\n\\t * - `recipient` cannot be the zero address.\\n\\t * - `sender` must have a balance of at least `amount`.\\n\\t */\\n\\tfunction _transfer(\\n\\t\\tStorage.Curve storage curve,\\n\\t\\taddress sender,\\n\\t\\taddress recipient,\\n\\t\\tuint256 amount\\n\\t) private {\\n\\t\\trequire(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n\\t\\trequire(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n\\t\\tcurve.balances[sender] = sub(\\n\\t\\t\\tcurve.balances[sender],\\n\\t\\t\\tamount,\\n\\t\\t\\t\\\"Curve/insufficient-balance\\\"\\n\\t\\t);\\n\\t\\tcurve.balances[recipient] = add(\\n\\t\\t\\tcurve.balances[recipient],\\n\\t\\t\\tamount,\\n\\t\\t\\t\\\"Curve/transfer-overflow\\\"\\n\\t\\t);\\n\\t\\temit Transfer(sender, recipient, amount);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Sets `amount` as the allowance of `spender` over the `_owner`s tokens.\\n\\t *\\n\\t * This is public function is equivalent to `approve`, and can be used to\\n\\t * e.g. set automatic allowances for certain subsystems, etc.\\n\\t *\\n\\t * Emits an {Approval} event.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `_owner` cannot be the zero address.\\n\\t * - `spender` cannot be the zero address.\\n\\t */\\n\\tfunction _approve(\\n\\t\\tStorage.Curve storage curve,\\n\\t\\taddress _owner,\\n\\t\\taddress spender,\\n\\t\\tuint256 amount\\n\\t) private {\\n\\t\\trequire(_owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n\\t\\trequire(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n\\t\\tcurve.allowances[_owner][spender] = amount;\\n\\t\\temit Approval(_owner, spender, amount);\\n\\t}\\n}\\n\\ncontract Curve is Storage, NoDelegateCall {\\n\\tusing SafeMath for uint256;\\n\\tusing ABDKMath64x64 for int128;\\n\\tusing SafeERC20 for IERC20;\\n\\n\\taddress private curveFactory;\\n\\n\\tevent Approval(\\n\\t\\taddress indexed _owner,\\n\\t\\taddress indexed spender,\\n\\t\\tuint256 value\\n\\t);\\n\\n\\tevent ParametersSet(\\n\\t\\tuint256 alpha,\\n\\t\\tuint256 beta,\\n\\t\\tuint256 delta,\\n\\t\\tuint256 epsilon,\\n\\t\\tuint256 lambda\\n\\t);\\n\\n\\tevent AssetIncluded(\\n\\t\\taddress indexed numeraire,\\n\\t\\taddress indexed reserve,\\n\\t\\tuint256 weight\\n\\t);\\n\\n\\tevent AssimilatorIncluded(\\n\\t\\taddress indexed derivative,\\n\\t\\taddress indexed numeraire,\\n\\t\\taddress indexed reserve,\\n\\t\\taddress assimilator\\n\\t);\\n\\n\\tevent PartitionRedeemed(\\n\\t\\taddress indexed token,\\n\\t\\taddress indexed redeemer,\\n\\t\\tuint256 value\\n\\t);\\n\\n\\tevent OwnershipTransfered(\\n\\t\\taddress indexed previousOwner,\\n\\t\\taddress indexed newOwner\\n\\t);\\n\\n\\tevent FrozenSet(bool isFrozen);\\n\\n\\tevent EmergencyAlarm(bool isEmergency);\\n\\n\\tevent Trade(\\n\\t\\taddress indexed trader,\\n\\t\\taddress indexed origin,\\n\\t\\taddress indexed target,\\n\\t\\tuint256 originAmount,\\n\\t\\tuint256 targetAmount,\\n\\t\\tint128 rawProtocolFee\\n\\t);\\n\\n\\tevent Transfer(address indexed from, address indexed to, uint256 value);\\n\\n\\tevent Flash(\\n\\t\\taddress indexed from,\\n\\t\\taddress indexed to,\\n\\t\\tuint256 value0,\\n\\t\\tuint256 value1,\\n\\t\\tuint256 paid0,\\n\\t\\tuint256 paid1\\n\\t);\\n\\n\\tmodifier onlyOwner() {\\n\\t\\trequire(msg.sender == owner, \\\"Curve/caller-is-not-owner\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier nonReentrant() {\\n\\t\\trequire(notEntered, \\\"Curve/re-entered\\\");\\n\\t\\tnotEntered = false;\\n\\t\\t_;\\n\\t\\tnotEntered = true;\\n\\t}\\n\\n\\tmodifier transactable() {\\n\\t\\trequire(!frozen, \\\"Curve/frozen-only-allowing-proportional-withdraw\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier isEmergency() {\\n\\t\\trequire(\\n\\t\\t\\temergency,\\n\\t\\t\\t\\\"Curve/emergency-only-allowing-emergency-proportional-withdraw\\\"\\n\\t\\t);\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier isNotEmergency() {\\n\\t\\trequire(\\n\\t\\t\\t!emergency,\\n\\t\\t\\t\\\"Curve/emergency-only-allowing-emergency-proportional-withdraw\\\"\\n\\t\\t);\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier deadline(uint256 _deadline) {\\n\\t\\trequire(block.timestamp < _deadline, \\\"Curve/tx-deadline-passed\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier globallyTransactable() {\\n\\t\\trequire(\\n\\t\\t\\t!ICurveFactory(address(curveFactory)).getGlobalFrozenState(),\\n\\t\\t\\t\\\"Curve/frozen-globally-only-allowing-proportional-withdraw\\\"\\n\\t\\t);\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier isFlashable() {\\n\\t\\trequire(\\n\\t\\t\\tICurveFactory(address(curveFactory)).getFlashableState(),\\n\\t\\t\\t\\\"Curve/flashloans-paused\\\"\\n\\t\\t);\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier isDepositable(address pool, uint256 deposits) {\\n\\t\\t{\\n\\t\\t\\tuint256 poolCap = ICurveFactory(curveFactory).getPoolCap(pool);\\n\\t\\t\\tuint256 supply = totalSupply();\\n\\t\\t\\trequire(\\n\\t\\t\\t\\tpoolCap == 0 || supply.add(deposits) <= poolCap,\\n\\t\\t\\t\\t\\\"curve/exceeds pool cap\\\"\\n\\t\\t\\t);\\n\\t\\t}\\n\\t\\tif (!ICurveFactory(curveFactory).isPoolGuarded(pool)) {\\n\\t\\t\\t_;\\n\\t\\t} else {\\n\\t\\t\\t_;\\n\\t\\t\\tuint256 poolGuardAmt = ICurveFactory(curveFactory)\\n\\t\\t\\t\\t.getPoolGuardAmount(pool);\\n\\t\\t\\trequire(\\n\\t\\t\\t\\tcurve.balances[msg.sender] <= poolGuardAmt,\\n\\t\\t\\t\\t\\\"curve/deposit-exceeds-guard-amt\\\"\\n\\t\\t\\t);\\n\\t\\t}\\n\\t}\\n\\n\\tconstructor(\\n\\t\\tstring memory _name,\\n\\t\\tstring memory _symbol,\\n\\t\\taddress[] memory _assets,\\n\\t\\tuint256[] memory _assetWeights,\\n\\t\\taddress _factory\\n\\t) {\\n\\t\\trequire(_factory != address(0), \\\"Curve/curve factory zero address!\\\");\\n\\t\\towner = msg.sender;\\n\\t\\tname = _name;\\n\\t\\tsymbol = _symbol;\\n\\t\\tcurveFactory = _factory;\\n\\t\\temit OwnershipTransfered(address(0), msg.sender);\\n\\n\\t\\tOrchestrator.initialize(\\n\\t\\t\\tcurve,\\n\\t\\t\\tnumeraires,\\n\\t\\t\\treserves,\\n\\t\\t\\tderivatives,\\n\\t\\t\\t_assets,\\n\\t\\t\\t_assetWeights\\n\\t\\t);\\n\\t}\\n\\n\\t/// @notice sets the parameters for the pool\\n\\t/// @param _alpha the value for alpha (halt threshold) must be less than or equal to 1 and greater than 0\\n\\t/// @param _beta the value for beta must be less than alpha and greater than 0\\n\\t/// @param _feeAtHalt the maximum value for the fee at the halt point\\n\\t/// @param _epsilon the base fee for the pool\\n\\t/// @param _lambda the value for lambda must be less than or equal to 1 and greater than zero\\n\\tfunction setParams(\\n\\t\\tuint256 _alpha,\\n\\t\\tuint256 _beta,\\n\\t\\tuint256 _feeAtHalt,\\n\\t\\tuint256 _epsilon,\\n\\t\\tuint256 _lambda\\n\\t) external onlyOwner {\\n\\t\\tOrchestrator.setParams(\\n\\t\\t\\tcurve,\\n\\t\\t\\t_alpha,\\n\\t\\t\\t_beta,\\n\\t\\t\\t_feeAtHalt,\\n\\t\\t\\t_epsilon,\\n\\t\\t\\t_lambda\\n\\t\\t);\\n\\t}\\n\\n\\tfunction setAssimilator(\\n\\t\\taddress _baseCurrency,\\n\\t\\taddress _baseAssim,\\n\\t\\taddress _quoteCurrency,\\n\\t\\taddress _quoteAssim\\n\\t) external onlyOwner {\\n\\t\\tOrchestrator.setAssimilator(\\n\\t\\t\\tcurve,\\n\\t\\t\\t_baseCurrency,\\n\\t\\t\\t_baseAssim,\\n\\t\\t\\t_quoteCurrency,\\n\\t\\t\\t_quoteAssim\\n\\t\\t);\\n\\t}\\n\\n\\t/// @notice excludes an assimilator from the curve\\n\\t/// @param _derivative the address of the assimilator to exclude\\n\\tfunction excludeDerivative(address _derivative) external onlyOwner {\\n\\t\\tfor (uint256 i = 0; i < numeraires.length; i++) {\\n\\t\\t\\tif (_derivative == numeraires[i])\\n\\t\\t\\t\\trevert(\\\"Curve/cannot-delete-numeraire\\\");\\n\\t\\t\\tif (_derivative == reserves[i])\\n\\t\\t\\t\\trevert(\\\"Curve/cannot-delete-reserve\\\");\\n\\t\\t}\\n\\n\\t\\tdelete curve.assimilators[_derivative];\\n\\t}\\n\\n\\t/// @notice view the current parameters of the curve\\n\\t/// @return alpha_ the current alpha value\\n\\t///  beta_ the current beta value\\n\\t///  delta_ the current delta value\\n\\t///  epsilon_ the current epsilon value\\n\\t///  lambda_ the current lambda value\\n\\t///  omega_ the current omega value\\n\\tfunction viewCurve()\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tuint256 alpha_,\\n\\t\\t\\tuint256 beta_,\\n\\t\\t\\tuint256 delta_,\\n\\t\\t\\tuint256 epsilon_,\\n\\t\\t\\tuint256 lambda_\\n\\t\\t)\\n\\t{\\n\\t\\treturn Orchestrator.viewCurve(curve);\\n\\t}\\n\\n\\tfunction setEmergency(bool _emergency) external onlyOwner {\\n\\t\\temit EmergencyAlarm(_emergency);\\n\\n\\t\\temergency = _emergency;\\n\\t}\\n\\n\\tfunction setFrozen(bool _toFreezeOrNotToFreeze) external onlyOwner {\\n\\t\\temit FrozenSet(_toFreezeOrNotToFreeze);\\n\\n\\t\\tfrozen = _toFreezeOrNotToFreeze;\\n\\t}\\n\\n\\tfunction transferOwnership(address _newOwner) external onlyOwner {\\n\\t\\trequire(\\n\\t\\t\\t_newOwner != address(0),\\n\\t\\t\\t\\\"Curve/new-owner-cannot-be-zeroth-address\\\"\\n\\t\\t);\\n\\n\\t\\temit OwnershipTransfered(owner, _newOwner);\\n\\n\\t\\towner = _newOwner;\\n\\t}\\n\\n\\t/// @notice swap a dynamic origin amount for a fixed target amount\\n\\t/// @param _origin the address of the origin\\n\\t/// @param _target the address of the target\\n\\t/// @param _originAmount the origin amount\\n\\t/// @param _minTargetAmount the minimum target amount\\n\\t/// @param _deadline deadline in block number after which the trade will not execute\\n\\t/// @return targetAmount_ the amount of target that has been swapped for the origin amount\\n\\tfunction originSwap(\\n\\t\\taddress _origin,\\n\\t\\taddress _target,\\n\\t\\tuint256 _originAmount,\\n\\t\\tuint256 _minTargetAmount,\\n\\t\\tuint256 _deadline\\n\\t)\\n\\t\\texternal\\n\\t\\tdeadline(_deadline)\\n\\t\\tgloballyTransactable\\n\\t\\ttransactable\\n\\t\\tnoDelegateCall\\n\\t\\tisNotEmergency\\n\\t\\tnonReentrant\\n\\t\\treturns (uint256 targetAmount_)\\n\\t{\\n\\t\\tOriginSwapData memory _swapData;\\n\\t\\t_swapData._origin = _origin;\\n\\t\\t_swapData._target = _target;\\n\\t\\t_swapData._originAmount = _originAmount;\\n\\t\\t_swapData._recipient = msg.sender;\\n\\t\\t_swapData._curveFactory = curveFactory;\\n\\t\\ttargetAmount_ = Swaps.originSwap(curve, _swapData);\\n\\t\\t// targetAmount_ = Swaps.originSwap(curve, _origin, _target, _originAmount, msg.sender,curveFactory);\\n\\n\\t\\trequire(\\n\\t\\t\\ttargetAmount_ >= _minTargetAmount,\\n\\t\\t\\t\\\"Curve/below-min-target-amount\\\"\\n\\t\\t);\\n\\t}\\n\\n\\t/// @notice view how much target amount a fixed origin amount will swap for\\n\\t/// @param _origin the address of the origin\\n\\t/// @param _target the address of the target\\n\\t/// @param _originAmount the origin amount\\n\\t/// @return targetAmount_ the target amount that would have been swapped for the origin amount\\n\\tfunction viewOriginSwap(\\n\\t\\taddress _origin,\\n\\t\\taddress _target,\\n\\t\\tuint256 _originAmount\\n\\t)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\tgloballyTransactable\\n\\t\\ttransactable\\n\\t\\treturns (uint256 targetAmount_)\\n\\t{\\n\\t\\ttargetAmount_ = Swaps.viewOriginSwap(\\n\\t\\t\\tcurve,\\n\\t\\t\\t_origin,\\n\\t\\t\\t_target,\\n\\t\\t\\t_originAmount\\n\\t\\t);\\n\\t}\\n\\n\\t/// @notice swap a dynamic origin amount for a fixed target amount\\n\\t/// @param _origin the address of the origin\\n\\t/// @param _target the address of the target\\n\\t/// @param _maxOriginAmount the maximum origin amount\\n\\t/// @param _targetAmount the target amount\\n\\t/// @param _deadline deadline in block number after which the trade will not execute\\n\\t/// @return originAmount_ the amount of origin that has been swapped for the target\\n\\tfunction targetSwap(\\n\\t\\taddress _origin,\\n\\t\\taddress _target,\\n\\t\\tuint256 _maxOriginAmount,\\n\\t\\tuint256 _targetAmount,\\n\\t\\tuint256 _deadline\\n\\t)\\n\\t\\texternal\\n\\t\\tdeadline(_deadline)\\n\\t\\tgloballyTransactable\\n\\t\\ttransactable\\n\\t\\tnoDelegateCall\\n\\t\\tisNotEmergency\\n\\t\\tnonReentrant\\n\\t\\treturns (uint256 originAmount_)\\n\\t{\\n\\t\\tTargetSwapData memory _swapData;\\n\\t\\t_swapData._origin = _origin;\\n\\t\\t_swapData._target = _target;\\n\\t\\t_swapData._targetAmount = _targetAmount;\\n\\t\\t_swapData._recipient = msg.sender;\\n\\t\\t_swapData._curveFactory = curveFactory;\\n\\t\\toriginAmount_ = Swaps.targetSwap(curve, _swapData);\\n\\t\\t// originAmount_ = Swaps.targetSwap(curve, _origin, _target, _targetAmount, msg.sender,curveFactory);\\n\\n\\t\\trequire(\\n\\t\\t\\toriginAmount_ <= _maxOriginAmount,\\n\\t\\t\\t\\\"Curve/above-max-origin-amount\\\"\\n\\t\\t);\\n\\t}\\n\\n\\t/// @notice view how much of the origin currency the target currency will take\\n\\t/// @param _origin the address of the origin\\n\\t/// @param _target the address of the target\\n\\t/// @param _targetAmount the target amount\\n\\t/// @return originAmount_ the amount of target that has been swapped for the origin\\n\\tfunction viewTargetSwap(\\n\\t\\taddress _origin,\\n\\t\\taddress _target,\\n\\t\\tuint256 _targetAmount\\n\\t)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\tgloballyTransactable\\n\\t\\ttransactable\\n\\t\\treturns (uint256 originAmount_)\\n\\t{\\n\\t\\toriginAmount_ = Swaps.viewTargetSwap(\\n\\t\\t\\tcurve,\\n\\t\\t\\t_origin,\\n\\t\\t\\t_target,\\n\\t\\t\\t_targetAmount\\n\\t\\t);\\n\\t}\\n\\n\\t/// @notice deposit into the pool with no slippage from the numeraire assets the pool supports\\n\\t/// @param  _deposit the full amount you want to deposit into the pool which will be divided up evenly amongst\\n\\t///                  the numeraire assets of the pool\\n\\t/// @return ( the amount of curves you receive in return for your deposit,\\n\\t///           the amount deposited for each numeraire)\\n\\tfunction deposit(\\n\\t\\tuint256 _deposit,\\n\\t\\tuint256 _minQuoteAmount,\\n\\t\\tuint256 _minBaseAmount,\\n\\t\\tuint256 _maxQuoteAmount,\\n\\t\\tuint256 _maxBaseAmount,\\n\\t\\tuint256 _deadline\\n\\t)\\n\\t\\texternal\\n\\t\\tdeadline(_deadline)\\n\\t\\tgloballyTransactable\\n\\t\\ttransactable\\n\\t\\tnonReentrant\\n\\t\\tnoDelegateCall\\n\\t\\tisNotEmergency\\n\\t\\tisDepositable(address(this), _deposit)\\n\\t\\treturns (uint256, uint256[] memory)\\n\\t{\\n\\t\\trequire(_deposit > 0, \\\"Curve/deposit_below_zero\\\");\\n\\n\\t\\t// (curvesMinted_,  deposits_)\\n\\t\\tDepositData memory _depositData;\\n\\t\\t_depositData.deposits = _deposit;\\n\\t\\t_depositData.minQuote = _minQuoteAmount;\\n\\t\\t_depositData.minBase = _minBaseAmount;\\n\\t\\t_depositData.maxQuote = _maxQuoteAmount;\\n\\t\\t_depositData.maxBase = _maxBaseAmount;\\n\\t\\t(\\n\\t\\t\\tuint256 curvesMinted_,\\n\\t\\t\\tuint256[] memory deposits_\\n\\t\\t) = ProportionalLiquidity.proportionalDeposit(curve, _depositData);\\n\\t\\treturn (curvesMinted_, deposits_);\\n\\t}\\n\\n\\t/// @notice view deposits and curves minted a given deposit would return\\n\\t/// @param _deposit the full amount of stablecoins you want to deposit. Divided evenly according to the\\n\\t///                 prevailing proportions of the numeraire assets of the pool\\n\\t/// @return (the amount of curves you receive in return for your deposit,\\n\\t///          the amount deposited for each numeraire)\\n\\tfunction viewDeposit(\\n\\t\\tuint256 _deposit\\n\\t)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\tgloballyTransactable\\n\\t\\ttransactable\\n\\t\\treturns (uint256, uint256[] memory)\\n\\t{\\n\\t\\t// curvesToMint_, depositsToMake_\\n\\t\\treturn ProportionalLiquidity.viewProportionalDeposit(curve, _deposit);\\n\\t}\\n\\n\\t/// @notice  Emergency withdraw tokens in the event that the oracle somehow bugs out\\n\\t///          and no one is able to withdraw due to the invariant check\\n\\t/// @param   _curvesToBurn the full amount you want to withdraw from the pool which will be withdrawn from evenly amongst the\\n\\t///                        numeraire assets of the pool\\n\\t/// @return withdrawals_ the amonts of numeraire assets withdrawn from the pool\\n\\tfunction emergencyWithdraw(\\n\\t\\tuint256 _curvesToBurn,\\n\\t\\tuint256 _deadline\\n\\t)\\n\\t\\texternal\\n\\t\\tisEmergency\\n\\t\\tdeadline(_deadline)\\n\\t\\tnonReentrant\\n\\t\\tnoDelegateCall\\n\\t\\treturns (uint256[] memory withdrawals_)\\n\\t{\\n\\t\\treturn ProportionalLiquidity.proportionalWithdraw(curve, _curvesToBurn);\\n\\t}\\n\\n\\t/// @notice  withdrawas amount of curve tokens from the the pool equally from the numeraire assets of the pool with no slippage\\n\\t/// @param   _curvesToBurn the full amount you want to withdraw from the pool which will be withdrawn from evenly amongst the\\n\\t///                        numeraire assets of the pool\\n\\t/// @return withdrawals_ the amonts of numeraire assets withdrawn from the pool\\n\\tfunction withdraw(\\n\\t\\tuint256 _curvesToBurn,\\n\\t\\tuint256 _deadline\\n\\t)\\n\\t\\texternal\\n\\t\\tdeadline(_deadline)\\n\\t\\tnonReentrant\\n\\t\\tnoDelegateCall\\n\\t\\tisNotEmergency\\n\\t\\treturns (uint256[] memory withdrawals_)\\n\\t{\\n\\t\\treturn ProportionalLiquidity.proportionalWithdraw(curve, _curvesToBurn);\\n\\t}\\n\\n\\t/// @notice  views the withdrawal information from the pool\\n\\t/// @param   _curvesToBurn the full amount you want to withdraw from the pool which will be withdrawn from evenly amongst the\\n\\t///                        numeraire assets of the pool\\n\\t/// @return the amonnts of numeraire assets withdrawn from the pool\\n\\tfunction viewWithdraw(\\n\\t\\tuint256 _curvesToBurn\\n\\t)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\tgloballyTransactable\\n\\t\\ttransactable\\n\\t\\treturns (uint256[] memory)\\n\\t{\\n\\t\\treturn\\n\\t\\t\\tProportionalLiquidity.viewProportionalWithdraw(\\n\\t\\t\\t\\tcurve,\\n\\t\\t\\t\\t_curvesToBurn\\n\\t\\t\\t);\\n\\t}\\n\\n\\tfunction supportsInterface(\\n\\t\\tbytes4 _interface\\n\\t) public pure returns (bool supports_) {\\n\\t\\tsupports_ =\\n\\t\\t\\tthis.supportsInterface.selector == _interface || // erc165\\n\\t\\t\\tbytes4(0x7f5828d0) == _interface || // eip173\\n\\t\\t\\tbytes4(0x36372b07) == _interface; // erc20\\n\\t}\\n\\n\\t/// @notice transfers curve tokens\\n\\t/// @param _recipient the address of where to send the curve tokens\\n\\t/// @param _amount the amount of curve tokens to send\\n\\t/// @return success_ the success bool of the call\\n\\tfunction transfer(\\n\\t\\taddress _recipient,\\n\\t\\tuint256 _amount\\n\\t)\\n\\t\\tpublic\\n\\t\\tnonReentrant\\n\\t\\tnoDelegateCall\\n\\t\\tisNotEmergency\\n\\t\\treturns (bool success_)\\n\\t{\\n\\t\\tsuccess_ = Curves.transfer(curve, _recipient, _amount);\\n\\t}\\n\\n\\t/// @notice transfers curve tokens from one address to another address\\n\\t/// @param _sender the account from which the curve tokens will be sent\\n\\t/// @param _recipient the account to which the curve tokens will be sent\\n\\t/// @param _amount the amount of curve tokens to transfer\\n\\t/// @return success_ the success bool of the call\\n\\tfunction transferFrom(\\n\\t\\taddress _sender,\\n\\t\\taddress _recipient,\\n\\t\\tuint256 _amount\\n\\t)\\n\\t\\tpublic\\n\\t\\tnonReentrant\\n\\t\\tnoDelegateCall\\n\\t\\tisNotEmergency\\n\\t\\treturns (bool success_)\\n\\t{\\n\\t\\tsuccess_ = Curves.transferFrom(curve, _sender, _recipient, _amount);\\n\\t}\\n\\n\\t/// @notice approves a user to spend curve tokens on their behalf\\n\\t/// @param _spender the account to allow to spend from msg.sender\\n\\t/// @param _amount the amount to specify the spender can spend\\n\\t/// @return success_ the success bool of this call\\n\\tfunction approve(\\n\\t\\taddress _spender,\\n\\t\\tuint256 _amount\\n\\t) public nonReentrant noDelegateCall returns (bool success_) {\\n\\t\\tsuccess_ = Curves.approve(curve, _spender, _amount);\\n\\t}\\n\\n\\tfunction flash(\\n\\t\\taddress recipient,\\n\\t\\tuint256 amount0,\\n\\t\\tuint256 amount1,\\n\\t\\tbytes calldata data\\n\\t)\\n\\t\\texternal\\n\\t\\tisFlashable\\n\\t\\tgloballyTransactable\\n\\t\\tnonReentrant\\n\\t\\tnoDelegateCall\\n\\t\\ttransactable\\n\\t\\tisNotEmergency\\n\\t{\\n\\t\\tuint256 fee = curve.epsilon.mulu(1e18);\\n\\n\\t\\trequire(\\n\\t\\t\\tIERC20(derivatives[0]).balanceOf(address(this)) > 0,\\n\\t\\t\\t\\\"Curve/token0-zero-liquidity-depth\\\"\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\tIERC20(derivatives[1]).balanceOf(address(this)) > 0,\\n\\t\\t\\t\\\"Curve/token1-zero-liquidity-depth\\\"\\n\\t\\t);\\n\\n\\t\\tuint256 fee0 = FullMath.mulDivRoundingUp(amount0, fee, 1e18);\\n\\t\\tuint256 fee1 = FullMath.mulDivRoundingUp(amount1, fee, 1e18);\\n\\n\\t\\tuint256 balance0Before = IERC20(derivatives[0]).balanceOf(\\n\\t\\t\\taddress(this)\\n\\t\\t);\\n\\t\\tuint256 balance1Before = IERC20(derivatives[1]).balanceOf(\\n\\t\\t\\taddress(this)\\n\\t\\t);\\n\\n\\t\\tif (amount0 > 0)\\n\\t\\t\\tIERC20(derivatives[0]).safeTransfer(recipient, amount0);\\n\\t\\tif (amount1 > 0)\\n\\t\\t\\tIERC20(derivatives[1]).safeTransfer(recipient, amount1);\\n\\n\\t\\tIFlashCallback(msg.sender).flashCallback(fee0, fee1, data);\\n\\n\\t\\tuint256 balance0After = IERC20(derivatives[0]).balanceOf(address(this));\\n\\t\\tuint256 balance1After = IERC20(derivatives[1]).balanceOf(address(this));\\n\\n\\t\\trequire(\\n\\t\\t\\tbalance0Before.add(fee0) <= balance0After,\\n\\t\\t\\t\\\"Curve/insufficient-token0-returned\\\"\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\tbalance1Before.add(fee1) <= balance1After,\\n\\t\\t\\t\\\"Curve/insufficient-token1-returned\\\"\\n\\t\\t);\\n\\n\\t\\t// sub is safe because we know balanceAfter is gt balanceBefore by at least fee\\n\\t\\tuint256 paid0 = balance0After - balance0Before;\\n\\t\\tuint256 paid1 = balance1After - balance1Before;\\n\\n\\t\\tIERC20(derivatives[0]).safeTransfer(owner, paid0);\\n\\t\\tIERC20(derivatives[1]).safeTransfer(owner, paid1);\\n\\n\\t\\temit Flash(msg.sender, recipient, amount0, amount1, paid0, paid1);\\n\\t}\\n\\n\\t/// @notice view the curve token balance of a given account\\n\\t/// @param _account the account to view the balance of\\n\\t/// @return balance_ the curve token ballance of the given account\\n\\tfunction balanceOf(\\n\\t\\taddress _account\\n\\t) public view returns (uint256 balance_) {\\n\\t\\tbalance_ = curve.balances[_account];\\n\\t}\\n\\n\\t/// @notice views the total curve supply of the pool\\n\\t/// @return totalSupply_ the total supply of curve tokens\\n\\tfunction totalSupply() public view returns (uint256 totalSupply_) {\\n\\t\\ttotalSupply_ = curve.totalSupply;\\n\\t}\\n\\n\\t/// @notice views the total allowance one address has to spend from another address\\n\\t/// @param _owner the address of the owner\\n\\t/// @param _spender the address of the spender\\n\\t/// @return allowance_ the amount the owner has allotted the spender\\n\\tfunction allowance(\\n\\t\\taddress _owner,\\n\\t\\taddress _spender\\n\\t) public view returns (uint256 allowance_) {\\n\\t\\tallowance_ = curve.allowances[_owner][_spender];\\n\\t}\\n\\n\\t/// @notice views the total amount of liquidity in the curve in numeraire value and format - 18 decimals\\n\\t/// @return total_ the total value in the curve\\n\\t/// @return individual_ the individual values in the curve\\n\\tfunction liquidity()\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\treturns (uint256 total_, uint256[] memory individual_)\\n\\t{\\n\\t\\treturn ViewLiquidity.viewLiquidity(curve);\\n\\t}\\n\\n\\t/// @notice view the assimilator address for a derivative\\n\\t/// @return assimilator_ the assimilator address\\n\\tfunction assimilator(\\n\\t\\taddress _derivative\\n\\t) public view returns (address assimilator_) {\\n\\t\\tassimilator_ = curve.assimilators[_derivative].addr;\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/CurveFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is disstributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity 0.8.19;\\n\\n// Finds new Curves! logs their addresses and provides `isCurve(address) -> (bool)`\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./interfaces/IFreeFromUpTo.sol\\\";\\nimport \\\"./Curve.sol\\\";\\n\\ncontract CurveFactory is Ownable, ReentrancyGuard {\\n\\tevent NewCurve(\\n\\t\\taddress indexed caller,\\n\\t\\tbytes32 indexed id,\\n\\t\\taddress indexed curve\\n\\t);\\n\\n\\tmapping(bytes32 => address) public curves;\\n\\n\\tfunction getCurve(\\n\\t\\taddress _baseCurrency,\\n\\t\\taddress _quoteCurrency\\n\\t) external view returns (address) {\\n\\t\\tbytes32 curveId = keccak256(abi.encode(_baseCurrency, _quoteCurrency));\\n\\t\\treturn (curves[curveId]);\\n\\t}\\n\\n\\tfunction newCurve(\\n\\t\\tstring memory _name,\\n\\t\\tstring memory _symbol,\\n\\t\\taddress _baseCurrency,\\n\\t\\taddress _quoteCurrency,\\n\\t\\tuint256 _baseWeight,\\n\\t\\tuint256 _quoteWeight,\\n\\t\\taddress _baseAssimilator,\\n\\t\\taddress _quoteAssimilator\\n\\t) public nonReentrant onlyOwner returns (Curve) {\\n\\t\\tbytes32 curveId = keccak256(abi.encode(_baseCurrency, _quoteCurrency));\\n\\t\\tif (curves[curveId] != address(0))\\n\\t\\t\\trevert(\\\"CurveFactory/currency-pair-already-exists\\\");\\n\\n\\t\\taddress[] memory _assets = new address[](10);\\n\\t\\tuint256[] memory _assetWeights = new uint256[](2);\\n\\n\\t\\t// Base Currency\\n\\t\\t_assets[0] = _baseCurrency;\\n\\t\\t_assets[1] = _baseAssimilator;\\n\\t\\t_assets[2] = _baseCurrency;\\n\\t\\t_assets[3] = _baseAssimilator;\\n\\t\\t_assets[4] = _baseCurrency;\\n\\n\\t\\t// Quote Currency (typically USDC)\\n\\t\\t_assets[5] = _quoteCurrency;\\n\\t\\t_assets[6] = _quoteAssimilator;\\n\\t\\t_assets[7] = _quoteCurrency;\\n\\t\\t_assets[8] = _quoteAssimilator;\\n\\t\\t_assets[9] = _quoteCurrency;\\n\\n\\t\\t// Weights\\n\\t\\t_assetWeights[0] = _baseWeight;\\n\\t\\t_assetWeights[1] = _quoteWeight;\\n\\n\\t\\t// New curve\\n\\t\\tCurve curve = new Curve(\\n\\t\\t\\t_name,\\n\\t\\t\\t_symbol,\\n\\t\\t\\t_assets,\\n\\t\\t\\t_assetWeights,\\n\\t\\t\\taddress(this)\\n\\t\\t);\\n\\t\\tcurve.transferOwnership(msg.sender);\\n\\t\\tcurves[curveId] = address(curve);\\n\\n\\t\\temit NewCurve(msg.sender, curveId, address(curve));\\n\\n\\t\\treturn curve;\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/CurveFactoryV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is disstributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity 0.8.19;\\npragma experimental ABIEncoderV2;\\n\\n// Finds new Curves! logs their addresses and provides `isCurve(address) -> (bool)`\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./Curve.sol\\\";\\nimport \\\"./interfaces/IFreeFromUpTo.sol\\\";\\nimport \\\"./AssimilatorFactory.sol\\\";\\nimport \\\"./assimilators/AssimilatorV2.sol\\\";\\nimport \\\"./interfaces/ICurveFactory.sol\\\";\\nimport \\\"./interfaces/IAssimilatorFactory.sol\\\";\\nimport \\\"./interfaces/IERC20Detailed.sol\\\";\\nimport \\\"./interfaces/IConfig.sol\\\";\\nimport \\\"./Structs.sol\\\";\\n\\ncontract CurveFactoryV2 is ICurveFactory, Ownable {\\n\\tusing Address for address;\\n\\n\\tIAssimilatorFactory public immutable assimilatorFactory;\\n\\tIConfig public config;\\n\\n\\taddress private USDC;\\n\\n\\tevent NewCurve(\\n\\t\\taddress indexed caller,\\n\\t\\tbytes32 indexed id,\\n\\t\\taddress indexed curve\\n\\t);\\n\\n\\tmapping(bytes32 => address) public curves;\\n\\n\\tconstructor(address _assimFactory, address _config) {\\n\\t\\trequire(\\n\\t\\t\\t_assimFactory.isContract(),\\n\\t\\t\\t\\\"CurveFactory/invalid-assimFactory\\\"\\n\\t\\t);\\n\\t\\tassimilatorFactory = IAssimilatorFactory(_assimFactory);\\n\\t\\trequire(_config.isContract(), \\\"CurveFactory/invalid-config\\\");\\n\\t\\tconfig = IConfig(_config);\\n\\t}\\n\\n\\tfunction getGlobalFrozenState()\\n\\t\\texternal\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (bool)\\n\\t{\\n\\t\\treturn config.getGlobalFrozenState();\\n\\t}\\n\\n\\tfunction getFlashableState() external view virtual override returns (bool) {\\n\\t\\treturn config.getFlashableState();\\n\\t}\\n\\n\\tfunction getProtocolFee() external view virtual override returns (int128) {\\n\\t\\treturn config.getProtocolFee();\\n\\t}\\n\\n\\tfunction getProtocolTreasury()\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (address)\\n\\t{\\n\\t\\treturn config.getProtocolTreasury();\\n\\t}\\n\\n\\tfunction isPoolGuarded(address pool) external view override returns (bool) {\\n\\t\\treturn config.isPoolGuarded(pool);\\n\\t}\\n\\n\\tfunction getPoolGuardAmount(\\n\\t\\taddress pool\\n\\t) external view override returns (uint256) {\\n\\t\\treturn config.getPoolGuardAmount(pool);\\n\\t}\\n\\n\\tfunction getPoolCap(address pool) external view override returns (uint256) {\\n\\t\\treturn config.getPoolCap(pool);\\n\\t}\\n\\n\\tfunction getCurve(\\n\\t\\taddress _baseCurrency,\\n\\t\\taddress _quoteCurrency\\n\\t) external view returns (address) {\\n\\t\\tbytes32 curveId = keccak256(abi.encode(_baseCurrency, _quoteCurrency));\\n\\t\\treturn (curves[curveId]);\\n\\t}\\n\\n\\tfunction newCurve(CurveInfo memory _info) public onlyOwner returns (Curve) {\\n\\t\\trequire(\\n\\t\\t\\t_info._quoteCurrency == quoteAddress(),\\n\\t\\t\\t\\\"CurveFactory/quote-currency-is-not-usdc\\\"\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\t_info._baseCurrency != quoteAddress(),\\n\\t\\t\\t\\\"CurveFactory/base-currency-is-usdc\\\"\\n\\t\\t);\\n\\n\\t\\trequire(\\n\\t\\t\\t_info._baseWeight == 5e17 && _info._quoteWeight == 5e17,\\n\\t\\t\\t\\\"CurveFactory/weights-not-50-percent\\\"\\n\\t\\t);\\n\\n\\t\\tuint256 quoteDec = IERC20Detailed(_info._quoteCurrency).decimals();\\n\\t\\tuint256 baseDec = IERC20Detailed(_info._baseCurrency).decimals();\\n\\n\\t\\tbytes32 curveId = keccak256(\\n\\t\\t\\tabi.encode(_info._baseCurrency, _info._quoteCurrency)\\n\\t\\t);\\n\\t\\tif (curves[curveId] != address(0)) revert(\\\"CurveFactory/pair-exists\\\");\\n\\t\\tAssimilatorV2 _baseAssim;\\n\\t\\t_baseAssim = (assimilatorFactory.getAssimilator(_info._baseCurrency));\\n\\t\\tif (address(_baseAssim) == address(0))\\n\\t\\t\\t_baseAssim = (\\n\\t\\t\\t\\tassimilatorFactory.newAssimilator(\\n\\t\\t\\t\\t\\t_info._baseOracle,\\n\\t\\t\\t\\t\\t_info._baseCurrency,\\n\\t\\t\\t\\t\\tbaseDec\\n\\t\\t\\t\\t)\\n\\t\\t\\t);\\n\\t\\tAssimilatorV2 _quoteAssim;\\n\\t\\t_quoteAssim = (assimilatorFactory.getAssimilator(_info._quoteCurrency));\\n\\t\\tif (address(_quoteAssim) == address(0))\\n\\t\\t\\t_quoteAssim = (\\n\\t\\t\\t\\tassimilatorFactory.newAssimilator(\\n\\t\\t\\t\\t\\t_info._quoteOracle,\\n\\t\\t\\t\\t\\t_info._quoteCurrency,\\n\\t\\t\\t\\t\\tquoteDec\\n\\t\\t\\t\\t)\\n\\t\\t\\t);\\n\\n\\t\\taddress[] memory _assets = new address[](10);\\n\\t\\tuint256[] memory _assetWeights = new uint256[](2);\\n\\n\\t\\t// Base Currency\\n\\t\\t_assets[0] = _info._baseCurrency;\\n\\t\\t_assets[1] = address(_baseAssim);\\n\\t\\t_assets[2] = _info._baseCurrency;\\n\\t\\t_assets[3] = address(_baseAssim);\\n\\t\\t_assets[4] = _info._baseCurrency;\\n\\n\\t\\t// Quote Currency (typically USDC)\\n\\t\\t_assets[5] = _info._quoteCurrency;\\n\\t\\t_assets[6] = address(_quoteAssim);\\n\\t\\t_assets[7] = _info._quoteCurrency;\\n\\t\\t_assets[8] = address(_quoteAssim);\\n\\t\\t_assets[9] = _info._quoteCurrency;\\n\\n\\t\\t// Weights\\n\\t\\t_assetWeights[0] = _info._baseWeight;\\n\\t\\t_assetWeights[1] = _info._quoteWeight;\\n\\n\\t\\t// New curve\\n\\t\\tCurve curve = new Curve(\\n\\t\\t\\t_info._name,\\n\\t\\t\\t_info._symbol,\\n\\t\\t\\t_assets,\\n\\t\\t\\t_assetWeights,\\n\\t\\t\\taddress(this)\\n\\t\\t);\\n\\t\\tcurve.setParams(\\n\\t\\t\\t_info._alpha,\\n\\t\\t\\t_info._beta,\\n\\t\\t\\t_info._feeAtHalt,\\n\\t\\t\\t_info._epsilon,\\n\\t\\t\\t_info._lambda\\n\\t\\t);\\n\\t\\tcurve.transferOwnership(getProtocolTreasury());\\n\\t\\tcurves[curveId] = address(curve);\\n\\n\\t\\temit NewCurve(msg.sender, curveId, address(curve));\\n\\n\\t\\treturn curve;\\n\\t}\\n\\n\\tfunction quoteAddress() internal view returns (address) {\\n\\t\\tif (USDC == address(0)) {\\n\\t\\t\\tuint256 chainID;\\n\\t\\t\\tassembly {\\n\\t\\t\\t\\tchainID := chainid()\\n\\t\\t\\t}\\n\\t\\t\\tif (chainID == 1) {\\n\\t\\t\\t\\treturn 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\\n\\t\\t\\t} else if (chainID == 137 || chainID == 80001) {\\n\\t\\t\\t\\treturn 0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174;\\n\\t\\t\\t} else if (chainID == 42161) {\\n\\t\\t\\t\\treturn 0xFF970A61A04b1cA14834A43f5dE4533eBDDB5CC8;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\treturn address(0);\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\treturn USDC;\\n\\t\\t}\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/CurveMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"./Storage.sol\\\";\\nimport \\\"./lib/UnsafeMath64x64.sol\\\";\\nimport \\\"./lib/ABDKMath64x64.sol\\\";\\n\\nlibrary CurveMath {\\n\\tint128 private constant ONE = 0x10000000000000000;\\n\\tint128 private constant MAX = 0x4000000000000000; // .25 in layman's terms\\n\\tint128 private constant MAX_DIFF = -0x10C6F7A0B5EE;\\n\\tint128 private constant ONE_WEI = 0x12;\\n\\n\\tusing ABDKMath64x64 for int128;\\n\\tusing UnsafeMath64x64 for int128;\\n\\tusing ABDKMath64x64 for uint256;\\n\\n\\t// This is used to prevent stack too deep errors\\n\\tfunction calculateFee(\\n\\t\\tint128 _gLiq,\\n\\t\\tint128[] memory _bals,\\n\\t\\tStorage.Curve storage curve,\\n\\t\\tint128[] memory _weights\\n\\t) internal view returns (int128 psi_) {\\n\\t\\tint128 _beta = curve.beta;\\n\\t\\tint128 _delta = curve.delta;\\n\\n\\t\\tpsi_ = calculateFee(_gLiq, _bals, _beta, _delta, _weights);\\n\\t}\\n\\n\\tfunction calculateFee(\\n\\t\\tint128 _gLiq,\\n\\t\\tint128[] memory _bals,\\n\\t\\tint128 _beta,\\n\\t\\tint128 _delta,\\n\\t\\tint128[] memory _weights\\n\\t) internal pure returns (int128 psi_) {\\n\\t\\tuint256 _length = _bals.length;\\n\\n\\t\\tfor (uint256 i = 0; i < _length; i++) {\\n\\t\\t\\tint128 _ideal = _gLiq.mul(_weights[i]);\\n\\t\\t\\tpsi_ += calculateMicroFee(_bals[i], _ideal, _beta, _delta);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction calculateMicroFee(\\n\\t\\tint128 _bal,\\n\\t\\tint128 _ideal,\\n\\t\\tint128 _beta,\\n\\t\\tint128 _delta\\n\\t) private pure returns (int128 fee_) {\\n\\t\\tif (_bal < _ideal) {\\n\\t\\t\\tint128 _threshold = _ideal.mul(ONE - _beta);\\n\\n\\t\\t\\tif (_bal < _threshold) {\\n\\t\\t\\t\\tint128 _feeMargin = _threshold - _bal;\\n\\n\\t\\t\\t\\tfee_ = _feeMargin.mul(_delta);\\n\\t\\t\\t\\tfee_ = fee_.div(_ideal);\\n\\n\\t\\t\\t\\tif (fee_ > MAX) fee_ = MAX;\\n\\n\\t\\t\\t\\tfee_ = fee_.mul(_feeMargin);\\n\\t\\t\\t} else fee_ = 0;\\n\\t\\t} else {\\n\\t\\t\\tint128 _threshold = _ideal.mul(ONE + _beta);\\n\\n\\t\\t\\tif (_bal > _threshold) {\\n\\t\\t\\t\\tint128 _feeMargin = _bal - _threshold;\\n\\n\\t\\t\\t\\tfee_ = _feeMargin.mul(_delta);\\n\\t\\t\\t\\tfee_ = fee_.div(_ideal);\\n\\n\\t\\t\\t\\tif (fee_ > MAX) fee_ = MAX;\\n\\n\\t\\t\\t\\tfee_ = fee_.mul(_feeMargin);\\n\\t\\t\\t} else fee_ = 0;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction calculateTrade(\\n\\t\\tStorage.Curve storage curve,\\n\\t\\tint128 _oGLiq,\\n\\t\\tint128 _nGLiq,\\n\\t\\tint128[] memory _oBals,\\n\\t\\tint128[] memory _nBals,\\n\\t\\tint128 _inputAmt,\\n\\t\\tuint256 _outputIndex\\n\\t) internal view returns (int128 outputAmt_) {\\n\\t\\toutputAmt_ = -_inputAmt;\\n\\n\\t\\tint128 _lambda = curve.lambda;\\n\\t\\tint128[] memory _weights = curve.weights;\\n\\n\\t\\tint128 _omega = calculateFee(_oGLiq, _oBals, curve, _weights);\\n\\t\\tint128 _psi;\\n\\n\\t\\tfor (uint256 i = 0; i < 32; i++) {\\n\\t\\t\\t_psi = calculateFee(_nGLiq, _nBals, curve, _weights);\\n\\n\\t\\t\\tint128 prevAmount;\\n\\t\\t\\t{\\n\\t\\t\\t\\tprevAmount = outputAmt_;\\n\\t\\t\\t\\toutputAmt_ = _omega < _psi\\n\\t\\t\\t\\t\\t? -(_inputAmt + _omega - _psi)\\n\\t\\t\\t\\t\\t: -(_inputAmt + _lambda.mul(_omega - _psi));\\n\\t\\t\\t\\t// outputAmt_ = _omega < _psi ? -(_inputAmt + _omega - _psi) : -(_inputAmt +_omega - _psi);\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (outputAmt_ / 1e13 == prevAmount / 1e13) {\\n\\t\\t\\t\\t_nGLiq = _oGLiq + _inputAmt + outputAmt_;\\n\\n\\t\\t\\t\\t_nBals[_outputIndex] = _oBals[_outputIndex] + outputAmt_;\\n\\n\\t\\t\\t\\tenforceHalts(curve, _oGLiq, _nGLiq, _oBals, _nBals, _weights);\\n\\n\\t\\t\\t\\tenforceSwapInvariant(_oGLiq, _omega, _nGLiq, _psi);\\n\\t\\t\\t\\treturn outputAmt_;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\t_nGLiq = _oGLiq + _inputAmt + outputAmt_;\\n\\n\\t\\t\\t\\t_nBals[_outputIndex] = _oBals[_outputIndex].add(outputAmt_);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\trevert(\\\"Curve/swap-convergence-failed\\\");\\n\\t}\\n\\n\\tfunction calculateLiquidityMembrane(\\n\\t\\tStorage.Curve storage curve,\\n\\t\\tint128 _oGLiq,\\n\\t\\tint128 _nGLiq,\\n\\t\\tint128[] memory _oBals,\\n\\t\\tint128[] memory _nBals\\n\\t) internal view returns (int128 curves_) {\\n\\t\\tenforceHalts(curve, _oGLiq, _nGLiq, _oBals, _nBals, curve.weights);\\n\\n\\t\\tint128 _omega;\\n\\t\\tint128 _psi;\\n\\n\\t\\t{\\n\\t\\t\\tint128 _beta = curve.beta;\\n\\t\\t\\tint128 _delta = curve.delta;\\n\\t\\t\\tint128[] memory _weights = curve.weights;\\n\\n\\t\\t\\t_omega = calculateFee(_oGLiq, _oBals, _beta, _delta, _weights);\\n\\t\\t\\t_psi = calculateFee(_nGLiq, _nBals, _beta, _delta, _weights);\\n\\t\\t}\\n\\n\\t\\tint128 _feeDiff = _psi.sub(_omega);\\n\\t\\tint128 _liqDiff = _nGLiq.sub(_oGLiq);\\n\\t\\tint128 _oUtil = _oGLiq.sub(_omega);\\n\\t\\tint128 _totalShells = curve.totalSupply.divu(1e18);\\n\\t\\tint128 _curveMultiplier;\\n\\n\\t\\tif (_totalShells == 0) {\\n\\t\\t\\tcurves_ = _nGLiq.sub(_psi);\\n\\t\\t} else if (_feeDiff >= 0) {\\n\\t\\t\\t_curveMultiplier = _liqDiff.sub(_feeDiff).div(_oUtil);\\n\\t\\t} else {\\n\\t\\t\\t_curveMultiplier = _liqDiff.sub(curve.lambda.mul(_feeDiff));\\n\\n\\t\\t\\t_curveMultiplier = _curveMultiplier.div(_oUtil);\\n\\t\\t}\\n\\n\\t\\tif (_totalShells != 0) {\\n\\t\\t\\tcurves_ = _totalShells.mul(_curveMultiplier);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction enforceSwapInvariant(\\n\\t\\tint128 _oGLiq,\\n\\t\\tint128 _omega,\\n\\t\\tint128 _nGLiq,\\n\\t\\tint128 _psi\\n\\t) private pure {\\n\\t\\tint128 _nextUtil = _nGLiq - _psi;\\n\\n\\t\\tint128 _prevUtil = _oGLiq - _omega;\\n\\n\\t\\tint128 _diff = _nextUtil - _prevUtil;\\n\\n\\t\\trequire(\\n\\t\\t\\t0 < _diff || _diff >= MAX_DIFF,\\n\\t\\t\\t\\\"Curve/swap-invariant-violation\\\"\\n\\t\\t);\\n\\t}\\n\\n\\tfunction enforceHalts(\\n\\t\\tStorage.Curve storage curve,\\n\\t\\tint128 _oGLiq,\\n\\t\\tint128 _nGLiq,\\n\\t\\tint128[] memory _oBals,\\n\\t\\tint128[] memory _nBals,\\n\\t\\tint128[] memory _weights\\n\\t) private view {\\n\\t\\tuint256 _length = _nBals.length;\\n\\t\\tint128 _alpha = curve.alpha;\\n\\n\\t\\tfor (uint256 i = 0; i < _length; i++) {\\n\\t\\t\\tint128 _nIdeal = _nGLiq.mul(_weights[i]);\\n\\n\\t\\t\\tif (_nBals[i] > _nIdeal) {\\n\\t\\t\\t\\tint128 _upperAlpha = ONE + _alpha;\\n\\n\\t\\t\\t\\tint128 _nHalt = _nIdeal.mul(_upperAlpha);\\n\\n\\t\\t\\t\\tif (_nBals[i] > _nHalt) {\\n\\t\\t\\t\\t\\tint128 _oHalt = _oGLiq.mul(_weights[i]).mul(_upperAlpha);\\n\\n\\t\\t\\t\\t\\tif (_oBals[i] < _oHalt) revert(\\\"Curve/upper-halt\\\");\\n\\t\\t\\t\\t\\tif (_nBals[i] - _nHalt > _oBals[i] - _oHalt)\\n\\t\\t\\t\\t\\t\\trevert(\\\"Curve/upper-halt\\\");\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tint128 _lowerAlpha = ONE - _alpha;\\n\\n\\t\\t\\t\\tint128 _nHalt = _nIdeal.mul(_lowerAlpha);\\n\\n\\t\\t\\t\\tif (_nBals[i] < _nHalt) {\\n\\t\\t\\t\\t\\tint128 _oHalt = _oGLiq.mul(_weights[i]);\\n\\t\\t\\t\\t\\t_oHalt = _oHalt.mul(_lowerAlpha);\\n\\n\\t\\t\\t\\t\\tif (_oBals[i] > _oHalt) revert(\\\"Curve/lower-halt\\\");\\n\\t\\t\\t\\t\\tif (_nHalt - _nBals[i] > _oHalt - _oBals[i])\\n\\t\\t\\t\\t\\t\\trevert(\\\"Curve/lower-halt\\\");\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAssimilator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity 0.8.19;\\n\\ninterface IAssimilator {\\n\\tfunction oracleDecimals() external view returns (uint256);\\n\\n\\tfunction tokenDecimals() external view returns (uint256);\\n\\n\\tfunction getRate() external view returns (uint256);\\n\\n\\tfunction intakeRaw(uint256 amount) external returns (int128);\\n\\n\\tfunction intakeRawAndGetBalance(\\n\\t\\tuint256 amount\\n\\t) external returns (int128, int128);\\n\\n\\tfunction intakeNumeraire(int128 amount) external returns (uint256);\\n\\n\\tfunction intakeNumeraireLPRatio(\\n\\t\\tuint256,\\n\\t\\tuint256,\\n\\t\\tuint256,\\n\\t\\tuint256,\\n\\t\\tuint256,\\n\\t\\tuint256,\\n\\t\\taddress,\\n\\t\\tint128\\n\\t) external returns (uint256);\\n\\n\\tfunction outputRaw(address dst, uint256 amount) external returns (int128);\\n\\n\\tfunction outputRawAndGetBalance(\\n\\t\\taddress dst,\\n\\t\\tuint256 amount\\n\\t) external returns (int128, int128);\\n\\n\\tfunction outputNumeraire(\\n\\t\\taddress dst,\\n\\t\\tint128 amount\\n\\t) external returns (uint256);\\n\\n\\tfunction viewRawAmount(int128) external view returns (uint256);\\n\\n\\tfunction viewRawAmountLPRatio(\\n\\t\\tuint256,\\n\\t\\tuint256,\\n\\t\\taddress,\\n\\t\\tint128\\n\\t) external view returns (uint256);\\n\\n\\tfunction viewNumeraireAmount(uint256) external view returns (int128);\\n\\n\\tfunction viewNumeraireBalanceLPRatio(\\n\\t\\tuint256,\\n\\t\\tuint256,\\n\\t\\taddress\\n\\t) external view returns (int128);\\n\\n\\tfunction viewNumeraireBalance(address) external view returns (int128);\\n\\n\\tfunction viewNumeraireAmountAndBalance(\\n\\t\\taddress,\\n\\t\\tuint256\\n\\t) external view returns (int128, int128);\\n\\n\\tfunction transferFee(int128, address) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAssimilatorFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"../assimilators/AssimilatorV2.sol\\\";\\nimport \\\"../interfaces/IOracle.sol\\\";\\n\\ninterface IAssimilatorFactory {\\n\\tfunction getAssimilator(\\n\\t\\taddress _token\\n\\t) external view returns (AssimilatorV2);\\n\\n\\tfunction newAssimilator(\\n\\t\\tIOracle _oracle,\\n\\t\\taddress _token,\\n\\t\\tuint256 _tokenDecimals\\n\\t) external returns (AssimilatorV2);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IConfig.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\ninterface IConfig {\\n\\tfunction getGlobalFrozenState() external view returns (bool);\\n\\n\\tfunction getFlashableState() external view returns (bool);\\n\\n\\tfunction getProtocolFee() external view returns (int128);\\n\\n\\tfunction getProtocolTreasury() external view returns (address);\\n\\n\\tfunction setGlobalFrozen(bool) external;\\n\\n\\tfunction toggleGlobalGuarded() external;\\n\\n\\tfunction setPoolGuarded(address, bool) external;\\n\\n\\tfunction setGlobalGuardAmount(uint256) external;\\n\\n\\tfunction setPoolCap(address, uint256) external;\\n\\n\\tfunction setPoolGuardAmount(address, uint256) external;\\n\\n\\tfunction isPoolGuarded(address) external view returns (bool);\\n\\n\\tfunction getPoolGuardAmount(address) external view returns (uint256);\\n\\n\\tfunction getPoolCap(address) external view returns (uint256);\\n\\n\\tfunction setFlashable(bool) external;\\n\\n\\tfunction updateProtocolTreasury(address) external;\\n\\n\\tfunction updateProtocolFee(int128) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ICurveFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\ninterface ICurveFactory {\\n\\tfunction getProtocolFee() external view returns (int128);\\n\\n\\tfunction getProtocolTreasury() external view returns (address);\\n\\n\\tfunction getGlobalFrozenState() external view returns (bool);\\n\\n\\tfunction getFlashableState() external view returns (bool);\\n\\n\\tfunction isPoolGuarded(address pool) external view returns (bool);\\n\\n\\tfunction getPoolGuardAmount(address pool) external view returns (uint256);\\n\\n\\tfunction getPoolCap(address pool) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC20Detailed.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IERC20Detailed is IERC20 {\\n\\tfunction name() external returns (string memory);\\n\\n\\tfunction symbol() external returns (string memory);\\n\\n\\tfunction decimals() external returns (uint8);\\n\\n\\tfunction mint(address account, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFlashCallback.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\ninterface IFlashCallback {\\n\\tfunction flashCallback(\\n\\t\\tuint256 fee0,\\n\\t\\tuint256 fee1,\\n\\t\\tbytes calldata data\\n\\t) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFreeFromUpTo.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity 0.8.19;\\n\\ninterface IFreeFromUpTo {\\n\\tfunction freeFromUpTo(\\n\\t\\taddress from,\\n\\t\\tuint256 value\\n\\t) external returns (uint256 freed);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity 0.8.19;\\n\\ninterface IOracle {\\n\\tfunction acceptOwnership() external;\\n\\n\\tfunction accessController() external view returns (address);\\n\\n\\tfunction aggregator() external view returns (address);\\n\\n\\tfunction confirmAggregator(address _aggregator) external;\\n\\n\\tfunction decimals() external view returns (uint8);\\n\\n\\tfunction description() external view returns (string memory);\\n\\n\\tfunction getAnswer(uint256 _roundId) external view returns (int256);\\n\\n\\tfunction getRoundData(\\n\\t\\tuint80 _roundId\\n\\t)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tuint80 roundId,\\n\\t\\t\\tint256 answer,\\n\\t\\t\\tuint256 startedAt,\\n\\t\\t\\tuint256 updatedAt,\\n\\t\\t\\tuint80 answeredInRound\\n\\t\\t);\\n\\n\\tfunction getTimestamp(uint256 _roundId) external view returns (uint256);\\n\\n\\tfunction latestAnswer() external view returns (int256);\\n\\n\\tfunction latestRound() external view returns (uint256);\\n\\n\\tfunction latestRoundData()\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tuint80 roundId,\\n\\t\\t\\tint256 answer,\\n\\t\\t\\tuint256 startedAt,\\n\\t\\t\\tuint256 updatedAt,\\n\\t\\t\\tuint80 answeredInRound\\n\\t\\t);\\n\\n\\tfunction latestTimestamp() external view returns (uint256);\\n\\n\\tfunction owner() external view returns (address);\\n\\n\\tfunction phaseAggregators(uint16) external view returns (address);\\n\\n\\tfunction phaseId() external view returns (uint16);\\n\\n\\tfunction proposeAggregator(address _aggregator) external;\\n\\n\\tfunction proposedAggregator() external view returns (address);\\n\\n\\tfunction proposedGetRoundData(\\n\\t\\tuint80 _roundId\\n\\t)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tuint80 roundId,\\n\\t\\t\\tint256 answer,\\n\\t\\t\\tuint256 startedAt,\\n\\t\\t\\tuint256 updatedAt,\\n\\t\\t\\tuint80 answeredInRound\\n\\t\\t);\\n\\n\\tfunction proposedLatestRoundData()\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tuint80 roundId,\\n\\t\\t\\tint256 answer,\\n\\t\\t\\tuint256 startedAt,\\n\\t\\t\\tuint256 updatedAt,\\n\\t\\t\\tuint80 answeredInRound\\n\\t\\t);\\n\\n\\tfunction setController(address _accessController) external;\\n\\n\\tfunction transferOwnership(address _to) external;\\n\\n\\tfunction version() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/lib/ABDKMath64x64.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-4-Clause\\n/*\\n * ABDK Math 64.64 Smart Contract Library.  Copyright \u00a9 2019 by ABDK Consulting.\\n * Author: Mikhail Vladimirov <mikhail.vladimirov@gmail.com>\\n */\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * Smart contract library of mathematical functions operating with signed\\n * 64.64-bit fixed point numbers.  Signed 64.64-bit fixed point number is\\n * basically a simple fraction whose numerator is signed 128-bit integer and\\n * denominator is 2^64.  As long as denominator is always the same, there is no\\n * need to store it, thus in Solidity signed 64.64-bit fixed point numbers are\\n * represented by int128 type holding only the numerator.\\n */\\nlibrary ABDKMath64x64 {\\n\\t/*\\n\\t * Minimum value signed 64.64-bit fixed point number may have.\\n\\t */\\n\\tint128 private constant MIN_64x64 = -0x80000000000000000000000000000000;\\n\\n\\t/*\\n\\t * Maximum value signed 64.64-bit fixed point number may have.\\n\\t */\\n\\tint128 private constant MAX_64x64 = 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n\\t/**\\n\\t * Convert signed 256-bit integer number into signed 64.64-bit fixed point\\n\\t * number.  Revert on overflow.\\n\\t *\\n\\t * @param x signed 256-bit integer number\\n\\t * @return signed 64.64-bit fixed point number\\n\\t */\\n\\tfunction fromInt(int256 x) internal pure returns (int128) {\\n\\t\\tunchecked {\\n\\t\\t\\trequire(x >= -0x8000000000000000 && x <= 0x7FFFFFFFFFFFFFFF);\\n\\t\\t\\treturn int128(x << 64);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Convert signed 64.64 fixed point number into signed 64-bit integer number\\n\\t * rounding down.\\n\\t *\\n\\t * @param x signed 64.64-bit fixed point number\\n\\t * @return signed 64-bit integer number\\n\\t */\\n\\tfunction toInt(int128 x) internal pure returns (int64) {\\n\\t\\tunchecked {\\n\\t\\t\\treturn int64(x >> 64);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Convert unsigned 256-bit integer number into signed 64.64-bit fixed point\\n\\t * number.  Revert on overflow.\\n\\t *\\n\\t * @param x unsigned 256-bit integer number\\n\\t * @return signed 64.64-bit fixed point number\\n\\t */\\n\\tfunction fromUInt(uint256 x) internal pure returns (int128) {\\n\\t\\tunchecked {\\n\\t\\t\\trequire(x <= 0x7FFFFFFFFFFFFFFF);\\n\\t\\t\\treturn int128(int256(x << 64));\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Convert signed 64.64 fixed point number into unsigned 64-bit integer\\n\\t * number rounding down.  Revert on underflow.\\n\\t *\\n\\t * @param x signed 64.64-bit fixed point number\\n\\t * @return unsigned 64-bit integer number\\n\\t */\\n\\tfunction toUInt(int128 x) internal pure returns (uint64) {\\n\\t\\tunchecked {\\n\\t\\t\\trequire(x >= 0);\\n\\t\\t\\treturn uint64(uint128(x >> 64));\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Convert signed 128.128 fixed point number into signed 64.64-bit fixed point\\n\\t * number rounding down.  Revert on overflow.\\n\\t *\\n\\t * @param x signed 128.128-bin fixed point number\\n\\t * @return signed 64.64-bit fixed point number\\n\\t */\\n\\tfunction from128x128(int256 x) internal pure returns (int128) {\\n\\t\\tunchecked {\\n\\t\\t\\tint256 result = x >> 64;\\n\\t\\t\\trequire(result >= MIN_64x64 && result <= MAX_64x64);\\n\\t\\t\\treturn int128(result);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Convert signed 64.64 fixed point number into signed 128.128 fixed point\\n\\t * number.\\n\\t *\\n\\t * @param x signed 64.64-bit fixed point number\\n\\t * @return signed 128.128 fixed point number\\n\\t */\\n\\tfunction to128x128(int128 x) internal pure returns (int256) {\\n\\t\\tunchecked {\\n\\t\\t\\treturn int256(x) << 64;\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Calculate x + y.  Revert on overflow.\\n\\t *\\n\\t * @param x signed 64.64-bit fixed point number\\n\\t * @param y signed 64.64-bit fixed point number\\n\\t * @return signed 64.64-bit fixed point number\\n\\t */\\n\\tfunction add(int128 x, int128 y) internal pure returns (int128) {\\n\\t\\tunchecked {\\n\\t\\t\\tint256 result = int256(x) + y;\\n\\t\\t\\trequire(result >= MIN_64x64 && result <= MAX_64x64);\\n\\t\\t\\treturn int128(result);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Calculate x - y.  Revert on overflow.\\n\\t *\\n\\t * @param x signed 64.64-bit fixed point number\\n\\t * @param y signed 64.64-bit fixed point number\\n\\t * @return signed 64.64-bit fixed point number\\n\\t */\\n\\tfunction sub(int128 x, int128 y) internal pure returns (int128) {\\n\\t\\tunchecked {\\n\\t\\t\\tint256 result = int256(x) - y;\\n\\t\\t\\trequire(result >= MIN_64x64 && result <= MAX_64x64);\\n\\t\\t\\treturn int128(result);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Calculate x * y rounding down.  Revert on overflow.\\n\\t *\\n\\t * @param x signed 64.64-bit fixed point number\\n\\t * @param y signed 64.64-bit fixed point number\\n\\t * @return signed 64.64-bit fixed point number\\n\\t */\\n\\tfunction mul(int128 x, int128 y) internal pure returns (int128) {\\n\\t\\tunchecked {\\n\\t\\t\\tint256 result = (int256(x) * y) >> 64;\\n\\t\\t\\trequire(result >= MIN_64x64 && result <= MAX_64x64);\\n\\t\\t\\treturn int128(result);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Calculate x * y rounding towards zero, where x is signed 64.64 fixed point\\n\\t * number and y is signed 256-bit integer number.  Revert on overflow.\\n\\t *\\n\\t * @param x signed 64.64 fixed point number\\n\\t * @param y signed 256-bit integer number\\n\\t * @return signed 256-bit integer number\\n\\t */\\n\\tfunction muli(int128 x, int256 y) internal pure returns (int256) {\\n\\t\\tunchecked {\\n\\t\\t\\tif (x == MIN_64x64) {\\n\\t\\t\\t\\trequire(\\n\\t\\t\\t\\t\\ty >= -0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF &&\\n\\t\\t\\t\\t\\t\\ty <= 0x1000000000000000000000000000000000000000000000000\\n\\t\\t\\t\\t);\\n\\t\\t\\t\\treturn -y << 63;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tbool negativeResult = false;\\n\\t\\t\\t\\tif (x < 0) {\\n\\t\\t\\t\\t\\tx = -x;\\n\\t\\t\\t\\t\\tnegativeResult = true;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (y < 0) {\\n\\t\\t\\t\\t\\ty = -y; // We rely on overflow behavior here\\n\\t\\t\\t\\t\\tnegativeResult = !negativeResult;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tuint256 absoluteResult = mulu(x, uint256(y));\\n\\t\\t\\t\\tif (negativeResult) {\\n\\t\\t\\t\\t\\trequire(\\n\\t\\t\\t\\t\\t\\tabsoluteResult <=\\n\\t\\t\\t\\t\\t\\t\\t0x8000000000000000000000000000000000000000000000000000000000000000\\n\\t\\t\\t\\t\\t);\\n\\t\\t\\t\\t\\treturn -int256(absoluteResult); // We rely on overflow behavior here\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\trequire(\\n\\t\\t\\t\\t\\t\\tabsoluteResult <=\\n\\t\\t\\t\\t\\t\\t\\t0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n\\t\\t\\t\\t\\t);\\n\\t\\t\\t\\t\\treturn int256(absoluteResult);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Calculate x * y rounding down, where x is signed 64.64 fixed point number\\n\\t * and y is unsigned 256-bit integer number.  Revert on overflow.\\n\\t *\\n\\t * @param x signed 64.64 fixed point number\\n\\t * @param y unsigned 256-bit integer number\\n\\t * @return unsigned 256-bit integer number\\n\\t */\\n\\tfunction mulu(int128 x, uint256 y) internal pure returns (uint256) {\\n\\t\\tunchecked {\\n\\t\\t\\tif (y == 0) return 0;\\n\\n\\t\\t\\trequire(x >= 0);\\n\\n\\t\\t\\tuint256 lo = (uint256(int256(x)) *\\n\\t\\t\\t\\t(y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)) >> 64;\\n\\t\\t\\tuint256 hi = uint256(int256(x)) * (y >> 128);\\n\\n\\t\\t\\trequire(hi <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n\\t\\t\\thi <<= 64;\\n\\n\\t\\t\\trequire(\\n\\t\\t\\t\\thi <=\\n\\t\\t\\t\\t\\t0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF -\\n\\t\\t\\t\\t\\t\\tlo\\n\\t\\t\\t);\\n\\t\\t\\treturn hi + lo;\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Calculate x / y rounding towards zero.  Revert on overflow or when y is\\n\\t * zero.\\n\\t *\\n\\t * @param x signed 64.64-bit fixed point number\\n\\t * @param y signed 64.64-bit fixed point number\\n\\t * @return signed 64.64-bit fixed point number\\n\\t */\\n\\tfunction div(int128 x, int128 y) internal pure returns (int128) {\\n\\t\\tunchecked {\\n\\t\\t\\trequire(y != 0);\\n\\t\\t\\tint256 result = (int256(x) << 64) / y;\\n\\t\\t\\trequire(result >= MIN_64x64 && result <= MAX_64x64);\\n\\t\\t\\treturn int128(result);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Calculate x / y rounding towards zero, where x and y are signed 256-bit\\n\\t * integer numbers.  Revert on overflow or when y is zero.\\n\\t *\\n\\t * @param x signed 256-bit integer number\\n\\t * @param y signed 256-bit integer number\\n\\t * @return signed 64.64-bit fixed point number\\n\\t */\\n\\tfunction divi(int256 x, int256 y) internal pure returns (int128) {\\n\\t\\tunchecked {\\n\\t\\t\\trequire(y != 0);\\n\\n\\t\\t\\tbool negativeResult = false;\\n\\t\\t\\tif (x < 0) {\\n\\t\\t\\t\\tx = -x; // We rely on overflow behavior here\\n\\t\\t\\t\\tnegativeResult = true;\\n\\t\\t\\t}\\n\\t\\t\\tif (y < 0) {\\n\\t\\t\\t\\ty = -y; // We rely on overflow behavior here\\n\\t\\t\\t\\tnegativeResult = !negativeResult;\\n\\t\\t\\t}\\n\\t\\t\\tuint128 absoluteResult = divuu(uint256(x), uint256(y));\\n\\t\\t\\tif (negativeResult) {\\n\\t\\t\\t\\trequire(absoluteResult <= 0x80000000000000000000000000000000);\\n\\t\\t\\t\\treturn -int128(absoluteResult); // We rely on overflow behavior here\\n\\t\\t\\t} else {\\n\\t\\t\\t\\trequire(absoluteResult <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n\\t\\t\\t\\treturn int128(absoluteResult); // We rely on overflow behavior here\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\\n\\t * integer numbers.  Revert on overflow or when y is zero.\\n\\t *\\n\\t * @param x unsigned 256-bit integer number\\n\\t * @param y unsigned 256-bit integer number\\n\\t * @return signed 64.64-bit fixed point number\\n\\t */\\n\\tfunction divu(uint256 x, uint256 y) internal pure returns (int128) {\\n\\t\\tunchecked {\\n\\t\\t\\trequire(y != 0);\\n\\t\\t\\tuint128 result = divuu(x, y);\\n\\t\\t\\trequire(result <= uint128(MAX_64x64));\\n\\t\\t\\treturn int128(result);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Calculate -x.  Revert on overflow.\\n\\t *\\n\\t * @param x signed 64.64-bit fixed point number\\n\\t * @return signed 64.64-bit fixed point number\\n\\t */\\n\\tfunction neg(int128 x) internal pure returns (int128) {\\n\\t\\tunchecked {\\n\\t\\t\\trequire(x != MIN_64x64);\\n\\t\\t\\treturn -x;\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Calculate |x|.  Revert on overflow.\\n\\t *\\n\\t * @param x signed 64.64-bit fixed point number\\n\\t * @return signed 64.64-bit fixed point number\\n\\t */\\n\\tfunction abs(int128 x) internal pure returns (int128) {\\n\\t\\tunchecked {\\n\\t\\t\\trequire(x != MIN_64x64);\\n\\t\\t\\treturn x < 0 ? -x : x;\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Calculate 1 / x rounding towards zero.  Revert on overflow or when x is\\n\\t * zero.\\n\\t *\\n\\t * @param x signed 64.64-bit fixed point number\\n\\t * @return signed 64.64-bit fixed point number\\n\\t */\\n\\tfunction inv(int128 x) internal pure returns (int128) {\\n\\t\\tunchecked {\\n\\t\\t\\trequire(x != 0);\\n\\t\\t\\tint256 result = int256(0x100000000000000000000000000000000) / x;\\n\\t\\t\\trequire(result >= MIN_64x64 && result <= MAX_64x64);\\n\\t\\t\\treturn int128(result);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Calculate arithmetics average of x and y, i.e. (x + y) / 2 rounding down.\\n\\t *\\n\\t * @param x signed 64.64-bit fixed point number\\n\\t * @param y signed 64.64-bit fixed point number\\n\\t * @return signed 64.64-bit fixed point number\\n\\t */\\n\\tfunction avg(int128 x, int128 y) internal pure returns (int128) {\\n\\t\\tunchecked {\\n\\t\\t\\treturn int128((int256(x) + int256(y)) >> 1);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Calculate geometric average of x and y, i.e. sqrt (x * y) rounding down.\\n\\t * Revert on overflow or in case x * y is negative.\\n\\t *\\n\\t * @param x signed 64.64-bit fixed point number\\n\\t * @param y signed 64.64-bit fixed point number\\n\\t * @return signed 64.64-bit fixed point number\\n\\t */\\n\\tfunction gavg(int128 x, int128 y) internal pure returns (int128) {\\n\\t\\tunchecked {\\n\\t\\t\\tint256 m = int256(x) * int256(y);\\n\\t\\t\\trequire(m >= 0);\\n\\t\\t\\trequire(\\n\\t\\t\\t\\tm <\\n\\t\\t\\t\\t\\t0x4000000000000000000000000000000000000000000000000000000000000000\\n\\t\\t\\t);\\n\\t\\t\\treturn int128(sqrtu(uint256(m)));\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Calculate x^y assuming 0^0 is 1, where x is signed 64.64 fixed point number\\n\\t * and y is unsigned 256-bit integer number.  Revert on overflow.\\n\\t *\\n\\t * @param x signed 64.64-bit fixed point number\\n\\t * @param y uint256 value\\n\\t * @return signed 64.64-bit fixed point number\\n\\t */\\n\\tfunction pow(int128 x, uint256 y) internal pure returns (int128) {\\n\\t\\tunchecked {\\n\\t\\t\\tbool negative = x < 0 && y & 1 == 1;\\n\\n\\t\\t\\tuint256 absX = uint128(x < 0 ? -x : x);\\n\\t\\t\\tuint256 absResult;\\n\\t\\t\\tabsResult = 0x100000000000000000000000000000000;\\n\\n\\t\\t\\tif (absX <= 0x10000000000000000) {\\n\\t\\t\\t\\tabsX <<= 63;\\n\\t\\t\\t\\twhile (y != 0) {\\n\\t\\t\\t\\t\\tif (y & 0x1 != 0) {\\n\\t\\t\\t\\t\\t\\tabsResult = (absResult * absX) >> 127;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tabsX = (absX * absX) >> 127;\\n\\n\\t\\t\\t\\t\\tif (y & 0x2 != 0) {\\n\\t\\t\\t\\t\\t\\tabsResult = (absResult * absX) >> 127;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tabsX = (absX * absX) >> 127;\\n\\n\\t\\t\\t\\t\\tif (y & 0x4 != 0) {\\n\\t\\t\\t\\t\\t\\tabsResult = (absResult * absX) >> 127;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tabsX = (absX * absX) >> 127;\\n\\n\\t\\t\\t\\t\\tif (y & 0x8 != 0) {\\n\\t\\t\\t\\t\\t\\tabsResult = (absResult * absX) >> 127;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tabsX = (absX * absX) >> 127;\\n\\n\\t\\t\\t\\t\\ty >>= 4;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tabsResult >>= 64;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tuint256 absXShift = 63;\\n\\t\\t\\t\\tif (absX < 0x1000000000000000000000000) {\\n\\t\\t\\t\\t\\tabsX <<= 32;\\n\\t\\t\\t\\t\\tabsXShift -= 32;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (absX < 0x10000000000000000000000000000) {\\n\\t\\t\\t\\t\\tabsX <<= 16;\\n\\t\\t\\t\\t\\tabsXShift -= 16;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (absX < 0x1000000000000000000000000000000) {\\n\\t\\t\\t\\t\\tabsX <<= 8;\\n\\t\\t\\t\\t\\tabsXShift -= 8;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (absX < 0x10000000000000000000000000000000) {\\n\\t\\t\\t\\t\\tabsX <<= 4;\\n\\t\\t\\t\\t\\tabsXShift -= 4;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (absX < 0x40000000000000000000000000000000) {\\n\\t\\t\\t\\t\\tabsX <<= 2;\\n\\t\\t\\t\\t\\tabsXShift -= 2;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (absX < 0x80000000000000000000000000000000) {\\n\\t\\t\\t\\t\\tabsX <<= 1;\\n\\t\\t\\t\\t\\tabsXShift -= 1;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tuint256 resultShift = 0;\\n\\t\\t\\t\\twhile (y != 0) {\\n\\t\\t\\t\\t\\trequire(absXShift < 64);\\n\\n\\t\\t\\t\\t\\tif (y & 0x1 != 0) {\\n\\t\\t\\t\\t\\t\\tabsResult = (absResult * absX) >> 127;\\n\\t\\t\\t\\t\\t\\tresultShift += absXShift;\\n\\t\\t\\t\\t\\t\\tif (absResult > 0x100000000000000000000000000000000) {\\n\\t\\t\\t\\t\\t\\t\\tabsResult >>= 1;\\n\\t\\t\\t\\t\\t\\t\\tresultShift += 1;\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tabsX = (absX * absX) >> 127;\\n\\t\\t\\t\\t\\tabsXShift <<= 1;\\n\\t\\t\\t\\t\\tif (absX >= 0x100000000000000000000000000000000) {\\n\\t\\t\\t\\t\\t\\tabsX >>= 1;\\n\\t\\t\\t\\t\\t\\tabsXShift += 1;\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\ty >>= 1;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\trequire(resultShift < 64);\\n\\t\\t\\t\\tabsResult >>= 64 - resultShift;\\n\\t\\t\\t}\\n\\t\\t\\tint256 result = negative ? -int256(absResult) : int256(absResult);\\n\\t\\t\\trequire(result >= MIN_64x64 && result <= MAX_64x64);\\n\\t\\t\\treturn int128(result);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Calculate sqrt (x) rounding down.  Revert if x < 0.\\n\\t *\\n\\t * @param x signed 64.64-bit fixed point number\\n\\t * @return signed 64.64-bit fixed point number\\n\\t */\\n\\tfunction sqrt(int128 x) internal pure returns (int128) {\\n\\t\\tunchecked {\\n\\t\\t\\trequire(x >= 0);\\n\\t\\t\\treturn int128(sqrtu(uint256(int256(x)) << 64));\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Calculate binary logarithm of x.  Revert if x <= 0.\\n\\t *\\n\\t * @param x signed 64.64-bit fixed point number\\n\\t * @return signed 64.64-bit fixed point number\\n\\t */\\n\\tfunction log_2(int128 x) internal pure returns (int128) {\\n\\t\\tunchecked {\\n\\t\\t\\trequire(x > 0);\\n\\n\\t\\t\\tint256 msb = 0;\\n\\t\\t\\tint256 xc = x;\\n\\t\\t\\tif (xc >= 0x10000000000000000) {\\n\\t\\t\\t\\txc >>= 64;\\n\\t\\t\\t\\tmsb += 64;\\n\\t\\t\\t}\\n\\t\\t\\tif (xc >= 0x100000000) {\\n\\t\\t\\t\\txc >>= 32;\\n\\t\\t\\t\\tmsb += 32;\\n\\t\\t\\t}\\n\\t\\t\\tif (xc >= 0x10000) {\\n\\t\\t\\t\\txc >>= 16;\\n\\t\\t\\t\\tmsb += 16;\\n\\t\\t\\t}\\n\\t\\t\\tif (xc >= 0x100) {\\n\\t\\t\\t\\txc >>= 8;\\n\\t\\t\\t\\tmsb += 8;\\n\\t\\t\\t}\\n\\t\\t\\tif (xc >= 0x10) {\\n\\t\\t\\t\\txc >>= 4;\\n\\t\\t\\t\\tmsb += 4;\\n\\t\\t\\t}\\n\\t\\t\\tif (xc >= 0x4) {\\n\\t\\t\\t\\txc >>= 2;\\n\\t\\t\\t\\tmsb += 2;\\n\\t\\t\\t}\\n\\t\\t\\tif (xc >= 0x2) msb += 1; // No need to shift xc anymore\\n\\n\\t\\t\\tint256 result = (msb - 64) << 64;\\n\\t\\t\\tuint256 ux = uint256(int256(x)) << uint256(127 - msb);\\n\\t\\t\\tfor (int256 bit = 0x8000000000000000; bit > 0; bit >>= 1) {\\n\\t\\t\\t\\tux *= ux;\\n\\t\\t\\t\\tuint256 b = ux >> 255;\\n\\t\\t\\t\\tux >>= 127 + b;\\n\\t\\t\\t\\tresult += bit * int256(b);\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn int128(result);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Calculate natural logarithm of x.  Revert if x <= 0.\\n\\t *\\n\\t * @param x signed 64.64-bit fixed point number\\n\\t * @return signed 64.64-bit fixed point number\\n\\t */\\n\\tfunction ln(int128 x) internal pure returns (int128) {\\n\\t\\tunchecked {\\n\\t\\t\\trequire(x > 0);\\n\\n\\t\\t\\treturn\\n\\t\\t\\t\\tint128(\\n\\t\\t\\t\\t\\tint256(\\n\\t\\t\\t\\t\\t\\t(uint256(int256(log_2(x))) *\\n\\t\\t\\t\\t\\t\\t\\t0xB17217F7D1CF79ABC9E3B39803F2F6AF) >> 128\\n\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Calculate binary exponent of x.  Revert on overflow.\\n\\t *\\n\\t * @param x signed 64.64-bit fixed point number\\n\\t * @return signed 64.64-bit fixed point number\\n\\t */\\n\\tfunction exp_2(int128 x) internal pure returns (int128) {\\n\\t\\tunchecked {\\n\\t\\t\\trequire(x < 0x400000000000000000); // Overflow\\n\\n\\t\\t\\tif (x < -0x400000000000000000) return 0; // Underflow\\n\\n\\t\\t\\tuint256 result = 0x80000000000000000000000000000000;\\n\\n\\t\\t\\tif (x & 0x8000000000000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x16A09E667F3BCC908B2FB1366EA957D3E) >> 128;\\n\\t\\t\\tif (x & 0x4000000000000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x1306FE0A31B7152DE8D5A46305C85EDEC) >> 128;\\n\\t\\t\\tif (x & 0x2000000000000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x1172B83C7D517ADCDF7C8C50EB14A791F) >> 128;\\n\\t\\t\\tif (x & 0x1000000000000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x10B5586CF9890F6298B92B71842A98363) >> 128;\\n\\t\\t\\tif (x & 0x800000000000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x1059B0D31585743AE7C548EB68CA417FD) >> 128;\\n\\t\\t\\tif (x & 0x400000000000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x102C9A3E778060EE6F7CACA4F7A29BDE8) >> 128;\\n\\t\\t\\tif (x & 0x200000000000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x10163DA9FB33356D84A66AE336DCDFA3F) >> 128;\\n\\t\\t\\tif (x & 0x100000000000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x100B1AFA5ABCBED6129AB13EC11DC9543) >> 128;\\n\\t\\t\\tif (x & 0x80000000000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x10058C86DA1C09EA1FF19D294CF2F679B) >> 128;\\n\\t\\t\\tif (x & 0x40000000000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x1002C605E2E8CEC506D21BFC89A23A00F) >> 128;\\n\\t\\t\\tif (x & 0x20000000000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x100162F3904051FA128BCA9C55C31E5DF) >> 128;\\n\\t\\t\\tif (x & 0x10000000000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x1000B175EFFDC76BA38E31671CA939725) >> 128;\\n\\t\\t\\tif (x & 0x8000000000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x100058BA01FB9F96D6CACD4B180917C3D) >> 128;\\n\\t\\t\\tif (x & 0x4000000000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x10002C5CC37DA9491D0985C348C68E7B3) >> 128;\\n\\t\\t\\tif (x & 0x2000000000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x1000162E525EE054754457D5995292026) >> 128;\\n\\t\\t\\tif (x & 0x1000000000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x10000B17255775C040618BF4A4ADE83FC) >> 128;\\n\\t\\t\\tif (x & 0x800000000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x1000058B91B5BC9AE2EED81E9B7D4CFAB) >> 128;\\n\\t\\t\\tif (x & 0x400000000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x100002C5C89D5EC6CA4D7C8ACC017B7C9) >> 128;\\n\\t\\t\\tif (x & 0x200000000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x10000162E43F4F831060E02D839A9D16D) >> 128;\\n\\t\\t\\tif (x & 0x100000000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x100000B1721BCFC99D9F890EA06911763) >> 128;\\n\\t\\t\\tif (x & 0x80000000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x10000058B90CF1E6D97F9CA14DBCC1628) >> 128;\\n\\t\\t\\tif (x & 0x40000000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x1000002C5C863B73F016468F6BAC5CA2B) >> 128;\\n\\t\\t\\tif (x & 0x20000000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x100000162E430E5A18F6119E3C02282A5) >> 128;\\n\\t\\t\\tif (x & 0x10000000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x1000000B1721835514B86E6D96EFD1BFE) >> 128;\\n\\t\\t\\tif (x & 0x8000000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x100000058B90C0B48C6BE5DF846C5B2EF) >> 128;\\n\\t\\t\\tif (x & 0x4000000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x10000002C5C8601CC6B9E94213C72737A) >> 128;\\n\\t\\t\\tif (x & 0x2000000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x1000000162E42FFF037DF38AA2B219F06) >> 128;\\n\\t\\t\\tif (x & 0x1000000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x10000000B17217FBA9C739AA5819F44F9) >> 128;\\n\\t\\t\\tif (x & 0x800000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x1000000058B90BFCDEE5ACD3C1CEDC823) >> 128;\\n\\t\\t\\tif (x & 0x400000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x100000002C5C85FE31F35A6A30DA1BE50) >> 128;\\n\\t\\t\\tif (x & 0x200000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x10000000162E42FF0999CE3541B9FFFCF) >> 128;\\n\\t\\t\\tif (x & 0x100000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x100000000B17217F80F4EF5AADDA45554) >> 128;\\n\\t\\t\\tif (x & 0x80000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x10000000058B90BFBF8479BD5A81B51AD) >> 128;\\n\\t\\t\\tif (x & 0x40000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x1000000002C5C85FDF84BD62AE30A74CC) >> 128;\\n\\t\\t\\tif (x & 0x20000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x100000000162E42FEFB2FED257559BDAA) >> 128;\\n\\t\\t\\tif (x & 0x10000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x1000000000B17217F7D5A7716BBA4A9AE) >> 128;\\n\\t\\t\\tif (x & 0x8000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x100000000058B90BFBE9DDBAC5E109CCE) >> 128;\\n\\t\\t\\tif (x & 0x4000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x10000000002C5C85FDF4B15DE6F17EB0D) >> 128;\\n\\t\\t\\tif (x & 0x2000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x1000000000162E42FEFA494F1478FDE05) >> 128;\\n\\t\\t\\tif (x & 0x1000000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x10000000000B17217F7D20CF927C8E94C) >> 128;\\n\\t\\t\\tif (x & 0x800000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x1000000000058B90BFBE8F71CB4E4B33D) >> 128;\\n\\t\\t\\tif (x & 0x400000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x100000000002C5C85FDF477B662B26945) >> 128;\\n\\t\\t\\tif (x & 0x200000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x10000000000162E42FEFA3AE53369388C) >> 128;\\n\\t\\t\\tif (x & 0x100000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x100000000000B17217F7D1D351A389D40) >> 128;\\n\\t\\t\\tif (x & 0x80000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x10000000000058B90BFBE8E8B2D3D4EDE) >> 128;\\n\\t\\t\\tif (x & 0x40000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x1000000000002C5C85FDF4741BEA6E77E) >> 128;\\n\\t\\t\\tif (x & 0x20000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x100000000000162E42FEFA39FE95583C2) >> 128;\\n\\t\\t\\tif (x & 0x10000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x1000000000000B17217F7D1CFB72B45E1) >> 128;\\n\\t\\t\\tif (x & 0x8000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x100000000000058B90BFBE8E7CC35C3F0) >> 128;\\n\\t\\t\\tif (x & 0x4000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x10000000000002C5C85FDF473E242EA38) >> 128;\\n\\t\\t\\tif (x & 0x2000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x1000000000000162E42FEFA39F02B772C) >> 128;\\n\\t\\t\\tif (x & 0x1000 > 0)\\n\\t\\t\\t\\tresult = (result * 0x10000000000000B17217F7D1CF7D83C1A) >> 128;\\n\\t\\t\\tif (x & 0x800 > 0)\\n\\t\\t\\t\\tresult = (result * 0x1000000000000058B90BFBE8E7BDCBE2E) >> 128;\\n\\t\\t\\tif (x & 0x400 > 0)\\n\\t\\t\\t\\tresult = (result * 0x100000000000002C5C85FDF473DEA871F) >> 128;\\n\\t\\t\\tif (x & 0x200 > 0)\\n\\t\\t\\t\\tresult = (result * 0x10000000000000162E42FEFA39EF44D91) >> 128;\\n\\t\\t\\tif (x & 0x100 > 0)\\n\\t\\t\\t\\tresult = (result * 0x100000000000000B17217F7D1CF79E949) >> 128;\\n\\t\\t\\tif (x & 0x80 > 0)\\n\\t\\t\\t\\tresult = (result * 0x10000000000000058B90BFBE8E7BCE544) >> 128;\\n\\t\\t\\tif (x & 0x40 > 0)\\n\\t\\t\\t\\tresult = (result * 0x1000000000000002C5C85FDF473DE6ECA) >> 128;\\n\\t\\t\\tif (x & 0x20 > 0)\\n\\t\\t\\t\\tresult = (result * 0x100000000000000162E42FEFA39EF366F) >> 128;\\n\\t\\t\\tif (x & 0x10 > 0)\\n\\t\\t\\t\\tresult = (result * 0x1000000000000000B17217F7D1CF79AFA) >> 128;\\n\\t\\t\\tif (x & 0x8 > 0)\\n\\t\\t\\t\\tresult = (result * 0x100000000000000058B90BFBE8E7BCD6D) >> 128;\\n\\t\\t\\tif (x & 0x4 > 0)\\n\\t\\t\\t\\tresult = (result * 0x10000000000000002C5C85FDF473DE6B2) >> 128;\\n\\t\\t\\tif (x & 0x2 > 0)\\n\\t\\t\\t\\tresult = (result * 0x1000000000000000162E42FEFA39EF358) >> 128;\\n\\t\\t\\tif (x & 0x1 > 0)\\n\\t\\t\\t\\tresult = (result * 0x10000000000000000B17217F7D1CF79AB) >> 128;\\n\\n\\t\\t\\tresult >>= uint256(int256(63 - (x >> 64)));\\n\\t\\t\\trequire(result <= uint256(int256(MAX_64x64)));\\n\\n\\t\\t\\treturn int128(int256(result));\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Calculate natural exponent of x.  Revert on overflow.\\n\\t *\\n\\t * @param x signed 64.64-bit fixed point number\\n\\t * @return signed 64.64-bit fixed point number\\n\\t */\\n\\tfunction exp(int128 x) internal pure returns (int128) {\\n\\t\\tunchecked {\\n\\t\\t\\trequire(x < 0x400000000000000000); // Overflow\\n\\n\\t\\t\\tif (x < -0x400000000000000000) return 0; // Underflow\\n\\n\\t\\t\\treturn\\n\\t\\t\\t\\texp_2(\\n\\t\\t\\t\\t\\tint128(\\n\\t\\t\\t\\t\\t\\t(int256(x) * 0x171547652B82FE1777D0FFDA0D23A7D12) >> 128\\n\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\\n\\t * integer numbers.  Revert on overflow or when y is zero.\\n\\t *\\n\\t * @param x unsigned 256-bit integer number\\n\\t * @param y unsigned 256-bit integer number\\n\\t * @return unsigned 64.64-bit fixed point number\\n\\t */\\n\\tfunction divuu(uint256 x, uint256 y) private pure returns (uint128) {\\n\\t\\tunchecked {\\n\\t\\t\\trequire(y != 0);\\n\\n\\t\\t\\tuint256 result;\\n\\n\\t\\t\\tif (x <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\\n\\t\\t\\t\\tresult = (x << 64) / y;\\n\\t\\t\\telse {\\n\\t\\t\\t\\tuint256 msb = 192;\\n\\t\\t\\t\\tuint256 xc = x >> 192;\\n\\t\\t\\t\\tif (xc >= 0x100000000) {\\n\\t\\t\\t\\t\\txc >>= 32;\\n\\t\\t\\t\\t\\tmsb += 32;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (xc >= 0x10000) {\\n\\t\\t\\t\\t\\txc >>= 16;\\n\\t\\t\\t\\t\\tmsb += 16;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (xc >= 0x100) {\\n\\t\\t\\t\\t\\txc >>= 8;\\n\\t\\t\\t\\t\\tmsb += 8;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (xc >= 0x10) {\\n\\t\\t\\t\\t\\txc >>= 4;\\n\\t\\t\\t\\t\\tmsb += 4;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (xc >= 0x4) {\\n\\t\\t\\t\\t\\txc >>= 2;\\n\\t\\t\\t\\t\\tmsb += 2;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (xc >= 0x2) msb += 1; // No need to shift xc anymore\\n\\n\\t\\t\\t\\tresult = (x << (255 - msb)) / (((y - 1) >> (msb - 191)) + 1);\\n\\t\\t\\t\\trequire(result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n\\n\\t\\t\\t\\tuint256 hi = result * (y >> 128);\\n\\t\\t\\t\\tuint256 lo = result * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n\\n\\t\\t\\t\\tuint256 xh = x >> 192;\\n\\t\\t\\t\\tuint256 xl = x << 64;\\n\\n\\t\\t\\t\\tif (xl < lo) xh -= 1;\\n\\t\\t\\t\\txl -= lo; // We rely on overflow behavior here\\n\\t\\t\\t\\tlo = hi << 128;\\n\\t\\t\\t\\tif (xl < lo) xh -= 1;\\n\\t\\t\\t\\txl -= lo; // We rely on overflow behavior here\\n\\n\\t\\t\\t\\tassert(xh == hi >> 128);\\n\\n\\t\\t\\t\\tresult += xl / y;\\n\\t\\t\\t}\\n\\n\\t\\t\\trequire(result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n\\t\\t\\treturn uint128(result);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Calculate sqrt (x) rounding down, where x is unsigned 256-bit integer\\n\\t * number.\\n\\t *\\n\\t * @param x unsigned 256-bit integer number\\n\\t * @return unsigned 128-bit integer number\\n\\t */\\n\\tfunction sqrtu(uint256 x) private pure returns (uint128) {\\n\\t\\tunchecked {\\n\\t\\t\\tif (x == 0) return 0;\\n\\t\\t\\telse {\\n\\t\\t\\t\\tuint256 xx = x;\\n\\t\\t\\t\\tuint256 r = 1;\\n\\t\\t\\t\\tif (xx >= 0x100000000000000000000000000000000) {\\n\\t\\t\\t\\t\\txx >>= 128;\\n\\t\\t\\t\\t\\tr <<= 64;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (xx >= 0x10000000000000000) {\\n\\t\\t\\t\\t\\txx >>= 64;\\n\\t\\t\\t\\t\\tr <<= 32;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (xx >= 0x100000000) {\\n\\t\\t\\t\\t\\txx >>= 32;\\n\\t\\t\\t\\t\\tr <<= 16;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (xx >= 0x10000) {\\n\\t\\t\\t\\t\\txx >>= 16;\\n\\t\\t\\t\\t\\tr <<= 8;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (xx >= 0x100) {\\n\\t\\t\\t\\t\\txx >>= 8;\\n\\t\\t\\t\\t\\tr <<= 4;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (xx >= 0x10) {\\n\\t\\t\\t\\t\\txx >>= 4;\\n\\t\\t\\t\\t\\tr <<= 2;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (xx >= 0x8) {\\n\\t\\t\\t\\t\\tr <<= 1;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tr = (r + x / r) >> 1;\\n\\t\\t\\t\\tr = (r + x / r) >> 1;\\n\\t\\t\\t\\tr = (r + x / r) >> 1;\\n\\t\\t\\t\\tr = (r + x / r) >> 1;\\n\\t\\t\\t\\tr = (r + x / r) >> 1;\\n\\t\\t\\t\\tr = (r + x / r) >> 1;\\n\\t\\t\\t\\tr = (r + x / r) >> 1; // Seven iterations should be enough\\n\\t\\t\\t\\tuint256 r1 = x / r;\\n\\t\\t\\t\\treturn uint128(r < r1 ? r : r1);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/lib/FullMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n\\t/// @notice Calculates floor(a\u00d7b\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n\\t/// @param a The multiplicand\\n\\t/// @param b The multiplier\\n\\t/// @param denominator The divisor\\n\\t/// @return result The 256-bit result\\n\\t/// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n\\tfunction mulDiv(\\n\\t\\tuint256 a,\\n\\t\\tuint256 b,\\n\\t\\tuint256 denominator\\n\\t) internal pure returns (uint256 result) {\\n\\t\\t// 512-bit multiply [prod1 prod0] = a * b\\n\\t\\t// Compute the product mod 2**256 and mod 2**256 - 1\\n\\t\\t// then use the Chinese Remainder Theorem to reconstruct\\n\\t\\t// the 512 bit result. The result is stored in two 256\\n\\t\\t// variables such that product = prod1 * 2**256 + prod0\\n\\t\\tuint256 prod0; // Least significant 256 bits of the product\\n\\t\\tuint256 prod1; // Most significant 256 bits of the product\\n\\t\\tassembly {\\n\\t\\t\\tlet mm := mulmod(a, b, not(0))\\n\\t\\t\\tprod0 := mul(a, b)\\n\\t\\t\\tprod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n\\t\\t}\\n\\n\\t\\t// Handle non-overflow cases, 256 by 256 division\\n\\t\\tif (prod1 == 0) {\\n\\t\\t\\trequire(denominator > 0);\\n\\t\\t\\tassembly {\\n\\t\\t\\t\\tresult := div(prod0, denominator)\\n\\t\\t\\t}\\n\\t\\t\\treturn result;\\n\\t\\t}\\n\\n\\t\\t// Make sure the result is less than 2**256.\\n\\t\\t// Also prevents denominator == 0\\n\\t\\trequire(denominator > prod1);\\n\\n\\t\\t///////////////////////////////////////////////\\n\\t\\t// 512 by 256 division.\\n\\t\\t///////////////////////////////////////////////\\n\\n\\t\\t// Make division exact by subtracting the remainder from [prod1 prod0]\\n\\t\\t// Compute remainder using mulmod\\n\\t\\tuint256 remainder;\\n\\t\\tassembly {\\n\\t\\t\\tremainder := mulmod(a, b, denominator)\\n\\t\\t}\\n\\t\\t// Subtract 256 bit number from 512 bit number\\n\\t\\tassembly {\\n\\t\\t\\tprod1 := sub(prod1, gt(remainder, prod0))\\n\\t\\t\\tprod0 := sub(prod0, remainder)\\n\\t\\t}\\n\\n\\t\\t// Factor powers of two out of denominator\\n\\t\\t// Compute largest power of two divisor of denominator.\\n\\t\\t// Always >= 1.\\n\\t\\tuint256 twos = denominator & (~denominator + 1);\\n\\t\\t// Divide denominator by power of two\\n\\t\\tassembly {\\n\\t\\t\\tdenominator := div(denominator, twos)\\n\\t\\t}\\n\\n\\t\\t// Divide [prod1 prod0] by the factors of two\\n\\t\\tassembly {\\n\\t\\t\\tprod0 := div(prod0, twos)\\n\\t\\t}\\n\\t\\t// Shift in bits from prod1 into prod0. For this we need\\n\\t\\t// to flip `twos` such that it is 2**256 / twos.\\n\\t\\t// If twos is zero, then it becomes one\\n\\t\\tassembly {\\n\\t\\t\\ttwos := add(div(sub(0, twos), twos), 1)\\n\\t\\t}\\n\\t\\tprod0 |= prod1 * twos;\\n\\n\\t\\t// Invert denominator mod 2**256\\n\\t\\t// Now that denominator is an odd number, it has an inverse\\n\\t\\t// modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n\\t\\t// Compute the inverse by starting with a seed that is correct\\n\\t\\t// correct for four bits. That is, denominator * inv = 1 mod 2**4\\n\\t\\tuint256 inv = (3 * denominator) ^ 2;\\n\\t\\t// Now use Newton-Raphson iteration to improve the precision.\\n\\t\\t// Thanks to Hensel's lifting lemma, this also works in modular\\n\\t\\t// arithmetic, doubling the correct bits in each step.\\n\\t\\tinv *= 2 - denominator * inv; // inverse mod 2**8\\n\\t\\tinv *= 2 - denominator * inv; // inverse mod 2**16\\n\\t\\tinv *= 2 - denominator * inv; // inverse mod 2**32\\n\\t\\tinv *= 2 - denominator * inv; // inverse mod 2**64\\n\\t\\tinv *= 2 - denominator * inv; // inverse mod 2**128\\n\\t\\tinv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n\\t\\t// Because the division is now exact we can divide by multiplying\\n\\t\\t// with the modular inverse of denominator. This will give us the\\n\\t\\t// correct result modulo 2**256. Since the precoditions guarantee\\n\\t\\t// that the outcome is less than 2**256, this is the final result.\\n\\t\\t// We don't need to compute the high bits of the result and prod1\\n\\t\\t// is no longer required.\\n\\t\\tresult = prod0 * inv;\\n\\t\\treturn result;\\n\\t}\\n\\n\\t/// @notice Calculates ceil(a\u00d7b\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n\\t/// @param a The multiplicand\\n\\t/// @param b The multiplier\\n\\t/// @param denominator The divisor\\n\\t/// @return result The 256-bit result\\n\\tfunction mulDivRoundingUp(\\n\\t\\tuint256 a,\\n\\t\\tuint256 b,\\n\\t\\tuint256 denominator\\n\\t) internal pure returns (uint256 result) {\\n\\t\\tresult = mulDiv(a, b, denominator);\\n\\t\\tif (mulmod(a, b, denominator) > 0) {\\n\\t\\t\\trequire(result < type(uint256).max);\\n\\t\\t\\tresult++;\\n\\t\\t}\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/lib/NoDelegateCall.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.19;\\n\\n/// @title Prevents delegatecall to a contract\\n/// @notice Base contract that provides a modifier for preventing delegatecall to methods in a child contract\\nabstract contract NoDelegateCall {\\n\\t/// @dev The original address of this contract\\n\\taddress private immutable original;\\n\\n\\tconstructor() {\\n\\t\\t// Immutables are computed in the init code of the contract, and then inlined into the deployed bytecode.\\n\\t\\t// In other words, this variable won't change when it's checked at runtime.\\n\\t\\toriginal = address(this);\\n\\t}\\n\\n\\t/// @dev Private method is used instead of inlining into modifier because modifiers are copied into each method,\\n\\t///     and the use of immutable means the address bytes are copied in every place the modifier is used.\\n\\tfunction checkNotDelegateCall() private view {\\n\\t\\trequire(address(this) == original);\\n\\t}\\n\\n\\t/// @notice Prevents delegatecall into the modified method\\n\\tmodifier noDelegateCall() {\\n\\t\\tcheckNotDelegateCall();\\n\\t\\t_;\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/lib/UnsafeMath64x64.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nlibrary UnsafeMath64x64 {\\n\\t/**\\n\\t * Calculate x * y rounding down.\\n\\t *\\n\\t * @param x signed 64.64-bit fixed point number\\n\\t * @param y signed 64.64-bit fixed point number\\n\\t * @return signed 64.64-bit fixed point number\\n\\t */\\n\\n\\tfunction us_mul(int128 x, int128 y) internal pure returns (int128) {\\n\\t\\tint256 result = (int256(x) * y) >> 64;\\n\\t\\treturn int128(result);\\n\\t}\\n\\n\\t/**\\n\\t * Calculate x / y rounding towards zero.  Revert on overflow or when y is\\n\\t * zero.\\n\\t *\\n\\t * @param x signed 64.64-bit fixed point number\\n\\t * @param y signed 64.64-bit fixed point number\\n\\t * @return signed 64.64-bit fixed point number\\n\\t */\\n\\n\\tfunction us_div(int128 x, int128 y) internal pure returns (int128) {\\n\\t\\tint256 result = (int256(x) << 64) / y;\\n\\t\\treturn int128(result);\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/Orchestrator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"./lib/ABDKMath64x64.sol\\\";\\nimport \\\"./Storage.sol\\\";\\nimport \\\"./CurveMath.sol\\\";\\n\\nlibrary Orchestrator {\\n\\tusing SafeERC20 for IERC20;\\n\\tusing ABDKMath64x64 for int128;\\n\\tusing ABDKMath64x64 for uint256;\\n\\n\\tint128 private constant ONE_WEI = 0x12;\\n\\n\\tevent ParametersSet(\\n\\t\\tuint256 alpha,\\n\\t\\tuint256 beta,\\n\\t\\tuint256 delta,\\n\\t\\tuint256 epsilon,\\n\\t\\tuint256 lambda\\n\\t);\\n\\n\\tevent AssetIncluded(\\n\\t\\taddress indexed numeraire,\\n\\t\\taddress indexed reserve,\\n\\t\\tuint256 weight\\n\\t);\\n\\n\\tevent AssimilatorIncluded(\\n\\t\\taddress indexed derivative,\\n\\t\\taddress indexed numeraire,\\n\\t\\taddress indexed reserve,\\n\\t\\taddress assimilator\\n\\t);\\n\\n\\tfunction setParams(\\n\\t\\tStorage.Curve storage curve,\\n\\t\\tuint256 _alpha,\\n\\t\\tuint256 _beta,\\n\\t\\tuint256 _feeAtHalt,\\n\\t\\tuint256 _epsilon,\\n\\t\\tuint256 _lambda\\n\\t) external {\\n\\t\\trequire(0 < _alpha && _alpha < 1e18, \\\"Curve/parameter-invalid-alpha\\\");\\n\\n\\t\\trequire(_beta < _alpha, \\\"Curve/parameter-invalid-beta\\\");\\n\\n\\t\\trequire(_feeAtHalt <= 5e17, \\\"Curve/parameter-invalid-max\\\");\\n\\n\\t\\trequire(_epsilon <= 1e16, \\\"Curve/parameter-invalid-epsilon\\\");\\n\\n\\t\\trequire(_lambda <= 1e18, \\\"Curve/parameter-invalid-lambda\\\");\\n\\n\\t\\tint128 _omega = getFee(curve);\\n\\n\\t\\tcurve.alpha = (_alpha + 1).divu(1e18);\\n\\n\\t\\tcurve.beta = (_beta + 1).divu(1e18);\\n\\n\\t\\tcurve.delta =\\n\\t\\t\\t(_feeAtHalt).divu(1e18).div(\\n\\t\\t\\t\\tuint256(2).fromUInt().mul(curve.alpha.sub(curve.beta))\\n\\t\\t\\t) +\\n\\t\\t\\tONE_WEI;\\n\\n\\t\\tcurve.epsilon = (_epsilon + 1).divu(1e18);\\n\\n\\t\\tcurve.lambda = (_lambda + 1).divu(1e18);\\n\\n\\t\\tint128 _psi = getFee(curve);\\n\\n\\t\\trequire(_omega >= _psi, \\\"Curve/parameters-increase-fee\\\");\\n\\n\\t\\temit ParametersSet(\\n\\t\\t\\t_alpha,\\n\\t\\t\\t_beta,\\n\\t\\t\\tcurve.delta.mulu(1e18),\\n\\t\\t\\t_epsilon,\\n\\t\\t\\t_lambda\\n\\t\\t);\\n\\t}\\n\\n\\tfunction setAssimilator(\\n\\t\\tStorage.Curve storage curve,\\n\\t\\taddress _baseCurrency,\\n\\t\\taddress _baseAssim,\\n\\t\\taddress _quoteCurrency,\\n\\t\\taddress _quoteAssim\\n\\t) external {\\n\\t\\trequire(\\n\\t\\t\\t_baseCurrency != address(0),\\n\\t\\t\\t\\\"Curve/numeraire-cannot-be-zeroth-address\\\"\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\t_baseAssim != address(0),\\n\\t\\t\\t\\\"Curve/numeraire-assimilator-cannot-be-zeroth-address\\\"\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\t_quoteCurrency != address(0),\\n\\t\\t\\t\\\"Curve/reserve-cannot-be-zeroth-address\\\"\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\t_quoteAssim != address(0),\\n\\t\\t\\t\\\"Curve/reserve-assimilator-cannot-be-zeroth-address\\\"\\n\\t\\t);\\n\\n\\t\\tStorage.Assimilator storage _baseAssimilator = curve.assimilators[\\n\\t\\t\\t_baseCurrency\\n\\t\\t];\\n\\t\\t_baseAssimilator.addr = _baseAssim;\\n\\n\\t\\tStorage.Assimilator storage _quoteAssimilator = curve.assimilators[\\n\\t\\t\\t_quoteCurrency\\n\\t\\t];\\n\\t\\t_quoteAssimilator.addr = _quoteAssim;\\n\\n\\t\\tcurve.assets[0] = _baseAssimilator;\\n\\t\\tcurve.assets[1] = _quoteAssimilator;\\n\\t}\\n\\n\\tfunction getFee(\\n\\t\\tStorage.Curve storage curve\\n\\t) private view returns (int128 fee_) {\\n\\t\\tint128 _gLiq;\\n\\n\\t\\t// Always pairs\\n\\t\\tint128[] memory _bals = new int128[](2);\\n\\n\\t\\tfor (uint256 i = 0; i < _bals.length; i++) {\\n\\t\\t\\tint128 _bal = Assimilators.viewNumeraireBalance(\\n\\t\\t\\t\\tcurve.assets[i].addr\\n\\t\\t\\t);\\n\\n\\t\\t\\t_bals[i] = _bal;\\n\\n\\t\\t\\t_gLiq += _bal;\\n\\t\\t}\\n\\n\\t\\tfee_ = CurveMath.calculateFee(\\n\\t\\t\\t_gLiq,\\n\\t\\t\\t_bals,\\n\\t\\t\\tcurve.beta,\\n\\t\\t\\tcurve.delta,\\n\\t\\t\\tcurve.weights\\n\\t\\t);\\n\\t}\\n\\n\\tfunction initialize(\\n\\t\\tStorage.Curve storage curve,\\n\\t\\taddress[] storage numeraires,\\n\\t\\taddress[] storage reserves,\\n\\t\\taddress[] storage derivatives,\\n\\t\\taddress[] calldata _assets,\\n\\t\\tuint256[] calldata _assetWeights\\n\\t) external {\\n\\t\\trequire(\\n\\t\\t\\t_assetWeights.length == 2,\\n\\t\\t\\t\\\"Curve/assetWeights-must-be-length-two\\\"\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\t_assets.length % 5 == 0,\\n\\t\\t\\t\\\"Curve/assets-must-be-divisible-by-five\\\"\\n\\t\\t);\\n\\n\\t\\tfor (uint256 i = 0; i < _assetWeights.length; i++) {\\n\\t\\t\\tuint256 ix = i * 5;\\n\\n\\t\\t\\tnumeraires.push(_assets[ix]);\\n\\t\\t\\tderivatives.push(_assets[ix]);\\n\\n\\t\\t\\treserves.push(_assets[2 + ix]);\\n\\t\\t\\tif (_assets[ix] != _assets[2 + ix])\\n\\t\\t\\t\\tderivatives.push(_assets[2 + ix]);\\n\\n\\t\\t\\tincludeAsset(\\n\\t\\t\\t\\tcurve,\\n\\t\\t\\t\\t_assets[ix], // numeraire\\n\\t\\t\\t\\t_assets[1 + ix], // numeraire assimilator\\n\\t\\t\\t\\t_assets[2 + ix], // reserve\\n\\t\\t\\t\\t_assets[3 + ix], // reserve assimilator\\n\\t\\t\\t\\t_assets[4 + ix], // reserve approve to\\n\\t\\t\\t\\t_assetWeights[i]\\n\\t\\t\\t);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction includeAsset(\\n\\t\\tStorage.Curve storage curve,\\n\\t\\taddress _numeraire,\\n\\t\\taddress _numeraireAssim,\\n\\t\\taddress _reserve,\\n\\t\\taddress _reserveAssim,\\n\\t\\taddress _reserveApproveTo,\\n\\t\\tuint256 _weight\\n\\t) private {\\n\\t\\trequire(\\n\\t\\t\\t_numeraire != address(0),\\n\\t\\t\\t\\\"Curve/numeraire-cannot-be-zeroth-address\\\"\\n\\t\\t);\\n\\n\\t\\trequire(\\n\\t\\t\\t_numeraireAssim != address(0),\\n\\t\\t\\t\\\"Curve/numeraire-assimilator-cannot-be-zeroth-address\\\"\\n\\t\\t);\\n\\n\\t\\trequire(\\n\\t\\t\\t_reserve != address(0),\\n\\t\\t\\t\\\"Curve/reserve-cannot-be-zeroth-address\\\"\\n\\t\\t);\\n\\n\\t\\trequire(\\n\\t\\t\\t_reserveAssim != address(0),\\n\\t\\t\\t\\\"Curve/reserve-assimilator-cannot-be-zeroth-address\\\"\\n\\t\\t);\\n\\n\\t\\trequire(_weight < 1e18, \\\"Curve/weight-must-be-less-than-one\\\");\\n\\n\\t\\tif (_numeraire != _reserve)\\n\\t\\t\\tIERC20(_numeraire).safeApprove(_reserveApproveTo, type(uint).max);\\n\\n\\t\\tStorage.Assimilator storage _numeraireAssimilator = curve.assimilators[\\n\\t\\t\\t_numeraire\\n\\t\\t];\\n\\n\\t\\t_numeraireAssimilator.addr = _numeraireAssim;\\n\\n\\t\\t_numeraireAssimilator.ix = uint8(curve.assets.length);\\n\\n\\t\\tStorage.Assimilator storage _reserveAssimilator = curve.assimilators[\\n\\t\\t\\t_reserve\\n\\t\\t];\\n\\n\\t\\t_reserveAssimilator.addr = _reserveAssim;\\n\\n\\t\\t_reserveAssimilator.ix = uint8(curve.assets.length);\\n\\n\\t\\tint128 __weight = _weight.divu(1e18).add(uint256(1).divu(1e18));\\n\\n\\t\\tcurve.weights.push(__weight);\\n\\n\\t\\tcurve.assets.push(_numeraireAssimilator);\\n\\n\\t\\temit AssetIncluded(_numeraire, _reserve, _weight);\\n\\n\\t\\temit AssimilatorIncluded(\\n\\t\\t\\t_numeraire,\\n\\t\\t\\t_numeraire,\\n\\t\\t\\t_reserve,\\n\\t\\t\\t_numeraireAssim\\n\\t\\t);\\n\\n\\t\\tif (_numeraireAssim != _reserveAssim) {\\n\\t\\t\\temit AssimilatorIncluded(\\n\\t\\t\\t\\t_reserve,\\n\\t\\t\\t\\t_numeraire,\\n\\t\\t\\t\\t_reserve,\\n\\t\\t\\t\\t_reserveAssim\\n\\t\\t\\t);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction viewCurve(\\n\\t\\tStorage.Curve storage curve\\n\\t)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tuint256 alpha_,\\n\\t\\t\\tuint256 beta_,\\n\\t\\t\\tuint256 delta_,\\n\\t\\t\\tuint256 epsilon_,\\n\\t\\t\\tuint256 lambda_\\n\\t\\t)\\n\\t{\\n\\t\\talpha_ = curve.alpha.mulu(1e18);\\n\\n\\t\\tbeta_ = curve.beta.mulu(1e18);\\n\\n\\t\\tdelta_ = curve.delta.mulu(1e18);\\n\\n\\t\\tepsilon_ = curve.epsilon.mulu(1e18);\\n\\n\\t\\tlambda_ = curve.lambda.mulu(1e18);\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/ProportionalLiquidity.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"./Assimilators.sol\\\";\\n\\nimport \\\"./Storage.sol\\\";\\n\\nimport \\\"./lib/UnsafeMath64x64.sol\\\";\\nimport \\\"./lib/ABDKMath64x64.sol\\\";\\n\\nimport \\\"./CurveMath.sol\\\";\\nimport \\\"./Structs.sol\\\";\\n\\nlibrary ProportionalLiquidity {\\n\\tusing ABDKMath64x64 for uint256;\\n\\tusing ABDKMath64x64 for int128;\\n\\tusing UnsafeMath64x64 for int128;\\n\\n\\tevent Transfer(address indexed from, address indexed to, uint256 value);\\n\\n\\tint128 public constant ONE = 0x10000000000000000;\\n\\tint128 public constant ONE_WEI = 0x12;\\n\\n\\tfunction proportionalDeposit(\\n\\t\\tStorage.Curve storage curve,\\n\\t\\tDepositData memory depositData\\n\\t) external returns (uint256 curves_, uint256[] memory) {\\n\\t\\tint128 __deposit = depositData.deposits.divu(1e18);\\n\\n\\t\\tuint256 _length = curve.assets.length;\\n\\n\\t\\tuint256[] memory deposits_ = new uint256[](_length);\\n\\n\\t\\t(\\n\\t\\t\\tint128 _oGLiq,\\n\\t\\t\\tint128[] memory _oBals\\n\\t\\t) = getGrossLiquidityAndBalancesForDeposit(curve);\\n\\n\\t\\t// Needed to calculate liquidity invariant\\n\\t\\t// (int128 _oGLiqProp, int128[] memory _oBalsProp) = getGrossLiquidityAndBalances(curve);\\n\\n\\t\\t// No liquidity, oracle sets the ratio\\n\\t\\tif (_oGLiq == 0) {\\n\\t\\t\\tfor (uint256 i = 0; i < _length; i++) {\\n\\t\\t\\t\\t// Variable here to avoid stack-too-deep errors\\n\\t\\t\\t\\tint128 _d = __deposit.mul(curve.weights[i]);\\n\\t\\t\\t\\tdeposits_[i] = Assimilators.intakeNumeraire(\\n\\t\\t\\t\\t\\tcurve.assets[i].addr,\\n\\t\\t\\t\\t\\t_d.add(ONE_WEI)\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\t// We already have an existing pool ratio\\n\\t\\t\\t// which must be respected\\n\\t\\t\\tint128 _multiplier = __deposit.div(_oGLiq);\\n\\n\\t\\t\\tuint256 _baseWeight = curve.weights[0].mulu(1e18);\\n\\t\\t\\tuint256 _quoteWeight = curve.weights[1].mulu(1e18);\\n\\n\\t\\t\\tfor (uint256 i = 0; i < _length; i++) {\\n\\t\\t\\t\\tIntakeNumLpRatioInfo memory info;\\n\\t\\t\\t\\tinfo.baseWeight = _baseWeight;\\n\\t\\t\\t\\tinfo.minBase = depositData.minBase;\\n\\t\\t\\t\\tinfo.maxBase = depositData.maxBase;\\n\\t\\t\\t\\tinfo.quoteWeight = _quoteWeight;\\n\\t\\t\\t\\tinfo.minQuote = depositData.minQuote;\\n\\t\\t\\t\\tinfo.maxQuote = depositData.maxQuote;\\n\\t\\t\\t\\tinfo.amount = _oBals[i].mul(_multiplier).add(ONE_WEI);\\n\\t\\t\\t\\tdeposits_[i] = Assimilators.intakeNumeraireLPRatio(\\n\\t\\t\\t\\t\\tcurve.assets[i].addr,\\n\\t\\t\\t\\t\\tinfo\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tint128 _totalShells = curve.totalSupply.divu(1e18);\\n\\n\\t\\tint128 _newShells = __deposit;\\n\\n\\t\\tif (_totalShells > 0) {\\n\\t\\t\\t_newShells = __deposit.mul(_totalShells);\\n\\t\\t\\t_newShells = _newShells.div(_oGLiq);\\n\\t\\t}\\n\\n\\t\\trequire(\\n\\t\\t\\t_newShells > 0,\\n\\t\\t\\t\\\"Proportional Liquidity/can't mint negative amount\\\"\\n\\t\\t);\\n\\t\\tmint(curve, msg.sender, curves_ = _newShells.mulu(1e18));\\n\\n\\t\\treturn (curves_, deposits_);\\n\\t}\\n\\n\\tfunction viewProportionalDeposit(\\n\\t\\tStorage.Curve storage curve,\\n\\t\\tuint256 _deposit\\n\\t) external view returns (uint256 curves_, uint256[] memory) {\\n\\t\\tint128 __deposit = _deposit.divu(1e18);\\n\\n\\t\\tuint256 _length = curve.assets.length;\\n\\n\\t\\t(\\n\\t\\t\\tint128 _oGLiq,\\n\\t\\t\\tint128[] memory _oBals\\n\\t\\t) = getGrossLiquidityAndBalancesForDeposit(curve);\\n\\n\\t\\tuint256[] memory deposits_ = new uint256[](_length);\\n\\n\\t\\t// No liquidity\\n\\t\\tif (_oGLiq == 0) {\\n\\t\\t\\tfor (uint256 i = 0; i < _length; i++) {\\n\\t\\t\\t\\tdeposits_[i] = Assimilators.viewRawAmount(\\n\\t\\t\\t\\t\\tcurve.assets[i].addr,\\n\\t\\t\\t\\t\\t__deposit.mul(curve.weights[i]).add(ONE_WEI)\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\t// We already have an existing pool ratio\\n\\t\\t\\t// this must be respected\\n\\t\\t\\tint128 _multiplier = __deposit.div(_oGLiq);\\n\\n\\t\\t\\tuint256 _baseWeight = curve.weights[0].mulu(1e18);\\n\\t\\t\\tuint256 _quoteWeight = curve.weights[1].mulu(1e18);\\n\\n\\t\\t\\t// Deposits into the pool is determined by existing LP ratio\\n\\t\\t\\tfor (uint256 i = 0; i < _length; i++) {\\n\\t\\t\\t\\tdeposits_[i] = Assimilators.viewRawAmountLPRatio(\\n\\t\\t\\t\\t\\tcurve.assets[i].addr,\\n\\t\\t\\t\\t\\t_baseWeight,\\n\\t\\t\\t\\t\\t_quoteWeight,\\n\\t\\t\\t\\t\\t_oBals[i].mul(_multiplier).add(ONE_WEI)\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tint128 _totalShells = curve.totalSupply.divu(1e18);\\n\\n\\t\\tint128 _newShells = __deposit;\\n\\n\\t\\tif (_totalShells > 0) {\\n\\t\\t\\t_newShells = __deposit.mul(_totalShells);\\n\\t\\t\\t_newShells = _newShells.div(_oGLiq);\\n\\t\\t}\\n\\n\\t\\tcurves_ = _newShells.mulu(1e18);\\n\\n\\t\\treturn (curves_, deposits_);\\n\\t}\\n\\n\\tfunction proportionalWithdraw(\\n\\t\\tStorage.Curve storage curve,\\n\\t\\tuint256 _withdrawal\\n\\t) external returns (uint256[] memory) {\\n\\t\\tuint256 _length = curve.assets.length;\\n\\n\\t\\t(, int128[] memory _oBals) = getGrossLiquidityAndBalances(curve);\\n\\n\\t\\tuint256[] memory withdrawals_ = new uint256[](_length);\\n\\n\\t\\tint128 _totalShells = curve.totalSupply.divu(1e18);\\n\\t\\tint128 __withdrawal = _withdrawal.divu(1e18);\\n\\n\\t\\tint128 _multiplier = __withdrawal.div(_totalShells);\\n\\n\\t\\tfor (uint256 i = 0; i < _length; i++) {\\n\\t\\t\\twithdrawals_[i] = Assimilators.outputNumeraire(\\n\\t\\t\\t\\tcurve.assets[i].addr,\\n\\t\\t\\t\\tmsg.sender,\\n\\t\\t\\t\\t_oBals[i].mul(_multiplier)\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\tburn(curve, msg.sender, _withdrawal);\\n\\n\\t\\treturn withdrawals_;\\n\\t}\\n\\n\\tfunction viewProportionalWithdraw(\\n\\t\\tStorage.Curve storage curve,\\n\\t\\tuint256 _withdrawal\\n\\t) external view returns (uint256[] memory) {\\n\\t\\tuint256 _length = curve.assets.length;\\n\\n\\t\\t(, int128[] memory _oBals) = getGrossLiquidityAndBalances(curve);\\n\\n\\t\\tuint256[] memory withdrawals_ = new uint256[](_length);\\n\\n\\t\\tint128 _multiplier = _withdrawal.divu(1e18).div(\\n\\t\\t\\tcurve.totalSupply.divu(1e18)\\n\\t\\t);\\n\\n\\t\\tfor (uint256 i = 0; i < _length; i++) {\\n\\t\\t\\twithdrawals_[i] = Assimilators.viewRawAmount(\\n\\t\\t\\t\\tcurve.assets[i].addr,\\n\\t\\t\\t\\t_oBals[i].mul(_multiplier)\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\treturn withdrawals_;\\n\\t}\\n\\n\\tfunction getGrossLiquidityAndBalancesForDeposit(\\n\\t\\tStorage.Curve storage curve\\n\\t) internal view returns (int128 grossLiquidity_, int128[] memory) {\\n\\t\\tuint256 _length = curve.assets.length;\\n\\n\\t\\tint128[] memory balances_ = new int128[](_length);\\n\\t\\tuint256 _baseWeight = curve.weights[0].mulu(1e18);\\n\\t\\tuint256 _quoteWeight = curve.weights[1].mulu(1e18);\\n\\n\\t\\tfor (uint256 i = 0; i < _length; i++) {\\n\\t\\t\\tint128 _bal = Assimilators.viewNumeraireBalanceLPRatio(\\n\\t\\t\\t\\t_baseWeight,\\n\\t\\t\\t\\t_quoteWeight,\\n\\t\\t\\t\\tcurve.assets[i].addr\\n\\t\\t\\t);\\n\\n\\t\\t\\tbalances_[i] = _bal;\\n\\t\\t\\tgrossLiquidity_ += _bal;\\n\\t\\t}\\n\\n\\t\\treturn (grossLiquidity_, balances_);\\n\\t}\\n\\n\\tfunction getGrossLiquidityAndBalances(\\n\\t\\tStorage.Curve storage curve\\n\\t) internal view returns (int128 grossLiquidity_, int128[] memory) {\\n\\t\\tuint256 _length = curve.assets.length;\\n\\n\\t\\tint128[] memory balances_ = new int128[](_length);\\n\\n\\t\\tfor (uint256 i = 0; i < _length; i++) {\\n\\t\\t\\tint128 _bal = Assimilators.viewNumeraireBalance(\\n\\t\\t\\t\\tcurve.assets[i].addr\\n\\t\\t\\t);\\n\\n\\t\\t\\tbalances_[i] = _bal;\\n\\t\\t\\tgrossLiquidity_ += _bal;\\n\\t\\t}\\n\\n\\t\\treturn (grossLiquidity_, balances_);\\n\\t}\\n\\n\\tfunction burn(\\n\\t\\tStorage.Curve storage curve,\\n\\t\\taddress account,\\n\\t\\tuint256 amount\\n\\t) private {\\n\\t\\tcurve.balances[account] = burnSub(curve.balances[account], amount);\\n\\n\\t\\tcurve.totalSupply = burnSub(curve.totalSupply, amount);\\n\\n\\t\\temit Transfer(msg.sender, address(0), amount);\\n\\t}\\n\\n\\tfunction mint(\\n\\t\\tStorage.Curve storage curve,\\n\\t\\taddress account,\\n\\t\\tuint256 amount\\n\\t) private {\\n\\t\\tuint256 minLock = 1e6;\\n\\t\\tif (curve.totalSupply == 0) {\\n\\t\\t\\trequire(\\n\\t\\t\\t\\tamount > minLock,\\n\\t\\t\\t\\t\\\"Proportional Liquidity/amount too small!\\\"\\n\\t\\t\\t);\\n\\t\\t\\tuint256 toMintAmt = amount - minLock;\\n\\t\\t\\t// mint to lp provider\\n\\t\\t\\tcurve.totalSupply = mintAdd(curve.totalSupply, toMintAmt);\\n\\t\\t\\tcurve.balances[account] = mintAdd(\\n\\t\\t\\t\\tcurve.balances[account],\\n\\t\\t\\t\\ttoMintAmt\\n\\t\\t\\t);\\n\\t\\t\\temit Transfer(address(0), msg.sender, toMintAmt);\\n\\t\\t\\t// mint to 0 address\\n\\t\\t\\tcurve.totalSupply = mintAdd(curve.totalSupply, minLock);\\n\\t\\t\\tcurve.balances[address(0)] = mintAdd(\\n\\t\\t\\t\\tcurve.balances[address(0)],\\n\\t\\t\\t\\tminLock\\n\\t\\t\\t);\\n\\t\\t\\temit Transfer(address(this), address(0), minLock);\\n\\t\\t} else {\\n\\t\\t\\tcurve.totalSupply = mintAdd(curve.totalSupply, amount);\\n\\t\\t\\tcurve.balances[account] = mintAdd(curve.balances[account], amount);\\n\\t\\t\\temit Transfer(address(0), msg.sender, amount);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction mintAdd(uint256 x, uint256 y) private pure returns (uint256 z) {\\n\\t\\trequire((z = x + y) >= x, \\\"Curve/mint-overflow\\\");\\n\\t}\\n\\n\\tfunction burnSub(uint256 x, uint256 y) private pure returns (uint256 z) {\\n\\t\\trequire((z = x - y) <= x, \\\"Curve/burn-underflow\\\");\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/Router.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"./CurveFactoryV2.sol\\\";\\nimport \\\"./Curve.sol\\\";\\n\\n// Simplistic router that assumes USD is the only quote currency for\\ncontract Router {\\n\\tusing SafeMath for uint256;\\n\\tusing SafeERC20 for IERC20;\\n\\n\\taddress public factory;\\n\\n\\tconstructor(address _factory) {\\n\\t\\trequire(\\n\\t\\t\\t_factory != address(0),\\n\\t\\t\\t\\\"Curve/factory-cannot-be-zeroth-address\\\"\\n\\t\\t);\\n\\n\\t\\tfactory = _factory;\\n\\t}\\n\\n\\t/// @notice view how much target amount a fixed origin amount will swap for\\n\\t/// @param _quoteCurrency the address of the quote currency (usually USDC)\\n\\t/// @param _origin the address of the origin\\n\\t/// @param _target the address of the target\\n\\t/// @param _originAmount the origin amount\\n\\t/// @return targetAmount_ the amount of target that will be returned\\n\\tfunction viewOriginSwap(\\n\\t\\taddress _quoteCurrency,\\n\\t\\taddress _origin,\\n\\t\\taddress _target,\\n\\t\\tuint256 _originAmount\\n\\t) external view returns (uint256 targetAmount_) {\\n\\t\\t// If its an immediate pair then just swap directly on it\\n\\t\\taddress curve0 = CurveFactoryV2(factory).curves(\\n\\t\\t\\tkeccak256(abi.encode(_origin, _target))\\n\\t\\t);\\n\\t\\tif (_origin == _quoteCurrency) {\\n\\t\\t\\tcurve0 = CurveFactoryV2(factory).curves(\\n\\t\\t\\t\\tkeccak256(abi.encode(_target, _origin))\\n\\t\\t\\t);\\n\\t\\t}\\n\\t\\tif (curve0 != address(0)) {\\n\\t\\t\\ttargetAmount_ = Curve(curve0).viewOriginSwap(\\n\\t\\t\\t\\t_origin,\\n\\t\\t\\t\\t_target,\\n\\t\\t\\t\\t_originAmount\\n\\t\\t\\t);\\n\\t\\t\\treturn targetAmount_;\\n\\t\\t}\\n\\n\\t\\t// Otherwise go through the quote currency\\n\\t\\tcurve0 = CurveFactoryV2(factory).curves(\\n\\t\\t\\tkeccak256(abi.encode(_origin, _quoteCurrency))\\n\\t\\t);\\n\\t\\taddress curve1 = CurveFactoryV2(factory).curves(\\n\\t\\t\\tkeccak256(abi.encode(_target, _quoteCurrency))\\n\\t\\t);\\n\\t\\tif (curve0 != address(0) && curve1 != address(0)) {\\n\\t\\t\\tuint256 _quoteAmount = Curve(curve0).viewOriginSwap(\\n\\t\\t\\t\\t_origin,\\n\\t\\t\\t\\t_quoteCurrency,\\n\\t\\t\\t\\t_originAmount\\n\\t\\t\\t);\\n\\t\\t\\ttargetAmount_ = Curve(curve1).viewOriginSwap(\\n\\t\\t\\t\\t_quoteCurrency,\\n\\t\\t\\t\\t_target,\\n\\t\\t\\t\\t_quoteAmount\\n\\t\\t\\t);\\n\\t\\t\\treturn targetAmount_;\\n\\t\\t}\\n\\n\\t\\trevert(\\\"Router/No-path\\\");\\n\\t}\\n\\n\\t/// @notice swap a dynamic origin amount for a fixed target amount\\n\\t/// @param _quoteCurrency the address of the quote currency (usually USDC)\\n\\t/// @param _origin the address of the origin\\n\\t/// @param _target the address of the target\\n\\t/// @param _originAmount the origin amount\\n\\t/// @param _minTargetAmount the minimum target amount\\n\\t/// @param _deadline deadline in block number after which the trade will not execute\\n\\t/// @return targetAmount_ the amount of target that has been swapped for the origin amount\\n\\tfunction originSwap(\\n\\t\\taddress _quoteCurrency,\\n\\t\\taddress _origin,\\n\\t\\taddress _target,\\n\\t\\tuint256 _originAmount,\\n\\t\\tuint256 _minTargetAmount,\\n\\t\\tuint256 _deadline\\n\\t) public returns (uint256 targetAmount_) {\\n\\t\\tIERC20(_origin).safeTransferFrom(\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\taddress(this),\\n\\t\\t\\t_originAmount\\n\\t\\t);\\n\\n\\t\\t// If its an immediate pair then just swap directly on it\\n\\t\\taddress curve0 = CurveFactoryV2(factory).curves(\\n\\t\\t\\tkeccak256(abi.encode(_origin, _target))\\n\\t\\t);\\n\\t\\tif (_origin == _quoteCurrency) {\\n\\t\\t\\tcurve0 = CurveFactoryV2(factory).curves(\\n\\t\\t\\t\\tkeccak256(abi.encode(_target, _origin))\\n\\t\\t\\t);\\n\\t\\t}\\n\\t\\tif (curve0 != address(0)) {\\n\\t\\t\\tIERC20(_origin).safeApprove(curve0, _originAmount);\\n\\t\\t\\ttargetAmount_ = Curve(curve0).originSwap(\\n\\t\\t\\t\\t_origin,\\n\\t\\t\\t\\t_target,\\n\\t\\t\\t\\t_originAmount,\\n\\t\\t\\t\\t_minTargetAmount,\\n\\t\\t\\t\\t_deadline\\n\\t\\t\\t);\\n\\t\\t\\tIERC20(_target).safeTransfer(msg.sender, targetAmount_);\\n\\t\\t\\treturn targetAmount_;\\n\\t\\t}\\n\\n\\t\\t// Otherwise go through the quote currency\\n\\t\\tcurve0 = CurveFactoryV2(factory).curves(\\n\\t\\t\\tkeccak256(abi.encode(_origin, _quoteCurrency))\\n\\t\\t);\\n\\t\\taddress curve1 = CurveFactoryV2(factory).curves(\\n\\t\\t\\tkeccak256(abi.encode(_target, _quoteCurrency))\\n\\t\\t);\\n\\t\\tif (curve0 != address(0) && curve1 != address(0)) {\\n\\t\\t\\tIERC20(_origin).safeApprove(curve0, _originAmount);\\n\\t\\t\\tuint256 _quoteAmount = Curve(curve0).originSwap(\\n\\t\\t\\t\\t_origin,\\n\\t\\t\\t\\t_quoteCurrency,\\n\\t\\t\\t\\t_originAmount,\\n\\t\\t\\t\\t0,\\n\\t\\t\\t\\t_deadline\\n\\t\\t\\t);\\n\\n\\t\\t\\tIERC20(_quoteCurrency).safeApprove(curve1, _quoteAmount);\\n\\t\\t\\ttargetAmount_ = Curve(curve1).originSwap(\\n\\t\\t\\t\\t_quoteCurrency,\\n\\t\\t\\t\\t_target,\\n\\t\\t\\t\\t_quoteAmount,\\n\\t\\t\\t\\t_minTargetAmount,\\n\\t\\t\\t\\t_deadline\\n\\t\\t\\t);\\n\\t\\t\\tIERC20(_target).safeTransfer(msg.sender, targetAmount_);\\n\\t\\t\\treturn targetAmount_;\\n\\t\\t}\\n\\n\\t\\trevert(\\\"Router/No-path\\\");\\n\\t}\\n\\n\\t/// @notice view how much of the origin currency the target currency will take\\n\\t/// @param _quoteCurrency the address of the quote currency (usually USDC)\\n\\t/// @param _origin the address of the origin\\n\\t/// @param _target the address of the target\\n\\t/// @param _targetAmount the target amount\\n\\t/// @return originAmount_ the amount of target that has been swapped for the origin\\n\\tfunction viewTargetSwap(\\n\\t\\taddress _quoteCurrency,\\n\\t\\taddress _origin,\\n\\t\\taddress _target,\\n\\t\\tuint256 _targetAmount\\n\\t) public view returns (uint256 originAmount_) {\\n\\t\\t// If its an immediate pair then just swap directly on it\\n\\t\\taddress curve0 = CurveFactoryV2(factory).curves(\\n\\t\\t\\tkeccak256(abi.encode(_origin, _target))\\n\\t\\t);\\n\\t\\tif (_origin == _quoteCurrency) {\\n\\t\\t\\tcurve0 = CurveFactoryV2(factory).curves(\\n\\t\\t\\t\\tkeccak256(abi.encode(_target, _origin))\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\tif (curve0 != address(0)) {\\n\\t\\t\\toriginAmount_ = Curve(curve0).viewTargetSwap(\\n\\t\\t\\t\\t_origin,\\n\\t\\t\\t\\t_target,\\n\\t\\t\\t\\t_targetAmount\\n\\t\\t\\t);\\n\\t\\t\\treturn originAmount_;\\n\\t\\t}\\n\\n\\t\\t// Otherwise go through the quote currency\\n\\t\\tcurve0 = CurveFactoryV2(factory).curves(\\n\\t\\t\\tkeccak256(abi.encode(_target, _quoteCurrency))\\n\\t\\t);\\n\\t\\taddress curve1 = CurveFactoryV2(factory).curves(\\n\\t\\t\\tkeccak256(abi.encode(_origin, _quoteCurrency))\\n\\t\\t);\\n\\t\\tif (curve0 != address(0) && curve1 != address(0)) {\\n\\t\\t\\tuint256 _quoteAmount = Curve(curve0).viewTargetSwap(\\n\\t\\t\\t\\t_quoteCurrency,\\n\\t\\t\\t\\t_target,\\n\\t\\t\\t\\t_targetAmount\\n\\t\\t\\t);\\n\\t\\t\\toriginAmount_ = Curve(curve1).viewTargetSwap(\\n\\t\\t\\t\\t_origin,\\n\\t\\t\\t\\t_quoteCurrency,\\n\\t\\t\\t\\t_quoteAmount\\n\\t\\t\\t);\\n\\t\\t\\treturn originAmount_;\\n\\t\\t}\\n\\n\\t\\trevert(\\\"Router/No-path\\\");\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/Storage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"./interfaces/IOracle.sol\\\";\\nimport \\\"./Assimilators.sol\\\";\\n\\ncontract Storage {\\n\\tstruct Curve {\\n\\t\\t// Curve parameters\\n\\t\\tint128 alpha;\\n\\t\\tint128 beta;\\n\\t\\tint128 delta;\\n\\t\\tint128 epsilon;\\n\\t\\tint128 lambda;\\n\\t\\tint128[] weights;\\n\\t\\t// Assets and their assimilators\\n\\t\\tAssimilator[] assets;\\n\\t\\tmapping(address => Assimilator) assimilators;\\n\\t\\t// Oracles to determine the price\\n\\t\\t// Note that 0'th index should always be USDC 1e18\\n\\t\\t// Oracle's pricing should be denominated in Currency/USDC\\n\\t\\tmapping(address => IOracle) oracles;\\n\\t\\t// ERC20 Interface\\n\\t\\tuint256 totalSupply;\\n\\t\\tmapping(address => uint256) balances;\\n\\t\\tmapping(address => mapping(address => uint256)) allowances;\\n\\t}\\n\\n\\tstruct Assimilator {\\n\\t\\taddress addr;\\n\\t\\tuint8 ix;\\n\\t}\\n\\n\\t// Curve parameters\\n\\tCurve public curve;\\n\\n\\t// Ownable\\n\\taddress public owner;\\n\\n\\tstring public name;\\n\\tstring public symbol;\\n\\tuint8 public constant decimals = 18;\\n\\n\\taddress[] public derivatives;\\n\\taddress[] public numeraires;\\n\\taddress[] public reserves;\\n\\n\\t// Curve operational state\\n\\tbool public frozen = false;\\n\\tbool public emergency = false;\\n\\tbool internal notEntered = true;\\n}\\n\"\r\n    },\r\n    \"contracts/Structs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"./interfaces/ICurveFactory.sol\\\";\\nimport \\\"./interfaces/IOracle.sol\\\";\\n\\nstruct OriginSwapData {\\n\\taddress _origin;\\n\\taddress _target;\\n\\tuint256 _originAmount;\\n\\taddress _recipient;\\n\\taddress _curveFactory;\\n}\\n\\nstruct TargetSwapData {\\n\\taddress _origin;\\n\\taddress _target;\\n\\tuint256 _targetAmount;\\n\\taddress _recipient;\\n\\taddress _curveFactory;\\n}\\n\\nstruct SwapInfo {\\n\\tint128 totalAmount;\\n\\tint128 totalFee;\\n\\tint128 amountToUser;\\n\\tint128 amountToTreasury;\\n\\tint128 protocolFeePercentage;\\n\\taddress treasury;\\n\\tICurveFactory curveFactory;\\n}\\n\\nstruct CurveInfo {\\n\\tstring _name;\\n\\tstring _symbol;\\n\\taddress _baseCurrency;\\n\\taddress _quoteCurrency;\\n\\tuint256 _baseWeight;\\n\\tuint256 _quoteWeight;\\n\\tIOracle _baseOracle;\\n\\tIOracle _quoteOracle;\\n\\tuint256 _alpha;\\n\\tuint256 _beta;\\n\\tuint256 _feeAtHalt;\\n\\tuint256 _epsilon;\\n\\tuint256 _lambda;\\n}\\n\\nstruct DepositData {\\n\\tuint256 deposits;\\n\\tuint256 minQuote;\\n\\tuint256 minBase;\\n\\tuint256 maxQuote;\\n\\tuint256 maxBase;\\n}\\n\\nstruct IntakeNumLpRatioInfo {\\n\\tuint256 baseWeight;\\n\\tuint256 minBase;\\n\\tuint256 maxBase;\\n\\tuint256 quoteWeight;\\n\\tuint256 minQuote;\\n\\tuint256 maxQuote;\\n\\tint128 amount;\\n}\\n\"\r\n    },\r\n    \"contracts/Swaps.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./Assimilators.sol\\\";\\nimport \\\"./Storage.sol\\\";\\nimport \\\"./CurveMath.sol\\\";\\nimport \\\"./lib/UnsafeMath64x64.sol\\\";\\nimport \\\"./lib/ABDKMath64x64.sol\\\";\\nimport \\\"./CurveFactory.sol\\\";\\nimport \\\"./Structs.sol\\\";\\n\\nlibrary Swaps {\\n\\tusing ABDKMath64x64 for int128;\\n\\tusing ABDKMath64x64 for int256;\\n\\tusing UnsafeMath64x64 for int128;\\n\\tusing ABDKMath64x64 for uint256;\\n\\tusing SafeMath for uint256;\\n\\n\\tevent Trade(\\n\\t\\taddress indexed trader,\\n\\t\\taddress indexed origin,\\n\\t\\taddress indexed target,\\n\\t\\tuint256 originAmount,\\n\\t\\tuint256 targetAmount,\\n\\t\\tint128 rawProtocolFee\\n\\t);\\n\\n\\tint128 public constant ONE = 0x10000000000000000;\\n\\n\\tfunction getOriginAndTarget(\\n\\t\\tStorage.Curve storage curve,\\n\\t\\taddress _o,\\n\\t\\taddress _t\\n\\t)\\n\\t\\tprivate\\n\\t\\tview\\n\\t\\treturns (Storage.Assimilator memory, Storage.Assimilator memory)\\n\\t{\\n\\t\\tStorage.Assimilator memory o_ = curve.assimilators[_o];\\n\\t\\tStorage.Assimilator memory t_ = curve.assimilators[_t];\\n\\n\\t\\trequire(o_.addr != address(0), \\\"Curve/origin-not-supported\\\");\\n\\t\\trequire(t_.addr != address(0), \\\"Curve/target-not-supported\\\");\\n\\n\\t\\treturn (o_, t_);\\n\\t}\\n\\n\\tfunction originSwap(\\n\\t\\tStorage.Curve storage curve,\\n\\t\\tOriginSwapData memory _swapData\\n\\t) external returns (uint256 tAmt_) {\\n\\t\\t(\\n\\t\\t\\tStorage.Assimilator memory _o,\\n\\t\\t\\tStorage.Assimilator memory _t\\n\\t\\t) = getOriginAndTarget(curve, _swapData._origin, _swapData._target);\\n\\n\\t\\tif (_o.ix == _t.ix)\\n\\t\\t\\treturn\\n\\t\\t\\t\\tAssimilators.outputNumeraire(\\n\\t\\t\\t\\t\\t_t.addr,\\n\\t\\t\\t\\t\\t_swapData._recipient,\\n\\t\\t\\t\\t\\tAssimilators.intakeRaw(_o.addr, _swapData._originAmount)\\n\\t\\t\\t\\t);\\n\\n\\t\\tSwapInfo memory _swapInfo;\\n\\t\\t(\\n\\t\\t\\tint128 _amt,\\n\\t\\t\\tint128 _oGLiq,\\n\\t\\t\\tint128 _nGLiq,\\n\\t\\t\\tint128[] memory _oBals,\\n\\t\\t\\tint128[] memory _nBals\\n\\t\\t) = getOriginSwapData(\\n\\t\\t\\t\\tcurve,\\n\\t\\t\\t\\t_o.ix,\\n\\t\\t\\t\\t_t.ix,\\n\\t\\t\\t\\t_o.addr,\\n\\t\\t\\t\\t_swapData._originAmount\\n\\t\\t\\t);\\n\\n\\t\\t_swapInfo.totalAmount = _amt;\\n\\n\\t\\t_amt = CurveMath.calculateTrade(\\n\\t\\t\\tcurve,\\n\\t\\t\\t_oGLiq,\\n\\t\\t\\t_nGLiq,\\n\\t\\t\\t_oBals,\\n\\t\\t\\t_nBals,\\n\\t\\t\\t_amt,\\n\\t\\t\\t_t.ix\\n\\t\\t);\\n\\n\\t\\t_swapInfo.curveFactory = ICurveFactory(_swapData._curveFactory);\\n\\t\\t_swapInfo.amountToUser = _amt.us_mul(ONE - curve.epsilon);\\n\\t\\t// _swapInfo.totalFee = _swapInfo.totalAmount + _swapInfo.amountToUser;\\n\\t\\t_swapInfo.totalFee = _swapInfo.amountToUser - _amt;\\n\\t\\t_swapInfo.protocolFeePercentage = _swapInfo\\n\\t\\t\\t.curveFactory\\n\\t\\t\\t.getProtocolFee();\\n\\t\\t_swapInfo.treasury = _swapInfo.curveFactory.getProtocolTreasury();\\n\\t\\t_swapInfo.amountToTreasury = _swapInfo\\n\\t\\t\\t.totalFee\\n\\t\\t\\t.muli(_swapInfo.protocolFeePercentage)\\n\\t\\t\\t.divi(100000);\\n\\t\\tAssimilators.transferFee(\\n\\t\\t\\t_t.addr,\\n\\t\\t\\t_swapInfo.amountToTreasury,\\n\\t\\t\\t_swapInfo.treasury\\n\\t\\t);\\n\\t\\ttAmt_ = Assimilators.outputNumeraire(\\n\\t\\t\\t_t.addr,\\n\\t\\t\\t_swapData._recipient,\\n\\t\\t\\t_swapInfo.amountToUser\\n\\t\\t);\\n\\n\\t\\temit Trade(\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\t_swapData._origin,\\n\\t\\t\\t_swapData._target,\\n\\t\\t\\t_swapData._originAmount,\\n\\t\\t\\ttAmt_,\\n\\t\\t\\t_swapInfo.amountToTreasury\\n\\t\\t);\\n\\t}\\n\\n\\tfunction viewOriginSwap(\\n\\t\\tStorage.Curve storage curve,\\n\\t\\taddress _origin,\\n\\t\\taddress _target,\\n\\t\\tuint256 _originAmount\\n\\t) external view returns (uint256 tAmt_) {\\n\\t\\t(\\n\\t\\t\\tStorage.Assimilator memory _o,\\n\\t\\t\\tStorage.Assimilator memory _t\\n\\t\\t) = getOriginAndTarget(curve, _origin, _target);\\n\\n\\t\\tif (_o.ix == _t.ix)\\n\\t\\t\\treturn\\n\\t\\t\\t\\tAssimilators.viewRawAmount(\\n\\t\\t\\t\\t\\t_t.addr,\\n\\t\\t\\t\\t\\tAssimilators.viewNumeraireAmount(_o.addr, _originAmount)\\n\\t\\t\\t\\t);\\n\\n\\t\\t(\\n\\t\\t\\tint128 _amt,\\n\\t\\t\\tint128 _oGLiq,\\n\\t\\t\\tint128 _nGLiq,\\n\\t\\t\\tint128[] memory _nBals,\\n\\t\\t\\tint128[] memory _oBals\\n\\t\\t) = viewOriginSwapData(curve, _o.ix, _t.ix, _originAmount, _o.addr);\\n\\n\\t\\t_amt = CurveMath.calculateTrade(\\n\\t\\t\\tcurve,\\n\\t\\t\\t_oGLiq,\\n\\t\\t\\t_nGLiq,\\n\\t\\t\\t_oBals,\\n\\t\\t\\t_nBals,\\n\\t\\t\\t_amt,\\n\\t\\t\\t_t.ix\\n\\t\\t);\\n\\n\\t\\t_amt = _amt.us_mul(ONE - curve.epsilon);\\n\\n\\t\\ttAmt_ = Assimilators.viewRawAmount(_t.addr, _amt.abs());\\n\\t}\\n\\n\\tfunction targetSwap(\\n\\t\\tStorage.Curve storage curve,\\n\\t\\tTargetSwapData memory _swapData\\n\\t) external returns (uint256 oAmt_) {\\n\\t\\t(\\n\\t\\t\\tStorage.Assimilator memory _o,\\n\\t\\t\\tStorage.Assimilator memory _t\\n\\t\\t) = getOriginAndTarget(curve, _swapData._origin, _swapData._target);\\n\\n\\t\\tif (_o.ix == _t.ix)\\n\\t\\t\\treturn\\n\\t\\t\\t\\tAssimilators.intakeNumeraire(\\n\\t\\t\\t\\t\\t_o.addr,\\n\\t\\t\\t\\t\\tAssimilators.outputRaw(\\n\\t\\t\\t\\t\\t\\t_t.addr,\\n\\t\\t\\t\\t\\t\\t_swapData._recipient,\\n\\t\\t\\t\\t\\t\\t_swapData._targetAmount\\n\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t);\\n\\n\\t\\t(\\n\\t\\t\\tint128 _amt,\\n\\t\\t\\tint128 _oGLiq,\\n\\t\\t\\tint128 _nGLiq,\\n\\t\\t\\tint128[] memory _oBals,\\n\\t\\t\\tint128[] memory _nBals\\n\\t\\t) = getTargetSwapData(\\n\\t\\t\\t\\tcurve,\\n\\t\\t\\t\\t_t.ix,\\n\\t\\t\\t\\t_o.ix,\\n\\t\\t\\t\\t_t.addr,\\n\\t\\t\\t\\t_swapData._recipient,\\n\\t\\t\\t\\t_swapData._targetAmount\\n\\t\\t\\t);\\n\\n\\t\\t_amt = CurveMath.calculateTrade(\\n\\t\\t\\tcurve,\\n\\t\\t\\t_oGLiq,\\n\\t\\t\\t_nGLiq,\\n\\t\\t\\t_oBals,\\n\\t\\t\\t_nBals,\\n\\t\\t\\t_amt,\\n\\t\\t\\t_o.ix\\n\\t\\t);\\n\\n\\t\\tSwapInfo memory _swapInfo;\\n\\n\\t\\t_swapInfo.totalAmount = _amt;\\n\\t\\t_swapInfo.curveFactory = ICurveFactory(_swapData._curveFactory);\\n\\t\\t_swapInfo.amountToUser = _amt.us_mul(ONE + curve.epsilon);\\n\\t\\t_swapInfo.totalFee = _swapInfo.amountToUser - _amt;\\n\\t\\t_swapInfo.protocolFeePercentage = _swapInfo\\n\\t\\t\\t.curveFactory\\n\\t\\t\\t.getProtocolFee();\\n\\t\\t_swapInfo.treasury = _swapInfo.curveFactory.getProtocolTreasury();\\n\\t\\t_swapInfo.amountToTreasury = _swapInfo\\n\\t\\t\\t.totalFee\\n\\t\\t\\t.muli(_swapInfo.protocolFeePercentage)\\n\\t\\t\\t.divi(100000);\\n\\n\\t\\tAssimilators.transferFee(\\n\\t\\t\\t_o.addr,\\n\\t\\t\\t_swapInfo.amountToTreasury,\\n\\t\\t\\t_swapInfo.treasury\\n\\t\\t);\\n\\n\\t\\toAmt_ = Assimilators.intakeNumeraire(_o.addr, _swapInfo.amountToUser);\\n\\n\\t\\temit Trade(\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\t_swapData._origin,\\n\\t\\t\\t_swapData._target,\\n\\t\\t\\toAmt_,\\n\\t\\t\\t_swapData._targetAmount,\\n\\t\\t\\t_swapInfo.amountToTreasury\\n\\t\\t);\\n\\t}\\n\\n\\tfunction viewTargetSwap(\\n\\t\\tStorage.Curve storage curve,\\n\\t\\taddress _origin,\\n\\t\\taddress _target,\\n\\t\\tuint256 _targetAmount\\n\\t) external view returns (uint256 oAmt_) {\\n\\t\\t(\\n\\t\\t\\tStorage.Assimilator memory _o,\\n\\t\\t\\tStorage.Assimilator memory _t\\n\\t\\t) = getOriginAndTarget(curve, _origin, _target);\\n\\n\\t\\tif (_o.ix == _t.ix)\\n\\t\\t\\treturn\\n\\t\\t\\t\\tAssimilators.viewRawAmount(\\n\\t\\t\\t\\t\\t_o.addr,\\n\\t\\t\\t\\t\\tAssimilators.viewNumeraireAmount(_t.addr, _targetAmount)\\n\\t\\t\\t\\t);\\n\\n\\t\\t(\\n\\t\\t\\tint128 _amt,\\n\\t\\t\\tint128 _oGLiq,\\n\\t\\t\\tint128 _nGLiq,\\n\\t\\t\\tint128[] memory _nBals,\\n\\t\\t\\tint128[] memory _oBals\\n\\t\\t) = viewTargetSwapData(curve, _t.ix, _o.ix, _targetAmount, _t.addr);\\n\\n\\t\\t_amt = CurveMath.calculateTrade(\\n\\t\\t\\tcurve,\\n\\t\\t\\t_oGLiq,\\n\\t\\t\\t_nGLiq,\\n\\t\\t\\t_oBals,\\n\\t\\t\\t_nBals,\\n\\t\\t\\t_amt,\\n\\t\\t\\t_o.ix\\n\\t\\t);\\n\\n\\t\\t_amt = _amt.us_mul(ONE + curve.epsilon);\\n\\n\\t\\toAmt_ = Assimilators.viewRawAmount(_o.addr, _amt);\\n\\t}\\n\\n\\tfunction getOriginSwapData(\\n\\t\\tStorage.Curve storage curve,\\n\\t\\tuint256 _inputIx,\\n\\t\\tuint256 _outputIx,\\n\\t\\taddress _assim,\\n\\t\\tuint256 _amt\\n\\t)\\n\\t\\tprivate\\n\\t\\treturns (\\n\\t\\t\\tint128 amt_,\\n\\t\\t\\tint128 oGLiq_,\\n\\t\\t\\tint128 nGLiq_,\\n\\t\\t\\tint128[] memory,\\n\\t\\t\\tint128[] memory\\n\\t\\t)\\n\\t{\\n\\t\\tuint256 _length = curve.assets.length;\\n\\n\\t\\tint128[] memory oBals_ = new int128[](_length);\\n\\t\\tint128[] memory nBals_ = new int128[](_length);\\n\\t\\tStorage.Assimilator[] memory _reserves = curve.assets;\\n\\n\\t\\tfor (uint256 i = 0; i < _length; i++) {\\n\\t\\t\\tif (i != _inputIx)\\n\\t\\t\\t\\tnBals_[i] = oBals_[i] = Assimilators.viewNumeraireBalance(\\n\\t\\t\\t\\t\\t_reserves[i].addr\\n\\t\\t\\t\\t);\\n\\t\\t\\telse {\\n\\t\\t\\t\\tint128 _bal;\\n\\t\\t\\t\\t(amt_, _bal) = Assimilators.intakeRawAndGetBalance(\\n\\t\\t\\t\\t\\t_assim,\\n\\t\\t\\t\\t\\t_amt\\n\\t\\t\\t\\t);\\n\\n\\t\\t\\t\\toBals_[i] = _bal.sub(amt_);\\n\\t\\t\\t\\tnBals_[i] = _bal;\\n\\t\\t\\t}\\n\\n\\t\\t\\toGLiq_ += oBals_[i];\\n\\t\\t\\tnGLiq_ += nBals_[i];\\n\\t\\t}\\n\\n\\t\\tnGLiq_ = nGLiq_.sub(amt_);\\n\\t\\tnBals_[_outputIx] = ABDKMath64x64.sub(nBals_[_outputIx], amt_);\\n\\n\\t\\treturn (amt_, oGLiq_, nGLiq_, oBals_, nBals_);\\n\\t}\\n\\n\\tfunction getTargetSwapData(\\n\\t\\tStorage.Curve storage curve,\\n\\t\\tuint256 _inputIx,\\n\\t\\tuint256 _outputIx,\\n\\t\\taddress _assim,\\n\\t\\taddress _recipient,\\n\\t\\tuint256 _amt\\n\\t)\\n\\t\\tprivate\\n\\t\\treturns (\\n\\t\\t\\tint128 amt_,\\n\\t\\t\\tint128 oGLiq_,\\n\\t\\t\\tint128 nGLiq_,\\n\\t\\t\\tint128[] memory,\\n\\t\\t\\tint128[] memory\\n\\t\\t)\\n\\t{\\n\\t\\tuint256 _length = curve.assets.length;\\n\\n\\t\\tint128[] memory oBals_ = new int128[](_length);\\n\\t\\tint128[] memory nBals_ = new int128[](_length);\\n\\t\\tStorage.Assimilator[] memory _reserves = curve.assets;\\n\\n\\t\\tfor (uint256 i = 0; i < _length; i++) {\\n\\t\\t\\tif (i != _inputIx)\\n\\t\\t\\t\\tnBals_[i] = oBals_[i] = Assimilators.viewNumeraireBalance(\\n\\t\\t\\t\\t\\t_reserves[i].addr\\n\\t\\t\\t\\t);\\n\\t\\t\\telse {\\n\\t\\t\\t\\tint128 _bal;\\n\\t\\t\\t\\t(amt_, _bal) = Assimilators.outputRawAndGetBalance(\\n\\t\\t\\t\\t\\t_assim,\\n\\t\\t\\t\\t\\t_recipient,\\n\\t\\t\\t\\t\\t_amt\\n\\t\\t\\t\\t);\\n\\n\\t\\t\\t\\toBals_[i] = _bal.sub(amt_);\\n\\t\\t\\t\\tnBals_[i] = _bal;\\n\\t\\t\\t}\\n\\n\\t\\t\\toGLiq_ += oBals_[i];\\n\\t\\t\\tnGLiq_ += nBals_[i];\\n\\t\\t}\\n\\n\\t\\tnGLiq_ = nGLiq_.sub(amt_);\\n\\t\\tnBals_[_outputIx] = ABDKMath64x64.sub(nBals_[_outputIx], amt_);\\n\\n\\t\\treturn (amt_, oGLiq_, nGLiq_, oBals_, nBals_);\\n\\t}\\n\\n\\tfunction viewOriginSwapData(\\n\\t\\tStorage.Curve storage curve,\\n\\t\\tuint256 _inputIx,\\n\\t\\tuint256 _outputIx,\\n\\t\\tuint256 _amt,\\n\\t\\taddress _assim\\n\\t)\\n\\t\\tprivate\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tint128 amt_,\\n\\t\\t\\tint128 oGLiq_,\\n\\t\\t\\tint128 nGLiq_,\\n\\t\\t\\tint128[] memory,\\n\\t\\t\\tint128[] memory\\n\\t\\t)\\n\\t{\\n\\t\\tuint256 _length = curve.assets.length;\\n\\t\\tint128[] memory nBals_ = new int128[](_length);\\n\\t\\tint128[] memory oBals_ = new int128[](_length);\\n\\n\\t\\tfor (uint256 i = 0; i < _length; i++) {\\n\\t\\t\\tif (i != _inputIx)\\n\\t\\t\\t\\tnBals_[i] = oBals_[i] = Assimilators.viewNumeraireBalance(\\n\\t\\t\\t\\t\\tcurve.assets[i].addr\\n\\t\\t\\t\\t);\\n\\t\\t\\telse {\\n\\t\\t\\t\\tint128 _bal;\\n\\t\\t\\t\\t(amt_, _bal) = Assimilators.viewNumeraireAmountAndBalance(\\n\\t\\t\\t\\t\\t_assim,\\n\\t\\t\\t\\t\\t_amt\\n\\t\\t\\t\\t);\\n\\n\\t\\t\\t\\toBals_[i] = _bal;\\n\\t\\t\\t\\tnBals_[i] = _bal.add(amt_);\\n\\t\\t\\t}\\n\\n\\t\\t\\toGLiq_ += oBals_[i];\\n\\t\\t\\tnGLiq_ += nBals_[i];\\n\\t\\t}\\n\\n\\t\\tnGLiq_ = nGLiq_.sub(amt_);\\n\\t\\tnBals_[_outputIx] = ABDKMath64x64.sub(nBals_[_outputIx], amt_);\\n\\n\\t\\treturn (amt_, oGLiq_, nGLiq_, nBals_, oBals_);\\n\\t}\\n\\n\\tfunction viewTargetSwapData(\\n\\t\\tStorage.Curve storage curve,\\n\\t\\tuint256 _inputIx,\\n\\t\\tuint256 _outputIx,\\n\\t\\tuint256 _amt,\\n\\t\\taddress _assim\\n\\t)\\n\\t\\tprivate\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tint128 amt_,\\n\\t\\t\\tint128 oGLiq_,\\n\\t\\t\\tint128 nGLiq_,\\n\\t\\t\\tint128[] memory,\\n\\t\\t\\tint128[] memory\\n\\t\\t)\\n\\t{\\n\\t\\tuint256 _length = curve.assets.length;\\n\\t\\tint128[] memory nBals_ = new int128[](_length);\\n\\t\\tint128[] memory oBals_ = new int128[](_length);\\n\\n\\t\\tfor (uint256 i = 0; i < _length; i++) {\\n\\t\\t\\tif (i != _inputIx)\\n\\t\\t\\t\\tnBals_[i] = oBals_[i] = Assimilators.viewNumeraireBalance(\\n\\t\\t\\t\\t\\tcurve.assets[i].addr\\n\\t\\t\\t\\t);\\n\\t\\t\\telse {\\n\\t\\t\\t\\tint128 _bal;\\n\\t\\t\\t\\t(amt_, _bal) = Assimilators.viewNumeraireAmountAndBalance(\\n\\t\\t\\t\\t\\t_assim,\\n\\t\\t\\t\\t\\t_amt\\n\\t\\t\\t\\t);\\n\\t\\t\\t\\tamt_ = amt_.neg();\\n\\n\\t\\t\\t\\toBals_[i] = _bal;\\n\\t\\t\\t\\tnBals_[i] = _bal.add(amt_);\\n\\t\\t\\t}\\n\\n\\t\\t\\toGLiq_ += oBals_[i];\\n\\t\\t\\tnGLiq_ += nBals_[i];\\n\\t\\t}\\n\\n\\t\\tnGLiq_ = nGLiq_.sub(amt_);\\n\\t\\tnBals_[_outputIx] = ABDKMath64x64.sub(nBals_[_outputIx], amt_);\\n\\n\\t\\treturn (amt_, oGLiq_, nGLiq_, nBals_, oBals_);\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/ViewLiquidity.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"./Storage.sol\\\";\\nimport \\\"./Assimilators.sol\\\";\\nimport \\\"./lib/ABDKMath64x64.sol\\\";\\n\\nlibrary ViewLiquidity {\\n\\tusing ABDKMath64x64 for int128;\\n\\n\\tfunction viewLiquidity(\\n\\t\\tStorage.Curve storage curve\\n\\t) external view returns (uint256 total_, uint256[] memory individual_) {\\n\\t\\tuint256 _length = curve.assets.length;\\n\\n\\t\\tindividual_ = new uint256[](_length);\\n\\n\\t\\tfor (uint256 i = 0; i < _length; i++) {\\n\\t\\t\\tuint256 _liquidity = Assimilators\\n\\t\\t\\t\\t.viewNumeraireBalance(curve.assets[i].addr)\\n\\t\\t\\t\\t.mulu(1e18);\\n\\n\\t\\t\\ttotal_ += _liquidity;\\n\\t\\t\\tindividual_[i] = _liquidity;\\n\\t\\t}\\n\\n\\t\\treturn (total_, individual_);\\n\\t}\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_quoteCurrency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_origin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_originAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minTargetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"originSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"targetAmount_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_quoteCurrency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_origin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_originAmount\",\"type\":\"uint256\"}],\"name\":\"viewOriginSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"targetAmount_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_quoteCurrency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_origin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_targetAmount\",\"type\":\"uint256\"}],\"name\":\"viewTargetSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"originAmount_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Router", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000086ba17ebf8819f7fd32cf1a43abcaae541a5bebf", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}