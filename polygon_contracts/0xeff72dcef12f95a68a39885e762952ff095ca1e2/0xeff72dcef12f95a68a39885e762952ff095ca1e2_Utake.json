{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.5;\r\n\r\ncontract Utake {\r\n\r\n    // ERC-20 standard\r\n    string _name;\r\n    string _symbol;\r\n    uint8 _decimals;\r\n    uint _totalSupply;\r\n    uint _maxSupply;\r\n    mapping(address => uint) balances;\r\n    mapping(address => mapping(address => uint)) allowed;\r\n\r\n    // Admins params\r\n    address _owner;\r\n    address[] public adminList;\r\n    mapping(address => bool) public isAdmin;\r\n    mapping(address => bool) public isUserBanned;\r\n    bool public transferAllow;\r\n\r\n    // Deposit params\r\n    struct DepositData {\r\n        uint withdraw_date;\r\n        uint deposit_date;\r\n        uint amount;\r\n        uint reward;\r\n        uint arrayIndex;\r\n        address _address;\r\n        bool isExecuted;\r\n    }\r\n\r\n    uint month;\r\n    uint _reward3;\r\n    uint _reward6;\r\n    uint _reward12;\r\n    uint minimumTokenDeposit;\r\n    mapping(address => DepositData[]) public depositsHistory;\r\n    mapping(address => mapping(uint => DepositData)) public deposits;\r\n    mapping(address => uint[]) public _recordDeposits;\r\n\r\n   \r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    event ReduceApproved(address indexed _owner, address indexed _spender, uint256 _tokens);\r\n    event OwnerChanged(address indexed _from, address indexed _to);\r\n    event NewDeposit(address indexed _account, uint _amount);\r\n    event NewWithdraw(address indexed _account, uint _amount);\r\n    event NewAdmin(address indexed _account);\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == _owner, \"Only owner!\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        require(isAdmin[msg.sender], \"Only admin!\");\r\n        _;\r\n    }\r\n\r\n    constructor() {\r\n        _name = \"Utake\";\r\n        _symbol = \"UTE\";\r\n        _decimals = 18;\r\n        _maxSupply = 100000000 * 10 ** _decimals;\r\n        _totalSupply = 80000000 * 10 ** _decimals;\r\n        _owner = msg.sender;\r\n        adminList.push(msg.sender);\r\n        isAdmin[msg.sender] = true;\r\n        balances[_owner] = _totalSupply;\r\n        transferAllow = true;\r\n\r\n        minimumTokenDeposit = 10 ** _decimals;\r\n        month = 2629743;\r\n        _reward3 = 15; \r\n        _reward6 = 20;\r\n        _reward12 = 25;\r\n    }\r\n\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function owner() public view returns(address) {\r\n        return _owner;\r\n    }\r\n\r\n    function totalSupply() public view returns(uint) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function maxSupply() public view returns(uint) {\r\n        return _maxSupply;\r\n    }\r\n    \r\n    function balanceOf(address _tokenOwner) public view returns(uint) {\r\n        return balances[_tokenOwner];\r\n    }\r\n\r\n    function allowance(address _tokenOwner, address _spender) public view returns(uint) {\r\n        return allowed[_tokenOwner][_spender];\r\n    }\r\n\r\n    function reward() external view returns(uint, uint, uint) {\r\n        return (_reward3, _reward6, _reward12);\r\n    }\r\n\r\n    function getRecordDeposit(address _user) external view returns(uint[] memory) {\r\n        return _recordDeposits[_user];\r\n    }\r\n\r\n    function getRecordDepositsByIndex(address _user, uint _idx) external view returns(uint) {\r\n        return _recordDeposits[_user][_idx];\r\n    }\r\n\r\n    function getMinimumTokenDeposit() external view returns(uint) {\r\n        return minimumTokenDeposit;\r\n    }\r\n\r\n    function getDepositsHistory(address _user) external view returns(DepositData[] memory) {\r\n        return depositsHistory[_user];\r\n    }\r\n\r\n\r\n\r\n    function transfer(address _to, uint _tokens) public returns(bool) {\r\n        require(transferAllow && !isUserBanned[msg.sender] && !isUserBanned[_to] || isAdmin[msg.sender] || isAdmin[_to], \r\n                \"You are not allowed to transfer tokens!\");\r\n        require(balances[msg.sender] >= _tokens, \"Not enough funds!\");\r\n        require(msg.sender != address(0), \"Wrong sender address!\");\r\n        balances[msg.sender] -= _tokens;\r\n        balances[_to] += _tokens;\r\n        emit Transfer(msg.sender, _to, _tokens);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint _tokens) external returns(bool) {\r\n        require(msg.sender != address(0), \"Wrong address!\");\r\n        require(!isUserBanned[_spender], \"This user is banned!\");\r\n        allowed[msg.sender][_spender] += _tokens;\r\n        emit Approval(msg.sender, _spender, _tokens);\r\n        return true;\r\n    }\r\n\r\n    function reduceAllowance(address _spender, uint _tokens) external returns(bool) {\r\n        require(msg.sender != address(0), \"Wrong address!\");\r\n        allowed[msg.sender][_spender] -= _tokens;\r\n        emit ReduceApproved(msg.sender, _spender, _tokens);\r\n        return true;\r\n    }\r\n\r\n   function transferFrom(address _from, address _to, uint _tokens) public returns(bool) {\r\n        require(msg.sender != address(0), \"Wrong sender address!\");\r\n        require(balances[_from] >= _tokens, \"Not enough funds!\");\r\n        require(allowed[_from][msg.sender] >= _tokens, \"Too low allowance!\");\r\n        require(transferAllow && !isUserBanned[msg.sender] && !isUserBanned[_to] || isAdmin[msg.sender] || isAdmin[_to], \"You are not allowed to transfer tokens!\");\r\n        allowed[_from][msg.sender] -= _tokens;\r\n        balances[_from] -= _tokens;\r\n        balances[_to] += _tokens;\r\n        emit Transfer(_from, _to, _tokens);\r\n        return true;\r\n    }\r\n\r\n    function deposit(uint _amount, uint _amountMouth) external returns(bool) {\r\n        require(_amountMouth == 3 || _amountMouth == 6 || _amountMouth == 12, \"Wrong month count!\");\r\n        require(balances[msg.sender] >= _amount, \"Not enough funds!\");\r\n        require(_amount >= minimumTokenDeposit, \"You try to deposit less then min deposit!\");\r\n        uint reward_ = _calcReward(_amount, _amountMouth);\r\n        require(_totalSupply + reward_ <= _maxSupply, \"Max supply is reached!\");\r\n        _totalSupply += reward_;\r\n        balances[msg.sender] -= _amount;\r\n        balances[address(this)] += (_amount + reward_);\r\n        _recordDeposits[msg.sender].push(block.timestamp);\r\n        DepositData storage a = deposits[msg.sender][block.timestamp];\r\n        a.deposit_date = block.timestamp;\r\n        a.withdraw_date = block.timestamp + (month * _amountMouth);\r\n        a.amount = _amount;\r\n        a.reward = reward_;\r\n        a._address = msg.sender;\r\n        a.arrayIndex = _recordDeposits[msg.sender].length-1;\r\n        depositsHistory[msg.sender].push(a);\r\n        emit NewDeposit(msg.sender, _amount);\r\n        return true;\r\n    }\r\n\r\n    function _calcReward(uint _amount, uint _amountMouth) internal view returns(uint reward_) {\r\n        if (_amountMouth == 12) {\r\n            reward_ = ((_amount / 10000) * _reward12) * _amountMouth;\r\n        }\r\n        else if (_amountMouth == 6) {\r\n            reward_ = ((_amount / 10000) * _reward6) * _amountMouth;\r\n        }\r\n        else {\r\n            reward_ = ((_amount / 10000) * _reward3) * _amountMouth;\r\n        }\r\n    }\r\n\r\n    function withdraw(uint _timestamp) external returns(bool) {\r\n        DepositData storage a = deposits[msg.sender][_timestamp];\r\n        require(msg.sender == a._address, \"You can not withdraw from this account!\"); // may we don't need it\r\n        if(a.withdraw_date <= block.timestamp && !a.isExecuted) {\r\n            if (_recordDeposits[msg.sender].length == 1) {\r\n                _recordDeposits[msg.sender].pop();\r\n            }\r\n            else {\r\n                uint last = _recordDeposits[msg.sender].length-1;\r\n                if (_recordDeposits[msg.sender][a.arrayIndex] != _recordDeposits[msg.sender][last]){\r\n                    DepositData storage a2 = deposits[msg.sender][_recordDeposits[msg.sender][last]];\r\n                    a2.arrayIndex = a.arrayIndex;\r\n                    _recordDeposits[msg.sender][a.arrayIndex] = _recordDeposits[msg.sender][last];\r\n                    _recordDeposits[msg.sender].pop();\r\n                } \r\n                else {\r\n                    _recordDeposits[msg.sender].pop();\r\n                }\r\n            }\r\n            a.isExecuted = true;\r\n            uint amount = a.amount + a.reward;\r\n            balances[address(this)] -= amount;\r\n            balances[msg.sender] += amount;\r\n            emit NewWithdraw(msg.sender, amount);\r\n            return true;\r\n        }\r\n        else {\r\n            revert(\"Withdraw not available!\");\r\n        }\r\n    }\r\n\r\n\r\n\r\n    // Admins\r\n\r\n    function multipleTransfer(address[] calldata _addresses, uint[] calldata _amounts, uint _totAmount) onlyAdmin external returns(bool) {\r\n        require(balances[msg.sender] >= _totAmount, \"Not enough founds to to the transfers\");\r\n\r\n        uint len = _addresses.length;\r\n        for(uint i = 0; i < len; i++){\r\n            transfer(_addresses[i], _amounts[i]);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function changeTransferAllow(bool _allow) external onlyAdmin returns(bool) {\r\n        require(_allow != transferAllow, \"Is already what you asked for!\");\r\n        transferAllow = _allow;\r\n        return true;\r\n    }\r\n\r\n    function addToBannedUser(address _addr) external onlyAdmin returns(bool) {\r\n        require(!isUserBanned[_addr], \"This user is already banned!\");\r\n        isUserBanned[_addr] = true;\r\n        return true;\r\n    }\r\n\r\n    function removeFromBannedUser(address _addr) external onlyAdmin returns(bool) {\r\n        require(isUserBanned[_addr], \"This user is already unbanned!\");\r\n        isUserBanned[_addr] = false;\r\n        return true;\r\n    }\r\n\r\n    function setMinimumTokenDeposit(uint _token) onlyAdmin public {\r\n        minimumTokenDeposit = _token;\r\n    }\r\n\r\n\r\n    // Owner\r\n\r\n    function mint(uint _value, address _to) onlyOwner public returns(bool) {\r\n        require(msg.sender != address(0), \"Wrong sender address!\");\r\n        require(_to != address(0), \"Wrong receiver address!\");\r\n        require(_totalSupply + _value <= _maxSupply, \"Minted amount is higher then the max supply\");\r\n        balances[_to] += _value;\r\n        _totalSupply += _value;\r\n        return true;\r\n    }\r\n\r\n    function burn(uint _value) onlyOwner public returns(bool) {\r\n        require(msg.sender != address(0), \"Wrong sender address!\");\r\n        require(balances[msg.sender] >= _value, \"Not enough funds!\");\r\n        balances[msg.sender] -= _value;\r\n        _totalSupply -= _value;\r\n        return true;\r\n    }\r\n\r\n    function transferOwnerhip(address _to) external onlyOwner returns(bool) {\r\n        require(_to != address(0), \"Impossible set admin to address zero!\");\r\n\r\n        for (uint256 i = 0; i < adminList.length; i++) {\r\n            if (adminList[i] == msg.sender) {\r\n                uint256 last = adminList.length -1;\r\n                if(last != i) {\r\n                    adminList[i] = adminList[last];\r\n                }\r\n                adminList.pop();\r\n                isAdmin[msg.sender] = false;\r\n            } else{\r\n                continue;\r\n            }\r\n        }\r\n\r\n        address oldOwner = _owner;\r\n        _owner = _to;\r\n        adminList.push(_to);\r\n        isAdmin[_to] = true;\r\n        emit OwnerChanged(oldOwner, _to);\r\n        emit NewAdmin(_to);\r\n        return true;\r\n    }\r\n\r\n    function setAdmin(address _addr) external onlyOwner returns(bool) {\r\n        require(!isAdmin[_addr], \"This address is already admin!\");\r\n\r\n        adminList.push(_addr);\r\n        isAdmin[_addr] = true;\r\n        emit NewAdmin(_addr);\r\n        return true;\r\n    }\r\n\r\n    function removeAdmin(address _addr) external onlyOwner returns(bool) {\r\n        require(isAdmin[_addr], \"Admin not found!\");\r\n\r\n        for (uint256 i = 0; i < adminList.length; i++) {\r\n            if (adminList[i] == _addr) {\r\n                uint256 last = adminList.length -1;\r\n                if(last != i) {\r\n                    adminList[i] = adminList[last];\r\n                }\r\n                adminList.pop();\r\n                isAdmin[_addr] = false;\r\n            } else{\r\n                continue;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function setReward(uint _amountMouth, uint _reward) external onlyOwner returns(bool) {\r\n        require(_amountMouth == 3 || _amountMouth == 6 || _amountMouth == 12, \"Wrong month count\");\r\n        require(_reward > 0 && _reward <= 10000, \"Basis point owerflow\");\r\n        if (_amountMouth == 12) {\r\n            _reward12 = _reward;\r\n        }\r\n        else if (_amountMouth == 6) {\r\n            _reward6 = _reward;\r\n        }\r\n        else {\r\n            _reward3 = _reward;\r\n        }\r\n        return true;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"NewAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"NewDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"NewWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"ReduceApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_recordDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"addToBannedUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"adminList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_allow\",\"type\":\"bool\"}],\"name\":\"changeTransferAllow\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountMouth\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"deposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"withdraw_date\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deposit_date\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"arrayIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isExecuted\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"depositsHistory\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"withdraw_date\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deposit_date\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"arrayIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isExecuted\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getDepositsHistory\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"withdraw_date\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deposit_date\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"arrayIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isExecuted\",\"type\":\"bool\"}],\"internalType\":\"struct Utake.DepositData[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinimumTokenDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getRecordDeposit\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_idx\",\"type\":\"uint256\"}],\"name\":\"getRecordDepositsByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isUserBanned\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_totAmount\",\"type\":\"uint256\"}],\"name\":\"multipleTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"reduceAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"removeFromBannedUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_token\",\"type\":\"uint256\"}],\"name\":\"setMinimumTokenDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountMouth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"}],\"name\":\"setReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferAllow\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"transferOwnerhip\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Utake", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://2661faa5e16e2663ab26350330d991b944f2995a5fa0dde1459db1171ca4f61d"}