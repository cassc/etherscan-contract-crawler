{"SourceCode": "// File: contracts/InterfaceLP.sol\r\n\r\npragma solidity ^0.7.4;\r\n\r\n\r\ninterface InterfaceLP {\r\n    function sync() external;\r\n}\r\n\r\n// File: contracts/SafeMathInt.sol\r\n\r\npragma solidity ^0.7.4;\r\n\r\n\r\nlibrary SafeMathInt {\r\n    int256 private constant MIN_INT256 = int256(1) << 255;\r\n    int256 private constant MAX_INT256 = ~(int256(1) << 255);\r\n\r\n    function mul(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a * b;\r\n\r\n        require(c != MIN_INT256 || (a & MIN_INT256) != (b & MIN_INT256));\r\n        require((b == 0) || (c / b == a));\r\n        return c;\r\n    }\r\n\r\n    function div(int256 a, int256 b) internal pure returns (int256) {\r\n        require(b != -1 || a != MIN_INT256);\r\n\r\n        return a / b;\r\n    }\r\n\r\n    function sub(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a - b;\r\n        require((b >= 0 && c <= a) || (b < 0 && c > a));\r\n        return c;\r\n    }\r\n\r\n    function add(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a + b;\r\n        require((b >= 0 && c >= a) || (b < 0 && c < a));\r\n        return c;\r\n    }\r\n\r\n    function abs(int256 a) internal pure returns (int256) {\r\n        require(a != MIN_INT256);\r\n        return a < 0 ? -a : a;\r\n    }\r\n}\r\n\r\n// File: contracts/SafeMath.sol\r\n\r\npragma solidity ^0.7.4;\r\n\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/Ownable.sol\r\n\r\npragma solidity ^0.7.4;\r\n\r\n\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipRenounced(address indexed previousOwner);\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        _owner = msg.sender;\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipRenounced(_owner);\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/IVVSRouter01.sol\r\n\r\npragma solidity ^0.7.4;\r\n\r\n\r\ninterface IVVSRouter01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) external pure returns (uint256 amountB);\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountOut);\r\n\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountIn);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n}\r\n\r\n// File: contracts/IVVSRouter.sol\r\n\r\npragma solidity ^0.7.4;\r\n\r\n\r\n\r\ninterface IVVSRouter is IVVSRouter01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\n// File: contracts/IVVSFactory.sol\r\n\r\npragma solidity ^0.7.4;\r\n\r\n\r\ninterface IVVSFactory {\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint256\r\n    );\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB)\r\n        external\r\n        view\r\n        returns (address pair);\r\n\r\n    function allPairs(uint256) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint256);\r\n\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\n// File: contracts/IERC20.sol\r\n\r\npragma solidity ^0.7.4;\r\n\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n// File: contracts/ERC20Detailed.sol\r\n\r\npragma solidity ^0.7.4;\r\n\r\n\r\n\r\nabstract contract ERC20Detailed is IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    constructor(\r\n        string memory name,\r\n        string memory symbol,\r\n        uint8 decimals\r\n    ) {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\n// File: contracts/Phenix.sol\r\n\r\npragma solidity ^0.7.4;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract PhenixFinance is ERC20Detailed, Ownable {\r\n    using SafeMath for uint256;\r\n    using SafeMathInt for int256;\r\n\r\n    event Rebase(uint256 indexed totalSupply);\r\n\r\n    address[] public pairAddresses;\r\n    address public liquidityReceiver;\r\n    address public phenixFundReserveReceiver;\r\n    bool public initialDistributionFinished;\r\n\r\n    mapping(address => bool) _allowTransfer;\r\n    mapping(address => bool) _isFeeExempt;\r\n\r\n    uint256 private constant FXP_BASE = 1000000;\r\n    uint256 private constant DECIMALS = 18;\r\n    uint256 private constant MAX_UINT256 = ~uint256(0);\r\n    address private constant DEAD = 0x000000000000000000000000000000000000dEaD;\r\n    address private constant ZERO = 0x0000000000000000000000000000000000000000;\r\n    uint256 private constant REBASE_INTERVAL = 86400;\r\n    uint256 private constant INITIAL_FRAGMENTS_SUPPLY =\r\n        10 * 10**6 * 10**DECIMALS;\r\n\r\n    uint256 public liquidityFee = 2;\r\n    uint256 public phenixVaultFee = 8;\r\n    uint256 public sellFee = 5;\r\n    uint256 public totalFee = liquidityFee.add(phenixVaultFee);\r\n    uint256 public feeDenominator = 100;\r\n\r\n    uint256 public lastRebaseTimestamp = block.timestamp;\r\n    uint256 public lastRebaseDelta = 0;\r\n    uint256 public rebasePercentDelta = (18 * FXP_BASE) / 1000;\r\n\r\n    bool public rebaseRX3Enabled = true;\r\n    uint256 public rebaseRX3Multiplier = FXP_BASE;\r\n    uint256 public rebaseMaxRX3Multiplier = FXP_BASE + FXP_BASE / 2;\r\n    uint256 public rebaseRX3MultiplierStep = (1 * FXP_BASE) / 1000;\r\n\r\n    IVVSRouter public router;\r\n    bool public swapEnabled = true;\r\n    uint256 private gonSwapThreshold = (TOTAL_GONS * 10) / 10000;\r\n    bool inSwap;\r\n\r\n    uint256 private constant TOTAL_GONS =\r\n        MAX_UINT256 - (MAX_UINT256 % INITIAL_FRAGMENTS_SUPPLY);\r\n    uint256 private constant MAX_SUPPLY = ~uint128(0);\r\n    uint256 private _totalSupply;\r\n    uint256 private _gonsPerFragment;\r\n    mapping(address => uint256) private _gonBalances;\r\n    mapping(address => mapping(address => uint256)) private _allowedFragments;\r\n    mapping(address => bool) public taxableAddress;\r\n    mapping(address => bool) public authorizedRebaseAddress;\r\n\r\n    constructor() ERC20Detailed(\"Phenix Finance\", \"PHNX\", uint8(DECIMALS)) {\r\n        router = IVVSRouter(0x51aBA405De2b25E5506DeA32A6697F450cEB1a17);\r\n\r\n        address _pairAddress = address(\r\n            IVVSFactory(router.factory()).createPair(\r\n                router.WETH(),\r\n                address(this)\r\n            )\r\n        );\r\n\r\n        liquidityReceiver = address(msg.sender);\r\n        phenixFundReserveReceiver = address(msg.sender);\r\n\r\n        _allowedFragments[address(this)][address(router)] = uint256(-1);\r\n\r\n        _totalSupply = INITIAL_FRAGMENTS_SUPPLY;\r\n        _gonBalances[address(msg.sender)] = TOTAL_GONS;\r\n        _gonsPerFragment = TOTAL_GONS.div(_totalSupply);\r\n\r\n        _isFeeExempt[address(phenixFundReserveReceiver)] = true;\r\n        _isFeeExempt[address(this)] = true;\r\n        _isFeeExempt[address(msg.sender)] = true;\r\n\r\n        taxableAddress[_pairAddress] = true;\r\n        pairAddresses.push(_pairAddress);\r\n        authorizedRebaseAddress[address(msg.sender)] = true;\r\n        \r\n        emit Transfer(address(0x0), address(msg.sender), _totalSupply);\r\n    }\r\n\r\n    /**\r\n     * @dev Swapping switch used to mitigate any calculation\r\n     * issues during swapBack.\r\n     */\r\n    modifier noReentrancy() {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    modifier initialDistributionLock() {\r\n        require(\r\n            initialDistributionFinished ||\r\n                isOwner() ||\r\n                _allowTransfer[msg.sender],\r\n            \"Initial distirbution not finalized.\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier validRecipient(address to) {\r\n        require(to != address(0x0));\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the delta of the next rebase.\r\n     * @return next rebase delta as uint256 value.\r\n     */\r\n    function getNextRebase(uint256 _timestamp) public view returns (uint256) {\r\n        uint256 rebaseTimestampDelta = _timestamp - lastRebaseTimestamp;\r\n\r\n        uint256 nextScaledRebaseIntervalPercentage = rebaseTimestampDelta\r\n            .mul(FXP_BASE)\r\n            .div(REBASE_INTERVAL);\r\n\r\n        uint256 nextRebaseDelta = _totalSupply\r\n            .mul(rebasePercentDelta)\r\n            .div(FXP_BASE)\r\n            .mul(nextScaledRebaseIntervalPercentage)\r\n            .div(FXP_BASE);\r\n\r\n        if (rebaseRX3Enabled == true) {\r\n            nextRebaseDelta = nextRebaseDelta\r\n                .mul(\r\n                    rebaseRX3Multiplier < rebaseMaxRX3Multiplier\r\n                        ? rebaseRX3Multiplier\r\n                        : rebaseMaxRX3Multiplier\r\n                )\r\n                .div(FXP_BASE);\r\n        }\r\n\r\n        return nextRebaseDelta;\r\n    }\r\n\r\n    /**\r\n     * @dev Rebases total token supply based on the getNextRebase()\r\n     * return result. Rebase is capped when MAX_SUPPLY is reached.\r\n     */\r\n    function _rebase() internal {\r\n        uint256 supplyDelta = getNextRebase(block.timestamp);\r\n        _totalSupply = _totalSupply.add(uint256(supplyDelta));\r\n\r\n        if (_totalSupply > MAX_SUPPLY) {\r\n            _totalSupply = MAX_SUPPLY;\r\n        }\r\n\r\n        _gonsPerFragment = TOTAL_GONS.div(_totalSupply);\r\n\r\n        lastRebaseDelta = supplyDelta;\r\n        lastRebaseTimestamp = block.timestamp;\r\n        rebaseRX3Multiplier = FXP_BASE;\r\n\r\n        emit Rebase(_totalSupply);\r\n    }\r\n\r\n    /**\r\n     * @dev Executes the internal _rebase() function and then\r\n     * performs the sync() call on all applicable pairAddresses\r\n     */\r\n    function rebaseAndSync() external {\r\n        require(\r\n            authorizedRebaseAddress[msg.sender] == true,\r\n            \"Not authroized to execute rebase\"\r\n        );\r\n\r\n        _rebase();\r\n\r\n        for (uint256 i = 0; i < pairAddresses.length; i++) {\r\n            if (taxableAddress[pairAddresses[i]] == true) {\r\n                InterfaceLP(pairAddresses[i]).sync();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the last rebase time to the current block\r\n     * timestamp as means to reset the value.\r\n     */\r\n    function resetLastRebaseTimestamp() external {\r\n        require(\r\n            authorizedRebaseAddress[msg.sender] == true,\r\n            \"Not authroized to execute this function.\"\r\n        );\r\n\r\n        lastRebaseTimestamp = block.timestamp;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns total token supply. Overrides ERC-20\r\n     * totalSupply() function to return elastic supply.\r\n     */\r\n    function totalSupply() external view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers amount tokens to an address.\r\n     * @param to Receiver of the transfered tokens.\r\n     * @param value Amount of tokens that are received.\r\n     * @return true\r\n     */\r\n    function transfer(address to, uint256 value)\r\n        external\r\n        override\r\n        validRecipient(to)\r\n        initialDistributionLock\r\n        returns (bool)\r\n    {\r\n        _transferFrom(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds LP contract address and removes\r\n     * fees from the given address. Added pair contract tested\r\n     * sync() before adding to see if it is a pair address.\r\n     * Addition will fail if sync() fails.\r\n     * @param _address Update LP contract address.\r\n     */\r\n    function addLPAddress(address _address) external onlyOwner {\r\n        InterfaceLP(_address).sync();\r\n\r\n        for (uint256 i = 0; i < pairAddresses.length; i++) {\r\n            require(pairAddresses[i] != _address, \"Pair address already added\");\r\n        }\r\n\r\n        pairAddresses.push(_address);\r\n        taxableAddress[_address] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns array of all LP Addresses\r\n     * @return address[] Array of LP Addresses.\r\n     **/\r\n    function getLPAddresses() external view returns (address[] memory) {\r\n        return pairAddresses;\r\n    }\r\n\r\n    /**\r\n     * @dev Updates given address' taxable status.\r\n     * @param _address Subject address of taxable state adjustment.\r\n     * @param _status State if address should be taxed.\r\n     */\r\n    function setTaxableAddress(address _address, bool _status)\r\n        external\r\n        onlyOwner\r\n    {\r\n        taxableAddress[_address] = _status;\r\n    }\r\n\r\n    /**\r\n     * @dev Updates given address' Authorized Rebase status.\r\n     * @param _address Subject address of Authorized Rebase state adjustment.\r\n     * @param _status State if address should be allowed call rebaseAndSync().\r\n     */\r\n    function setAuthorizedRebaseAddress(address _address, bool _status)\r\n        external\r\n        onlyOwner\r\n    {\r\n        authorizedRebaseAddress[_address] = _status;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns spender alloance of an owner address.\r\n     * Overides ERC-20 allowance(address, address) function\r\n     * to return allowed fragments.\r\n     * @param owner Owner address of tokens.\r\n     * @param spender Spender address of tokens.\r\n     * @return uint256 Amount of allowed tokens for the spender to use.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowedFragments[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev Returns balance of given address. Overrides\r\n     * ERC-20 balanceOf(address) to provide balance based\r\n     * on holder gons and gonsPerFragment.\r\n     * @param who Balance of address.\r\n     * @return uint256 value of address balance.\r\n     */\r\n    function balanceOf(address who) external view override returns (uint256) {\r\n        return _gonBalances[who].div(_gonsPerFragment);\r\n    }\r\n\r\n    /**\r\n     * @dev Performs basic token transfer. Used as\r\n     * internal function in _transferFrom(address,\r\n     * address, uint256) function.\r\n     * @param from sender address of transfer.\r\n     * @param to receiver adddress of transfer.\r\n     * @param amount amount of tokens for receiver.\r\n     * @return true.\r\n     */\r\n    function _basicTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal returns (bool) {\r\n        uint256 gonAmount = amount.mul(_gonsPerFragment);\r\n        _gonBalances[from] = _gonBalances[from].sub(gonAmount);\r\n        _gonBalances[to] = _gonBalances[to].add(gonAmount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers token from sender address\r\n     * to receiver address. Performs token supply\r\n     * rebase provided it is acceptable. Executes\r\n     * _baseTransfer(address, address, uint256) if\r\n     * swap is in progress.\r\n     * @param sender sender address of transfer.\r\n     * @param to receiver adddress of transfer.\r\n     * @param amount amount of tokens for receiver.\r\n     * @return true.\r\n     */\r\n    function _transferFrom(\r\n        address sender,\r\n        address to,\r\n        uint256 amount\r\n    ) internal returns (bool) {\r\n        if (inSwap) {\r\n            return _basicTransfer(sender, to, amount);\r\n        }\r\n\r\n        uint256 gonAmount = amount.mul(_gonsPerFragment);\r\n\r\n        if (_shouldSwapBack()) {\r\n            _swapBack();\r\n        }\r\n\r\n        if (rebaseRX3Enabled == true) {\r\n            rebaseRX3Multiplier = rebaseRX3Multiplier.add(\r\n                rebaseRX3MultiplierStep\r\n            );\r\n        }\r\n\r\n        _gonBalances[sender] = _gonBalances[sender].sub(gonAmount);\r\n\r\n        uint256 gonAmountReceived = _shouldTakeFee(sender, to)\r\n            ? _takeFee(sender, to, gonAmount)\r\n            : gonAmount;\r\n        _gonBalances[to] = _gonBalances[to].add(gonAmountReceived);\r\n\r\n        emit Transfer(sender, to, gonAmountReceived.div(_gonsPerFragment));\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers token from sender address\r\n     * to receiver address. Overrides ERC-20\r\n     * transferFrom(address, address, uint256) to\r\n     * check value of allowed fragments that sender\r\n     * can access from the owner (from address).\r\n     * @param from sender address of transfer.\r\n     * @param to receiver adddress of transfer.\r\n     * @param value amount of tokens for receiver.\r\n     * @return true.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external override validRecipient(to) returns (bool) {\r\n        if (_allowedFragments[from][msg.sender] != uint256(-1)) {\r\n            _allowedFragments[from][msg.sender] = _allowedFragments[from][\r\n                msg.sender\r\n            ].sub(value, \"Insufficient Allowance\");\r\n        }\r\n\r\n        _transferFrom(from, to, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Executes fee allocations and distributes tokens\r\n     * to contract address, phenix vault receiver address, and\r\n     * liquidity receiver address.\r\n     */\r\n    function _swapBack() internal noReentrancy {\r\n        uint256 contractTokenBalance = _gonBalances[address(this)].div(\r\n            _gonsPerFragment\r\n        );\r\n        uint256 amountToLiquify = contractTokenBalance\r\n            .mul(liquidityFee)\r\n            .div(totalFee)\r\n            .div(2);\r\n        uint256 amountToSwap = contractTokenBalance.sub(amountToLiquify);\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n\r\n        uint256 balanceBefore = address(this).balance;\r\n\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            amountToSwap,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        uint256 amountETH = address(this).balance.sub(balanceBefore);\r\n        uint256 totalETHFee = totalFee.sub(liquidityFee.div(2));\r\n\r\n        uint256 amountETHLiquidity = amountETH\r\n            .mul(liquidityFee)\r\n            .div(totalETHFee)\r\n            .div(2);\r\n\r\n        if (amountToLiquify > 0) {\r\n            router.addLiquidityETH{value: amountETHLiquidity}(\r\n                address(this),\r\n                amountToLiquify,\r\n                0,\r\n                0,\r\n                liquidityReceiver,\r\n                block.timestamp\r\n            );\r\n        }\r\n\r\n        (bool success, ) = payable(phenixFundReserveReceiver).call{\r\n            value: address(this).balance\r\n        }(\"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates swap fee and returns new allocation\r\n     * of swap based on swap conditions. Calculate is based\r\n     * on liquidity fee and phenix vault fee. Sell fee will also\r\n     * be taken into consideration if receiver is pair address.\r\n     * @return uint256 gonAmount that is transfered in the swap.\r\n     */\r\n    function _takeFee(\r\n        address sender,\r\n        address to,\r\n        uint256 gonAmount\r\n    ) internal returns (uint256) {\r\n        uint256 _totalFee = totalFee;\r\n        if (taxableAddress[to] == true) _totalFee = _totalFee.add(sellFee);\r\n\r\n        uint256 feeAmount = gonAmount.mul(_totalFee).div(feeDenominator);\r\n\r\n        _gonBalances[address(this)] = _gonBalances[address(this)].add(\r\n            feeAmount\r\n        );\r\n        emit Transfer(sender, address(this), feeAmount.div(_gonsPerFragment));\r\n\r\n        return gonAmount.sub(feeAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev Decreases spender allowance of sender address.\r\n     * @param spender Spender address.\r\n     * @param subtractedValue Amount to reduce spender allowance by.\r\n     * @return bool\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        external\r\n        initialDistributionLock\r\n        returns (bool)\r\n    {\r\n        uint256 oldValue = _allowedFragments[msg.sender][spender];\r\n        if (subtractedValue >= oldValue) {\r\n            _allowedFragments[msg.sender][spender] = 0;\r\n        } else {\r\n            _allowedFragments[msg.sender][spender] = oldValue.sub(\r\n                subtractedValue\r\n            );\r\n        }\r\n        emit Approval(\r\n            msg.sender,\r\n            spender,\r\n            _allowedFragments[msg.sender][spender]\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Updates router address\r\n     * @param _address address to set for the dex router\r\n     */\r\n    function updateRouter(address _address) external onlyOwner {\r\n        require(address(router) != _address, \"Router address already set\");\r\n        router = IVVSRouter(_address);\r\n    }\r\n\r\n    /**\r\n     * @dev Increases spender allowance of sender address.\r\n     * @param spender Spender address.\r\n     * @param addedValue Amount to increase spender allowance by.\r\n     * @return bool\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        external\r\n        initialDistributionLock\r\n        returns (bool)\r\n    {\r\n        _allowedFragments[msg.sender][spender] = _allowedFragments[msg.sender][\r\n            spender\r\n        ].add(addedValue);\r\n        emit Approval(\r\n            msg.sender,\r\n            spender,\r\n            _allowedFragments[msg.sender][spender]\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approves spender address to use sender tokens.\r\n     * @param spender Spender address.\r\n     * @param value Amount of tokens spender can access.\r\n     * @return bool\r\n     */\r\n    function approve(address spender, uint256 value)\r\n        external\r\n        override\r\n        initialDistributionLock\r\n        returns (bool)\r\n    {\r\n        _allowedFragments[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if given address is exempt from swap fees.\r\n     * @param _addr Address to check current exemption status.\r\n     * @return bool\r\n     */\r\n    function checkFeeExempt(address _addr) external view returns (bool) {\r\n        return _isFeeExempt[_addr];\r\n    }\r\n\r\n    /**\r\n     * @dev Unlocks tokens and sets initialDistributedFinished\r\n     * to true. Only callable from owner address.\r\n     */\r\n    function setInitialDistributionFinished() external onlyOwner {\r\n        initialDistributionFinished = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Enables transfers for a specific address.\r\n     * Only callable from owner address.\r\n     * @param _addr Address to enable transfers.\r\n     */\r\n    function enableTransfer(address _addr) external onlyOwner {\r\n        _allowTransfer[_addr] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets given address to have exceptions from\r\n     * swap fees. Only callable from owner address.\r\n     * @param _addr Address to set fee exemptions.\r\n     */\r\n    function setFeeExempt(address _addr) external onlyOwner {\r\n        _isFeeExempt[_addr] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if a sender (from) and receiver\r\n     * (to) need swap fees applied in transfer. Used\r\n     * in _transferFrom(address, address, uint256) internal\r\n     * function. Should only apply when user is interacting with\r\n     * the pair (to or from)\r\n     * @param from Sender address of swap\r\n     * @param to Receiver address of swap.\r\n     * @return bool True if fees apply on transfer.\r\n     */\r\n    function _shouldTakeFee(address from, address to)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        return\r\n            (taxableAddress[from] || taxableAddress[to]) &&\r\n            (!_isFeeExempt[from] && !_isFeeExempt[to]);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates swap back settings.\r\n     * @param _enabled bool value to determine of swap back is enabled.\r\n     * @param _num uint256 value for the swap back threshhold\r\n     * @param _denom uint256 value used for the threshold deminator\r\n     */\r\n    function setSwapBackSettings(\r\n        bool _enabled,\r\n        uint256 _num,\r\n        uint256 _denom\r\n    ) external onlyOwner {\r\n        swapEnabled = _enabled;\r\n        gonSwapThreshold = TOTAL_GONS.div(_denom).mul(_num);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates RX3 Rebase settings.\r\n     * @param _enabled bool value to determine of RX3 Protocol is enabled.\r\n     * @param _rebaseMaxRX3Multiplier uint256 value for the max RX3 Multiplier\r\n     * @param _rebaseRX3MultiplierStep uint256 value used for the RX3 Multiplier Step\r\n     */\r\n    function setRX3Settings(\r\n        bool _enabled,\r\n        uint256 _rebaseMaxRX3Multiplier,\r\n        uint256 _rebaseRX3MultiplierStep\r\n    ) external onlyOwner {\r\n        rebaseRX3Enabled = _enabled;\r\n        rebaseMaxRX3Multiplier = _rebaseMaxRX3Multiplier;\r\n        rebaseRX3MultiplierStep = _rebaseRX3MultiplierStep;\r\n    }\r\n\r\n    /**\r\n     * @dev Configures Rebase settings. Sets\r\n     * RebasePercentDelta, and Accuracy.\r\n     * @param _percentage value of rebase percent delta based on a daily interval (18)\r\n     * @param _accuracy defines the value of the rebase delta percentage demoninator (1000)\r\n     */\r\n    function setRebaseSettings(uint256 _percentage, uint256 _accuracy)\r\n        external\r\n        onlyOwner\r\n    {\r\n        rebasePercentDelta = (_percentage * FXP_BASE) / _accuracy;\r\n    }\r\n\r\n    /**\r\n     * @dev Check whether the a swap back can be performed.\r\n     * @return bool, true if swapBack is allowed to execute.\r\n     */\r\n    function _shouldSwapBack() internal view returns (bool) {\r\n        return\r\n            taxableAddress[msg.sender] == false &&\r\n            !inSwap &&\r\n            swapEnabled &&\r\n            _gonBalances[address(this)] >= gonSwapThreshold;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns current circulating token supply\r\n     * @return uint256, value of total circulating supply.\r\n     */\r\n    function getCirculatingSupply() public view returns (uint256) {\r\n        return\r\n            (TOTAL_GONS.sub(_gonBalances[DEAD]).sub(_gonBalances[ZERO])).div(\r\n                _gonsPerFragment\r\n            );\r\n    }\r\n\r\n    function isNotInSwap() external view returns (bool) {\r\n        return !inSwap;\r\n    }\r\n\r\n    function checkSwapThreshold() external view returns (uint256) {\r\n        return gonSwapThreshold.div(_gonsPerFragment);\r\n    }\r\n\r\n    function setFeeReceivers(\r\n        address _liquidityReceiver,\r\n        address _phenixFundReserveReceiver\r\n    ) external onlyOwner {\r\n        liquidityReceiver = _liquidityReceiver;\r\n        phenixFundReserveReceiver = _phenixFundReserveReceiver;\r\n    }\r\n\r\n    function setFees(\r\n        uint256 _liquidityFee,\r\n        uint256 _phenixVaultFee,\r\n        uint256 _sellFee,\r\n        uint256 _feeDenominator\r\n    ) external onlyOwner {\r\n        liquidityFee = _liquidityFee;\r\n        phenixVaultFee = _phenixVaultFee;\r\n        sellFee = _sellFee;\r\n        totalFee = liquidityFee.add(phenixVaultFee);\r\n        feeDenominator = _feeDenominator;\r\n        require(totalFee < feeDenominator / 4);\r\n    }\r\n\r\n    function emergencyRecoverETH() external onlyOwner {\r\n        require(address(this).balance > 0, \"No ETH to recover.\");\r\n        (bool success, ) = address(msg.sender).call{\r\n            value: address(this).balance\r\n        }(\"\");\r\n        require(success, \"Failed to recover ETH.\");\r\n    }\r\n\r\n    function emergencyRecoverToken(address _tokenAddress) external onlyOwner {\r\n        require(\r\n            IERC20(_tokenAddress).balanceOf(address(this)) > 0,\r\n            \"No tokens to recover.\"\r\n        );\r\n        IERC20(_tokenAddress).transfer(\r\n            msg.sender,\r\n            IERC20(_tokenAddress).balanceOf(address(this))\r\n        );\r\n    }\r\n\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"Rebase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addLPAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorizedRebaseAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"checkFeeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkSwapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyRecoverETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"emergencyRecoverToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"enableTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLPAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getNextRebase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialDistributionFinished\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isNotInSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRebaseDelta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRebaseTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pairAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"phenixFundReserveReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"phenixVaultFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebaseAndSync\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebaseMaxRX3Multiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebasePercentDelta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebaseRX3Enabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebaseRX3Multiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebaseRX3MultiplierStep\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetLastRebaseTimestamp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IVVSRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setAuthorizedRebaseAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_liquidityReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_phenixFundReserveReceiver\",\"type\":\"address\"}],\"name\":\"setFeeReceivers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_phenixVaultFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeDenominator\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setInitialDistributionFinished\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_rebaseMaxRX3Multiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rebaseRX3MultiplierStep\",\"type\":\"uint256\"}],\"name\":\"setRX3Settings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_accuracy\",\"type\":\"uint256\"}],\"name\":\"setRebaseSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_num\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_denom\",\"type\":\"uint256\"}],\"name\":\"setSwapBackSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setTaxableAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"taxableAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"updateRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "PhenixFinance", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://7c8f192275475dd6f94c61eea96b5ac365473a4643a1c9b7ab3df7768fe6e430"}