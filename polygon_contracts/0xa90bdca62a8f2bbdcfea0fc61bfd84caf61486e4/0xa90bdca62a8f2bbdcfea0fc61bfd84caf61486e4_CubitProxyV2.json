{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/CubitProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// Custom Cube proxy contract!\\n//           _____                    _____                    _____                    _____          \\n//          /\\\\    \\\\                  /\\\\    \\\\                  /\\\\    \\\\                  /\\\\    \\\\         \\n//         /::\\\\    \\\\                /::\\\\____\\\\                /::\\\\    \\\\                /::\\\\    \\\\        \\n//        /::::\\\\    \\\\              /:::/    /               /::::\\\\    \\\\              /::::\\\\    \\\\       \\n//       /::::::\\\\    \\\\            /:::/    /               /::::::\\\\    \\\\            /::::::\\\\    \\\\      \\n//      /:::/\\\\:::\\\\    \\\\          /:::/    /               /:::/\\\\:::\\\\    \\\\          /:::/\\\\:::\\\\    \\\\     \\n//     /:::/  \\\\:::\\\\    \\\\        /:::/    /               /:::/__\\\\:::\\\\    \\\\        /:::/__\\\\:::\\\\    \\\\    \\n//    /:::/    \\\\:::\\\\    \\\\      /:::/    /               /::::\\\\   \\\\:::\\\\    \\\\      /::::\\\\   \\\\:::\\\\    \\\\   \\n//   /:::/    / \\\\:::\\\\    \\\\    /:::/    /      _____    /::::::\\\\   \\\\:::\\\\    \\\\    /::::::\\\\   \\\\:::\\\\    \\\\  \\n//  /:::/    /   \\\\:::\\\\    \\\\  /:::/____/      /\\\\    \\\\  /:::/\\\\:::\\\\   \\\\:::\\\\ ___\\\\  /:::/\\\\:::\\\\   \\\\:::\\\\    \\\\ \\n// /:::/____/     \\\\:::\\\\____\\\\|:::|    /      /::\\\\____\\\\/:::/__\\\\:::\\\\   \\\\:::|    |/:::/__\\\\:::\\\\   \\\\:::\\\\____\\\\\\n// \\\\:::\\\\    \\\\      \\\\::/    /|:::|____\\\\     /:::/    /\\\\:::\\\\   \\\\:::\\\\  /:::|____|\\\\:::\\\\   \\\\:::\\\\   \\\\::/    /\\n//  \\\\:::\\\\    \\\\      \\\\/____/  \\\\:::\\\\    \\\\   /:::/    /  \\\\:::\\\\   \\\\:::\\\\/:::/    /  \\\\:::\\\\   \\\\:::\\\\   \\\\/____/ \\n//   \\\\:::\\\\    \\\\               \\\\:::\\\\    \\\\ /:::/    /    \\\\:::\\\\   \\\\::::::/    /    \\\\:::\\\\   \\\\:::\\\\    \\\\     \\n//    \\\\:::\\\\    \\\\               \\\\:::\\\\    /:::/    /      \\\\:::\\\\   \\\\::::/    /      \\\\:::\\\\   \\\\:::\\\\____\\\\    \\n//     \\\\:::\\\\    \\\\               \\\\:::\\\\__/:::/    /        \\\\:::\\\\  /:::/    /        \\\\:::\\\\   \\\\::/    /    \\n//      \\\\:::\\\\    \\\\               \\\\::::::::/    /          \\\\:::\\\\/:::/    /          \\\\:::\\\\   \\\\/____/     \\n//       \\\\:::\\\\    \\\\               \\\\::::::/    /            \\\\::::::/    /            \\\\:::\\\\    \\\\         \\n//        \\\\:::\\\\____\\\\               \\\\::::/    /              \\\\::::/    /              \\\\:::\\\\____\\\\        \\n//         \\\\::/    /                \\\\::/    /                \\\\::/    /                \\\\::/    /        \\n//          \\\\/____/                  \\\\/____/                  \\\\/____/                  \\\\/____/         \\n                                                                                                    \\npragma solidity ^0.8.0;\\n\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/metatx/ERC2771Context.sol\\\";\\n\\ncontract CubitProxyV2 {\\n    address public originalCubitContract;\\n    address public forwarderContract;\\n    address public owner;\\n\\n    event TransferRef(address indexed from, address indexed recipient, uint256 amount, uint256 ref);\\n    event Transfer(address indexed from, address indexed recipient, uint256 amount);\\n\\n    constructor(address _originalCubitAddress, address _forwarderAddress) {\\n        originalCubitContract = _originalCubitAddress;\\n        forwarderContract = _forwarderAddress;\\n        owner = msg.sender;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Not the owner\\\");\\n        _;\\n    }\\n\\n    // Function to allow the forwarder to check the balance of the cubit contract\\n    function balanceOf(address account) public view returns (uint256) {\\n        IERC20 cubit = IERC20(originalCubitContract);\\n        return cubit.balanceOf(account);\\n    }\\n\\n    // Function for gaslessTransfer with REFID using forwarder, user must approve this contract from Cubit contract first.\\n    function transferWithRef(address sender, address recipient, uint256 amount, uint256 ref) public {\\n        require(msg.sender == forwarderContract || msg.sender == owner, \\\"Not authorized\\\");\\n\\n        IERC20 cubit = IERC20(originalCubitContract);\\n        //uint256 amountWithDecimals = amount * (10**18);\\n\\n        cubit.transferFrom(sender, recipient, amount);\\n\\n        emit TransferRef(sender, recipient, amount, ref);\\n    }\\n\\n    // Function for gaslessTransfer without REFID user must approve this contract from Cubit contract first.\\n    function transfer(address sender, address recipient, uint256 amount) public {\\n        require(msg.sender == forwarderContract || msg.sender == owner, \\\"Not authorized\\\");\\n\\n        IERC20 cubit = IERC20(originalCubitContract);\\n        //uint256 amountWithDecimals = amount * (10**18);\\n\\n        cubit.transferFrom(sender, recipient, amount);\\n\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n\\n    // Function to Upgrade the proxy when needed.\\n    function upgradeProxy(address _newProxy) public onlyOwner {\\n        require(_newProxy != address(0), \\\"Invalid proxy address\\\");\\n        originalCubitContract = _newProxy;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/metatx/ERC2771Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (metatx/ERC2771Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Context variant with ERC2771 support.\\n */\\nabstract contract ERC2771Context is Context {\\n    address private _trustedForwarder;\\n\\n    constructor(address trustedForwarder) {\\n        _trustedForwarder = trustedForwarder;\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public view virtual returns (bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    function _msgSender() internal view virtual override returns (address sender) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return super._msgSender();\\n        }\\n    }\\n\\n    function _msgData() internal view virtual override returns (bytes calldata) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return super._msgData();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\"\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_originalCubitAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_forwarderAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ref\",\"type\":\"uint256\"}],\"name\":\"TransferRef\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forwarderContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"originalCubitContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ref\",\"type\":\"uint256\"}],\"name\":\"transferWithRef\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newProxy\",\"type\":\"address\"}],\"name\":\"upgradeProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CubitProxyV2", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000d69e880ae8a16b58782359f9e0556931ede4e5ef00000000000000000000000020723de8e6ab77181bef9478f7c3cf4f44698e69", "EVMVersion": "paris", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://95b4a4c5daff091efb041172ca10ee6d2bbd337df645cade87a86aaf7b6c8fb1"}