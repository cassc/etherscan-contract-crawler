{"SourceCode": "// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma experimental ABIEncoderV2;\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.2 <0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: contracts/storage/SmartPoolStorage.sol\r\n\r\n\r\npragma solidity ^0.7.6;\r\n\r\nlibrary SmartPoolStorage {\r\n\r\n    bytes32 public constant sSlot = keccak256(\"SmartPoolStorage.storage.location\");\r\n\r\n    struct Storage {\r\n        mapping(FeeType => Fee) fees;\r\n        mapping(address => uint256) nets;\r\n        address token;\r\n        address am;\r\n        address weth;\r\n        uint256 cap;\r\n        uint256 lup;\r\n        bool suspend;\r\n        bool allowJoin;\r\n        bool allowExit;\r\n    }\r\n\r\n    struct Fee {\r\n        uint256 ratio;\r\n        uint256 denominator;\r\n        uint256 lastTimestamp;\r\n        uint256 minLine;\r\n    }\r\n\r\n    enum FeeType{\r\n        JOIN_FEE, EXIT_FEE, MANAGEMENT_FEE, PERFORMANCE_FEE,TURNOVER_FEE\r\n    }\r\n\r\n    function load() internal pure returns (Storage storage s) {\r\n        bytes32 loc = sSlot;\r\n        assembly {\r\n            s.slot := loc\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/IVault.sol\r\n\r\n\r\npragma solidity ^0.7.6;\r\n\r\n\r\n\r\n/// @title Vault - the vault interface\r\n/// @notice This contract extends ERC20, defines basic vault functions and rewrites ERC20 transferFrom function\r\ninterface IVault {\r\n\r\n    /// @notice Vault cap\r\n    /// @dev The max number of vault to be issued\r\n    /// @return Max vault cap\r\n    function getCap() external view returns (uint256);\r\n\r\n    /// @notice Get fee by type\r\n    /// @dev (0=JOIN_FEE,1=EXIT_FEE,2=MANAGEMENT_FEE,3=PERFORMANCE_FEE,4=TURNOVER_FEE)\r\n    /// @param ft Fee type\r\n    function getFee(SmartPoolStorage.FeeType ft) external view returns (SmartPoolStorage.Fee memory);\r\n\r\n    /// @notice Calculate the fee by ratio\r\n    /// @dev This is used to calculate join and redeem fee\r\n    /// @param ft Fee type\r\n    /// @param vaultAmount vault amount\r\n    function calcRatioFee(SmartPoolStorage.FeeType ft, uint256 vaultAmount) external view returns (uint256);\r\n\r\n\r\n    /// @notice The net worth of the vault from the time the last fee collected\r\n    /// @dev This is used to calculate the performance fee\r\n    /// @param account Account address\r\n    /// @return The net worth of the vault\r\n    function accountNetValue(address account) external view returns (uint256);\r\n\r\n    /// @notice The current vault net worth\r\n    /// @dev This is used to update and calculate account net worth\r\n    /// @return The net worth of the vault\r\n    function globalNetValue() external view returns (uint256);\r\n\r\n    /// @notice Convert vault amount to cash amount\r\n    /// @dev This converts the user vault amount to cash amount when a user redeems the vault\r\n    /// @param vaultAmount Redeem vault amount\r\n    /// @return Cash amount\r\n    function convertToCash(uint256 vaultAmount) external view returns (uint256);\r\n\r\n    /// @notice Convert cash amount to share amount\r\n    /// @dev This converts cash amount to share amount when a user buys the vault\r\n    /// @param cashAmount Join cash amount\r\n    /// @return share amount\r\n    function convertToShare(uint256 cashAmount) external view returns (uint256);\r\n\r\n    /// @notice Vault token address for joining and redeeming\r\n    /// @dev This is address is created when the vault is first created.\r\n    /// @return Vault token address\r\n    function ioToken() external view returns (address);\r\n\r\n    /// @notice Vault mangement contract address\r\n    /// @dev The vault management contract address is bind to the vault when the vault is created\r\n    /// @return Vault management contract address\r\n    function AM() external view returns (address);\r\n\r\n    /// @notice Vault total asset\r\n    /// @dev This calculates vault net worth or AUM\r\n    /// @return Vault total asset\r\n    function assets()external view returns(uint256);\r\n\r\n}\r\n\r\n// File: contracts/libraries/EnumerableSetExtends.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\r\n * and `uint256` (`UintSet`) are supported.\r\n */\r\nlibrary EnumerableSetExtends {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping (bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\r\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\r\n\r\n            bytes32 lastvalue = set._values[lastIndex];\r\n\r\n            // Move the last value to the index where the value to delete is\r\n            set._values[toDeleteIndex] = lastvalue;\r\n            // Update the index for the moved value\r\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\r\n        return set._values[index];\r\n    }\r\n\r\n    /**\r\n     * @dev Returns The index position of the value\r\n     */\r\n    function _indexOf(Set storage set, bytes32 value) private view returns (uint256) {\r\n        return set._indexes[value];\r\n    }\r\n\r\n    // Bytes32Set\r\n\r\n    struct Bytes32Set {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _add(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _remove(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\r\n        return _contains(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(Bytes32Set storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\r\n        return _at(set._inner, index);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns The index position of the value\r\n     */\r\n    function indexOf(Bytes32Set storage set, bytes32 value) internal view returns (uint256) {\r\n        return _indexOf(set._inner, value);\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint160(uint256(_at(set._inner, index))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns The index position of the value\r\n     */\r\n    function indexOf(AddressSet storage set, address value) internal view returns (uint256) {\r\n        return _indexOf(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns The index position of the value\r\n     */\r\n    function indexOf(UintSet storage set, uint256 value) internal view returns (uint256) {\r\n        return _indexOf(set._inner, bytes32(value));\r\n    }\r\n}\r\n\r\n// File: contracts/libraries/ERC20Extends.sol\r\n\r\n\r\npragma solidity ^0.7.6;\r\n\r\n\r\n\r\n/// @title ERC20 extends libraries\r\n/// @notice libraries\r\nlibrary ERC20Extends {\r\n\r\n    using SafeERC20 for IERC20;\r\n\r\n    /// @notice Safe approve\r\n    /// @dev Avoid errors that occur in some ERC20 token authorization restrictions\r\n    /// @param token Approval token address\r\n    /// @param to Approval address\r\n    /// @param amount Approval amount\r\n    function safeApprove(address token, address to, uint256 amount) internal {\r\n        IERC20 tokenErc20 = IERC20(token);\r\n        uint256 allowance = tokenErc20.allowance(address(this), to);\r\n        if (allowance < amount) {\r\n            if (allowance > 0) {\r\n                tokenErc20.safeApprove(to, 0);\r\n            }\r\n            tokenErc20.safeApprove(to, amount);\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/introspection/IERC165.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.2 <0.8.0;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n      *\r\n      * Requirements:\r\n      *\r\n      * - `from` cannot be the zero address.\r\n      * - `to` cannot be the zero address.\r\n      * - `tokenId` token must exist and be owned by `from`.\r\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n      *\r\n      * Emits a {Transfer} event.\r\n      */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\r\n}\r\n\r\n// File: contracts/interfaces/uniswap-v3/INonfungiblePositionManager.sol\r\n\r\n\r\npragma solidity >=0.5.0;\r\n\r\n\r\n\r\ninterface INonfungiblePositionManager is IERC721\r\n{\r\n    /// @notice Returns the position information associated with a given token ID.\r\n    /// @dev Throws if the token ID is not valid.\r\n    /// @param tokenId The ID of the token that represents the position\r\n    /// @return nonce The nonce for permits\r\n    /// @return operator The address that is approved for spending\r\n    /// @return token0 The address of the token0 for a specific pool\r\n    /// @return token1 The address of the token1 for a specific pool\r\n    /// @return fee The fee associated with the pool\r\n    /// @return tickLower The lower end of the tick range for the position\r\n    /// @return tickUpper The higher end of the tick range for the position\r\n    /// @return liquidity The liquidity of the position\r\n    /// @return feeGrowthInside0LastX128 The fee growth of token0 as of the last action on the individual position\r\n    /// @return feeGrowthInside1LastX128 The fee growth of token1 as of the last action on the individual position\r\n    /// @return tokensOwed0 The uncollected amount of token0 owed to the position as of the last computation\r\n    /// @return tokensOwed1 The uncollected amount of token1 owed to the position as of the last computation\r\n    function positions(uint256 tokenId)\r\n    external\r\n    view\r\n    returns (\r\n        uint96 nonce,\r\n        address operator,\r\n        address token0,\r\n        address token1,\r\n        uint24 fee,\r\n        int24 tickLower,\r\n        int24 tickUpper,\r\n        uint128 liquidity,\r\n        uint256 feeGrowthInside0LastX128,\r\n        uint256 feeGrowthInside1LastX128,\r\n        uint128 tokensOwed0,\r\n        uint128 tokensOwed1\r\n    );\r\n\r\n    struct MintParams {\r\n        address token0;\r\n        address token1;\r\n        uint24 fee;\r\n        int24 tickLower;\r\n        int24 tickUpper;\r\n        uint256 amount0Desired;\r\n        uint256 amount1Desired;\r\n        uint256 amount0Min;\r\n        uint256 amount1Min;\r\n        address recipient;\r\n        uint256 deadline;\r\n    }\r\n\r\n    /// @notice Creates a new position wrapped in a NFT\r\n    /// @dev Call this when the pool does exist and is initialized. Note that if the pool is created but not initialized\r\n    /// a method does not exist, i.e. the pool is assumed to be initialized.\r\n    /// @param params The params necessary to mint a position, encoded as `MintParams` in calldata\r\n    /// @return tokenId The ID of the token that represents the minted position\r\n    /// @return liquidity The amount of liquidity for this position\r\n    /// @return amount0 The amount of token0\r\n    /// @return amount1 The amount of token1\r\n    function mint(MintParams calldata params)\r\n    external\r\n    payable\r\n    returns (\r\n        uint256 tokenId,\r\n        uint128 liquidity,\r\n        uint256 amount0,\r\n        uint256 amount1\r\n    );\r\n\r\n    struct IncreaseLiquidityParams {\r\n        uint256 tokenId;\r\n        uint256 amount0Desired;\r\n        uint256 amount1Desired;\r\n        uint256 amount0Min;\r\n        uint256 amount1Min;\r\n        uint256 deadline;\r\n    }\r\n\r\n    /// @notice Increases the amount of liquidity in a position, with tokens paid by the `msg.sender`\r\n    /// @param params tokenId The ID of the token for which liquidity is being increased,\r\n    /// amount0Desired The desired amount of token0 to be spent,\r\n    /// amount1Desired The desired amount of token1 to be spent,\r\n    /// amount0Min The minimum amount of token0 to spend, which serves as a slippage check,\r\n    /// amount1Min The minimum amount of token1 to spend, which serves as a slippage check,\r\n    /// deadline The time by which the transaction must be included to effect the change\r\n    /// @return liquidity The new liquidity amount as a result of the increase\r\n    /// @return amount0 The amount of token0 to acheive resulting liquidity\r\n    /// @return amount1 The amount of token1 to acheive resulting liquidity\r\n    function increaseLiquidity(IncreaseLiquidityParams calldata params)\r\n    external\r\n    payable\r\n    returns (\r\n        uint128 liquidity,\r\n        uint256 amount0,\r\n        uint256 amount1\r\n    );\r\n\r\n    struct DecreaseLiquidityParams {\r\n        uint256 tokenId;\r\n        uint128 liquidity;\r\n        uint256 amount0Min;\r\n        uint256 amount1Min;\r\n        uint256 deadline;\r\n    }\r\n\r\n    /// @notice Decreases the amount of liquidity in a position and accounts it to the position\r\n    /// @param params tokenId The ID of the token for which liquidity is being decreased,\r\n    /// amount The amount by which liquidity will be decreased,\r\n    /// amount0Min The minimum amount of token0 that should be accounted for the burned liquidity,\r\n    /// amount1Min The minimum amount of token1 that should be accounted for the burned liquidity,\r\n    /// deadline The time by which the transaction must be included to effect the change\r\n    /// @return amount0 The amount of token0 accounted to the position's tokens owed\r\n    /// @return amount1 The amount of token1 accounted to the position's tokens owed\r\n    function decreaseLiquidity(DecreaseLiquidityParams calldata params)\r\n    external\r\n    payable\r\n    returns (uint256 amount0, uint256 amount1);\r\n\r\n    struct CollectParams {\r\n        uint256 tokenId;\r\n        address recipient;\r\n        uint128 amount0Max;\r\n        uint128 amount1Max;\r\n    }\r\n\r\n    /// @notice Collects up to a maximum amount of fees owed to a specific position to the recipient\r\n    /// @param params tokenId The ID of the NFT for which tokens are being collected,\r\n    /// recipient The account that should receive the tokens,\r\n    /// amount0Max The maximum amount of token0 to collect,\r\n    /// amount1Max The maximum amount of token1 to collect\r\n    /// @return amount0 The amount of fees collected in token0\r\n    /// @return amount1 The amount of fees collected in token1\r\n    function collect(CollectParams calldata params) external payable returns (uint256 amount0, uint256 amount1);\r\n\r\n    /// @notice Burns a token ID, which deletes it from the NFT contract. The token must have 0 liquidity and all tokens\r\n    /// must be collected first.\r\n    /// @param tokenId The ID of the token that is being burned\r\n    function burn(uint256 tokenId) external payable;\r\n}\r\n\r\n// File: contracts/interfaces/uniswap-v3/IUniswapV3Pool.sol\r\n\r\n\r\npragma solidity >=0.5.0;\r\n\r\n/// @title The interface for a Uniswap V3 Pool\r\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\r\n/// to the ERC20 specification\r\n/// @dev The pool interface is broken up into many smaller pieces\r\ninterface IUniswapV3Pool {\r\n\r\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\r\n    /// when accessed externally.\r\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\r\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\r\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\r\n    /// boundary.\r\n    /// observationIndex The index of the last oracle observation that was written,\r\n    /// observationCardinality The current maximum number of observations stored in the pool,\r\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\r\n    /// feeProtocol The protocol fee for both tokens of the pool.\r\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\r\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\r\n    /// unlocked Whether the pool is currently locked to reentrancy\r\n    function slot0()\r\n    external\r\n    view\r\n    returns (\r\n        uint160 sqrtPriceX96,\r\n        int24 tick,\r\n        uint16 observationIndex,\r\n        uint16 observationCardinality,\r\n        uint16 observationCardinalityNext,\r\n        uint8 feeProtocol,\r\n        bool unlocked\r\n    );\r\n\r\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\r\n    /// @dev This value can overflow the uint256\r\n    function feeGrowthGlobal0X128() external view returns (uint256);\r\n\r\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\r\n    /// @dev This value can overflow the uint256\r\n    function feeGrowthGlobal1X128() external view returns (uint256);\r\n\r\n\r\n    /// @notice Look up information about a specific tick in the pool\r\n    /// @param tick The tick to look up\r\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\r\n    /// tick upper,\r\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\r\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\r\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\r\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\r\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\r\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\r\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\r\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\r\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\r\n    /// a specific position.\r\n    function ticks(int24 tick)\r\n    external\r\n    view\r\n    returns (\r\n        uint128 liquidityGross,\r\n        int128 liquidityNet,\r\n        uint256 feeGrowthOutside0X128,\r\n        uint256 feeGrowthOutside1X128,\r\n        int56 tickCumulativeOutside,\r\n        uint160 secondsPerLiquidityOutsideX128,\r\n        uint32 secondsOutside,\r\n        bool initialized\r\n    );\r\n\r\n\r\n}\r\n\r\n// File: contracts/interfaces/uniswap-v3/TickMath.sol\r\n\r\n\r\npragma solidity >=0.5.0;\r\n\r\n/// @title Math library for computing sqrt prices from ticks and vice versa\r\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\r\n/// prices between 2**-128 and 2**128\r\nlibrary TickMath {\r\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\r\n    int24 internal constant MIN_TICK = - 887272;\r\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\r\n    int24 internal constant MAX_TICK = - MIN_TICK;\r\n\r\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\r\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\r\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\r\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\r\n\r\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\r\n    /// @dev Throws if |tick| > max tick\r\n    /// @param tick The input tick for the above formula\r\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\r\n    /// at the given tick\r\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\r\n        uint256 absTick = tick < 0 ? uint256(- int256(tick)) : uint256(int256(tick));\r\n        require(absTick <= uint256(MAX_TICK), 'T');\r\n\r\n        uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\r\n        if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\r\n        if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\r\n        if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\r\n        if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\r\n        if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\r\n        if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\r\n        if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\r\n        if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\r\n        if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\r\n        if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\r\n        if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\r\n        if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\r\n        if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\r\n        if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\r\n        if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\r\n        if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\r\n        if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\r\n        if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\r\n        if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\r\n\r\n        if (tick > 0) ratio = type(uint256).max / ratio;\r\n\r\n        // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\r\n        // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\r\n        // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\r\n        sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\r\n    }\r\n\r\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\r\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\r\n    /// ever return.\r\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\r\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\r\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\r\n        // second inequality must be < because the price can never reach the price at the max tick\r\n        require(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO, 'R');\r\n        uint256 ratio = uint256(sqrtPriceX96) << 32;\r\n\r\n        uint256 r = ratio;\r\n        uint256 msb = 0;\r\n\r\n        assembly {\r\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\r\n            msb := or(msb, f)\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\r\n            msb := or(msb, f)\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            let f := shl(5, gt(r, 0xFFFFFFFF))\r\n            msb := or(msb, f)\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            let f := shl(4, gt(r, 0xFFFF))\r\n            msb := or(msb, f)\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            let f := shl(3, gt(r, 0xFF))\r\n            msb := or(msb, f)\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            let f := shl(2, gt(r, 0xF))\r\n            msb := or(msb, f)\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            let f := shl(1, gt(r, 0x3))\r\n            msb := or(msb, f)\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            let f := gt(r, 0x1)\r\n            msb := or(msb, f)\r\n        }\r\n\r\n        if (msb >= 128) r = ratio >> (msb - 127);\r\n        else r = ratio << (127 - msb);\r\n\r\n        int256 log_2 = (int256(msb) - 128) << 64;\r\n\r\n        assembly {\r\n            r := shr(127, mul(r, r))\r\n            let f := shr(128, r)\r\n            log_2 := or(log_2, shl(63, f))\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            r := shr(127, mul(r, r))\r\n            let f := shr(128, r)\r\n            log_2 := or(log_2, shl(62, f))\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            r := shr(127, mul(r, r))\r\n            let f := shr(128, r)\r\n            log_2 := or(log_2, shl(61, f))\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            r := shr(127, mul(r, r))\r\n            let f := shr(128, r)\r\n            log_2 := or(log_2, shl(60, f))\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            r := shr(127, mul(r, r))\r\n            let f := shr(128, r)\r\n            log_2 := or(log_2, shl(59, f))\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            r := shr(127, mul(r, r))\r\n            let f := shr(128, r)\r\n            log_2 := or(log_2, shl(58, f))\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            r := shr(127, mul(r, r))\r\n            let f := shr(128, r)\r\n            log_2 := or(log_2, shl(57, f))\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            r := shr(127, mul(r, r))\r\n            let f := shr(128, r)\r\n            log_2 := or(log_2, shl(56, f))\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            r := shr(127, mul(r, r))\r\n            let f := shr(128, r)\r\n            log_2 := or(log_2, shl(55, f))\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            r := shr(127, mul(r, r))\r\n            let f := shr(128, r)\r\n            log_2 := or(log_2, shl(54, f))\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            r := shr(127, mul(r, r))\r\n            let f := shr(128, r)\r\n            log_2 := or(log_2, shl(53, f))\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            r := shr(127, mul(r, r))\r\n            let f := shr(128, r)\r\n            log_2 := or(log_2, shl(52, f))\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            r := shr(127, mul(r, r))\r\n            let f := shr(128, r)\r\n            log_2 := or(log_2, shl(51, f))\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            r := shr(127, mul(r, r))\r\n            let f := shr(128, r)\r\n            log_2 := or(log_2, shl(50, f))\r\n        }\r\n\r\n        int256 log_sqrt10001 = log_2 * 255738958999603826347141;\r\n        // 128.128 number\r\n\r\n        int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\r\n        int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\r\n\r\n        tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/uniswap-v3/FullMath.sol\r\n\r\n\r\npragma solidity >=0.4.0;\r\n\r\n/// @title Contains 512-bit math functions\r\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\r\n/// @dev Handles \"phantom overflow\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\r\nlibrary FullMath {\r\n    /// @notice Calculates floor(a\u00d7b\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\r\n    /// @param a The multiplicand\r\n    /// @param b The multiplier\r\n    /// @param denominator The divisor\r\n    /// @return result The 256-bit result\r\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\r\n    function mulDiv(\r\n        uint256 a,\r\n        uint256 b,\r\n        uint256 denominator\r\n    ) internal pure returns (uint256 result) {\r\n        // 512-bit multiply [prod1 prod0] = a * b\r\n        // Compute the product mod 2**256 and mod 2**256 - 1\r\n        // then use the Chinese Remainder Theorem to reconstruct\r\n        // the 512 bit result. The result is stored in two 256\r\n        // variables such that product = prod1 * 2**256 + prod0\r\n        uint256 prod0;\r\n        // Least significant 256 bits of the product\r\n        uint256 prod1;\r\n        // Most significant 256 bits of the product\r\n        assembly {\r\n            let mm := mulmod(a, b, not(0))\r\n            prod0 := mul(a, b)\r\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\r\n        }\r\n\r\n        // Handle non-overflow cases, 256 by 256 division\r\n        if (prod1 == 0) {\r\n            require(denominator > 0);\r\n            assembly {\r\n                result := div(prod0, denominator)\r\n            }\r\n            return result;\r\n        }\r\n\r\n        // Make sure the result is less than 2**256.\r\n        // Also prevents denominator == 0\r\n        require(denominator > prod1);\r\n\r\n        ///////////////////////////////////////////////\r\n        // 512 by 256 division.\r\n        ///////////////////////////////////////////////\r\n\r\n        // Make division exact by subtracting the remainder from [prod1 prod0]\r\n        // Compute remainder using mulmod\r\n        uint256 remainder;\r\n        assembly {\r\n            remainder := mulmod(a, b, denominator)\r\n        }\r\n        // Subtract 256 bit number from 512 bit number\r\n        assembly {\r\n            prod1 := sub(prod1, gt(remainder, prod0))\r\n            prod0 := sub(prod0, remainder)\r\n        }\r\n\r\n        // Factor powers of two out of denominator\r\n        // Compute largest power of two divisor of denominator.\r\n        // Always >= 1.\r\n        uint256 twos = - denominator & denominator;\r\n\r\n        // Divide denominator by power of two\r\n        assembly {\r\n            denominator := div(denominator, twos)\r\n        }\r\n\r\n        // Divide [prod1 prod0] by the factors of two\r\n        assembly {\r\n            prod0 := div(prod0, twos)\r\n        }\r\n        // Shift in bits from prod1 into prod0. For this we need\r\n        // to flip `twos` such that it is 2**256 / twos.\r\n        // If twos is zero, then it becomes one\r\n        assembly {\r\n            twos := add(div(sub(0, twos), twos), 1)\r\n        }\r\n        prod0 |= prod1 * twos;\r\n\r\n        // Invert denominator mod 2**256\r\n        // Now that denominator is an odd number, it has an inverse\r\n        // modulo 2**256 such that denominator * inv = 1 mod 2**256.\r\n        // Compute the inverse by starting with a seed that is correct\r\n        // correct for four bits. That is, denominator * inv = 1 mod 2**4\r\n        uint256 inv = (3 * denominator) ^ 2;\r\n        // Now use Newton-Raphson iteration to improve the precision.\r\n        // Thanks to Hensel's lifting lemma, this also works in modular\r\n        // arithmetic, doubling the correct bits in each step.\r\n        inv *= 2 - denominator * inv;\r\n        // inverse mod 2**8\r\n        inv *= 2 - denominator * inv;\r\n        // inverse mod 2**16\r\n        inv *= 2 - denominator * inv;\r\n        // inverse mod 2**32\r\n        inv *= 2 - denominator * inv;\r\n        // inverse mod 2**64\r\n        inv *= 2 - denominator * inv;\r\n        // inverse mod 2**128\r\n        inv *= 2 - denominator * inv;\r\n        // inverse mod 2**256\r\n\r\n        // Because the division is now exact we can divide by multiplying\r\n        // with the modular inverse of denominator. This will give us the\r\n        // correct result modulo 2**256. Since the precoditions guarantee\r\n        // that the outcome is less than 2**256, this is the final result.\r\n        // We don't need to compute the high bits of the result and prod1\r\n        // is no longer required.\r\n        result = prod0 * inv;\r\n        return result;\r\n    }\r\n\r\n    /// @notice Calculates ceil(a\u00d7b\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\r\n    /// @param a The multiplicand\r\n    /// @param b The multiplier\r\n    /// @param denominator The divisor\r\n    /// @return result The 256-bit result\r\n    function mulDivRoundingUp(\r\n        uint256 a,\r\n        uint256 b,\r\n        uint256 denominator\r\n    ) internal pure returns (uint256 result) {\r\n        result = mulDiv(a, b, denominator);\r\n        if (mulmod(a, b, denominator) > 0) {\r\n            require(result < type(uint256).max);\r\n            result++;\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/uniswap-v3/FixedPoint96.sol\r\n\r\n\r\npragma solidity >=0.4.0;\r\n\r\n/// @title FixedPoint96\r\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\r\n/// @dev Used in SqrtPriceMath.sol\r\nlibrary FixedPoint96 {\r\n    uint8 internal constant RESOLUTION = 96;\r\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\r\n}\r\n\r\n// File: contracts/interfaces/uniswap-v3/LiquidityAmounts.sol\r\n\r\n\r\npragma solidity >=0.5.0;\r\n\r\n\r\n\r\n/// @title Liquidity amount functions\r\n/// @notice Provides functions for computing liquidity amounts from token amounts and prices\r\nlibrary LiquidityAmounts {\r\n    /// @notice Downcasts uint256 to uint128\r\n    /// @param x The uint258 to be downcasted\r\n    /// @return y The passed value, downcasted to uint128\r\n    function toUint128(uint256 x) private pure returns (uint128 y) {\r\n        require((y = uint128(x)) == x);\r\n    }\r\n\r\n    /// @notice Computes the amount of liquidity received for a given amount of token0 and price range\r\n    /// @dev Calculates amount0 * (sqrt(upper) * sqrt(lower)) / (sqrt(upper) - sqrt(lower))\r\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\r\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\r\n    /// @param amount0 The amount0 being sent in\r\n    /// @return liquidity The amount of returned liquidity\r\n    function getLiquidityForAmount0(\r\n        uint160 sqrtRatioAX96,\r\n        uint160 sqrtRatioBX96,\r\n        uint256 amount0\r\n    ) internal pure returns (uint128 liquidity) {\r\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\r\n        uint256 intermediate = FullMath.mulDiv(sqrtRatioAX96, sqrtRatioBX96, FixedPoint96.Q96);\r\n        return toUint128(FullMath.mulDiv(amount0, intermediate, sqrtRatioBX96 - sqrtRatioAX96));\r\n    }\r\n\r\n    /// @notice Computes the amount of liquidity received for a given amount of token1 and price range\r\n    /// @dev Calculates amount1 / (sqrt(upper) - sqrt(lower)).\r\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\r\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\r\n    /// @param amount1 The amount1 being sent in\r\n    /// @return liquidity The amount of returned liquidity\r\n    function getLiquidityForAmount1(\r\n        uint160 sqrtRatioAX96,\r\n        uint160 sqrtRatioBX96,\r\n        uint256 amount1\r\n    ) internal pure returns (uint128 liquidity) {\r\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\r\n        return toUint128(FullMath.mulDiv(amount1, FixedPoint96.Q96, sqrtRatioBX96 - sqrtRatioAX96));\r\n    }\r\n\r\n    /// @notice Computes the maximum amount of liquidity received for a given amount of token0, token1, the current\r\n    /// pool prices and the prices at the tick boundaries\r\n    /// @param sqrtRatioX96 A sqrt price representing the current pool prices\r\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\r\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\r\n    /// @param amount0 The amount of token0 being sent in\r\n    /// @param amount1 The amount of token1 being sent in\r\n    /// @return liquidity The maximum amount of liquidity received\r\n    function getLiquidityForAmounts(\r\n        uint160 sqrtRatioX96,\r\n        uint160 sqrtRatioAX96,\r\n        uint160 sqrtRatioBX96,\r\n        uint256 amount0,\r\n        uint256 amount1\r\n    ) internal pure returns (uint128 liquidity) {\r\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\r\n\r\n        if (sqrtRatioX96 <= sqrtRatioAX96) {\r\n            liquidity = getLiquidityForAmount0(sqrtRatioAX96, sqrtRatioBX96, amount0);\r\n        } else if (sqrtRatioX96 < sqrtRatioBX96) {\r\n            uint128 liquidity0 = getLiquidityForAmount0(sqrtRatioX96, sqrtRatioBX96, amount0);\r\n            uint128 liquidity1 = getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioX96, amount1);\r\n\r\n            liquidity = liquidity0 < liquidity1 ? liquidity0 : liquidity1;\r\n        } else {\r\n            liquidity = getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioBX96, amount1);\r\n        }\r\n    }\r\n\r\n    /// @notice Computes the amount of token0 for a given amount of liquidity and a price range\r\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\r\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\r\n    /// @param liquidity The liquidity being valued\r\n    /// @return amount0 The amount of token0\r\n    function getAmount0ForLiquidity(\r\n        uint160 sqrtRatioAX96,\r\n        uint160 sqrtRatioBX96,\r\n        uint128 liquidity\r\n    ) internal pure returns (uint256 amount0) {\r\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\r\n\r\n        return\r\n        FullMath.mulDiv(\r\n            uint256(liquidity) << FixedPoint96.RESOLUTION,\r\n            sqrtRatioBX96 - sqrtRatioAX96,\r\n            sqrtRatioBX96\r\n        ) / sqrtRatioAX96;\r\n    }\r\n\r\n    /// @notice Computes the amount of token1 for a given amount of liquidity and a price range\r\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\r\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\r\n    /// @param liquidity The liquidity being valued\r\n    /// @return amount1 The amount of token1\r\n    function getAmount1ForLiquidity(\r\n        uint160 sqrtRatioAX96,\r\n        uint160 sqrtRatioBX96,\r\n        uint128 liquidity\r\n    ) internal pure returns (uint256 amount1) {\r\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\r\n\r\n        return FullMath.mulDiv(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96);\r\n    }\r\n\r\n    /// @notice Computes the token0 and token1 value for a given amount of liquidity, the current\r\n    /// pool prices and the prices at the tick boundaries\r\n    /// @param sqrtRatioX96 A sqrt price representing the current pool prices\r\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\r\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\r\n    /// @param liquidity The liquidity being valued\r\n    /// @return amount0 The amount of token0\r\n    /// @return amount1 The amount of token1\r\n    function getAmountsForLiquidity(\r\n        uint160 sqrtRatioX96,\r\n        uint160 sqrtRatioAX96,\r\n        uint160 sqrtRatioBX96,\r\n        uint128 liquidity\r\n    ) internal pure returns (uint256 amount0, uint256 amount1) {\r\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\r\n\r\n        if (sqrtRatioX96 <= sqrtRatioAX96) {\r\n            amount0 = getAmount0ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity);\r\n        } else if (sqrtRatioX96 < sqrtRatioBX96) {\r\n            amount0 = getAmount0ForLiquidity(sqrtRatioX96, sqrtRatioBX96, liquidity);\r\n            amount1 = getAmount1ForLiquidity(sqrtRatioAX96, sqrtRatioX96, liquidity);\r\n        } else {\r\n            amount1 = getAmount1ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity);\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/uniswap-v3/FixedPoint128.sol\r\n\r\n\r\npragma solidity >=0.4.0;\r\n\r\n/// @title FixedPoint128\r\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\r\nlibrary FixedPoint128 {\r\n    uint256 internal constant Q128 = 0x100000000000000000000000000000000;\r\n}\r\n\r\n// File: contracts/interfaces/uniswap-v3/PoolAddress.sol\r\n\r\n\r\npragma solidity >=0.5.0;\r\n\r\n/// @title Provides functions for deriving a pool address from the factory, tokens, and the fee\r\nlibrary PoolAddress {\r\n    bytes32 internal constant POOL_INIT_CODE_HASH = 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54;\r\n\r\n    //Uniswap V3 Factory\r\n    address constant private factory = address(0x1F98431c8aD98523631AE4a59f267346ea31F984);\r\n\r\n    /// @notice The identifying key of the pool\r\n    struct PoolKey {\r\n        address token0;\r\n        address token1;\r\n        uint24 fee;\r\n    }\r\n\r\n    /// @dev Returns the pool for the given token pair and fee. The pool contract may or may not exist.\r\n    function getPool(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint24 fee\r\n    ) internal pure returns (address) {\r\n        return computeAddress(getPoolKey(tokenA, tokenB, fee));\r\n    }\r\n\r\n    /// @notice Returns PoolKey: the ordered tokens with the matched fee levels\r\n    /// @param tokenA The first token of a pool, unsorted\r\n    /// @param tokenB The second token of a pool, unsorted\r\n    /// @param fee The fee level of the pool\r\n    /// @return Poolkey The pool details with ordered token0 and token1 assignments\r\n    function getPoolKey(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint24 fee\r\n    ) internal pure returns (PoolKey memory) {\r\n        if (tokenA > tokenB) (tokenA, tokenB) = (tokenB, tokenA);\r\n        return PoolKey({token0 : tokenA, token1 : tokenB, fee : fee});\r\n    }\r\n\r\n    /// @notice Deterministically computes the pool address given the factory and PoolKey\r\n    /// @param key The PoolKey\r\n    /// @return pool The contract address of the V3 pool\r\n    function computeAddress(PoolKey memory key) internal pure returns (address pool) {\r\n        require(key.token0 < key.token1);\r\n        pool = address(\r\n            uint256(\r\n                keccak256(\r\n                    abi.encodePacked(\r\n                        hex'ff',\r\n                        factory,\r\n                        keccak256(abi.encode(key.token0, key.token1, key.fee)),\r\n                        POOL_INIT_CODE_HASH\r\n                    )\r\n                )\r\n            )\r\n        );\r\n    }\r\n}\r\n\r\n// File: contracts/libraries/UniV3PMExtends.sol\r\n\r\n\r\npragma solidity ^0.7.6;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/// @title UniV3 extends libraries\r\n/// @notice libraries\r\nlibrary UniV3PMExtends {\r\n\r\n    //Nonfungible Position Manager\r\n    INonfungiblePositionManager constant internal PM = INonfungiblePositionManager(0xC36442b4a4522E871399CD717aBDD847Ab11FE88);\r\n\r\n    /// @notice Position id\r\n    /// @dev Position ID\r\n    /// @param addr any address\r\n    /// @param tickLower Tick lower price bound\r\n    /// @param tickUpper Tick upper price bound\r\n    /// @return ABI encode\r\n    function positionKey(\r\n        address addr,\r\n        int24 tickLower,\r\n        int24 tickUpper\r\n    ) internal pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(addr, tickLower, tickUpper));\r\n    }\r\n\r\n    /// @notice get pool by tokenId\r\n    /// @param tokenId position Id\r\n    function getPool(uint256 tokenId) internal view returns (address){\r\n        (\r\n        ,\r\n        ,\r\n        address token0,\r\n        address token1,\r\n        uint24 fee,\r\n        ,\r\n        ,\r\n        ,\r\n        ,\r\n        ,\r\n        ,\r\n        ) = PM.positions(tokenId);\r\n        return PoolAddress.getPool(token0, token1, fee);\r\n    }\r\n\r\n    /// @notice Calculate the number of redeemable tokens based on the amount of liquidity\r\n    /// @dev Used when redeeming liquidity\r\n    /// @param token0 Token 0 address\r\n    /// @param token1 Token 1 address\r\n    /// @param fee Fee rate\r\n    /// @param tickLower Tick lower price bound\r\n    /// @param tickUpper Tick upper price bound\r\n    /// @param liquidity Liquidity amount\r\n    /// @return amount0 Token 0 amount\r\n    /// @return amount1 Token 1 amount\r\n    function getAmountsForLiquidity(\r\n        address token0,\r\n        address token1,\r\n        uint24 fee,\r\n        int24 tickLower,\r\n        int24 tickUpper,\r\n        uint128 liquidity\r\n    ) internal view returns (uint256 amount0, uint256 amount1) {\r\n        (uint160 sqrtPriceX96,,,,,,) = IUniswapV3Pool(PoolAddress.getPool(token0, token1, fee)).slot0();\r\n        uint160 sqrtRatioAX96 = TickMath.getSqrtRatioAtTick(tickLower);\r\n        uint160 sqrtRatioBX96 = TickMath.getSqrtRatioAtTick(tickUpper);\r\n        (amount0, amount1) = LiquidityAmounts.getAmountsForLiquidity(\r\n            sqrtPriceX96,\r\n            sqrtRatioAX96,\r\n            sqrtRatioBX96,\r\n            liquidity\r\n        );\r\n    }\r\n\r\n    ///@notice Calculate unreceived handling fees for liquid positions\r\n    /// @param tokenId Position ID\r\n    /// @return fee0 Token 0 fee amount\r\n    /// @return fee1 Token 1 fee amount\r\n    function getFeesForLiquidity(\r\n        uint256 tokenId\r\n    ) internal view returns (uint256 fee0, uint256 fee1){\r\n        (\r\n        ,\r\n        ,\r\n        ,\r\n        ,\r\n        ,\r\n        ,\r\n        ,\r\n        uint128 liquidity,\r\n        uint256 feeGrowthInside0LastX128,\r\n        uint256 feeGrowthInside1LastX128,\r\n        uint128 tokensOwed0,\r\n        uint128 tokensOwed1\r\n        ) = PM.positions(tokenId);\r\n        (uint256 feeGrowthInside0X128, uint256 feeGrowthInside1X128) = getFeeGrowthInside(tokenId);\r\n        fee0 = tokensOwed0 + FullMath.mulDiv(\r\n            feeGrowthInside0X128 - feeGrowthInside0LastX128,\r\n            liquidity,\r\n            FixedPoint128.Q128\r\n        );\r\n        fee1 = tokensOwed1 + FullMath.mulDiv(\r\n            feeGrowthInside1X128 - feeGrowthInside1LastX128,\r\n            liquidity,\r\n            FixedPoint128.Q128\r\n        );\r\n    }\r\n\r\n    /// @notice Retrieves fee growth data\r\n    function getFeeGrowthInside(\r\n        uint256 tokenId\r\n    ) internal view returns (uint256 feeGrowthInside0X128, uint256 feeGrowthInside1X128) {\r\n        (\r\n        ,\r\n        ,\r\n        ,\r\n        ,\r\n        ,\r\n        int24 tickLower,\r\n        int24 tickUpper,\r\n        ,\r\n        ,\r\n        ,\r\n        ,\r\n        ) = PM.positions(tokenId);\r\n        IUniswapV3Pool pool = IUniswapV3Pool(getPool(tokenId));\r\n        (,int24 tickCurrent,,,,,) = pool.slot0();\r\n        uint256 feeGrowthGlobal0X128 = pool.feeGrowthGlobal0X128();\r\n        uint256 feeGrowthGlobal1X128 = pool.feeGrowthGlobal1X128();\r\n\r\n        (\r\n        ,\r\n        ,\r\n        uint256 lowerFeeGrowthOutside0X128,\r\n        uint256 lowerFeeGrowthOutside1X128,\r\n        ,\r\n        ,\r\n        ,\r\n        ) = pool.ticks(tickLower);\r\n\r\n        (\r\n        ,\r\n        ,\r\n        uint256 upperFeeGrowthOutside0X128,\r\n        uint256 upperFeeGrowthOutside1X128,\r\n        ,\r\n        ,\r\n        ,\r\n        ) = pool.ticks(tickUpper);\r\n\r\n        // calculate fee growth below\r\n        uint256 feeGrowthBelow0X128;\r\n        uint256 feeGrowthBelow1X128;\r\n        if (tickCurrent >= tickLower) {\r\n            feeGrowthBelow0X128 = lowerFeeGrowthOutside0X128;\r\n            feeGrowthBelow1X128 = lowerFeeGrowthOutside1X128;\r\n        } else {\r\n            feeGrowthBelow0X128 = feeGrowthGlobal0X128 - lowerFeeGrowthOutside0X128;\r\n            feeGrowthBelow1X128 = feeGrowthGlobal1X128 - lowerFeeGrowthOutside1X128;\r\n        }\r\n\r\n        // calculate fee growth above\r\n        uint256 feeGrowthAbove0X128;\r\n        uint256 feeGrowthAbove1X128;\r\n        if (tickCurrent < tickUpper) {\r\n            feeGrowthAbove0X128 = upperFeeGrowthOutside0X128;\r\n            feeGrowthAbove1X128 = upperFeeGrowthOutside1X128;\r\n        } else {\r\n            feeGrowthAbove0X128 = feeGrowthGlobal0X128 - upperFeeGrowthOutside0X128;\r\n            feeGrowthAbove1X128 = feeGrowthGlobal1X128 - upperFeeGrowthOutside1X128;\r\n        }\r\n\r\n        feeGrowthInside0X128 = feeGrowthGlobal0X128 - feeGrowthBelow0X128 - feeGrowthAbove0X128;\r\n        feeGrowthInside1X128 = feeGrowthGlobal1X128 - feeGrowthBelow1X128 - feeGrowthAbove1X128;\r\n    }\r\n}\r\n\r\n// File: contracts/storage/GovIdentityStorage.sol\r\n\r\n\r\npragma solidity ^0.7.6;\r\n\r\nlibrary GovIdentityStorage {\r\n\r\n  bytes32 public constant govSlot = keccak256(\"GovIdentityStorage.storage.location\");\r\n\r\n  struct Identity{\r\n    address governance;\r\n    address rewards;\r\n    mapping(address=>bool) strategist;\r\n    mapping(address=>bool) admin;\r\n  }\r\n\r\n  function load() internal pure returns (Identity storage gov) {\r\n    bytes32 loc = govSlot;\r\n    assembly {\r\n      gov.slot := loc\r\n    }\r\n  }\r\n}\r\n\r\n// File: contracts/base/GovIdentity.sol\r\n\r\n\r\npragma solidity ^0.7.6;\r\n\r\n\r\n/// @title manager role\r\n/// @notice provide a unified identity address pool\r\ncontract GovIdentity {\r\n\r\n    constructor() {\r\n        _init();\r\n    }\r\n\r\n    function _init() internal{\r\n        GovIdentityStorage.Identity storage identity= GovIdentityStorage.load();\r\n        identity.governance = msg.sender;\r\n        identity.rewards = msg.sender;\r\n        identity.strategist[msg.sender]=true;\r\n        identity.admin[msg.sender]=true;\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        GovIdentityStorage.Identity storage identity= GovIdentityStorage.load();\r\n        require(isAdmin(msg.sender), \"!admin\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyStrategist() {\r\n        require(isStrategist(msg.sender), \"!strategist\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyGovernance() {\r\n        GovIdentityStorage.Identity storage identity= GovIdentityStorage.load();\r\n        require(msg.sender == identity.governance, \"!governance\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyStrategistOrGovernance() {\r\n        GovIdentityStorage.Identity storage identity= GovIdentityStorage.load();\r\n        require(identity.strategist[msg.sender] || msg.sender == identity.governance, \"!governance and !strategist\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyAdminOrGovernance() {\r\n        GovIdentityStorage.Identity storage identity= GovIdentityStorage.load();\r\n        require(identity.admin[msg.sender] || msg.sender == identity.governance, \"!governance and !admin\");\r\n        _;\r\n    }\r\n\r\n    function setGovernance(address _governance) public onlyGovernance{\r\n        GovIdentityStorage.Identity storage identity= GovIdentityStorage.load();\r\n        identity.governance = _governance;\r\n    }\r\n\r\n    function setRewards(address _rewards) public onlyGovernance{\r\n        GovIdentityStorage.Identity storage identity= GovIdentityStorage.load();\r\n        identity.rewards = _rewards;\r\n    }\r\n\r\n    function setStrategist(address _strategist,bool enable) public onlyGovernance{\r\n        GovIdentityStorage.Identity storage identity= GovIdentityStorage.load();\r\n        identity.strategist[_strategist]=enable;\r\n    }\r\n\r\n    function setAdmin(address _admin,bool enable) public onlyGovernance{\r\n        GovIdentityStorage.Identity storage identity= GovIdentityStorage.load();\r\n        identity.admin[_admin]=enable;\r\n    }\r\n\r\n    function getGovernance() public view returns(address){\r\n        GovIdentityStorage.Identity storage identity= GovIdentityStorage.load();\r\n        return identity.governance;\r\n    }\r\n\r\n    function getRewards() public view returns(address){\r\n        GovIdentityStorage.Identity storage identity= GovIdentityStorage.load();\r\n        return identity.rewards ;\r\n    }\r\n\r\n    function isStrategist(address _strategist) public view returns(bool){\r\n        GovIdentityStorage.Identity storage identity= GovIdentityStorage.load();\r\n        return identity.strategist[_strategist];\r\n    }\r\n\r\n    function isAdmin(address _admin) public view returns(bool){\r\n        GovIdentityStorage.Identity storage identity= GovIdentityStorage.load();\r\n        return identity.admin[_admin];\r\n    }\r\n\r\n\r\n}\r\n\r\n// File: contracts/interfaces/uniswap-v3/BytesLib.sol\r\n\r\n\r\n/*\r\n * @title Solidity Bytes Arrays Utils\r\n * @author Gon\u00e7alo S\u00e1 <goncalo.sa@consensys.net>\r\n *\r\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\r\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\r\n */\r\npragma solidity >=0.5.0 <=0.8.0;\r\n\r\nlibrary BytesLib {\r\n    function slice(\r\n        bytes memory _bytes,\r\n        uint256 _start,\r\n        uint256 _length\r\n    ) internal pure returns (bytes memory) {\r\n        require(_length + 31 >= _length, 'slice_overflow');\r\n        require(_start + _length >= _start, 'slice_overflow');\r\n        require(_bytes.length >= _start + _length, 'slice_outOfBounds');\r\n\r\n        bytes memory tempBytes;\r\n\r\n        assembly {\r\n            switch iszero(_length)\r\n                case 0 {\r\n                    // Get a location of some free memory and store it in tempBytes as\r\n                    // Solidity does for memory variables.\r\n                    tempBytes := mload(0x40)\r\n\r\n                    // The first word of the slice result is potentially a partial\r\n                    // word read from the original array. To read it, we calculate\r\n                    // the length of that partial word and start copying that many\r\n                    // bytes into the array. The first word we copy will start with\r\n                    // data we don't care about, but the last `lengthmod` bytes will\r\n                    // land at the beginning of the contents of the new array. When\r\n                    // we're done copying, we overwrite the full first word with\r\n                    // the actual length of the slice.\r\n                    let lengthmod := and(_length, 31)\r\n\r\n                    // The multiplication in the next line is necessary\r\n                    // because when slicing multiples of 32 bytes (lengthmod == 0)\r\n                    // the following copy loop was copying the origin's length\r\n                    // and then ending prematurely not copying everything it should.\r\n                    let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\r\n                    let end := add(mc, _length)\r\n\r\n                    for {\r\n                        // The multiplication in the next line has the same exact purpose\r\n                        // as the one above.\r\n                        let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\r\n                    } lt(mc, end) {\r\n                        mc := add(mc, 0x20)\r\n                        cc := add(cc, 0x20)\r\n                    } {\r\n                        mstore(mc, mload(cc))\r\n                    }\r\n\r\n                    mstore(tempBytes, _length)\r\n\r\n                    //update free-memory pointer\r\n                    //allocating the array padded to 32 bytes like the compiler does now\r\n                    mstore(0x40, and(add(mc, 31), not(31)))\r\n                }\r\n                //if we want a zero-length slice let's just return a zero-length array\r\n                default {\r\n                    tempBytes := mload(0x40)\r\n                    //zero out the 32 bytes slice we are about to return\r\n                    //we need to do it because Solidity does not garbage collect\r\n                    mstore(tempBytes, 0)\r\n\r\n                    mstore(0x40, add(tempBytes, 0x20))\r\n                }\r\n        }\r\n\r\n        return tempBytes;\r\n    }\r\n\r\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\r\n        require(_start + 20 >= _start, 'toAddress_overflow');\r\n        require(_bytes.length >= _start + 20, 'toAddress_outOfBounds');\r\n        address tempAddress;\r\n\r\n        assembly {\r\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\r\n        }\r\n\r\n        return tempAddress;\r\n    }\r\n\r\n    function toUint24(bytes memory _bytes, uint256 _start) internal pure returns (uint24) {\r\n        require(_start + 3 >= _start, 'toUint24_overflow');\r\n        require(_bytes.length >= _start + 3, 'toUint24_outOfBounds');\r\n        uint24 tempUint;\r\n\r\n        assembly {\r\n            tempUint := mload(add(add(_bytes, 0x3), _start))\r\n        }\r\n\r\n        return tempUint;\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/uniswap-v3/Path.sol\r\n\r\n\r\npragma solidity >=0.6.0;\r\n\r\n\r\n/// @title Functions for manipulating path data for multihop swaps\r\nlibrary Path {\r\n    using BytesLib for bytes;\r\n\r\n    /// @dev The length of the bytes encoded address\r\n    uint256 private constant ADDR_SIZE = 20;\r\n    /// @dev The length of the bytes encoded fee\r\n    uint256 private constant FEE_SIZE = 3;\r\n\r\n    /// @dev The offset of a single token address and pool fee\r\n    uint256 private constant NEXT_OFFSET = ADDR_SIZE + FEE_SIZE;\r\n    /// @dev The offset of an encoded pool key\r\n    uint256 private constant POP_OFFSET = NEXT_OFFSET + ADDR_SIZE;\r\n    /// @dev The minimum length of an encoding that contains 2 or more pools\r\n    uint256 private constant MULTIPLE_POOLS_MIN_LENGTH = POP_OFFSET + NEXT_OFFSET;\r\n\r\n    /// @notice Check the legitimacy of the path\r\n    /// @param path The encoded swap path\r\n    /// @return Legal path\r\n    function valid(bytes memory path)internal pure returns(bool) {\r\n        return path.length>=POP_OFFSET;\r\n    }\r\n\r\n    /// @notice Returns true iff the path contains two or more pools\r\n    /// @param path The encoded swap path\r\n    /// @return True if path contains two or more pools, otherwise false\r\n    function hasMultiplePools(bytes memory path) internal pure returns (bool) {\r\n        return path.length >= MULTIPLE_POOLS_MIN_LENGTH;\r\n    }\r\n\r\n    /// @notice Decodes the first pool in path\r\n    /// @param path The bytes encoded swap path\r\n    /// @return tokenA The first token of the given pool\r\n    /// @return tokenB The second token of the given pool\r\n    /// @return fee The fee level of the pool\r\n    function decodeFirstPool(bytes memory path)\r\n        internal\r\n        pure\r\n        returns (\r\n            address tokenA,\r\n            address tokenB,\r\n            uint24 fee\r\n        )\r\n    {\r\n        tokenA = path.toAddress(0);\r\n        fee = path.toUint24(ADDR_SIZE);\r\n        tokenB = path.toAddress(NEXT_OFFSET);\r\n    }\r\n\r\n    /// @notice Gets the segment corresponding to the first pool in the path\r\n    /// @param path The bytes encoded swap path\r\n    /// @return The segment containing all data necessary to target the first pool in the path\r\n    function getFirstPool(bytes memory path) internal pure returns (bytes memory) {\r\n        return path.slice(0, POP_OFFSET);\r\n    }\r\n\r\n    /// @notice Gets the segment corresponding to the last pool in the path\r\n    /// @param path The bytes encoded swap path\r\n    /// @return The segment containing all data necessary to target the last pool in the path\r\n    function getLastPool(bytes memory path) internal pure returns (bytes memory) {\r\n        if(path.length==POP_OFFSET){\r\n            return path;\r\n        }else{\r\n            return path.slice(path.length-POP_OFFSET, path.length);\r\n        }\r\n    }\r\n\r\n    /// @notice Gets the first address of the path\r\n    /// @param path The encoded swap path\r\n    /// @return address\r\n    function getFirstAddress(bytes memory path)internal pure returns(address){\r\n        return path.toAddress(0);\r\n    }\r\n\r\n    /// @notice Gets the last address of the path\r\n    /// @param path The encoded swap path\r\n    /// @return address\r\n    function getLastAddress(bytes memory path)internal pure returns(address){\r\n        return path.toAddress(path.length-ADDR_SIZE);\r\n    }\r\n\r\n    /// @notice Skips a token + fee element from the buffer and returns the remainder\r\n    /// @param path The swap path\r\n    /// @return The remaining token + fee elements in the path\r\n    function skipToken(bytes memory path) internal pure returns (bytes memory) {\r\n        return path.slice(NEXT_OFFSET, path.length - NEXT_OFFSET);\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/uniswap-v3/IUniswapV3SwapCallback.sol\r\n\r\n\r\npragma solidity >=0.5.0;\r\n\r\n/// @title Callback for IUniswapV3PoolActions#swap\r\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\r\ninterface IUniswapV3SwapCallback {\r\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\r\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\r\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\r\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\r\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\r\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\r\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\r\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\r\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\r\n    function uniswapV3SwapCallback(\r\n        int256 amount0Delta,\r\n        int256 amount1Delta,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n// File: contracts/interfaces/uniswap-v3/ISwapRouter.sol\r\n\r\n\r\npragma solidity >=0.5.0;\r\n\r\n\r\n\r\n/// @title Router token swapping functionality\r\n/// @notice Functions for swapping tokens via Uniswap V3\r\ninterface ISwapRouter is IUniswapV3SwapCallback {\r\n    struct ExactInputSingleParams {\r\n        address tokenIn;\r\n        address tokenOut;\r\n        uint24 fee;\r\n        address recipient;\r\n        uint256 deadline;\r\n        uint256 amountIn;\r\n        uint256 amountOutMinimum;\r\n        uint160 sqrtPriceLimitX96;\r\n    }\r\n\r\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\r\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\r\n    /// @return amountOut The amount of the received token\r\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\r\n\r\n    struct ExactInputParams {\r\n        bytes path;\r\n        address recipient;\r\n        uint256 deadline;\r\n        uint256 amountIn;\r\n        uint256 amountOutMinimum;\r\n    }\r\n\r\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\r\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\r\n    /// @return amountOut The amount of the received token\r\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\r\n\r\n    struct ExactOutputSingleParams {\r\n        address tokenIn;\r\n        address tokenOut;\r\n        uint24 fee;\r\n        address recipient;\r\n        uint256 deadline;\r\n        uint256 amountOut;\r\n        uint256 amountInMaximum;\r\n        uint160 sqrtPriceLimitX96;\r\n    }\r\n\r\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\r\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\r\n    /// @return amountIn The amount of the input token\r\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\r\n\r\n    struct ExactOutputParams {\r\n        bytes path;\r\n        address recipient;\r\n        uint256 deadline;\r\n        uint256 amountOut;\r\n        uint256 amountInMaximum;\r\n    }\r\n\r\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\r\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\r\n    /// @return amountIn The amount of the input token\r\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\r\n}\r\n\r\n// File: contracts/libraries/SafeMathExtends.sol\r\n\r\n\r\npragma solidity ^0.7.6;\r\n\r\n// a library for performing various math operations\r\n\r\nlibrary SafeMathExtends {\r\n\r\n    uint256 internal constant BONE = 10 ** 18;\r\n\r\n    // Add two numbers together checking for overflows\r\n    function badd(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"ERR_ADD_OVERFLOW\");\r\n        return c;\r\n    }\r\n\r\n    // subtract two numbers and return diffecerence when it underflows\r\n    function bsubSign(uint256 a, uint256 b) internal pure returns (uint256, bool) {\r\n        if (a >= b) {\r\n            return (a - b, false);\r\n        } else {\r\n            return (b - a, true);\r\n        }\r\n    }\r\n\r\n    // Subtract two numbers checking for underflows\r\n    function bsub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        (uint256 c, bool flag) = bsubSign(a, b);\r\n        require(!flag, \"ERR_SUB_UNDERFLOW\");\r\n        return c;\r\n    }\r\n\r\n    // Multiply two 18 decimals numbers\r\n    function bmul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c0 = a * b;\r\n        require(a == 0 || c0 / a == b, \"ERR_MUL_OVERFLOW\");\r\n        uint256 c1 = c0 + (BONE / 2);\r\n        require(c1 >= c0, \"ERR_MUL_OVERFLOW\");\r\n        uint256 c2 = c1 / BONE;\r\n        return c2;\r\n    }\r\n\r\n    // Divide two 18 decimals numbers\r\n    function bdiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"ERR_DIV_ZERO\");\r\n        uint256 c0 = a * BONE;\r\n        require(a == 0 || c0 / a == BONE, \"ERR_DIV_INTERNAL\");\r\n        // bmul overflow\r\n        uint256 c1 = c0 + (b / 2);\r\n        require(c1 >= c0, \"ERR_DIV_INTERNAL\");\r\n        //  badd require\r\n        uint256 c2 = c1 / b;\r\n        return c2;\r\n    }\r\n\r\n    function min(uint x, uint y) internal pure returns (uint z) {\r\n        z = x < y ? x : y;\r\n    }\r\n\r\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\r\n    function sqrt(uint y) internal pure returns (uint z) {\r\n        if (y > 3) {\r\n            z = y;\r\n            uint x = y / 2 + 1;\r\n            while (x < z) {\r\n                z = x;\r\n                x = (y / x + x) / 2;\r\n            }\r\n        } else if (y != 0) {\r\n            z = 1;\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/libraries/UniV3SwapExtends.sol\r\n\r\n\r\npragma solidity ^0.7.6;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/// @title UniV3 Swap extends libraries\r\n/// @notice libraries\r\nlibrary UniV3SwapExtends {\r\n\r\n    using Path for bytes;\r\n    using SafeMath for uint256;\r\n    using SafeMathExtends for uint256;\r\n\r\n    //x96\r\n    uint256 constant internal x96 = 2 ** 96;\r\n\r\n    //fee denominator\r\n    uint256 constant internal denominator = 1000000;\r\n\r\n    //Swap Router\r\n    ISwapRouter constant internal SRT = ISwapRouter(0xE592427A0AEce92De3Edee1F18E0157C05861564);\r\n\r\n    /// @notice Estimated to obtain the target token amount\r\n    /// @dev Only allow the asset transaction path that has been set to be estimated\r\n    /// @param self Mapping path\r\n    /// @param from Source token address\r\n    /// @param to Target token address\r\n    /// @param amountIn Source token amount\r\n    /// @return amountOut Target token amount\r\n    function estimateAmountOut(\r\n        mapping(address => mapping(address => bytes)) storage self,\r\n        address from,\r\n        address to,\r\n        uint256 amountIn\r\n    ) internal view returns (uint256 amountOut){\r\n        if (amountIn == 0) {return 0;}\r\n        bytes memory path = self[from][to];\r\n        amountOut = amountIn;\r\n        while (true) {\r\n            (address fromToken, address toToken, uint24 fee) = path.getFirstPool().decodeFirstPool();\r\n            address _pool = PoolAddress.getPool(fromToken, toToken, fee);\r\n            (uint160 sqrtPriceX96,,,,,,) = IUniswapV3Pool(_pool).slot0();\r\n            address token0 = fromToken < toToken ? fromToken : toToken;\r\n            amountOut = amountOut.mul(denominator.sub(uint256(fee))).div(denominator);\r\n            if (token0 == toToken) {\r\n                amountOut = amountOut.sqrt().mul(x96).div(sqrtPriceX96) ** 2;\r\n            } else {\r\n                amountOut = amountOut.sqrt().mul(sqrtPriceX96).div(x96) ** 2;\r\n            }\r\n            bool hasMultiplePools = path.hasMultiplePools();\r\n            if (hasMultiplePools) {\r\n                path = path.skipToken();\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @notice Estimate the amount of source tokens that need to be provided\r\n    /// @dev Only allow the governance identity to set the underlying asset token address\r\n    /// @param self Mapping path\r\n    /// @param from Source token address\r\n    /// @param to Target token address\r\n    /// @param amountOut Expected target token amount\r\n    /// @return amountIn Source token amount\r\n    function estimateAmountIn(\r\n        mapping(address => mapping(address => bytes)) storage self,\r\n        address from,\r\n        address to,\r\n        uint256 amountOut\r\n    ) internal view returns (uint256 amountIn){\r\n        if (amountOut == 0) {return 0;}\r\n        bytes memory path = self[from][to];\r\n        amountIn = amountOut;\r\n        while (true) {\r\n            (address fromToken, address toToken, uint24 fee) = path.getFirstPool().decodeFirstPool();\r\n            address _pool = PoolAddress.getPool(fromToken, toToken, fee);\r\n            (uint160 sqrtPriceX96,,,,,,) = IUniswapV3Pool(_pool).slot0();\r\n            address token0 = fromToken < toToken ? fromToken : toToken;\r\n            if (token0 == toToken) {\r\n                amountIn = amountIn.sqrt().mul(sqrtPriceX96).div(x96) ** 2;\r\n            } else {\r\n                amountIn = amountIn.sqrt().mul(x96).div(sqrtPriceX96) ** 2;\r\n            }\r\n            amountIn = amountIn.mul(denominator).div(denominator.sub(uint256(fee)));\r\n            bool hasMultiplePools = path.hasMultiplePools();\r\n            if (hasMultiplePools) {\r\n                path = path.skipToken();\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\r\n    /// @dev Initiate a transaction with a known input amount and return the output amount\r\n    /// @param self Mapping path\r\n    /// @param from Input token address\r\n    /// @param to Output token address\r\n    /// @param amountIn Token in amount\r\n    /// @param recipient Recipient address\r\n    /// @param amountOutMinimum Expected to get minimum token out amount\r\n    /// @return Token out amount\r\n    function exactInput(\r\n        mapping(address => mapping(address => bytes)) storage self,\r\n        address from,\r\n        address to,\r\n        uint256 amountIn,\r\n        address recipient,\r\n        uint256 amountOutMinimum\r\n    ) internal returns (uint256){\r\n        bytes memory path = self[from][to];\r\n        return SRT.exactInput(\r\n            ISwapRouter.ExactInputParams({\r\n        path : path,\r\n        recipient : recipient,\r\n        deadline : block.timestamp,\r\n        amountIn : amountIn,\r\n        amountOutMinimum : amountOutMinimum\r\n        }));\r\n    }\r\n\r\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\r\n    /// @dev Initiate a transaction with a known output amount and return the input amount\r\n    /// @param self Mapping path\r\n    /// @param from Input token address\r\n    /// @param to Output token address\r\n    /// @param recipient Recipient address\r\n    /// @param amountOut Token out amount\r\n    /// @param amountInMaximum Expect to input the maximum amount of tokens\r\n    /// @return Token in amount\r\n    function exactOutput(\r\n        mapping(address => mapping(address => bytes)) storage self,\r\n        address from,\r\n        address to,\r\n        address recipient,\r\n        uint256 amountOut,\r\n        uint256 amountInMaximum\r\n    ) internal returns (uint256){\r\n        bytes memory path = self[to][from];\r\n        return SRT.exactOutput(\r\n            ISwapRouter.ExactOutputParams({\r\n        path : path,\r\n        recipient : recipient,\r\n        deadline : block.timestamp,\r\n        amountOut : amountOut,\r\n        amountInMaximum : amountInMaximum\r\n        }));\r\n    }\r\n}\r\n\r\n// File: contracts/positions/UniV3Liquidity.sol\r\n\r\n\r\npragma solidity ^0.7.6;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/// @title Position Management\r\n/// @notice Provide asset operation functions, allow authorized identities to perform asset operations, and achieve the purpose of increasing the net value of the fund\r\ncontract UniV3Liquidity is GovIdentity {\r\n\r\n    using SafeMath for uint256;\r\n    using Path for bytes;\r\n    using EnumerableSetExtends for EnumerableSetExtends.UintSet;\r\n    using UniV3SwapExtends for mapping(address => mapping(address => bytes));\r\n\r\n    //Swap route\r\n    mapping(address => mapping(address => bytes)) public swapRoute;\r\n    //Position list\r\n    mapping(bytes32 => uint256) public history;\r\n    //position mapping owner\r\n    mapping(uint256 => address) public positionOwners;\r\n    //available token limit\r\n    mapping(address => mapping(address => uint256)) public tokenLimit;\r\n    //Working positions\r\n    EnumerableSetExtends.UintSet internal works;\r\n\r\n    //Swap\r\n    event Swap(address sender, address fromToken, address toToken, uint256 amountIn, uint256 amountOut);\r\n    //Create positoin\r\n    event Mint(address sender, uint256 tokenId, uint128 liquidity);\r\n    //Increase liquidity\r\n    event IncreaseLiquidity(address sender, uint256 tokenId, uint128 liquidity);\r\n    //Decrease liquidity\r\n    event DecreaseLiquidity(address sender, uint256 tokenId, uint128 liquidity);\r\n    //Collect asset\r\n    event Collect(address sender, uint256 tokenId, uint256 amount0, uint256 amount1);\r\n\r\n    //Only allow governance, strategy, ext authorize\r\n    modifier onlyAssetsManager() {\r\n        require(\r\n            msg.sender == getGovernance()\r\n            || isAdmin(msg.sender)\r\n            || isStrategist(msg.sender)\r\n            || extAuthorize(), \"!AM\");\r\n        _;\r\n    }\r\n\r\n    //Only position owner\r\n    modifier onlyPositionManager(uint256 tokenId) {\r\n        require(\r\n            msg.sender == getGovernance()\r\n            || isAdmin(msg.sender)\r\n            || positionOwners[tokenId] == msg.sender\r\n            || extAuthorize(), \"!PM\");\r\n        _;\r\n    }\r\n\r\n\r\n\r\n    /// @notice extend authorize\r\n    function extAuthorize() internal virtual view returns (bool){\r\n        return false;\r\n    }\r\n\r\n\r\n    /// @notice swap after handle\r\n    function swapAfter(\r\n        address,\r\n        uint256) internal virtual {\r\n\r\n    }\r\n\r\n    /// @notice collect after handle\r\n    function collectAfter(\r\n        address,\r\n        address,\r\n        uint256,\r\n        uint256) internal virtual {\r\n\r\n    }\r\n\r\n    /// @notice Check current position\r\n    /// @dev Check the current UniV3 position by pool token ID.\r\n    /// @param pool liquidity pool\r\n    /// @param tickLower Tick lower bound\r\n    /// @param tickUpper Tick upper bound\r\n    /// @return atWork Position status\r\n    /// @return has Check if the position ID exist\r\n    /// @return tokenId Position ID\r\n    function checkPos(\r\n        address pool,\r\n        int24 tickLower,\r\n        int24 tickUpper\r\n    ) public view returns (bool atWork, bool has, uint256 tokenId){\r\n        bytes32 pk = UniV3PMExtends.positionKey(pool, tickLower, tickUpper);\r\n        tokenId = history[pk];\r\n        atWork = works.contains(tokenId);\r\n        has = tokenId > 0 ? true : false;\r\n    }\r\n\r\n    /// @notice Update strategist's available token limit\r\n    /// @param strategist strategist's\r\n    /// @param token token address\r\n    /// @param amount limit amount\r\n    function setTokenLimit(address strategist, address token, int256 amount) public onlyAdminOrGovernance {\r\n        if (amount > 0) {\r\n            tokenLimit[strategist][token] += uint256(amount);\r\n        } else {\r\n            tokenLimit[strategist][token] -= uint256(amount);\r\n        }\r\n    }\r\n\r\n    /// @notice Authorize UniV3 contract to move vault asset\r\n    /// @dev Only allow governance and admin identities to execute authorized functions to reduce miner fee consumption\r\n    /// @param token Authorized target token\r\n    function safeApproveAll(address token) public virtual onlyAdminOrGovernance {\r\n        ERC20Extends.safeApprove(token, address(UniV3PMExtends.PM), type(uint256).max);\r\n        ERC20Extends.safeApprove(token, address(UniV3SwapExtends.SRT), type(uint256).max);\r\n    }\r\n\r\n    /// @notice Multiple functions of the contract can be executed at the same time\r\n    /// @dev Only the assets manager identities are allowed to execute multiple function calls,\r\n    /// and the execution of multiple functions can ensure the consistency of the execution results\r\n    /// @param data Encode data of multiple execution functions\r\n    /// @return results Execution result\r\n    function multicall(bytes[] calldata data) external onlyAssetsManager returns (bytes[] memory results) {\r\n        results = new bytes[](data.length);\r\n        for (uint256 i = 0; i < data.length; i++) {\r\n            (bool success, bytes memory result) = address(this).delegatecall(data[i]);\r\n            if (!success) {\r\n                if (result.length < 68) revert();\r\n                assembly {\r\n                    result := add(result, 0x04)\r\n                }\r\n                revert(abi.decode(result, (string)));\r\n            }\r\n            results[i] = result;\r\n        }\r\n    }\r\n\r\n\r\n    /// @notice Set asset swap route\r\n    /// @dev Only the governance and admin identity is allowed to set the asset swap path, and the firstToken and lastToken contained in the path will be used as the underlying asset token address by default\r\n    /// @param path Swap path byte code\r\n    function settingSwapRoute(bytes memory path) external onlyAdminOrGovernance {\r\n        require(path.valid(), 'path is not valid');\r\n        address fromToken = path.getFirstAddress();\r\n        address toToken = path.getLastAddress();\r\n        swapRoute[fromToken][toToken] = path;\r\n    }\r\n\r\n    /// @notice Estimated to obtain the target token amount\r\n    /// @dev Only allow the asset transaction path that has been set to be estimated\r\n    /// @param from Source token address\r\n    /// @param to Target token address\r\n    /// @param amountIn Source token amount\r\n    /// @return amountOut Target token amount\r\n    function estimateAmountOut(\r\n        address from,\r\n        address to,\r\n        uint256 amountIn\r\n    ) public view returns (uint256 amountOut){\r\n        return swapRoute.estimateAmountOut(from, to, amountIn);\r\n    }\r\n\r\n    /// @notice Estimate the amount of source tokens that need to be provided\r\n    /// @dev Only allow the governance identity to set the underlying asset token address\r\n    /// @param from Source token address\r\n    /// @param to Target token address\r\n    /// @param amountOut Expect to get the target token amount\r\n    /// @return amountIn Source token amount\r\n    function estimateAmountIn(\r\n        address from,\r\n        address to,\r\n        uint256 amountOut\r\n    ) public view returns (uint256 amountIn){\r\n        return swapRoute.estimateAmountIn(from, to, amountOut);\r\n    }\r\n\r\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\r\n    /// @dev Initiate a transaction with a known input amount and return the output amount\r\n    /// @param tokenIn Token in address\r\n    /// @param tokenOut Token out address\r\n    /// @param amountIn Token in amount\r\n    /// @param amountOutMinimum Expected to get minimum token out amount\r\n    /// @return amountOut Token out amount\r\n    function exactInput(\r\n        address tokenIn,\r\n        address tokenOut,\r\n        uint256 amountIn,\r\n        uint256 amountOutMinimum\r\n    ) public onlyAssetsManager returns (uint256 amountOut) {\r\n        bool _isStrategist = isStrategist(msg.sender);\r\n        if (_isStrategist) {\r\n            require(tokenLimit[msg.sender][tokenIn] >= amountIn, '!check limit');\r\n        }\r\n        amountOut = swapRoute.exactInput(tokenIn, tokenOut, amountIn, address(this), amountOutMinimum);\r\n        if (_isStrategist) {\r\n            tokenLimit[msg.sender][tokenIn] -= amountIn;\r\n            tokenLimit[msg.sender][tokenOut] += amountOut;\r\n        }\r\n        swapAfter(tokenOut, amountOut);\r\n        emit Swap(msg.sender, tokenIn, tokenOut, amountIn, amountOut);\r\n    }\r\n\r\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\r\n    /// @dev Initiate a transaction with a known output amount and return the input amount\r\n    /// @param tokenIn Token in address\r\n    /// @param tokenOut Token out address\r\n    /// @param amountOut Token out amount\r\n    /// @param amountInMaximum Expect to input the maximum amount of tokens\r\n    /// @return amountIn Token in amount\r\n    function exactOutput(\r\n        address tokenIn,\r\n        address tokenOut,\r\n        uint256 amountOut,\r\n        uint256 amountInMaximum\r\n    ) public onlyAssetsManager returns (uint256 amountIn) {\r\n        amountIn = swapRoute.exactOutput(tokenIn, tokenOut, address(this), amountOut, amountInMaximum);\r\n        if (isStrategist(msg.sender)) {\r\n            require(tokenLimit[msg.sender][tokenIn] >= amountIn, '!check limit');\r\n            tokenLimit[msg.sender][tokenIn] -= amountIn;\r\n            tokenLimit[msg.sender][tokenOut] += amountOut;\r\n        }\r\n        swapAfter(tokenOut, amountOut);\r\n        emit Swap(msg.sender, tokenIn, tokenOut, amountIn, amountOut);\r\n    }\r\n\r\n    /// @notice Create position\r\n    /// @dev Repeated creation of the same position will cause an error, you need to change tickLower Or tickUpper\r\n    /// @param token0 Liquidity pool token 0 contract address\r\n    /// @param token1 Liquidity pool token 1 contract address\r\n    /// @param fee Target liquidity pool rate\r\n    /// @param tickLower Expect to place the lower price boundary of the target liquidity pool\r\n    /// @param tickUpper Expect to place the upper price boundary of the target liquidity pool\r\n    /// @param amount0Desired Desired token 0 amount\r\n    /// @param amount1Desired Desired token 1 amount\r\n    function mint(\r\n        address token0,\r\n        address token1,\r\n        uint24 fee,\r\n        int24 tickLower,\r\n        int24 tickUpper,\r\n        uint256 amount0Desired,\r\n        uint256 amount1Desired\r\n    ) public onlyAssetsManager\r\n    {\r\n        bool _isStrategist = isStrategist(msg.sender);\r\n        if (_isStrategist) {\r\n            require(tokenLimit[msg.sender][token0] >= amount0Desired, '!check limit');\r\n            require(tokenLimit[msg.sender][token1] >= amount1Desired, '!check limit');\r\n        }\r\n        (\r\n        uint256 tokenId,\r\n        uint128 liquidity,\r\n        uint256 amount0,\r\n        uint256 amount1\r\n        ) = UniV3PMExtends.PM.mint(INonfungiblePositionManager.MintParams({\r\n        token0 : token0,\r\n        token1 : token1,\r\n        fee : fee,\r\n        tickLower : tickLower,\r\n        tickUpper : tickUpper,\r\n        amount0Desired : amount0Desired,\r\n        amount1Desired : amount1Desired,\r\n        amount0Min : 0,\r\n        amount1Min : 0,\r\n        recipient : address(this),\r\n        deadline : block.timestamp\r\n        }));\r\n        if (_isStrategist) {\r\n            tokenLimit[msg.sender][token0] -= amount0;\r\n            tokenLimit[msg.sender][token1] -= amount1;\r\n        }\r\n        address pool = UniV3PMExtends.getPool(tokenId);\r\n        bytes32 pk = UniV3PMExtends.positionKey(pool, tickLower, tickUpper);\r\n        history[pk] = tokenId;\r\n        positionOwners[tokenId] = msg.sender;\r\n        works.add(tokenId);\r\n        emit Mint(msg.sender, tokenId, liquidity);\r\n    }\r\n\r\n    /// @notice Increase liquidity\r\n    /// @dev Use checkPos to check the position ID\r\n    /// @param tokenId Position ID\r\n    /// @param amount0 Desired Desired token 0 amount\r\n    /// @param amount1 Desired Desired token 1 amount\r\n    /// @param amount0Min Minimum token 0 amount\r\n    /// @param amount1Min Minimum token 1 amount\r\n    /// @return liquidity The amount of liquidity\r\n    /// @return amount0 Actual token 0 amount being added\r\n    /// @return amount1 Actual token 1 amount being added\r\n    function increaseLiquidity(\r\n        uint256 tokenId,\r\n        uint256 amount0Desired,\r\n        uint256 amount1Desired,\r\n        uint256 amount0Min,\r\n        uint256 amount1Min\r\n    ) public onlyPositionManager(tokenId) returns (\r\n        uint128 liquidity,\r\n        uint256 amount0,\r\n        uint256 amount1\r\n    ){\r\n        (\r\n        ,\r\n        ,\r\n        address token0,\r\n        address token1,\r\n        ,\r\n        ,\r\n        ,\r\n        ,\r\n        ,\r\n        ,\r\n        ,\r\n\r\n        ) = UniV3PMExtends.PM.positions(tokenId);\r\n        address po = positionOwners[tokenId];\r\n        if (isStrategist(po)) {\r\n            require(tokenLimit[po][token0] >= amount0Desired, '!check limit');\r\n            require(tokenLimit[po][token1] >= amount1Desired, '!check limit');\r\n        }\r\n        (liquidity, amount0, amount1) = UniV3PMExtends.PM.increaseLiquidity(INonfungiblePositionManager.IncreaseLiquidityParams({\r\n        tokenId : tokenId,\r\n        amount0Desired : amount0Desired,\r\n        amount1Desired : amount1Desired,\r\n        amount0Min : amount0Min,\r\n        amount1Min : amount1Min,\r\n        deadline : block.timestamp\r\n        }));\r\n        if (isStrategist(po)) {\r\n            tokenLimit[po][token0] -= amount0;\r\n            tokenLimit[po][token1] -= amount1;\r\n        }\r\n        if (!works.contains(tokenId)) {\r\n            works.add(tokenId);\r\n        }\r\n        emit IncreaseLiquidity(msg.sender, tokenId, liquidity);\r\n    }\r\n\r\n    /// @notice Decrease liquidity\r\n    /// @dev Use checkPos to query the position ID\r\n    /// @param tokenId Position ID\r\n    /// @param liquidity Expected reduction amount of liquidity\r\n    /// @param amount0Min Minimum amount of token 0 to be reduced\r\n    /// @param amount1Min Minimum amount of token 1 to be reduced\r\n    /// @return amount0 Actual amount of token 0 being reduced\r\n    /// @return amount1 Actual amount of token 1 being reduced\r\n    function decreaseLiquidity(\r\n        uint256 tokenId,\r\n        uint128 liquidity,\r\n        uint256 amount0Min,\r\n        uint256 amount1Min\r\n    ) public onlyPositionManager(tokenId) returns (uint256 amount0, uint256 amount1){\r\n        (amount0, amount1) = UniV3PMExtends.PM.decreaseLiquidity(INonfungiblePositionManager.DecreaseLiquidityParams({\r\n        tokenId : tokenId,\r\n        liquidity : liquidity,\r\n        amount0Min : amount0Min,\r\n        amount1Min : amount1Min,\r\n        deadline : block.timestamp\r\n        }));\r\n        emit DecreaseLiquidity(msg.sender, tokenId, liquidity);\r\n    }\r\n\r\n    /// @notice Collect position asset\r\n    /// @dev Use checkPos to check the position ID\r\n    /// @param tokenId Position ID\r\n    /// @param amount0Max Maximum amount of token 0 to be collected\r\n    /// @param amount1Max Maximum amount of token 1 to be collected\r\n    /// @return amount0 Actual amount of token 0 being collected\r\n    /// @return amount1 Actual amount of token 1 being collected\r\n    function collect(\r\n        uint256 tokenId,\r\n        uint128 amount0Max,\r\n        uint128 amount1Max\r\n    ) public onlyPositionManager(tokenId) returns (uint256 amount0, uint256 amount1){\r\n        (amount0, amount1) = UniV3PMExtends.PM.collect(INonfungiblePositionManager.CollectParams({\r\n        tokenId : tokenId,\r\n        recipient : address(this),\r\n        amount0Max : amount0Max,\r\n        amount1Max : amount1Max\r\n        }));\r\n        (\r\n        ,\r\n        ,\r\n        address token0,\r\n        address token1,\r\n        ,\r\n        ,\r\n        ,\r\n        uint128 liquidity,\r\n        ,\r\n        ,\r\n        ,\r\n        ) = UniV3PMExtends.PM.positions(tokenId);\r\n        address po = positionOwners[tokenId];\r\n        if (isStrategist(po)) {\r\n            tokenLimit[po][token0] += amount0;\r\n            tokenLimit[po][token1] += amount1;\r\n        }\r\n        if (liquidity == 0) {\r\n            works.remove(tokenId);\r\n        }\r\n        collectAfter(token0, token1, amount0, amount1);\r\n        emit Collect(msg.sender, tokenId, amount0, amount1);\r\n    }\r\n\r\n    /// @notice calc tokenId asset\r\n    /// @dev This function calc tokenId asset\r\n    /// @return tokenId asset\r\n    function calcLiquidityAssets(uint256 tokenId, address toToken) internal view returns (uint256) {\r\n        (\r\n        ,\r\n        ,\r\n        address token0,\r\n        address token1,\r\n        uint24 fee,\r\n        int24 tickLower,\r\n        int24 tickUpper,\r\n        uint128 liquidity,\r\n        ,\r\n        ,\r\n        ,\r\n        ) = UniV3PMExtends.PM.positions(tokenId);\r\n        (uint256 amount0, uint256 amount1) = UniV3PMExtends.getAmountsForLiquidity(\r\n            token0, token1, fee, tickLower, tickUpper, liquidity);\r\n        (uint256 fee0, uint256 fee1) = UniV3PMExtends.getFeesForLiquidity(tokenId);\r\n        (amount0, amount1) = (amount0.add(fee0), amount1.add(fee1));\r\n        uint256 total;\r\n        if (token0 == toToken) {\r\n            total = amount0;\r\n        } else {\r\n            uint256 _estimateAmountOut = swapRoute.estimateAmountOut(token0, toToken, amount0);\r\n            total = _estimateAmountOut;\r\n        }\r\n        if (token1 == toToken) {\r\n            total = total.add(amount1);\r\n        } else {\r\n            uint256 _estimateAmountOut = swapRoute.estimateAmountOut(token1, toToken, amount1);\r\n            total = total.add(_estimateAmountOut);\r\n        }\r\n        return total;\r\n    }\r\n\r\n\r\n}\r\n\r\n// File: contracts/positions/AutoLiquidity.sol\r\n\r\n\r\npragma solidity ^0.7.6;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/// @title Position Management\r\n/// @notice Provide asset operation functions, allow authorized identities to perform asset operations, and achieve the purpose of increasing the net value of the Vault\r\ncontract AutoLiquidity is UniV3Liquidity, ReentrancyGuard {\r\n\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n    using EnumerableSetExtends for EnumerableSetExtends.UintSet;\r\n    using EnumerableSetExtends for EnumerableSetExtends.AddressSet;\r\n    using UniV3SwapExtends for mapping(address => mapping(address => bytes));\r\n\r\n    //Vault purchase and redemption token\r\n    IERC20 public ioToken;\r\n    //Vault contract address\r\n    IVault public vault;\r\n    //Underlying asset\r\n    EnumerableSetExtends.AddressSet internal underlyings;\r\n\r\n    event TakeFee(SmartPoolStorage.FeeType ft, address token, address rewards, uint256 fee);\r\n\r\n    /// @notice Binding vaults and subscription redemption token\r\n    /// @dev Only bind once and cannot be modified\r\n    /// @param _vault Vault address\r\n    /// @param _ioToken Subscription and redemption token\r\n    function bind(address _vault, address _ioToken) external onlyGovernance {\r\n        vault = IVault(_vault);\r\n        ioToken = IERC20(_ioToken);\r\n    }\r\n\r\n    //Only allow vault contract access\r\n    modifier onlyVault() {\r\n        require(extAuthorize(), \"!vault\");\r\n        _;\r\n    }\r\n\r\n    /// @notice ext authorize\r\n    function extAuthorize() internal override view returns (bool){\r\n        return msg.sender == address(vault);\r\n    }\r\n\r\n    /// @notice in work tokenId array\r\n    /// @dev read in works NFT array\r\n    /// @return tokenIds NFT array\r\n    function worksPos() public view returns (uint256[] memory tokenIds){\r\n        uint256 length = works.length();\r\n        tokenIds = new uint256[](length);\r\n        for (uint256 i = 0; i < length; i++) {\r\n            tokenIds[i] = works.at(i);\r\n        }\r\n    }\r\n\r\n    /// @notice in underlyings token address array\r\n    /// @dev read in underlyings token address array\r\n    /// @return tokens address array\r\n    function getUnderlyings() public view returns (address[] memory tokens){\r\n        uint256 length = underlyings.length();\r\n        tokens = new address[](length);\r\n        for (uint256 i = 0; i < underlyings.length(); i++) {\r\n            tokens[i] = underlyings.at(i);\r\n        }\r\n    }\r\n\r\n\r\n    /// @notice Set the underlying asset token address\r\n    /// @dev Only allow the governance identity to set the underlying asset token address\r\n    /// @param ts The underlying asset token address array to be added\r\n    function setUnderlyings(address[] memory ts) public onlyGovernance {\r\n        for (uint256 i = 0; i < ts.length; i++) {\r\n            if (!underlyings.contains(ts[i])) {\r\n                underlyings.add(ts[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @notice Delete the underlying asset token address\r\n    /// @dev Only allow the governance identity to delete the underlying asset token address\r\n    /// @param ts The underlying asset token address array to be deleted\r\n    function removeUnderlyings(address[] memory ts) public onlyGovernance {\r\n        for (uint256 i = 0; i < ts.length; i++) {\r\n            if (underlyings.contains(ts[i])) {\r\n                underlyings.remove(ts[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @notice swap after handle\r\n    /// @param tokenOut token address\r\n    /// @param amountOut token amount\r\n    function swapAfter(\r\n        address tokenOut,\r\n        uint256 amountOut) internal override {\r\n        uint256 fee = vault.calcRatioFee(SmartPoolStorage.FeeType.TURNOVER_FEE, amountOut);\r\n        if (fee > 0) {\r\n            address rewards = getRewards();\r\n            IERC20(tokenOut).safeTransfer(rewards, fee);\r\n            emit TakeFee(SmartPoolStorage.FeeType.TURNOVER_FEE, tokenOut, rewards, fee);\r\n        }\r\n    }\r\n\r\n    /// @notice collect after handle\r\n    /// @param token0 token address\r\n    /// @param token1 token address\r\n    /// @param amount0 token amount\r\n    /// @param amount1 token amount\r\n    function collectAfter(\r\n        address token0,\r\n        address token1,\r\n        uint256 amount0,\r\n        uint256 amount1) internal override {\r\n        uint256 fee0 = vault.calcRatioFee(SmartPoolStorage.FeeType.TURNOVER_FEE, amount0);\r\n        uint256 fee1 = vault.calcRatioFee(SmartPoolStorage.FeeType.TURNOVER_FEE, amount1);\r\n        address rewards = getRewards();\r\n        if (fee0 > 0) {\r\n            IERC20(token0).safeTransfer(rewards, fee0);\r\n            emit TakeFee(SmartPoolStorage.FeeType.TURNOVER_FEE, token0, rewards, fee0);\r\n        }\r\n        if (fee1 > 0) {\r\n            IERC20(token1).safeTransfer(rewards, fee1);\r\n            emit TakeFee(SmartPoolStorage.FeeType.TURNOVER_FEE, token1, rewards, fee1);\r\n        }\r\n    }\r\n\r\n    /// @notice Asset transfer used to upgrade the contract\r\n    /// @param to address\r\n    function withdrawAll(address to) external onlyGovernance {\r\n        for (uint256 i = 0; i < underlyings.length(); i++) {\r\n            IERC20 token = IERC20(underlyings.at(i));\r\n            uint256 balance = token.balanceOf(address(this));\r\n            if (balance > 0) {\r\n                token.safeTransfer(to, balance);\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @notice Withdraw asset\r\n    /// @dev Only vault contract can withdraw asset\r\n    /// @param outputToken output token address\r\n    /// @param to Withdraw address\r\n    /// @param amount Withdraw amount\r\n    /// @param scale Withdraw percentage\r\n    function withdraw(address outputToken, address to, uint256 amount, uint256 scale) external nonReentrant onlyVault {\r\n        IERC20 ot = IERC20(outputToken);\r\n        uint256 surplusAmount = ot.balanceOf(address(this));\r\n        if (surplusAmount < amount) {\r\n            uint256[] memory underlyingAmounts = releaseUnderlying(scale);\r\n            for (uint256 i = 0; i < underlyingAmounts.length; i++) {\r\n                address token = underlyings.at(i);\r\n                if (token != outputToken && underlyingAmounts[i] > 0) {\r\n                    exactInput(token, outputToken, underlyingAmounts[i], 0);\r\n                }\r\n            }\r\n        }\r\n        surplusAmount = ot.balanceOf(address(this));\r\n        if (surplusAmount < amount) {\r\n            amount = surplusAmount;\r\n        }\r\n        ot.safeTransfer(to, amount);\r\n    }\r\n\r\n    /// @notice Withdraw underlying asset\r\n    /// @dev Only vault contract can withdraw underlying asset\r\n    /// @param to Withdraw address\r\n    /// @param scale Withdraw percentage\r\n    function withdrawOfUnderlying(address to, uint256 scale) external nonReentrant onlyVault {\r\n        uint256[] memory underlyingAmounts = releaseUnderlying(scale);\r\n        for (uint256 i = 0; i < underlyingAmounts.length; i++) {\r\n            if(underlyingAmounts[i]>0){\r\n                IERC20(underlyings.at(i)).safeTransfer(to, underlyingAmounts[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @notice Calculate the number of assets\r\n    /// @dev release liquidity by provided scale\r\n    /// @param scale Scale of the liquidity\r\n    function releaseUnderlying(uint256 scale) internal returns (uint256[] memory underlyingAmounts){\r\n        uint256 length = underlyings.length();\r\n        underlyingAmounts = new uint256[](length);\r\n        uint256[] memory freeBalances = new uint256[](length);\r\n        for (uint256 i = 0; i < length; i++) {\r\n            address token = underlyings.at(i);\r\n            uint256 balance = IERC20(token).balanceOf(address(this));\r\n            freeBalances[i] = balance;\r\n            underlyingAmounts[i] = balance.mul(scale).div(1e18);\r\n        }\r\n        uint256[] memory decreaseAmounts = _decreaseLiquidityByScale(scale);\r\n        for (uint256 i = 0; i < length; i++) {\r\n            address token = underlyings.at(i);\r\n            uint256 balance = IERC20(token).balanceOf(address(this));\r\n            uint256 feeAmount = balance.sub(freeBalances[i].add(decreaseAmounts[i]));\r\n            underlyingAmounts[i] = underlyingAmounts[i].add(decreaseAmounts[i]).add(feeAmount.mul(scale).div(1e18));\r\n        }\r\n    }\r\n\r\n    /// @notice Decrease liquidity by scale\r\n    /// @dev Decrease liquidity by provided scale\r\n    /// @param scale Scale of the liquidity\r\n    function _decreaseLiquidityByScale(uint256 scale) internal returns (uint256[] memory decreaseAmounts){\r\n        uint256 length = works.length();\r\n        decreaseAmounts = new uint256[](underlyings.length());\r\n        for (uint256 i = 0; i < length; i++) {\r\n            uint256 tokenId = works.at(i);\r\n            (\r\n            ,\r\n            ,\r\n            address token0,\r\n            address token1,\r\n            ,\r\n            ,\r\n            ,\r\n            uint128 liquidity,\r\n            ,\r\n            ,\r\n            ,\r\n            ) = UniV3PMExtends.PM.positions(tokenId);\r\n            if (liquidity > 0) {\r\n                uint256 _decreaseLiquidity = uint256(liquidity).mul(scale).div(1e18);\r\n                (uint256 amount0, uint256 amount1) = decreaseLiquidity(tokenId, uint128(_decreaseLiquidity), 0, 0);\r\n                uint256 token0Index = underlyings.indexOf(token0) - 1;\r\n                uint256 token1Index = underlyings.indexOf(token1) - 1;\r\n                decreaseAmounts[token0Index] = amount0.add(decreaseAmounts[token0Index]);\r\n                decreaseAmounts[token1Index] = amount1.add(decreaseAmounts[token1Index]);\r\n                collect(tokenId, type(uint128).max, type(uint128).max);\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @notice Total asset\r\n    /// @dev This function calculates the net worth or AUM\r\n    /// @return Total asset\r\n    function assets() public view returns (uint256){\r\n        uint256 total = idleAssets();\r\n        total = total.add(liquidityAssets());\r\n        return total;\r\n    }\r\n\r\n    /// @notice idle asset\r\n    /// @dev This function calculates idle asset\r\n    /// @return idle asset\r\n    function idleAssets() public view returns (uint256){\r\n        uint256 total;\r\n        for (uint256 i = 0; i < underlyings.length(); i++) {\r\n            address token = underlyings.at(i);\r\n            uint256 balance = IERC20(token).balanceOf(address(this));\r\n            if (token == address(ioToken)) {\r\n                total = total.add(balance);\r\n            } else {\r\n                uint256 _estimateAmountOut = estimateAmountOut(token, address(ioToken), balance);\r\n                total = total.add(_estimateAmountOut);\r\n            }\r\n        }\r\n        return total;\r\n    }\r\n\r\n    /// @notice at work liquidity asset\r\n    /// @dev This function calculates liquidity asset\r\n    /// @return liquidity asset\r\n    function liquidityAssets() public view returns (uint256){\r\n        uint256 total;\r\n        address ioTokenAddr = address(ioToken);\r\n        uint256 length = works.length();\r\n        for (uint256 i = 0; i < length; i++) {\r\n            uint256 tokenId = works.at(i);\r\n            total = total.add(calcLiquidityAssets(tokenId, ioTokenAddr));\r\n        }\r\n        return total;\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Collect\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"}],\"name\":\"DecreaseLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"}],\"name\":\"IncreaseLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum SmartPoolStorage.FeeType\",\"name\":\"ft\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewards\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"TakeFee\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"assets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ioToken\",\"type\":\"address\"}],\"name\":\"bind\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"}],\"name\":\"checkPos\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"atWork\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"has\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"amount0Max\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1Max\",\"type\":\"uint128\"}],\"name\":\"collect\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"amount0Min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Min\",\"type\":\"uint256\"}],\"name\":\"decreaseLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"estimateAmountIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"estimateAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMinimum\",\"type\":\"uint256\"}],\"name\":\"exactInput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMaximum\",\"type\":\"uint256\"}],\"name\":\"exactOutput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGovernance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnderlyings\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"history\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"idleAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount0Desired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Desired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount0Min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Min\",\"type\":\"uint256\"}],\"name\":\"increaseLiquidity\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ioToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategist\",\"type\":\"address\"}],\"name\":\"isStrategist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint256\",\"name\":\"amount0Desired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Desired\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"positionOwners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"ts\",\"type\":\"address[]\"}],\"name\":\"removeUnderlyings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"safeApproveAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewards\",\"type\":\"address\"}],\"name\":\"setRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategist\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setStrategist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategist\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"amount\",\"type\":\"int256\"}],\"name\":\"setTokenLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"ts\",\"type\":\"address[]\"}],\"name\":\"setUnderlyings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"}],\"name\":\"settingSwapRoute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"swapRoute\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"outputToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"scale\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"scale\",\"type\":\"uint256\"}],\"name\":\"withdrawOfUnderlying\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"worksPos\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "AutoLiquidity", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a6b869fc1e41a0d5d8e81a059771ae60e3e39b331adffbdc667b668d4be5d8a1"}