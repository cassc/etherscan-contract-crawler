{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SignedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IKonaGlobals.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ninterface IKonaGlobals {\\n    event KonaPoolsSet(address oldAddress, address newAddress);\\n    event KonaOraclesSet(address oldAddress, address newAddress);\\n    event KonaStakingSet(address oldAddress, address newAddress);\\n    event ReferenceRateSet(uint256 oldValue, uint256 _newValue);\\n    event KonaDistributionSet(address oldAddress, address newAddress);\\n\\n    function setKonaPools(address _newAddress) external;\\n\\n    function setKonaOracles(address _newAddress) external;\\n\\n    function setKonaStaking(address _newAddress) external;\\n\\n    function setRefenceRate(uint256 _newValue) external;\\n\\n    function setKonaDistribution(address _newAddress) external;\\n\\n    function konaPools() external view returns (address);\\n\\n    function konaOracles() external view returns (address);\\n\\n    function konaStaking() external view returns (address);\\n\\n    function konaDistribution() external view returns (address);\\n\\n    function referenceRate() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IKonaPools.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ninterface IKonaPools {\\n    event PoolStatusChanged(address indexed pool, bool status);\\n\\n    enum Status {\\n        JOIN_LEAVE,\\n        VOTING,\\n        ASSIGN_CAPITAL,\\n        CYCLE,\\n        DISTRIBUTION\\n    }\\n\\n    function konaGlobals() external view returns (address _globals);\\n\\n    function emergencyMode() external view returns (bool);\\n\\n    function getPools() external view returns (address[] memory);\\n\\n    function isValidPool(address pool) external view returns (bool);\\n\\n    function changePoolStatus(address _pool, bool _status) external;\\n\\n    function canStartJoinLeave() external view returns (bool);\\n\\n    function canStartAssignCapital() external view returns (bool);\\n\\n    function canStartVoting() external view returns (bool);\\n\\n    function canStartNewCycle() external view returns (bool);\\n\\n    function startNewCycle() external;\\n\\n    function startJoinLeave() external;\\n\\n    function startVoting() external;\\n\\n    function startAssignCapital() external;\\n\\n    function isDateInsideCurrentCycle(uint256 _maturity) external view returns (bool);\\n\\n    function getCycleStatus() external view returns (uint256, uint256, Status);\\n\\n    function getCycleDays() external pure returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILoan.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ILoan {\\n\\n   function repay(uint256 _total) external;\\n   \\n   function getMaturity() external view returns(uint256);\\n   \\n   function getIsFunded() external view returns(bool);\\n   \\n   function getAmount() external view returns(uint256);\\n   \\n   function setIsFunded() external;\\n   \\n   function getCycle() external view returns (uint256);\\n   \\n   function getBrzToken() external view returns (IERC20);\\n   \\n   function getBorrower() external view returns (address);\\n   \\n   function getInterestRate() external view returns (uint256);\\n   \\n   function getRepayments() external view returns (uint256);\\n   \\n   function getAmountPlusInterest() external view returns (uint256);\\n   \\n   function getExcessCollateral() external view returns (uint256);\\n   \\n   function getBorrowerInfo() external view returns (string memory);\\n   \\n   function getLockReference() external view returns (string memory);\\n   \\n   function getTotalRepaid() external view returns (uint256);\\n   \\n   function getOracle() external view returns (address);\\n\\n   event Withdrawn(address indexed rampAddress, uint256 amount);\\n   event Repaid(address indexed rampAddress, address indexed oracle, address indexed pool, uint256 amount);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ninterface IOracle {\\n    event StandByCapitalCommited(address indexed pool, uint256 indexed cycle, uint256 total);\\n    event LoanWithdrawn(\\n        address indexed loan,\\n        address indexed pool,\\n        uint256 indexed cycle,\\n        address rampAddress,\\n        uint256 total\\n    );\\n    struct LoanParams {\\n        address _borrower;\\n        uint256 _amount;\\n        uint256 _interestRate;\\n        uint256 _maturity;\\n        uint256 _repayments;\\n        uint256 _amountPlusInterest;\\n        uint256 _excessCollateral;\\n        string _borrowerInfo;\\n        string _lockReference;\\n        address _pool;\\n    }\\n    event LoanRepaid(address indexed loan, address indexed pool, uint256 indexed loanCycle, uint256 total);\\n\\n    event LoanDeployed(address indexed loan);\\n\\n    function acceptCapitalAssigned(address _pool, uint256 _total) external;\\n\\n    function commitStandByCapital(address _pool, uint256 _total) external;\\n\\n    function oracleFee() external view returns (uint256);\\n\\n    function repay(uint256 _total) external;\\n\\n    function loans(address _loan) external returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ninterface IPool {\\n    struct Vote {\\n        address staker;\\n        uint256 totalVotes;\\n    }\\n\\n    event OracleStatusChanged(address indexed oracle, bool status);\\n    event OracleCostOfCapitalSet(address indexed oracle, uint256 cycle, uint256 total);\\n    event OracleCapitalAssignedSet(address indexed oracle, uint256 cycle, uint256 total);\\n    event OracleCapitalAssignedAccepted(address indexed oracle, uint256 cycle, uint256 totalAccepted);\\n    event LoanStatusChanged(address indexed loan, bool status);\\n    event OracleStandByCapitalCommitted(address indexed oracle, uint256 cycle, uint256 total);\\n    event LoanFunded(uint256 indexed cycle, address indexed oracle, address indexed loan, uint256 loanAmount);\\n    event LoanRepaid(address indexed loan, address indexed oracle, uint256 indexed loanCycle, uint256 total);\\n    event FundsAddedAfterDistribution(uint256 indexed cycle, address indexed oracle, uint256 total);\\n    event StandByCapitalReturnedAfterDistribution(uint256 indexed cycle, address indexed oracle, uint256 total);\\n\\n    event NewDepositRequest(address indexed liquidityProvider, uint indexed cycle, uint256 brzTokens);\\n    event NewWithdrawRequest(address indexed liquidityProvider, uint indexed cycle, uint256 lpTokens);\\n\\n    event CanceledDepositRequest(address indexed liquidityProvider, uint indexed cycle, uint256 brzTokens);\\n    event CanceledWithdrawRequest(address indexed liquidityProvider, uint indexed cycle, uint256 lpTokens);\\n\\n    event FinalDepositRequest(address indexed liquidityProvider, uint indexed cycle, uint256 brzTokens);\\n    event FinalWithdrawRequest(address indexed liquidityProvider, uint indexed cycle, uint256 lpTokens);\\n\\n    event DirectDeposit(address indexed liquidityProvider, uint indexed cycle, uint256 brzTokens);\\n    event DirectWithdraw(address indexed liquidityProvider, uint indexed cycle, uint256 lpTokens);\\n\\n    event NewRewardDeposit(address indexed liquidityProvider, uint indexed cycle, uint256 total);\\n    event ClaimRewardDeposit(address indexed liquidityProvider, uint indexed cycle, uint256 total);\\n\\n    function konaGlobals() external view returns (address _globals);\\n\\n    function getOracles() external view returns (address[] memory);\\n\\n    function directDeposit(uint amount) external;\\n\\n    function directWithdraw(uint amount) external;\\n\\n    function queueDeposit(uint256 amount) external;\\n\\n    function queueWithdraw(uint256 amount) external;\\n\\n    function finalizeDepositQueue(uint amount, uint requestedCycle) external;\\n\\n    function finalizeWithdrawQueue(uint amount, uint requestedCycle) external;\\n\\n    function depositBalancePerCycle(uint cycle, address user) external returns (uint);\\n\\n    function requestFunding(address _loan) external returns (bool);\\n\\n    function claimRewardDeposit(address _beneficiary, uint _total, uint _cycle) external;\\n\\n    function totalCapitalSupplyPerCycle(uint cycle) external view returns (uint);\\n\\n    function totalCapitalsAcceptedManual(uint cycle) external view returns (uint);\\n\\n    function totalCapitalsAccepted(uint cycle) external view returns (uint);\\n\\n    function assignCapitalAfterVoting(address[] memory _oracles) external;\\n\\n    function isDateInsideCurrentCycle(uint256 _maturity) external returns (bool);\\n\\n    function commitStandByCapital(uint256 _total) external;\\n\\n    function getBRZForShares(uint shares, uint cycleNumber) external view returns (uint);\\n\\n    function getShares(uint _brzAmount, uint cycleNumber) external view returns (uint);\\n\\n    function acceptCapitalAssigned(uint256 _total) external;\\n\\n    function getOriginalCapitalAssigned(address _oracle, uint256 _cycleNumber) external view returns (uint256);\\n\\n    function getAcceptedCapitalAssigned(address _oracle, uint256 _cycleNumber) external view returns (uint256);\\n\\n    function getCommittedStandByCapital(address _oracle, uint256 _cycleNumber) external view returns (uint256);\\n\\n    function changeOracleStatus(address _oracle, bool _status) external;\\n\\n    function repay(address _loan, uint256 _total) external;\\n\\n    function getFundsAvailableToSpend(address _oracle, uint256 _cycleNumber) external view returns (uint256);\\n\\n    function getCostOfCapital(address _oracle, uint256 _cycleNumber) external view returns (uint256);\\n\\n    function addFundsAfterDistribution(uint256 _cycleNumber, address _oracle, uint256 _total) external;\\n\\n    function sendStandByBackToOracle(uint256 _cycleNumber, address _oracle, uint256 _total) external;\\n\\n    function hasOracles() external view returns (bool);\\n\\n    function createRewardDeposit(address _beneficiary, uint256 _total) external;\\n\\n    function getBRZBalanceWithRewards(address user) external view returns (uint);\\n\\n    function atLeastOneOraclesHasCapital(uint256 _cycleNumber) external view returns (bool);\\n\\n    function onCycleRollOver(uint lastCycle) external;\\n}\\n\"\r\n    },\r\n    \"contracts/Loan.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport './interfaces/IOracle.sol';\\nimport './interfaces/ILoan.sol';\\n\\n/**\\n * @title Loan Contract\\n * @dev A smart contract representing a loan agreement.\\n */\\ncontract Loan is ILoan {\\n    uint256 public cycle; // Maturity date for the loan\\n    IERC20 private brzToken; // BRZ token contract instance\\n    address private borrower; // Borrower address\\n    uint256 private amount; // Loan amount\\n    uint256 private interestRate; // Interest rate for the loan\\n    uint256 private maturity; // Maturity date for the loan\\n    uint256 private repayments; // Number of repayments\\n    uint256 private amountPlusInterest; // Total loan amount with interest\\n    uint256 private excessCollateral; // Collateral excess amount\\n    string private borrowerInfo; // Hashed borrower information\\n    string private lockReference; // Lock reference\\n    uint256 private totalRepaid; // Total repaid amount\\n    bool private isFunded; // Indicates if the loan has been funded\\n    address private oracle; // Contract address of the Oracle that has deployed this loan\\n\\n    /**\\n     * @dev Contract constructor\\n     * @param loanParams The params needed for a Loan\\n     */\\n    constructor(IOracle.LoanParams memory loanParams, IERC20 _brzToken, address _oracle, uint _cycle) {\\n        brzToken = _brzToken;\\n        borrower = loanParams._borrower;\\n        amount = loanParams._amount;\\n        interestRate = loanParams._interestRate;\\n        maturity = loanParams._maturity;\\n        repayments = loanParams._repayments;\\n        amountPlusInterest = loanParams._amountPlusInterest;\\n        excessCollateral = loanParams._excessCollateral;\\n        borrowerInfo = loanParams._borrowerInfo;\\n        lockReference = loanParams._lockReference;\\n        oracle = _oracle;\\n        cycle = _cycle;\\n    }\\n\\n    /**\\n     * @dev Repays a portion of the loan by transferring tokens from the sender's address to the loan contract.\\n     * @param _total The amount to be repaid\\n     */\\n    function repay(uint256 _total) external {\\n        require(isFunded, 'Loan is not funded');\\n\\n        address pool = IOracle(oracle).loans(address(this));\\n\\n        assert(pool != address(0));\\n\\n        brzToken.transferFrom(msg.sender, address(this), _total);\\n        brzToken.approve(pool, _total);\\n\\n        IOracle(oracle).repay(_total);\\n\\n        totalRepaid += _total;\\n\\n        emit Repaid(msg.sender, oracle, pool, _total);\\n    }\\n\\n    // Getter functions for all the variables\\n\\n    /**\\n     * @dev Returns the BRZ token contract address.\\n     * @return The BRZ token contract address.\\n     */\\n    function getBrzToken() external view returns (IERC20) {\\n        return brzToken;\\n    }\\n\\n    /**\\n     * @dev Returns the borrower's address.\\n     * @return The borrower's address.\\n     */\\n    function getBorrower() external view returns (address) {\\n        return borrower;\\n    }\\n\\n    /**\\n     * @dev Returns the interest rate of the loan.\\n     * @return The interest rate of the loan.\\n     */\\n    function getInterestRate() external view returns (uint256) {\\n        return interestRate;\\n    }\\n\\n    /**\\n     * @dev Returns the number of repayments.\\n     * @return The number of repayments.\\n     */\\n    function getRepayments() external view returns (uint256) {\\n        return repayments;\\n    }\\n\\n    /**\\n     * @dev Returns the total loan amount with interest.\\n     * @return The total loan amount with interest.\\n     */\\n    function getAmountPlusInterest() external view returns (uint256) {\\n        return amountPlusInterest;\\n    }\\n\\n    /**\\n     * @dev Returns the collateral excess amount.\\n     * @return The collateral excess amount.\\n     */\\n    function getExcessCollateral() external view returns (uint256) {\\n        return excessCollateral;\\n    }\\n\\n    /**\\n     * @dev Returns the borrower's information.\\n     * @return The borrower's information.\\n     */\\n    function getBorrowerInfo() external view returns (string memory) {\\n        return borrowerInfo;\\n    }\\n\\n    /**\\n     * @dev Returns the lock reference.\\n     * @return The lock reference.\\n     */\\n    function getLockReference() external view returns (string memory) {\\n        return lockReference;\\n    }\\n\\n    /**\\n     * @dev Returns the total repaid amount.\\n     * @return The total repaid amount.\\n     */\\n    function getTotalRepaid() external view returns (uint256) {\\n        return totalRepaid;\\n    }\\n\\n    /**\\n     * @dev Returns the oracle contract address.\\n     * @return The oracle contract address.\\n     */\\n    function getOracle() external view returns (address) {\\n        return oracle;\\n    }\\n\\n    /**\\n     * @dev Returns the maturity date of the loan.\\n     * @return The maturity date of the loan.\\n     */\\n    function getMaturity() external view returns (uint256) {\\n        return maturity;\\n    }\\n\\n    /**\\n     * @dev Returns the cycle maturity the loan.\\n     * @return The maturity date of the loan.\\n     */\\n    function getCycle() external view returns (uint256) {\\n        return cycle;\\n    }\\n\\n    /**\\n     * @dev Returns the funding status of the loan.\\n     * @return The funding status of the loan.\\n     */\\n    function getIsFunded() external view returns (bool) {\\n        return isFunded;\\n    }\\n\\n    /**\\n     * @dev Returns the loan amount.\\n     * @return The loan amount.\\n     */\\n    function getAmount() external view returns (uint256) {\\n        return amount;\\n    }\\n\\n    function getLoanInfo()\\n        external\\n        view\\n        returns (\\n            uint256,\\n            address,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            string memory,\\n            string memory,\\n            uint256,\\n            bool,\\n            address\\n        )\\n    {\\n        return (\\n            cycle,\\n            borrower,\\n            amount,\\n            interestRate,\\n            maturity,\\n            repayments,\\n            amountPlusInterest,\\n            excessCollateral,\\n            borrowerInfo,\\n            lockReference,\\n            totalRepaid,\\n            isFunded,\\n            oracle\\n        );\\n    }\\n\\n    /**\\n     * @dev Sets the loan funding status to true.\\n     */\\n    function setIsFunded() external {\\n        require(!isFunded, 'Loan already funded');\\n        require(msg.sender == oracle, 'Invalid caller');\\n\\n        isFunded = true;\\n\\n        emit Withdrawn(borrower, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Oracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport './Loan.sol';\\nimport './interfaces/IPool.sol';\\nimport './interfaces/IKonaPools.sol';\\nimport './interfaces/IKonaGlobals.sol';\\nimport './interfaces/IOracle.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/access/AccessControl.sol';\\n\\n/**\\n * @title Oracle\\n * @dev This contract serves as an Oracle for managing loans .\\n */\\n\\ncontract Oracle is AccessControl, IOracle {\\n    bytes32 public constant MANAGER_ROLE = keccak256('MANAGER_ROLE');\\n\\n    string public oracleName;\\n\\n    IERC20 public brzToken;\\n\\n    uint256 public immutable oracleFee; //= 0.005 * 1e18 = 0.5%\\n\\n    //Loan Address x Pool Address\\n    mapping(address => address) public loans;\\n\\n    /**\\n     * @dev Initializes the Oracle contract.\\n     * @param _oracleName The oracle's name.\\n     * @param _brzToken The BRZ token contract address.\\n     */\\n    constructor(string memory _oracleName, IERC20 _brzToken, uint _oracleFee) {\\n        oracleName = _oracleName;\\n        brzToken = _brzToken;\\n        oracleFee = _oracleFee;\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _grantRole(MANAGER_ROLE, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Modifier to allow only loans to call the function.\\n     */\\n    modifier onlyLoan() {\\n        require(loans[msg.sender] != address(0), 'Only loans can call this');\\n        _;\\n    }\\n\\n    /**\\n     * @dev Requests a new loan.\\n    //  * @param loanParams All the Parameters needed for a loan\\n\\n     */\\n    function requestLoan(LoanParams memory loanParams) external onlyRole(MANAGER_ROLE) {\\n        require(\\n            IPool(loanParams._pool).isDateInsideCurrentCycle(loanParams._maturity),\\n            'Maturity outside current cycle'\\n        );\\n        (uint currentCycle, ) = getCurrentCycleStatus(loanParams._pool);\\n        Loan loan = new Loan(loanParams, brzToken, address(this), currentCycle);\\n        approveLoan(address(loan), loanParams._pool);\\n\\n        emit LoanDeployed(address(loan));\\n    }\\n\\n    /**\\n     * @dev Approves a loan.\\n     * @param _loan The loan address.\\n     * @param _pool The pool address.\\n     */\\n    function approveLoan(address _loan, address _pool) public onlyRole(MANAGER_ROLE) {\\n        loans[_loan] = _pool;\\n    }\\n\\n    /**\\n     * @dev Accepts assigned capital for a pool.\\n     * @param _pool The pool address.\\n     * @param _total The total assigned capital.\\n     */\\n    function acceptCapitalAssigned(address _pool, uint256 _total) external onlyRole(MANAGER_ROLE) {\\n        IPool(_pool).acceptCapitalAssigned(_total);\\n    }\\n\\n    /**\\n     * @dev Commits standby capital for a pool.\\n     * @param _pool The pool address.\\n     * @param _total The total standby capital.\\n     */\\n    function commitStandByCapital(address _pool, uint256 _total) external onlyRole(MANAGER_ROLE) {\\n        (uint currentCycle, ) = getCurrentCycleStatus(_pool);\\n\\n        require(brzToken.transferFrom(msg.sender, _pool, _total), 'Could not take the BRZ to commit');\\n\\n        IPool(_pool).commitStandByCapital(_total);\\n\\n        emit StandByCapitalCommited(_pool, currentCycle, _total);\\n    }\\n\\n    /**\\n     * @dev Requests funding for a loan.\\n     * @param _loan The loan address.\\n     */\\n    function requestFunding(address _loan) external onlyRole(MANAGER_ROLE) {\\n        require(loans[_loan] != address(0), 'Not approved');\\n        address pool = loans[_loan];\\n        IPool(pool).requestFunding(_loan);\\n\\n        ILoan(_loan).setIsFunded();\\n\\n        address borrower = ILoan(_loan).getBorrower();\\n        uint256 loanAmount = ILoan(_loan).getAmount();\\n\\n        (uint currentCycle, ) = getCurrentCycleStatus(pool);\\n\\n        emit LoanWithdrawn(_loan, pool, currentCycle, borrower, loanAmount);\\n    }\\n\\n    /**\\n     * @dev Repays a loan.\\n     * @param _total The total amount to repay.\\n     */\\n    function repay(uint256 _total) external onlyLoan {\\n        address pool = loans[msg.sender];\\n\\n        IPool(pool).repay(msg.sender, _total);\\n\\n        emit LoanRepaid(msg.sender, pool, ILoan(msg.sender).getCycle(), _total);\\n    }\\n\\n    /**\\n     * @dev Returns the current cycle number & status.\\n     * @return The current cycle number & status.\\n     */\\n    function getCurrentCycleStatus(address _pool) public view returns (uint256, IKonaPools.Status) {\\n        address konaPools = IKonaGlobals(IPool(_pool).konaGlobals()).konaPools();\\n        (uint256 currentCycle, , IKonaPools.Status status) = IKonaPools(konaPools).getCycleStatus();\\n        return (currentCycle, status);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_oracleName\",\"type\":\"string\"},{\"internalType\":\"contract IERC20\",\"name\":\"_brzToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_oracleFee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"loan\",\"type\":\"address\"}],\"name\":\"LoanDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"loan\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"loanCycle\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"name\":\"LoanRepaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"loan\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rampAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"name\":\"LoanWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"name\":\"StandByCapitalCommited\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_total\",\"type\":\"uint256\"}],\"name\":\"acceptCapitalAssigned\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_loan\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"approveLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"brzToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_total\",\"type\":\"uint256\"}],\"name\":\"commitStandByCapital\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"getCurrentCycleStatus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"enum IKonaPools.Status\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"loans\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_total\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_loan\",\"type\":\"address\"}],\"name\":\"requestFunding\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_interestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maturity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_repayments\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountPlusInterest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_excessCollateral\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_borrowerInfo\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_lockReference\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"internalType\":\"struct IOracle.LoanParams\",\"name\":\"loanParams\",\"type\":\"tuple\"}],\"name\":\"requestLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Oracle", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "100", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000600000000000000000000000004ed141110f6eeeaba9a1df36d8c26f684d2475dc0000000000000000000000000000000000000000000000000011c37937e08000000000000000000000000000000000000000000000000000000000000000000a413535204f7261636c6500000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}