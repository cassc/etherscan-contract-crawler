{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Bindings.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.17;\\n\\nimport \\\"./Gateway/MintGatewayV2.sol\\\";\\nimport \\\"./Gateway/GatewayRegistry.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/StandaloneERC20.sol\\\";\\n\\n/// @notice Bindings imports all of the contracts for generating bindings.\\n/* solium-disable-next-line no-empty-blocks */\\ncontract Bindings {\\n\\n}\\n\"\r\n    },\r\n    \"contracts/Gateway/MintGatewayV2.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.17;\\n\\nimport \\\"@openzeppelin/upgrades/contracts/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/upgrades/contracts/upgradeability/InitializableAdminUpgradeabilityProxy.sol\\\";\\n\\nimport \\\"../Governance/Claimable.sol\\\";\\nimport \\\"../libraries/String.sol\\\";\\nimport \\\"./RenERC20.sol\\\";\\nimport \\\"./interfaces/IGateway.sol\\\";\\nimport \\\"../libraries/CanReclaimTokens.sol\\\";\\nimport \\\"./MintGatewayV1.sol\\\";\\n\\ncontract MintGatewayStateV2 {\\n    struct Burn {\\n        uint256 _blocknumber;\\n        bytes _to;\\n        uint256 _amount;\\n        // Optional\\n        string _chain;\\n        bytes _payload;\\n    }\\n\\n    mapping(uint256 => Burn) internal burns;\\n\\n    bytes32 public selectorHash;\\n\\n    // Initialize to 0x1 because 0x0 is the default value returned by `recover`\\n    // when it encounters an error.\\n    address public _legacy_mintAuthority;\\n}\\n\\n/// @notice Gateway handles verifying mint and burn requests. A mintAuthority\\n/// approves new assets to be minted by providing a digital signature. An owner\\n/// of an asset can request for it to be burnt.\\ncontract MintGatewayLogicV2 is\\n    Initializable,\\n    Claimable,\\n    CanReclaimTokens,\\n    IGateway,\\n    MintGatewayStateV1,\\n    MintGatewayStateV2\\n{\\n    using SafeMath for uint256;\\n\\n    event LogMintAuthorityUpdated(address indexed _newMintAuthority);\\n    event LogMint(\\n        address indexed _to,\\n        uint256 _amount,\\n        uint256 indexed _n,\\n        // Log the nHash instead of sHash so that it can be queried without\\n        // knowing the sHash.\\n        bytes32 indexed _nHash\\n    );\\n    event LogBurn(\\n        bytes _to,\\n        uint256 _amount,\\n        uint256 indexed _n,\\n        bytes indexed _indexedTo\\n    );\\n\\n    /// @notice Only allow the Darknode Payment contract.\\n    modifier onlyOwnerOrMintAuthority() {\\n        require(\\n            msg.sender == mintAuthority || msg.sender == owner(),\\n            \\\"MintGateway: caller is not the owner or mint authority\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @param _token The RenERC20 this Gateway is responsible for.\\n    /// @param _feeRecipient The recipient of burning and minting fees.\\n    /// @param _mintAuthority The address of the key that can sign mint\\n    ///        requests.\\n    /// @param _mintFee The amount subtracted each mint request and\\n    ///        forwarded to the feeRecipient. In BIPS.\\n    /// @param _burnFee The amount subtracted each burn request and\\n    ///        forwarded to the feeRecipient. In BIPS.\\n    function initialize(\\n        RenERC20LogicV1 _token,\\n        address _feeRecipient,\\n        address _mintAuthority,\\n        uint16 _mintFee,\\n        uint16 _burnFee,\\n        uint256 _minimumBurnAmount\\n    ) public initializer {\\n        Claimable.initialize(msg.sender);\\n        CanReclaimTokens.initialize(msg.sender);\\n        minimumBurnAmount = _minimumBurnAmount;\\n        token = _token;\\n        mintFee = _mintFee;\\n        burnFee = _burnFee;\\n        updateMintAuthority(_mintAuthority);\\n        updateFeeRecipient(_feeRecipient);\\n    }\\n\\n    /// @param _selectorHash Hash of the token and chain selector.\\n    ///        The hash should calculated from\\n    ///        `SHA256(4 bytes of selector length, selector)`\\n    function updateSelectorHash(bytes32 _selectorHash) public onlyOwner {\\n        selectorHash = _selectorHash;\\n    }\\n\\n    /// @notice Allow the owner to update the token symbol.\\n    function updateSymbol(string memory symbol) public onlyOwner {\\n        token.updateSymbol(symbol);\\n    }\\n\\n    // Public functions ////////////////////////////////////////////////////////\\n\\n    /// @notice Claims ownership of the token passed in to the constructor.\\n    /// `transferStoreOwnership` must have previously been called.\\n    /// Anyone can call this function.\\n    function claimTokenOwnership() public {\\n        token.claimOwnership();\\n    }\\n\\n    /// @notice Allow the owner to update the owner of the RenERC20 token.\\n    function transferTokenOwnership(MintGatewayLogicV2 _nextTokenOwner)\\n        public\\n        onlyOwner\\n    {\\n        token.transferOwnership(address(_nextTokenOwner));\\n        _nextTokenOwner.claimTokenOwnership();\\n    }\\n\\n    /// @notice Allow the owner to update the mint authority.\\n    ///\\n    /// @param _nextMintAuthority The new mint authority address.\\n    function updateMintAuthority(address _nextMintAuthority)\\n        public\\n        onlyOwnerOrMintAuthority\\n    {\\n        // The mint authority should not be set to 0, which is the result\\n        // returned by ecrecover for an invalid signature.\\n        require(\\n            _nextMintAuthority != address(0),\\n            \\\"MintGateway: mintAuthority cannot be set to address zero\\\"\\n        );\\n        mintAuthority = _nextMintAuthority;\\n        emit LogMintAuthorityUpdated(mintAuthority);\\n    }\\n\\n    /// @notice Allow the owner to update the legacy mint authority.\\n    ///\\n    /// @param _nextMintAuthority The new legacy mint authority address.\\n    function _legacy_updateMintAuthority(address _nextMintAuthority)\\n        public\\n        onlyOwner\\n    {\\n        _legacy_mintAuthority = _nextMintAuthority;\\n    }\\n\\n    /// @notice Allow the owner to update the minimum burn amount.\\n    ///\\n    /// @param _minimumBurnAmount The new min burn amount.\\n    function updateMinimumBurnAmount(uint256 _minimumBurnAmount)\\n        public\\n        onlyOwner\\n    {\\n        minimumBurnAmount = _minimumBurnAmount;\\n    }\\n\\n    /// @notice Allow the owner to update the fee recipient.\\n    ///\\n    /// @param _nextFeeRecipient The address to start paying fees to.\\n    function updateFeeRecipient(address _nextFeeRecipient) public onlyOwner {\\n        // 'mint' and 'burn' will fail if the feeRecipient is 0x0\\n        require(\\n            _nextFeeRecipient != address(0x0),\\n            \\\"MintGateway: fee recipient cannot be 0x0\\\"\\n        );\\n\\n        feeRecipient = _nextFeeRecipient;\\n    }\\n\\n    /// @notice Allow the owner to update the 'mint' fee.\\n    ///\\n    /// @param _nextMintFee The new fee for minting and burning.\\n    function updateMintFee(uint16 _nextMintFee) public onlyOwner {\\n        mintFee = _nextMintFee;\\n    }\\n\\n    /// @notice Allow the owner to update the burn fee.\\n    ///\\n    /// @param _nextBurnFee The new fee for minting and burning.\\n    function updateBurnFee(uint16 _nextBurnFee) public onlyOwner {\\n        burnFee = _nextBurnFee;\\n    }\\n\\n    /// @notice mint verifies a mint approval signature from RenVM and creates\\n    ///         tokens after taking a fee for the `_feeRecipient`.\\n    ///\\n    /// @param _pHash (payload hash) The hash of the payload associated with the\\n    ///        mint.\\n    /// @param _amountUnderlying The amount of the token being minted, in its smallest\\n    ///        value. (e.g. satoshis for BTC).\\n    /// @param _nHash (nonce hash) The hash of the nonce, amount and pHash.\\n    /// @param _sig The signature of the hash of the following values:\\n    ///        (pHash, amount, msg.sender, nHash), signed by the mintAuthority.\\n    function mint(\\n        bytes32 _pHash,\\n        uint256 _amountUnderlying,\\n        bytes32 _nHash,\\n        bytes memory _sig\\n    ) public returns (uint256) {\\n        // Calculate the hash signed by RenVM.\\n        bytes32 sigHash =\\n            hashForSignature(_pHash, _amountUnderlying, msg.sender, _nHash);\\n\\n        // Calculate the v0.2 signature hash for backwards-compatibility.\\n        bytes32 legacySigHash =\\n            _legacy_hashForSignature(\\n                _pHash,\\n                _amountUnderlying,\\n                msg.sender,\\n                _nHash\\n            );\\n\\n        // Check that neither signature has been redeemed.\\n        require(\\n            status[sigHash] == false && status[legacySigHash] == false,\\n            \\\"MintGateway: nonce hash already spent\\\"\\n        );\\n\\n        // If both signatures fail verification, throw an error. If any one of\\n        // them passed the verification, continue.\\n        if (\\n            !verifySignature(sigHash, _sig) &&\\n            !_legacy_verifySignature(legacySigHash, _sig)\\n        ) {\\n            // Return a detailed string containing the hash and recovered\\n            // signer. This is somewhat costly but is only run in the revert\\n            // branch.\\n            revert(\\n                String.add8(\\n                    \\\"MintGateway: invalid signature. pHash: \\\",\\n                    String.fromBytes32(_pHash),\\n                    \\\", amount: \\\",\\n                    String.fromUint(_amountUnderlying),\\n                    \\\", msg.sender: \\\",\\n                    String.fromAddress(msg.sender),\\n                    \\\", _nHash: \\\",\\n                    String.fromBytes32(_nHash)\\n                )\\n            );\\n        }\\n\\n        // Update the status for both signature hashes. This is to ensure that\\n        // legacy signatures can't be re-redeemed if `updateSelectorHash` is\\n        // ever called - thus changing the result of `sigHash` but not\\n        // `legacySigHash`.\\n        status[sigHash] = true;\\n        status[legacySigHash] = true;\\n\\n        uint256 amountScaled = token.fromUnderlying(_amountUnderlying);\\n\\n        // Mint `amount - fee` for the recipient and mint `fee` for the minter\\n        uint256 absoluteFeeScaled =\\n            amountScaled.mul(mintFee).div(BIPS_DENOMINATOR);\\n        uint256 receivedAmountScaled =\\n            amountScaled.sub(\\n                absoluteFeeScaled,\\n                \\\"MintGateway: fee exceeds amount\\\"\\n            );\\n\\n        // Mint amount minus the fee\\n        token.mint(msg.sender, receivedAmountScaled);\\n        // Mint the fee\\n        if (absoluteFeeScaled > 0) {\\n            token.mint(feeRecipient, absoluteFeeScaled);\\n        }\\n\\n        // Emit a log with a unique identifier 'n'.\\n        uint256 receivedAmountUnderlying =\\n            token.toUnderlying(receivedAmountScaled);\\n        emit LogMint(msg.sender, receivedAmountUnderlying, nextN, _nHash);\\n        nextN += 1;\\n\\n        return receivedAmountScaled;\\n    }\\n\\n    /// @notice burn destroys tokens after taking a fee for the `_feeRecipient`,\\n    ///         allowing the associated assets to be released on their native\\n    ///         chain.\\n    ///\\n    /// @param _to The address to receive the un-bridged asset. The format of\\n    ///        this address should be of the destination chain.\\n    ///        For example, when burning to Bitcoin, _to should be a\\n    ///        Bitcoin address.\\n    /// @param _amount The amount of the token being burnt, in its\\n    ///        smallest value. (e.g. satoshis for BTC)\\n    function burn(bytes memory _to, uint256 _amount) public returns (uint256) {\\n        // The recipient must not be empty. Better validation is possible,\\n        // but would need to be customized for each destination ledger.\\n        require(_to.length != 0, \\\"MintGateway: to address is empty\\\");\\n\\n        // Calculate fee, subtract it from amount being burnt.\\n        uint256 fee = _amount.mul(burnFee).div(BIPS_DENOMINATOR);\\n        uint256 amountAfterFee =\\n            _amount.sub(fee, \\\"MintGateway: fee exceeds amount\\\");\\n\\n        // If the scaled token can represent more precision than the underlying\\n        // token, the difference is lost. This won't exceed 1 sat, so is\\n        // negligible compared to burning and transaction fees.\\n        uint256 amountAfterFeeUnderlying = token.toUnderlying(amountAfterFee);\\n\\n        // Burn the whole amount, and then re-mint the fee.\\n        token.burn(msg.sender, _amount);\\n        if (fee > 0) {\\n            token.mint(feeRecipient, fee);\\n        }\\n\\n        require(\\n            // Must be strictly greater, to that the release transaction is of\\n            // at least one unit.\\n            amountAfterFeeUnderlying > minimumBurnAmount,\\n            \\\"MintGateway: amount is less than the minimum burn amount\\\"\\n        );\\n\\n        emit LogBurn(_to, amountAfterFeeUnderlying, nextN, _to);\\n\\n        // Store burn so that it can be looked up instead of relying on event\\n        // logs.\\n        bytes memory payload;\\n        MintGatewayStateV2.burns[nextN] = Burn({\\n            _blocknumber: block.number,\\n            _to: _to,\\n            _amount: amountAfterFeeUnderlying,\\n            _chain: \\\"\\\",\\n            _payload: payload\\n        });\\n\\n        nextN += 1;\\n\\n        return amountAfterFeeUnderlying;\\n    }\\n\\n    function getBurn(uint256 _n)\\n        public\\n        view\\n        returns (\\n            uint256 _blocknumber,\\n            bytes memory _to,\\n            uint256 _amount,\\n            // Optional\\n            string memory _chain,\\n            bytes memory _payload\\n        )\\n    {\\n        Burn memory burnStruct = MintGatewayStateV2.burns[_n];\\n        require(burnStruct._to.length > 0, \\\"MintGateway: burn not found\\\");\\n        return (\\n            burnStruct._blocknumber,\\n            burnStruct._to,\\n            burnStruct._amount,\\n            burnStruct._chain,\\n            burnStruct._payload\\n        );\\n    }\\n\\n    /// @notice verifySignature checks the the provided signature matches the\\n    /// provided parameters.\\n    function verifySignature(bytes32 _sigHash, bytes memory _sig)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return mintAuthority == ECDSA.recover(_sigHash, _sig);\\n    }\\n\\n    /// @notice verifySignature checks the the provided signature matches the\\n    /// provided parameters.\\n    function _legacy_verifySignature(bytes32 _sigHash, bytes memory _sig)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        require(\\n            _legacy_mintAuthority != address(0x0),\\n            \\\"MintGateway: legacy mintAuthority not set\\\"\\n        );\\n        return _legacy_mintAuthority == ECDSA.recover(_sigHash, _sig);\\n    }\\n\\n    /// @notice hashForSignature hashes the parameters so that they can be\\n    /// signed.\\n    function hashForSignature(\\n        bytes32 _pHash,\\n        uint256 _amount,\\n        address _to,\\n        bytes32 _nHash\\n    ) public view returns (bytes32) {\\n        return\\n            keccak256(abi.encode(_pHash, _amount, selectorHash, _to, _nHash));\\n    }\\n\\n    /// @notice _legacy_hashForSignature calculates the signature hash used by\\n    /// the 0.2 version of RenVM. It's kept here for backwards-compatibility.\\n    function _legacy_hashForSignature(\\n        bytes32 _pHash,\\n        uint256 _amount,\\n        address _to,\\n        bytes32 _nHash\\n    ) public view returns (bytes32) {\\n        return\\n            keccak256(abi.encode(_pHash, _amount, address(token), _to, _nHash));\\n    }\\n}\\n\\n/* solium-disable-next-line no-empty-blocks */\\ncontract MintGatewayProxy is InitializableAdminUpgradeabilityProxy {\\n\\n}\\n\"\r\n    },\r\n    \"contracts/Gateway/GatewayRegistry.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.17;\\n\\nimport \\\"../Governance/Claimable.sol\\\";\\nimport \\\"./RenERC20.sol\\\";\\nimport \\\"../libraries/LinkedList.sol\\\";\\nimport \\\"./interfaces/IGateway.sol\\\";\\nimport \\\"../libraries/CanReclaimTokens.sol\\\";\\n\\n/// @notice GatewayRegistry is a mapping from assets to their associated\\n/// RenERC20 and Gateway contracts.\\ncontract GatewayRegistry is Claimable, CanReclaimTokens {\\n    constructor() public {\\n        Claimable.initialize(msg.sender);\\n        CanReclaimTokens.initialize(msg.sender);\\n    }\\n\\n    /// @dev The symbol is included twice because strings have to be hashed\\n    /// first in order to be used as a log index/topic.\\n    event LogGatewayRegistered(\\n        string _symbol,\\n        string indexed _indexedSymbol,\\n        address indexed _token,\\n        address indexed _gatewayContract\\n    );\\n    event LogGatewayDeregistered(\\n        string _symbol,\\n        string indexed _indexedSymbol,\\n        address indexed _token,\\n        address indexed _gatewayContract\\n    );\\n    event LogGatewayUpdated(\\n        address indexed _token,\\n        address indexed _currentGatewayContract,\\n        address indexed _newGatewayContract\\n    );\\n\\n    /// @notice The number of gateways registered.\\n    uint256 numGatewayContracts = 0;\\n\\n    /// @notice A list of gateway contracts.\\n    LinkedList.List private gatewayContractList;\\n\\n    /// @notice A list of ren token contracts.\\n    LinkedList.List private renTokenList;\\n\\n    /// @notice A map of token addresses to canonical gateway contract addresses.\\n    mapping(address => address) private gatewayByToken;\\n\\n    /// @notice A map of token symbols to token addresses.\\n    mapping(string => address) private tokenBySymbol;\\n\\n    /// @notice Allow the owner to set the Gateway contract for a given\\n    ///         RenERC20 token contract.\\n    ///\\n    /// @param _token The address of the RenERC20 token contract.\\n    /// @param _gatewayContract The address of the Gateway contract.\\n    function setGateway(\\n        string calldata _symbol,\\n        address _token,\\n        address _gatewayContract\\n    ) external onlyOwner {\\n        require(\\n            symbolIsValid(_symbol),\\n            \\\"GatewayRegistry: symbol must be alphanumeric\\\"\\n        );\\n\\n        // Check that token, Gateway and symbol haven't already been registered.\\n        require(\\n            !LinkedList.isInList(gatewayContractList, _gatewayContract),\\n            \\\"GatewayRegistry: gateway already registered\\\"\\n        );\\n        require(\\n            gatewayByToken[_token] == address(0x0),\\n            \\\"GatewayRegistry: token already registered\\\"\\n        );\\n        require(\\n            tokenBySymbol[_symbol] == address(0x0),\\n            \\\"GatewayRegistry: symbol already registered\\\"\\n        );\\n\\n        // Add to list of gateways.\\n        LinkedList.append(gatewayContractList, _gatewayContract);\\n\\n        // Add to list of ren tokens.\\n        LinkedList.append(renTokenList, _token);\\n\\n        tokenBySymbol[_symbol] = _token;\\n        gatewayByToken[_token] = _gatewayContract;\\n        numGatewayContracts += 1;\\n\\n        emit LogGatewayRegistered(_symbol, _symbol, _token, _gatewayContract);\\n    }\\n\\n    /// @notice Allow the owner to update the Gateway contract for a given\\n    ///         RenERC20 contract.\\n    ///\\n    /// @param _token The address of the RenERC20 contract.\\n    /// @param _newGatewayContract The updated address of the Gateway contract.\\n    function updateGateway(address _token, address _newGatewayContract)\\n        external\\n        onlyOwner\\n    {\\n        // Check that token, Gateway are registered\\n        address currentGateway = gatewayByToken[_token];\\n        require(\\n            currentGateway != address(0x0),\\n            \\\"GatewayRegistry: token not registered\\\"\\n        );\\n\\n        // Remove to list of Gateway contracts.\\n        LinkedList.remove(gatewayContractList, currentGateway);\\n\\n        // Add to list of RenERC20 tokens.\\n        LinkedList.append(gatewayContractList, _newGatewayContract);\\n\\n        gatewayByToken[_token] = _newGatewayContract;\\n\\n        emit LogGatewayUpdated(_token, currentGateway, _newGatewayContract);\\n    }\\n\\n    /// @notice Allows the owner to remove the Gateway contract for a given\\n    ///         RenERC20 contract.\\n    ///\\n    /// @param _symbol The symbol of the token to deregister.\\n    function removeGateway(string calldata _symbol) external onlyOwner {\\n        // Look up token address\\n        address tokenAddress = tokenBySymbol[_symbol];\\n        require(\\n            tokenAddress != address(0x0),\\n            \\\"GatewayRegistry: symbol not registered\\\"\\n        );\\n\\n        // Look up Gateway contract address\\n        address gatewayAddress = gatewayByToken[tokenAddress];\\n\\n        // Remove token and Gateway contract\\n        delete gatewayByToken[tokenAddress];\\n        delete tokenBySymbol[_symbol];\\n        LinkedList.remove(gatewayContractList, gatewayAddress);\\n        LinkedList.remove(renTokenList, tokenAddress);\\n        numGatewayContracts -= 1;\\n\\n        emit LogGatewayDeregistered(\\n            _symbol,\\n            _symbol,\\n            tokenAddress,\\n            gatewayAddress\\n        );\\n    }\\n\\n    /// @dev To get all the registered Gateway contracts use count = 0.\\n    function getGateways(address _start, uint256 _count)\\n        external\\n        view\\n        returns (address[] memory)\\n    {\\n        return\\n            LinkedList.elements(\\n                gatewayContractList,\\n                _start,\\n                _count == 0 ? numGatewayContracts : _count\\n            );\\n    }\\n\\n    /// @dev To get all the registered RenERC20 tokens use count = 0.\\n    function getRenTokens(address _start, uint256 _count)\\n        external\\n        view\\n        returns (address[] memory)\\n    {\\n        return\\n            LinkedList.elements(\\n                renTokenList,\\n                _start,\\n                _count == 0 ? numGatewayContracts : _count\\n            );\\n    }\\n\\n    /// @notice Returns the Gateway contract for the given RenERC20 token\\n    ///         address.\\n    ///\\n    /// @param _token The address of the RenERC20 token contract.\\n    function getGatewayByToken(address _token)\\n        external\\n        view\\n        returns (IGateway)\\n    {\\n        return IGateway(gatewayByToken[_token]);\\n    }\\n\\n    /// @notice Returns the Gateway contract for the given RenERC20 token\\n    ///         symbol.\\n    ///\\n    /// @param _tokenSymbol The symbol of the RenERC20 token contract.\\n    function getGatewayBySymbol(string calldata _tokenSymbol)\\n        external\\n        view\\n        returns (IGateway)\\n    {\\n        return IGateway(gatewayByToken[tokenBySymbol[_tokenSymbol]]);\\n    }\\n\\n    /// @notice Returns the RenERC20 address for the given token symbol.\\n    ///\\n    /// @param _tokenSymbol The symbol of the RenERC20 token contract to\\n    ///        lookup.\\n    function getTokenBySymbol(string calldata _tokenSymbol)\\n        external\\n        view\\n        returns (IERC20)\\n    {\\n        return IERC20(tokenBySymbol[_tokenSymbol]);\\n    }\\n\\n    function symbolIsValid(string memory _tokenSymbol)\\n        public\\n        pure\\n        returns (bool)\\n    {\\n        for (uint256 i = 0; i < bytes(_tokenSymbol).length; i++) {\\n            uint8 char = uint8(bytes(_tokenSymbol)[i]);\\n            if (\\n                !((char >= 65 && char <= 90) ||\\n                    (char >= 97 && char <= 122) ||\\n                    (char >= 48 && char <= 57))\\n            ) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/StandaloneERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"@openzeppelin/upgrades/contracts/Initializable.sol\\\";\\nimport \\\"./ERC20Detailed.sol\\\";\\nimport \\\"./ERC20Mintable.sol\\\";\\nimport \\\"./ERC20Pausable.sol\\\";\\n\\n\\n/**\\n * @title Standard ERC20 token, with minting and pause functionality.\\n *\\n */\\ncontract StandaloneERC20 is Initializable, ERC20Detailed, ERC20Mintable, ERC20Pausable {\\n    function initialize(\\n        string memory name, string memory symbol, uint8 decimals, uint256 initialSupply, address initialHolder,\\n        address[] memory minters, address[] memory pausers\\n    ) public initializer {\\n        ERC20Detailed.initialize(name, symbol, decimals);\\n\\n        // Mint the initial supply\\n        _mint(initialHolder, initialSupply);\\n\\n        // Initialize the minter and pauser roles, and renounce them\\n        ERC20Mintable.initialize(address(this));\\n        _removeMinter(address(this));\\n\\n        ERC20Pausable.initialize(address(this));\\n        _removePauser(address(this));\\n\\n        // Add the requested minters and pausers (this can be done after renouncing since\\n        // these are the internal calls)\\n        for (uint256 i = 0; i < minters.length; ++i) {\\n            _addMinter(minters[i]);\\n        }\\n\\n        for (uint256 i = 0; i < pausers.length; ++i) {\\n            _addPauser(pausers[i]);\\n        }\\n    }\\n\\n    function initialize(\\n        string memory name, string memory symbol, uint8 decimals, address[] memory minters, address[] memory pausers\\n    ) public initializer {\\n        ERC20Detailed.initialize(name, symbol, decimals);\\n\\n        // Initialize the minter and pauser roles, and renounce them\\n        ERC20Mintable.initialize(address(this));\\n        _removeMinter(address(this));\\n\\n        ERC20Pausable.initialize(address(this));\\n        _removePauser(address(this));\\n\\n        // Add the requested minters and pausers (this can be done after renouncing since\\n        // these are the internal calls)\\n        for (uint256 i = 0; i < minters.length; ++i) {\\n            _addMinter(minters[i]);\\n        }\\n\\n        for (uint256 i = 0; i < pausers.length; ++i) {\\n            _addPauser(pausers[i]);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/upgrades/contracts/Initializable.sol\": {\r\n      \"content\": \"pragma solidity >=0.4.24 <0.7.0;\\n\\n\\n/**\\n * @title Initializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n */\\ncontract Initializable {\\n\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  bool private initialized;\\n\\n  /**\\n   * @dev Indicates that the contract is in the process of being initialized.\\n   */\\n  bool private initializing;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    require(initializing || isConstructor() || !initialized, \\\"Contract instance has already been initialized\\\");\\n\\n    bool isTopLevelCall = !initializing;\\n    if (isTopLevelCall) {\\n      initializing = true;\\n      initialized = true;\\n    }\\n\\n    _;\\n\\n    if (isTopLevelCall) {\\n      initializing = false;\\n    }\\n  }\\n\\n  /// @dev Returns true if and only if the function is running in the constructor\\n  function isConstructor() private view returns (bool) {\\n    // extcodesize checks the size of the code stored in an address, and\\n    // address returns the current address. Since the code is still not\\n    // deployed when running a constructor, any checks on its code size will\\n    // yield zero, making it an effective way to detect if a contract is\\n    // under construction or not.\\n    address self = address(this);\\n    uint256 cs;\\n    assembly { cs := extcodesize(self) }\\n    return cs == 0;\\n  }\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private ______gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/cryptography/ECDSA.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * NOTE: This call _does not revert_ if the signature is invalid, or\\n     * if the signer is otherwise unable to be retrieved. In those scenarios,\\n     * the zero address is returned.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        // Check the signature length\\n        if (signature.length != 65) {\\n            revert(\\\"ECDSA: signature length is invalid\\\");\\n        }\\n\\n        // Divide the signature in r, s and v variables\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // ecrecover takes the signature parameters, and the only way to get them\\n        // currently is to use assembly.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r := mload(add(signature, 0x20))\\n            s := mload(add(signature, 0x40))\\n            v := byte(0, mload(add(signature, 0x60)))\\n        }\\n\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (282): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            revert(\\\"ECDSA: signature.s is in the wrong range\\\");\\n        }\\n\\n        if (v != 27 && v != 28) {\\n            revert(\\\"ECDSA: signature.v is in the wrong range\\\");\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        return ecrecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * replicates the behavior of the\\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\\n     * JSON-RPC method.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/upgrades/contracts/upgradeability/InitializableAdminUpgradeabilityProxy.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport './BaseAdminUpgradeabilityProxy.sol';\\nimport './InitializableUpgradeabilityProxy.sol';\\n\\n/**\\n * @title InitializableAdminUpgradeabilityProxy\\n * @dev Extends from BaseAdminUpgradeabilityProxy with an initializer for \\n * initializing the implementation, admin, and init data.\\n */\\ncontract InitializableAdminUpgradeabilityProxy is BaseAdminUpgradeabilityProxy, InitializableUpgradeabilityProxy {\\n  /**\\n   * Contract initializer.\\n   * @param _logic address of the initial implementation.\\n   * @param _admin Address of the proxy administrator.\\n   * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.\\n   * It should include the signature and the parameters of the function to be called, as described in\\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\\n   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\\n   */\\n  function initialize(address _logic, address _admin, bytes memory _data) public payable {\\n    require(_implementation() == address(0));\\n    InitializableUpgradeabilityProxy.initialize(_logic, _data);\\n    assert(ADMIN_SLOT == bytes32(uint256(keccak256('eip1967.proxy.admin')) - 1));\\n    _setAdmin(_admin);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/Governance/Claimable.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.17;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/ownership/Ownable.sol\\\";\\nimport \\\"@openzeppelin/upgrades/contracts/Initializable.sol\\\";\\n\\n/**\\n * @title Claimable\\n * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\\n * This allows the new owner to accept the transfer.\\n */\\ncontract Claimable is Initializable, Ownable {\\n    address public pendingOwner;\\n\\n    function initialize(address _nextOwner) public initializer {\\n        Ownable.initialize(_nextOwner);\\n    }\\n\\n    modifier onlyPendingOwner() {\\n        require(\\n            _msgSender() == pendingOwner,\\n            \\\"Claimable: caller is not the pending owner\\\"\\n        );\\n        _;\\n    }\\n\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        require(\\n            newOwner != owner() && newOwner != pendingOwner,\\n            \\\"Claimable: invalid new owner\\\"\\n        );\\n        pendingOwner = newOwner;\\n    }\\n\\n    // Allow skipping two-step transfer if the recipient is known to be a valid\\n    // owner, for use in smart-contracts only.\\n    function _directTransferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    function claimOwnership() public onlyPendingOwner {\\n        _transferOwnership(pendingOwner);\\n        delete pendingOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/String.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.17;\\n\\nlibrary String {\\n    /// @notice Convert a uint value to its decimal string representation\\n    // solium-disable-next-line security/no-assign-params\\n    function fromUint(uint256 _i) internal pure returns (string memory) {\\n        if (_i == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 j = _i;\\n        uint256 len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint256 k = len - 1;\\n        while (_i != 0) {\\n            bstr[k--] = bytes1(uint8(48 + (_i % 10)));\\n            _i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n\\n    /// @notice Convert a bytes32 value to its hex string representation.\\n    function fromBytes32(bytes32 _value) internal pure returns (string memory) {\\n        bytes memory alphabet = \\\"0123456789abcdef\\\";\\n\\n        bytes memory str = new bytes(32 * 2 + 2);\\n        str[0] = \\\"0\\\";\\n        str[1] = \\\"x\\\";\\n        for (uint256 i = 0; i < 32; i++) {\\n            str[2 + i * 2] = alphabet[uint256(uint8(_value[i] >> 4))];\\n            str[3 + i * 2] = alphabet[uint256(uint8(_value[i] & 0x0f))];\\n        }\\n        return string(str);\\n    }\\n\\n    /// @notice Convert an address to its hex string representation.\\n    function fromAddress(address _addr) internal pure returns (string memory) {\\n        bytes32 value = bytes32(uint256(_addr));\\n        bytes memory alphabet = \\\"0123456789abcdef\\\";\\n\\n        bytes memory str = new bytes(20 * 2 + 2);\\n        str[0] = \\\"0\\\";\\n        str[1] = \\\"x\\\";\\n        for (uint256 i = 0; i < 20; i++) {\\n            str[2 + i * 2] = alphabet[uint256(uint8(value[i + 12] >> 4))];\\n            str[3 + i * 2] = alphabet[uint256(uint8(value[i + 12] & 0x0f))];\\n        }\\n        return string(str);\\n    }\\n\\n    /// @notice Append eight strings.\\n    function add8(\\n        string memory a,\\n        string memory b,\\n        string memory c,\\n        string memory d,\\n        string memory e,\\n        string memory f,\\n        string memory g,\\n        string memory h\\n    ) internal pure returns (string memory) {\\n        return string(abi.encodePacked(a, b, c, d, e, f, g, h));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Gateway/RenERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.16;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/ownership/Ownable.sol\\\";\\nimport \\\"@openzeppelin/upgrades/contracts/upgradeability/InitializableAdminUpgradeabilityProxy.sol\\\";\\nimport \\\"@openzeppelin/upgrades/contracts/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20Detailed.sol\\\";\\n\\nimport \\\"../Governance/Claimable.sol\\\";\\nimport \\\"../libraries/CanReclaimTokens.sol\\\";\\nimport \\\"./ERC20WithRate.sol\\\";\\nimport \\\"./ERC20WithPermit.sol\\\";\\n\\n/// @notice RenERC20 represents a digital asset that has been bridged on to\\n/// the Ethereum ledger. It exposes mint and burn functions that can only be\\n/// called by it's associated Gateway contract.\\ncontract RenERC20LogicV1 is\\n    Initializable,\\n    ERC20,\\n    ERC20Detailed,\\n    ERC20WithRate,\\n    ERC20WithPermit,\\n    Claimable,\\n    CanReclaimTokens\\n{\\n    /* solium-disable-next-line no-empty-blocks */\\n    function initialize(\\n        uint256 _chainId,\\n        address _nextOwner,\\n        uint256 _initialRate,\\n        string memory _version,\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) public initializer {\\n        ERC20Detailed.initialize(_name, _symbol, _decimals);\\n        ERC20WithRate.initialize(_nextOwner, _initialRate);\\n        ERC20WithPermit.initialize(\\n            _chainId,\\n            _version,\\n            _name,\\n            _symbol,\\n            _decimals\\n        );\\n        Claimable.initialize(_nextOwner);\\n        CanReclaimTokens.initialize(_nextOwner);\\n    }\\n\\n    function updateSymbol(string memory symbol) public onlyOwner {\\n        ERC20Detailed._symbol = symbol;\\n    }\\n\\n    /// @notice mint can only be called by the tokens' associated Gateway\\n    /// contract. See Gateway's mint function instead.\\n    function mint(address _to, uint256 _amount) public onlyOwner {\\n        _mint(_to, _amount);\\n    }\\n\\n    /// @notice burn can only be called by the tokens' associated Gateway\\n    /// contract. See Gateway's burn functions instead.\\n    function burn(address _from, uint256 _amount) public onlyOwner {\\n        _burn(_from, _amount);\\n    }\\n\\n    function transfer(address recipient, uint256 amount) public returns (bool) {\\n        // Disallow sending tokens to the ERC20 contract address - a common\\n        // mistake caused by the Ethereum transaction's `to` needing to be\\n        // the token's address.\\n        require(\\n            recipient != address(this),\\n            \\\"RenERC20: can't transfer to token address\\\"\\n        );\\n        return super.transfer(recipient, amount);\\n    }\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public returns (bool) {\\n        // Disallow sending tokens to the ERC20 contract address (see comment\\n        // in `transfer`).\\n        require(\\n            recipient != address(this),\\n            \\\"RenERC20: can't transfer to token address\\\"\\n        );\\n        return super.transferFrom(sender, recipient, amount);\\n    }\\n}\\n\\n/* solium-disable-next-line no-empty-blocks */\\ncontract RenERC20Proxy is InitializableAdminUpgradeabilityProxy {\\n\\n}\\n\"\r\n    },\r\n    \"contracts/Gateway/interfaces/IGateway.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.17;\\n\\ninterface IMintGateway {\\n    function mint(\\n        bytes32 _pHash,\\n        uint256 _amount,\\n        bytes32 _nHash,\\n        bytes calldata _sig\\n    ) external returns (uint256);\\n\\n    function mintFee() external view returns (uint256);\\n}\\n\\ninterface IBurnGateway {\\n    function burn(bytes calldata _to, uint256 _amountScaled)\\n        external\\n        returns (uint256);\\n\\n    function burnFee() external view returns (uint256);\\n}\\n\\n// TODO: In ^0.6.0, should be `interface IGateway is IMintGateway,IBurnGateway {}`\\ninterface IGateway {\\n    // is IMintGateway\\n    function mint(\\n        bytes32 _pHash,\\n        uint256 _amount,\\n        bytes32 _nHash,\\n        bytes calldata _sig\\n    ) external returns (uint256);\\n\\n    function mintFee() external view returns (uint256);\\n\\n    // is IBurnGateway\\n    function burn(bytes calldata _to, uint256 _amountScaled)\\n        external\\n        returns (uint256);\\n\\n    function burnFee() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/CanReclaimTokens.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.17;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/ownership/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/upgrades/contracts/Initializable.sol\\\";\\n\\nimport \\\"../Governance/Claimable.sol\\\";\\n\\ncontract CanReclaimTokens is Claimable {\\n    using SafeERC20 for ERC20;\\n\\n    mapping(address => bool) private recoverableTokensBlacklist;\\n\\n    function initialize(address _nextOwner) public initializer {\\n        Claimable.initialize(_nextOwner);\\n    }\\n\\n    function blacklistRecoverableToken(address _token) public onlyOwner {\\n        recoverableTokensBlacklist[_token] = true;\\n    }\\n\\n    /// @notice Allow the owner of the contract to recover funds accidentally\\n    /// sent to the contract. To withdraw ETH, the token should be set to `0x0`.\\n    function recoverTokens(address _token) external onlyOwner {\\n        require(\\n            !recoverableTokensBlacklist[_token],\\n            \\\"CanReclaimTokens: token is not recoverable\\\"\\n        );\\n\\n        if (_token == address(0x0)) {\\n            msg.sender.transfer(address(this).balance);\\n        } else {\\n            ERC20(_token).safeTransfer(\\n                msg.sender,\\n                ERC20(_token).balanceOf(address(this))\\n            );\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Gateway/MintGatewayV1.sol\": {\r\n      \"content\": \"pragma solidity 0.5.17;\\n\\nimport \\\"@openzeppelin/upgrades/contracts/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/upgrades/contracts/upgradeability/InitializableAdminUpgradeabilityProxy.sol\\\";\\n\\nimport \\\"../Governance/Claimable.sol\\\";\\nimport \\\"../libraries/String.sol\\\";\\nimport \\\"./RenERC20.sol\\\";\\nimport \\\"./interfaces/IGateway.sol\\\";\\nimport \\\"../libraries/CanReclaimTokens.sol\\\";\\n\\ncontract MintGatewayStateV1 {\\n    uint256 constant BIPS_DENOMINATOR = 10000;\\n    uint256 public minimumBurnAmount;\\n\\n    /// @notice Each Gateway is tied to a specific RenERC20 token.\\n    RenERC20LogicV1 public token;\\n\\n    /// @notice The mintAuthority is an address that can sign mint requests.\\n    address public mintAuthority;\\n\\n    /// @dev feeRecipient is assumed to be an address (or a contract) that can\\n    /// accept erc20 payments it cannot be 0x0.\\n    /// @notice When tokens are mint or burnt, a portion of the tokens are\\n    /// forwarded to a fee recipient.\\n    address public feeRecipient;\\n\\n    /// @notice The mint fee in bips.\\n    uint16 public mintFee;\\n\\n    /// @notice The burn fee in bips.\\n    uint16 public burnFee;\\n\\n    /// @notice Each signature can only be seen once.\\n    mapping(bytes32 => bool) public status;\\n\\n    // LogMint and LogBurn contain a unique `n` that identifies\\n    // the mint or burn event.\\n    uint256 public nextN = 0;\\n}\\n\\n/// @notice Gateway handles verifying mint and burn requests. A mintAuthority\\n/// approves new assets to be minted by providing a digital signature. An owner\\n/// of an asset can request for it to be burnt.\\ncontract MintGatewayLogicV1 is\\n    Initializable,\\n    Claimable,\\n    CanReclaimTokens,\\n    IGateway,\\n    MintGatewayStateV1\\n{\\n    using SafeMath for uint256;\\n\\n    event LogMintAuthorityUpdated(address indexed _newMintAuthority);\\n    event LogMint(\\n        address indexed _to,\\n        uint256 _amount,\\n        uint256 indexed _n,\\n        bytes32 indexed _signedMessageHash\\n    );\\n    event LogBurn(\\n        bytes _to,\\n        uint256 _amount,\\n        uint256 indexed _n,\\n        bytes indexed _indexedTo\\n    );\\n\\n    /// @notice Only allow the Darknode Payment contract.\\n    modifier onlyOwnerOrMintAuthority() {\\n        require(\\n            msg.sender == mintAuthority || msg.sender == owner(),\\n            \\\"Gateway: caller is not the owner or mint authority\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @param _token The RenERC20 this Gateway is responsible for.\\n    /// @param _feeRecipient The recipient of burning and minting fees.\\n    /// @param _mintAuthority The address of the key that can sign mint\\n    ///        requests.\\n    /// @param _mintFee The amount subtracted each mint request and\\n    ///        forwarded to the feeRecipient. In BIPS.\\n    /// @param _burnFee The amount subtracted each burn request and\\n    ///        forwarded to the feeRecipient. In BIPS.\\n    function initialize(\\n        RenERC20LogicV1 _token,\\n        address _feeRecipient,\\n        address _mintAuthority,\\n        uint16 _mintFee,\\n        uint16 _burnFee,\\n        uint256 _minimumBurnAmount\\n    ) public initializer {\\n        Claimable.initialize(msg.sender);\\n        CanReclaimTokens.initialize(msg.sender);\\n        minimumBurnAmount = _minimumBurnAmount;\\n        token = _token;\\n        mintFee = _mintFee;\\n        burnFee = _burnFee;\\n        updateMintAuthority(_mintAuthority);\\n        updateFeeRecipient(_feeRecipient);\\n    }\\n\\n    // Public functions ////////////////////////////////////////////////////////\\n\\n    /// @notice Claims ownership of the token passed in to the constructor.\\n    /// `transferStoreOwnership` must have previously been called.\\n    /// Anyone can call this function.\\n    function claimTokenOwnership() public {\\n        token.claimOwnership();\\n    }\\n\\n    /// @notice Allow the owner to update the owner of the RenERC20 token.\\n    function transferTokenOwnership(MintGatewayLogicV1 _nextTokenOwner)\\n        public\\n        onlyOwner\\n    {\\n        token.transferOwnership(address(_nextTokenOwner));\\n        _nextTokenOwner.claimTokenOwnership();\\n    }\\n\\n    /// @notice Allow the owner to update the mint authority.\\n    ///\\n    /// @param _nextMintAuthority The new mint authority address.\\n    function updateMintAuthority(address _nextMintAuthority)\\n        public\\n        onlyOwnerOrMintAuthority\\n    {\\n        // The mint authority should not be set to 0, which is the result\\n        // returned by ecrecover for an invalid signature.\\n        require(\\n            _nextMintAuthority != address(0),\\n            \\\"Gateway: mintAuthority cannot be set to address zero\\\"\\n        );\\n        mintAuthority = _nextMintAuthority;\\n        emit LogMintAuthorityUpdated(mintAuthority);\\n    }\\n\\n    /// @notice Allow the owner to update the minimum burn amount.\\n    ///\\n    /// @param _minimumBurnAmount The new min burn amount.\\n    function updateMinimumBurnAmount(uint256 _minimumBurnAmount)\\n        public\\n        onlyOwner\\n    {\\n        minimumBurnAmount = _minimumBurnAmount;\\n    }\\n\\n    /// @notice Allow the owner to update the fee recipient.\\n    ///\\n    /// @param _nextFeeRecipient The address to start paying fees to.\\n    function updateFeeRecipient(address _nextFeeRecipient) public onlyOwner {\\n        // 'mint' and 'burn' will fail if the feeRecipient is 0x0\\n        require(\\n            _nextFeeRecipient != address(0x0),\\n            \\\"Gateway: fee recipient cannot be 0x0\\\"\\n        );\\n\\n        feeRecipient = _nextFeeRecipient;\\n    }\\n\\n    /// @notice Allow the owner to update the 'mint' fee.\\n    ///\\n    /// @param _nextMintFee The new fee for minting and burning.\\n    function updateMintFee(uint16 _nextMintFee) public onlyOwner {\\n        mintFee = _nextMintFee;\\n    }\\n\\n    /// @notice Allow the owner to update the burn fee.\\n    ///\\n    /// @param _nextBurnFee The new fee for minting and burning.\\n    function updateBurnFee(uint16 _nextBurnFee) public onlyOwner {\\n        burnFee = _nextBurnFee;\\n    }\\n\\n    /// @notice mint verifies a mint approval signature from RenVM and creates\\n    ///         tokens after taking a fee for the `_feeRecipient`.\\n    ///\\n    /// @param _pHash (payload hash) The hash of the payload associated with the\\n    ///        mint.\\n    /// @param _amountUnderlying The amount of the token being minted, in its smallest\\n    ///        value. (e.g. satoshis for BTC).\\n    /// @param _nHash (nonce hash) The hash of the nonce, amount and pHash.\\n    /// @param _sig The signature of the hash of the following values:\\n    ///        (pHash, amount, msg.sender, nHash), signed by the mintAuthority.\\n    function mint(\\n        bytes32 _pHash,\\n        uint256 _amountUnderlying,\\n        bytes32 _nHash,\\n        bytes memory _sig\\n    ) public returns (uint256) {\\n        // Calculate the hash signed by RenVM.\\n        bytes32 sigHash =\\n            hashForSignature(_pHash, _amountUnderlying, msg.sender, _nHash);\\n\\n        //\\n\\n        // Check that the signature hasn't been redeemed.\\n        require(status[sigHash] == false, \\\"Gateway: nonce hash already spent\\\");\\n\\n        // If the signature fails verification, throw an error. If any one of\\n        // them passed the verification, continue.\\n        if (!verifySignature(sigHash, _sig)) {\\n            // Return a detailed string containing the hash and recovered\\n            // signer. This is somewhat costly but is only run in the revert\\n            // branch.\\n            revert(\\n                String.add8(\\n                    \\\"Gateway: invalid signature. pHash: \\\",\\n                    String.fromBytes32(_pHash),\\n                    \\\", amount: \\\",\\n                    String.fromUint(_amountUnderlying),\\n                    \\\", msg.sender: \\\",\\n                    String.fromAddress(msg.sender),\\n                    \\\", _nHash: \\\",\\n                    String.fromBytes32(_nHash)\\n                )\\n            );\\n        }\\n\\n        // Update the status for the signature hash so that it can't be used\\n        // again.\\n        status[sigHash] = true;\\n\\n        uint256 amountScaled = token.fromUnderlying(_amountUnderlying);\\n\\n        // Mint `amount - fee` for the recipient and mint `fee` for the minter\\n        uint256 absoluteFeeScaled =\\n            amountScaled.mul(mintFee).div(BIPS_DENOMINATOR);\\n        uint256 receivedAmountScaled =\\n            amountScaled.sub(absoluteFeeScaled, \\\"Gateway: fee exceeds amount\\\");\\n\\n        // Mint amount minus the fee\\n        token.mint(msg.sender, receivedAmountScaled);\\n        // Mint the fee\\n        token.mint(feeRecipient, absoluteFeeScaled);\\n\\n        // Emit a log with a unique identifier 'n'.\\n        uint256 receivedAmountUnderlying =\\n            token.toUnderlying(receivedAmountScaled);\\n        emit LogMint(msg.sender, receivedAmountUnderlying, nextN, sigHash);\\n        nextN += 1;\\n\\n        return receivedAmountScaled;\\n    }\\n\\n    /// @notice burn destroys tokens after taking a fee for the `_feeRecipient`,\\n    ///         allowing the associated assets to be released on their native\\n    ///         chain.\\n    ///\\n    /// @param _to The address to receive the un-bridged asset. The format of\\n    ///        this address should be of the destination chain.\\n    ///        For example, when burning to Bitcoin, _to should be a\\n    ///        Bitcoin address.\\n    /// @param _amount The amount of the token being burnt, in its\\n    ///        smallest value. (e.g. satoshis for BTC)\\n    function burn(bytes memory _to, uint256 _amount) public returns (uint256) {\\n        // The recipient must not be empty. Better validation is possible,\\n        // but would need to be customized for each destination ledger.\\n        require(_to.length != 0, \\\"Gateway: to address is empty\\\");\\n\\n        // Calculate fee, subtract it from amount being burnt.\\n        uint256 fee = _amount.mul(burnFee).div(BIPS_DENOMINATOR);\\n        uint256 amountAfterFee =\\n            _amount.sub(fee, \\\"Gateway: fee exceeds amount\\\");\\n\\n        // If the scaled token can represent more precision than the underlying\\n        // token, the difference is lost. This won't exceed 1 sat, so is\\n        // negligible compared to burning and transaction fees.\\n        uint256 amountAfterFeeUnderlying = token.toUnderlying(amountAfterFee);\\n\\n        // Burn the whole amount, and then re-mint the fee.\\n        token.burn(msg.sender, _amount);\\n        token.mint(feeRecipient, fee);\\n\\n        require(\\n            // Must be strictly greater, to that the release transaction is of\\n            // at least one unit.\\n            amountAfterFeeUnderlying > minimumBurnAmount,\\n            \\\"Gateway: amount is less than the minimum burn amount\\\"\\n        );\\n\\n        emit LogBurn(_to, amountAfterFeeUnderlying, nextN, _to);\\n        nextN += 1;\\n\\n        return amountAfterFeeUnderlying;\\n    }\\n\\n    /// @notice verifySignature checks the the provided signature matches the\\n    /// provided parameters.\\n    function verifySignature(bytes32 _sigHash, bytes memory _sig)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return mintAuthority == ECDSA.recover(_sigHash, _sig);\\n    }\\n\\n    /// @notice hashForSignature hashes the parameters so that they can be\\n    /// signed.\\n    function hashForSignature(\\n        bytes32 _pHash,\\n        uint256 _amount,\\n        address _to,\\n        bytes32 _nHash\\n    ) public view returns (bytes32) {\\n        return\\n            keccak256(abi.encode(_pHash, _amount, address(token), _to, _nHash));\\n    }\\n}\\n\\ncontract BTCGateway is InitializableAdminUpgradeabilityProxy {}\\n\\ncontract ZECGateway is InitializableAdminUpgradeabilityProxy {}\\n\\ncontract BCHGateway is InitializableAdminUpgradeabilityProxy {}\\n\"\r\n    },\r\n    \"@openzeppelin/upgrades/contracts/upgradeability/BaseAdminUpgradeabilityProxy.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport './UpgradeabilityProxy.sol';\\n\\n/**\\n * @title BaseAdminUpgradeabilityProxy\\n * @dev This contract combines an upgradeability proxy with an authorization\\n * mechanism for administrative tasks.\\n * All external functions in this contract must be guarded by the\\n * `ifAdmin` modifier. See ethereum/solidity#3864 for a Solidity\\n * feature proposal that would enable this to be done automatically.\\n */\\ncontract BaseAdminUpgradeabilityProxy is BaseUpgradeabilityProxy {\\n  /**\\n   * @dev Emitted when the administration has been transferred.\\n   * @param previousAdmin Address of the previous admin.\\n   * @param newAdmin Address of the new admin.\\n   */\\n  event AdminChanged(address previousAdmin, address newAdmin);\\n\\n  /**\\n   * @dev Storage slot with the admin of the contract.\\n   * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n   * validated in the constructor.\\n   */\\n\\n  bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n  /**\\n   * @dev Modifier to check whether the `msg.sender` is the admin.\\n   * If it is, it will run the function. Otherwise, it will delegate the call\\n   * to the implementation.\\n   */\\n  modifier ifAdmin() {\\n    if (msg.sender == _admin()) {\\n      _;\\n    } else {\\n      _fallback();\\n    }\\n  }\\n\\n  /**\\n   * @return The address of the proxy admin.\\n   */\\n  function admin() external ifAdmin returns (address) {\\n    return _admin();\\n  }\\n\\n  /**\\n   * @return The address of the implementation.\\n   */\\n  function implementation() external ifAdmin returns (address) {\\n    return _implementation();\\n  }\\n\\n  /**\\n   * @dev Changes the admin of the proxy.\\n   * Only the current admin can call this function.\\n   * @param newAdmin Address to transfer proxy administration to.\\n   */\\n  function changeAdmin(address newAdmin) external ifAdmin {\\n    require(newAdmin != address(0), \\\"Cannot change the admin of a proxy to the zero address\\\");\\n    emit AdminChanged(_admin(), newAdmin);\\n    _setAdmin(newAdmin);\\n  }\\n\\n  /**\\n   * @dev Upgrade the backing implementation of the proxy.\\n   * Only the admin can call this function.\\n   * @param newImplementation Address of the new implementation.\\n   */\\n  function upgradeTo(address newImplementation) external ifAdmin {\\n    _upgradeTo(newImplementation);\\n  }\\n\\n  /**\\n   * @dev Upgrade the backing implementation of the proxy and call a function\\n   * on the new implementation.\\n   * This is useful to initialize the proxied contract.\\n   * @param newImplementation Address of the new implementation.\\n   * @param data Data to send as msg.data in the low level call.\\n   * It should include the signature and the parameters of the function to be called, as described in\\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\\n   */\\n  function upgradeToAndCall(address newImplementation, bytes calldata data) payable external ifAdmin {\\n    _upgradeTo(newImplementation);\\n    (bool success,) = newImplementation.delegatecall(data);\\n    require(success);\\n  }\\n\\n  /**\\n   * @return The admin slot.\\n   */\\n  function _admin() internal view returns (address adm) {\\n    bytes32 slot = ADMIN_SLOT;\\n    assembly {\\n      adm := sload(slot)\\n    }\\n  }\\n\\n  /**\\n   * @dev Sets the address of the proxy admin.\\n   * @param newAdmin Address of the new proxy admin.\\n   */\\n  function _setAdmin(address newAdmin) internal {\\n    bytes32 slot = ADMIN_SLOT;\\n\\n    assembly {\\n      sstore(slot, newAdmin)\\n    }\\n  }\\n\\n  /**\\n   * @dev Only fall back when the sender is not the admin.\\n   */\\n  function _willFallback() internal {\\n    require(msg.sender != _admin(), \\\"Cannot call fallback function from the proxy admin\\\");\\n    super._willFallback();\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/upgrades/contracts/upgradeability/InitializableUpgradeabilityProxy.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport './BaseUpgradeabilityProxy.sol';\\n\\n/**\\n * @title InitializableUpgradeabilityProxy\\n * @dev Extends BaseUpgradeabilityProxy with an initializer for initializing\\n * implementation and init data.\\n */\\ncontract InitializableUpgradeabilityProxy is BaseUpgradeabilityProxy {\\n  /**\\n   * @dev Contract initializer.\\n   * @param _logic Address of the initial implementation.\\n   * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.\\n   * It should include the signature and the parameters of the function to be called, as described in\\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\\n   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\\n   */\\n  function initialize(address _logic, bytes memory _data) public payable {\\n    require(_implementation() == address(0));\\n    assert(IMPLEMENTATION_SLOT == bytes32(uint256(keccak256('eip1967.proxy.implementation')) - 1));\\n    _setImplementation(_logic);\\n    if(_data.length > 0) {\\n      (bool success,) = _logic.delegatecall(_data);\\n      require(success);\\n    }\\n  }  \\n}\\n\"\r\n    },\r\n    \"@openzeppelin/upgrades/contracts/upgradeability/UpgradeabilityProxy.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport './BaseUpgradeabilityProxy.sol';\\n\\n/**\\n * @title UpgradeabilityProxy\\n * @dev Extends BaseUpgradeabilityProxy with a constructor for initializing\\n * implementation and init data.\\n */\\ncontract UpgradeabilityProxy is BaseUpgradeabilityProxy {\\n  /**\\n   * @dev Contract constructor.\\n   * @param _logic Address of the initial implementation.\\n   * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.\\n   * It should include the signature and the parameters of the function to be called, as described in\\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\\n   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\\n   */\\n  constructor(address _logic, bytes memory _data) public payable {\\n    assert(IMPLEMENTATION_SLOT == bytes32(uint256(keccak256('eip1967.proxy.implementation')) - 1));\\n    _setImplementation(_logic);\\n    if(_data.length > 0) {\\n      (bool success,) = _logic.delegatecall(_data);\\n      require(success);\\n    }\\n  }  \\n}\\n\"\r\n    },\r\n    \"@openzeppelin/upgrades/contracts/upgradeability/BaseUpgradeabilityProxy.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport './Proxy.sol';\\nimport '../utils/Address.sol';\\n\\n/**\\n * @title BaseUpgradeabilityProxy\\n * @dev This contract implements a proxy that allows to change the\\n * implementation address to which it will delegate.\\n * Such a change is called an implementation upgrade.\\n */\\ncontract BaseUpgradeabilityProxy is Proxy {\\n  /**\\n   * @dev Emitted when the implementation is upgraded.\\n   * @param implementation Address of the new implementation.\\n   */\\n  event Upgraded(address indexed implementation);\\n\\n  /**\\n   * @dev Storage slot with the address of the current implementation.\\n   * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n   * validated in the constructor.\\n   */\\n  bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n  /**\\n   * @dev Returns the current implementation.\\n   * @return Address of the current implementation\\n   */\\n  function _implementation() internal view returns (address impl) {\\n    bytes32 slot = IMPLEMENTATION_SLOT;\\n    assembly {\\n      impl := sload(slot)\\n    }\\n  }\\n\\n  /**\\n   * @dev Upgrades the proxy to a new implementation.\\n   * @param newImplementation Address of the new implementation.\\n   */\\n  function _upgradeTo(address newImplementation) internal {\\n    _setImplementation(newImplementation);\\n    emit Upgraded(newImplementation);\\n  }\\n\\n  /**\\n   * @dev Sets the implementation address of the proxy.\\n   * @param newImplementation Address of the new implementation.\\n   */\\n  function _setImplementation(address newImplementation) internal {\\n    require(OpenZeppelinUpgradesAddress.isContract(newImplementation), \\\"Cannot set a proxy implementation to a non-contract address\\\");\\n\\n    bytes32 slot = IMPLEMENTATION_SLOT;\\n\\n    assembly {\\n      sstore(slot, newImplementation)\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/upgrades/contracts/upgradeability/Proxy.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @title Proxy\\n * @dev Implements delegation of calls to other contracts, with proper\\n * forwarding of return values and bubbling of failures.\\n * It defines a fallback function that delegates all calls to the address\\n * returned by the abstract _implementation() internal function.\\n */\\ncontract Proxy {\\n  /**\\n   * @dev Fallback function.\\n   * Implemented entirely in `_fallback`.\\n   */\\n  function () payable external {\\n    _fallback();\\n  }\\n\\n  /**\\n   * @return The Address of the implementation.\\n   */\\n  function _implementation() internal view returns (address);\\n\\n  /**\\n   * @dev Delegates execution to an implementation contract.\\n   * This is a low level function that doesn't return to its internal call site.\\n   * It will return to the external caller whatever the implementation returns.\\n   * @param implementation Address to delegate.\\n   */\\n  function _delegate(address implementation) internal {\\n    assembly {\\n      // Copy msg.data. We take full control of memory in this inline assembly\\n      // block because it will not return to Solidity code. We overwrite the\\n      // Solidity scratch pad at memory position 0.\\n      calldatacopy(0, 0, calldatasize)\\n\\n      // Call the implementation.\\n      // out and outsize are 0 because we don't know the size yet.\\n      let result := delegatecall(gas, implementation, 0, calldatasize, 0, 0)\\n\\n      // Copy the returned data.\\n      returndatacopy(0, 0, returndatasize)\\n\\n      switch result\\n      // delegatecall returns 0 on error.\\n      case 0 { revert(0, returndatasize) }\\n      default { return(0, returndatasize) }\\n    }\\n  }\\n\\n  /**\\n   * @dev Function that is run as the first thing in the fallback function.\\n   * Can be redefined in derived contracts to add functionality.\\n   * Redefinitions must call super._willFallback().\\n   */\\n  function _willFallback() internal {\\n  }\\n\\n  /**\\n   * @dev fallback implementation.\\n   * Extracted to enable manual triggering.\\n   */\\n  function _fallback() internal {\\n    _willFallback();\\n    _delegate(_implementation());\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/upgrades/contracts/utils/Address.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * Utility library of inline functions on addresses\\n *\\n * Source https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-solidity/v2.1.3/contracts/utils/Address.sol\\n * This contract is copied here and renamed from the original to avoid clashes in the compiled artifacts\\n * when the user imports a zos-lib contract (that transitively causes this contract to be compiled and added to the\\n * build/artifacts folder) as well as the vanilla Address implementation from an openzeppelin version.\\n */\\nlibrary OpenZeppelinUpgradesAddress {\\n    /**\\n     * Returns whether the target address is a contract\\n     * @dev This function will return false if invoked during the constructor of a contract,\\n     * as the code is not actually created until after the constructor finishes.\\n     * @param account address of the account to check\\n     * @return whether the target address is a contract\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        uint256 size;\\n        // XXX Currently there is no better way to check if there is a contract in an address\\n        // than to check the size of the code at that address.\\n        // See https://ethereum.stackexchange.com/a/14016/36603\\n        // for more details about how this works.\\n        // TODO Check this again before the Serenity release, because all addresses will be\\n        // contracts then.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/ownership/Ownable.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"@openzeppelin/upgrades/contracts/Initializable.sol\\\";\\n\\nimport \\\"../GSN/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Initializable, Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function initialize(address sender) public initializer {\\n        _owner = sender;\\n        emit OwnershipTransferred(address(0), _owner);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current owner.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return _msgSender() == _owner;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * > Note: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n\\n    uint256[50] private ______gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"@openzeppelin/upgrades/contracts/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract Context is Initializable {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n    constructor () internal { }\\n    // solhint-disable-previous-line no-empty-blocks\\n\\n    function _msgSender() internal view returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"@openzeppelin/upgrades/contracts/Initializable.sol\\\";\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20Mintable}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Initializable, Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for `sender`'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\n     *\\n     * This is internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\\n     * from the caller's allowance.\\n     *\\n     * See {_burn} and {_approve}.\\n     */\\n    function _burnFrom(address account, uint256 amount) internal {\\n        _burn(account, amount);\\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \\\"ERC20: burn amount exceeds allowance\\\"));\\n    }\\n\\n    uint256[50] private ______gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20Detailed.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"@openzeppelin/upgrades/contracts/Initializable.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\n\\n/**\\n * @dev Optional functions from the ERC20 standard.\\n */\\ncontract ERC20Detailed is Initializable, IERC20 {\\n    string private _name;\\n    string internal _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\\n     * these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function initialize(string memory name, string memory symbol, uint8 decimals) public initializer {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = decimals;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    uint256[50] private ______gap;\\n}\\n\"\r\n    },\r\n    \"contracts/Gateway/ERC20WithRate.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.17;\\n\\nimport \\\"@openzeppelin/upgrades/contracts/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\n\\nimport \\\"../Governance/Claimable.sol\\\";\\n\\n/// @notice ERC20WithRate allows for a more dynamic fee model by storing a rate\\n/// that tracks the number of the underlying asset's unit represented by a\\n/// single ERC20 token.\\ncontract ERC20WithRate is Initializable, Ownable, ERC20 {\\n    using SafeMath for uint256;\\n\\n    uint256 public constant _rateScale = 1e18;\\n    uint256 internal _rate;\\n\\n    event LogRateChanged(uint256 indexed _rate);\\n\\n    /* solium-disable-next-line no-empty-blocks */\\n    function initialize(address _nextOwner, uint256 _initialRate)\\n        public\\n        initializer\\n    {\\n        Ownable.initialize(_nextOwner);\\n        _setRate(_initialRate);\\n    }\\n\\n    function setExchangeRate(uint256 _nextRate) public onlyOwner {\\n        _setRate(_nextRate);\\n    }\\n\\n    function exchangeRateCurrent() public view returns (uint256) {\\n        require(_rate != 0, \\\"ERC20WithRate: rate has not been initialized\\\");\\n        return _rate;\\n    }\\n\\n    function _setRate(uint256 _nextRate) internal {\\n        require(_nextRate > 0, \\\"ERC20WithRate: rate must be greater than zero\\\");\\n        _rate = _nextRate;\\n    }\\n\\n    function balanceOfUnderlying(address _account)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return toUnderlying(balanceOf(_account));\\n    }\\n\\n    function toUnderlying(uint256 _amount) public view returns (uint256) {\\n        return _amount.mul(_rate).div(_rateScale);\\n    }\\n\\n    function fromUnderlying(uint256 _amountUnderlying)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return _amountUnderlying.mul(_rateScale).div(_rate);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Gateway/ERC20WithPermit.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.17;\\n\\nimport \\\"@openzeppelin/upgrades/contracts/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20Detailed.sol\\\";\\n\\n/// @notice Taken from the DAI token.\\ncontract ERC20WithPermit is Initializable, ERC20, ERC20Detailed {\\n    using SafeMath for uint256;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    // If the token is redeployed, the version is increased to prevent a permit\\n    // signature being used on both token instances.\\n    string public version;\\n\\n    // --- EIP712 niceties ---\\n    bytes32 public DOMAIN_SEPARATOR;\\n    // PERMIT_TYPEHASH is the value returned from\\n    // keccak256(\\\"Permit(address holder,address spender,uint256 nonce,uint256 expiry,bool allowed)\\\")\\n    bytes32 public constant PERMIT_TYPEHASH =\\n        0xea2aa0a1be11a07ed86d755c93467f4f82362b452371d1ba94d1715123511acb;\\n\\n    function initialize(\\n        uint256 _chainId,\\n        string memory _version,\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) public initializer {\\n        ERC20Detailed.initialize(_name, _symbol, _decimals);\\n        version = _version;\\n        DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                keccak256(\\n                    \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n                ),\\n                keccak256(bytes(name())),\\n                keccak256(bytes(version)),\\n                _chainId,\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    // --- Approve by signature ---\\n    function permit(\\n        address holder,\\n        address spender,\\n        uint256 nonce,\\n        uint256 expiry,\\n        bool allowed,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        bytes32 digest =\\n            keccak256(\\n                abi.encodePacked(\\n                    \\\"\\\\x19\\\\x01\\\",\\n                    DOMAIN_SEPARATOR,\\n                    keccak256(\\n                        abi.encode(\\n                            PERMIT_TYPEHASH,\\n                            holder,\\n                            spender,\\n                            nonce,\\n                            expiry,\\n                            allowed\\n                        )\\n                    )\\n                )\\n            );\\n\\n        require(holder != address(0), \\\"ERC20WithRate: address must not be 0x0\\\");\\n        require(\\n            holder == ecrecover(digest, v, r, s),\\n            \\\"ERC20WithRate: invalid signature\\\"\\n        );\\n        require(\\n            expiry == 0 || now <= expiry,\\n            \\\"ERC20WithRate: permit has expired\\\"\\n        );\\n        require(nonce == nonces[holder]++, \\\"ERC20WithRate: invalid nonce\\\");\\n        uint256 amount = allowed ? uint256(-1) : 0;\\n        _approve(holder, spender, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see {ERC20Detailed}.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n\\n        // A Solidity high level call has three parts:\\n        //  1. The target address is checked to verify it contains contract code\\n        //  2. The call itself is made, and success asserted\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\n        // solhint-disable-next-line max-line-length\\n        require(address(token).isContract(), \\\"SafeERC20: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/utils/Address.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.5;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following \\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` into `address payable`. Note that this is\\n     * simply a type cast: the actual underlying value is not changed.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function toPayable(address account) internal pure returns (address payable) {\\n        return address(uint160(account));\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-call-value\\n        (bool success, ) = recipient.call.value(amount)(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/LinkedList.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.17;\\n\\n/**\\n * @notice LinkedList is a library for a circular double linked list.\\n */\\nlibrary LinkedList {\\n    /*\\n     * @notice A permanent NULL node (0x0) in the circular double linked list.\\n     * NULL.next is the head, and NULL.previous is the tail.\\n     */\\n    address public constant NULL = address(0);\\n\\n    /**\\n     * @notice A node points to the node before it, and the node after it. If\\n     * node.previous = NULL, then the node is the head of the list. If\\n     * node.next = NULL, then the node is the tail of the list.\\n     */\\n    struct Node {\\n        bool inList;\\n        address previous;\\n        address next;\\n    }\\n\\n    /**\\n     * @notice LinkedList uses a mapping from address to nodes. Each address\\n     * uniquely identifies a node, and in this way they are used like pointers.\\n     */\\n    struct List {\\n        mapping(address => Node) list;\\n    }\\n\\n    /**\\n     * @notice Insert a new node before an existing node.\\n     *\\n     * @param self The list being used.\\n     * @param target The existing node in the list.\\n     * @param newNode The next node to insert before the target.\\n     */\\n    function insertBefore(\\n        List storage self,\\n        address target,\\n        address newNode\\n    ) internal {\\n        require(newNode != address(0), \\\"LinkedList: invalid address\\\");\\n        require(!isInList(self, newNode), \\\"LinkedList: already in list\\\");\\n        require(\\n            isInList(self, target) || target == NULL,\\n            \\\"LinkedList: not in list\\\"\\n        );\\n\\n        // It is expected that this value is sometimes NULL.\\n        address prev = self.list[target].previous;\\n\\n        self.list[newNode].next = target;\\n        self.list[newNode].previous = prev;\\n        self.list[target].previous = newNode;\\n        self.list[prev].next = newNode;\\n\\n        self.list[newNode].inList = true;\\n    }\\n\\n    /**\\n     * @notice Insert a new node after an existing node.\\n     *\\n     * @param self The list being used.\\n     * @param target The existing node in the list.\\n     * @param newNode The next node to insert after the target.\\n     */\\n    function insertAfter(\\n        List storage self,\\n        address target,\\n        address newNode\\n    ) internal {\\n        require(newNode != address(0), \\\"LinkedList: invalid address\\\");\\n        require(!isInList(self, newNode), \\\"LinkedList: already in list\\\");\\n        require(\\n            isInList(self, target) || target == NULL,\\n            \\\"LinkedList: not in list\\\"\\n        );\\n\\n        // It is expected that this value is sometimes NULL.\\n        address n = self.list[target].next;\\n\\n        self.list[newNode].previous = target;\\n        self.list[newNode].next = n;\\n        self.list[target].next = newNode;\\n        self.list[n].previous = newNode;\\n\\n        self.list[newNode].inList = true;\\n    }\\n\\n    /**\\n     * @notice Remove a node from the list, and fix the previous and next\\n     * pointers that are pointing to the removed node. Removing anode that is not\\n     * in the list will do nothing.\\n     *\\n     * @param self The list being using.\\n     * @param node The node in the list to be removed.\\n     */\\n    function remove(List storage self, address node) internal {\\n        require(isInList(self, node), \\\"LinkedList: not in list\\\");\\n\\n        address p = self.list[node].previous;\\n        address n = self.list[node].next;\\n\\n        self.list[p].next = n;\\n        self.list[n].previous = p;\\n\\n        // Deleting the node should set this value to false, but we set it here for\\n        // explicitness.\\n        self.list[node].inList = false;\\n        delete self.list[node];\\n    }\\n\\n    /**\\n     * @notice Insert a node at the beginning of the list.\\n     *\\n     * @param self The list being used.\\n     * @param node The node to insert at the beginning of the list.\\n     */\\n    function prepend(List storage self, address node) internal {\\n        // isInList(node) is checked in insertBefore\\n\\n        insertBefore(self, begin(self), node);\\n    }\\n\\n    /**\\n     * @notice Insert a node at the end of the list.\\n     *\\n     * @param self The list being used.\\n     * @param node The node to insert at the end of the list.\\n     */\\n    function append(List storage self, address node) internal {\\n        // isInList(node) is checked in insertBefore\\n\\n        insertAfter(self, end(self), node);\\n    }\\n\\n    function swap(\\n        List storage self,\\n        address left,\\n        address right\\n    ) internal {\\n        // isInList(left) and isInList(right) are checked in remove\\n\\n        address previousRight = self.list[right].previous;\\n        remove(self, right);\\n        insertAfter(self, left, right);\\n        remove(self, left);\\n        insertAfter(self, previousRight, left);\\n    }\\n\\n    function isInList(List storage self, address node)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return self.list[node].inList;\\n    }\\n\\n    /**\\n     * @notice Get the node at the beginning of a double linked list.\\n     *\\n     * @param self The list being used.\\n     *\\n     * @return A address identifying the node at the beginning of the double\\n     * linked list.\\n     */\\n    function begin(List storage self) internal view returns (address) {\\n        return self.list[NULL].next;\\n    }\\n\\n    /**\\n     * @notice Get the node at the end of a double linked list.\\n     *\\n     * @param self The list being used.\\n     *\\n     * @return A address identifying the node at the end of the double linked\\n     * list.\\n     */\\n    function end(List storage self) internal view returns (address) {\\n        return self.list[NULL].previous;\\n    }\\n\\n    function next(List storage self, address node)\\n        internal\\n        view\\n        returns (address)\\n    {\\n        require(isInList(self, node), \\\"LinkedList: not in list\\\");\\n        return self.list[node].next;\\n    }\\n\\n    function previous(List storage self, address node)\\n        internal\\n        view\\n        returns (address)\\n    {\\n        require(isInList(self, node), \\\"LinkedList: not in list\\\");\\n        return self.list[node].previous;\\n    }\\n\\n    function elements(\\n        List storage self,\\n        address _start,\\n        uint256 _count\\n    ) internal view returns (address[] memory) {\\n        require(_count > 0, \\\"LinkedList: invalid count\\\");\\n        require(\\n            isInList(self, _start) || _start == address(0),\\n            \\\"LinkedList: not in list\\\"\\n        );\\n        address[] memory elems = new address[](_count);\\n\\n        // Begin with the first node in the list\\n        uint256 n = 0;\\n        address nextItem = _start;\\n        if (nextItem == address(0)) {\\n            nextItem = begin(self);\\n        }\\n\\n        while (n < _count) {\\n            if (nextItem == address(0)) {\\n                break;\\n            }\\n            elems[n] = nextItem;\\n            nextItem = next(self, nextItem);\\n            n += 1;\\n        }\\n        return elems;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20Mintable.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"@openzeppelin/upgrades/contracts/Initializable.sol\\\";\\nimport \\\"./ERC20.sol\\\";\\nimport \\\"../../access/roles/MinterRole.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that adds a set of accounts with the {MinterRole},\\n * which have permission to mint (create) new tokens as they see fit.\\n *\\n * At construction, the deployer of the contract is the only minter.\\n */\\ncontract ERC20Mintable is Initializable, ERC20, MinterRole {\\n    function initialize(address sender) public initializer {\\n        MinterRole.initialize(sender);\\n    }\\n\\n    /**\\n     * @dev See {ERC20-_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the {MinterRole}.\\n     */\\n    function mint(address account, uint256 amount) public onlyMinter returns (bool) {\\n        _mint(account, amount);\\n        return true;\\n    }\\n\\n    uint256[50] private ______gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20Pausable.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"@openzeppelin/upgrades/contracts/Initializable.sol\\\";\\nimport \\\"./ERC20.sol\\\";\\nimport \\\"../../lifecycle/Pausable.sol\\\";\\n\\n/**\\n * @title Pausable token\\n * @dev ERC20 with pausable transfers and allowances.\\n *\\n * Useful if you want to stop trades until the end of a crowdsale, or have\\n * an emergency switch for freezing all token transfers in the event of a large\\n * bug.\\n */\\ncontract ERC20Pausable is Initializable, ERC20, Pausable {\\n    function initialize(address sender) public initializer {\\n        Pausable.initialize(sender);\\n    }\\n\\n    function transfer(address to, uint256 value) public whenNotPaused returns (bool) {\\n        return super.transfer(to, value);\\n    }\\n\\n    function transferFrom(address from, address to, uint256 value) public whenNotPaused returns (bool) {\\n        return super.transferFrom(from, to, value);\\n    }\\n\\n    function approve(address spender, uint256 value) public whenNotPaused returns (bool) {\\n        return super.approve(spender, value);\\n    }\\n\\n    function increaseAllowance(address spender, uint256 addedValue) public whenNotPaused returns (bool) {\\n        return super.increaseAllowance(spender, addedValue);\\n    }\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public whenNotPaused returns (bool) {\\n        return super.decreaseAllowance(spender, subtractedValue);\\n    }\\n\\n    uint256[50] private ______gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/access/roles/MinterRole.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"@openzeppelin/upgrades/contracts/Initializable.sol\\\";\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"../Roles.sol\\\";\\n\\ncontract MinterRole is Initializable, Context {\\n    using Roles for Roles.Role;\\n\\n    event MinterAdded(address indexed account);\\n    event MinterRemoved(address indexed account);\\n\\n    Roles.Role private _minters;\\n\\n    function initialize(address sender) public initializer {\\n        if (!isMinter(sender)) {\\n            _addMinter(sender);\\n        }\\n    }\\n\\n    modifier onlyMinter() {\\n        require(isMinter(_msgSender()), \\\"MinterRole: caller does not have the Minter role\\\");\\n        _;\\n    }\\n\\n    function isMinter(address account) public view returns (bool) {\\n        return _minters.has(account);\\n    }\\n\\n    function addMinter(address account) public onlyMinter {\\n        _addMinter(account);\\n    }\\n\\n    function renounceMinter() public {\\n        _removeMinter(_msgSender());\\n    }\\n\\n    function _addMinter(address account) internal {\\n        _minters.add(account);\\n        emit MinterAdded(account);\\n    }\\n\\n    function _removeMinter(address account) internal {\\n        _minters.remove(account);\\n        emit MinterRemoved(account);\\n    }\\n\\n    uint256[50] private ______gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/access/Roles.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @title Roles\\n * @dev Library for managing addresses assigned to a Role.\\n */\\nlibrary Roles {\\n    struct Role {\\n        mapping (address => bool) bearer;\\n    }\\n\\n    /**\\n     * @dev Give an account access to this role.\\n     */\\n    function add(Role storage role, address account) internal {\\n        require(!has(role, account), \\\"Roles: account already has role\\\");\\n        role.bearer[account] = true;\\n    }\\n\\n    /**\\n     * @dev Remove an account's access to this role.\\n     */\\n    function remove(Role storage role, address account) internal {\\n        require(has(role, account), \\\"Roles: account does not have role\\\");\\n        role.bearer[account] = false;\\n    }\\n\\n    /**\\n     * @dev Check if an account has this role.\\n     * @return bool\\n     */\\n    function has(Role storage role, address account) internal view returns (bool) {\\n        require(account != address(0), \\\"Roles: account is the zero address\\\");\\n        return role.bearer[account];\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/lifecycle/Pausable.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"@openzeppelin/upgrades/contracts/Initializable.sol\\\";\\n\\nimport \\\"../GSN/Context.sol\\\";\\nimport \\\"../access/roles/PauserRole.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\ncontract Pausable is Initializable, Context, PauserRole {\\n    /**\\n     * @dev Emitted when the pause is triggered by a pauser (`account`).\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by a pauser (`account`).\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state. Assigns the Pauser role\\n     * to the deployer.\\n     */\\n    function initialize(address sender) public initializer {\\n        PauserRole.initialize(sender);\\n\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!_paused, \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     */\\n    modifier whenPaused() {\\n        require(_paused, \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Called by a pauser to pause, triggers stopped state.\\n     */\\n    function pause() public onlyPauser whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Called by a pauser to unpause, returns to normal state.\\n     */\\n    function unpause() public onlyPauser whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    uint256[50] private ______gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/access/roles/PauserRole.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"@openzeppelin/upgrades/contracts/Initializable.sol\\\";\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"../Roles.sol\\\";\\n\\ncontract PauserRole is Initializable, Context {\\n    using Roles for Roles.Role;\\n\\n    event PauserAdded(address indexed account);\\n    event PauserRemoved(address indexed account);\\n\\n    Roles.Role private _pausers;\\n\\n    function initialize(address sender) public initializer {\\n        if (!isPauser(sender)) {\\n            _addPauser(sender);\\n        }\\n    }\\n\\n    modifier onlyPauser() {\\n        require(isPauser(_msgSender()), \\\"PauserRole: caller does not have the Pauser role\\\");\\n        _;\\n    }\\n\\n    function isPauser(address account) public view returns (bool) {\\n        return _pausers.has(account);\\n    }\\n\\n    function addPauser(address account) public onlyPauser {\\n        _addPauser(account);\\n    }\\n\\n    function renouncePauser() public {\\n        _removePauser(_msgSender());\\n    }\\n\\n    function _addPauser(address account) internal {\\n        _pausers.add(account);\\n        emit PauserAdded(account);\\n    }\\n\\n    function _removePauser(address account) internal {\\n        _pausers.remove(account);\\n        emit PauserRemoved(account);\\n    }\\n\\n    uint256[50] private ______gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/GSN/GSNRecipient.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"@openzeppelin/upgrades/contracts/Initializable.sol\\\";\\n\\nimport \\\"./IRelayRecipient.sol\\\";\\nimport \\\"./IRelayHub.sol\\\";\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Base GSN recipient contract: includes the {IRelayRecipient} interface\\n * and enables GSN support on all contracts in the inheritance tree.\\n *\\n * TIP: This contract is abstract. The functions {IRelayRecipient-acceptRelayedCall},\\n *  {_preRelayedCall}, and {_postRelayedCall} are not implemented and must be\\n * provided by derived contracts. See the\\n * xref:ROOT:gsn-strategies.adoc#gsn-strategies[GSN strategies] for more\\n * information on how to use the pre-built {GSNRecipientSignature} and\\n * {GSNRecipientERC20Fee}, or how to write your own.\\n */\\ncontract GSNRecipient is Initializable, IRelayRecipient, Context {\\n    function initialize() public initializer {\\n        if (_relayHub == address(0)) {\\n            setDefaultRelayHub();\\n        }\\n    }\\n\\n    function setDefaultRelayHub() public {\\n        _upgradeRelayHub(0xD216153c06E857cD7f72665E0aF1d7D82172F494);\\n    }\\n\\n    // Default RelayHub address, deployed on mainnet and all testnets at the same address\\n    address private _relayHub;\\n\\n    uint256 constant private RELAYED_CALL_ACCEPTED = 0;\\n    uint256 constant private RELAYED_CALL_REJECTED = 11;\\n\\n    // How much gas is forwarded to postRelayedCall\\n    uint256 constant internal POST_RELAYED_CALL_MAX_GAS = 100000;\\n\\n    /**\\n     * @dev Emitted when a contract changes its {IRelayHub} contract to a new one.\\n     */\\n    event RelayHubChanged(address indexed oldRelayHub, address indexed newRelayHub);\\n\\n    /**\\n     * @dev Returns the address of the {IRelayHub} contract for this recipient.\\n     */\\n    function getHubAddr() public view returns (address) {\\n        return _relayHub;\\n    }\\n\\n    /**\\n     * @dev Switches to a new {IRelayHub} instance. This method is added for future-proofing: there's no reason to not\\n     * use the default instance.\\n     *\\n     * IMPORTANT: After upgrading, the {GSNRecipient} will no longer be able to receive relayed calls from the old\\n     * {IRelayHub} instance. Additionally, all funds should be previously withdrawn via {_withdrawDeposits}.\\n     */\\n    function _upgradeRelayHub(address newRelayHub) internal {\\n        address currentRelayHub = _relayHub;\\n        require(newRelayHub != address(0), \\\"GSNRecipient: new RelayHub is the zero address\\\");\\n        require(newRelayHub != currentRelayHub, \\\"GSNRecipient: new RelayHub is the current one\\\");\\n\\n        emit RelayHubChanged(currentRelayHub, newRelayHub);\\n\\n        _relayHub = newRelayHub;\\n    }\\n\\n    /**\\n     * @dev Returns the version string of the {IRelayHub} for which this recipient implementation was built. If\\n     * {_upgradeRelayHub} is used, the new {IRelayHub} instance should be compatible with this version.\\n     */\\n    // This function is view for future-proofing, it may require reading from\\n    // storage in the future.\\n    function relayHubVersion() public view returns (string memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return \\\"1.0.0\\\";\\n    }\\n\\n    /**\\n     * @dev Withdraws the recipient's deposits in `RelayHub`.\\n     *\\n     * Derived contracts should expose this in an external interface with proper access control.\\n     */\\n    function _withdrawDeposits(uint256 amount, address payable payee) internal {\\n        IRelayHub(_relayHub).withdraw(amount, payee);\\n    }\\n\\n    // Overrides for Context's functions: when called from RelayHub, sender and\\n    // data require some pre-processing: the actual sender is stored at the end\\n    // of the call data, which in turns means it needs to be removed from it\\n    // when handling said data.\\n\\n    /**\\n     * @dev Replacement for msg.sender. Returns the actual sender of a transaction: msg.sender for regular transactions,\\n     * and the end-user for GSN relayed calls (where msg.sender is actually `RelayHub`).\\n     *\\n     * IMPORTANT: Contracts derived from {GSNRecipient} should never use `msg.sender`, and use {_msgSender} instead.\\n     */\\n    function _msgSender() internal view returns (address payable) {\\n        if (msg.sender != _relayHub) {\\n            return msg.sender;\\n        } else {\\n            return _getRelayedCallSender();\\n        }\\n    }\\n\\n    /**\\n     * @dev Replacement for msg.data. Returns the actual calldata of a transaction: msg.data for regular transactions,\\n     * and a reduced version for GSN relayed calls (where msg.data contains additional information).\\n     *\\n     * IMPORTANT: Contracts derived from {GSNRecipient} should never use `msg.data`, and use {_msgData} instead.\\n     */\\n    function _msgData() internal view returns (bytes memory) {\\n        if (msg.sender != _relayHub) {\\n            return msg.data;\\n        } else {\\n            return _getRelayedCallData();\\n        }\\n    }\\n\\n    // Base implementations for pre and post relayedCall: only RelayHub can invoke them, and data is forwarded to the\\n    // internal hook.\\n\\n    /**\\n     * @dev See `IRelayRecipient.preRelayedCall`.\\n     *\\n     * This function should not be overriden directly, use `_preRelayedCall` instead.\\n     *\\n     * * Requirements:\\n     *\\n     * - the caller must be the `RelayHub` contract.\\n     */\\n    function preRelayedCall(bytes calldata context) external returns (bytes32) {\\n        require(msg.sender == getHubAddr(), \\\"GSNRecipient: caller is not RelayHub\\\");\\n        return _preRelayedCall(context);\\n    }\\n\\n    /**\\n     * @dev See `IRelayRecipient.preRelayedCall`.\\n     *\\n     * Called by `GSNRecipient.preRelayedCall`, which asserts the caller is the `RelayHub` contract. Derived contracts\\n     * must implement this function with any relayed-call preprocessing they may wish to do.\\n     *\\n     */\\n    function _preRelayedCall(bytes memory context) internal returns (bytes32);\\n\\n    /**\\n     * @dev See `IRelayRecipient.postRelayedCall`.\\n     *\\n     * This function should not be overriden directly, use `_postRelayedCall` instead.\\n     *\\n     * * Requirements:\\n     *\\n     * - the caller must be the `RelayHub` contract.\\n     */\\n    function postRelayedCall(bytes calldata context, bool success, uint256 actualCharge, bytes32 preRetVal) external {\\n        require(msg.sender == getHubAddr(), \\\"GSNRecipient: caller is not RelayHub\\\");\\n        _postRelayedCall(context, success, actualCharge, preRetVal);\\n    }\\n\\n    /**\\n     * @dev See `IRelayRecipient.postRelayedCall`.\\n     *\\n     * Called by `GSNRecipient.postRelayedCall`, which asserts the caller is the `RelayHub` contract. Derived contracts\\n     * must implement this function with any relayed-call postprocessing they may wish to do.\\n     *\\n     */\\n    function _postRelayedCall(bytes memory context, bool success, uint256 actualCharge, bytes32 preRetVal) internal;\\n\\n    /**\\n     * @dev Return this in acceptRelayedCall to proceed with the execution of a relayed call. Note that this contract\\n     * will be charged a fee by RelayHub\\n     */\\n    function _approveRelayedCall() internal pure returns (uint256, bytes memory) {\\n        return _approveRelayedCall(\\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See `GSNRecipient._approveRelayedCall`.\\n     *\\n     * This overload forwards `context` to _preRelayedCall and _postRelayedCall.\\n     */\\n    function _approveRelayedCall(bytes memory context) internal pure returns (uint256, bytes memory) {\\n        return (RELAYED_CALL_ACCEPTED, context);\\n    }\\n\\n    /**\\n     * @dev Return this in acceptRelayedCall to impede execution of a relayed call. No fees will be charged.\\n     */\\n    function _rejectRelayedCall(uint256 errorCode) internal pure returns (uint256, bytes memory) {\\n        return (RELAYED_CALL_REJECTED + errorCode, \\\"\\\");\\n    }\\n\\n    /*\\n     * @dev Calculates how much RelayHub will charge a recipient for using `gas` at a `gasPrice`, given a relayer's\\n     * `serviceFee`.\\n     */\\n    function _computeCharge(uint256 gas, uint256 gasPrice, uint256 serviceFee) internal pure returns (uint256) {\\n        // The fee is expressed as a percentage. E.g. a value of 40 stands for a 40% fee, so the recipient will be\\n        // charged for 1.4 times the spent amount.\\n        return (gas * gasPrice * (100 + serviceFee)) / 100;\\n    }\\n\\n    function _getRelayedCallSender() private pure returns (address payable result) {\\n        // We need to read 20 bytes (an address) located at array index msg.data.length - 20. In memory, the array\\n        // is prefixed with a 32-byte length value, so we first add 32 to get the memory read index. However, doing\\n        // so would leave the address in the upper 20 bytes of the 32-byte word, which is inconvenient and would\\n        // require bit shifting. We therefore subtract 12 from the read index so the address lands on the lower 20\\n        // bytes. This can always be done due to the 32-byte prefix.\\n\\n        // The final memory read index is msg.data.length - 20 + 32 - 12 = msg.data.length. Using inline assembly is the\\n        // easiest/most-efficient way to perform this operation.\\n\\n        // These fields are not accessible from assembly\\n        bytes memory array = msg.data;\\n        uint256 index = msg.data.length;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\\n            result := and(mload(add(array, index)), 0xffffffffffffffffffffffffffffffffffffffff)\\n        }\\n        return result;\\n    }\\n\\n    function _getRelayedCallData() private pure returns (bytes memory) {\\n        // RelayHub appends the sender address at the end of the calldata, so in order to retrieve the actual msg.data,\\n        // we must strip the last 20 bytes (length of an address type) from it.\\n\\n        uint256 actualDataLength = msg.data.length - 20;\\n        bytes memory actualData = new bytes(actualDataLength);\\n\\n        for (uint256 i = 0; i < actualDataLength; ++i) {\\n            actualData[i] = msg.data[i];\\n        }\\n\\n        return actualData;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/GSN/IRelayRecipient.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Base interface for a contract that will be called via the GSN from {IRelayHub}.\\n *\\n * TIP: You don't need to write an implementation yourself! Inherit from {GSNRecipient} instead.\\n */\\ninterface IRelayRecipient {\\n    /**\\n     * @dev Returns the address of the {IRelayHub} instance this recipient interacts with.\\n     */\\n    function getHubAddr() external view returns (address);\\n\\n    /**\\n     * @dev Called by {IRelayHub} to validate if this recipient accepts being charged for a relayed call. Note that the\\n     * recipient will be charged regardless of the execution result of the relayed call (i.e. if it reverts or not).\\n     *\\n     * The relay request was originated by `from` and will be served by `relay`. `encodedFunction` is the relayed call\\n     * calldata, so its first four bytes are the function selector. The relayed call will be forwarded `gasLimit` gas,\\n     * and the transaction executed with a gas price of at least `gasPrice`. `relay`'s fee is `transactionFee`, and the\\n     * recipient will be charged at most `maxPossibleCharge` (in wei). `nonce` is the sender's (`from`) nonce for\\n     * replay attack protection in {IRelayHub}, and `approvalData` is a optional parameter that can be used to hold a signature\\n     * over all or some of the previous values.\\n     *\\n     * Returns a tuple, where the first value is used to indicate approval (0) or rejection (custom non-zero error code,\\n     * values 1 to 10 are reserved) and the second one is data to be passed to the other {IRelayRecipient} functions.\\n     *\\n     * {acceptRelayedCall} is called with 50k gas: if it runs out during execution, the request will be considered\\n     * rejected. A regular revert will also trigger a rejection.\\n     */\\n    function acceptRelayedCall(\\n        address relay,\\n        address from,\\n        bytes calldata encodedFunction,\\n        uint256 transactionFee,\\n        uint256 gasPrice,\\n        uint256 gasLimit,\\n        uint256 nonce,\\n        bytes calldata approvalData,\\n        uint256 maxPossibleCharge\\n    )\\n        external\\n        view\\n        returns (uint256, bytes memory);\\n\\n    /**\\n     * @dev Called by {IRelayHub} on approved relay call requests, before the relayed call is executed. This allows to e.g.\\n     * pre-charge the sender of the transaction.\\n     *\\n     * `context` is the second value returned in the tuple by {acceptRelayedCall}.\\n     *\\n     * Returns a value to be passed to {postRelayedCall}.\\n     *\\n     * {preRelayedCall} is called with 100k gas: if it runs out during exection or otherwise reverts, the relayed call\\n     * will not be executed, but the recipient will still be charged for the transaction's cost.\\n     */\\n    function preRelayedCall(bytes calldata context) external returns (bytes32);\\n\\n    /**\\n     * @dev Called by {IRelayHub} on approved relay call requests, after the relayed call is executed. This allows to e.g.\\n     * charge the user for the relayed call costs, return any overcharges from {preRelayedCall}, or perform\\n     * contract-specific bookkeeping.\\n     *\\n     * `context` is the second value returned in the tuple by {acceptRelayedCall}. `success` is the execution status of\\n     * the relayed call. `actualCharge` is an estimate of how much the recipient will be charged for the transaction,\\n     * not including any gas used by {postRelayedCall} itself. `preRetVal` is {preRelayedCall}'s return value.\\n     *\\n     *\\n     * {postRelayedCall} is called with 100k gas: if it runs out during execution or otherwise reverts, the relayed call\\n     * and the call to {preRelayedCall} will be reverted retroactively, but the recipient will still be charged for the\\n     * transaction's cost.\\n     */\\n    function postRelayedCall(bytes calldata context, bool success, uint256 actualCharge, bytes32 preRetVal) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/GSN/IRelayHub.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Interface for `RelayHub`, the core contract of the GSN. Users should not need to interact with this contract\\n * directly.\\n *\\n * See the https://github.com/OpenZeppelin/openzeppelin-gsn-helpers[OpenZeppelin GSN helpers] for more information on\\n * how to deploy an instance of `RelayHub` on your local test network.\\n */\\ninterface IRelayHub {\\n    // Relay management\\n\\n    /**\\n     * @dev Adds stake to a relay and sets its `unstakeDelay`. If the relay does not exist, it is created, and the caller\\n     * of this function becomes its owner. If the relay already exists, only the owner can call this function. A relay\\n     * cannot be its own owner.\\n     *\\n     * All Ether in this function call will be added to the relay's stake.\\n     * Its unstake delay will be assigned to `unstakeDelay`, but the new value must be greater or equal to the current one.\\n     *\\n     * Emits a {Staked} event.\\n     */\\n    function stake(address relayaddr, uint256 unstakeDelay) external payable;\\n\\n    /**\\n     * @dev Emitted when a relay's stake or unstakeDelay are increased\\n     */\\n    event Staked(address indexed relay, uint256 stake, uint256 unstakeDelay);\\n\\n    /**\\n     * @dev Registers the caller as a relay.\\n     * The relay must be staked for, and not be a contract (i.e. this function must be called directly from an EOA).\\n     *\\n     * This function can be called multiple times, emitting new {RelayAdded} events. Note that the received\\n     * `transactionFee` is not enforced by {relayCall}.\\n     *\\n     * Emits a {RelayAdded} event.\\n     */\\n    function registerRelay(uint256 transactionFee, string calldata url) external;\\n\\n    /**\\n     * @dev Emitted when a relay is registered or re-registerd. Looking at these events (and filtering out\\n     * {RelayRemoved} events) lets a client discover the list of available relays.\\n     */\\n    event RelayAdded(address indexed relay, address indexed owner, uint256 transactionFee, uint256 stake, uint256 unstakeDelay, string url);\\n\\n    /**\\n     * @dev Removes (deregisters) a relay. Unregistered (but staked for) relays can also be removed.\\n     *\\n     * Can only be called by the owner of the relay. After the relay's `unstakeDelay` has elapsed, {unstake} will be\\n     * callable.\\n     *\\n     * Emits a {RelayRemoved} event.\\n     */\\n    function removeRelayByOwner(address relay) external;\\n\\n    /**\\n     * @dev Emitted when a relay is removed (deregistered). `unstakeTime` is the time when unstake will be callable.\\n     */\\n    event RelayRemoved(address indexed relay, uint256 unstakeTime);\\n\\n    /** Deletes the relay from the system, and gives back its stake to the owner.\\n     *\\n     * Can only be called by the relay owner, after `unstakeDelay` has elapsed since {removeRelayByOwner} was called.\\n     *\\n     * Emits an {Unstaked} event.\\n     */\\n    function unstake(address relay) external;\\n\\n    /**\\n     * @dev Emitted when a relay is unstaked for, including the returned stake.\\n     */\\n    event Unstaked(address indexed relay, uint256 stake);\\n\\n    // States a relay can be in\\n    enum RelayState {\\n        Unknown, // The relay is unknown to the system: it has never been staked for\\n        Staked, // The relay has been staked for, but it is not yet active\\n        Registered, // The relay has registered itself, and is active (can relay calls)\\n        Removed    // The relay has been removed by its owner and can no longer relay calls. It must wait for its unstakeDelay to elapse before it can unstake\\n    }\\n\\n    /**\\n     * @dev Returns a relay's status. Note that relays can be deleted when unstaked or penalized, causing this function\\n     * to return an empty entry.\\n     */\\n    function getRelay(address relay) external view returns (uint256 totalStake, uint256 unstakeDelay, uint256 unstakeTime, address payable owner, RelayState state);\\n\\n    // Balance management\\n\\n    /**\\n     * @dev Deposits Ether for a contract, so that it can receive (and pay for) relayed transactions.\\n     *\\n     * Unused balance can only be withdrawn by the contract itself, by calling {withdraw}.\\n     *\\n     * Emits a {Deposited} event.\\n     */\\n    function depositFor(address target) external payable;\\n\\n    /**\\n     * @dev Emitted when {depositFor} is called, including the amount and account that was funded.\\n     */\\n    event Deposited(address indexed recipient, address indexed from, uint256 amount);\\n\\n    /**\\n     * @dev Returns an account's deposits. These can be either a contracts's funds, or a relay owner's revenue.\\n     */\\n    function balanceOf(address target) external view returns (uint256);\\n\\n    /**\\n     * Withdraws from an account's balance, sending it back to it. Relay owners call this to retrieve their revenue, and\\n     * contracts can use it to reduce their funding.\\n     *\\n     * Emits a {Withdrawn} event.\\n     */\\n    function withdraw(uint256 amount, address payable dest) external;\\n\\n    /**\\n     * @dev Emitted when an account withdraws funds from `RelayHub`.\\n     */\\n    event Withdrawn(address indexed account, address indexed dest, uint256 amount);\\n\\n    // Relaying\\n\\n    /**\\n     * @dev Checks if the `RelayHub` will accept a relayed operation.\\n     * Multiple things must be true for this to happen:\\n     *  - all arguments must be signed for by the sender (`from`)\\n     *  - the sender's nonce must be the current one\\n     *  - the recipient must accept this transaction (via {acceptRelayedCall})\\n     *\\n     * Returns a `PreconditionCheck` value (`OK` when the transaction can be relayed), or a recipient-specific error\\n     * code if it returns one in {acceptRelayedCall}.\\n     */\\n    function canRelay(\\n        address relay,\\n        address from,\\n        address to,\\n        bytes calldata encodedFunction,\\n        uint256 transactionFee,\\n        uint256 gasPrice,\\n        uint256 gasLimit,\\n        uint256 nonce,\\n        bytes calldata signature,\\n        bytes calldata approvalData\\n    ) external view returns (uint256 status, bytes memory recipientContext);\\n\\n    // Preconditions for relaying, checked by canRelay and returned as the corresponding numeric values.\\n    enum PreconditionCheck {\\n        OK,                         // All checks passed, the call can be relayed\\n        WrongSignature,             // The transaction to relay is not signed by requested sender\\n        WrongNonce,                 // The provided nonce has already been used by the sender\\n        AcceptRelayedCallReverted,  // The recipient rejected this call via acceptRelayedCall\\n        InvalidRecipientStatusCode  // The recipient returned an invalid (reserved) status code\\n    }\\n\\n    /**\\n     * @dev Relays a transaction.\\n     *\\n     * For this to succeed, multiple conditions must be met:\\n     *  - {canRelay} must `return PreconditionCheck.OK`\\n     *  - the sender must be a registered relay\\n     *  - the transaction's gas price must be larger or equal to the one that was requested by the sender\\n     *  - the transaction must have enough gas to not run out of gas if all internal transactions (calls to the\\n     * recipient) use all gas available to them\\n     *  - the recipient must have enough balance to pay the relay for the worst-case scenario (i.e. when all gas is\\n     * spent)\\n     *\\n     * If all conditions are met, the call will be relayed and the recipient charged. {preRelayedCall}, the encoded\\n     * function and {postRelayedCall} will be called in that order.\\n     *\\n     * Parameters:\\n     *  - `from`: the client originating the request\\n     *  - `to`: the target {IRelayRecipient} contract\\n     *  - `encodedFunction`: the function call to relay, including data\\n     *  - `transactionFee`: fee (%) the relay takes over actual gas cost\\n     *  - `gasPrice`: gas price the client is willing to pay\\n     *  - `gasLimit`: gas to forward when calling the encoded function\\n     *  - `nonce`: client's nonce\\n     *  - `signature`: client's signature over all previous params, plus the relay and RelayHub addresses\\n     *  - `approvalData`: dapp-specific data forwared to {acceptRelayedCall}. This value is *not* verified by the\\n     * `RelayHub`, but it still can be used for e.g. a signature.\\n     *\\n     * Emits a {TransactionRelayed} event.\\n     */\\n    function relayCall(\\n        address from,\\n        address to,\\n        bytes calldata encodedFunction,\\n        uint256 transactionFee,\\n        uint256 gasPrice,\\n        uint256 gasLimit,\\n        uint256 nonce,\\n        bytes calldata signature,\\n        bytes calldata approvalData\\n    ) external;\\n\\n    /**\\n     * @dev Emitted when an attempt to relay a call failed.\\n     *\\n     * This can happen due to incorrect {relayCall} arguments, or the recipient not accepting the relayed call. The\\n     * actual relayed call was not executed, and the recipient not charged.\\n     *\\n     * The `reason` parameter contains an error code: values 1-10 correspond to `PreconditionCheck` entries, and values\\n     * over 10 are custom recipient error codes returned from {acceptRelayedCall}.\\n     */\\n    event CanRelayFailed(address indexed relay, address indexed from, address indexed to, bytes4 selector, uint256 reason);\\n\\n    /**\\n     * @dev Emitted when a transaction is relayed. \\n     * Useful when monitoring a relay's operation and relayed calls to a contract\\n     *\\n     * Note that the actual encoded function might be reverted: this is indicated in the `status` parameter.\\n     *\\n     * `charge` is the Ether value deducted from the recipient's balance, paid to the relay's owner.\\n     */\\n    event TransactionRelayed(address indexed relay, address indexed from, address indexed to, bytes4 selector, RelayCallStatus status, uint256 charge);\\n\\n    // Reason error codes for the TransactionRelayed event\\n    enum RelayCallStatus {\\n        OK,                      // The transaction was successfully relayed and execution successful - never included in the event\\n        RelayedCallFailed,       // The transaction was relayed, but the relayed call failed\\n        PreRelayedFailed,        // The transaction was not relayed due to preRelatedCall reverting\\n        PostRelayedFailed,       // The transaction was relayed and reverted due to postRelatedCall reverting\\n        RecipientBalanceChanged  // The transaction was relayed and reverted due to the recipient's balance changing\\n    }\\n\\n    /**\\n     * @dev Returns how much gas should be forwarded to a call to {relayCall}, in order to relay a transaction that will\\n     * spend up to `relayedCallStipend` gas.\\n     */\\n    function requiredGas(uint256 relayedCallStipend) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the maximum recipient charge, given the amount of gas forwarded, gas price and relay fee.\\n     */\\n    function maxPossibleCharge(uint256 relayedCallStipend, uint256 gasPrice, uint256 transactionFee) external view returns (uint256);\\n\\n     // Relay penalization. \\n     // Any account can penalize relays, removing them from the system immediately, and rewarding the\\n    // reporter with half of the relay's stake. The other half is burned so that, even if the relay penalizes itself, it\\n    // still loses half of its stake.\\n\\n    /**\\n     * @dev Penalize a relay that signed two transactions using the same nonce (making only the first one valid) and\\n     * different data (gas price, gas limit, etc. may be different).\\n     *\\n     * The (unsigned) transaction data and signature for both transactions must be provided.\\n     */\\n    function penalizeRepeatedNonce(bytes calldata unsignedTx1, bytes calldata signature1, bytes calldata unsignedTx2, bytes calldata signature2) external;\\n\\n    /**\\n     * @dev Penalize a relay that sent a transaction that didn't target `RelayHub`'s {registerRelay} or {relayCall}.\\n     */\\n    function penalizeIllegalTransaction(bytes calldata unsignedTx, bytes calldata signature) external;\\n\\n    /**\\n     * @dev Emitted when a relay is penalized.\\n     */\\n    event Penalized(address indexed relay, address sender, uint256 amount);\\n\\n    /**\\n     * @dev Returns an account's nonce in `RelayHub`.\\n     */\\n    function getNonce(address from) external view returns (uint256);\\n}\\n\\n\"\r\n    },\r\n    \"contracts/Gateway/MintGatewayUpgrader.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.17;\\n\\nimport \\\"@openzeppelin/upgrades/contracts/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/upgrades/contracts/upgradeability/InitializableAdminUpgradeabilityProxy.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/ownership/Ownable.sol\\\";\\n\\nimport \\\"../Governance/Claimable.sol\\\";\\nimport \\\"../libraries/String.sol\\\";\\nimport \\\"./RenERC20.sol\\\";\\nimport \\\"./interfaces/IGateway.sol\\\";\\nimport \\\"../libraries/CanReclaimTokens.sol\\\";\\n\\nimport \\\"./MintGatewayV2.sol\\\";\\nimport \\\"../Governance/RenProxyAdmin.sol\\\";\\n\\ncontract MintGatewayUpgrader is Ownable, CanReclaimTokens {\\n    RenProxyAdmin renProxyAdmin;\\n    MintGatewayLogicV2 newGatewayLogic;\\n    address previousAdminOwner;\\n    address newMintAuthority;\\n\\n    constructor(\\n        RenProxyAdmin _renProxyAdmin,\\n        MintGatewayLogicV2 _newGatewayLogic,\\n        address _newMintAuthority\\n    ) public {\\n        Ownable.initialize(msg.sender);\\n        renProxyAdmin = _renProxyAdmin;\\n        newGatewayLogic = _newGatewayLogic;\\n        previousAdminOwner = renProxyAdmin.owner();\\n        newMintAuthority = _newMintAuthority;\\n    }\\n\\n    function upgrade(MintGatewayLogicV2 gatewayInstance, bytes32 selectorHash)\\n        public\\n        onlyOwner\\n    {\\n        uint256 minimumBurnAmount = gatewayInstance.minimumBurnAmount();\\n        RenERC20LogicV1 token = gatewayInstance.token();\\n        address mintAuthority = gatewayInstance.mintAuthority();\\n        address feeRecipient = gatewayInstance.feeRecipient();\\n        uint16 mintFee = gatewayInstance.mintFee();\\n        uint16 burnFee = gatewayInstance.burnFee();\\n        uint256 nextN = gatewayInstance.nextN();\\n\\n        address previousGatewayOwner = gatewayInstance.owner();\\n        gatewayInstance.claimOwnership();\\n\\n        // Update implementation.\\n        renProxyAdmin.upgrade(\\n            AdminUpgradeabilityProxy(\\n                // Cast gateway instance to payable address\\n                address(uint160(address(gatewayInstance)))\\n            ),\\n            address(newGatewayLogic)\\n        );\\n\\n        // Update mint authorities and selector hash.\\n        address legacyMintAuthority = gatewayInstance.mintAuthority();\\n        gatewayInstance.updateMintAuthority(newMintAuthority);\\n        gatewayInstance._legacy_updateMintAuthority(legacyMintAuthority);\\n        gatewayInstance.updateSelectorHash(selectorHash);\\n\\n        require(\\n            gatewayInstance.minimumBurnAmount() == minimumBurnAmount,\\n            \\\"Expected minimumBurnAmount to not change.\\\"\\n        );\\n        require(\\n            gatewayInstance.token() == token,\\n            \\\"Expected token to not change.\\\"\\n        );\\n        require(\\n            gatewayInstance._legacy_mintAuthority() == mintAuthority,\\n            \\\"Expected _legacy_mintAuthority to equal old mintAuthority.\\\"\\n        );\\n        require(\\n            gatewayInstance.mintAuthority() == newMintAuthority,\\n            \\\"Expected mintAuthority to equal new mintAuthority.\\\"\\n        );\\n        require(\\n            gatewayInstance.feeRecipient() == feeRecipient,\\n            \\\"Expected feeRecipient to not change.\\\"\\n        );\\n        require(\\n            gatewayInstance.mintFee() == mintFee,\\n            \\\"Expected mintFee to not change.\\\"\\n        );\\n        require(\\n            gatewayInstance.burnFee() == burnFee,\\n            \\\"Expected burnFee to not change.\\\"\\n        );\\n        require(\\n            gatewayInstance.nextN() == nextN,\\n            \\\"Expected nextN to not change.\\\"\\n        );\\n\\n        gatewayInstance._directTransferOwnership(previousGatewayOwner);\\n    }\\n\\n    function done() public onlyOwner {\\n        renProxyAdmin.transferOwnership(previousAdminOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Governance/RenProxyAdmin.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.17;\\n\\nimport \\\"@openzeppelin/upgrades/contracts/upgradeability/ProxyAdmin.sol\\\";\\n\\n/**\\n * @title RenProxyAdmin\\n * @dev Proxies restrict the proxy's owner from calling functions from the\\n * delegate contract logic. The ProxyAdmin contract allows single account to be\\n * the governance address of both the proxy and the delegate contract logic.\\n */\\n/* solium-disable-next-line no-empty-blocks */\\ncontract RenProxyAdmin is ProxyAdmin {\\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/upgrades/contracts/upgradeability/ProxyAdmin.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"../ownership/Ownable.sol\\\";\\nimport \\\"./AdminUpgradeabilityProxy.sol\\\";\\n\\n/**\\n * @title ProxyAdmin\\n * @dev This contract is the admin of a proxy, and is in charge\\n * of upgrading it as well as transferring it to another admin.\\n */\\ncontract ProxyAdmin is OpenZeppelinUpgradesOwnable {\\n  \\n  /**\\n   * @dev Returns the current implementation of a proxy.\\n   * This is needed because only the proxy admin can query it.\\n   * @return The address of the current implementation of the proxy.\\n   */\\n  function getProxyImplementation(AdminUpgradeabilityProxy proxy) public view returns (address) {\\n    // We need to manually run the static call since the getter cannot be flagged as view\\n    // bytes4(keccak256(\\\"implementation()\\\")) == 0x5c60da1b\\n    (bool success, bytes memory returndata) = address(proxy).staticcall(hex\\\"5c60da1b\\\");\\n    require(success);\\n    return abi.decode(returndata, (address));\\n  }\\n\\n  /**\\n   * @dev Returns the admin of a proxy. Only the admin can query it.\\n   * @return The address of the current admin of the proxy.\\n   */\\n  function getProxyAdmin(AdminUpgradeabilityProxy proxy) public view returns (address) {\\n    // We need to manually run the static call since the getter cannot be flagged as view\\n    // bytes4(keccak256(\\\"admin()\\\")) == 0xf851a440\\n    (bool success, bytes memory returndata) = address(proxy).staticcall(hex\\\"f851a440\\\");\\n    require(success);\\n    return abi.decode(returndata, (address));\\n  }\\n\\n  /**\\n   * @dev Changes the admin of a proxy.\\n   * @param proxy Proxy to change admin.\\n   * @param newAdmin Address to transfer proxy administration to.\\n   */\\n  function changeProxyAdmin(AdminUpgradeabilityProxy proxy, address newAdmin) public onlyOwner {\\n    proxy.changeAdmin(newAdmin);\\n  }\\n\\n  /**\\n   * @dev Upgrades a proxy to the newest implementation of a contract.\\n   * @param proxy Proxy to be upgraded.\\n   * @param implementation the address of the Implementation.\\n   */\\n  function upgrade(AdminUpgradeabilityProxy proxy, address implementation) public onlyOwner {\\n    proxy.upgradeTo(implementation);\\n  }\\n\\n  /**\\n   * @dev Upgrades a proxy to the newest implementation of a contract and forwards a function call to it.\\n   * This is useful to initialize the proxied contract.\\n   * @param proxy Proxy to be upgraded.\\n   * @param implementation Address of the Implementation.\\n   * @param data Data to send as msg.data in the low level call.\\n   * It should include the signature and the parameters of the function to be called, as described in\\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\\n   */\\n  function upgradeAndCall(AdminUpgradeabilityProxy proxy, address implementation, bytes memory data) payable public onlyOwner {\\n    proxy.upgradeToAndCall.value(msg.value)(implementation, data);\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/upgrades/contracts/ownership/Ownable.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\\"user permissions\\\".\\n *\\n * Source https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-solidity/v2.1.3/contracts/ownership/Ownable.sol\\n * This contract is copied here and renamed from the original to avoid clashes in the compiled artifacts\\n * when the user imports a zos-lib contract (that transitively causes this contract to be compiled and added to the\\n * build/artifacts folder) as well as the vanilla Ownable implementation from an openzeppelin version.\\n */\\ncontract OpenZeppelinUpgradesOwnable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n     * account.\\n     */\\n    constructor () internal {\\n        _owner = msg.sender;\\n        emit OwnershipTransferred(address(0), _owner);\\n    }\\n\\n    /**\\n     * @return the address of the owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner());\\n        _;\\n    }\\n\\n    /**\\n     * @return true if `msg.sender` is the owner of the contract.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return msg.sender == _owner;\\n    }\\n\\n    /**\\n     * @dev Allows the current owner to relinquish control of the contract.\\n     * @notice Renouncing to ownership will leave the contract without an owner.\\n     * It will not be possible to call the functions with the `onlyOwner`\\n     * modifier anymore.\\n     */\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n     * @param newOwner The address to transfer ownership to.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers control of the contract to a newOwner.\\n     * @param newOwner The address to transfer ownership to.\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0));\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/upgrades/contracts/upgradeability/AdminUpgradeabilityProxy.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport './BaseAdminUpgradeabilityProxy.sol';\\n\\n/**\\n * @title AdminUpgradeabilityProxy\\n * @dev Extends from BaseAdminUpgradeabilityProxy with a constructor for \\n * initializing the implementation, admin, and init data.\\n */\\ncontract AdminUpgradeabilityProxy is BaseAdminUpgradeabilityProxy, UpgradeabilityProxy {\\n  /**\\n   * Contract constructor.\\n   * @param _logic address of the initial implementation.\\n   * @param _admin Address of the proxy administrator.\\n   * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.\\n   * It should include the signature and the parameters of the function to be called, as described in\\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\\n   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\\n   */\\n  constructor(address _logic, address _admin, bytes memory _data) UpgradeabilityProxy(_logic, _data) public payable {\\n    assert(ADMIN_SLOT == bytes32(uint256(keccak256('eip1967.proxy.admin')) - 1));\\n    _setAdmin(_admin);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/Gateway/LockGateway.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.17;\\n\\nimport \\\"@openzeppelin/upgrades/contracts/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/upgrades/contracts/upgradeability/InitializableAdminUpgradeabilityProxy.sol\\\";\\n\\nimport \\\"../Governance/Claimable.sol\\\";\\nimport \\\"../libraries/String.sol\\\";\\nimport \\\"./RenERC20.sol\\\";\\nimport \\\"./interfaces/IGateway.sol\\\";\\nimport \\\"../libraries/CanReclaimTokens.sol\\\";\\n\\ncontract LockGatewayStateV1 {\\n    uint256 constant BIPS_DENOMINATOR = 10000;\\n    uint256 public minimumBurnAmount;\\n\\n    /// @notice Each Gateway is tied to a specific RenERC20 token.\\n    RenERC20LogicV1 public token;\\n\\n    /// @notice The mintAuthority is an address that can sign mint requests.\\n    address public mintAuthority;\\n\\n    /// @dev feeRecipient is assumed to be an address (or a contract) that can\\n    /// accept erc20 payments it cannot be 0x0.\\n    /// @notice When tokens are mint or burnt, a portion of the tokens are\\n    /// forwarded to a fee recipient.\\n    address public feeRecipient;\\n\\n    /// @notice The mint fee in bips.\\n    uint16 public lockFee;\\n\\n    /// @notice The burn fee in bips.\\n    uint16 public releaseFee;\\n\\n    /// @notice Each signature can only be seen once.\\n    mapping(bytes32 => bool) public status;\\n\\n    // LogMint and LogBurn contain a unique `n` that identifies\\n    // the mint or burn event.\\n    uint256 public nextN = 0;\\n}\\n\\n/// @notice Gateway handles verifying mint and burn requests. A mintAuthority\\n/// approves new assets to be minted by providing a digital signature. An owner\\n/// of an asset can request for it to be burnt.\\ncontract LockGatewayLogicV1 is\\n    Initializable,\\n    Claimable,\\n    CanReclaimTokens,\\n    // ILock,\\n    LockGatewayStateV1\\n{\\n    using SafeMath for uint256;\\n\\n    event LogMintAuthorityUpdated(address indexed _newMintAuthority);\\n    event LogLock(\\n        bytes _to,\\n        bytes _p,\\n        uint256 _amount,\\n        uint256 indexed _n,\\n        bytes indexed _indexedTo\\n    );\\n    event LogRelease(\\n        address indexed _to,\\n        uint256 _amount,\\n        uint256 indexed _n,\\n        bytes32 indexed _signedMessageHash\\n    );\\n\\n    /// @notice Only allow the Darknode Payment contract.\\n    modifier onlyOwnerOrMintAuthority() {\\n        require(\\n            msg.sender == mintAuthority || msg.sender == owner(),\\n            \\\"Gateway: caller is not the owner or mint authority\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @param _token The RenERC20 this Gateway is responsible for.\\n    /// @param _feeRecipient The recipient of burning and minting fees.\\n    /// @param _mintAuthority The address of the key that can sign mint\\n    ///        requests.\\n    /// @param _lockFee The amount subtracted each mint request and\\n    ///        forwarded to the feeRecipient. In BIPS.\\n    /// @param _releaseFee The amount subtracted each burn request and\\n    ///        forwarded to the feeRecipient. In BIPS.\\n    function initialize(\\n        RenERC20LogicV1 _token,\\n        address _feeRecipient,\\n        address _mintAuthority,\\n        uint16 _lockFee,\\n        uint16 _releaseFee,\\n        uint256 _minimumBurnAmount\\n    ) public initializer {\\n        Claimable.initialize(msg.sender);\\n        CanReclaimTokens.initialize(msg.sender);\\n        minimumBurnAmount = _minimumBurnAmount;\\n        token = _token;\\n        lockFee = _lockFee;\\n        releaseFee = _releaseFee;\\n        updateMintAuthority(_mintAuthority);\\n        updateFeeRecipient(_feeRecipient);\\n    }\\n\\n    // Public functions ////////////////////////////////////////////////////////\\n\\n    /// @notice Claims ownership of the token passed in to the constructor.\\n    /// `transferStoreOwnership` must have previously been called.\\n    /// Anyone can call this function.\\n    function claimTokenOwnership() public {\\n        token.claimOwnership();\\n    }\\n\\n    /// @notice Allow the owner to update the fee recipient.\\n    ///\\n    /// @param _nextMintAuthority The address to start paying fees to.\\n    function updateMintAuthority(address _nextMintAuthority)\\n        public\\n        onlyOwnerOrMintAuthority\\n    {\\n        // The mint authority should not be set to 0, which is the result\\n        // returned by ecrecover for an invalid signature.\\n        require(\\n            _nextMintAuthority != address(0),\\n            \\\"Gateway: mintAuthority cannot be set to address zero\\\"\\n        );\\n        mintAuthority = _nextMintAuthority;\\n        emit LogMintAuthorityUpdated(mintAuthority);\\n    }\\n\\n    /// @notice Allow the owner to update the fee recipient.\\n    ///\\n    /// @param _nextFeeRecipient The address to start paying fees to.\\n    function updateFeeRecipient(address _nextFeeRecipient) public onlyOwner {\\n        // 'mint' and 'burn' will fail if the feeRecipient is 0x0\\n        require(\\n            _nextFeeRecipient != address(0x0),\\n            \\\"Gateway: fee recipient cannot be 0x0\\\"\\n        );\\n\\n        feeRecipient = _nextFeeRecipient;\\n    }\\n\\n    /// @notice Allow the owner to update the 'mint' fee.\\n    ///\\n    /// @param _nextLockFee The new fee for locking.\\n    function updateLockFee(uint16 _nextLockFee) public onlyOwner {\\n        lockFee = _nextLockFee;\\n    }\\n\\n    /// @notice Allow the owner to update the burn fee.\\n    ///\\n    /// @param _nextReleaseFee The new fee for releasing.\\n    function updateReleaseFee(uint16 _nextReleaseFee) public onlyOwner {\\n        releaseFee = _nextReleaseFee;\\n    }\\n\\n    function lock(\\n        string memory _chain,\\n        bytes memory _to,\\n        bytes memory _payload,\\n        uint256 _amount\\n    ) public returns (uint256) {\\n        require(token.transferFrom(msg.sender, address(this), _amount));\\n        uint256 fee = _amount.mul(lockFee).div(BIPS_DENOMINATOR);\\n        token.transfer(feeRecipient, fee);\\n        uint256 amountAfterFee = _amount.sub(fee);\\n        emit LogLock(_to, _payload, amountAfterFee, nextN, _to);\\n        nextN += 1;\\n        return amountAfterFee;\\n    }\\n\\n    /// @notice release verifies a release approval signature from RenVM and\\n    ///         sends tokens after taking a fee for the `_feeRecipient`.\\n    ///\\n    /// @param _pHash (payload hash) The hash of the payload associated with the\\n    ///        release.\\n    /// @param _amount The amount of the token being released, in its smallest\\n    ///        value. (e.g. satoshis for BTC).\\n    /// @param _nHash (nonce hash) The hash of the nonce, amount and pHash.\\n    /// @param _sig The signature of the hash of the following values:\\n    ///        (pHash, amount, msg.sender, nHash), signed by the mintAuthority.\\n    function release(\\n        bytes32 _pHash,\\n        uint256 _amount,\\n        bytes32 _nHash,\\n        bytes memory _sig\\n    ) public returns (uint256) {\\n        // Verify signature\\n        bytes32 signedMessageHash = hashForSignature(\\n            _pHash,\\n            _amount,\\n            msg.sender,\\n            _nHash\\n        );\\n        require(\\n            status[signedMessageHash] == false,\\n            \\\"Gateway: nonce hash already spent\\\"\\n        );\\n        if (!verifySignature(signedMessageHash, _sig)) {\\n            // Return a detailed string containing the hash and recovered\\n            // signer. This is somewhat costly but is only run in the revert\\n            // branch.\\n            revert(\\n                String.add8(\\n                    \\\"Gateway: invalid signature. pHash: \\\",\\n                    String.fromBytes32(_pHash),\\n                    \\\", amount: \\\",\\n                    String.fromUint(_amount),\\n                    \\\", msg.sender: \\\",\\n                    String.fromAddress(msg.sender),\\n                    \\\", _nHash: \\\",\\n                    String.fromBytes32(_nHash)\\n                )\\n            );\\n        }\\n        status[signedMessageHash] = true;\\n\\n        uint256 fee = _amount.mul(releaseFee).div(BIPS_DENOMINATOR);\\n        uint256 amountAfterFee = _amount.sub(fee);\\n\\n        // Mint amount minus the fee\\n        token.transfer(msg.sender, fee);\\n        // Mint the fee\\n        token.transfer(feeRecipient, amountAfterFee);\\n\\n        emit LogRelease(msg.sender, amountAfterFee, nextN, signedMessageHash);\\n        nextN += 1;\\n\\n        return amountAfterFee;\\n    }\\n\\n    /// @notice verifySignature checks the the provided signature matches the provided\\n    /// parameters.\\n    function verifySignature(bytes32 _signedMessageHash, bytes memory _sig)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return mintAuthority == ECDSA.recover(_signedMessageHash, _sig);\\n    }\\n\\n    /// @notice hashForSignature hashes the parameters so that they can be signed.\\n    function hashForSignature(\\n        bytes32 _pHash,\\n        uint256 _amount,\\n        address _to,\\n        bytes32 _nHash\\n    ) public view returns (bytes32) {\\n        return\\n            keccak256(abi.encode(_pHash, _amount, address(token), _to, _nHash));\\n    }\\n}\\n\\n/* solium-disable-next-line no-empty-blocks */\\ncontract LockGatewayProxy is InitializableAdminUpgradeabilityProxy {\\n\\n}\\n\"\r\n    },\r\n    \"contracts/Gateway/examples/Vesting.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.17;\\n\\nimport \\\"../GatewayRegistry.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/ownership/Ownable.sol\\\";\\n\\ncontract Vesting is Ownable {\\n    using SafeMath for uint256;\\n\\n    GatewayRegistry public registry;\\n\\n    uint256 private constant SECONDS_PER_MONTH = 365 days / 12;\\n\\n    /// @notice Defines the fields required for a vesting schedule.\\n    struct VestingSchedule {\\n        // The start time (in seconds since Unix epoch) at which the vesting\\n        // period should begin.\\n        uint256 startTime;\\n        // The number of months for the vesting period.\\n        uint16 duration;\\n        // The total amount of Bitcoin apart of the vesting schedule.\\n        uint256 amount;\\n        // The number of months claimed by the user.\\n        uint256 monthsClaimed;\\n        // The total amount of Bitcoin claimed by the user.\\n        uint256 amountClaimed;\\n    }\\n\\n    /// @notice Mapping of a beneficiary address to a vesting schedule. Each\\n    //          beneficiary can have a maximum of 1 vesting schedule.\\n    mapping(address => VestingSchedule) public schedules;\\n\\n    /// @notice The contract constructor.\\n    /// @param _registry The GatewayRegistry contract address.\\n    constructor(GatewayRegistry _registry) public {\\n        Ownable.initialize(msg.sender);\\n        registry = _registry;\\n    }\\n\\n    /// @notice Allows the contract owner to add a vesting schedule for a\\n    ///         beneficiary.\\n    /// @param _amount The amount of Bitcoin provided to the Darknodes in Sats.\\n    /// @param _nHash The hash of the nonce returned by the Darknodes.\\n    /// @param _sig The signature returned by the Darknodes.\\n    /// @param _beneficiary The address of the recipient entitled to claim the vested tokens.\\n    /// @param _startTime The start time (in seconds since Unix epoch) at which the vesting\\n    ///                   period should begin.\\n    /// @param _duration The number of months for the vesting period.\\n    function addVestingSchedule(\\n        // Payload\\n        address _beneficiary,\\n        uint256 _startTime,\\n        uint16 _duration,\\n        // Required\\n        uint256 _amount,\\n        bytes32 _nHash,\\n        bytes calldata _sig\\n    ) external onlyOwner {\\n        require(\\n            schedules[_beneficiary].startTime == 0,\\n            \\\"vesting schedule already exists\\\"\\n        );\\n        require(_amount > 0, \\\"amount must be greater than 0\\\");\\n        require(_duration > 0, \\\"duration must be at least 1 month\\\");\\n\\n        // Construct the payload hash and mint new tokens using the Gateway\\n        // contract. This will verify the signature to ensure the Darknodes have\\n        // received the Bitcoin.\\n        bytes32 pHash =\\n            keccak256(abi.encode(_beneficiary, _startTime, _duration));\\n        uint256 finalAmountScaled =\\n            registry.getGatewayBySymbol(\\\"BTC\\\").mint(\\n                pHash,\\n                _amount,\\n                _nHash,\\n                _sig\\n            );\\n\\n        // Construct a vesting schedule and assign it to the beneficiary.\\n        VestingSchedule memory schedule =\\n            VestingSchedule({\\n                startTime: _startTime == 0 ? now : _startTime,\\n                duration: _duration,\\n                amount: finalAmountScaled,\\n                monthsClaimed: 0,\\n                amountClaimed: 0\\n            });\\n\\n        schedules[_beneficiary] = schedule;\\n    }\\n\\n    /// @notice Allows a beneficiary to withdraw their vested Bitcoin.\\n    /// @param _to The Bitcoin address to which the beneficiary will receive\\n    ///            their Bitcoin.\\n    function claim(bytes calldata _to) external {\\n        // Calculate the claimable amount for the caller of the function.\\n        uint256 monthsClaimable;\\n        uint256 amountClaimable;\\n        (monthsClaimable, amountClaimable) = calculateClaimable(msg.sender);\\n\\n        require(amountClaimable > 0, \\\"no amount claimable\\\");\\n\\n        // Update the claimed details in the vesting schedule.\\n        VestingSchedule storage schedule = schedules[msg.sender];\\n        schedule.monthsClaimed = schedule.monthsClaimed.add(monthsClaimable);\\n        schedule.amountClaimed = schedule.amountClaimed.add(amountClaimable);\\n\\n        // Burn the tokens using the Gateway contract. This will burn the\\n        // tokens after taking a fee. The Darknodes will watch for this event to\\n        // transfer the user the Bitcoin.\\n        registry.getGatewayBySymbol(\\\"BTC\\\").burn(_to, amountClaimable);\\n    }\\n\\n    /// @notice Retrieves the claimable amount for a given beneficiary.\\n    /// @param _to The Ethereum address of the beneficiary.\\n    function calculateClaimable(address _to)\\n        public\\n        view\\n        returns (uint256, uint256)\\n    {\\n        VestingSchedule storage schedule = schedules[_to];\\n\\n        // Return if the vesting schedule does not exist or has not yet started.\\n        if (schedule.amount == 0 || now < schedule.startTime) {\\n            return (0, 0);\\n        }\\n\\n        // Calculate the months elapsed since the start of the vesting period.\\n        uint256 elapsedTime = now.sub(schedule.startTime);\\n        uint256 elapsedMonths = elapsedTime.div(SECONDS_PER_MONTH);\\n\\n        // Calculate the months elapsed and amount claimable since the last\\n        // claim attempt.\\n        uint256 monthsClaimable =\\n            Math.min(schedule.duration, elapsedMonths).sub(\\n                schedule.monthsClaimed\\n            );\\n        uint256 amountClaimable =\\n            schedule.amount.mul(monthsClaimable).div(schedule.duration);\\n\\n        return (monthsClaimable, amountClaimable);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/math/Math.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Gateway/adapters/GenericAdapter.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.17;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/ownership/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC777/IERC777Recipient.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC777/IERC777.sol\\\";\\n\\nimport \\\"../interfaces/IGateway.sol\\\";\\nimport \\\"../interfaces/IGatewayRegistry.sol\\\";\\nimport \\\"./IERC1155/IERC1155.sol\\\";\\nimport \\\"./IERC1155/IERC1155Receiver.sol\\\";\\n\\ncontract GenericAdapter is\\n    Ownable,\\n    IERC721Receiver,\\n    IERC777Recipient,\\n    IERC1155Receiver\\n{\\n    using SafeMath for uint256;\\n\\n    IGatewayRegistry public registry;\\n\\n    constructor(IGatewayRegistry _registry) public {\\n        Ownable.initialize(msg.sender);\\n        registry = _registry;\\n    }\\n\\n    function directMint(\\n        // Payload\\n        string calldata _symbol,\\n        address _account,\\n        uint256 _submitterFee,\\n        // Required\\n        uint256 _amount,\\n        bytes32 _nHash,\\n        bytes calldata _sig\\n    ) external {\\n        // Allow the account to submit without a fee.\\n        if (_account == msg.sender) {\\n            _submitterFee = 0;\\n        }\\n\\n        // Calculate the payload hash for the first six parameters.\\n        bytes32 payloadHash =\\n            keccak256(abi.encode(_symbol, _account, _submitterFee));\\n\\n        // Call `mint` on the Gateway contract.\\n        uint256 amount =\\n            registry.getGatewayBySymbol(_symbol).mint(\\n                payloadHash,\\n                _amount,\\n                _nHash,\\n                _sig\\n            );\\n\\n        IERC20 token = registry.getTokenBySymbol(_symbol);\\n        token.transfer(_account, amount.sub(_submitterFee));\\n\\n        // Pay fee as last step.\\n        if (_submitterFee > 0) {\\n            token.transfer(msg.sender, _submitterFee);\\n        }\\n    }\\n\\n    // Track the caller in case there's ERC721\\n    address currentAccount;\\n\\n    function genericCall(\\n        // Payload\\n        string calldata _symbol,\\n        address _account,\\n        address _contract,\\n        bytes calldata _contractParams,\\n        IERC20[] calldata _refundTokens,\\n        uint256 _submitterFee,\\n        // Required\\n        uint256 _amount,\\n        bytes32 _nHash,\\n        bytes calldata _sig\\n    ) external {\\n        address previousAccount = currentAccount;\\n        currentAccount = _account;\\n\\n        // Split up to work around stack-too-deep errors.\\n        // The function body is spread across the following three functions:\\n        // * _genericCallInner,\\n        // * _returnReceivedTokens,\\n        // * _mintAndCall\\n        _genericCallInner(\\n            _symbol,\\n            _account,\\n            _contract,\\n            _contractParams,\\n            _refundTokens,\\n            _submitterFee,\\n            _amount,\\n            _nHash,\\n            _sig\\n        );\\n\\n        // Reset `currentAccount`.\\n        currentAccount = previousAccount;\\n    }\\n\\n    function _genericCallInner(\\n        // Payload\\n        string memory _symbol,\\n        address _account,\\n        address _contract,\\n        bytes memory _contractParams,\\n        IERC20[] memory _refundTokens,\\n        uint256 _submitterFee,\\n        // Required\\n        uint256 _amount,\\n        bytes32 _nHash,\\n        bytes memory _sig\\n    ) internal {\\n        // Allow the account to submit without a fee.\\n        if (_account == msg.sender) {\\n            _submitterFee = 0;\\n        }\\n\\n        // Calculate the payload hash for the first six parameters.\\n        bytes32 payloadHash =\\n            keccak256(\\n                abi.encode(\\n                    _symbol,\\n                    _account,\\n                    _contract,\\n                    _contractParams,\\n                    _refundTokens,\\n                    _submitterFee\\n                )\\n            );\\n\\n        _mintAndCall(\\n            payloadHash,\\n            _symbol,\\n            _contract,\\n            _contractParams,\\n            _submitterFee,\\n            _amount,\\n            _nHash,\\n            _sig\\n        );\\n\\n        _returnReceivedTokens(_symbol, _refundTokens, _submitterFee);\\n    }\\n\\n    function _returnReceivedTokens(\\n        string memory _symbol,\\n        IERC20[] memory _refundTokens,\\n        uint256 _submitterFee\\n    ) internal {\\n        IERC20 token = registry.getTokenBySymbol(_symbol);\\n\\n        // The user must specify which tokens may potentially be recieved during\\n        // the contract call. Note that if one of the matched refund tokens\\n        // match `token` and a fee is paid out later on, the transaction will\\n        // revert.\\n        for (uint256 i = 0; i < _refundTokens.length; i++) {\\n            IERC20 refundToken = IERC20(_refundTokens[i]);\\n            uint256 refundBalance = refundToken.balanceOf(address(this));\\n            if (refundBalance > 0) {\\n                refundToken.transfer(currentAccount, refundBalance);\\n            }\\n        }\\n\\n        // Return any remaining `token` balance.\\n        uint256 tokenBalance = token.balanceOf(address(this));\\n        if (tokenBalance > _submitterFee) {\\n            token.transfer(currentAccount, tokenBalance.sub(_submitterFee));\\n        }\\n\\n        // Remain any remaining ETH balance.\\n        uint256 ethBalance = address(this).balance;\\n        if (ethBalance > 0) {\\n            (bool success, ) = currentAccount.call.value(ethBalance)(\\\"\\\");\\n            require(success);\\n        }\\n\\n        // Pay fee as last step.\\n        if (_submitterFee > 0) {\\n            token.transfer(msg.sender, _submitterFee);\\n        }\\n    }\\n\\n    function _mintAndCall(\\n        bytes32 payloadHash,\\n        string memory _symbol,\\n        address _contract,\\n        bytes memory _contractParams,\\n        uint256 _submitterFee,\\n        uint256 _amount,\\n        bytes32 _nHash,\\n        bytes memory _sig\\n    ) internal {\\n        // Call `mint` on the Gateway contract.\\n        uint256 amount =\\n            registry.getGatewayBySymbol(_symbol).mint(\\n                payloadHash,\\n                _amount,\\n                _nHash,\\n                _sig\\n            );\\n\\n        IERC20 token = registry.getTokenBySymbol(_symbol);\\n\\n        // Approval the amount excluding the fee.\\n        uint256 oldApproval = token.allowance(address(this), _contract);\\n        token.approve(_contract, oldApproval.add(amount.sub(_submitterFee)));\\n\\n        // Call contract with the contract parameters.\\n        arbitraryCall(_contract, _contractParams);\\n\\n        // Revoke approval.\\n        token.approve(_contract, oldApproval);\\n    }\\n\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public returns (bytes4) {\\n        // Forward on to current account.\\n        IERC721(msg.sender).safeTransferFrom(\\n            address(this),\\n            currentAccount,\\n            tokenId,\\n            data\\n        );\\n        return this.onERC721Received.selector;\\n    }\\n\\n    function tokensReceived(\\n        address,\\n        address,\\n        address,\\n        uint256 amount,\\n        bytes memory userData,\\n        bytes memory\\n    ) public {\\n        IERC777(msg.sender).send(currentAccount, amount, userData);\\n    }\\n\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4) {\\n        IERC1155(msg.sender).safeTransferFrom(\\n            address(this),\\n            currentAccount,\\n            id,\\n            value,\\n            data\\n        );\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4) {\\n        IERC1155(msg.sender).safeBatchTransferFrom(\\n            address(this),\\n            currentAccount,\\n            ids,\\n            values,\\n            data\\n        );\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n\\n    // Allow the owner to recover tokens and collectibles stuck in the contract.\\n    // This contract is not meant to hold funds.\\n    function _recover(address _contract, bytes calldata _contractParams)\\n        external\\n        onlyOwner\\n    {\\n        arbitraryCall(_contract, _contractParams);\\n    }\\n\\n    function arbitraryCall(address _contract, bytes memory _contractParams)\\n        internal\\n    {\\n        (bool success, bytes memory result) = _contract.call(_contractParams);\\n        if (!success) {\\n            // Check if the call result was too short to be a revert reason.\\n            if (result.length < 68) {\\n                revert(\\n                    \\\"GenericAdapter: contract call failed without revert reason\\\"\\n                );\\n            }\\n            // Return the call's revert reason.\\n            assembly {\\n                let ptr := mload(0x40)\\n                let size := returndatasize\\n                returndatacopy(ptr, 0, size)\\n                revert(ptr, size)\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ncontract IERC721Receiver {\\n    /**\\n     * @notice Handle the receipt of an NFT\\n     * @dev The ERC721 smart contract calls this function on the recipient\\n     * after a {IERC721-safeTransferFrom}. This function MUST return the function selector,\\n     * otherwise the caller will revert the transaction. The selector to be\\n     * returned can be obtained as `this.onERC721Received.selector`. This\\n     * function MAY throw to revert and reject the transfer.\\n     * Note: the ERC721 contract address is always the message sender.\\n     * @param operator The address which called `safeTransferFrom` function\\n     * @param from The address which previously owned the token\\n     * @param tokenId The NFT identifier which is being transferred\\n     * @param data Additional data with no specified format\\n     * @return bytes4 `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes memory data)\\n    public returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"@openzeppelin/upgrades/contracts/Initializable.sol\\\";\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ncontract IERC721 is Initializable, IERC165 {\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of NFTs in `owner`'s account.\\n     */\\n    function balanceOf(address owner) public view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the NFT specified by `tokenId`.\\n     */\\n    function ownerOf(uint256 tokenId) public view returns (address owner);\\n\\n    /**\\n     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\\n     * another (`to`).\\n     *\\n     *\\n     *\\n     * Requirements:\\n     * - `from`, `to` cannot be zero.\\n     * - `tokenId` must be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this\\n     * NFT by either {approve} or {setApprovalForAll}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public;\\n    /**\\n     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Requirements:\\n     * - If the caller is not `from`, it must be approved to move this NFT by\\n     * either {approve} or {setApprovalForAll}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public;\\n    function approve(address to, uint256 tokenId) public;\\n    function getApproved(uint256 tokenId) public view returns (address operator);\\n\\n    function setApprovalForAll(address operator, bool _approved) public;\\n    function isApprovedForAll(address owner, address operator) public view returns (bool);\\n\\n\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/token/ERC777/IERC777Recipient.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Interface of the ERC777TokensRecipient standard as defined in the EIP.\\n *\\n * Accounts can be notified of {IERC777} tokens being sent to them by having a\\n * contract implement this interface (contract holders can be their own\\n * implementer) and registering it on the\\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 global registry].\\n *\\n * See {IERC1820Registry} and {ERC1820Implementer}.\\n */\\ninterface IERC777Recipient {\\n    /**\\n     * @dev Called by an {IERC777} token contract whenever tokens are being\\n     * moved or created into a registered account (`to`). The type of operation\\n     * is conveyed by `from` being the zero address or not.\\n     *\\n     * This call occurs _after_ the token contract's state is updated, so\\n     * {IERC777-balanceOf}, etc., can be used to query the post-operation state.\\n     *\\n     * This function may revert to prevent the operation from being executed.\\n     */\\n    function tokensReceived(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes calldata userData,\\n        bytes calldata operatorData\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/token/ERC777/IERC777.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Interface of the ERC777Token standard as defined in the EIP.\\n *\\n * This contract uses the\\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 registry standard] to let\\n * token holders and recipients react to token movements by using setting implementers\\n * for the associated interfaces in said registry. See {IERC1820Registry} and\\n * {ERC1820Implementer}.\\n */\\ninterface IERC777 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the smallest part of the token that is not divisible. This\\n     * means all token operations (creation, movement and destruction) must have\\n     * amounts that are a multiple of this number.\\n     *\\n     * For most token contracts, this value will equal 1.\\n     */\\n    function granularity() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by an account (`owner`).\\n     */\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * If send or receive hooks are registered for the caller and `recipient`,\\n     * the corresponding functions will be called with `data` and empty\\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\\n     *\\n     * Emits a {Sent} event.\\n     *\\n     * Requirements\\n     *\\n     * - the caller must have at least `amount` tokens.\\n     * - `recipient` cannot be the zero address.\\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\\n     * interface.\\n     */\\n    function send(address recipient, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from the caller's account, reducing the\\n     * total supply.\\n     *\\n     * If a send hook is registered for the caller, the corresponding function\\n     * will be called with `data` and empty `operatorData`. See {IERC777Sender}.\\n     *\\n     * Emits a {Burned} event.\\n     *\\n     * Requirements\\n     *\\n     * - the caller must have at least `amount` tokens.\\n     */\\n    function burn(uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev Returns true if an account is an operator of `tokenHolder`.\\n     * Operators can send and burn tokens on behalf of their owners. All\\n     * accounts are their own operator.\\n     *\\n     * See {operatorSend} and {operatorBurn}.\\n     */\\n    function isOperatorFor(address operator, address tokenHolder) external view returns (bool);\\n\\n    /**\\n     * @dev Make an account an operator of the caller.\\n     *\\n     * See {isOperatorFor}.\\n     *\\n     * Emits an {AuthorizedOperator} event.\\n     *\\n     * Requirements\\n     *\\n     * - `operator` cannot be calling address.\\n     */\\n    function authorizeOperator(address operator) external;\\n\\n    /**\\n     * @dev Make an account an operator of the caller.\\n     *\\n     * See {isOperatorFor} and {defaultOperators}.\\n     *\\n     * Emits a {RevokedOperator} event.\\n     *\\n     * Requirements\\n     *\\n     * - `operator` cannot be calling address.\\n     */\\n    function revokeOperator(address operator) external;\\n\\n    /**\\n     * @dev Returns the list of default operators. These accounts are operators\\n     * for all token holders, even if {authorizeOperator} was never called on\\n     * them.\\n     *\\n     * This list is immutable, but individual holders may revoke these via\\n     * {revokeOperator}, in which case {isOperatorFor} will return false.\\n     */\\n    function defaultOperators() external view returns (address[] memory);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient`. The caller must\\n     * be an operator of `sender`.\\n     *\\n     * If send or receive hooks are registered for `sender` and `recipient`,\\n     * the corresponding functions will be called with `data` and\\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\\n     *\\n     * Emits a {Sent} event.\\n     *\\n     * Requirements\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `sender` must have at least `amount` tokens.\\n     * - the caller must be an operator for `sender`.\\n     * - `recipient` cannot be the zero address.\\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\\n     * interface.\\n     */\\n    function operatorSend(\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n        bytes calldata data,\\n        bytes calldata operatorData\\n    ) external;\\n\\n    /**\\n     * @dev Destoys `amount` tokens from `account`, reducing the total supply.\\n     * The caller must be an operator of `account`.\\n     *\\n     * If a send hook is registered for `account`, the corresponding function\\n     * will be called with `data` and `operatorData`. See {IERC777Sender}.\\n     *\\n     * Emits a {Burned} event.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     * - the caller must be an operator for `account`.\\n     */\\n    function operatorBurn(\\n        address account,\\n        uint256 amount,\\n        bytes calldata data,\\n        bytes calldata operatorData\\n    ) external;\\n\\n    event Sent(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256 amount,\\n        bytes data,\\n        bytes operatorData\\n    );\\n\\n    event Minted(address indexed operator, address indexed to, uint256 amount, bytes data, bytes operatorData);\\n\\n    event Burned(address indexed operator, address indexed from, uint256 amount, bytes data, bytes operatorData);\\n\\n    event AuthorizedOperator(address indexed operator, address indexed tokenHolder);\\n\\n    event RevokedOperator(address indexed operator, address indexed tokenHolder);\\n}\\n\"\r\n    },\r\n    \"contracts/Gateway/interfaces/IGatewayRegistry.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.17;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./IGateway.sol\\\";\\n\\n/// @notice GatewayRegistry is a mapping from assets to their associated\\n/// RenERC20 and Gateway contracts.\\ninterface IGatewayRegistry {\\n    /// @dev The symbol is included twice because strings have to be hashed\\n    /// first in order to be used as a log index/topic.\\n    event LogGatewayRegistered(\\n        string _symbol,\\n        string indexed _indexedSymbol,\\n        address indexed _tokenAddress,\\n        address indexed _gatewayAddress\\n    );\\n    event LogGatewayDeregistered(\\n        string _symbol,\\n        string indexed _indexedSymbol,\\n        address indexed _tokenAddress,\\n        address indexed _gatewayAddress\\n    );\\n    event LogGatewayUpdated(\\n        address indexed _tokenAddress,\\n        address indexed _currentGatewayAddress,\\n        address indexed _newGatewayAddress\\n    );\\n\\n    /// @dev To get all the registered gateways use count = 0.\\n    function getGateways(address _start, uint256 _count)\\n        external\\n        view\\n        returns (address[] memory);\\n\\n    /// @dev To get all the registered RenERC20s use count = 0.\\n    function getRenTokens(address _start, uint256 _count)\\n        external\\n        view\\n        returns (address[] memory);\\n\\n    /// @notice Returns the Gateway contract for the given RenERC20\\n    ///         address.\\n    ///\\n    /// @param _tokenAddress The address of the RenERC20 contract.\\n    function getGatewayByToken(address _tokenAddress)\\n        external\\n        view\\n        returns (IGateway);\\n\\n    /// @notice Returns the Gateway contract for the given RenERC20\\n    ///         symbol.\\n    ///\\n    /// @param _tokenSymbol The symbol of the RenERC20 contract.\\n    function getGatewayBySymbol(string calldata _tokenSymbol)\\n        external\\n        view\\n        returns (IGateway);\\n\\n    /// @notice Returns the RenERC20 address for the given token symbol.\\n    ///\\n    /// @param _tokenSymbol The symbol of the RenERC20 contract to\\n    ///        lookup.\\n    function getTokenBySymbol(string calldata _tokenSymbol)\\n        external\\n        view\\n        returns (IERC20);\\n}\\n\"\r\n    },\r\n    \"contracts/Gateway/adapters/IERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.5.17;\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256 id,\\n        uint256 value\\n    );\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(\\n        address indexed account,\\n        address indexed operator,\\n        bool approved\\n    );\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator)\\n        external\\n        view\\n        returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/Gateway/adapters/IERC1155/IERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.5.17;\\n\\n/**\\n * _Available since v3.1._\\n */\\ninterface IERC1155Receiver {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/introspection/IERC165.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/Gateway/adapters/BasicAdapter.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.17;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/GSN/GSNRecipient.sol\\\";\\n\\nimport \\\"../interfaces/IGateway.sol\\\";\\nimport \\\"../interfaces/IGatewayRegistry.sol\\\";\\n\\ncontract BasicAdapter is GSNRecipient {\\n    IGatewayRegistry registry;\\n\\n    constructor(IGatewayRegistry _registry) public {\\n        GSNRecipient.initialize();\\n        registry = _registry;\\n    }\\n\\n    function mint(\\n        // Payload\\n        string calldata _symbol,\\n        address _recipient,\\n        // Required\\n        uint256 _amount,\\n        bytes32 _nHash,\\n        bytes calldata _sig\\n    ) external {\\n        bytes32 payloadHash = keccak256(abi.encode(_symbol, _recipient));\\n        uint256 amount = registry.getGatewayBySymbol(_symbol).mint(\\n            payloadHash,\\n            _amount,\\n            _nHash,\\n            _sig\\n        );\\n        registry.getTokenBySymbol(_symbol).transfer(_recipient, amount);\\n    }\\n\\n    function burn(\\n        string calldata _symbol,\\n        bytes calldata _to,\\n        uint256 _amount\\n    ) external {\\n        require(\\n            registry.getTokenBySymbol(_symbol).transferFrom(\\n                _msgSender(),\\n                address(this),\\n                _amount\\n            ),\\n            \\\"token transfer failed\\\"\\n        );\\n        registry.getGatewayBySymbol(_symbol).burn(_to, _amount);\\n    }\\n\\n    // GSN functions\\n\\n    function acceptRelayedCall(\\n        address relay,\\n        address from,\\n        bytes calldata encodedFunction,\\n        uint256 transactionFee,\\n        uint256 gasPrice,\\n        uint256 gasLimit,\\n        uint256 nonce,\\n        bytes calldata approvalData,\\n        uint256 maxPossibleCharge\\n    ) external view returns (uint256, bytes memory) {\\n        return _approveRelayedCall();\\n    }\\n\\n    // We won't do any pre or post processing, so leave _preRelayedCall and _postRelayedCall empty\\n    function _preRelayedCall(bytes memory context) internal returns (bytes32) {}\\n\\n    function _postRelayedCall(\\n        bytes memory context,\\n        bool,\\n        uint256 actualCharge,\\n        bytes32\\n    ) internal {}\\n}\\n\"\r\n    },\r\n    \"contracts/Gateway/adapters/CallAndRefund.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.17;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./GenericAdapter.sol\\\";\\n\\ninterface UniswapRouter {\\n    function WETH() external returns (address);\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n}\\n\\ncontract CallAndRefund {\\n    GenericAdapter public genericAdapter;\\n    UniswapRouter public uniswapRouter;\\n    IGatewayRegistry public registry;\\n\\n    constructor(\\n        IGatewayRegistry _registry,\\n        GenericAdapter _genericAdapter,\\n        UniswapRouter _uniswapRouter\\n    ) public {\\n        registry = _registry;\\n        genericAdapter = _genericAdapter;\\n        uniswapRouter = _uniswapRouter;\\n    }\\n\\n    modifier withGasRefund() {\\n        uint256 remainingGasStart = gasleft();\\n\\n        _;\\n\\n        uint256 ethBalance = address(this).balance;\\n        uint256 remainingGasEnd = gasleft();\\n        uint256 usedGas = remainingGasStart - remainingGasEnd;\\n        // Add intrinsic gas and transfer gas. Need to account for gas stipend as well.\\n        usedGas += 21000 + 9700;\\n        // Possibly need to check max gasprice and usedGas here to limit possibility for abuse.\\n        uint256 gasCost = usedGas * tx.gasprice;\\n        require(ethBalance >= gasCost, \\\"GaslessWithUniswap: gas exceeds fee\\\");\\n        // Refund gas cost\\n        msg.sender.transfer(ethBalance);\\n    }\\n\\n    // Allow this contract to receive ETH.\\n    function receive() external payable {}\\n\\n    function convertAllToEth(IERC20 token) public payable {\\n        address[] memory path = new address[](2);\\n        path[0] = address(token);\\n        path[1] = uniswapRouter.WETH();\\n\\n        uint256 tokenBalance = token.balanceOf(address(this));\\n        token.approve(address(uniswapRouter), tokenBalance);\\n        uniswapRouter.swapExactTokensForETH(\\n            tokenBalance,\\n            0,\\n            path,\\n            address(this),\\n            block.timestamp\\n        );\\n    }\\n\\n    function callAndRefund(\\n        IERC20 _token,\\n        address _contract,\\n        bytes calldata _contractParams\\n    ) external withGasRefund {\\n        arbitraryCall(_contract, _contractParams);\\n        convertAllToEth(_token);\\n    }\\n\\n    function arbitraryCall(address _contract, bytes memory _contractParams)\\n        internal\\n    {\\n        (bool success, bytes memory result) = _contract.call(_contractParams);\\n        if (!success) {\\n            // Check if the call result was too short to be a revert reason.\\n            if (result.length < 68) {\\n                revert(\\n                    \\\"GenericAdapter: contract call failed without revert reason\\\"\\n                );\\n            }\\n            // Return the call's revert reason.\\n            assembly {\\n                let ptr := mload(0x40)\\n                let size := returndatasize\\n                returndatacopy(ptr, 0, size)\\n                revert(ptr, size)\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/test/Claimer.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.17;\\n\\nimport \\\"../Governance/Claimable.sol\\\";\\n\\ncontract Claimer {\\n    Claimable child;\\n\\n    constructor(Claimable _child) public {\\n        child = _child;\\n    }\\n\\n    function transferStoreOwnership(address _newOwner) external {\\n        child.transferOwnership(_newOwner);\\n    }\\n\\n    function claimStoreOwnership() external {\\n        child.claimOwnership();\\n    }\\n\\n    function claimTokenOwnership() public {\\n        child.claimOwnership();\\n    }\\n\\n    function transferTokenOwnership(address _newOwner) public {\\n        child.transferOwnership(address(_newOwner));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/test/StringTest.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.17;\\n\\nimport {String} from \\\"../libraries/String.sol\\\";\\n\\n/// @dev StringTest exposes the internal functions of String.sol.\\ncontract StringTest {\\n    function fromUint(uint256 _i) public pure returns (string memory) {\\n        return String.fromUint(_i);\\n    }\\n\\n    function fromBytes32(bytes32 _value) public pure returns (string memory) {\\n        return String.fromBytes32(_value);\\n    }\\n\\n    function fromAddress(address _addr) public pure returns (string memory) {\\n        return String.fromAddress(_addr);\\n    }\\n\\n    function add4(\\n        string memory a,\\n        string memory b,\\n        string memory c,\\n        string memory d\\n    ) public pure returns (string memory) {\\n        return String.add8(a, b, c, d, \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/test/LinkedListTest.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.17;\\n\\nimport \\\"../libraries/LinkedList.sol\\\";\\n\\n/// @notice A token that exposes the LinkedList library for testing.\\ncontract LinkedListTest {\\n    using LinkedList for LinkedList.List;\\n\\n    LinkedList.List private ll;\\n\\n    function isInList(address node) public view returns (bool) {\\n        return ll.isInList(node);\\n    }\\n\\n    function next(address node) public view returns (address) {\\n        return ll.next(node);\\n    }\\n\\n    function previous(address node) public view returns (address) {\\n        return ll.previous(node);\\n    }\\n\\n    function begin() public view returns (address) {\\n        return ll.begin();\\n    }\\n\\n    function end() public view returns (address) {\\n        return ll.end();\\n    }\\n\\n    function insertBefore(address target, address newNode) public {\\n        ll.insertBefore(target, newNode);\\n    }\\n\\n    function insertAfter(address target, address newNode) public {\\n        ll.insertAfter(target, newNode);\\n    }\\n\\n    function remove(address node) public {\\n        ll.remove(node);\\n    }\\n\\n    function prepend(address newNode) public {\\n        ll.prepend(newNode);\\n    }\\n\\n    function append(address newNode) public {\\n        ll.append(newNode);\\n    }\\n\\n    function swap(address node1, address node2) public {\\n        ll.swap(node1, node2);\\n    }\\n\\n    function elements(address _start, uint256 _count)\\n        public\\n        view\\n        returns (address[] memory)\\n    {\\n        return ll.elements(_start, _count);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/migrations/Migrations.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.17;\\n\\ncontract Migrations {\\n    address public owner;\\n    uint256 public last_completed_migration;\\n\\n    modifier restricted() {\\n        if (msg.sender == owner) {\\n            _;\\n        }\\n    }\\n\\n    constructor() public {\\n        owner = msg.sender;\\n    }\\n\\n    function setCompleted(uint256 completed) public restricted {\\n        last_completed_migration = completed;\\n    }\\n\\n    function upgrade(address new_address) public restricted {\\n        Migrations upgraded = Migrations(new_address);\\n        upgraded.setCompleted(last_completed_migration);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/test/ForceSend.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.17;\\n\\ncontract ForceSend {\\n    function send(address payable recipient) public payable {\\n        selfdestruct(recipient);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_logic\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_logic\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "MintGatewayProxy", "CompilerVersion": "v0.5.17+commit.d19bba13", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "1", "Implementation": "0x3799006a87fde3ccfc7666b3e6553b03ed341c2f", "SwarmSource": ""}