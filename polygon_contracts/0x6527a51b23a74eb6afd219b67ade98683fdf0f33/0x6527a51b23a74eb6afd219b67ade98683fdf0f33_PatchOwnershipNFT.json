{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"contracts/interfaces/ERC165Spec.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.7;\\r\\n\\r\\n/**\\r\\n * @title ERC-165 Standard Interface Detection\\r\\n *\\r\\n * @dev Interface of the ERC165 standard, as defined in the\\r\\n *       https://eips.ethereum.org/EIPS/eip-165[EIP].\\r\\n *\\r\\n * @dev Implementers can declare support of contract interfaces,\\r\\n *      which can then be queried by others.\\r\\n *\\r\\n * @author Christian Reitwie\u00dfner, Nick Johnson, Fabian Vogelsteller, Jordi Baylina, Konrad Feldmeier, William Entriken\\r\\n */\\r\\ninterface ERC165 {\\r\\n\\t/**\\r\\n\\t * @notice Query if a contract implements an interface\\r\\n\\t *\\r\\n\\t * @dev Interface identification is specified in ERC-165.\\r\\n\\t *      This function uses less than 30,000 gas.\\r\\n\\t *\\r\\n\\t * @param interfaceID The interface identifier, as specified in ERC-165\\r\\n\\t * @return `true` if the contract implements `interfaceID` and\\r\\n\\t *      `interfaceID` is not 0xffffffff, `false` otherwise\\r\\n\\t */\\r\\n\\tfunction supportsInterface(bytes4 interfaceID) external view returns (bool);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/ERC721Spec.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.7;\\r\\n\\r\\nimport \\\"./ERC165Spec.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title ERC-721 Non-Fungible Token Standard\\r\\n *\\r\\n * @notice See https://eips.ethereum.org/EIPS/eip-721\\r\\n *\\r\\n * @dev Solidity issue #3412: The ERC721 interfaces include explicit mutability guarantees for each function.\\r\\n *      Mutability guarantees are, in order weak to strong: payable, implicit nonpayable, view, and pure.\\r\\n *      Implementation MUST meet the mutability guarantee in this interface and MAY meet a stronger guarantee.\\r\\n *      For example, a payable function in this interface may be implemented as nonpayable\\r\\n *      (no state mutability specified) in implementing contract.\\r\\n *      It is expected a later Solidity release will allow stricter contract to inherit from this interface,\\r\\n *      but current workaround is that we edit this interface to add stricter mutability before inheriting:\\r\\n *      we have removed all \\\"payable\\\" modifiers.\\r\\n *\\r\\n * @dev The ERC-165 identifier for this interface is 0x80ac58cd.\\r\\n *\\r\\n * @author William Entriken, Dieter Shirley, Jacob Evans, Nastassia Sachs\\r\\n */\\r\\ninterface ERC721 is ERC165 {\\r\\n\\t/// @dev This emits when ownership of any NFT changes by any mechanism.\\r\\n\\t///  This event emits when NFTs are created (`from` == 0) and destroyed\\r\\n\\t///  (`to` == 0). Exception: during contract creation, any number of NFTs\\r\\n\\t///  may be created and assigned without emitting Transfer. At the time of\\r\\n\\t///  any transfer, the approved address for that NFT (if any) is reset to none.\\r\\n\\tevent Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\\r\\n\\r\\n\\t/// @dev This emits when the approved address for an NFT is changed or\\r\\n\\t///  reaffirmed. The zero address indicates there is no approved address.\\r\\n\\t///  When a Transfer event emits, this also indicates that the approved\\r\\n\\t///  address for that NFT (if any) is reset to none.\\r\\n\\tevent Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\\r\\n\\r\\n\\t/// @dev This emits when an operator is enabled or disabled for an owner.\\r\\n\\t///  The operator can manage all NFTs of the owner.\\r\\n\\tevent ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\\r\\n\\r\\n\\t/// @notice Count all NFTs assigned to an owner\\r\\n\\t/// @dev NFTs assigned to the zero address are considered invalid, and this\\r\\n\\t///  function throws for queries about the zero address.\\r\\n\\t/// @param _owner An address for whom to query the balance\\r\\n\\t/// @return The number of NFTs owned by `_owner`, possibly zero\\r\\n\\tfunction balanceOf(address _owner) external view returns (uint256);\\r\\n\\r\\n\\t/// @notice Find the owner of an NFT\\r\\n\\t/// @dev NFTs assigned to zero address are considered invalid, and queries\\r\\n\\t///  about them do throw.\\r\\n\\t/// @param _tokenId The identifier for an NFT\\r\\n\\t/// @return The address of the owner of the NFT\\r\\n\\tfunction ownerOf(uint256 _tokenId) external view returns (address);\\r\\n\\r\\n\\t/// @notice Transfers the ownership of an NFT from one address to another address\\r\\n\\t/// @dev Throws unless `msg.sender` is the current owner, an authorized\\r\\n\\t///  operator, or the approved address for this NFT. Throws if `_from` is\\r\\n\\t///  not the current owner. Throws if `_to` is the zero address. Throws if\\r\\n\\t///  `_tokenId` is not a valid NFT. When transfer is complete, this function\\r\\n\\t///  checks if `_to` is a smart contract (code size > 0). If so, it calls\\r\\n\\t///  `onERC721Received` on `_to` and throws if the return value is not\\r\\n\\t///  `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`.\\r\\n\\t/// @param _from The current owner of the NFT\\r\\n\\t/// @param _to The new owner\\r\\n\\t/// @param _tokenId The NFT to transfer\\r\\n\\t/// @param _data Additional data with no specified format, sent in call to `_to`\\r\\n\\tfunction safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes calldata _data) external /*payable*/;\\r\\n\\r\\n\\t/// @notice Transfers the ownership of an NFT from one address to another address\\r\\n\\t/// @dev This works identically to the other function with an extra data parameter,\\r\\n\\t///  except this function just sets data to \\\"\\\".\\r\\n\\t/// @param _from The current owner of the NFT\\r\\n\\t/// @param _to The new owner\\r\\n\\t/// @param _tokenId The NFT to transfer\\r\\n\\tfunction safeTransferFrom(address _from, address _to, uint256 _tokenId) external /*payable*/;\\r\\n\\r\\n\\t/// @notice Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE\\r\\n\\t///  TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE\\r\\n\\t///  THEY MAY BE PERMANENTLY LOST\\r\\n\\t/// @dev Throws unless `msg.sender` is the current owner, an authorized\\r\\n\\t///  operator, or the approved address for this NFT. Throws if `_from` is\\r\\n\\t///  not the current owner. Throws if `_to` is the zero address. Throws if\\r\\n\\t///  `_tokenId` is not a valid NFT.\\r\\n\\t/// @param _from The current owner of the NFT\\r\\n\\t/// @param _to The new owner\\r\\n\\t/// @param _tokenId The NFT to transfer\\r\\n\\tfunction transferFrom(address _from, address _to, uint256 _tokenId) external /*payable*/;\\r\\n\\r\\n\\t/// @notice Change or reaffirm the approved address for an NFT\\r\\n\\t/// @dev The zero address indicates there is no approved address.\\r\\n\\t///  Throws unless `msg.sender` is the current NFT owner, or an authorized\\r\\n\\t///  operator of the current owner.\\r\\n\\t/// @param _approved The new approved NFT controller\\r\\n\\t/// @param _tokenId The NFT to approve\\r\\n\\tfunction approve(address _approved, uint256 _tokenId) external /*payable*/;\\r\\n\\r\\n\\t/// @notice Enable or disable approval for a third party (\\\"operator\\\") to manage\\r\\n\\t///  all of `msg.sender`'s assets\\r\\n\\t/// @dev Emits the ApprovalForAll event. The contract MUST allow\\r\\n\\t///  multiple operators per owner.\\r\\n\\t/// @param _operator Address to add to the set of authorized operators\\r\\n\\t/// @param _approved True if the operator is approved, false to revoke approval\\r\\n\\tfunction setApprovalForAll(address _operator, bool _approved) external;\\r\\n\\r\\n\\t/// @notice Get the approved address for a single NFT\\r\\n\\t/// @dev Throws if `_tokenId` is not a valid NFT.\\r\\n\\t/// @param _tokenId The NFT to find the approved address for\\r\\n\\t/// @return The approved address for this NFT, or the zero address if there is none\\r\\n\\tfunction getApproved(uint256 _tokenId) external view returns (address);\\r\\n\\r\\n\\t/// @notice Query if an address is an authorized operator for another address\\r\\n\\t/// @param _owner The address that owns the NFTs\\r\\n\\t/// @param _operator The address that acts on behalf of the owner\\r\\n\\t/// @return True if `_operator` is an approved operator for `_owner`, false otherwise\\r\\n\\tfunction isApprovedForAll(address _owner, address _operator) external view returns (bool);\\r\\n}\\r\\n\\r\\n/// @dev Note: the ERC-165 identifier for this interface is 0x150b7a02.\\r\\ninterface ERC721TokenReceiver {\\r\\n\\t/// @notice Handle the receipt of an NFT\\r\\n\\t/// @dev The ERC721 smart contract calls this function on the recipient\\r\\n\\t///  after a `transfer`. This function MAY throw to revert and reject the\\r\\n\\t///  transfer. Return of other than the magic value MUST result in the\\r\\n\\t///  transaction being reverted.\\r\\n\\t///  Note: the contract address is always the message sender.\\r\\n\\t/// @param _operator The address which called `safeTransferFrom` function\\r\\n\\t/// @param _from The address which previously owned the token\\r\\n\\t/// @param _tokenId The NFT identifier which is being transferred\\r\\n\\t/// @param _data Additional data with no specified format\\r\\n\\t/// @return `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`\\r\\n\\t///  unless throwing\\r\\n\\tfunction onERC721Received(address _operator, address _from, uint256 _tokenId, bytes calldata _data) external returns(bytes4);\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\r\\n *\\r\\n * @notice See https://eips.ethereum.org/EIPS/eip-721\\r\\n *\\r\\n * @dev The ERC-165 identifier for this interface is 0x5b5e139f.\\r\\n *\\r\\n * @author William Entriken, Dieter Shirley, Jacob Evans, Nastassia Sachs\\r\\n */\\r\\ninterface ERC721Metadata is ERC721 {\\r\\n\\t/// @notice A descriptive name for a collection of NFTs in this contract\\r\\n\\tfunction name() external view returns (string memory _name);\\r\\n\\r\\n\\t/// @notice An abbreviated name for NFTs in this contract\\r\\n\\tfunction symbol() external view returns (string memory _symbol);\\r\\n\\r\\n\\t/// @notice A distinct Uniform Resource Identifier (URI) for a given asset.\\r\\n\\t/// @dev Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC\\r\\n\\t///  3986. The URI may point to a JSON file that conforms to the \\\"ERC721\\r\\n\\t///  Metadata JSON Schema\\\".\\r\\n\\tfunction tokenURI(uint256 _tokenId) external view returns (string memory);\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\r\\n *\\r\\n * @notice See https://eips.ethereum.org/EIPS/eip-721\\r\\n *\\r\\n * @dev The ERC-165 identifier for this interface is 0x780e9d63.\\r\\n *\\r\\n * @author William Entriken, Dieter Shirley, Jacob Evans, Nastassia Sachs\\r\\n */\\r\\ninterface ERC721Enumerable is ERC721 {\\r\\n\\t/// @notice Count NFTs tracked by this contract\\r\\n\\t/// @return A count of valid NFTs tracked by this contract, where each one of\\r\\n\\t///  them has an assigned and queryable owner not equal to the zero address\\r\\n\\tfunction totalSupply() external view returns (uint256);\\r\\n\\r\\n\\t/// @notice Enumerate valid NFTs\\r\\n\\t/// @dev Throws if `_index` >= `totalSupply()`.\\r\\n\\t/// @param _index A counter less than `totalSupply()`\\r\\n\\t/// @return The token identifier for the `_index`th NFT,\\r\\n\\t///  (sort order not specified)\\r\\n\\tfunction tokenByIndex(uint256 _index) external view returns (uint256);\\r\\n\\r\\n\\t/// @notice Enumerate NFTs assigned to an owner\\r\\n\\t/// @dev Throws if `_index` >= `balanceOf(_owner)` or if\\r\\n\\t///  `_owner` is the zero address, representing invalid NFTs.\\r\\n\\t/// @param _owner An address where we are interested in NFTs owned by them\\r\\n\\t/// @param _index A counter less than `balanceOf(_owner)`\\r\\n\\t/// @return The token identifier for the `_index`th NFT assigned to `_owner`,\\r\\n\\t///   (sort order not specified)\\r\\n\\tfunction tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/TreeCoinERC721Spec.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.7;\\r\\n\\r\\n/**\\r\\n * @title Mintable ERC721\\r\\n *\\r\\n * @notice Defines mint capabilities for ERC721 tokens.\\r\\n *      This interface should be treated as a definition of what mintable means for ERC721\\r\\n *\\r\\n * @author Unblock Technolabs (Vijay Bhayani)\\r\\n */\\r\\ninterface MintableERC721 {\\r\\n\\t/**\\r\\n\\t * @notice Checks if specified token exists\\r\\n\\t *\\r\\n\\t * @dev Returns whether the specified token ID has an ownership\\r\\n\\t *      information associated with it\\r\\n\\t *\\r\\n\\t * @param _tokenId ID of the token to query existence for\\r\\n\\t * @return whether the token exists (true - exists, false - doesn't exist)\\r\\n\\t */\\r\\n\\tfunction exists(uint256 _tokenId) external view returns(bool);\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Creates new token with token ID specified\\r\\n\\t *      and assigns an ownership `_to` for this token\\r\\n\\t *\\r\\n\\t * @dev Unsafe: doesn't execute `onERC721Received` on the receiver.\\r\\n\\t *      Prefer the use of `saveMint` instead of `mint`.\\r\\n\\t *\\r\\n\\t * @dev Should have a restricted access handled by the implementation\\r\\n\\t *\\r\\n\\t * @param _to an address to mint token to\\r\\n\\t * @param _tokenId ID of the token to mint\\r\\n\\t */\\r\\n\\tfunction mint(address _to, uint256 _tokenId) external;\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Creates new tokens starting with token ID specified\\r\\n\\t *      and assigns an ownership `_to` for these tokens\\r\\n\\t *\\r\\n\\t * @dev Token IDs to be minted: [_tokenId, _tokenId + n)\\r\\n\\t *\\r\\n\\t * @dev n must be greater or equal 2: `n > 1`\\r\\n\\t *\\r\\n\\t * @dev Unsafe: doesn't execute `onERC721Received` on the receiver.\\r\\n\\t *      Prefer the use of `saveMintBatch` instead of `mintBatch`.\\r\\n\\t *\\r\\n\\t * @dev Should have a restricted access handled by the implementation\\r\\n\\t *\\r\\n\\t * @param _to an address to mint tokens to\\r\\n\\t * @param _tokenId ID of the first token to mint\\r\\n\\t * @param n how many tokens to mint, sequentially increasing the _tokenId\\r\\n\\t */\\r\\n\\tfunction mintBatch(address _to, uint256 _tokenId, uint256 n) external;\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Creates new token with token ID specified\\r\\n\\t *      and assigns an ownership `_to` for this token\\r\\n\\t *\\r\\n\\t * @dev Checks if `_to` is a smart contract (code size > 0). If so, it calls\\r\\n\\t *      `onERC721Received` on `_to` and throws if the return value is not\\r\\n\\t *      `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`.\\r\\n\\t *\\r\\n\\t * @dev Should have a restricted access handled by the implementation\\r\\n\\t *\\r\\n\\t * @param _to an address to mint token to\\r\\n\\t * @param _tokenId ID of the token to mint\\r\\n\\t */\\r\\n\\tfunction safeMint(address _to, uint256 _tokenId) external;\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Creates new token with token ID specified\\r\\n\\t *      and assigns an ownership `_to` for this token\\r\\n\\t *\\r\\n\\t * @dev Checks if `_to` is a smart contract (code size > 0). If so, it calls\\r\\n\\t *      `onERC721Received` on `_to` and throws if the return value is not\\r\\n\\t *      `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`.\\r\\n\\t *\\r\\n\\t * @dev Should have a restricted access handled by the implementation\\r\\n\\t *\\r\\n\\t * @param _to an address to mint token to\\r\\n\\t * @param _tokenId ID of the token to mint\\r\\n\\t * @param _data additional data with no specified format, sent in call to `_to`\\r\\n\\t */\\r\\n\\tfunction safeMint(address _to, uint256 _tokenId, bytes memory _data) external;\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Creates new tokens starting with token ID specified\\r\\n\\t *      and assigns an ownership `_to` for these tokens\\r\\n\\t *\\r\\n\\t * @dev Token IDs to be minted: [_tokenId, _tokenId + n)\\r\\n\\t *\\r\\n\\t * @dev n must be greater or equal 2: `n > 1`\\r\\n\\t *\\r\\n\\t * @dev Checks if `_to` is a smart contract (code size > 0). If so, it calls\\r\\n\\t *      `onERC721Received` on `_to` and throws if the return value is not\\r\\n\\t *      `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`.\\r\\n\\t *\\r\\n\\t * @dev Should have a restricted access handled by the implementation\\r\\n\\t *\\r\\n\\t * @param _to an address to mint token to\\r\\n\\t * @param _tokenId ID of the token to mint\\r\\n\\t * @param n how many tokens to mint, sequentially increasing the _tokenId\\r\\n\\t */\\r\\n\\tfunction safeMintBatch(address _to, uint256 _tokenId, uint256 n) external;\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Creates new tokens starting with token ID specified\\r\\n\\t *      and assigns an ownership `_to` for these tokens\\r\\n\\t *\\r\\n\\t * @dev Token IDs to be minted: [_tokenId, _tokenId + n)\\r\\n\\t *\\r\\n\\t * @dev n must be greater or equal 2: `n > 1`\\r\\n\\t *\\r\\n\\t * @dev Checks if `_to` is a smart contract (code size > 0). If so, it calls\\r\\n\\t *      `onERC721Received` on `_to` and throws if the return value is not\\r\\n\\t *      `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`.\\r\\n\\t *\\r\\n\\t * @dev Should have a restricted access handled by the implementation\\r\\n\\t *\\r\\n\\t * @param _to an address to mint token to\\r\\n\\t * @param _tokenId ID of the token to mint\\r\\n\\t * @param n how many tokens to mint, sequentially increasing the _tokenId\\r\\n\\t * @param _data additional data with no specified format, sent in call to `_to`\\r\\n\\t */\\r\\n\\tfunction safeMintBatch(address _to, uint256 _tokenId, uint256 n, bytes memory _data) external;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title Burnable ERC721\\r\\n *\\r\\n * @notice Defines burn capabilities for ERC721 tokens.\\r\\n *      This interface should be treated as a definition of what burnable means for ERC721\\r\\n *\\r\\n * @author Unblock Technolabs (Vijay Bhayani)\\r\\n */\\r\\ninterface BurnableERC721 {\\r\\n\\t/**\\r\\n\\t * @notice Destroys the token with token ID specified\\r\\n\\t *\\r\\n\\t * @dev Should be accessible publicly by token owners.\\r\\n\\t *      May have a restricted access handled by the implementation\\r\\n\\t *\\r\\n\\t * @param _tokenId ID of the token to burn\\r\\n\\t */\\r\\n\\tfunction burn(uint256 _tokenId) external;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title With Base URI\\r\\n *\\r\\n * @notice A marker interface for the contracts having the baseURI() function\\r\\n *      or public string variable named baseURI\\r\\n *      NFT implementations like TinyERC721, or ShortERC721 are example of such smart contracts\\r\\n *\\r\\n * @author Unblock Technolabs (Vijay Bhayani)\\r\\n */\\r\\ninterface WithBaseURI {\\r\\n\\t/**\\r\\n\\t * @dev Usually used in NFT implementations to construct ERC721Metadata.tokenURI as\\r\\n\\t *      `base URI + token ID` if token URI is not set (not present in `_tokenURIs` mapping)\\r\\n\\t *\\r\\n\\t * @dev For example, if base URI is https://api.com/token/, then token #1\\r\\n\\t *      will have an URI https://api.com/token/1\\r\\n\\t */\\r\\n\\tfunction baseURI() external view returns(string memory);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/lib/AddressUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.7;\\r\\n\\r\\n/**\\r\\n * @title Address Utils\\r\\n *\\r\\n * @dev Utility library of inline functions on addresses\\r\\n *\\r\\n * @dev Copy of the Zeppelin's library:\\r\\n *      https://github.com/gnosis/openzeppelin-solidity/blob/master/contracts/AddressUtils.sol\\r\\n */\\r\\nlibrary AddressUtils {\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Checks if the target address is a contract\\r\\n\\t *\\r\\n\\t * @dev It is unsafe to assume that an address for which this function returns\\r\\n\\t *      false is an externally-owned account (EOA) and not a contract.\\r\\n\\t *\\r\\n\\t * @dev Among others, `isContract` will return false for the following\\r\\n\\t *      types of addresses:\\r\\n\\t *        - an externally-owned account\\r\\n\\t *        - a contract in construction\\r\\n\\t *        - an address where a contract will be created\\r\\n\\t *        - an address where a contract lived, but was destroyed\\r\\n\\t *\\r\\n\\t * @param addr address to check\\r\\n\\t * @return whether the target address is a contract\\r\\n\\t */\\r\\n\\tfunction isContract(address addr) internal view returns (bool) {\\r\\n\\t\\t// a variable to load `extcodesize` to\\r\\n\\t\\tuint256 size = 0;\\r\\n\\r\\n\\t\\t// XXX Currently there is no better way to check if there is a contract in an address\\r\\n\\t\\t// than to check the size of the code at that address.\\r\\n\\t\\t// See https://ethereum.stackexchange.com/a/14016/36603 for more details about how this works.\\r\\n\\t\\t// TODO: Check this again before the Serenity release, because all addresses will be contracts.\\r\\n\\t\\t// solium-disable-next-line security/no-inline-assembly\\r\\n\\t\\tassembly {\\r\\n\\t\\t\\t// retrieve the size of the code at address `addr`\\r\\n\\t\\t\\tsize := extcodesize(addr)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// positive size indicates a smart contract address\\r\\n\\t\\treturn size > 0;\\r\\n\\t}\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/lib/ArrayUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.7;\\r\\n\\r\\n/**\\r\\n * @title Array Utils\\r\\n *\\r\\n * @notice Solidity doesn't always work with arrays in an optimal way.\\r\\n *      This library collects functions helping to optimize gas usage\\r\\n *      when working with arrays in Solidity.\\r\\n *\\r\\n * @dev One of the most important use cases for arrays is \\\"tight\\\" arrays -\\r\\n *      arrays which store values significantly less than 256-bits numbers\\r\\n *\\r\\n * @author Unblock Technolabs (Vijay Bhayani)\\r\\n */\\r\\nlibrary ArrayUtils {\\r\\n\\t/**\\r\\n\\t * @dev Pushes `n` 32-bits values sequentially into storage allocated array `data`\\r\\n\\t *      starting from the 32-bits value `v0`\\r\\n\\t *\\r\\n\\t * @dev Optimizations comparing to non-assembly implementation:\\r\\n\\t *      - reads+writes to array size slot only once (instead of `n` times)\\r\\n\\t *      - reads from the array data slots only once (instead of `7n/8` times)\\r\\n\\t *      - writes into array data slots `n/8` times (instead of `n` times)\\r\\n\\t *\\r\\n\\t * @dev Maximum gas saving estimate: ~3n sstore, or 15,000 * n\\r\\n\\t *\\r\\n\\t * @param data storage array pointer to an array of 32-bits elements\\r\\n\\t * @param v0 first number to push into the array\\r\\n\\t * @param n number of values to push, pushes [v0, ..., v0 + n - 1]\\r\\n\\t */\\r\\n\\tfunction push32(uint32[] storage data, uint32 v0, uint32 n) internal {\\r\\n\\t\\t// we're going to write 32-bits values into 256-bits storage slots of the array\\r\\n\\t\\t// each 256-slot can store up to 8 32-bits sub-blocks, it can also be partially empty\\r\\n\\t\\tassembly {\\r\\n\\t\\t\\t// for dynamic arrays their slot (array.slot) contains the array length\\r\\n\\t\\t\\t// array data is stored separately in consequent storage slots starting\\r\\n\\t\\t\\t// from the slot with the address keccak256(array.slot)\\r\\n\\r\\n\\t\\t\\t// read the array length into `len` and increase it by `n`\\r\\n\\t\\t\\tlet len := sload(data.slot)\\r\\n\\t\\t\\tsstore(data.slot, add(len, n))\\r\\n\\r\\n\\t\\t\\t// find where to write elements and store this location into `loc`\\r\\n\\t\\t\\t// load array storage slot number into memory onto position 0,\\r\\n\\t\\t\\t// calculate the keccak256 of the slot number (first 32 bytes at position 0)\\r\\n\\t\\t\\t// - this will point to the beginning of the array,\\r\\n\\t\\t\\t// so we add array length divided by 8 to point to the last array slot\\r\\n\\t\\t\\tmstore(0, data.slot)\\r\\n\\t\\t\\tlet loc := add(keccak256(0, 32), div(len, 8))\\r\\n\\r\\n\\t\\t\\t// if we start writing data into already partially occupied slot (`len % 8 != 0`)\\r\\n\\t\\t\\t// we need to modify the contents of that slot: read it and rewrite it\\r\\n\\t\\t\\tlet offset := mod(len, 8)\\r\\n\\t\\t\\tif not(iszero(offset)) {\\r\\n\\t\\t\\t\\t// how many 32-bits sub-blocks left in the slot\\r\\n\\t\\t\\t\\tlet left := sub(8, offset)\\r\\n\\t\\t\\t\\t// update the `left` value not to exceed `n`\\r\\n\\t\\t\\t\\tif gt(left, n) { left := n }\\r\\n\\t\\t\\t\\t// load the contents of the first slot (partially occupied)\\r\\n\\t\\t\\t\\tlet v256 := sload(loc)\\r\\n\\t\\t\\t\\t// write the slot in 32-bits sub-blocks\\r\\n\\t\\t\\t\\tfor { let j := 0 } lt(j, left) { j := add(j, 1) } {\\r\\n\\t\\t\\t\\t\\t// write sub-block `j` at offset: `(j + offset) * 32` bits, length: 32-bits\\r\\n\\t\\t\\t\\t\\t// v256 |= (v0 + j) << (j + offset) * 32\\r\\n\\t\\t\\t\\t\\tv256 := or(v256, shl(mul(add(j, offset), 32), add(v0, j)))\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t// write first slot back, it can be still partially occupied, it can also be full\\r\\n\\t\\t\\t\\tsstore(loc, v256)\\r\\n\\t\\t\\t\\t// update `loc`: move to the next slot\\r\\n\\t\\t\\t\\tloc := add(loc, 1)\\r\\n\\t\\t\\t\\t// update `v0`: increment by number of values pushed\\r\\n\\t\\t\\t\\tv0 := add(v0, left)\\r\\n\\t\\t\\t\\t// update `n`: decrement by number of values pushed\\r\\n\\t\\t\\t\\tn := sub(n, left)\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// rest of the slots (if any) are empty and will be only written to\\r\\n\\t\\t\\t// write the array in 256-bits (8x32) slots\\r\\n\\t\\t\\t// `i` iterates [0, n) with the 256-bits step, which is 8 taken `n` is 32-bits long\\r\\n\\t\\t\\tfor { let i := 0 } lt(i, n) { i := add(i, 8) } {\\r\\n\\t\\t\\t\\t// how many 32-bits sub-blocks left in the slot\\r\\n\\t\\t\\t\\tlet left := 8\\r\\n\\t\\t\\t\\t// update the `left` value not to exceed `n`\\r\\n\\t\\t\\t\\tif gt(left, n) { left := n }\\r\\n\\t\\t\\t\\t// init the 256-bits slot value\\r\\n\\t\\t\\t\\tlet v256 := 0\\r\\n\\t\\t\\t\\t// write the slot in 32-bits sub-blocks\\r\\n\\t\\t\\t\\tfor { let j := 0 } lt(j, left) { j := add(j, 1) } {\\r\\n\\t\\t\\t\\t\\t// write sub-block `j` at offset: `j * 32` bits, length: 32-bits\\r\\n\\t\\t\\t\\t\\t// v256 |= (v0 + i + j) << j * 32\\r\\n\\t\\t\\t\\t\\tv256 := or(v256, shl(mul(j, 32), add(v0, add(i, j))))\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t// write slot `i / 8`\\r\\n\\t\\t\\t\\tsstore(add(loc, div(i, 8)), v256)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/lib/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.7;\\r\\n\\r\\n/**\\r\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\r\\n *\\r\\n * These functions can be used to verify that a message was signed by the holder\\r\\n * of the private keys of a given address.\\r\\n *\\r\\n * @dev Copy of the Zeppelin's library:\\r\\n *      https://github.com/OpenZeppelin/openzeppelin-contracts/blob/b0cf6fbb7a70f31527f36579ad644e1cf12fdf4e/contracts/utils/cryptography/ECDSA.sol\\r\\n */\\r\\nlibrary ECDSA {\\r\\n\\t/**\\r\\n\\t * @dev Returns the address that signed a hashed message (`hash`) with\\r\\n\\t * `signature`. This address can then be used for verification purposes.\\r\\n\\t *\\r\\n\\t * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\r\\n\\t * this function rejects them by requiring the `s` value to be in the lower\\r\\n\\t * half order, and the `v` value to be either 27 or 28.\\r\\n\\t *\\r\\n\\t * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\r\\n\\t * verification to be secure: it is possible to craft signatures that\\r\\n\\t * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\r\\n\\t * this is by receiving a hash of the original message (which may otherwise\\r\\n\\t * be too long), and then calling {toEthSignedMessageHash} on it.\\r\\n\\t *\\r\\n\\t * Documentation for signature generation:\\r\\n\\t * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\r\\n\\t * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\r\\n\\t */\\r\\n\\tfunction recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\r\\n\\t\\t// Divide the signature in r, s and v variables\\r\\n\\t\\tbytes32 r;\\r\\n\\t\\tbytes32 s;\\r\\n\\t\\tuint8 v;\\r\\n\\r\\n\\t\\t// Check the signature length\\r\\n\\t\\t// - case 65: r,s,v signature (standard)\\r\\n\\t\\t// - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\r\\n\\t\\tif (signature.length == 65) {\\r\\n\\t\\t\\t// ecrecover takes the signature parameters, and the only way to get them\\r\\n\\t\\t\\t// currently is to use assembly.\\r\\n\\t\\t\\tassembly {\\r\\n\\t\\t\\t\\tr := mload(add(signature, 0x20))\\r\\n\\t\\t\\t\\ts := mload(add(signature, 0x40))\\r\\n\\t\\t\\t\\tv := byte(0, mload(add(signature, 0x60)))\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\telse if (signature.length == 64) {\\r\\n\\t\\t\\t// ecrecover takes the signature parameters, and the only way to get them\\r\\n\\t\\t\\t// currently is to use assembly.\\r\\n\\t\\t\\tassembly {\\r\\n\\t\\t\\t\\tlet vs := mload(add(signature, 0x40))\\r\\n\\t\\t\\t\\tr := mload(add(signature, 0x20))\\r\\n\\t\\t\\t\\ts := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\r\\n\\t\\t\\t\\tv := add(shr(255, vs), 27)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\telse {\\r\\n\\t\\t\\trevert(\\\"invalid signature length\\\");\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn recover(hash, v, r, s);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Overload of {ECDSA-recover} that receives the `v`,\\r\\n\\t * `r` and `s` signature fields separately.\\r\\n\\t */\\r\\n\\tfunction recover(\\r\\n\\t\\tbytes32 hash,\\r\\n\\t\\tuint8 v,\\r\\n\\t\\tbytes32 r,\\r\\n\\t\\tbytes32 s\\r\\n\\t) internal pure returns (address) {\\r\\n\\t\\t// EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\r\\n\\t\\t// unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\r\\n\\t\\t// the valid range for s in (281): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (282): v \u2208 {27, 28}. Most\\r\\n\\t\\t// signatures from current libraries generate a unique signature with an s-value in the lower half order.\\r\\n\\t\\t//\\r\\n\\t\\t// If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\r\\n\\t\\t// with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\r\\n\\t\\t// vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\r\\n\\t\\t// these malleable signatures as well.\\r\\n\\t\\trequire(\\r\\n\\t\\t\\tuint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0,\\r\\n\\t\\t\\t\\\"invalid signature 's' value\\\"\\r\\n\\t\\t);\\r\\n\\t\\trequire(v == 27 || v == 28, \\\"invalid signature 'v' value\\\");\\r\\n\\r\\n\\t\\t// If the signature is valid (and not malleable), return the signer address\\r\\n\\t\\taddress signer = ecrecover(hash, v, r, s);\\r\\n\\t\\trequire(signer != address(0), \\\"invalid signature\\\");\\r\\n\\r\\n\\t\\treturn signer;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\r\\n\\t * produces hash corresponding to the one signed with the\\r\\n\\t * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\r\\n\\t * JSON-RPC method as part of EIP-191.\\r\\n\\t *\\r\\n\\t * See {recover}.\\r\\n\\t */\\r\\n\\tfunction toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\r\\n\\t\\t// 32 is the length in bytes of hash,\\r\\n\\t\\t// enforced by the type signature above\\r\\n\\t\\treturn keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns an Ethereum Signed Typed Data, created from a\\r\\n\\t * `domainSeparator` and a `structHash`. This produces hash corresponding\\r\\n\\t * to the one signed with the\\r\\n\\t * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\r\\n\\t * JSON-RPC method as part of EIP-712.\\r\\n\\t *\\r\\n\\t * See {recover}.\\r\\n\\t */\\r\\n\\tfunction toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\r\\n\\t\\treturn keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\r\\n\\t}\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/lib/StringUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.7;\\r\\n\\r\\n/**\\r\\n * @title String Utils Library\\r\\n *\\r\\n * @dev Library for working with strings, primarily converting\\r\\n *      between strings and integer types\\r\\n *\\r\\n * @author Unblock Technolabs (Vijay Bhayani)\\r\\n */\\r\\nlibrary StringUtils {\\r\\n\\t/**\\r\\n\\t * @dev Converts a string to unsigned integer using the specified `base`\\r\\n\\t * @dev Throws on invalid input\\r\\n\\t *      (wrong characters for a given `base`)\\r\\n\\t * @dev Throws if given `base` is not supported\\r\\n\\t * @param a string to convert\\r\\n\\t * @param base number base, one of 2, 8, 10, 16\\r\\n\\t * @return i a number representing given string\\r\\n\\t */\\r\\n\\tfunction atoi(string memory a, uint8 base) internal pure returns (uint256 i) {\\r\\n\\t\\t// check if the base is valid\\r\\n\\t\\trequire(base == 2 || base == 8 || base == 10 || base == 16);\\r\\n\\r\\n\\t\\t// convert string into bytes for convenient iteration\\r\\n\\t\\tbytes memory buf = bytes(a);\\r\\n\\r\\n\\t\\t// iterate over the string (bytes buffer)\\r\\n\\t\\tfor(uint256 p = 0; p < buf.length; p++) {\\r\\n\\t\\t\\t// extract the digit\\r\\n\\t\\t\\tuint8 digit = uint8(buf[p]) - 0x30;\\r\\n\\r\\n\\t\\t\\t// if digit is greater then 10 - mind the gap\\r\\n\\t\\t\\t// see `itoa` function for more details\\r\\n\\t\\t\\tif(digit > 10) {\\r\\n\\t\\t\\t\\t// remove the gap\\r\\n\\t\\t\\t\\tdigit -= 7;\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// check if digit meets the base\\r\\n\\t\\t\\trequire(digit < base);\\r\\n\\r\\n\\t\\t\\t// move to the next digit slot\\r\\n\\t\\t\\ti *= base;\\r\\n\\r\\n\\t\\t\\t// add digit to the result\\r\\n\\t\\t\\ti += digit;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// return the result\\r\\n\\t\\treturn i;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Converts a integer to a string using the specified `base`\\r\\n\\t * @dev Throws if given `base` is not supported\\r\\n\\t * @param i integer to convert\\r\\n\\t * @param base number base, one of 2, 8, 10, 16\\r\\n\\t * @return a a string representing given integer\\r\\n\\t */\\r\\n\\tfunction itoa(uint256 i, uint8 base) internal pure returns (string memory a) {\\r\\n\\t\\t// check if the base is valid\\r\\n\\t\\trequire(base == 2 || base == 8 || base == 10 || base == 16);\\r\\n\\r\\n\\t\\t// for zero input the result is \\\"0\\\" string for any base\\r\\n\\t\\tif(i == 0) {\\r\\n\\t\\t\\treturn \\\"0\\\";\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// bytes buffer to put ASCII characters into\\r\\n\\t\\tbytes memory buf = new bytes(256);\\r\\n\\r\\n\\t\\t// position within a buffer to be used in cycle\\r\\n\\t\\tuint256 p = 0;\\r\\n\\r\\n\\t\\t// extract digits one by one in a cycle\\r\\n\\t\\twhile(i > 0) {\\r\\n\\t\\t\\t// extract current digit\\r\\n\\t\\t\\tuint8 digit = uint8(i % base);\\r\\n\\r\\n\\t\\t\\t// convert it to an ASCII code\\r\\n\\t\\t\\t// 0x20 is \\\" \\\"\\r\\n\\t\\t\\t// 0x30-0x39 is \\\"0\\\"-\\\"9\\\"\\r\\n\\t\\t\\t// 0x41-0x5A is \\\"A\\\"-\\\"Z\\\"\\r\\n\\t\\t\\t// 0x61-0x7A is \\\"a\\\"-\\\"z\\\" (\\\"A\\\"-\\\"Z\\\" XOR \\\" \\\")\\r\\n\\t\\t\\tuint8 ascii = digit + 0x30;\\r\\n\\r\\n\\t\\t\\t// if digit is greater then 10,\\r\\n\\t\\t\\t// fix the 0x3A-0x40 gap of punctuation marks\\r\\n\\t\\t\\t// (7 characters in ASCII table)\\r\\n\\t\\t\\tif(digit >= 10) {\\r\\n\\t\\t\\t\\t// jump through the gap\\r\\n\\t\\t\\t\\tascii += 7;\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// write character into the buffer\\r\\n\\t\\t\\tbuf[p++] = bytes1(ascii);\\r\\n\\r\\n\\t\\t\\t// move to the next digit\\r\\n\\t\\t\\ti /= base;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// `p` contains real length of the buffer now,\\r\\n\\t\\t// allocate the resulting buffer of that size\\r\\n\\t\\tbytes memory result = new bytes(p);\\r\\n\\r\\n\\t\\t// copy the buffer in the reversed order\\r\\n\\t\\tfor(p = 0; p < result.length; p++) {\\r\\n\\t\\t\\t// copy from the beginning of the original buffer\\r\\n\\t\\t\\t// to the end of resulting smaller buffer\\r\\n\\t\\t\\tresult[result.length - p - 1] = buf[p];\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// construct string and return\\r\\n\\t\\treturn string(result);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Concatenates two strings `s1` and `s2`, for example, if\\r\\n\\t *      `s1` == `foo` and `s2` == `bar`, the result `s` == `foobar`\\r\\n\\t * @param s1 first string\\r\\n\\t * @param s2 second string\\r\\n\\t * @return s concatenation result s1 + s2\\r\\n\\t */\\r\\n\\tfunction concat(string memory s1, string memory s2) internal pure returns (string memory s) {\\r\\n\\t\\t// an old way of string concatenation (Solidity 0.4) is commented out\\r\\n/*\\r\\n\\t\\t// convert s1 into buffer 1\\r\\n\\t\\tbytes memory buf1 = bytes(s1);\\r\\n\\t\\t// convert s2 into buffer 2\\r\\n\\t\\tbytes memory buf2 = bytes(s2);\\r\\n\\t\\t// create a buffer for concatenation result\\r\\n\\t\\tbytes memory buf = new bytes(buf1.length + buf2.length);\\r\\n\\r\\n\\t\\t// copy buffer 1 into buffer\\r\\n\\t\\tfor(uint256 i = 0; i < buf1.length; i++) {\\r\\n\\t\\t\\tbuf[i] = buf1[i];\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// copy buffer 2 into buffer\\r\\n\\t\\tfor(uint256 j = buf1.length; j < buf2.length; j++) {\\r\\n\\t\\t\\tbuf[j] = buf2[j - buf1.length];\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// construct string and return\\r\\n\\t\\treturn string(buf);\\r\\n*/\\r\\n\\r\\n\\t\\t// simply use built in function\\r\\n\\t\\treturn string(abi.encodePacked(s1, s2));\\r\\n\\t}\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/token/PatchOwnershipNFT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.7;\\r\\nimport \\\"./TinyERC721.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Patch Ownership NFT \\r\\n *\\r\\n * @notice Patch Ownership NFT is an ERC721 token used as landed holding identity\\r\\n *\\r\\n * @author Unblock Technolabs (Vijay Bhayani)\\r\\n */\\r\\ncontract PatchOwnershipNFT is TinyERC721 {\\r\\n\\r\\n\\t/// @dev Bitmask representing all the possible features\\r\\n\\tuint256 private constant FULL_FEATURE_MASK = 0xFFFF;\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Constructs/deploys ERC721 with the name and symbol specified\\r\\n\\t *\\r\\n\\t * @param _name name of the token to be accessible as `name()`,\\r\\n\\t *      ERC-20 compatible descriptive name for a collection of NFTs in this contract\\r\\n\\t * @param _symbol token symbol to be accessible as `symbol()`,\\r\\n\\t *      ERC-20 compatible descriptive name for a collection of NFTs in this contract\\r\\n\\t */\\r\\n\\tconstructor(string memory _name, string memory _symbol) TinyERC721(_name, _symbol) {\\r\\n\\t\\t// Enable all features of Patch Ownership contract\\r\\n        updateFeatures(FULL_FEATURE_MASK);\\t\\r\\n\\t}\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/token/TinyERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.7;\\r\\n\\r\\nimport \\\"../interfaces/ERC721Spec.sol\\\";\\r\\nimport \\\"../interfaces/TreeCoinERC721Spec.sol\\\";\\r\\nimport \\\"../lib/AddressUtils.sol\\\";\\r\\nimport \\\"../lib/ArrayUtils.sol\\\";\\r\\nimport \\\"../lib/StringUtils.sol\\\";\\r\\nimport \\\"../lib/ECDSA.sol\\\";\\r\\nimport \\\"../utils/AccessControl.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Tiny ERC721\\r\\n *\\r\\n * @notice Tiny ERC721 defines an NFT with a very small (up to 32 bits) ID space.\\r\\n *      ERC721 enumeration support requires additional writes to the storage:\\r\\n *      - when transferring a token in order to update the NFT collections of\\r\\n *        the previous and next owners,\\r\\n *      - when minting/burning a token in order to update global NFT collection\\r\\n *\\r\\n * @notice Reducing NFT ID space to 32 bits allows\\r\\n *      - to eliminate the need to have and to write to two additional storage mappings\\r\\n *        (also achievable with the 48 bits ID space)\\r\\n *      - for batch minting optimization by writing 8 tokens instead of 5 at once into\\r\\n *        global/local collections\\r\\n *\\r\\n * @notice This smart contract is designed to be inherited by concrete implementations,\\r\\n *      which are expected to define token metadata, auxiliary functions to access the metadata,\\r\\n *      and explicitly define token minting interface, which should be built on top\\r\\n *      of current smart contract internal interface\\r\\n *\\r\\n * @notice Fully ERC721-compatible with all optional interfaces implemented (metadata, enumeration),\\r\\n *      see https://eips.ethereum.org/EIPS/eip-721\\r\\n *\\r\\n * @dev ERC721: contract has passed adopted OpenZeppelin ERC721 tests\\r\\n *        https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/test/token/ERC721/ERC721.behavior.js\\r\\n *        https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/test/token/ERC721/extensions/ERC721URIStorage.test.js\\r\\n *\\r\\n * @dev A note on token URI: there are major differences on how token URI behaves comparing to Zeppelin impl:\\r\\n *      1. A token URI can be set for non-existing token for pre-allocation purposes,\\r\\n *         still the URI will be deleted once token is burnt\\r\\n *      2. If token URI is set, base URI has no affect on the token URI, the two are not concatenated,\\r\\n *         base URI is used to construct the token URI only if the latter was not explicitly set\\r\\n *\\r\\n * @dev Supports EIP-712 powered permits - permit() - approve() with signature.\\r\\n *      Supports EIP-712 powered operator permits - permitForAll() - setApprovalForAll() with signature.\\r\\n *\\r\\n * @dev EIP712 Domain:\\r\\n *      name: PatchERC721\\r\\n *      version: not in use, omitted (name already contains version)\\r\\n *      chainId: EIP-155 chain id\\r\\n *      verifyingContract: deployed contract address\\r\\n *      salt: permitNonces[owner], where owner is an address which allows operation on their tokens\\r\\n *\\r\\n * @dev Permit type:\\r\\n *      owner: address\\r\\n *      operator: address\\r\\n *      tokenId: uint256\\r\\n *      nonce: uint256\\r\\n *      deadline: uint256\\r\\n *\\r\\n * @dev Permit typeHash:\\r\\n *        keccak256(\\\"Permit(address owner,address operator,uint256 tokenId,uint256 nonce,uint256 deadline)\\\")\\r\\n *\\r\\n * @dev PermitForAll type:\\r\\n *      owner: address\\r\\n *      operator: address\\r\\n *      approved: bool\\r\\n *      nonce: uint256\\r\\n *      deadline: uint256\\r\\n *\\r\\n * @dev PermitForAll typeHash:\\r\\n *        keccak256(\\\"PermitForAll(address owner,address operator,bool approved,uint256 nonce,uint256 deadline)\\\")\\r\\n *\\r\\n * @dev See https://eips.ethereum.org/EIPS/eip-712\\r\\n * @dev See usage examples in tests: erc721_permits.js\\r\\n *\\r\\n * @author Unblock Technolabs (Vijay Bhayani)\\r\\n */\\r\\nabstract contract TinyERC721 is ERC721Enumerable, ERC721Metadata, WithBaseURI, MintableERC721, BurnableERC721, AccessControl {\\r\\n\\t// enable push32 optimization for uint32[]\\r\\n\\tusing ArrayUtils for uint32[];\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice ERC-20 compatible descriptive name for a collection of NFTs in this contract\\r\\n\\t *\\r\\n\\t * @inheritdoc ERC721Metadata\\r\\n\\t */\\r\\n\\tstring public override name;\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice ERC-20 compatible abbreviated name for a collection of NFTs in this contract\\r\\n\\t *\\r\\n\\t * @inheritdoc ERC721Metadata\\r\\n\\t */\\r\\n\\tstring public override symbol;\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Current implementation includes a function `decimals` that returns uint8(0)\\r\\n\\t *      to be more compatible with ERC-20\\r\\n\\t *\\r\\n\\t * @dev ERC20 compliant token decimals is equal to zero since ERC721 token is non-fungible\\r\\n\\t *      and therefore non-divisible\\r\\n\\t */\\r\\n\\tuint8 public constant decimals = 0;\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Ownership information for all the tokens in existence\\r\\n\\t *\\r\\n\\t * @dev Maps `Token ID => Token ID Global Index | Token ID Local Index | Token Owner Address`, where\\r\\n\\t *      - Token ID Global Index denotes Token ID index in the array of all the tokens,\\r\\n\\t *      - Token ID Local Index denotes Token ID index in the array of all the tokens owned by the owner,\\r\\n\\t *      - Token ID indexes are 32 bits long,\\r\\n\\t *      - `|` denotes bitwise concatenation of the values\\r\\n\\t * @dev Token Owner Address for a given Token ID is lower 160 bits of the mapping value\\r\\n\\t */\\r\\n\\tmapping(uint256 => uint256) internal tokens;\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Enumerated collections of the tokens owned by particular owners\\r\\n\\t *\\r\\n\\t * @dev We call these collections \\\"Local\\\" token collections\\r\\n\\t *\\r\\n\\t * @dev Maps `Token Owner Address => Owned Token IDs Array`\\r\\n\\t *\\r\\n\\t * @dev Token owner balance is the length of their token collection:\\r\\n\\t *      `balanceOf(owner) = collections[owner].length`\\r\\n\\t */\\r\\n\\tmapping(address => uint32[]) internal collections;\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice An array of all the tokens in existence\\r\\n\\t *\\r\\n\\t * @dev We call this collection \\\"Global\\\" token collection\\r\\n\\t *\\r\\n\\t * @dev Array with all Token IDs, used for enumeration\\r\\n\\t *\\r\\n\\t * @dev Total token supply `tokenSupply` is the length of this collection:\\r\\n\\t *      `totalSupply() = allTokens.length`\\r\\n\\t */\\r\\n\\tuint32[] internal allTokens;\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Mapping from tokenId to last snap time\\r\\n\\t *\\r\\n\\t * @dev Store timestamp of transfer event of particular tokenId\\r\\n\\t */\\r\\n    mapping(uint256 => uint256) public _lastSnap;\\r\\n    \\r\\n\\t/**\\r\\n\\t * @notice Mapping from tokenId to epoch index\\r\\n\\t *\\r\\n\\t * @dev Store counter of number of transfered event of \\r\\n\\t *\\t\\tparticular tokenId\\r\\n\\t */\\r\\n    mapping(uint256 => uint256) public _generatedEpochs;\\r\\n    \\r\\n\\t/**\\r\\n\\t * @notice Mapping from TokenId to epoch data of index\\r\\n\\t *\\r\\n\\t * @dev Store counter of number of transfered event of \\r\\n\\t *\\t\\tparticular tokenId\\r\\n\\t */\\r\\n    mapping(uint256 => mapping(uint256 => Epoch)) public _epochData;\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Sturcture which hold token transfer details\\r\\n\\t *\\r\\n\\t * @dev Epoch Data will be used to transfer token holding time, \\r\\n\\t *\\t\\tbased on which XCC will be distributed.\\r\\n\\t */\\r\\n    struct Epoch {\\r\\n        uint256 start;\\r\\n        uint256 end;\\r\\n        address HolderAddr;\\r\\n    }\\r\\n\\t\\r\\n\\t/**\\r\\n\\t * @notice Addresses approved by token owners to transfer their tokens\\r\\n\\t *\\r\\n\\t * @dev `Maps Token ID => Approved Address`, where\\r\\n\\t *      Approved Address is an address allowed transfer ownership for the token\\r\\n\\t *      defined by Token ID\\r\\n\\t */\\r\\n\\tmapping(uint256 => address) internal approvals;\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Addresses approved by token owners to transfer all their tokens\\r\\n\\t *\\r\\n\\t * @dev Maps `Token Owner Address => Operator Address => Approval State` - true/false (approved/not), where\\r\\n\\t *      - Token Owner Address is any address which may own tokens or not,\\r\\n\\t *      - Operator Address is any other address which may own tokens or not,\\r\\n\\t *      - Approval State is a flag indicating if Operator Address is allowed to\\r\\n\\t *        transfer tokens owned by Token Owner Address o their behalf\\r\\n\\t */\\r\\n\\tmapping(address => mapping(address => bool)) internal approvedOperators;\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev A record of nonces for signing/validating signatures in EIP-712 based\\r\\n\\t *      `permit` and `permitForAll` functions\\r\\n\\t *\\r\\n\\t * @dev Each time the nonce is used, it is increased by one, meaning reordering\\r\\n\\t *      of the EIP-712 transactions is not possible\\r\\n\\t *\\r\\n\\t * @dev Inspired by EIP-2612 extension for ERC20 token standard\\r\\n\\t *\\r\\n\\t * @dev Maps token owner address => token owner nonce\\r\\n\\t */\\r\\n\\tmapping(address => uint256) public permitNonces;\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Base URI is used to construct ERC721Metadata.tokenURI as\\r\\n\\t *      `base URI + token ID` if token URI is not set (not present in `_tokenURIs` mapping)\\r\\n\\t *\\r\\n\\t * @dev For example, if base URI is https://api.com/token/, then token #1\\r\\n\\t *      will have an URI https://api.com/token/1\\r\\n\\t *\\r\\n\\t * @dev If token URI is set with `setTokenURI()` it will be returned as is via `tokenURI()`\\r\\n\\t */\\r\\n\\tstring public override baseURI = \\\"\\\";\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Optional mapping for token URIs to be returned as is when `tokenURI()`\\r\\n\\t *      is called; if mapping doesn't exist for token, the URI is constructed\\r\\n\\t *      as `base URI + token ID`, where plus (+) denotes string concatenation\\r\\n\\t */\\r\\n\\tmapping(uint256 => string) internal _tokenURIs;\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev 32 bit token ID space is optimal for batch minting in batches of size 8\\r\\n\\t *      8 * 32 = 256 - single storage slot in global/local collection(s)\\r\\n\\t */\\r\\n\\tuint8 public constant BATCH_SIZE_MULTIPLIER = 8;\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Enables ERC721 transfers of the tokens\\r\\n\\t *      (transfer by the token owner himself)\\r\\n\\t * @dev Feature FEATURE_TRANSFERS must be enabled in order for\\r\\n\\t *      `transferFrom()` function to succeed when executed by token owner\\r\\n\\t */\\r\\n\\tuint32 public constant FEATURE_TRANSFERS = 0x0000_0001;\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Enables ERC721 transfers on behalf\\r\\n\\t *      (transfer by someone else on behalf of token owner)\\r\\n\\t * @dev Feature FEATURE_TRANSFERS_ON_BEHALF must be enabled in order for\\r\\n\\t *      `transferFrom()` function to succeed whe executed by approved operator\\r\\n\\t * @dev Token owner must call `approve()` or `setApprovalForAll()`\\r\\n\\t *      first to authorize the transfer on behalf\\r\\n\\t */\\r\\n\\tuint32 public constant FEATURE_TRANSFERS_ON_BEHALF = 0x0000_0002;\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Enables token owners to burn their own tokens\\r\\n\\t *\\r\\n\\t * @dev Feature FEATURE_OWN_BURNS must be enabled in order for\\r\\n\\t *      `burn()` function to succeed when called by token owner\\r\\n\\t */\\r\\n\\tuint32 public constant FEATURE_OWN_BURNS = 0x0000_0004;\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Enables approved operators to burn tokens on behalf of their owners\\r\\n\\t *\\r\\n\\t * @dev Feature FEATURE_BURNS_ON_BEHALF must be enabled in order for\\r\\n\\t *      `burn()` function to succeed when called by approved operator\\r\\n\\t */\\r\\n\\tuint32 public constant FEATURE_BURNS_ON_BEHALF = 0x0000_0008;\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Enables approvals on behalf (permits via an EIP712 signature)\\r\\n\\t * @dev Feature FEATURE_PERMITS must be enabled in order for\\r\\n\\t *      `permit()` function to succeed\\r\\n\\t */\\r\\n\\tuint32 public constant FEATURE_PERMITS = 0x0000_0010;\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Enables operator approvals on behalf (permits for all via an EIP712 signature)\\r\\n\\t * @dev Feature FEATURE_OPERATOR_PERMITS must be enabled in order for\\r\\n\\t *      `permitForAll()` function to succeed\\r\\n\\t */\\r\\n\\tuint32 public constant FEATURE_OPERATOR_PERMITS = 0x0000_0020;\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Token creator is responsible for creating (minting)\\r\\n\\t *      tokens to an arbitrary address\\r\\n\\t * @dev Role ROLE_TOKEN_CREATOR allows minting tokens\\r\\n\\t *      (calling `mint` function)\\r\\n\\t */\\r\\n\\tuint32 public constant ROLE_TOKEN_CREATOR = 0x0001_0000;\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Token destroyer is responsible for destroying (burning)\\r\\n\\t *      tokens owned by an arbitrary address\\r\\n\\t * @dev Role ROLE_TOKEN_DESTROYER allows burning tokens\\r\\n\\t *      (calling `burn` function)\\r\\n\\t */\\r\\n\\tuint32 public constant ROLE_TOKEN_DESTROYER = 0x0002_0000;\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice URI manager is responsible for managing base URI\\r\\n\\t *      part of the token URI ERC721Metadata interface\\r\\n\\t *\\r\\n\\t * @dev Role ROLE_URI_MANAGER allows updating the base URI\\r\\n\\t *      (executing `setBaseURI` function)\\r\\n\\t */\\r\\n\\tuint32 public constant ROLE_URI_MANAGER = 0x0004_0000;\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice EIP-712 contract's domain typeHash,\\r\\n\\t *      see https://eips.ethereum.org/EIPS/eip-712#rationale-for-typehash\\r\\n\\t *\\r\\n\\t * @dev Note: we do not include version into the domain typehash/separator,\\r\\n\\t *      it is implied version is concatenated to the name field, like \\\"PatchERC721\\\"\\r\\n\\t */\\r\\n\\t// keccak256(\\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\")\\r\\n\\tbytes32 public constant DOMAIN_TYPEHASH = 0x8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a866;\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice EIP-712 contract's domain separator,\\r\\n\\t *      see https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator\\r\\n\\t */\\r\\n\\tbytes32 public immutable DOMAIN_SEPARATOR;\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice EIP-712 permit (EIP-2612) struct typeHash,\\r\\n\\t *      see https://eips.ethereum.org/EIPS/eip-712#rationale-for-typehash\\r\\n\\t */\\r\\n\\t// keccak256(\\\"Permit(address owner,address operator,uint256 tokenId,uint256 nonce,uint256 deadline)\\\")\\r\\n\\tbytes32 public constant PERMIT_TYPEHASH = 0xee2282d7affd5a432b221a559e429129347b0c19a3f102179a5fb1859eef3d29;\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice EIP-712 permitForAll (EIP-2612) struct typeHash,\\r\\n\\t *      see https://eips.ethereum.org/EIPS/eip-712#rationale-for-typehash\\r\\n\\t */\\r\\n\\t// keccak256(\\\"PermitForAll(address owner,address operator,bool approved,uint256 nonce,uint256 deadline)\\\")\\r\\n\\tbytes32 public constant PERMIT_FOR_ALL_TYPEHASH = 0x47ab88482c90e4bb94b82a947ae78fa91fb25de1469ab491f4c15b9a0a2677ee;\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Fired in setBaseURI()\\r\\n\\t *\\r\\n\\t * @param _by an address which executed update\\r\\n\\t * @param _oldVal old _baseURI value\\r\\n\\t * @param _newVal new _baseURI value\\r\\n\\t */\\r\\n\\tevent BaseURIUpdated(address indexed _by, string _oldVal, string _newVal);\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Fired in setTokenURI()\\r\\n\\t *\\r\\n\\t * @param _by an address which executed update\\r\\n\\t * @param _tokenId token ID which URI was updated\\r\\n\\t * @param _oldVal old _baseURI value\\r\\n\\t * @param _newVal new _baseURI value\\r\\n\\t */\\r\\n\\tevent TokenURIUpdated(address indexed _by, uint256 _tokenId, string _oldVal, string _newVal);\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Constructs/deploys ERC721 instance with the name and symbol specified\\r\\n\\t *\\r\\n\\t * @param _name name of the token to be accessible as `name()`,\\r\\n\\t *      ERC-20 compatible descriptive name for a collection of NFTs in this contract\\r\\n\\t * @param _symbol token symbol to be accessible as `symbol()`,\\r\\n\\t *      ERC-20 compatible descriptive name for a collection of NFTs in this contract\\r\\n\\t */\\r\\n\\tconstructor(string memory _name, string memory _symbol) {\\r\\n\\t\\t// set the name\\r\\n\\t\\tname = _name;\\r\\n\\r\\n\\t\\t// set the symbol\\r\\n\\t\\tsymbol = _symbol;\\r\\n\\r\\n\\t\\t// build the EIP-712 contract domain separator, see https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator\\r\\n\\t\\t// note: we specify contract version in its name\\r\\n\\t\\tDOMAIN_SEPARATOR = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(\\\"PatchERC721\\\")), block.chainid, address(this)));\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Verifies if token is transferable (i.e. can change ownership, allowed to be transferred);\\r\\n\\t *      The default behaviour is to always allow transfer if token exists\\r\\n\\t *\\r\\n\\t * @dev Implementations may modify the default behaviour based on token metadata\\r\\n\\t *      if required\\r\\n\\t *\\r\\n\\t * @param _tokenId ID of the token to check if it's transferable\\r\\n\\t * @return true if token is transferable, false otherwise\\r\\n\\t */\\r\\n\\tfunction isTransferable(uint256 _tokenId) public view virtual returns(bool) {\\r\\n\\t\\t// validate token existence\\r\\n\\t\\trequire(exists(_tokenId), \\\"token doesn't exist\\\");\\r\\n\\r\\n\\t\\t// generic implementation returns true if token exists\\r\\n\\t\\treturn true;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Checks if specified token exists\\r\\n\\t *\\r\\n\\t * @dev Returns whether the specified token ID has an ownership\\r\\n\\t *      information associated with it\\r\\n\\t *\\r\\n\\t * @inheritdoc MintableERC721\\r\\n\\t *\\r\\n\\t * @param _tokenId ID of the token to query existence for\\r\\n\\t * @return whether the token exists (true - exists, false - doesn't exist)\\r\\n\\t */\\r\\n\\tfunction exists(uint256 _tokenId) public override view returns(bool) {\\r\\n\\t\\t// read ownership information and return a check if it's not zero (set)\\r\\n\\t\\treturn tokens[_tokenId] != 0;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @inheritdoc ERC165\\r\\n\\t */\\r\\n\\tfunction supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\r\\n\\t\\t// construct the interface support from required and optional ERC721 interfaces\\r\\n\\t\\treturn interfaceId == type(ERC165).interfaceId\\r\\n\\t\\t\\t|| interfaceId == type(ERC721).interfaceId\\r\\n\\t\\t\\t|| interfaceId == type(ERC721Metadata).interfaceId\\r\\n\\t\\t\\t|| interfaceId == type(ERC721Enumerable).interfaceId\\r\\n\\t\\t\\t|| interfaceId == type(MintableERC721).interfaceId\\r\\n\\t\\t\\t|| interfaceId == type(BurnableERC721).interfaceId;\\r\\n\\t}\\r\\n\\r\\n\\t// ===== Start: ERC721 Metadata =====\\r\\n\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Restricted access function which updates base URI used to construct\\r\\n\\t *      ERC721Metadata.tokenURI\\r\\n\\t *\\r\\n\\t * @dev Requires executor to have ROLE_URI_MANAGER permission\\r\\n\\t *\\r\\n\\t * @param _baseURI new base URI to set\\r\\n\\t */\\r\\n\\tfunction setBaseURI(string memory _baseURI) public virtual {\\r\\n\\t\\t// verify the access permission\\r\\n\\t\\trequire(isSenderInRole(ROLE_URI_MANAGER), \\\"access denied\\\");\\r\\n\\r\\n\\t\\t// emit an event first - to log both old and new values\\r\\n\\t\\temit BaseURIUpdated(msg.sender, baseURI, _baseURI);\\r\\n\\r\\n\\t\\t// and update base URI\\r\\n\\t\\tbaseURI = _baseURI;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns token URI if it was previously set with `setTokenURI`,\\r\\n\\t *      otherwise constructs it as base URI + token ID\\r\\n\\t *\\r\\n\\t * @inheritdoc ERC721Metadata\\r\\n\\t */\\r\\n\\tfunction tokenURI(uint256 _tokenId) public view override returns (string memory) {\\r\\n\\t\\t// verify token exists\\r\\n\\t\\trequire(exists(_tokenId), \\\"token doesn't exist\\\");\\r\\n\\r\\n\\t\\t// read the token URI for the token specified\\r\\n\\t\\tstring memory _tokenURI = _tokenURIs[_tokenId];\\r\\n\\r\\n\\t\\t// if token URI is set\\r\\n\\t\\tif(bytes(_tokenURI).length > 0) {\\r\\n\\t\\t\\t// just return it\\r\\n\\t\\t\\treturn _tokenURI;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// if base URI is not set\\r\\n\\t\\tif(bytes(baseURI).length == 0) {\\r\\n\\t\\t\\t// return an empty string\\r\\n\\t\\t\\treturn \\\"\\\";\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// otherwise concatenate base URI + token ID\\r\\n\\t\\treturn StringUtils.concat(baseURI, StringUtils.itoa(_tokenId, 10));\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Sets the token URI for the token defined by its ID\\r\\n\\t *\\r\\n\\t * @param _tokenId an ID of the token to set URI for\\r\\n\\t * @param _tokenURI token URI to set\\r\\n\\t */\\r\\n\\tfunction setTokenURI(uint256 _tokenId, string memory _tokenURI) public virtual {\\r\\n\\t\\t// verify the access permission\\r\\n\\t\\trequire(isSenderInRole(ROLE_URI_MANAGER), \\\"access denied\\\");\\r\\n\\r\\n\\t\\t// we do not verify token existence: we want to be able to\\r\\n\\t\\t// preallocate token URIs before tokens are actually minted\\r\\n\\r\\n\\t\\t// emit an event first - to log both old and new values\\r\\n\\t\\temit TokenURIUpdated(msg.sender, _tokenId, _tokenURIs[_tokenId], _tokenURI);\\r\\n\\r\\n\\t\\t// and update token URI\\r\\n\\t\\t_tokenURIs[_tokenId] = _tokenURI;\\r\\n\\t}\\r\\n\\r\\n\\t// ===== End: ERC721 Metadata =====\\r\\n\\r\\n\\t// ===== Start: ERC721, ERC721Enumerable Getters (view functions) =====\\r\\n\\r\\n\\r\\n\\t/**\\r\\n\\t * @inheritdoc ERC721\\r\\n\\t */\\r\\n\\tfunction balanceOf(address _owner) public view override returns (uint256) {\\r\\n\\t\\t// check `_owner` address is set\\r\\n\\t\\trequire(_owner != address(0), \\\"zero address\\\");\\r\\n\\r\\n\\t\\t// derive owner balance for the their owned tokens collection\\r\\n\\t\\t// as the length of that collection\\r\\n\\t\\treturn collections[_owner].length;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @inheritdoc ERC721\\r\\n\\t */\\r\\n\\tfunction ownerOf(uint256 _tokenId) public view override returns (address) {\\r\\n\\t\\t// derive ownership information of the token from the ownership mapping\\r\\n\\t\\t// by extracting lower 160 bits of the mapping value as an address\\r\\n\\t\\taddress owner = address(uint160(tokens[_tokenId]));\\r\\n\\r\\n\\t\\t// verify owner/token exists\\r\\n\\t\\trequire(owner != address(0), \\\"token doesn't exist\\\");\\r\\n\\r\\n\\t\\t// return owner address\\r\\n\\t\\treturn owner;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @inheritdoc ERC721Enumerable\\r\\n\\t */\\r\\n\\tfunction totalSupply() public view override returns (uint256) {\\r\\n\\t\\t// derive total supply value from the array of all existing tokens\\r\\n\\t\\t// as the length of this array\\r\\n\\t\\treturn allTokens.length;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @inheritdoc ERC721Enumerable\\r\\n\\t */\\r\\n\\tfunction tokenByIndex(uint256 _index) public view override returns (uint256) {\\r\\n\\t\\t// index out of bounds check\\r\\n\\t\\trequire(_index < totalSupply(), \\\"index out of bounds\\\");\\r\\n\\r\\n\\t\\t// find the token ID requested and return\\r\\n\\t\\treturn allTokens[_index];\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @inheritdoc ERC721Enumerable\\r\\n\\t */\\r\\n\\tfunction tokenOfOwnerByIndex(address _owner, uint256 _index) public view override returns (uint256) {\\r\\n\\t\\t// index out of bounds check\\r\\n\\t\\trequire(_index < balanceOf(_owner), \\\"index out of bounds\\\");\\r\\n\\r\\n\\t\\t// find the token ID requested and return\\r\\n\\t\\treturn collections[_owner][_index];\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @inheritdoc ERC721\\r\\n\\t */\\r\\n\\tfunction getApproved(uint256 _tokenId) public view override returns (address) {\\r\\n\\t\\t// verify token specified exists\\r\\n\\t\\trequire(exists(_tokenId), \\\"token doesn't exist\\\");\\r\\n\\r\\n\\t\\t// read the approval value and return\\r\\n\\t\\treturn approvals[_tokenId];\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @inheritdoc ERC721\\r\\n\\t */\\r\\n\\tfunction isApprovedForAll(address _owner, address _operator) public view override returns (bool) {\\r\\n\\t\\t// read the approval state value and return\\r\\n\\t\\treturn approvedOperators[_owner][_operator];\\r\\n\\t}\\r\\n\\r\\n\\t// ===== End: ERC721, ERC721Enumerable Getters (view functions) =====\\r\\n\\r\\n\\t// ===== Start: ERC721 mutative functions (transfers, approvals) =====\\r\\n\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Batch Safe Transfer token ID specified\\r\\n\\t *\\r\\n\\t * @dev Checks if `_to` is a smart contract (code size > 0). If so, it calls\\r\\n\\t *      `onERC721Received` on `_to` and throws if the return value is not\\r\\n\\t *      `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`.\\r\\n\\t *\\r\\n\\t * @param _from an address from where token will transfered \\r\\n\\t * @param _to an address to which token will be transfer\\r\\n\\t * @param _tokenId array of tokenID of the token to Transfer\\r\\n\\t * @param _data array of additional data with no specified format, sent in call to `_to`\\r\\n\\t */\\r\\n\\t function batchSafeTransferFrom(address _from, address _to, uint256[] memory _tokenId, bytes[] memory _data) public {\\r\\n\\t\\tfor(uint256 i = 0; i < _tokenId.length; i++){\\r\\n\\t\\t\\t// Transfer token\\r\\n\\t\\t\\tsafeTransferFrom(_from, _to, _tokenId[i], _data[i]);\\r\\n\\t\\t}\\r\\n\\t }\\r\\n\\r\\n\\t/**\\r\\n\\t * @inheritdoc ERC721\\r\\n\\t */\\r\\n\\tfunction safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes memory _data) public override {\\r\\n\\t\\t// delegate call to unsafe transfer on behalf `transferFrom()`\\r\\n\\t\\ttransferFrom(_from, _to, _tokenId);\\r\\n\\r\\n\\t\\t// if receiver `_to` is a smart contract\\r\\n\\t\\tif(AddressUtils.isContract(_to)) {\\r\\n\\t\\t\\t// check it supports ERC721 interface - execute onERC721Received()\\r\\n\\t\\t\\tbytes4 response = ERC721TokenReceiver(_to).onERC721Received(msg.sender, _from, _tokenId, _data);\\r\\n\\r\\n\\t\\t\\t// expected response is ERC721TokenReceiver(_to).onERC721Received.selector\\r\\n\\t\\t\\t// bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))\\r\\n\\t\\t\\trequire(response == ERC721TokenReceiver(_to).onERC721Received.selector, \\\"invalid onERC721Received response\\\");\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @inheritdoc ERC721\\r\\n\\t */\\r\\n\\tfunction safeTransferFrom(address _from, address _to, uint256 _tokenId) public override {\\r\\n\\t\\t// delegate call to overloaded `safeTransferFrom()`, set data to \\\"\\\"\\r\\n\\t\\tsafeTransferFrom(_from, _to, _tokenId, \\\"\\\");\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Batch Transfer token ID specified\\r\\n\\t *\\r\\n\\t * @param _from an address from where token will transfered \\r\\n\\t * @param _to an address to which token will be transfer\\r\\n\\t * @param _tokenId array of tokenID of the token to Transfer\\r\\n\\t */\\r\\n\\t function batchTransferFrom(address _from, address _to, uint256[] memory _tokenId) public {\\r\\n\\t\\tfor(uint256 i = 0; i < _tokenId.length; i++){\\r\\n\\t\\t\\t// Transfer token\\r\\n\\t\\t\\ttransferFrom(_from, _to, _tokenId[i]);\\r\\n\\t\\t}\\r\\n\\t } \\r\\n\\r\\n\\t/**\\r\\n\\t * @inheritdoc ERC721\\r\\n\\t */\\r\\n\\tfunction transferFrom(address _from, address _to, uint256 _tokenId) public override {\\r\\n\\t\\t// if `_from` is equal to sender, require transfers feature to be enabled\\r\\n\\t\\t// otherwise require transfers on behalf feature to be enabled\\r\\n\\t\\trequire(_from == msg.sender && isFeatureEnabled(FEATURE_TRANSFERS)\\r\\n\\t\\t     || _from != msg.sender && isFeatureEnabled(FEATURE_TRANSFERS_ON_BEHALF),\\r\\n\\t\\t        _from == msg.sender? \\\"transfers are disabled\\\": \\\"transfers on behalf are disabled\\\");\\r\\n\\r\\n\\t\\t// validate destination address is set\\r\\n\\t\\trequire(_to != address(0), \\\"zero address\\\");\\r\\n\\r\\n\\t\\t// validate token ownership, which also\\r\\n\\t\\t// validates token existence under the hood\\r\\n\\t\\trequire(_from == ownerOf(_tokenId), \\\"access denied\\\");\\r\\n\\r\\n\\t\\t// verify operator (transaction sender) is either token owner,\\r\\n\\t\\t// or is approved by the token owner to transfer this particular token,\\r\\n\\t\\t// or is approved by the token owner to transfer any of his tokens\\r\\n\\t\\trequire(_from == msg.sender || msg.sender == getApproved(_tokenId) || isApprovedForAll(_from, msg.sender), \\\"access denied\\\");\\r\\n\\r\\n\\t\\t// transfer is not allowed for a locked token\\r\\n\\t\\trequire(isTransferable(_tokenId), \\\"locked token\\\");\\r\\n\\r\\n\\t\\t// Register token holding Epcho\\r\\n\\t\\t_beforeTokenTransfer(_from, _to, _tokenId);\\r\\n\\r\\n\\t\\t// if required, move token ownership,\\r\\n\\t\\t// update old and new owner's token collections accordingly:\\r\\n\\t\\tif(_from != _to) {\\r\\n\\t\\t\\t// remove token from old owner's collection (also clears approval)\\r\\n\\t\\t\\t__removeLocal(_tokenId);\\r\\n\\t\\t\\t// add token to the new owner's collection\\r\\n\\t\\t\\t__addLocal(_tokenId, _to);\\r\\n\\t\\t}\\r\\n\\t\\t// even if no real changes are required, approval needs to be erased\\r\\n\\t\\telse {\\r\\n\\t\\t\\t// clear token approval (also emits an Approval event)\\r\\n\\t\\t\\t__clearApproval(_from, _tokenId);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// fire ERC721 transfer event\\r\\n\\t\\temit Transfer(_from, _to, _tokenId);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @inheritdoc ERC721\\r\\n\\t */\\r\\n\\tfunction approve(address _approved, uint256 _tokenId) public override {\\r\\n\\t\\t// make an internal approve - delegate to `__approve`\\r\\n\\t\\t__approve(msg.sender, _approved, _tokenId);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Powers the meta transaction for `approve` - EIP-712 signed `permit`\\r\\n\\t *\\r\\n\\t * @dev Approves address called `_operator` to transfer token `_tokenId`\\r\\n\\t *      on behalf of the `_owner`\\r\\n\\t *\\r\\n\\t * @dev Zero `_operator` address indicates there is no approved address,\\r\\n\\t *      and effectively removes an approval for the token specified\\r\\n\\t *\\r\\n\\t * @dev `_owner` must own token `_tokenId` to grant the permission\\r\\n\\t * @dev Throws if `_operator` is a self address (`_owner`),\\r\\n\\t *      or if `_tokenId` doesn't exist\\r\\n\\t *\\r\\n\\t * @param _owner owner of the token `_tokenId` to set approval on behalf of\\r\\n\\t * @param _operator an address approved by the token owner\\r\\n\\t *      to spend token `_tokenId` on its behalf\\r\\n\\t * @param _tokenId token ID operator `_approved` is allowed to\\r\\n\\t *      transfer on behalf of the token owner\\r\\n\\t */\\r\\n\\tfunction __approve(address _owner, address _operator, uint256 _tokenId) private {\\r\\n\\t\\t// get token owner address\\r\\n\\t\\taddress owner = ownerOf(_tokenId);\\r\\n\\r\\n\\t\\t// approving owner address itself doesn't make sense and is not allowed\\r\\n\\t\\trequire(_operator != owner, \\\"self approval\\\");\\r\\n\\r\\n\\t\\t// only token owner or/and approved operator can set the approval\\r\\n\\t\\trequire(_owner == owner || isApprovedForAll(owner, _owner), \\\"access denied\\\");\\r\\n\\r\\n\\t\\t// update the approval\\r\\n\\t\\tapprovals[_tokenId] = _operator;\\r\\n\\r\\n\\t\\t// emit an event\\r\\n\\t\\temit Approval(owner, _operator, _tokenId);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @inheritdoc ERC721\\r\\n\\t */\\r\\n\\tfunction setApprovalForAll(address _operator, bool _approved) public override {\\r\\n\\t\\t// make an internal approve - delegate to `__approveForAll`\\r\\n\\t\\t__approveForAll(msg.sender, _operator, _approved);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Powers the meta transaction for `setApprovalForAll` - EIP-712 signed `permitForAll`\\r\\n\\t *\\r\\n\\t * @dev Approves address called `_operator` to transfer any tokens\\r\\n\\t *      on behalf of the `_owner`\\r\\n\\t *\\r\\n\\t * @dev `_owner` must not necessarily own any tokens to grant the permission\\r\\n\\t * @dev Throws if `_operator` is a self address (`_owner`)\\r\\n\\t *\\r\\n\\t * @param _owner owner of the tokens to set approval on behalf of\\r\\n\\t * @param _operator an address to add to the set of authorized operators, i.e.\\r\\n\\t *      an address approved by the token owner to spend tokens on its behalf\\r\\n\\t * @param _approved true if the operator is approved, false to revoke approval\\r\\n\\t */\\r\\n\\tfunction __approveForAll(address _owner, address _operator, bool _approved) private {\\r\\n\\t\\t// approving tx sender address itself doesn't make sense and is not allowed\\r\\n\\t\\trequire(_operator != _owner, \\\"self approval\\\");\\r\\n\\r\\n\\t\\t// update the approval\\r\\n\\t\\tapprovedOperators[_owner][_operator] = _approved;\\r\\n\\r\\n\\t\\t// emit an event\\r\\n\\t\\temit ApprovalForAll(_owner, _operator, _approved);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Clears approval for a given token owned by a given owner,\\r\\n\\t *      emits an Approval event\\r\\n\\t *\\r\\n\\t * @dev Unsafe: doesn't check the validity of inputs (must be kept private),\\r\\n\\t *      assuming the check is done by the caller\\r\\n\\t *      - token existence\\r\\n\\t *      - token ownership\\r\\n\\t *\\r\\n\\t * @param _owner token owner to be logged into Approved event as is\\r\\n\\t * @param _tokenId token ID to erase approval for and to log into Approved event as is\\r\\n\\t */\\r\\n\\tfunction __clearApproval(address _owner, uint256 _tokenId) internal {\\r\\n\\t\\t// clear token approval\\r\\n\\t\\tdelete approvals[_tokenId];\\r\\n\\t\\t// emit an ERC721 Approval event:\\r\\n\\t\\t// \\\"When a Transfer event emits, this also indicates that the approved\\r\\n\\t\\t// address for that NFT (if any) is reset to none.\\\"\\r\\n\\t\\temit Approval(_owner, address(0), _tokenId);\\r\\n\\t}\\r\\n\\r\\n\\t// ===== End: ERC721 mutative functions (transfers, approvals) =====\\r\\n\\r\\n\\t// ===== Start: Meta-transactions Support =====\\r\\n\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Change or reaffirm the approved address for an NFT on behalf\\r\\n\\t *\\r\\n\\t * @dev Executes approve(_operator, _tokenId) on behalf of the token owner\\r\\n\\t *      who EIP-712 signed the transaction, i.e. as if transaction sender is the EIP712 signer\\r\\n\\t *\\r\\n\\t * @dev Sets the `_tokenId` as the allowance of `_operator` over `_owner` token,\\r\\n\\t *      given `_owner` EIP-712 signed approval\\r\\n\\t *\\r\\n\\t * @dev Emits `Approval` event in the same way as `approve` does\\r\\n\\t *\\r\\n\\t * @dev Requires:\\r\\n\\t *     - `_operator` to be non-zero address\\r\\n\\t *     - `_exp` to be a timestamp in the future\\r\\n\\t *     - `v`, `r` and `s` to be a valid `secp256k1` signature from `_owner`\\r\\n\\t *        over the EIP712-formatted function arguments.\\r\\n\\t *     - the signature to use `_owner` current nonce (see `permitNonces`).\\r\\n\\t *\\r\\n\\t * @dev For more information on the signature format, see the\\r\\n\\t *      https://eips.ethereum.org/EIPS/eip-2612#specification\\r\\n\\t *\\r\\n\\t * @param _owner owner of the token to set approval on behalf of,\\r\\n\\t *      an address which signed the EIP-712 message\\r\\n\\t * @param _operator new approved NFT controller\\r\\n\\t * @param _tokenId token ID to approve\\r\\n\\t * @param _exp signature expiration time (unix timestamp)\\r\\n\\t * @param v the recovery byte of the signature\\r\\n\\t * @param r half of the ECDSA signature pair\\r\\n\\t * @param s half of the ECDSA signature pair\\r\\n\\t */\\r\\n\\tfunction permit(address _owner, address _operator, uint256 _tokenId, uint256 _exp, uint8 v, bytes32 r, bytes32 s) public {\\r\\n\\t\\t// verify permits are enabled\\r\\n\\t\\trequire(isFeatureEnabled(FEATURE_PERMITS), \\\"permits are disabled\\\");\\r\\n\\r\\n\\t\\t// derive signer of the EIP712 Permit message, and\\r\\n\\t\\t// update the nonce for that particular signer to avoid replay attack!!! ----------->>> \u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\\r\\n\\t\\taddress signer = __deriveSigner(abi.encode(PERMIT_TYPEHASH, _owner, _operator, _tokenId, permitNonces[_owner]++, _exp), v, r, s);\\r\\n\\r\\n\\t\\t// perform message integrity and security validations\\r\\n\\t\\trequire(signer == _owner, \\\"invalid signature\\\");\\r\\n\\t\\trequire(block.timestamp < _exp, \\\"signature expired\\\");\\r\\n\\r\\n\\t\\t// delegate call to `__approve` - execute the logic required\\r\\n\\t\\t__approve(_owner, _operator, _tokenId);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Enable or disable approval for a third party (\\\"operator\\\") to manage\\r\\n\\t *      all of owner's assets - on behalf\\r\\n\\t *\\r\\n\\t * @dev Executes setApprovalForAll(_operator, _approved) on behalf of the owner\\r\\n\\t *      who EIP-712 signed the transaction, i.e. as if transaction sender is the EIP712 signer\\r\\n\\t *\\r\\n\\t * @dev Sets the `_operator` as the token operator for `_owner` tokens,\\r\\n\\t *      given `_owner` EIP-712 signed approval\\r\\n\\t *\\r\\n\\t * @dev Emits `ApprovalForAll` event in the same way as `setApprovalForAll` does\\r\\n\\t *\\r\\n\\t * @dev Requires:\\r\\n\\t *     - `_operator` to be non-zero address\\r\\n\\t *     - `_exp` to be a timestamp in the future\\r\\n\\t *     - `v`, `r` and `s` to be a valid `secp256k1` signature from `_owner`\\r\\n\\t *        over the EIP712-formatted function arguments.\\r\\n\\t *     - the signature to use `_owner` current nonce (see `permitNonces`).\\r\\n\\t *\\r\\n\\t * @dev For more information on the signature format, see the\\r\\n\\t *      https://eips.ethereum.org/EIPS/eip-2612#specification\\r\\n\\t *\\r\\n\\t * @param _owner owner of the tokens to set approval on behalf of,\\r\\n\\t *      an address which signed the EIP-712 message\\r\\n\\t * @param _operator an address to add to the set of authorized operators, i.e.\\r\\n\\t *      an address approved by the token owner to spend tokens on its behalf\\r\\n\\t * @param _approved true if the operator is approved, false to revoke approval\\r\\n\\t * @param _exp signature expiration time (unix timestamp)\\r\\n\\t * @param v the recovery byte of the signature\\r\\n\\t * @param r half of the ECDSA signature pair\\r\\n\\t * @param s half of the ECDSA signature pair\\r\\n\\t */\\r\\n\\tfunction permitForAll(address _owner, address _operator, bool _approved, uint256 _exp, uint8 v, bytes32 r, bytes32 s) public {\\r\\n\\t\\t// verify permits are enabled\\r\\n\\t\\trequire(isFeatureEnabled(FEATURE_OPERATOR_PERMITS), \\\"operator permits are disabled\\\");\\r\\n\\r\\n\\t\\t// derive signer of the EIP712 PermitForAll message, and\\r\\n\\t\\t// update the nonce for that particular signer to avoid replay attack!!! --------------------->>> \u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\\r\\n\\t\\taddress signer = __deriveSigner(abi.encode(PERMIT_FOR_ALL_TYPEHASH, _owner, _operator, _approved, permitNonces[_owner]++, _exp), v, r, s);\\r\\n\\r\\n\\t\\t// perform message integrity and security validations\\r\\n\\t\\trequire(signer == _owner, \\\"invalid signature\\\");\\r\\n\\t\\trequire(block.timestamp < _exp, \\\"signature expired\\\");\\r\\n\\r\\n\\t\\t// delegate call to `__approve` - execute the logic required\\r\\n\\t\\t__approveForAll(_owner, _operator, _approved);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Auxiliary function to verify structured EIP712 message signature and derive its signer\\r\\n\\t *\\r\\n\\t * @param abiEncodedTypehash abi.encode of the message typehash together with all its parameters\\r\\n\\t * @param v the recovery byte of the signature\\r\\n\\t * @param r half of the ECDSA signature pair\\r\\n\\t * @param s half of the ECDSA signature pair\\r\\n\\t */\\r\\n\\tfunction __deriveSigner(bytes memory abiEncodedTypehash, uint8 v, bytes32 r, bytes32 s) private view returns(address) {\\r\\n\\t\\t// build the EIP-712 hashStruct of the message\\r\\n\\t\\tbytes32 hashStruct = keccak256(abiEncodedTypehash);\\r\\n\\r\\n\\t\\t// calculate the EIP-712 digest \\\"\\\\x19\\\\x01\\\" \u2016 domainSeparator \u2016 hashStruct(message)\\r\\n\\t\\tbytes32 digest = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", DOMAIN_SEPARATOR, hashStruct));\\r\\n\\r\\n\\t\\t// recover the address which signed the message with v, r, s\\r\\n\\t\\taddress signer = ECDSA.recover(digest, v, r, s);\\r\\n\\r\\n\\t\\t// return the signer address derived from the signature\\r\\n\\t\\treturn signer;\\r\\n\\t}\\r\\n\\r\\n\\t// ===== End: Meta-transactions Support =====\\r\\n\\r\\n\\t// ===== Start: mint/burn support =====\\r\\n\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Creates new token with token ID specified\\r\\n\\t *      and assigns an ownership `_to` for this token\\r\\n\\t *\\r\\n\\t * @dev Checks if `_to` is a smart contract (code size > 0). If so, it calls\\r\\n\\t *      `onERC721Received` on `_to` and throws if the return value is not\\r\\n\\t *      `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`.\\r\\n\\t *\\r\\n\\t * @dev Requires executor to have `ROLE_TOKEN_CREATOR` permission\\r\\n\\t *\\r\\n\\t * @param _to an address to mint token to\\r\\n\\t * @param _tokenId ID of the token to mint\\r\\n\\t * @param _data additional data with no specified format, sent in call to `_to`\\r\\n\\t */\\r\\n\\tfunction safeMint(address _to, uint256 _tokenId, bytes memory _data) public override {\\r\\n\\t\\t// delegate to unsafe mint\\r\\n\\t\\tmint(_to, _tokenId);\\r\\n\\r\\n\\t\\t// make it safe: execute `onERC721Received`\\r\\n\\r\\n\\t\\t// if receiver `_to` is a smart contract\\r\\n\\t\\tif(AddressUtils.isContract(_to)) {\\r\\n\\t\\t\\t// check it supports ERC721 interface - execute onERC721Received()\\r\\n\\t\\t\\tbytes4 response = ERC721TokenReceiver(_to).onERC721Received(msg.sender, address(0), _tokenId, _data);\\r\\n\\r\\n\\t\\t\\t// expected response is ERC721TokenReceiver(_to).onERC721Received.selector\\r\\n\\t\\t\\t// bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))\\r\\n\\t\\t\\trequire(response == ERC721TokenReceiver(_to).onERC721Received.selector, \\\"invalid onERC721Received response\\\");\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Creates new token with token ID specified\\r\\n\\t *      and assigns an ownership `_to` for this token\\r\\n\\t *\\r\\n\\t * @dev Checks if `_to` is a smart contract (code size > 0). If so, it calls\\r\\n\\t *      `onERC721Received` on `_to` and throws if the return value is not\\r\\n\\t *      `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`.\\r\\n\\t *\\r\\n\\t * @dev Requires executor to have `ROLE_TOKEN_CREATOR` permission\\r\\n\\t *\\r\\n\\t * @param _to an address to mint token to\\r\\n\\t * @param _tokenId ID of the token to mint\\r\\n\\t */\\r\\n\\tfunction safeMint(address _to, uint256 _tokenId) public override {\\r\\n\\t\\t// delegate to `safeMint` with empty data\\r\\n\\t\\tsafeMint(_to, _tokenId, \\\"\\\");\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Creates new tokens starting with token ID specified\\r\\n\\t *      and assigns an ownership `_to` for these tokens\\r\\n\\t *\\r\\n\\t * @dev Token IDs to be minted: [_tokenId, _tokenId + n)\\r\\n\\t *\\r\\n\\t * @dev n must be greater or equal 2: `n > 1`\\r\\n\\t *\\r\\n\\t * @dev Checks if `_to` is a smart contract (code size > 0). If so, it calls\\r\\n\\t *      `onERC721Received` on `_to` and throws if the return value is not\\r\\n\\t *      `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`.\\r\\n\\t *\\r\\n\\t * @dev Requires executor to have `ROLE_TOKEN_CREATOR` permission\\r\\n\\t *\\r\\n\\t * @param _to an address to mint token to\\r\\n\\t * @param _tokenId ID of the token to mint\\r\\n\\t * @param n how many tokens to mint, sequentially increasing the _tokenId\\r\\n\\t * @param _data additional data with no specified format, sent in call to `_to`\\r\\n\\t */\\r\\n\\tfunction safeMintBatch(address _to, uint256 _tokenId, uint256 n, bytes memory _data) public override {\\r\\n\\t\\t// delegate to unsafe mint\\r\\n\\t\\tmintBatch(_to, _tokenId, n);\\r\\n\\r\\n\\t\\t// make it safe: execute `onERC721Received`\\r\\n\\r\\n\\t\\t// if receiver `_to` is a smart contract\\r\\n\\t\\tif(AddressUtils.isContract(_to)) {\\r\\n\\t\\t\\t// onERC721Received: for each token minted\\r\\n\\t\\t\\tfor(uint256 i = 0; i < n; i++) {\\r\\n\\t\\t\\t\\t// check it supports ERC721 interface - execute onERC721Received()\\r\\n\\t\\t\\t\\tbytes4 response = ERC721TokenReceiver(_to).onERC721Received(msg.sender, address(0), _tokenId + i, _data);\\r\\n\\r\\n\\t\\t\\t\\t// expected response is ERC721TokenReceiver(_to).onERC721Received.selector\\r\\n\\t\\t\\t\\t// bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))\\r\\n\\t\\t\\t\\trequire(response == ERC721TokenReceiver(_to).onERC721Received.selector, \\\"invalid onERC721Received response\\\");\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Creates new tokens starting with token ID specified\\r\\n\\t *      and assigns an ownership `_to` for these tokens\\r\\n\\t *\\r\\n\\t * @dev Token IDs to be minted: [_tokenId, _tokenId + n)\\r\\n\\t *\\r\\n\\t * @dev n must be greater or equal 2: `n > 1`\\r\\n\\t *\\r\\n\\t * @dev Checks if `_to` is a smart contract (code size > 0). If so, it calls\\r\\n\\t *      `onERC721Received` on `_to` and throws if the return value is not\\r\\n\\t *      `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`.\\r\\n\\t *\\r\\n\\t * @dev Requires executor to have `ROLE_TOKEN_CREATOR` permission\\r\\n\\t *\\r\\n\\t * @param _to an address to mint token to\\r\\n\\t * @param _tokenId ID of the token to mint\\r\\n\\t * @param n how many tokens to mint, sequentially increasing the _tokenId\\r\\n\\t */\\r\\n\\tfunction safeMintBatch(address _to, uint256 _tokenId, uint256 n) public override {\\r\\n\\t\\t// delegate to `safeMint` with empty data\\r\\n\\t\\tsafeMintBatch(_to, _tokenId, n, \\\"\\\");\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Creates new token with token ID specified\\r\\n\\t *      and assigns an ownership `_to` for this token\\r\\n\\t *\\r\\n\\t * @dev Unsafe: doesn't execute `onERC721Received` on the receiver.\\r\\n\\t *      Prefer the use of `saveMint` instead of `mint`.\\r\\n\\t *\\r\\n\\t * @dev Requires executor to have `ROLE_TOKEN_CREATOR` permission\\r\\n\\t *\\r\\n\\t * @param _to an address to mint token to\\r\\n\\t * @param _tokenId ID of the token to mint\\r\\n\\t */\\r\\n\\tfunction mint(address _to, uint256 _tokenId) public override {\\r\\n\\t\\t// check if caller has sufficient permissions to mint tokens\\r\\n\\t\\trequire(isSenderInRole(ROLE_TOKEN_CREATOR), \\\"access denied\\\");\\r\\n\\r\\n\\t\\t// verify the inputs\\r\\n\\r\\n\\t\\t// verify destination address is set\\r\\n\\t\\trequire(_to != address(0), \\\"zero address\\\");\\r\\n\\t\\t// verify the token ID is \\\"tiny\\\" (32 bits long at most)\\r\\n\\t\\trequire(uint32(_tokenId) == _tokenId, \\\"token ID overflow\\\");\\r\\n\\r\\n\\t\\t// verify token doesn't yet exist\\r\\n\\t\\trequire(!exists(_tokenId), \\\"already minted\\\");\\r\\n\\r\\n\\t\\t// Register token holding Epcho\\r\\n\\t\\t_beforeTokenTransfer(address(0), _to, _tokenId);\\r\\n\\r\\n\\t\\t// create token ownership record,\\r\\n\\t\\t// add token to `allTokens` and new owner's collections\\r\\n\\t\\t// add token to both local and global collections (enumerations)\\r\\n\\t\\t__addToken(_tokenId, _to);\\r\\n\\r\\n\\t\\t// fire ERC721 transfer event\\r\\n\\t\\temit Transfer(address(0), _to, _tokenId);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Creates new tokens starting with token ID specified\\r\\n\\t *      and assigns an ownership `_to` for these tokens\\r\\n\\t *\\r\\n\\t * @dev Token IDs to be minted: [_tokenId, _tokenId + n)\\r\\n\\t *\\r\\n\\t * @dev n must be greater or equal 2: `n > 1`\\r\\n\\t *\\r\\n\\t * @dev Unsafe: doesn't execute `onERC721Received` on the receiver.\\r\\n\\t *      Prefer the use of `saveMintBatch` instead of `mintBatch`.\\r\\n\\t *\\r\\n\\t * @dev Requires executor to have `ROLE_TOKEN_CREATOR` permission\\r\\n\\t *\\r\\n\\t * @param _to an address to mint tokens to\\r\\n\\t * @param _tokenId ID of the first token to mint\\r\\n\\t * @param n how many tokens to mint, sequentially increasing the _tokenId\\r\\n\\t */\\r\\n\\tfunction mintBatch(address _to, uint256 _tokenId, uint256 n) public override {\\r\\n\\t\\t// check if caller has sufficient permissions to mint tokens\\r\\n\\t\\trequire(isSenderInRole(ROLE_TOKEN_CREATOR), \\\"access denied\\\");\\r\\n\\r\\n\\t\\t// verify the inputs\\r\\n\\r\\n\\t\\t// verify destination address is set\\r\\n\\t\\trequire(_to != address(0), \\\"zero address\\\");\\r\\n\\t\\t// verify n is set properly\\r\\n\\t\\trequire(n > 1, \\\"n is too small\\\");\\r\\n\\t\\t// verify the token ID is \\\"tiny\\\" (32 bits long at most)\\r\\n\\t\\trequire(uint32(_tokenId) == _tokenId, \\\"token ID overflow\\\");\\r\\n\\t\\trequire(uint32(_tokenId + n - 1) == _tokenId + n - 1, \\\"n-th token ID overflow\\\");\\r\\n\\r\\n\\t\\t// verification: for each token to be minted\\r\\n\\t\\tfor(uint256 i = 0; i < n; i++) {\\r\\n\\t\\t\\t// verify token doesn't yet exist\\r\\n\\t\\t\\trequire(!exists(_tokenId + i), \\\"already minted\\\");\\r\\n\\r\\n\\t\\t\\t// Register token holding Epcho\\r\\n\\t\\t\\t_beforeTokenTransfer(address(0), _to, _tokenId + i);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create token ownership records,\\r\\n\\t\\t// add tokens to `allTokens` and new owner's collections\\r\\n\\t\\t// add tokens to both local and global collections (enumerations)\\r\\n\\t\\t__addTokens(_to, _tokenId, n);\\r\\n\\r\\n\\t\\t// events: for each token minted\\r\\n\\t\\tfor(uint256 i = 0; i < n; i++) {\\r\\n\\t\\t\\t// fire ERC721 transfer event\\r\\n\\t\\t\\temit Transfer(address(0), _to, _tokenId + i);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Destroys the token with token ID specified\\r\\n\\t *\\r\\n\\t * @dev Requires executor to have `ROLE_TOKEN_DESTROYER` permission\\r\\n\\t *      or FEATURE_OWN_BURNS/FEATURE_BURNS_ON_BEHALF features to be enabled\\r\\n\\t *\\r\\n\\t * @dev Can be disabled by the contract creator forever by disabling\\r\\n\\t *      FEATURE_OWN_BURNS/FEATURE_BURNS_ON_BEHALF features and then revoking\\r\\n\\t *      its own roles to burn tokens and to enable burning features\\r\\n\\t *\\r\\n\\t * @param _tokenId ID of the token to burn\\r\\n\\t */\\r\\n\\tfunction burn(uint256 _tokenId) public override {\\r\\n\\t\\t// read token owner data\\r\\n\\t\\t// verifies token exists under the hood\\r\\n\\t\\taddress _from = ownerOf(_tokenId);\\r\\n\\r\\n\\t\\t// check if caller has sufficient permissions to burn tokens\\r\\n\\t\\t// and if not - check for possibility to burn own tokens or to burn on behalf\\r\\n\\t\\tif(!isSenderInRole(ROLE_TOKEN_DESTROYER)) {\\r\\n\\t\\t\\t// if `_from` is equal to sender, require own burns feature to be enabled\\r\\n\\t\\t\\t// otherwise require burns on behalf feature to be enabled\\r\\n\\t\\t\\trequire(_from == msg.sender && isFeatureEnabled(FEATURE_OWN_BURNS)\\r\\n\\t\\t\\t     || _from != msg.sender && isFeatureEnabled(FEATURE_BURNS_ON_BEHALF),\\r\\n\\t\\t\\t        _from == msg.sender? \\\"burns are disabled\\\": \\\"burns on behalf are disabled\\\");\\r\\n\\r\\n\\t\\t\\t// verify sender is either token owner, or approved by the token owner to burn tokens\\r\\n\\t\\t\\trequire(_from == msg.sender || msg.sender == getApproved(_tokenId) || isApprovedForAll(_from, msg.sender), \\\"access denied\\\");\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// Register token holding Epcho\\r\\n\\t\\t_beforeTokenTransfer(msg.sender, address(0x0), _tokenId);\\r\\n\\r\\n\\t\\t// remove token ownership record (also clears approval),\\r\\n\\t\\t// remove token from both local and global collections\\r\\n\\t\\t__removeToken(_tokenId);\\r\\n\\r\\n\\t\\t// delete token URI mapping\\r\\n\\t\\tdelete _tokenURIs[_tokenId];\\r\\n\\r\\n\\t\\t// fire ERC721 transfer event\\r\\n\\t\\temit Transfer(_from, address(0), _tokenId);\\r\\n\\t}\\r\\n\\r\\n\\t// ===== End: mint/burn support =====\\r\\n\\r\\n\\t// ===== Start: Epcho Data support =====\\r\\n\\r\\n\\t/**\\r\\n     * @dev Hook that is called before any token transfer. This includes minting\\r\\n     * and burning.\\r\\n     *\\r\\n     * @dev Calling conditions:\\r\\n     *\\r\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\r\\n     * transferred to `to`.\\r\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\r\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n\\t *\\r\\n\\t * @param _from old owner address of token\\r\\n\\t * @param _to new owner address to add token to\\r\\n\\t * @param _tokenId token ID to add\\r\\n     */\\r\\n    function _beforeTokenTransfer(\\r\\n        address _from,\\r\\n        address _to,\\r\\n        uint256 _tokenId\\r\\n    ) internal virtual {\\r\\n\\t\\tif (_from != _to) {\\r\\n\\t\\t\\t_epochData[_tokenId][_generatedEpochs[_tokenId]] = Epoch(_lastSnap[_tokenId], block.timestamp, _from);\\r\\n\\t\\t\\t_generatedEpochs[_tokenId]++;\\r\\n\\t\\t\\t_lastSnap[_tokenId] = block.timestamp;\\r\\n\\t\\t}\\r\\n    }\\r\\n\\r\\n\\t// ===== End: Epcho Data support =====\\r\\n\\r\\n\\t// ----- Start: auxiliary internal/private functions -----\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Adds token to the new owner's collection (local),\\r\\n\\t *      used internally to transfer existing tokens, to mint new\\r\\n\\t *\\r\\n\\t * @dev Unsafe: doesn't check for data structures consistency\\r\\n\\t *      (token existence, token ownership, etc.)\\r\\n\\t *\\r\\n\\t * @dev Must be kept private at all times. Inheriting smart contracts\\r\\n\\t *      may be interested in overriding this function.\\r\\n\\t *\\r\\n\\t * @param _tokenId token ID to add\\r\\n\\t * @param _to new owner address to add token to\\r\\n\\t */\\r\\n\\tfunction __addLocal(uint256 _tokenId, address _to) internal virtual {\\r\\n\\t\\t// get a reference to the collection where token goes to\\r\\n\\t\\tuint32[] storage destination = collections[_to];\\r\\n\\r\\n\\t\\t// update local index and ownership, do not change global index\\r\\n\\t\\ttokens[_tokenId] = tokens[_tokenId]\\r\\n\\t\\t\\t//  |unused |global | local | ownership information (address)      |\\r\\n\\t\\t\\t& 0x00000000FFFFFFFF000000000000000000000000000000000000000000000000\\r\\n\\t\\t\\t| uint192(destination.length) << 160 | uint160(_to);\\r\\n\\r\\n\\t\\t// push token into the local collection\\r\\n\\t\\tdestination.push(uint32(_tokenId));\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Add token to both local and global collections (enumerations),\\r\\n\\t *      used internally to mint new tokens\\r\\n\\t *\\r\\n\\t * @dev Unsafe: doesn't check for data structures consistency\\r\\n\\t *      (token existence, token ownership, etc.)\\r\\n\\t *\\r\\n\\t * @dev Must be kept private at all times. Inheriting smart contracts\\r\\n\\t *      may be interested in overriding this function.\\r\\n\\t *\\r\\n\\t * @param _tokenId token ID to add\\r\\n\\t * @param _to new owner address to add token to\\r\\n\\t */\\r\\n\\tfunction __addToken(uint256 _tokenId, address _to) internal virtual {\\r\\n\\t\\t// get a reference to the collection where token goes to\\r\\n\\t\\tuint32[] storage destination = collections[_to];\\r\\n\\r\\n\\t\\t// update token global and local indexes, ownership\\r\\n\\t\\ttokens[_tokenId] = uint224(allTokens.length) << 192 | uint192(destination.length) << 160 | uint160(_to);\\r\\n\\r\\n\\t\\t// push token into the collection\\r\\n\\t\\tdestination.push(uint32(_tokenId));\\r\\n\\r\\n\\t\\t// push it into the global `allTokens` collection (enumeration)\\r\\n\\t\\tallTokens.push(uint32(_tokenId));\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Add tokens to both local and global collections (enumerations),\\r\\n\\t *      used internally to mint new tokens in batches\\r\\n\\t *\\r\\n\\t * @dev Token IDs to be added: [_tokenId, _tokenId + n)\\r\\n\\t *      n is expected to be greater or equal 2, but this is not checked\\r\\n\\t *\\r\\n\\t * @dev Unsafe: doesn't check for data structures consistency\\r\\n\\t *      (token existence, token ownership, etc.)\\r\\n\\t *\\r\\n\\t * @dev Must be kept private at all times. Inheriting smart contracts\\r\\n\\t *      may be interested in overriding this function.\\r\\n\\t *\\r\\n\\t * @param _to new owner address to add token to\\r\\n\\t * @param _tokenId first token ID to add\\r\\n\\t * @param n how many tokens to add, sequentially increasing the _tokenId\\r\\n\\t */\\r\\n\\tfunction __addTokens(address _to, uint256 _tokenId, uint256 n) internal virtual {\\r\\n\\t\\t// get a reference to the collection where tokens go to\\r\\n\\t\\tuint32[] storage destination = collections[_to];\\r\\n\\r\\n\\t\\t// for each token to be added\\r\\n\\t\\tfor(uint256 i = 0; i < n; i++) {\\r\\n\\t\\t\\t// update token global and local indexes, ownership\\r\\n\\t\\t\\ttokens[_tokenId + i] = uint224(allTokens.length + i) << 192 | uint192(destination.length + i) << 160 | uint160(_to);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// push tokens into the local collection\\r\\n\\t\\tdestination.push32(uint32(_tokenId), uint32(n));\\r\\n\\t\\t// push tokens into the global `allTokens` collection (enumeration)\\r\\n\\t\\tallTokens.push32(uint32(_tokenId), uint32(n));\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Removes token from owner's local collection,\\r\\n\\t *      used internally to transfer or burn existing tokens\\r\\n\\t *\\r\\n\\t * @dev Unsafe: doesn't check for data structures consistency\\r\\n\\t *      (token existence, token ownership, etc.)\\r\\n\\t *\\r\\n\\t * @dev Must be kept private at all times. Inheriting smart contracts\\r\\n\\t *      may be interested in overriding this function.\\r\\n\\t *\\r\\n\\t * @param _tokenId token ID to remove\\r\\n\\t */\\r\\n\\tfunction __removeLocal(uint256 _tokenId) internal virtual {\\r\\n\\t\\t// read token data, containing global and local indexes, owner address\\r\\n\\t\\tuint256 token = tokens[_tokenId];\\r\\n\\r\\n\\t\\t// get a reference to the token's owner collection (local)\\r\\n\\t\\tuint32[] storage source = collections[address(uint160(token))];\\r\\n\\r\\n\\t\\t// token index within the collection\\r\\n\\t\\tuint32 i = uint32(token >> 160);\\r\\n\\r\\n\\t\\t// get an ID of the last token in the collection\\r\\n\\t\\tuint32 sourceId = source[source.length - 1];\\r\\n\\r\\n\\t\\t// if the token we're to remove from the collection is not the last one,\\r\\n\\t\\t// we need to move last token in the collection into index `i`\\r\\n\\t\\tif(i != source.length - 1) {\\r\\n\\t\\t\\t// we put the last token in the collection to the position released\\r\\n\\r\\n\\t\\t\\t// update last token local index to point to proper place in the collection\\r\\n\\t\\t\\t// preserve global index and ownership info\\r\\n\\t\\t\\ttokens[sourceId] = tokens[sourceId]\\r\\n\\t\\t\\t\\t//  |unused |global | local | ownership information (address)      |\\r\\n\\t\\t\\t\\t& 0x00000000FFFFFFFF00000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\r\\n\\t\\t\\t\\t| uint192(i) << 160;\\r\\n\\r\\n\\t\\t\\t// put it into the position `i` within the collection\\r\\n\\t\\t\\tsource[i] = sourceId;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// trim the collection by removing last element\\r\\n\\t\\tsource.pop();\\r\\n\\r\\n\\t\\t// clear token approval (also emits an Approval event)\\r\\n\\t\\t__clearApproval(address(uint160(token)), _tokenId);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Removes token from both local and global collections (enumerations),\\r\\n\\t *      used internally to burn existing tokens\\r\\n\\t *\\r\\n\\t * @dev Unsafe: doesn't check for data structures consistency\\r\\n\\t *      (token existence, token ownership, etc.)\\r\\n\\t *\\r\\n\\t * @dev Must be kept private at all times. Inheriting smart contracts\\r\\n\\t *      may be interested in overriding this function.\\r\\n\\t *\\r\\n\\t * @param _tokenId token ID to remove\\r\\n\\t */\\r\\n\\tfunction __removeToken(uint256 _tokenId) internal virtual {\\r\\n\\t\\t// remove token from owner's (local) collection first\\r\\n\\t\\t__removeLocal(_tokenId);\\r\\n\\r\\n\\t\\t// token index within the global collection\\r\\n\\t\\tuint32 i = uint32(tokens[_tokenId] >> 192);\\r\\n\\r\\n\\t\\t// delete the token\\r\\n\\t\\tdelete tokens[_tokenId];\\r\\n\\r\\n\\t\\t// get an ID of the last token in the collection\\r\\n\\t\\tuint32 lastId = allTokens[allTokens.length - 1];\\r\\n\\r\\n\\t\\t// if the token we're to remove from the collection is not the last one,\\r\\n\\t\\t// we need to move last token in the collection into index `i`\\r\\n\\t\\tif(i != allTokens.length - 1) {\\r\\n\\t\\t\\t// we put the last token in the collection to the position released\\r\\n\\r\\n\\t\\t\\t// update last token global index to point to proper place in the collection\\r\\n\\t\\t\\t// preserve local index and ownership info\\r\\n\\t\\t\\ttokens[lastId] = tokens[lastId]\\r\\n\\t\\t\\t\\t//  |unused |global | local | ownership information (address)      |\\r\\n\\t\\t\\t\\t& 0x0000000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\r\\n\\t\\t\\t\\t| uint224(i) << 192;\\r\\n\\r\\n\\t\\t\\t// put it into the position `i` within the collection\\r\\n\\t\\t\\tallTokens[i] = lastId;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// trim the collection by removing last element\\r\\n\\t\\tallTokens.pop();\\r\\n\\t}\\r\\n\\r\\n\\t// ----- End: auxiliary internal/private functions -----\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/utils/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.7;\\r\\n\\r\\n/**\\r\\n * @title Access Control List\\r\\n *\\r\\n * @notice Access control smart contract provides an API to check\\r\\n *      if specific operation is permitted globally and/or\\r\\n *      if particular user has a permission to execute it.\\r\\n *\\r\\n * @notice It deals with two main entities: features and roles.\\r\\n *\\r\\n * @notice Features are designed to be used to enable/disable specific\\r\\n *      functions (public functions) of the smart contract for everyone.\\r\\n * @notice User roles are designed to restrict access to specific\\r\\n *      functions (restricted functions) of the smart contract to some users.\\r\\n *\\r\\n * @notice Terms \\\"role\\\", \\\"permissions\\\" and \\\"set of permissions\\\" have equal meaning\\r\\n *      in the documentation text and may be used interchangeably.\\r\\n * @notice Terms \\\"permission\\\", \\\"single permission\\\" implies only one permission bit set.\\r\\n *\\r\\n * @notice Access manager is a special role which allows to grant/revoke other roles.\\r\\n *      Access managers can only grant/revoke permissions which they have themselves.\\r\\n *      As an example, access manager with no other roles set can only grant/revoke its own\\r\\n *      access manager permission and nothing else.\\r\\n *\\r\\n * @notice Access manager permission should be treated carefully, as a super admin permission:\\r\\n *      Access manager with even no other permission can interfere with another account by\\r\\n *      granting own access manager permission to it and effectively creating more powerful\\r\\n *      permission set than its own.\\r\\n *\\r\\n * @dev Both current and OpenZeppelin AccessControl implementations feature a similar API\\r\\n *      to check/know \\\"who is allowed to do this thing\\\".\\r\\n * @dev Zeppelin implementation is more flexible:\\r\\n *      - it allows setting unlimited number of roles, while current is limited to 256 different roles\\r\\n *      - it allows setting an admin for each role, while current allows having only one global admin\\r\\n * @dev Current implementation is more lightweight:\\r\\n *      - it uses only 1 bit per role, while Zeppelin uses 256 bits\\r\\n *      - it allows setting up to 256 roles at once, in a single transaction, while Zeppelin allows\\r\\n *        setting only one role in a single transaction\\r\\n *\\r\\n * @dev This smart contract is designed to be inherited by other\\r\\n *      smart contracts which require access control management capabilities.\\r\\n *\\r\\n * @dev Access manager permission has a bit 255 set.\\r\\n *      This bit must not be used by inheriting contracts for any other permissions/features.\\r\\n *\\r\\n * @author Unblock Technolabs (Vijay Bhayani)\\r\\n */\\r\\ncontract AccessControl {\\r\\n\\t/**\\r\\n\\t * @notice Access manager is responsible for assigning the roles to users,\\r\\n\\t *      enabling/disabling global features of the smart contract\\r\\n\\t * @notice Access manager can add, remove and update user roles,\\r\\n\\t *      remove and update global features\\r\\n\\t *\\r\\n\\t * @dev Role ROLE_ACCESS_MANAGER allows modifying user roles and global features\\r\\n\\t * @dev Role ROLE_ACCESS_MANAGER has single bit at position 255 enabled\\r\\n\\t */\\r\\n\\tuint256 public constant ROLE_ACCESS_MANAGER = 0x8000000000000000000000000000000000000000000000000000000000000000;\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Bitmask representing all the possible permissions (super admin role)\\r\\n\\t * @dev Has all the bits are enabled (2^256 - 1 value)\\r\\n\\t */\\r\\n\\tuint256 private constant FULL_PRIVILEGES_MASK = type(uint256).max; // before 0.8.0: uint256(-1) overflows to 0xFFFF...\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Privileged addresses with defined roles/permissions\\r\\n\\t * @notice In the context of ERC20/ERC721 tokens these can be permissions to\\r\\n\\t *      allow minting or burning tokens, transferring on behalf and so on\\r\\n\\t *\\r\\n\\t * @dev Maps user address to the permissions bitmask (role), where each bit\\r\\n\\t *      represents a permission\\r\\n\\t * @dev Bitmask 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\r\\n\\t *      represents all possible permissions\\r\\n\\t * @dev 'This' address mapping represents global features of the smart contract\\r\\n\\t */\\r\\n\\tmapping(address => uint256) public userRoles;\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Fired in updateRole() and updateFeatures()\\r\\n\\t *\\r\\n\\t * @param _by operator which called the function\\r\\n\\t * @param _to address which was granted/revoked permissions\\r\\n\\t * @param _requested permissions requested\\r\\n\\t * @param _actual permissions effectively set\\r\\n\\t */\\r\\n\\tevent RoleUpdated(address indexed _by, address indexed _to, uint256 _requested, uint256 _actual);\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Creates an access control instance,\\r\\n\\t *      setting contract creator to have full privileges\\r\\n\\t */\\r\\n\\tconstructor() {\\r\\n\\t\\t// contract creator has full privileges\\r\\n\\t\\tuserRoles[msg.sender] = FULL_PRIVILEGES_MASK;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Retrieves globally set of features enabled\\r\\n\\t *\\r\\n\\t * @dev Effectively reads userRoles role for the contract itself\\r\\n\\t *\\r\\n\\t * @return 256-bit bitmask of the features enabled\\r\\n\\t */\\r\\n\\tfunction features() public view returns(uint256) {\\r\\n\\t\\t// features are stored in 'this' address  mapping of `userRoles` structure\\r\\n\\t\\treturn userRoles[address(this)];\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Updates set of the globally enabled features (`features`),\\r\\n\\t *      taking into account sender's permissions\\r\\n\\t *\\r\\n\\t * @dev Requires transaction sender to have `ROLE_ACCESS_MANAGER` permission\\r\\n\\t * @dev Function is left for backward compatibility with older versions\\r\\n\\t *\\r\\n\\t * @param _mask bitmask representing a set of features to enable/disable\\r\\n\\t */\\r\\n\\tfunction updateFeatures(uint256 _mask) public {\\r\\n\\t\\t// delegate call to `updateRole`\\r\\n\\t\\tupdateRole(address(this), _mask);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Updates set of permissions (role) for a given user,\\r\\n\\t *      taking into account sender's permissions.\\r\\n\\t *\\r\\n\\t * @dev Setting role to zero is equivalent to removing an all permissions\\r\\n\\t * @dev Setting role to `FULL_PRIVILEGES_MASK` is equivalent to\\r\\n\\t *      copying senders' permissions (role) to the user\\r\\n\\t * @dev Requires transaction sender to have `ROLE_ACCESS_MANAGER` permission\\r\\n\\t *\\r\\n\\t * @param operator address of a user to alter permissions for or zero\\r\\n\\t *      to alter global features of the smart contract\\r\\n\\t * @param role bitmask representing a set of permissions to\\r\\n\\t *      enable/disable for a user specified\\r\\n\\t */\\r\\n\\tfunction updateRole(address operator, uint256 role) public {\\r\\n\\t\\t// caller must have a permission to update user roles\\r\\n\\t\\trequire(isSenderInRole(ROLE_ACCESS_MANAGER), \\\"access denied\\\");\\r\\n\\r\\n\\t\\t// evaluate the role and reassign it\\r\\n\\t\\tuserRoles[operator] = evaluateBy(msg.sender, userRoles[operator], role);\\r\\n\\r\\n\\t\\t// fire an event\\r\\n\\t\\temit RoleUpdated(msg.sender, operator, role, userRoles[operator]);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Determines the permission bitmask an operator can set on the\\r\\n\\t *      target permission set\\r\\n\\t * @notice Used to calculate the permission bitmask to be set when requested\\r\\n\\t *     in `updateRole` and `updateFeatures` functions\\r\\n\\t *\\r\\n\\t * @dev Calculated based on:\\r\\n\\t *      1) operator's own permission set read from userRoles[operator]\\r\\n\\t *      2) target permission set - what is already set on the target\\r\\n\\t *      3) desired permission set - what do we want set target to\\r\\n\\t *\\r\\n\\t * @dev Corner cases:\\r\\n\\t *      1) Operator is super admin and its permission set is `FULL_PRIVILEGES_MASK`:\\r\\n\\t *        `desired` bitset is returned regardless of the `target` permission set value\\r\\n\\t *        (what operator sets is what they get)\\r\\n\\t *      2) Operator with no permissions (zero bitset):\\r\\n\\t *        `target` bitset is returned regardless of the `desired` value\\r\\n\\t *        (operator has no authority and cannot modify anything)\\r\\n\\t *\\r\\n\\t * @dev Example:\\r\\n\\t *      Consider an operator with the permissions bitmask     00001111\\r\\n\\t *      is about to modify the target permission set          01010101\\r\\n\\t *      Operator wants to set that permission set to          00110011\\r\\n\\t *      Based on their role, an operator has the permissions\\r\\n\\t *      to update only lowest 4 bits on the target, meaning that\\r\\n\\t *      high 4 bits of the target set in this example is left\\r\\n\\t *      unchanged and low 4 bits get changed as desired:      01010011\\r\\n\\t *\\r\\n\\t * @param operator address of the contract operator which is about to set the permissions\\r\\n\\t * @param target input set of permissions to operator is going to modify\\r\\n\\t * @param desired desired set of permissions operator would like to set\\r\\n\\t * @return resulting set of permissions given operator will set\\r\\n\\t */\\r\\n\\tfunction evaluateBy(address operator, uint256 target, uint256 desired) public view returns(uint256) {\\r\\n\\t\\t// read operator's permissions\\r\\n\\t\\tuint256 p = userRoles[operator];\\r\\n\\r\\n\\t\\t// taking into account operator's permissions,\\r\\n\\t\\t// 1) enable the permissions desired on the `target`\\r\\n\\t\\ttarget |= p & desired;\\r\\n\\t\\t// 2) disable the permissions desired on the `target`\\r\\n\\t\\ttarget &= FULL_PRIVILEGES_MASK ^ (p & (FULL_PRIVILEGES_MASK ^ desired));\\r\\n\\r\\n\\t\\t// return calculated result\\r\\n\\t\\treturn target;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Checks if requested set of features is enabled globally on the contract\\r\\n\\t *\\r\\n\\t * @param required set of features to check against\\r\\n\\t * @return true if all the features requested are enabled, false otherwise\\r\\n\\t */\\r\\n\\tfunction isFeatureEnabled(uint256 required) public view returns(bool) {\\r\\n\\t\\t// delegate call to `__hasRole`, passing `features` property\\r\\n\\t\\treturn __hasRole(features(), required);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Checks if transaction sender `msg.sender` has all the permissions required\\r\\n\\t *\\r\\n\\t * @param required set of permissions (role) to check against\\r\\n\\t * @return true if all the permissions requested are enabled, false otherwise\\r\\n\\t */\\r\\n\\tfunction isSenderInRole(uint256 required) public view returns(bool) {\\r\\n\\t\\t// delegate call to `isOperatorInRole`, passing transaction sender\\r\\n\\t\\treturn isOperatorInRole(msg.sender, required);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Checks if operator has all the permissions (role) required\\r\\n\\t *\\r\\n\\t * @param operator address of the user to check role for\\r\\n\\t * @param required set of permissions (role) to check\\r\\n\\t * @return true if all the permissions requested are enabled, false otherwise\\r\\n\\t */\\r\\n\\tfunction isOperatorInRole(address operator, uint256 required) public view returns(bool) {\\r\\n\\t\\t// delegate call to `__hasRole`, passing operator's permissions (role)\\r\\n\\t\\treturn __hasRole(userRoles[operator], required);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Checks if role `actual` contains all the permissions required `required`\\r\\n\\t *\\r\\n\\t * @param actual existent role\\r\\n\\t * @param required required role\\r\\n\\t * @return true if actual has required role (all permissions), false otherwise\\r\\n\\t */\\r\\n\\tfunction __hasRole(uint256 actual, uint256 required) internal pure returns(bool) {\\r\\n\\t\\t// check the bitmask for the role required and return the result\\r\\n\\t\\treturn actual & required == required;\\r\\n\\t}\\r\\n}\\r\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_oldVal\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_newVal\",\"type\":\"string\"}],\"name\":\"BaseURIUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_requested\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_actual\",\"type\":\"uint256\"}],\"name\":\"RoleUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_oldVal\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_newVal\",\"type\":\"string\"}],\"name\":\"TokenURIUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BATCH_SIZE_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEATURE_BURNS_ON_BEHALF\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEATURE_OPERATOR_PERMITS\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEATURE_OWN_BURNS\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEATURE_PERMITS\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEATURE_TRANSFERS\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEATURE_TRANSFERS_ON_BEHALF\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_FOR_ALL_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROLE_ACCESS_MANAGER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROLE_TOKEN_CREATOR\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROLE_TOKEN_DESTROYER\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROLE_URI_MANAGER\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_epochData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"HolderAddr\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_generatedEpochs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_lastSnap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_approved\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenId\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_data\",\"type\":\"bytes[]\"}],\"name\":\"batchSafeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenId\",\"type\":\"uint256[]\"}],\"name\":\"batchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"desired\",\"type\":\"uint256\"}],\"name\":\"evaluateBy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"features\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"isFeatureEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"isOperatorInRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"isSenderInRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"isTransferable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"n\",\"type\":\"uint256\"}],\"name\":\"mintBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_exp\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_exp\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permitForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"permitNonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"n\",\"type\":\"uint256\"}],\"name\":\"safeMintBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"n\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeMintBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_baseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"setTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mask\",\"type\":\"uint256\"}],\"name\":\"updateFeatures\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"role\",\"type\":\"uint256\"}],\"name\":\"updateRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRoles\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "PatchOwnershipNFT", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000001350617463684f776e657273686970546f6b656e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005504f4e4654000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}