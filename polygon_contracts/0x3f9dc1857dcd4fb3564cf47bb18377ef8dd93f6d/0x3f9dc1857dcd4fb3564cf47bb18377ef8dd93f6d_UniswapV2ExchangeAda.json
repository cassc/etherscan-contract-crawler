{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable2Step.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Ownable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2Step is Ownable {\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() public virtual {\\n        address sender = _msgSender();\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\n        _transferOwnership(sender);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeCast.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/external/aave-v2/IAToken.sol\": {\r\n      \"content\": \"/*\\n  Copyright 2021 Set Labs Inc.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n  http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n  SPDX-License-Identifier: Apache-2.0\\n*/\\npragma solidity 0.8.21;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\ninterface IAToken is IERC20 {\\n    function UNDERLYING_ASSET_ADDRESS() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/external/aave-v2/ILendingPool.sol\": {\r\n      \"content\": \"/*\\n  Copyright 2021 Set Labs Inc.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n  http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n  SPDX-License-Identifier: Apache-2.0\\n*/\\npragma solidity 0.8.21;\\n\\nimport { ILendingPoolAddressesProvider } from \\\"./ILendingPoolAddressesProvider.sol\\\";\\nimport { DataTypes } from \\\"./lib/DataTypes.sol\\\";\\n\\ninterface ILendingPool {\\n  /**\\n   * @dev Emitted on deposit()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address initiating the deposit\\n   * @param onBehalfOf The beneficiary of the deposit, receiving the aTokens\\n   * @param amount The amount deposited\\n   * @param referral The referral code used\\n   **/\\n  event Deposit(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    uint16 indexed referral\\n  );\\n\\n  /**\\n   * @dev Emitted on withdraw()\\n   * @param reserve The address of the underlyng asset being withdrawn\\n   * @param user The address initiating the withdrawal, owner of aTokens\\n   * @param to Address that will receive the underlying\\n   * @param amount The amount to be withdrawn\\n   **/\\n  event Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\\n\\n  /**\\n   * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\\n   * @param reserve The address of the underlying asset being borrowed\\n   * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\\n   * initiator of the transaction on flashLoan()\\n   * @param onBehalfOf The address that will be getting the debt\\n   * @param amount The amount borrowed out\\n   * @param borrowRateMode The rate mode: 1 for Stable, 2 for Variable\\n   * @param borrowRate The numeric rate at which the user has borrowed\\n   * @param referral The referral code used\\n   **/\\n  event Borrow(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    uint256 borrowRateMode,\\n    uint256 borrowRate,\\n    uint16 indexed referral\\n  );\\n\\n  /**\\n   * @dev Emitted on repay()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The beneficiary of the repayment, getting his debt reduced\\n   * @param repayer The address of the user initiating the repay(), providing the funds\\n   * @param amount The amount repaid\\n   **/\\n  event Repay(\\n    address indexed reserve,\\n    address indexed user,\\n    address indexed repayer,\\n    uint256 amount\\n  );\\n\\n  /**\\n   * @dev Emitted on swapBorrowRateMode()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user swapping his rate mode\\n   * @param rateMode The rate mode that the user wants to swap to\\n   **/\\n  event Swap(address indexed reserve, address indexed user, uint256 rateMode);\\n\\n  /**\\n   * @dev Emitted on setUserUseReserveAsCollateral()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user enabling the usage as collateral\\n   **/\\n  event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on setUserUseReserveAsCollateral()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user enabling the usage as collateral\\n   **/\\n  event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on rebalanceStableBorrowRate()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user for which the rebalance has been executed\\n   **/\\n  event RebalanceStableBorrowRate(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on flashLoan()\\n   * @param target The address of the flash loan receiver contract\\n   * @param initiator The address initiating the flash loan\\n   * @param asset The address of the asset being flash borrowed\\n   * @param amount The amount flash borrowed\\n   * @param premium The fee flash borrowed\\n   * @param referralCode The referral code used\\n   **/\\n  event FlashLoan(\\n    address indexed target,\\n    address indexed initiator,\\n    address indexed asset,\\n    uint256 amount,\\n    uint256 premium,\\n    uint16 referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted when the pause is triggered.\\n   */\\n  event Paused();\\n\\n  /**\\n   * @dev Emitted when the pause is lifted.\\n   */\\n  event Unpaused();\\n\\n  /**\\n   * @dev Emitted when a borrower is liquidated. This event is emitted by the LendingPool via\\n   * LendingPoolCollateral manager using a DELEGATECALL\\n   * This allows to have the events in the generated ABI for LendingPool.\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n   * @param user The address of the borrower getting liquidated\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n   * @param liquidatedCollateralAmount The amount of collateral received by the liiquidator\\n   * @param liquidator The address of the liquidator\\n   * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n   * to receive the underlying collateral asset directly\\n   **/\\n  event LiquidationCall(\\n    address indexed collateralAsset,\\n    address indexed debtAsset,\\n    address indexed user,\\n    uint256 debtToCover,\\n    uint256 liquidatedCollateralAmount,\\n    address liquidator,\\n    bool receiveAToken\\n  );\\n\\n  /**\\n   * @dev Emitted when the state of a reserve is updated. NOTE: This event is actually declared\\n   * in the ReserveLogic library and emitted in the updateInterestRates() function. Since the function is internal,\\n   * the event will actually be fired by the LendingPool contract. The event is therefore replicated here so it\\n   * gets added to the LendingPool ABI\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param liquidityRate The new liquidity rate\\n   * @param stableBorrowRate The new stable borrow rate\\n   * @param variableBorrowRate The new variable borrow rate\\n   * @param liquidityIndex The new liquidity index\\n   * @param variableBorrowIndex The new variable borrow index\\n   **/\\n  event ReserveDataUpdated(\\n    address indexed reserve,\\n    uint256 liquidityRate,\\n    uint256 stableBorrowRate,\\n    uint256 variableBorrowRate,\\n    uint256 liquidityIndex,\\n    uint256 variableBorrowIndex\\n  );\\n\\n  /**\\n   * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n   * - E.g. User deposits 100 USDC and gets in return 100 aUSDC\\n   * @param asset The address of the underlying asset to deposit\\n   * @param amount The amount to be deposited\\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n   *   is a different wallet\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function deposit(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n   * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n   * @param asset The address of the underlying asset to withdraw\\n   * @param amount The underlying amount to be withdrawn\\n   *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n   * @param to Address that will receive the underlying, same as msg.sender if the user\\n   *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n   *   different wallet\\n   * @return The final amount withdrawn\\n   **/\\n  function withdraw(\\n    address asset,\\n    uint256 amount,\\n    address to\\n  ) external returns (uint256);\\n\\n  /**\\n   * @dev Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\n   * already deposited enough collateral, or he was given enough allowance by a credit delegator on the\\n   * corresponding debt token (StableDebtToken or VariableDebtToken)\\n   * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\n   *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\n   * @param asset The address of the underlying asset to borrow\\n   * @param amount The amount to be borrowed\\n   * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   * @param onBehalfOf Address of the user who will receive the debt. Should be the address of the borrower itself\\n   * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\n   * if he has been given credit delegation allowance\\n   **/\\n  function borrow(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode,\\n    uint16 referralCode,\\n    address onBehalfOf\\n  ) external;\\n\\n  /**\\n   * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\n   * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\n   * @param amount The amount to repay\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n   * @param rateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n   * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\\n   * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n   * other borrower whose debt should be removed\\n   * @return The final amount repaid\\n   **/\\n  function repay(\\n    address asset,\\n    uint256 amount,\\n    uint256 rateMode,\\n    address onBehalfOf\\n  ) external returns (uint256);\\n\\n  /**\\n   * @dev Allows a borrower to swap his debt between stable and variable mode, or viceversa\\n   * @param asset The address of the underlying asset borrowed\\n   * @param rateMode The rate mode that the user wants to swap to\\n   **/\\n  function swapBorrowRateMode(address asset, uint256 rateMode) external;\\n\\n  /**\\n   * @dev Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\\n   * - Users can be rebalanced if the following conditions are satisfied:\\n   *     1. Usage ratio is above 95%\\n   *     2. the current deposit APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too much has been\\n   *        borrowed at a stable rate and depositors are not earning enough\\n   * @param asset The address of the underlying asset borrowed\\n   * @param user The address of the user to be rebalanced\\n   **/\\n  function rebalanceStableBorrowRate(address asset, address user) external;\\n\\n  /**\\n   * @dev Allows depositors to enable/disable a specific deposited asset as collateral\\n   * @param asset The address of the underlying asset deposited\\n   * @param useAsCollateral `true` if the user wants to use the deposit as collateral, `false` otherwise\\n   **/\\n  function setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\\n\\n  /**\\n   * @dev Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\n   * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\\n   *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n   * @param user The address of the borrower getting liquidated\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n   * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n   * to receive the underlying collateral asset directly\\n   **/\\n  function liquidationCall(\\n    address collateralAsset,\\n    address debtAsset,\\n    address user,\\n    uint256 debtToCover,\\n    bool receiveAToken\\n  ) external;\\n\\n  /**\\n   * @dev Allows smartcontracts to access the liquidity of the pool within one transaction,\\n   * as long as the amount taken plus a fee is returned.\\n   * IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept into consideration.\\n   * For further details please visit https://developers.aave.com\\n   * @param receiverAddress The address of the contract receiving the funds, implementing the IFlashLoanReceiver interface\\n   * @param assets The addresses of the assets being flash-borrowed\\n   * @param amounts The amounts amounts being flash-borrowed\\n   * @param modes Types of the debt to open if the flash loan is not returned:\\n   *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\\n   *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n   *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n   * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\\n   * @param params Variadic packed params to pass to the receiver as extra information\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function flashLoan(\\n    address receiverAddress,\\n    address[] calldata assets,\\n    uint256[] calldata amounts,\\n    uint256[] calldata modes,\\n    address onBehalfOf,\\n    bytes calldata params,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @dev Returns the user account data across all the reserves\\n   * @param user The address of the user\\n   * @return totalCollateralETH the total collateral in ETH of the user\\n   * @return totalDebtETH the total debt in ETH of the user\\n   * @return availableBorrowsETH the borrowing power left of the user\\n   * @return currentLiquidationThreshold the liquidation threshold of the user\\n   * @return ltv the loan to value of the user\\n   * @return healthFactor the current health factor of the user\\n   **/\\n  function getUserAccountData(address user)\\n    external\\n    view\\n    returns (\\n      uint256 totalCollateralETH,\\n      uint256 totalDebtETH,\\n      uint256 availableBorrowsETH,\\n      uint256 currentLiquidationThreshold,\\n      uint256 ltv,\\n      uint256 healthFactor\\n    );\\n\\n  function initReserve(\\n    address reserve,\\n    address aTokenAddress,\\n    address stableDebtAddress,\\n    address variableDebtAddress,\\n    address interestRateStrategyAddress\\n  ) external;\\n\\n  function setReserveInterestRateStrategyAddress(address reserve, address rateStrategyAddress)\\n    external;\\n\\n  function setConfiguration(address reserve, uint256 configuration) external;\\n\\n  /**\\n   * @dev Returns the configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The configuration of the reserve\\n   **/\\n  function getConfiguration(address asset)\\n    external\\n    view\\n    returns (DataTypes.ReserveConfigurationMap memory);\\n\\n  /**\\n   * @dev Returns the configuration of the user across all the reserves\\n   * @param user The user address\\n   * @return The configuration of the user\\n   **/\\n  function getUserConfiguration(address user)\\n    external\\n    view\\n    returns (DataTypes.UserConfigurationMap memory);\\n\\n  /**\\n   * @dev Returns the normalized income normalized income of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve's normalized income\\n   */\\n  function getReserveNormalizedIncome(address asset) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the normalized variable debt per unit of asset\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve normalized variable debt\\n   */\\n  function getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the state and configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The state of the reserve\\n   **/\\n  function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\\n\\n  function finalizeTransfer(\\n    address asset,\\n    address from,\\n    address to,\\n    uint256 amount,\\n    uint256 balanceFromAfter,\\n    uint256 balanceToBefore\\n  ) external;\\n\\n  function getReservesList() external view returns (address[] memory);\\n\\n  function getAddressesProvider() external view returns (ILendingPoolAddressesProvider);\\n\\n  function setPause(bool val) external;\\n\\n  function paused() external view returns (bool);\\n  \\n  function FLASHLOAN_PREMIUM_TOTAL() external view returns (uint256);\\n}\\n\\n\"\r\n    },\r\n    \"contracts/interfaces/external/aave-v2/ILendingPoolAddressesProvider.sol\": {\r\n      \"content\": \"/*\\n  Copyright 2021 Set Labs Inc.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n  http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n  SPDX-License-Identifier: Apache-2.0\\n*/\\npragma solidity 0.8.21;\\n\\n/**\\n * @title LendingPoolAddressesProvider contract\\n * @dev Main registry of addresses part of or connected to the protocol, including permissioned roles\\n * - Acting also as factory of proxies and admin of those, so with right to change its implementations\\n * - Owned by the Aave Governance\\n * @author Aave\\n **/\\ninterface ILendingPoolAddressesProvider {\\n  event MarketIdSet(string newMarketId);\\n  event LendingPoolUpdated(address indexed newAddress);\\n  event ConfigurationAdminUpdated(address indexed newAddress);\\n  event EmergencyAdminUpdated(address indexed newAddress);\\n  event LendingPoolConfiguratorUpdated(address indexed newAddress);\\n  event LendingPoolCollateralManagerUpdated(address indexed newAddress);\\n  event PriceOracleUpdated(address indexed newAddress);\\n  event LendingRateOracleUpdated(address indexed newAddress);\\n  event ProxyCreated(bytes32 id, address indexed newAddress);\\n  event AddressSet(bytes32 id, address indexed newAddress, bool hasProxy);\\n\\n  function getMarketId() external view returns (string memory);\\n\\n  function setMarketId(string calldata marketId) external;\\n\\n  function setAddress(bytes32 id, address newAddress) external;\\n\\n  function setAddressAsProxy(bytes32 id, address impl) external;\\n\\n  function getAddress(bytes32 id) external view returns (address);\\n\\n  function getLendingPool() external view returns (address);\\n\\n  function setLendingPoolImpl(address pool) external;\\n\\n  function getLendingPoolConfigurator() external view returns (address);\\n\\n  function setLendingPoolConfiguratorImpl(address configurator) external;\\n\\n  function getLendingPoolCollateralManager() external view returns (address);\\n\\n  function setLendingPoolCollateralManager(address manager) external;\\n\\n  function getPoolAdmin() external view returns (address);\\n\\n  function setPoolAdmin(address admin) external;\\n\\n  function getEmergencyAdmin() external view returns (address);\\n\\n  function setEmergencyAdmin(address admin) external;\\n\\n  function getPriceOracle() external view returns (address);\\n\\n  function setPriceOracle(address priceOracle) external;\\n\\n  function getLendingRateOracle() external view returns (address);\\n\\n  function setLendingRateOracle(address lendingRateOracle) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/external/aave-v2/IProtocolDataProvider.sol\": {\r\n      \"content\": \"/*\\n  Copyright 2021 Set Labs Inc.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n  http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\npragma solidity 0.8.21;\\n\\nimport { ILendingPoolAddressesProvider } from \\\"./ILendingPoolAddressesProvider.sol\\\";\\n\\ninterface IProtocolDataProvider {\\n  struct TokenData {\\n    string symbol;\\n    address tokenAddress;\\n  }\\n\\n  function ADDRESSES_PROVIDER() external view returns (ILendingPoolAddressesProvider);\\n  function getAllReservesTokens() external view returns (TokenData[] memory);\\n  function getAllATokens() external view returns (TokenData[] memory);\\n  function getReserveConfigurationData(address asset) external view returns (uint256 decimals, uint256 ltv, uint256 liquidationThreshold, uint256 liquidationBonus, uint256 reserveFactor, bool usageAsCollateralEnabled, bool borrowingEnabled, bool stableBorrowRateEnabled, bool isActive, bool isFrozen);\\n  function getReserveData(address asset) external view returns (uint256 availableLiquidity, uint256 totalStableDebt, uint256 totalVariableDebt, uint256 liquidityRate, uint256 variableBorrowRate, uint256 stableBorrowRate, uint256 averageStableBorrowRate, uint256 liquidityIndex, uint256 variableBorrowIndex, uint40 lastUpdateTimestamp);\\n  function getUserReserveData(address asset, address user) external view returns (uint256 currentATokenBalance, uint256 currentStableDebt, uint256 currentVariableDebt, uint256 principalStableDebt, uint256 scaledVariableDebt, uint256 stableBorrowRate, uint256 liquidityRate, uint40 stableRateLastUpdated, bool usageAsCollateralEnabled);\\n  function getReserveTokensAddresses(address asset) external view returns (address aTokenAddress, address stableDebtTokenAddress, address variableDebtTokenAddress);\\n}\"\r\n    },\r\n    \"contracts/interfaces/external/aave-v2/IVariableDebtToken.sol\": {\r\n      \"content\": \"/*\\n  Copyright 2021 Set Labs Inc.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n  http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n  SPDX-License-Identifier: Apache-2.0\\n*/\\npragma solidity 0.8.21;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title IVariableDebtToken\\n * @author Aave\\n * @notice Defines the basic interface for a variable debt token.\\n **/\\ninterface IVariableDebtToken is IERC20 {}\\n\"\r\n    },\r\n    \"contracts/interfaces/external/aave-v2/lib/DataTypes.sol\": {\r\n      \"content\": \"/*\\n  Copyright 2021 Set Labs Inc.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n  http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n  SPDX-License-Identifier: Apache-2.0\\n*/\\npragma solidity 0.8.21;\\n\\nlibrary DataTypes {\\n  // refer to the whitepaper, section 1.1 basic concepts for a formal description of these properties.\\n  struct ReserveData {\\n    //stores the reserve configuration\\n    ReserveConfigurationMap configuration;\\n    //the liquidity index. Expressed in ray\\n    uint128 liquidityIndex;\\n    //variable borrow index. Expressed in ray\\n    uint128 variableBorrowIndex;\\n    //the current supply rate. Expressed in ray\\n    uint128 currentLiquidityRate;\\n    //the current variable borrow rate. Expressed in ray\\n    uint128 currentVariableBorrowRate;\\n    //the current stable borrow rate. Expressed in ray\\n    uint128 currentStableBorrowRate;\\n    uint40 lastUpdateTimestamp;\\n    //tokens addresses\\n    address aTokenAddress;\\n    address stableDebtTokenAddress;\\n    address variableDebtTokenAddress;\\n    //address of the interest rate strategy\\n    address interestRateStrategyAddress;\\n    //the id of the reserve. Represents the position in the list of the active reserves\\n    uint8 id;\\n  }\\n\\n  struct ReserveConfigurationMap {\\n    //bit 0-15: LTV\\n    //bit 16-31: Liq. threshold\\n    //bit 32-47: Liq. bonus\\n    //bit 48-55: Decimals\\n    //bit 56: Reserve is active\\n    //bit 57: reserve is frozen\\n    //bit 58: borrowing is enabled\\n    //bit 59: stable rate borrowing enabled\\n    //bit 60-63: reserved\\n    //bit 64-79: reserve factor\\n    uint256 data;\\n  }\\n\\n  struct UserConfigurationMap {\\n    uint256 data;\\n  }\\n\\n  enum InterestRateMode {NONE, STABLE, VARIABLE}\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/external/ISanctionsList.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2023 Amun Holdings Limited and affiliated entities.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\ninterface ISanctionsList {\\n    function isSanctioned(address addr) external view returns (bool);\\n}\"\r\n    },\r\n    \"contracts/interfaces/external/IStakingRewards.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\ninterface IStakingRewards {\\n    function balanceOf(address account) external view returns (uint256);\\n    function earned(address account) external view returns (uint256);\\n    function stake(uint256 amount) external;\\n    function withdraw(uint256 amount) external;\\n    function getReward() external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/external/ISwapRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.21;\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/external/IUniswapV2Factory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.21;\\n\\ninterface IUniswapV2Factory {\\n  event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n  function getPair(address tokenA, address tokenB) external view returns (address pair);\\n  function allPairs(uint) external view returns (address pair);\\n  function allPairsLength() external view returns (uint);\\n\\n  function feeTo() external view returns (address);\\n  function feeToSetter() external view returns (address);\\n\\n  function createPair(address tokenA, address tokenB) external returns (address pair);\\n}\"\r\n    },\r\n    \"contracts/interfaces/external/IUniswapV2Pair.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n    http://www.apache.org/licenses/LICENSE-2.0\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/external/IUniswapV2Router.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\ninterface IUniswapV2Router {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\"\r\n    },\r\n    \"contracts/interfaces/external/IWETH.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2018 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title IWETH\\n * @author Set Protocol\\n *\\n * Interface for Wrapped Ether. This interface allows for interaction for wrapped ether's deposit and withdrawal\\n * functionality.\\n */\\ninterface IWETH is IERC20{\\n    function deposit()\\n        external\\n        payable;\\n\\n    function withdraw(\\n        uint256 wad\\n    )\\n        external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IAaveLeverageModule.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2021 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { ISetToken } from \\\"./ISetToken.sol\\\";\\n\\ninterface IAaveLeverageModule {\\n    \\n    /* ============ Custom Errors ============ */\\n\\n    /// @notice Emitted when an invalid aToken (collateral) address is provided.\\n    error AaveLeverageModule__ATokenInvalid(address aToken);\\n    /// @notice Emitted when the borrow balance (notionalSendQuantity) is zero.\\n    error AaveLeverageModule__BorrowBalanceZero();\\n    /// @notice Emitted when borrowing is disabled for a given asset.\\n    error AaveLeverageModule__BorrowDisabled(address asset);\\n    /// @notice Emitted when borrowing is already enabled for a given asset.\\n    error AaveLeverageModule__BorrowIsEnabled();\\n    /// @notice Emitted when the collateral asset and borrow asset are the same.\\n    error AaveLeverageModule__CollateralAndBorrowMustDiffer(address collateralAsset, address borrowAsset);\\n    /// @notice Emitted when the collateral is already enabled.\\n    error AaveLeverageModule__CollateralIsEnabled();\\n    /// @notice Emitted when usage of a given collateral is disabled.\\n    error AaveLeverageModule__CollateralUsageDisabled(address asset);\\n    /// @notice Emitted when a component's debt value is not negative.\\n    error AaveLeverageModule__ComponentDebtNotNegative(int256 component);\\n    /// @notice Emitted when the drift is greater than or equal to the max trade drift.\\n    error AaveLeverageModule__DexDataMismatch(uint256 drift, uint256 maxDrift);\\n    /// @notice Emitted when the slippage exceeds allowed values.\\n    error AaveLeverageModule__ExcessiveSlippage(uint256 receiveQuantity, uint256 minReceiveQuantity);\\n    /// @notice Emitted when the issuance module is uninitialized on the SetToken.\\n    error AaveLeverageModule__IssuanceUninitialized(address module);\\n    /// @notice Emitted when protocol borrowing is disabled.\\n    error AaveLeverageModule__ProtocolBorrowingDisabled();\\n    /// @notice Emitted when the reserve is frozen.\\n    error AaveLeverageModule__ReserveFrozen();\\n    /// @notice Emitted when the reserve is inactive.\\n    error AaveLeverageModule__ReserveInactive();\\n    /// @notice Emitted when the provided SetToken is forbidden.\\n    error AaveLeverageModule__SetTokenForbidden(address setToken);\\n    /// @notice Emitted when a SetToken is not enabled on the Controller.\\n    error AaveLeverageModule__SetTokenInvalid();\\n    /// @notice Emitted when a token mapping already exists.\\n    error AaveLeverageModule__TokenMappingExists();\\n    /// @notice Emitted when variable debt remains.\\n    error AaveLeverageModule__VariableDebtRemains(uint256 remaining);\\n    /// @notice Emitted when an invalid variable debt token is provided.\\n    error AaveLeverageModule__VariableDebtTokenInvalid(address variableDebtToken);\\n    /// @notice Emitted when a provided quantity is zero.\\n    error AaveLeverageModule__ZeroQuantity();\\n\\n    /* ============ Functions ============ */\\n\\n    function sync(ISetToken _setToken) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IBasicIssuanceModule.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { ISetToken } from \\\"./ISetToken.sol\\\";\\n\\ninterface IBasicIssuanceModule {\\n\\n    /* ============ Custom Errors ============ */\\n\\n    /// @notice Emitted when an external position for a component is not supported (only default positions supported).\\n    error BasicIssuanceModule__ExternalPositionNotSupported(address emitter, address component);\\n    /// @notice Emitted when removal of a certain module is forbidden.\\n    error BasicIssuanceModule__RemovalForbidden();\\n    /// @notice Emitted when a provided quantity is zero.\\n    error BasicIssuanceModule__ZeroQuantity();\\n\\n    /* ============ Functions ============ */\\n\\n    function getRequiredComponentUnitsForIssue(\\n        ISetToken _setToken,\\n        uint256 _quantity\\n    ) external returns(address[] memory, uint256[] memory);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IController.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\ninterface IController {\\n    \\n   /* ============ Custom Errors ============ */\\n    \\n    /// @notice Emitted when the number of resources and resourceIds mismatch.\\n    error Controller__ArrayLengthMismatch(uint256 resourcesLength, uint256 resourcesIdsLength);\\n    /// @notice Emitted when the caller is not a factory.\\n    error Controller__CallerNotFactory(address caller);\\n    /// @notice Emitted when a factory already exists on the Controller.\\n    error Controller__FactoryExists();\\n    /// @notice Emitted when a factory does not exist on the Controller.\\n    error Controller__FactoryInvalid();\\n    /// @notice Emitted when a fee type already exists on the Controller.\\n    error Controller__FeeTypeExists();\\n    /// @notice Emitted when a fee type does not exist on the Controller.\\n    error Controller__FeeTypeInvalid();\\n    /// @notice Emitted when the Controller is already initialized.\\n    error Controller__IsInitialized();\\n    /// @notice Emitted when a module is already enabled on the Controller.\\n    error Controller__ModuleExists();\\n    /// @notice Emitted when a module is not enabled on the Controller.\\n    error Controller__ModuleInvalid();\\n    /// @notice Emitted when a resource or resourceId is already enabled on the Controller.\\n    error Controller__ResourceExists();\\n    /// @notice Emitted when a resource is not enabled on the Controller.\\n    error Controller__ResourceInvalid();\\n    /// @notice Emitted when a SetToken is already enabled on the Controller. \\n    error Controller__SetExists();\\n    /// @notice Emitted when a SetToken is not enabled on the Controller.\\n    error Controller__SetInvalid();\\n    /// @notice Emitted when the Controller is not initialized.\\n    error Controller__Uninitialized();\\n    /// @notice Emitted when a zero address is provided.\\n    error Controller__ZeroAddress();\\n\\n   /* ============ Functions ============ */\\n\\n    function addSet(address _setToken) external;\\n    function feeRecipient() external view returns(address);\\n    function getModuleFee(address _module, uint256 _feeType) external view returns(uint256);\\n    function isModule(address _module) external view returns(bool);\\n    function isSet(address _setToken) external view returns(bool);\\n    function isSystemContract(address _contractAddress) external view returns (bool);\\n    function resourceId(uint256 _id) external view returns(address);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IDebtIssuanceModule.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2021 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { ISetToken } from \\\"./ISetToken.sol\\\";\\n\\n/**\\n * @title IDebtIssuanceModule\\n * @author Set Protocol\\n *\\n * Interface for interacting with Debt Issuance module interface.\\n */\\ninterface IDebtIssuanceModule {\\n\\n    /* ============ Custom Errors ============ */\\n\\n    /// @notice Emitted when the fee recipient remains unchanged.\\n    error DebtIssuanceModule__FeeRecipientUnchanged(address emitter);\\n    /// @notice Emitted when the specified fee exceeds the maximum allowable limit.\\n    error DebtIssuanceModule__FeeTooHigh(address emitter, uint256 maxFee);\\n    /// @notice Emitted when the fee remains unchanged.\\n    error DebtIssuanceModule__FeeUnchanged(address emitter);\\n    /// @notice Emitted when a module hook already exists.\\n    error DebtIssuanceModule__ModuleHookExists(address emitter);\\n    /// @notice Emitted when an invalid module hook is provided.\\n    error DebtIssuanceModule__ModuleHookInvalid(address emitter, address module);\\n    /// @notice Emitted when module hooks exist for a given number of modules.\\n    error DebtIssuanceModule__ModuleHooksExist(address emitter, uint256 numModules);\\n    /// @notice Emitted when a zero address is provided.\\n    error DebtIssuanceModule__ZeroAddress(address emitter);\\n    /// @notice Emitted when the provided quantity is zero.\\n    error DebtIssuanceModule__ZeroQuantity(address emitter);\\n\\n    \\n    /* ============ Functions ============ */\\n\\n    /**\\n     * Called by another module to register itself on debt issuance module. Any logic can be included\\n     * in case checks need to be made or state needs to be updated.\\n     */\\n    function registerToIssuanceModule(ISetToken _setToken) external;\\n\\n    /**\\n     * Called by another module to unregister itself on debt issuance module. Any logic can be included\\n     * in case checks need to be made or state needs to be cleared.\\n     */\\n    function unregisterFromIssuanceModule(ISetToken _setToken) external;\\n\\n    function getRequiredComponentIssuanceUnits(\\n        ISetToken _setToken,\\n        uint256 _quantity\\n    ) external view returns (address[] memory, uint256[] memory, uint256[] memory);\\n    function getRequiredComponentRedemptionUnits(\\n        ISetToken _setToken,\\n        uint256 _quantity\\n    ) external view returns (address[] memory, uint256[] memory, uint256[] memory);\\n    function issue(ISetToken _setToken, uint256 _quantity, address _to) external;\\n    function redeem(ISetToken _token, uint256 _quantity, address _to) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IExchangeAdapter.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\ninterface IExchangeAdapter {\\n    function getSpender() external view returns(address);\\n    function getTradeCalldata(\\n        address _fromToken,\\n        address _toToken,\\n        address _toAddress,\\n        uint256 _fromQuantity,\\n        uint256 _minToQuantity,\\n        bytes memory _data\\n    )\\n        external\\n        view\\n        returns (address, uint256, bytes memory);\\n    function isDynamicDataAdapter() external view returns(bool);\\n    function getTradeMetadata(\\n        bytes memory _data\\n    )\\n        external\\n        view\\n        returns (bytes4 signature, address fromToken, address toToken, uint256 inputAmount, uint256 minAmountOut);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IIntegrationRegistry.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\ninterface IIntegrationRegistry {\\n\\n   /* ============ Custom Errors ============ */\\n\\n    /// @notice Emitted when an adapter already exists on the IntegrationRegistry.\\n    error IntegrationRegistry__IntegrationExists();\\n    /// @notice Emitted when an adapter does not exist on the IntegrationRegistry.\\n    error IntegrationRegistry__IntegrationInvalid();\\n    /// @notice Emitted when a module is not enabled on the Controller.\\n    error IntegrationRegistry__ModuleInvalid();\\n    /// @notice Emitted when the modules and adapters length mismatch.\\n    error IntegrationRegistry__ModulesAdaptersLengthMismatch(uint256 numModules, uint256 numAdapters);\\n    /// @notice Emitted when the modules length is zero.\\n    error IntegrationRegistry__ModulesEmpty();\\n    /// @notice Emitted when the modules and names length mismatch.\\n    error IntegrationRegistry__ModulesNamesLengthMismatch(uint256 numModules, uint256 numNames);\\n    /// @notice Emitted when a zero address is provided.\\n    error IntegrationRegistry__ZeroAddress();\\n\\n   /* ============ Functions ============ */\\n    \\n    function addIntegration(address _module, string memory _id, address _wrapper) external;\\n    function getIntegrationAdapter(address _module, string memory _id) external view returns(address);\\n    function getIntegrationAdapterWithHash(address _module, bytes32 _id) external view returns(address);\\n    function isValidIntegration(address _module, string memory _id) external view returns(bool);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IIssuanceModule.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2022 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { ISetToken } from \\\"./ISetToken.sol\\\";\\n\\n/**\\n * @title IIssuanceModule\\n * @author Set Protocol\\n *\\n * Interface for interacting with Issuance module interface.\\n */\\ninterface IIssuanceModule {\\n    function updateIssueFee(ISetToken _setToken, uint256 _newIssueFee) external;\\n    function updateRedeemFee(ISetToken _setToken, uint256 _newRedeemFee) external;\\n    function updateFeeRecipient(ISetToken _setToken, address _newRedeemFee) external;\\n\\n    function initialize(\\n        ISetToken _setToken,\\n        uint256 _maxManagerFee,\\n        uint256 _managerIssueFee,\\n        uint256 _managerRedeemFee,\\n        address _feeRecipient,\\n        address _managerIssuanceHook\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IManagerIssuanceHook.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { ISetToken } from \\\"./ISetToken.sol\\\";\\n\\ninterface IManagerIssuanceHook {\\n    function invokePreIssueHook(ISetToken _setToken, uint256 _issueQuantity, address _sender, address _to) external;\\n    function invokePreRedeemHook(address _sender) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IModule.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\n/**\\n * @title IModule\\n * @author Set Protocol\\n *\\n * Interface for interacting with Modules.\\n */\\ninterface IModule {\\n    \\n    /* ============ Custom Errors ============ */\\n\\n    /// @notice Emitted when an invalid adapter is provided for a specific integration hash.\\n    error Module__AdapterInvalid(address emitter, bytes32 integrationHash);\\n    /// @notice Emitted when the caller is not an initialized module.\\n    error Module__CallerNotInitializedModule(address emitter, address caller);\\n    /// @notice Emitted when the caller is not the set manager.\\n    error Module__CallerNotManager(address emitter, address caller, address setToken);\\n    /// @notice Emitted when a the calling module (msg.sender) is not enabled on the Controller.\\n    error Module__ModuleInvalid(address emitter, address moduleAndCaller);\\n    /// @notice Emitted when an invalid SetToken address is provided.\\n    error Module__SetTokenInvalid(address emitter, address setToken);\\n    /// @notice Emitted when a SetToken is both invalid and uninitialized.\\n    error Module__SetTokenInvalidAndUninitialized(address emitter, address setToken);\\n    /// @notice Emitted when a SetToken is not a pending module.\\n    error Module__SetTokenNotPending(address emitter, address setToken);\\n\\n    /* ============ Functions ============ */\\n\\n    /**\\n     * Called by a SetToken to notify that this module was removed from the Set token. Any logic can be included\\n     * in case checks need to be made or state needs to be cleared.\\n     */\\n    function removeModule() external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IModuleIssuanceHook.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport { ISetToken } from \\\"./ISetToken.sol\\\";\\n\\n/**\\n * CHANGELOG\\n *      - Added a module level issue hook that can be used to set state ahead of component level\\n *        issue hooks\\n */\\ninterface IModuleIssuanceHook {\\n\\n    function moduleIssueHook(ISetToken _setToken, uint256 _setTokenQuantity) external;\\n    function moduleRedeemHook(ISetToken _setToken, uint256 _setTokenQuantity) external;\\n    \\n    function componentIssueHook(\\n        ISetToken _setToken,\\n        uint256 _setTokenQuantity,\\n        IERC20 _component,\\n        bool _isEquity\\n    ) external;\\n\\n    function componentRedeemHook(\\n        ISetToken _setToken,\\n        uint256 _setTokenQuantity,\\n        IERC20 _component,\\n        bool _isEquity\\n    ) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IModuleIssuanceHookV2.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2021 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport { ISetToken } from \\\"./ISetToken.sol\\\";\\n\\n/**\\n * CHANGELOG\\n * - Added a module level issue hook that can be used to set state ahead of component level\\n *   issue hooks\\n * - Added non-view getter that returns expected positional adjustments during issue/redeem to\\n *   the issuance module in order to give more accurate token flow information\\n */\\ninterface IModuleIssuanceHookV2 {\\n\\n    function moduleIssueHook(ISetToken _setToken, uint256 _setTokenQuantity) external;\\n    function moduleRedeemHook(ISetToken _setToken, uint256 _setTokenQuantity) external;\\n\\n    function componentIssueHook(\\n        ISetToken _setToken,\\n        uint256 _setTokenQuantity,\\n        IERC20 _component,\\n        bool _isEquity\\n    ) external;\\n\\n    function componentRedeemHook(\\n        ISetToken _setToken,\\n        uint256 _setTokenQuantity,\\n        IERC20 _component,\\n        bool _isEquity\\n    ) external;\\n\\n    /**\\n     * Adjustments should return the NET CHANGE in POSITION UNITS for each component in the SetToken's\\n     * components array (i.e. if debt is greater than current debt position unit return negative number).\\n     * Each entry in the returned arrays should index to the same component in the SetToken's components\\n     * array (called using getComponents()).\\n     *\\n     * NOTE: This getter is non-view to allow module hooks to determine units by simulating state changes in\\n     * an external protocol and reverting. It should only be called by off-chain methods via static call.\\n     */\\n    function getIssuanceAdjustments(\\n        ISetToken _setToken,\\n        uint256 _setTokenQuantity\\n    )\\n        external\\n        returns (int256[] memory, int256[] memory);\\n\\n    /**\\n     * Adjustments should return the NET CHANGE in POSITION UNITS for each component in the SetToken's\\n     * components array (i.e. if debt is greater than current debt position unit return negative number).\\n     * Each entry in the returned arrays should index to the same component in the SetToken's components\\n     * array (called using getComponents()).\\n     *\\n     * NOTE: This getter is non-view to allow module hooks to determine units by simulating state changes in\\n     * an external protocol and reverting. It should only be called by off-chain methods via static call.\\n     */\\n    function getRedemptionAdjustments(\\n        ISetToken _setToken,\\n        uint256 _setTokenQuantity\\n    )\\n        external\\n        returns (int256[] memory, int256[] memory);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IOracle.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\n/**\\n * @title IOracle\\n * @author Set Protocol\\n *\\n * Interface for operating with any external Oracle that returns uint256 or\\n * an adapting contract that converts oracle output to uint256\\n */\\ninterface IOracle {\\n    /**\\n     * @return  Current price of asset represented in uint256, typically a preciseUnit where 10^18 = 1.\\n     */\\n    function read() external view returns (uint256);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IOracleAdapter.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\n/**\\n * @title IOracleAdapter\\n * @author Set Protocol\\n *\\n * Interface for calling an oracle adapter.\\n */\\ninterface IOracleAdapter {\\n\\n    /**\\n     * Function for retrieving a price that requires sourcing data from outside protocols to calculate.\\n     *\\n     * @param  _assetOne    First asset in pair\\n     * @param  _assetTwo    Second asset in pair\\n     * @return                  Boolean indicating if oracle exists\\n     * @return              Current price of asset represented in uint256\\n     */\\n    function getPrice(address _assetOne, address _assetTwo) external view returns (bool, uint256);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IPriceOracle.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\n/**\\n * @title IPriceOracle\\n * @author Set Protocol\\n *\\n * Interface for interacting with PriceOracle\\n */\\ninterface IPriceOracle {\\n\\n   /* ============ Custom Errors ============ */\\n\\n    /// @notice Emitted when the number of assets ones, asset twos, and oracles mismatch. \\n    error PriceOracle__ArrayLengthsMismatch(uint256 assetsOnesLength, uint256 assetsTwosLength, uint256 oraclesLength);\\n    /// @notice Emitted when the caller is the Controller or the caller is not a set, \\n    ///         module, resource, or factory enabled on the Controller.\\n    error PriceOracle__CallerNotSystemContract(address caller);\\n    /// @notice Emitted when a price is not found direct or inverse, from master, and from adapters.\\n    error PriceOracle__PriceNotFound();\\n    /// @notice Emitted when an asset pair already exists on the PriceOracle.\\n    error PriceOracle__PairExists();\\n    /// @notice Emitted when an asset pair does not exist on the PriceOracle.\\n    error PriceOracle__PairInvalid();\\n    /// @notice Emitted when an adapter already exists on the PriceOracle.\\n    error PriceOracle__AdapterExists();\\n    /// @notice Emitted when an adapter does not exist on the PriceOracle.\\n    error PriceOracle__AdapterInvalid();\\n\\n    /* ============ Functions ============ */\\n\\n    function getPrice(address _assetOne, address _assetTwo) external view returns (uint256);\\n    function masterQuoteAsset() external view returns (address);\\n}\"\r\n    },\r\n    \"contracts/interfaces/ISetToken.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title ISetToken\\n * @author Set Protocol\\n *\\n * Interface for operating with SetTokens.\\n */\\ninterface ISetToken is IERC20 {\\n\\n   /* ============ Custom Errors ============ */\\n\\n    /// @notice Emitted when the caller is not the SetToken locker.\\n    error SetToken__CallerNotLocker(address caller, address locker);\\n    /// @notice Emitted when the caller is not the SetToken manager.\\n    error SetToken__CallerNotManager(address caller, address manager);\\n    /// @notice Emitted when the external position module already exists on the SetToken.\\n    error SetToken__ExternalPositionModuleExists();\\n    /// @notice Emitted when the component already exists on the SetToken.\\n    error SetToken__IsComponent();\\n    /// @notice Emitted when the SetToken is already locked.\\n    error SetToken__IsLocked();\\n    /// @notice Emitted when the SetToken is already unlocked.\\n    error SetToken__IsUnlocked();\\n    /// @notice Emitted when a module is not enabled on the Controller.\\n    error SetToken__ModuleInvalid(address module);\\n    /// @notice Emitted when the actual state of a module is not as expected.\\n    error SetToken__ModuleStateInvalid(address module, ISetToken.ModuleState actualState, ISetToken.ModuleState expectedState);\\n    /// @notice Emitted when the real unit is greater than zero and the virtual unit is equal to zero.\\n    error SetToken__RealToVirtualUnitConversionInvalid(int256 realUnit, int256 virtualUnit);\\n    /// @notice Emitted when the real unit is greater than zero and the virtual unit converted is equal to zero.\\n    error SetToken__VirtualToRealUnitConversionInvalid(int256 realUnit, int256 virtualConverted);\\n    /// @notice Emitted when the calculated multiplier is equal to zero.\\n    error SetToken__ZeroMultiplier();\\n\\n    /* ============ Enums ============ */\\n\\n    enum ModuleState {\\n        NONE,\\n        PENDING,\\n        INITIALIZED\\n    }\\n\\n    /* ============ Structs ============ */\\n    /**\\n     * The base definition of a SetToken Position\\n     *\\n     * @param component           Address of token in the Position\\n     * @param module              If not in default state, the address of associated module\\n     * @param unit                Each unit is the # of components per 10^18 of a SetToken\\n     * @param positionState       Position ENUM. Default is 0; External is 1\\n     * @param data                Arbitrary data\\n     */\\n    struct Position {\\n        address component;\\n        address module;\\n        int256 unit;\\n        uint8 positionState;\\n        bytes data;\\n    }\\n\\n    /**\\n     * A struct that stores a component's cash position details and external positions\\n     * This data structure allows O(1) access to a component's cash position units and \\n     * virtual units.\\n     *\\n     * @param virtualUnit               Virtual value of a component's DEFAULT position. Stored as virtual for efficiency\\n     *                                  updating all units at once via the position multiplier. Virtual units are achieved\\n     *                                  by dividing a \\\"real\\\" value by the \\\"positionMultiplier\\\"\\n     * @param componentIndex            \\n     * @param externalPositionModules   List of external modules attached to each external position. Each module\\n     *                                  maps to an external position\\n     * @param externalPositions         Mapping of module => ExternalPosition struct for a given component\\n     */\\n    struct ComponentPosition {\\n      int256 virtualUnit;\\n      address[] externalPositionModules;\\n      mapping(address => ExternalPosition) externalPositions;\\n    }\\n\\n    /**\\n     * A struct that stores a component's external position details including virtual unit and any\\n     * auxiliary data.\\n     *\\n     * @param virtualUnit       Virtual value of a component's EXTERNAL position.\\n     * @param data              Arbitrary data\\n     */\\n    struct ExternalPosition {\\n      int256 virtualUnit;\\n      bytes data;\\n    }\\n\\n\\n    /* ============ Functions ============ */\\n    \\n    function addComponent(address _component) external;\\n    function removeComponent(address _component) external;\\n    function editDefaultPositionUnit(address _component, int256 _realUnit) external;\\n    function addExternalPositionModule(address _component, address _positionModule) external;\\n    function removeExternalPositionModule(address _component, address _positionModule) external;\\n    function editExternalPositionUnit(address _component, address _positionModule, int256 _realUnit) external;\\n    function editExternalPositionData(address _component, address _positionModule, bytes calldata _data) external;\\n\\n    function invoke(address _target, uint256 _value, bytes calldata _data) external returns(bytes memory);\\n\\n    function editPositionMultiplier(int256 _newMultiplier) external;\\n\\n    function mint(address _account, uint256 _quantity) external;\\n    function burn(address _account, uint256 _quantity) external;\\n\\n    function lock() external;\\n    function unlock() external;\\n\\n    function addModule(address _module) external;\\n    function removeModule(address _module) external;\\n    function initializeModule() external;\\n\\n    function setManager(address _manager) external;\\n\\n    function manager() external view returns (address);\\n    function moduleStates(address _module) external view returns (ModuleState);\\n    function getModules() external view returns (address[] memory);\\n    \\n    function getDefaultPositionRealUnit(address _component) external view returns(int256);\\n    function getExternalPositionRealUnit(address _component, address _positionModule) external view returns(int256);\\n    function getComponents() external view returns(address[] memory);\\n    function getExternalPositionModules(address _component) external view returns(address[] memory);\\n    function getExternalPositionData(address _component, address _positionModule) external view returns(bytes memory);\\n    function isExternalPositionModule(address _component, address _module) external view returns(bool);\\n    function isComponent(address _component) external view returns(bool);\\n    \\n    function positionMultiplier() external view returns (int256);\\n    function getPositions() external view returns (Position[] memory);\\n    function getTotalComponentRealUnits(address _component) external view returns(int256);\\n\\n    function isInitializedModule(address _module) external view returns(bool);\\n    function isPendingModule(address _module) external view returns(bool);\\n    function isLocked() external view returns (bool);\\n}\"\r\n    },\r\n    \"contracts/interfaces/ISetTokenCreator.sol\": {\r\n      \"content\": \"/*\\n  Copyright 2022 Set Labs Inc.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n  http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n  SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\ninterface ISetTokenCreator {\\n\\n   /* ============ Custom Errors ============ */\\n\\n    /// @notice Emitted when the number of components and units mismatch.\\n    error SetTokenCreator__ArrayLengthMismatch(uint256 componentsLength, uint256 unitsLength);\\n    /// @notice Emitted when the components provided contains duplicates.\\n    error SetTokenCreator__ComponentsContainDuplicates();\\n    /// @notice Emitted when the components provided contains a zero address.\\n    error SetTokenCreator__ComponentsContainZeroAddress();\\n    /// @notice Emitted when an the components provided does not contain elements.\\n    error SetTokenCreator__ComponentsEmpty();\\n    /// @notice Emitted when a module is not enabled on the Controller.\\n    error SetTokenCreator__ModuleInvalid(address module);\\n    /// @notice Emitted when the modules provided does not contain elements.\\n    error SetTokenCreator__ModulesEmpty();\\n    /// @notice Emitted when a unit provided is less than or equal to zero.\\n    error SetTokenCreator__UnitsLessThanOrEqualToZero(int256 unit, uint256 positionInArray);\\n    /// @notice Emitted when a zero address is provided.\\n    error SetTokenCreator__ZeroAddress();\\n\\n   /* ============ Functions ============ */\\n\\n    function create(\\n        address[] memory _components,\\n        int256[] memory _units,\\n        address[] memory _modules,\\n        address _manager,\\n        string memory _name,\\n        string memory _symbol\\n    )\\n        external\\n        returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISetValuer.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { ISetToken } from \\\"../interfaces/ISetToken.sol\\\";\\n\\ninterface ISetValuer {\\n    function calculateSetTokenValuation(ISetToken _setToken, address _quoteAsset) external view returns (uint256);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IStreamingFeeModule.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { ISetToken } from \\\"./ISetToken.sol\\\";\\n\\ninterface IStreamingFeeModule {\\n    \\n    /* ============ Custom Errors ============ */\\n\\n    /// @notice Emitted when the specified fee exceeds the maximum allowable limit.\\n    error StreamingFeeModule__FeeTooHigh(uint256 maxFee);\\n    /// @notice Emitted when a zero address is provided.\\n    error StreamingFeeModule__ZeroAddress();\\n\\n    struct FeeState {\\n        uint256 maxStreamingFeePercentage;\\n        uint256 streamingFeePercentage;\\n        uint256 lastStreamingFeeTimestamp;\\n        address feeRecipient;\\n    }\\n\\n    /* ============ Functions ============ */\\n\\n    function feeStates(ISetToken _setToken) external view returns (FeeState memory);\\n    function getFee(ISetToken _setToken) external view returns (uint256);\\n    function accrueFee(ISetToken _setToken) external;\\n    function updateStreamingFee(ISetToken _setToken, uint256 _newFee) external;\\n    function updateFeeRecipient(ISetToken _setToken, address _newFeeRecipient) external;\\n    function initialize(ISetToken _setToken, FeeState memory _settings) external;\\n}\\n\"\r\n    },\r\n    \"contracts/lib/AddressArrayUtils.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n/* solhint-disable var-name-mixedcase */\\n\\npragma solidity 0.8.21;\\n\\n/**\\n * @title AddressArrayUtils\\n * @author Set Protocol\\n *\\n * Utility functions to handle Address Arrays\\n *\\n * CHANGELOG\\n * - 4/21/21: Added validatePairsWithArray methods\\n * - 9/18/23: Upgrade to Solidity 0.8.21\\n * - 9/26/23: Added custom errors\\n * - 9/28/23: Switch hasDuplicate() `A` parameter from memory to calldata\\n */\\nlibrary AddressArrayUtils {\\n\\n    /* ============ Custom Errors ============ */\\n\\n    /// @notice Emitted when the array contains duplicate addresses.\\n    error AddressArrayUtils__ArrayContainsDuplicates();\\n    /// @notice Emitted when the provided index is out of the bounds of the array.\\n    error AddressArrayUtils__ArrayIndexOutOfBounds(uint256 index, uint256 length);\\n    /// @notice Emitted when the array is empty.\\n    error AddressArrayUtils__ArrayIsEmpty();\\n    /// @notice Emitted when a target address is not found within the array.\\n    error AddressArrayUtils__ArrayItemNotFound(address target);\\n    /// @notice Emitted when two arrays being validated have mismatched lengths.\\n    error AddressArrayUtils__ArrayLengthMismatch(uint256 lengthA, uint256 lengthB);\\n\\n    /**\\n     * Finds the index of the first occurrence of the given element.\\n     * @param A The input array to search\\n     * @param a The value to find\\n     * @return Returns (index and isIn) for the first occurrence starting from index 0\\n     */\\n    function indexOf(address[] memory A, address a) internal pure returns (uint256, bool) {\\n        uint256 length = A.length;\\n        for (uint256 i; i < length; ) {\\n            if (A[i] == a) {\\n                return (i, true);\\n            }\\n            unchecked { ++i; }\\n        }\\n        return (type(uint256).max, false);\\n    }\\n\\n    /**\\n    * Returns true if the value is present in the list. Uses indexOf internally.\\n    * @param A The input array to search\\n    * @param a The value to find\\n    * @return Returns isIn for the first occurrence starting from index 0\\n    */\\n    function contains(address[] memory A, address a) internal pure returns (bool) {\\n        (, bool isIn) = indexOf(A, a);\\n        return isIn;\\n    }\\n\\n    /**\\n    * Returns true if there are 2 elements that are the same in an array\\n    * @param A The input array to search\\n    * @return Returns boolean for the first occurrence of a duplicate\\n    */\\n    function hasDuplicate(address[] calldata A) internal pure returns(bool) {\\n        if (A.length == 0) revert AddressArrayUtils__ArrayIsEmpty();\\n\\n        uint256 length = A.length;\\n        for (uint256 i; i < length - 1; ) {\\n            address current = A[i];\\n            for (uint256 j = i + 1; j < length;) {\\n                if (current == A[j]) {\\n                    return true;\\n                }\\n                unchecked { ++j; }\\n            }\\n            unchecked { ++i; }\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @param A The input array to search\\n     * @param a The address to remove\\n     * @return Returns the array with the object removed.\\n     */\\n    function remove(address[] memory A, address a)\\n        internal\\n        pure\\n        returns (address[] memory)\\n    {\\n        (uint256 index, bool isIn) = indexOf(A, a);\\n        if (!isIn) {\\n            revert AddressArrayUtils__ArrayItemNotFound(a);\\n        } else {\\n            (address[] memory _A,) = pop(A, index);\\n            return _A;\\n        }\\n    }\\n\\n    /**\\n     * @param A The input array to search\\n     * @param a The address to remove\\n     */\\n    function removeStorage(address[] storage A, address a)\\n        internal\\n    {\\n        (uint256 index, bool isIn) = indexOf(A, a);\\n        if (!isIn) {\\n            revert AddressArrayUtils__ArrayItemNotFound(a);\\n        } else {\\n            uint256 lastIndex = A.length - 1; // If the array would be empty, the previous line would throw, so no underflow here\\n            if (index != lastIndex) { A[index] = A[lastIndex]; }\\n            A.pop();\\n        }\\n    }\\n\\n    /**\\n    * Removes specified index from array\\n    * @param A The input array to search\\n    * @param index The index to remove\\n    * @return Returns the new array and the removed entry\\n    */\\n    function pop(address[] memory A, uint256 index)\\n        internal\\n        pure\\n        returns (address[] memory, address)\\n    {\\n        uint256 length = A.length;\\n        if (index >= length) revert AddressArrayUtils__ArrayIndexOutOfBounds(index, length);\\n        address[] memory newAddresses = new address[](length - 1);\\n        for (uint256 i; i < index; ) {\\n            newAddresses[i] = A[i];\\n            unchecked { ++i; }\\n        }\\n        for (uint256 j = index + 1; j < length;) {\\n            newAddresses[j - 1] = A[j];\\n            unchecked { ++j; }\\n        }\\n        return (newAddresses, A[index]);\\n    }\\n\\n    /**\\n     * Returns the combination of the two arrays\\n     * @param A The first array\\n     * @param B The second array\\n     * @return Returns A extended by B\\n     */\\n    function extend(address[] memory A, address[] memory B) internal pure returns (address[] memory) {\\n        uint256 aLength = A.length;\\n        uint256 bLength = B.length;\\n        address[] memory newAddresses = new address[](aLength + bLength);\\n        for (uint256 i; i < aLength; ) {\\n            newAddresses[i] = A[i];\\n            unchecked { ++i; }\\n        }\\n        for (uint256 j; j < bLength;) {\\n            newAddresses[aLength + j] = B[j];\\n            unchecked { ++j; }\\n        }\\n        return newAddresses;\\n    }\\n\\n    /**\\n     * Validate that address and uint array lengths match. Validate address array is not empty\\n     * and contains no duplicate elements.\\n     *\\n     * @param A         Array of addresses\\n     * @param B         Array of uint\\n     */\\n    function validatePairsWithArray(address[] calldata A, uint256[] calldata B) internal pure {\\n        uint256 aLength = A.length;\\n        uint256 bLength = B.length;\\n        if (aLength != bLength)\\n            revert AddressArrayUtils__ArrayLengthMismatch(aLength, bLength);\\n        _validateLengthAndUniqueness(A);\\n    }\\n\\n    /**\\n     * Validate that address and bool array lengths match. Validate address array is not empty\\n     * and contains no duplicate elements.\\n     *\\n     * @param A         Array of addresses\\n     * @param B         Array of bool\\n     */\\n    function validatePairsWithArray(address[] calldata A, bool[] calldata B) internal pure {\\n        uint256 aLength = A.length;\\n        uint256 bLength = B.length;\\n        if (aLength != bLength)\\n            revert AddressArrayUtils__ArrayLengthMismatch(aLength, bLength);\\n        _validateLengthAndUniqueness(A);\\n    }\\n\\n    /**\\n     * Validate that address and string array lengths match. Validate address array is not empty\\n     * and contains no duplicate elements.\\n     *\\n     * @param A         Array of addresses\\n     * @param B         Array of strings\\n     */\\n    function validatePairsWithArray(address[] calldata A, string[] calldata B) internal pure {\\n        uint256 aLength = A.length;\\n        uint256 bLength = B.length;\\n        if (aLength != bLength) revert AddressArrayUtils__ArrayLengthMismatch(aLength, bLength);\\n        _validateLengthAndUniqueness(A);\\n    }\\n\\n    /**\\n     * Validate that address array lengths match, and calling address array are not empty\\n     * and contain no duplicate elements.\\n     *\\n     * @param A         Array of addresses\\n     * @param B         Array of addresses\\n     */\\n    function validatePairsWithArray(address[] calldata A, address[] calldata B) internal pure {\\n        uint256 aLength = A.length;\\n        uint256 bLength = B.length;\\n        if (aLength != bLength) revert AddressArrayUtils__ArrayLengthMismatch(aLength, bLength);\\n        _validateLengthAndUniqueness(A);\\n    }\\n\\n    /**\\n     * Validate that address and bytes array lengths match. Validate address array is not empty\\n     * and contains no duplicate elements.\\n     *\\n     * @param A         Array of addresses\\n     * @param B         Array of bytes\\n     */\\n    function validatePairsWithArray(address[] calldata A, bytes[] calldata B) internal pure {\\n        uint256 aLength = A.length;\\n        uint256 bLength = B.length;\\n        if (aLength != bLength) revert AddressArrayUtils__ArrayLengthMismatch(aLength, bLength);\\n        _validateLengthAndUniqueness(A);\\n    }\\n\\n    /**\\n     * Validate address array is not empty and contains no duplicate elements.\\n     *\\n     * @param A          Array of addresses\\n     */\\n    function _validateLengthAndUniqueness(address[] calldata A) internal pure {\\n        if (A.length == 0) revert AddressArrayUtils__ArrayIsEmpty();\\n        if (hasDuplicate(A)) revert AddressArrayUtils__ArrayContainsDuplicates();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/BytesArrayUtils.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2022 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\n/**\\n * @title BytesArrayUtils\\n * @author Set Protocol\\n *\\n * Utility library to type cast bytes arrays. Extends BytesLib (external/contracts/uniswap/v3/lib/BytesLib.sol)\\n * library functionality.\\n *\\n * CHANGELOG\\n * - 9/18/23: Upgrade to Solidity 0.8.21\\n * - 9/26/23: Added custom errors\\n */\\nlibrary BytesArrayUtils {\\n\\n    /* ============ Custom Errors ============ */\\n\\n    /// @notice Emitted when the specified index is outside the bounds of the bytes array.\\n    error BytesArrayUtils__ArrayIndexOutOfBounds(uint256 index, uint256 length);\\n    /// @notice Emitted when the byte data doesn't represent a valid boolean value.\\n    error BytesArrayUtils__InvalidBooleanData(uint256 value);\\n\\n    /**\\n     * Type cast byte to boolean.\\n     * @param _bytes        Bytes array\\n     * @param _start        Starting index\\n     * @return bool        Boolean value\\n     */\\n    function toBool(bytes memory _bytes, uint256 _start) internal pure returns (bool) {\\n        uint256 startPlusOne = _start + 1;\\n        uint256 bytesLength = _bytes.length;\\n        if (bytesLength < startPlusOne)\\n            revert BytesArrayUtils__ArrayIndexOutOfBounds(\\n                startPlusOne,\\n                bytesLength\\n            );\\n        uint8 tempUint;\\n\\n        /* solhint-disable-next-line no-inline-assembly */\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        if (tempUint > 1) revert BytesArrayUtils__InvalidBooleanData(tempUint); // Should be either 0 or 1\\n\\n        return (tempUint == 0) ? false : true;\\n    }\\n}\"\r\n    },\r\n    \"contracts/lib/ExplicitERC20.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/**\\n * @title ExplicitERC20\\n * @author Set Protocol\\n *\\n * Utility functions for ERC20 transfers that require the explicit amount to be transferred.\\n *\\n * CHANGELOG\\n * - 4/21/23: Removed OZ SafeMath\\n * - 9/18/23: Upgrade to Solidity 0.8.21\\n * - 9/26/23: Added custom errors\\n */\\nlibrary ExplicitERC20 {\\n\\n    /* ============ Custom Errors ============ */\\n\\n    /// @notice Emitted when the balance after a token transfer doesn't match the expected balance.\\n    error ExplicitERC20__PostTransferBalanceInvalid(address emitter, uint256 newBalance, uint256 expectedBalance);\\n\\n    /**\\n     * When given allowance, transfers a token from the \\\"_from\\\" to the \\\"_to\\\" of quantity \\\"_quantity\\\".\\n     * Ensures that the recipient has received the correct quantity (ie no fees taken on transfer)\\n     *\\n     * @param _token           ERC20 token to approve\\n     * @param _from            The account to transfer tokens from\\n     * @param _to              The account to transfer tokens to\\n     * @param _quantity        The quantity to transfer\\n     */\\n    function transferFrom(\\n        IERC20 _token,\\n        address _from,\\n        address _to,\\n        uint256 _quantity\\n    )\\n        internal\\n    {\\n        // Call specified ERC20 contract to transfer tokens (via proxy).\\n        if (_quantity > 0) {\\n            uint256 existingBalance = _token.balanceOf(_to);\\n\\n            SafeERC20.safeTransferFrom(\\n                _token,\\n                _from,\\n                _to,\\n                _quantity\\n            );\\n\\n            uint256 newBalance = _token.balanceOf(_to);\\n\\n            // Verify transfer quantity is reflected in balance\\n            uint256 transferQuantity = existingBalance + _quantity;\\n            if (newBalance != transferQuantity) revert ExplicitERC20__PostTransferBalanceInvalid(address(this), newBalance, transferQuantity);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/PreciseUnitMath.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\n/**\\n * @title PreciseUnitMath\\n * @author Set Protocol\\n *\\n * Arithmetic for fixed-point numbers with 18 decimals of precision. Some functions taken from\\n * dYdX's BaseMath library.\\n *\\n * CHANGELOG\\n * - 9/21/20: Added safePower function\\n * - 4/21/21: Added approximatelyEquals function\\n * - 12/13/21: Added preciseDivCeil (int overloads) function\\n * - 12/13/21: Added abs function\\n * - 4/14/23: Removed safePower function\\n * - 4/18/23: Upgrade OZ\\n * - 4/21/23: Removed OZ SafeMath utils\\n * - 9/18/23: Upgrade to Solidity 0.8.21\\n * - 9/26/23: Added custom errors\\n */\\nlibrary PreciseUnitMath {\\n    using SafeCast for int256;\\n\\n    /* ============ Custom Errors ============ */\\n\\n    /// @notice Emitted when an attempt is made to divide by zero.\\n    error PreciseUnitMath__DivisionByZero();\\n    /// @notice Emitted when the inputs provided are invalid for the operation.\\n    error PreciseUnitMath__InvalidInput(int256 inputA, int256 inputB);\\n    /// @notice Emitted when there's an overflow during the inversion operation.\\n    error PreciseUnitMath__InversionOverflow(int256 input);\\n\\n    // The number One in precise units.\\n    uint256 constant internal PRECISE_UNIT = 10 ** 18;\\n    int256 constant internal PRECISE_UNIT_INT = 10 ** 18;\\n\\n    // Max unsigned integer value\\n    uint256 constant internal MAX_UINT_256 = type(uint256).max;\\n    // Max and min signed integer value\\n    int256 constant internal MAX_INT_256 = type(int256).max;\\n    int256 constant internal MIN_INT_256 = type(int256).min;\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function preciseUnit() internal pure returns (uint256) {\\n        return PRECISE_UNIT;\\n    }\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function preciseUnitInt() internal pure returns (int256) {\\n        return PRECISE_UNIT_INT;\\n    }\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function maxUint256() internal pure returns (uint256) {\\n        return MAX_UINT_256;\\n    }\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function maxInt256() internal pure returns (int256) {\\n        return MAX_INT_256;\\n    }\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function minInt256() internal pure returns (int256) {\\n        return MIN_INT_256;\\n    }\\n\\n    /**\\n     * @dev Multiplies value a by value b (result is rounded down). It's assumed that the value b is the significand\\n     * of a number with 18 decimals precision.\\n     */\\n    function preciseMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (a * b) / PRECISE_UNIT;\\n    }\\n\\n    /**\\n     * @dev Multiplies value a by value b (result is rounded towards zero). It's assumed that the value b is the\\n     * significand of a number with 18 decimals precision.\\n     */\\n    function preciseMul(int256 a, int256 b) internal pure returns (int256) {\\n        return (a * b) / PRECISE_UNIT_INT;\\n    }\\n\\n    /**\\n     * @dev Multiplies value a by value b (result is rounded up). It's assumed that the value b is the significand\\n     * of a number with 18 decimals precision.\\n     */\\n    function preciseMulCeil(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n        return (((a * b) - 1) / PRECISE_UNIT) + 1;\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b (result is rounded down).\\n     */\\n    function preciseDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (a * PRECISE_UNIT) / b;\\n    }\\n\\n\\n    /**\\n     * @dev Divides value a by value b (result is rounded towards 0).\\n     */\\n    function preciseDiv(int256 a, int256 b) internal pure returns (int256) {\\n        return (a * PRECISE_UNIT_INT) / b;\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b (result is rounded up or away from 0).\\n     */\\n    function preciseDivCeil(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) revert PreciseUnitMath__DivisionByZero();\\n\\n        return a > 0 ? (((a * PRECISE_UNIT) - 1) / b) + 1 : 0;\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b (result is rounded up or away from 0). When `a` is 0, 0 is\\n     * returned. When `b` is 0, method reverts with divide-by-zero error.\\n     */\\n    function preciseDivCeil(int256 a, int256 b) internal pure returns (int256) {\\n        if (b == 0) revert PreciseUnitMath__DivisionByZero();\\n\\n        a = a * PRECISE_UNIT_INT;\\n        int256 c = a / b;\\n\\n        if (a % b != 0) {\\n            // a ^ b == 0 case is covered by the previous if statement, hence it won't resolve to --c\\n            (a ^ b > 0) ? ++c : --c;\\n        }\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b (result is rounded down - positive numbers toward 0 and negative away from 0).\\n     */\\n    function divDown(int256 a, int256 b) internal pure returns (int256) {\\n        if (b == 0) revert PreciseUnitMath__DivisionByZero();\\n        if (a == MIN_INT_256 && b == -1) revert PreciseUnitMath__InvalidInput(a, b);\\n\\n        int256 result = a / b;\\n        if (a ^ b < 0 && a % b != 0) {\\n            result -= 1;\\n        }\\n\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Multiplies value a by value b where rounding is towards the lesser number.\\n     * (positive values are rounded towards zero and negative values are rounded away from 0).\\n     */\\n    function conservativePreciseMul(int256 a, int256 b) internal pure returns (int256) {\\n        return divDown(a * b, PRECISE_UNIT_INT);\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b where rounding is towards the lesser number.\\n     * (positive values are rounded towards zero and negative values are rounded away from 0).\\n     */\\n    function conservativePreciseDiv(int256 a, int256 b) internal pure returns (int256) {\\n        return divDown(a * PRECISE_UNIT_INT, b);\\n    }\\n\\n    /**\\n     * @dev Returns true if a =~ b within range, false otherwise.\\n     */\\n    function approximatelyEquals(uint256 a, uint256 b, uint256 range) internal pure returns (bool) {\\n        return a <= b + range && a >= b - range;\\n    }\\n\\n    /**\\n     * Returns the absolute value of int256 `a` as a uint256\\n     */\\n    function abs(int256 a) internal pure returns (uint256) {\\n        return a > -1 ? a.toUint256() : (a * -1).toUint256();\\n    }\\n\\n    /**\\n     * Returns the negation of a\\n     */\\n    function neg(int256 a) internal pure returns (int256) {\\n        if (a == MIN_INT_256) revert PreciseUnitMath__InversionOverflow(a);\\n        return -a;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/StringArrayUtils.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2021 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\n/* solhint-disable var-name-mixedcase */\\n\\n/**\\n * @title StringArrayUtils\\n * @author Set Protocol\\n *\\n * Utility functions to handle String Arrays\\n *\\n * CHANGELOG\\n * - 9/18/23: Upgrade to Solidity 0.8.21\\n * - 9/26/23: Added custom errors\\n */\\nlibrary StringArrayUtils {\\n\\n    /* ============ Custom Errors ============ */\\n\\n    /// @notice Emitted when a target string is not found within the array.\\n    error StringsArrayUtils__ArrayItemNotFound(address emitter, string target);\\n\\n    /**\\n     * Finds the index of the first occurrence of the given element.\\n     * @param A The input string to search\\n     * @param a The value to find\\n     * @return Returns (index and isIn) for the first occurrence starting from index 0\\n     */\\n    function indexOf(string[] memory A, string memory a) internal pure returns (uint256, bool) {\\n        uint256 length = A.length;\\n        for (uint256 i; i < length; ) {\\n            if (keccak256(bytes(A[i])) == keccak256(bytes(a))) {\\n                return (i, true);\\n            }\\n            unchecked { ++i; }\\n        }\\n        return (type(uint256).max, false);\\n    }\\n\\n    /**\\n     * @param A The input array to search\\n     * @param a The string to remove\\n     */\\n    function removeStorage(string[] storage A, string memory a)\\n        internal\\n    {\\n        (uint256 index, bool isIn) = indexOf(A, a);\\n        if (!isIn) {\\n            revert StringsArrayUtils__ArrayItemNotFound(address(this), a);\\n        } else {\\n            uint256 lastIndex = A.length - 1; // If the array would be empty, the previous line would throw, so no underflow here\\n            if (index != lastIndex) { A[index] = A[lastIndex]; }\\n            A.pop();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/mocks/AddressArrayUtilsMock.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { AddressArrayUtils } from \\\"../lib/AddressArrayUtils.sol\\\";\\n\\ncontract AddressArrayUtilsMock {\\n    using AddressArrayUtils for address[];\\n\\n    address[] public storageArray;\\n\\n    function testIndexOf(address[] memory A, address a) external pure returns (uint256, bool) {\\n        return A.indexOf(a);\\n    }\\n\\n    function testContains(address[] memory A, address a) external pure returns (bool) {\\n        return A.contains(a);\\n    }\\n\\n    function testHasDuplicate(address[] calldata A) external pure returns (bool) {\\n        return A.hasDuplicate();\\n    }\\n\\n    function testRemove(address[] memory A, address a) external pure returns (address[] memory) {\\n        return A.remove(a);\\n    }\\n\\n    function testRemoveStorage(address a) external {\\n        storageArray.removeStorage(a);\\n    }\\n\\n    function testPop(address[] memory A, uint256 index) external pure returns (address[] memory, address) {\\n        return A.pop(index);\\n    }\\n\\n    function testExtend(address[] memory A, address[] memory B) external pure returns (address[] memory) {\\n        return A.extend(B);\\n    }\\n\\n    function testValidatePairsWithArrayUint(address[] calldata A, uint[] calldata a) external pure {\\n        A.validatePairsWithArray(a);\\n    }\\n\\n    function testValidatePairsWithArrayBool(address[] calldata A, bool[] calldata a) external pure {\\n        A.validatePairsWithArray(a);\\n    }\\n\\n    function testValidatePairsWithArrayString(address[] calldata A, string[] calldata a) external pure {\\n        A.validatePairsWithArray(a);\\n    }\\n\\n    function testValidatePairsWithArrayAddress(address[] calldata A, address[] calldata a) external pure {\\n        A.validatePairsWithArray(a);\\n    }\\n\\n    function testValidatePairsWithArrayBytes(address[] calldata A, bytes[] calldata a) external pure {\\n        A.validatePairsWithArray(a);\\n    }\\n\\n    function setStorageArray(address[] calldata A) external {\\n        storageArray = A;\\n    }\\n\\n    function getStorageArray() external view returns(address[] memory) {\\n        return storageArray;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/mocks/BytesArrayUtilsMock.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2022 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { BytesArrayUtils } from \\\"../lib/BytesArrayUtils.sol\\\";\\n\\ncontract BytesArrayUtilsMock {\\n    using BytesArrayUtils for bytes;\\n\\n    function testToBool(bytes memory _bytes, uint256 _start) external pure returns (bool) {\\n        return _bytes.toBool(_start);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/mocks/ContractCallerMock.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\ncontract ContractCallerMock {\\n    using Address for address;\\n\\n    constructor() {}\\n\\n    function invoke(\\n        address _target,\\n        uint256 _value,\\n        bytes calldata _data\\n    )\\n        external\\n        returns (bytes memory _returnValue)\\n    {\\n        _returnValue = _target.functionCallWithValue(_data, _value);\\n\\n        return _returnValue;\\n    }\\n}\"\r\n    },\r\n    \"contracts/mocks/ExplicitERC20Mock.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { ExplicitERC20 } from \\\"../lib/ExplicitERC20.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract ExplicitERC20Mock {\\n    \\n    function transferFrom(\\n        IERC20 _token,\\n        address _from,\\n        address _to,\\n        uint256 _quantity\\n    )\\n        external\\n    {\\n        ExplicitERC20.transferFrom(\\n            _token,\\n            _from,\\n            _to,\\n            _quantity\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/mocks/external/OneInchV4ExchangeMock.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2023 Amun Holdings Limited and affiliated entities.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { ERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\n/**\\n * @title OneInchV4ExchangeMock\\n * @author Amun\\n *\\n * Mock contract implementation of 1Inch V4\\n */\\ncontract OneInchV4ExchangeMock {\\n    address public mockReceiveToken;\\n    address public mockSendToken;\\n    uint256 public mockReceiveAmount;\\n    uint256 public mockSendAmount;\\n    // Address of SetToken which will send/receive token\\n    address public setTokenAddress;\\n\\n    constructor(\\n        address _mockSendToken,\\n        address _mockReceiveToken,\\n        uint256 _mockSendAmount,\\n        uint256 _mockReceiveAmount\\n    ) {\\n        mockSendToken = _mockSendToken;\\n        mockReceiveToken = _mockReceiveToken;\\n        mockSendAmount = _mockSendAmount;\\n        mockReceiveAmount = _mockReceiveAmount;\\n    }\\n\\n    // Initialize SetToken address which will send/receive tokens for the trade\\n    function addSetTokenAddress(address _setTokenAddress) external {\\n        setTokenAddress = _setTokenAddress;\\n    }\\n\\n    function updateSendAmount(uint256 _newSendAmount) external {\\n        mockSendAmount = _newSendAmount;\\n    }\\n\\n    function updateReceiveAmount(uint256 _newReceiveAmount) external {\\n        mockReceiveAmount = _newReceiveAmount;\\n    }\\n\\n    // Conform to 1Inch Swap interface\\n    \\n    struct SwapDescription {\\n        address srcToken;\\n        address dstToken;\\n        address payable srcReceiver;\\n        address payable dstReceiver;\\n        uint256 amount;\\n        uint256 minReturnAmount;\\n        uint256 flags;\\n        bytes permit;\\n    }\\n\\n    function swap(\\n        address,\\n        SwapDescription calldata,\\n        bytes calldata\\n    )\\n        external\\n        payable\\n        returns (uint256 returnAmount)\\n    {\\n        require(ERC20(mockSendToken).transferFrom(msg.sender, address(this), mockSendAmount), \\\"ERC20 TransferFrom failed\\\");\\n        require(ERC20(mockReceiveToken).transfer(msg.sender, mockReceiveAmount), \\\"ERC20 transfer failed\\\");\\n\\n        return mockReceiveAmount;\\n    }\\n}\"\r\n    },\r\n    \"contracts/mocks/external/SanctionsListMock.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2023 Amun Holdings Limited and affiliated entities.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\n/**\\n * @title SanctionsListMock\\n * @author Amun\\n *\\n * Mock contract implementation of SanctionList\\n */\\ncontract SanctionsListMock {\\n\\n    mapping(address => bool) private sanctionedAddresses;\\n\\n    constructor(address _sanctionedAddress) {\\n        sanctionedAddresses[_sanctionedAddress] = true;\\n    }\\n\\n    function sanction(address _sanctionedAddress) external {\\n        sanctionedAddresses[_sanctionedAddress] = true;\\n    }\\n\\n    function isSanctioned(address _caller) external view returns (bool) {\\n        return sanctionedAddresses[_caller];\\n    }\\n}\"\r\n    },\r\n    \"contracts/mocks/integrations/TradeAdapterMock.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2021 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { ERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\n/**\\n * @title TradeAdapterMock\\n * @author Set Protocol\\n *\\n * Trade Adapter that doubles as a mock exchange as well.\\n */\\ncontract TradeAdapterMock {\\n\\n    /* ============ Helper Functions ============ */\\n\\n    function withdraw(address _token)\\n        external\\n    {\\n        uint256 balance = ERC20(_token).balanceOf(address(this));\\n        require(ERC20(_token).transfer(msg.sender, balance), \\\"ERC20 transfer failed\\\");\\n    }\\n    \\n    /* ============ Trade Functions ============ */\\n\\n    function trade(\\n        address _sourceToken,\\n        address _destinationToken,\\n        address _destinationAddress,\\n        uint256 _sourceQuantity,\\n        uint256 /* _minDestinationQuantity */\\n    )\\n        external\\n    {\\n        uint256 destinationBalance = ERC20(_destinationToken).balanceOf(address(this));\\n        require(ERC20(_sourceToken).transferFrom(_destinationAddress, address(this), _sourceQuantity), \\\"ERC20 TransferFrom failed\\\");\\n        require(ERC20(_destinationToken).transfer(_destinationAddress, destinationBalance), \\\"ERC20 transfer failed\\\");\\n    }\\n\\n    /* ============ Adapter Functions ============ */\\n\\n    function getSpender()\\n        external\\n        view\\n        returns (address)\\n    {\\n        return address(this);\\n    }\\n\\n    function getTradeCalldata(\\n        address _sourceToken,\\n        address _destinationToken,\\n        address _destinationAddress,\\n        uint256 _sourceQuantity,\\n        uint256 _minDestinationQuantity,\\n        bytes memory /* _data */\\n    )\\n        external\\n        view\\n        returns (address, uint256, bytes memory)\\n    {\\n        // Encode method data for SetToken to invoke\\n        bytes memory methodData = abi.encodeWithSignature(\\n            \\\"trade(address,address,address,uint256,uint256)\\\",\\n            _sourceToken,\\n            _destinationToken,\\n            _destinationAddress,\\n            _sourceQuantity,\\n            _minDestinationQuantity\\n        );\\n\\n        return (address(this), 0, methodData);\\n    }\\n}\"\r\n    },\r\n    \"contracts/mocks/OracleAdapterMock.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\ncontract OracleAdapterMock {\\n    uint256 public dummyPrice;\\n    address public asset;\\n\\n    constructor(address _asset, uint256 _dummyPrice)\\n    { dummyPrice = _dummyPrice; asset = _asset; }\\n\\n    function getPrice(address _assetOne, address _assetTwo)\\n        external\\n        view\\n        returns (bool, uint256)\\n    {\\n        _assetTwo; // Used to silence compiler warnings\\n\\n        if (_assetOne == asset) {\\n            return (true, dummyPrice);\\n        } else {\\n            return (false, 0);\\n        }\\n    }\\n}\"\r\n    },\r\n    \"contracts/mocks/OracleMock.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\ncontract OracleMock {\\n    uint256 public price;\\n\\n    constructor(uint256 _startingPrice) {\\n        price = _startingPrice;\\n    }\\n\\n    /* ============ External Functions ============ */\\n    function updatePrice(uint256 _newPrice) external {\\n        price = _newPrice;\\n    }\\n\\n    /**\\n     * Returns the queried data from an oracle returning uint256\\n     *\\n     * @return  Current price of asset represented in uint256\\n     */\\n    function read() external view returns (uint256) {\\n        return price;\\n    }\\n}\"\r\n    },\r\n    \"contracts/mocks/PositionMock.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { ISetToken } from \\\"../interfaces/ISetToken.sol\\\";\\nimport { Position } from \\\"../protocol/lib/Position.sol\\\";\\n\\n// Mock contract implementation of Position functions\\ncontract PositionMock {\\n    constructor() {}\\n\\n    function initialize(ISetToken _setToken) external {\\n        _setToken.initializeModule();\\n    }\\n\\n    function testHasDefaultPosition(ISetToken _setToken, address _component) external view returns(bool) {\\n        return Position.hasDefaultPosition(_setToken, _component);    \\n    }\\n\\n    function testHasExternalPosition(ISetToken _setToken, address _component) external view returns(bool) {\\n        return Position.hasExternalPosition(_setToken, _component);\\n    }\\n    function testHasSufficientDefaultUnits(ISetToken _setToken, address _component, uint256 _unit) external view returns(bool) {\\n        return Position.hasSufficientDefaultUnits(_setToken, _component, _unit);    \\n    }\\n    function testHasSufficientExternalUnits(\\n        ISetToken _setToken,\\n        address _component,\\n        address _module,\\n        uint256 _unit\\n    )\\n        external\\n        view\\n        returns(bool)\\n    {\\n        return Position.hasSufficientExternalUnits(_setToken, _component, _module, _unit);    \\n    }\\n\\n    function testEditDefaultPosition(ISetToken _setToken, address _component, uint256 _newUnit) external {\\n        return Position.editDefaultPosition(_setToken, _component, _newUnit);   \\n    }\\n\\n    function testEditExternalPosition(\\n        ISetToken _setToken,\\n        address _component,\\n        address _module,\\n        int256 _newUnit,\\n        bytes memory _data\\n    )\\n        external\\n    {\\n        Position.editExternalPosition(_setToken, _component, _module, _newUnit, _data);\\n    }\\n\\n    function testGetDefaultTotalNotional(\\n        uint256 _setTokenSupply,\\n        uint256 _positionUnit\\n    )\\n        external\\n        pure\\n        returns (uint256)\\n    {\\n        return Position.getDefaultTotalNotional(_setTokenSupply, _positionUnit);\\n    }\\n\\n    function testGetDefaultPositionUnit(\\n        uint256 _setTokenSupply,\\n        uint256 _totalNotional\\n    )\\n        external\\n        pure\\n        returns (uint256)\\n    {\\n        return Position.getDefaultPositionUnit(_setTokenSupply, _totalNotional);\\n    }\\n\\n    function testGetDefaultTrackedBalance(ISetToken _setToken, address _component)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return Position.getDefaultTrackedBalance(_setToken, _component);\\n    }\\n\\n    function testCalculateAndEditDefaultPosition(\\n        ISetToken _setToken,\\n        address _component,\\n        uint256 _setTotalSupply,\\n        uint256 _componentPreviousBalance\\n    )\\n        external\\n        returns (uint256, uint256, uint256)\\n    {\\n        return Position.calculateAndEditDefaultPosition(\\n            _setToken,\\n            _component,\\n            _setTotalSupply,\\n            _componentPreviousBalance\\n        );\\n    }\\n\\n    function testCalculateDefaultEditPositionUnit(\\n        uint256 _setTokenSupply,\\n        uint256 _preTotalNotional,\\n        uint256 _postTotalNotional,\\n        uint256 _prePositionUnit\\n    )\\n        external\\n        pure\\n        returns (uint256)\\n    {\\n        return Position.calculateDefaultEditPositionUnit(\\n            _setTokenSupply,\\n            _preTotalNotional,\\n            _postTotalNotional,\\n            _prePositionUnit\\n        );\\n    }\\n}\"\r\n    },\r\n    \"contracts/mocks/PositionV2Mock.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { ISetToken } from \\\"../interfaces/ISetToken.sol\\\";\\nimport { PositionV2 } from \\\"../protocol/lib/PositionV2.sol\\\";\\n\\n\\n// Mock contract implementation of PositionV2 functions\\ncontract PositionV2Mock {\\n    constructor() {}\\n\\n    function initialize(ISetToken _setToken) external {\\n        _setToken.initializeModule();\\n    }\\n\\n    function testHasDefaultPosition(ISetToken _setToken, address _component) external view returns(bool) {\\n        return PositionV2.hasDefaultPosition(_setToken, _component);    \\n    }\\n\\n    function testHasExternalPosition(ISetToken _setToken, address _component) external view returns(bool) {\\n        return PositionV2.hasExternalPosition(_setToken, _component);\\n    }\\n    function testHasSufficientDefaultUnits(ISetToken _setToken, address _component, uint256 _unit) external view returns(bool) {\\n        return PositionV2.hasSufficientDefaultUnits(_setToken, _component, _unit);    \\n    }\\n    function testHasSufficientExternalUnits(\\n        ISetToken _setToken,\\n        address _component,\\n        address _module,\\n        uint256 _unit\\n    )\\n        external\\n        view\\n        returns(bool)\\n    {\\n        return PositionV2.hasSufficientExternalUnits(_setToken, _component, _module, _unit);    \\n    }\\n\\n    function testEditDefaultPosition(ISetToken _setToken, address _component, uint256 _newUnit) external {\\n        return PositionV2.editDefaultPosition(_setToken, _component, _newUnit);   \\n    }\\n\\n    function testEditExternalPosition(\\n        ISetToken _setToken,\\n        address _component,\\n        address _module,\\n        int256 _newUnit,\\n        bytes memory _data\\n    )\\n        external\\n    {\\n        PositionV2.editExternalPosition(_setToken, _component, _module, _newUnit, _data);\\n    }\\n\\n    function testGetDefaultTotalNotional(\\n        uint256 _setTokenSupply,\\n        uint256 _positionUnit\\n    )\\n        external\\n        pure\\n        returns (uint256)\\n    {\\n        return PositionV2.getDefaultTotalNotional(_setTokenSupply, _positionUnit);\\n    }\\n\\n    function testGetDefaultPositionUnit(\\n        uint256 _setTokenSupply,\\n        uint256 _totalNotional\\n    )\\n        external\\n        pure\\n        returns (uint256)\\n    {\\n        return PositionV2.getDefaultPositionUnit(_setTokenSupply, _totalNotional);\\n    }\\n\\n    function testGetDefaultTrackedBalance(ISetToken _setToken, address _component)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return PositionV2.getDefaultTrackedBalance(_setToken, _component);\\n    }\\n\\n    function testCalculateAndEditDefaultPosition(\\n        ISetToken _setToken,\\n        address _component,\\n        uint256 _setTotalSupply,\\n        uint256 _componentPreviousBalance\\n    )\\n        external\\n        returns (uint256, uint256, uint256)\\n    {\\n        return PositionV2.calculateAndEditDefaultPosition(\\n            _setToken,\\n            _component,\\n            _setTotalSupply,\\n            _componentPreviousBalance\\n        );\\n    }\\n\\n    function testCalculateDefaultEditPositionUnit(\\n        uint256 _setTokenSupply,\\n        uint256 _preTotalNotional,\\n        uint256 _postTotalNotional,\\n        uint256 _prePositionUnit\\n    )\\n        external\\n        pure\\n        returns (uint256)\\n    {\\n        return PositionV2.calculateDefaultEditPositionUnit(\\n            _setTokenSupply,\\n            _preTotalNotional,\\n            _postTotalNotional,\\n            _prePositionUnit\\n        );\\n    }\\n}\"\r\n    },\r\n    \"contracts/mocks/PreciseUnitMathMock.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { PreciseUnitMath } from \\\"../lib/PreciseUnitMath.sol\\\";\\n\\ncontract PreciseUnitMathMock {\\n    using PreciseUnitMath for uint256;\\n    using PreciseUnitMath for int256;\\n\\n    function preciseUnit() external pure returns(uint256) {\\n        return PreciseUnitMath.preciseUnit();\\n    }\\n\\n    function preciseUnitInt() external pure returns(int256) {\\n        return PreciseUnitMath.preciseUnitInt();\\n    }\\n\\n    function maxUint256() external pure returns(uint256) {\\n        return PreciseUnitMath.maxUint256();\\n    }\\n\\n    function maxInt256() external pure returns(int256) {\\n        return PreciseUnitMath.maxInt256();\\n    }\\n\\n    function minInt256() external pure returns(int256) {\\n        return PreciseUnitMath.minInt256();\\n    }\\n\\n    function preciseMul(uint256 a, uint256 b) external pure returns(uint256) {\\n        return a.preciseMul(b);\\n    }\\n\\n    function preciseMulInt(int256 a, int256 b) external pure returns(int256) {\\n        return a.preciseMul(b);\\n    }\\n\\n    function preciseMulCeil(uint256 a, uint256 b) external pure returns(uint256) {\\n        return a.preciseMulCeil(b);\\n    }\\n\\n    function preciseDiv(uint256 a, uint256 b) external pure returns(uint256) {\\n        return a.preciseDiv(b);\\n    }\\n\\n    function preciseDiv(int256 a, int256 b) external pure returns(int256) {\\n        return a.preciseDiv(b);\\n    }\\n\\n    function preciseDivCeil(uint256 a, uint256 b) external pure returns(uint256) {\\n        return a.preciseDivCeil(b);\\n    }\\n\\n    function preciseDivCeilInt(int256 a, int256 b) external pure returns(int256) {\\n        return a.preciseDivCeil(b);\\n    }\\n\\n    function divDown(int256 a, int256 b) external pure returns(int256) {\\n        return a.divDown(b);\\n    }\\n\\n    function conservativePreciseMul(int256 a, int256 b) external pure returns(int256) {\\n        return a.conservativePreciseMul(b);\\n    }\\n\\n    function conservativePreciseDiv(int256 a, int256 b) external pure returns(int256) {\\n        return a.conservativePreciseDiv(b);\\n    }\\n\\n    function approximatelyEquals(uint256 a, uint256 b, uint256 range) external pure returns (bool) {\\n        return a.approximatelyEquals(b, range);\\n    }\\n\\n    function abs(int256 a) external pure returns (uint256) {\\n        return a.abs();\\n    }\\n\\n    function neg(int256 a) external pure returns (int256) {\\n        return a.neg();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/mocks/protocol/integration/AaveLendingPoolCoreMock.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\ncontract AaveLendingPoolCoreMock {\\n\\n    mapping(address => address) public reserves;\\n\\n    function getReserveATokenAddress(address _reserve) public view returns (address) {\\n        return reserves[_reserve];\\n    }\\n\\n    function setReserveATokenAddress(address _reserve, address _aToken) public {\\n        reserves[_reserve] = _aToken;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/mocks/protocol/integration/AaveLendingPoolMock.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\ncontract AaveLendingPoolMock {\\n\\n    address public core;\\n\\n    constructor(address _core) {\\n        core = _core;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/mocks/protocol/integration/exchange/OneInchV4ExchangeAdapterStaticMock.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2023 Amun Holdings Limited and affiliated entities.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\n/**\\n * @title OneInchV4ExchangeAdapterStaticMock\\n * @author Amun\\n *\\n * Exchange adapter for 1Inch exchange that returns static data for trades\\n */\\ncontract OneInchV4ExchangeAdapterStaticMock {\\n\\n    /* ============ State Variables ============ */\\n    \\n    // Address of 1Inch approve token address\\n    address public immutable ONE_INCH_APPROVAL_ADDRESS;\\n\\n    // Address of 1Inch exchange address\\n    address public immutable ONE_INCH_EXCHANGE_ADDRESS;\\n\\n    // Bytes to check 1Inch function signature\\n    bytes4 public immutable ONE_INCH_FUNCTION_SIGNATURE;\\n\\n    /* ============ Constructor ============ */\\n\\n    /**\\n     * Set state variables\\n     *\\n     * @param _oneInchApprovalAddress       Address of 1inch approval contract\\n     * @param _oneInchExchangeAddress       Address of 1inch exchange contract\\n     * @param _oneInchFunctionSignature     Bytes of 1inch function signature\\n     */\\n    constructor(\\n        address _oneInchApprovalAddress,\\n        address _oneInchExchangeAddress,\\n        bytes4 _oneInchFunctionSignature\\n    )\\n    {\\n        ONE_INCH_APPROVAL_ADDRESS = _oneInchApprovalAddress;\\n        ONE_INCH_EXCHANGE_ADDRESS = _oneInchExchangeAddress;\\n        ONE_INCH_FUNCTION_SIGNATURE = _oneInchFunctionSignature;\\n    }\\n\\n    /* ============ External Getter Functions ============ */\\n\\n    function isDynamicDataAdapter() external pure returns (bool) {\\n        return false;\\n    }\\n\\n    /**\\n     * Return 1inch calldata which is already generated from the 1inch API\\n     *\\n     * @param  _sourceToken              Address of source token to be sold\\n     * @param  _destinationToken         Address of destination token to buy\\n     * @param  _sourceQuantity           Amount of source token to sell\\n     * @param  _minDestinationQuantity   Min amount of destination token to buy\\n     * @param  _data                     Arbitrage bytes containing trade call data\\n     *\\n     * @return address                   Target contract address\\n     * @return uint256                   Call value\\n     * @return bytes                     Trade calldata\\n     */\\n    function getTradeCalldata(\\n        address _sourceToken,\\n        address _destinationToken,\\n        address /* _destinationAddress */,\\n        uint256 _sourceQuantity,\\n        uint256 _minDestinationQuantity,\\n        bytes memory _data\\n    )\\n        external\\n        view\\n        returns (address, uint256, bytes memory)\\n    {   \\n        (bytes4 signature,\\n        address fromToken,\\n        address toToken,\\n        uint256 fromTokenAmount,\\n        uint256 minReturnAmount) = this.getTradeMetadata(_data);\\n\\n        require(\\n            signature == ONE_INCH_FUNCTION_SIGNATURE,\\n            \\\"Not One Inch Swap Function\\\"\\n        );\\n\\n        require(\\n            fromToken == _sourceToken,\\n            \\\"Invalid send token\\\"\\n        );\\n\\n        require(\\n            toToken == _destinationToken,\\n            \\\"Invalid receive token\\\"\\n        );\\n\\n        require(\\n            fromTokenAmount == _sourceQuantity,\\n            \\\"Source quantity mismatch\\\"\\n        );\\n\\n        require(\\n            minReturnAmount >= _minDestinationQuantity,\\n            \\\"Min destination quantity mismatch\\\"\\n        );\\n\\n        return (ONE_INCH_EXCHANGE_ADDRESS, 0, _data);\\n    }\\n    \\n    /**\\n     * Return 1inch metadata which was included in already generated from the 1inch API\\n     *\\n     * @param  _data                     Arbitrage bytes containing trade call data\\n     *\\n     * @return signature                 Signature of function to call\\n     * @return fromToken                 Input token address\\n     * @return toToken                 Output token address\\n     * @return inputAmount               Input token amount\\n     * @return minAmountOut              Minimum return amount of output token\\n     */\\n    function getTradeMetadata(\\n        bytes memory _data\\n    )\\n        external\\n        pure\\n        returns (bytes4 signature, address fromToken, address toToken, uint256 inputAmount, uint256 minAmountOut) {\\n            // Parse 1inch calldata and validate parameters match expected inputs\\n            /* solhint-disable-next-line no-inline-assembly */\\n            assembly {            \\n                signature := mload(add(_data, 32))\\n                fromToken := mload(add(_data, 132))\\n                toToken := mload(add(_data, 164))\\n                inputAmount := mload(add(_data, 260))\\n                minAmountOut := mload(add(_data, 292))\\n            }\\n\\n        }\\n\\n    /**\\n     * Returns the address to approve source tokens to for trading. This is the TokenTaker address\\n     *\\n     * @return address             Address of the contract to approve tokens to\\n     */\\n    function getSpender()\\n        external\\n        view\\n        returns (address)\\n    {\\n        return ONE_INCH_APPROVAL_ADDRESS;\\n    }\\n}\"\r\n    },\r\n    \"contracts/mocks/protocol/integration/lib/AaveV2Mock.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2021 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { AaveV2 } from \\\"../../../../protocol/integration/lib/AaveV2.sol\\\";\\nimport { ILendingPool } from \\\"../../../../interfaces/external/aave-v2/ILendingPool.sol\\\";\\nimport { ISetToken } from \\\"../../../../interfaces/ISetToken.sol\\\";\\n\\n/**\\n * @title AaveV2Mock\\n * @author Set Protocol\\n *\\n * Mock for AaveV2 Library contract. Used for testing AaveV2 Library contract, as the library\\n * contract can't be tested directly using ethers.js\\n */\\ncontract AaveV2Mock {\\n\\n    /* ============ External ============ */\\n    \\n    function testGetDepositCalldata(\\n        ILendingPool _lendingPool,\\n        address _asset, \\n        uint256 _amountNotional,\\n        address _onBehalfOf,\\n        uint16 _referralCode\\n    )\\n        public\\n        pure\\n        returns (address, uint256, bytes memory)\\n    {\\n        return AaveV2.getDepositCalldata(_lendingPool, _asset, _amountNotional, _onBehalfOf, _referralCode);\\n    }\\n    \\n    function testInvokeDeposit(\\n        ISetToken _setToken,\\n        ILendingPool _lendingPool,\\n        address _asset,\\n        uint256 _amountNotional\\n    )\\n        external\\n    {\\n        return AaveV2.invokeDeposit(_setToken, _lendingPool, _asset, _amountNotional);\\n    }\\n    \\n    function testGetWithdrawCalldata(\\n        ILendingPool _lendingPool,\\n        address _asset, \\n        uint256 _amountNotional,\\n        address _receiver\\n    )\\n        public\\n        pure\\n        returns (address, uint256, bytes memory)\\n    {\\n        return AaveV2.getWithdrawCalldata(_lendingPool, _asset, _amountNotional, _receiver);\\n    }\\n    \\n    function testInvokeWithdraw(\\n        ISetToken _setToken,\\n        ILendingPool _lendingPool,\\n        address _asset,\\n        uint256 _amountNotional\\n    )\\n        external\\n        returns (uint256)\\n    {\\n        return AaveV2.invokeWithdraw(_setToken, _lendingPool, _asset, _amountNotional);\\n    }\\n    \\n    function testGetBorrowCalldata(\\n        ILendingPool _lendingPool,\\n        address _asset, \\n        uint256 _amountNotional,\\n        uint256 _interestRateMode,\\n        uint16 _referralCode,\\n        address _onBehalfOf\\n    )\\n        public\\n        pure\\n        returns (address, uint256, bytes memory)\\n    {\\n        return AaveV2.getBorrowCalldata(_lendingPool, _asset, _amountNotional, _interestRateMode, _referralCode, _onBehalfOf);\\n    }\\n    \\n    function testInvokeBorrow(\\n        ISetToken _setToken,\\n        ILendingPool _lendingPool,\\n        address _asset,\\n        uint256 _amountNotional,\\n        uint256 _interestRateMode\\n    )\\n        external\\n    {\\n        return AaveV2.invokeBorrow(_setToken, _lendingPool, _asset, _amountNotional, _interestRateMode);\\n    }\\n\\n    function testGetRepayCalldata(\\n        ILendingPool _lendingPool,\\n        address _asset, \\n        uint256 _amountNotional,\\n        uint256 _interestRateMode,        \\n        address _onBehalfOf\\n    )\\n        public\\n        pure\\n        returns (address, uint256, bytes memory)\\n    {\\n        return AaveV2.getRepayCalldata(_lendingPool, _asset, _amountNotional, _interestRateMode, _onBehalfOf);\\n    }\\n    \\n    function testInvokeRepay(\\n        ISetToken _setToken,\\n        ILendingPool _lendingPool,\\n        address _asset,\\n        uint256 _amountNotional,\\n        uint256 _interestRateMode\\n    )\\n        external\\n        returns (uint256)\\n    {\\n        return AaveV2.invokeRepay(_setToken, _lendingPool, _asset, _amountNotional, _interestRateMode);\\n    }\\n\\n    function testGetSetUserUseReserveAsCollateralCalldata(\\n        ILendingPool _lendingPool,\\n        address _asset,\\n        bool _useAsCollateral\\n    )\\n        external\\n        pure\\n        returns (address, uint256, bytes memory)\\n    {\\n        return AaveV2.getSetUserUseReserveAsCollateralCalldata(_lendingPool, _asset, _useAsCollateral);\\n    }\\n\\n    function testInvokeSetUserUseReserveAsCollateral(\\n        ISetToken _setToken,\\n        ILendingPool _lendingPool,\\n        address _asset,\\n        bool _useAsCollateral\\n    )\\n        external\\n    {\\n        return AaveV2.invokeSetUserUseReserveAsCollateral(_setToken, _lendingPool, _asset, _useAsCollateral);\\n    }\\n\\n    function testGetSwapBorrowRateModeCalldata(\\n        ILendingPool _lendingPool,\\n        address _asset,\\n        uint256 _rateMode\\n    )\\n        external\\n        pure\\n        returns (address, uint256, bytes memory)\\n    {\\n        return AaveV2.getSwapBorrowRateModeCalldata(_lendingPool, _asset, _rateMode);\\n    }\\n\\n    function testInvokeSwapBorrowRateMode(\\n        ISetToken _setToken,\\n        ILendingPool _lendingPool,\\n        address _asset,\\n        uint256 _rateMode\\n    )\\n        external\\n    {\\n        return AaveV2.invokeSwapBorrowRateMode(_setToken, _lendingPool, _asset, _rateMode);\\n    }\\n\\n    /* ============ Helper Functions ============ */\\n\\n    function initializeModuleOnSet(ISetToken _setToken) external {\\n        _setToken.initializeModule();\\n    }\\n}\"\r\n    },\r\n    \"contracts/mocks/protocol/lib/InvokeMock.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { ISetToken } from \\\"../../../interfaces/ISetToken.sol\\\";\\nimport { Invoke } from \\\"../../../protocol/lib/Invoke.sol\\\";\\n\\ncontract InvokeMock {\\n\\n    /* ============ External Functions ============ */\\n\\n    function testInvokeApprove(\\n        ISetToken _setToken,\\n        address _token,\\n        address _spender,\\n        uint256 _quantity\\n    ) external {\\n        Invoke.invokeApprove(_setToken, _token, _spender, _quantity);\\n    }\\n\\n    function testInvokeTransfer(\\n        ISetToken _setToken,\\n        address _token,\\n        address _spender,\\n        uint256 _quantity\\n    ) external {\\n        Invoke.invokeTransfer(_setToken, _token, _spender, _quantity);\\n    }\\n\\n    function testStrictInvokeTransfer(\\n        ISetToken _setToken,\\n        address _token,\\n        address _spender,\\n        uint256 _quantity\\n    ) external {\\n        Invoke.strictInvokeTransfer(_setToken, _token, _spender, _quantity);\\n    }\\n\\n    function testInvokeUnwrapWETH(ISetToken _setToken, address _weth, uint256 _quantity) external {\\n        Invoke.invokeUnwrapWETH(_setToken, _weth, _quantity);\\n    }\\n\\n    function testInvokeWrapWETH(ISetToken _setToken, address _weth, uint256 _quantity) external {\\n        Invoke.invokeWrapWETH(_setToken, _weth, _quantity);\\n    }\\n\\n    /* ============ Helper Functions ============ */\\n\\n    function initializeModuleOnSet(ISetToken _setToken) external {\\n        _setToken.initializeModule();\\n    }\\n}\"\r\n    },\r\n    \"contracts/mocks/protocol/lib/IssuanceValidationUtilsMock.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2021 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { ISetToken } from \\\"../../../interfaces/ISetToken.sol\\\";\\nimport { IssuanceValidationUtils } from \\\"../../../protocol/lib/IssuanceValidationUtils.sol\\\";\\n\\ncontract IssuanceValidationUtilsMock {\\n    /* ============ External Functions ============ */\\n\\n    function testValidateCollateralizationPostTransferInPreHook(\\n        ISetToken _setToken, \\n        address _component, \\n        uint256 _initialSetSupply,\\n        uint256 _componentQuantity\\n    )\\n        external\\n        view\\n    {\\n        IssuanceValidationUtils.validateCollateralizationPostTransferInPreHook(\\n            _setToken, \\n            _component, \\n            _initialSetSupply,\\n            _componentQuantity\\n        );\\n    }\\n\\n    function testValidateCollateralizationPostTransferOut(\\n        ISetToken _setToken, \\n        address _component,\\n        uint256 _finalSetSupply\\n    ) \\n        external\\n        view\\n    {\\n        IssuanceValidationUtils.validateCollateralizationPostTransferOut(\\n            _setToken, \\n            _component, \\n            _finalSetSupply\\n        );\\n    }\\n}\"\r\n    },\r\n    \"contracts/mocks/protocol/lib/ModuleBaseMock.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport { IController } from \\\"../../../interfaces/IController.sol\\\";\\nimport { ISetToken } from \\\"../../../interfaces/ISetToken.sol\\\";\\nimport { ModuleBase } from \\\"../../../protocol/lib/ModuleBase.sol\\\";\\n\\ncontract ModuleBaseMock is ModuleBase {\\n\\n    bool public removed;\\n\\n    constructor(IController _controller) ModuleBase(_controller) {}\\n\\n    /* ============ External Functions ============ */\\n\\n    function testTransferFrom(IERC20 _token, address _from, address _to, uint256 _quantity) external {\\n        return transferFrom(_token, _from, _to, _quantity);\\n    }\\n\\n\\n    function testIsSetPendingInitialization(ISetToken _setToken) external view returns(bool) {\\n        return isSetPendingInitialization(_setToken);\\n    }\\n\\n    function testIsSetManager(ISetToken _setToken, address _toCheck) external view returns(bool) {\\n        return isSetManager(_setToken, _toCheck);\\n    }\\n\\n    function testIsSetValidAndInitialized(ISetToken _setToken) external view returns(bool) {\\n        return isSetValidAndInitialized(_setToken);\\n    }\\n\\n    function testOnlyManagerAndValidSet(ISetToken _setToken)\\n        external\\n        view\\n        onlyManagerAndValidSet(_setToken)\\n    {}\\n\\n    function testGetAndValidateAdapter(string memory _integrationName) external view returns(address) {\\n        return getAndValidateAdapter(_integrationName);\\n    }\\n\\n    function testGetAndValidateAdapterWithHash(bytes32 _integrationHash) external view returns(address) {\\n        return getAndValidateAdapterWithHash(_integrationHash);\\n    }\\n\\n    function testGetModuleFee(uint256 _feeIndex, uint256 _quantity) external view returns(uint256) {\\n        return getModuleFee(_feeIndex, _quantity);\\n    }\\n\\n    function testPayProtocolFeeFromSetToken(\\n        ISetToken _setToken,\\n        address _component,\\n        uint256 _feeQuantity\\n    ) external {\\n        payProtocolFeeFromSetToken(_setToken, _component, _feeQuantity);\\n    }\\n\\n    function testOnlySetManager(ISetToken _setToken)\\n        external\\n        view\\n        onlySetManager(_setToken, msg.sender)\\n    {}\\n\\n    function testOnlyModule(ISetToken _setToken)\\n        external\\n        view\\n        onlyModule(_setToken)\\n    {}\\n\\n\\n    function removeModule() external override {\\n        removed = true;\\n    }\\n\\n    function testOnlyValidAndInitializedSet(ISetToken _setToken)\\n        external view onlyValidAndInitializedSet(_setToken) {}\\n\\n    function testOnlyValidInitialization(ISetToken _setToken)\\n        external view onlyValidAndPendingSet(_setToken) {}\\n\\n    /* ============ Helper Functions ============ */\\n\\n    function initializeModuleOnSet(ISetToken _setToken) external {\\n        _setToken.initializeModule();\\n    }\\n}\"\r\n    },\r\n    \"contracts/mocks/protocol/lib/ModuleBaseV2Mock.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2022 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport { IController } from \\\"../../../interfaces/IController.sol\\\";\\nimport { ISetToken } from \\\"../../../interfaces/ISetToken.sol\\\";\\nimport { ModuleBaseV2 } from \\\"../../../protocol/lib/ModuleBaseV2.sol\\\";\\n\\ncontract ModuleBaseV2Mock is ModuleBaseV2 {\\n\\n    bool public removed;\\n\\n    constructor(IController _controller) ModuleBaseV2(_controller) {}\\n\\n    /* ============ External Functions ============ */\\n\\n    function testTransferFrom(IERC20 _token, address _from, address _to, uint256 _quantity) external {\\n        return transferFrom(_token, _from, _to, _quantity);\\n    }\\n\\n\\n    function testIsSetPendingInitialization(ISetToken _setToken) external view returns(bool) {\\n        return isSetPendingInitialization(_setToken);\\n    }\\n\\n    function testIsSetManager(ISetToken _setToken, address _toCheck) external view returns(bool) {\\n        return isSetManager(_setToken, _toCheck);\\n    }\\n\\n    function testIsSetValidAndInitialized(ISetToken _setToken) external view returns(bool) {\\n        return isSetValidAndInitialized(_setToken);\\n    }\\n\\n    function testOnlyManagerAndValidSet(ISetToken _setToken)\\n        external\\n        view\\n        onlyManagerAndValidSet(_setToken)\\n    {}\\n\\n    function testGetAndValidateAdapter(string memory _integrationName) external view returns(address) {\\n        return getAndValidateAdapter(_integrationName);\\n    }\\n\\n    function testGetAndValidateAdapterWithHash(bytes32 _integrationHash) external view returns(address) {\\n        return getAndValidateAdapterWithHash(_integrationHash);\\n    }\\n\\n    function testGetModuleFee(uint256 _feeIndex, uint256 _quantity) external view returns(uint256) {\\n        return getModuleFee(_feeIndex, _quantity);\\n    }\\n\\n    function testPayProtocolFeeFromSetToken(\\n        ISetToken _setToken,\\n        address _component,\\n        uint256 _feeQuantity\\n    ) external {\\n        payProtocolFeeFromSetToken(_setToken, _component, _feeQuantity);\\n    }\\n\\n    function testOnlySetManager(ISetToken _setToken)\\n        external\\n        view\\n        onlySetManager(_setToken, msg.sender)\\n    {}\\n\\n    function testOnlyModule(ISetToken _setToken)\\n        external\\n        view\\n        onlyModule(_setToken)\\n    {}\\n\\n\\n    function removeModule() external override {\\n        removed = true;\\n    }\\n\\n    function testOnlyValidAndInitializedSet(ISetToken _setToken)\\n        external view onlyValidAndInitializedSet(_setToken) {}\\n\\n    function testOnlyValidInitialization(ISetToken _setToken)\\n        external view onlyValidAndPendingSet(_setToken) {}\\n\\n    /* ============ Helper Functions ============ */\\n\\n    function initializeModuleOnSet(ISetToken _setToken) external {\\n        _setToken.initializeModule();\\n    }\\n}\"\r\n    },\r\n    \"contracts/mocks/protocol/lib/ResourceIdentifierMock.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { IController } from \\\"../../../interfaces/IController.sol\\\";\\nimport { IIntegrationRegistry } from \\\"../../../interfaces/IIntegrationRegistry.sol\\\";\\nimport { IPriceOracle } from \\\"../../../interfaces/IPriceOracle.sol\\\";\\nimport { ISetValuer } from \\\"../../../interfaces/ISetValuer.sol\\\";\\nimport { ResourceIdentifier } from \\\"../../../protocol/lib/ResourceIdentifier.sol\\\";\\n\\ncontract ResourceIdentifierMock {\\n\\n    /* ============ External Functions ============ */\\n\\n    function testGetIntegrationRegistry(IController _controller) external view returns (IIntegrationRegistry) {\\n        \\n        return ResourceIdentifier.getIntegrationRegistry(_controller);\\n    }\\n\\n    function testGetPriceOracle(IController _controller) external view returns (IPriceOracle) {\\n        return ResourceIdentifier.getPriceOracle(_controller);\\n    }\\n\\n    function testGetSetValuer(IController _controller) external view returns (ISetValuer) {\\n        return ResourceIdentifier.getSetValuer(_controller);\\n    }\\n}\"\r\n    },\r\n    \"contracts/mocks/protocol/module/DebtIssuanceMock.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2021 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport { ISetToken } from \\\"../../../interfaces/ISetToken.sol\\\";\\n\\ncontract DebtIssuanceMock {\\n\\n    mapping(ISetToken => bool) public isRegistered;\\n    \\n    function initialize(ISetToken _setToken) external {\\n        _setToken.initializeModule();\\n    }\\n\\n    function removeModule() external {}\\n\\n    function registerToIssuanceModule(ISetToken _setToken) external {\\n        isRegistered[_setToken] = true;\\n    }\\n\\n    function unregisterFromIssuanceModule(ISetToken _setToken) external {\\n        isRegistered[_setToken] = false;\\n    }\\n}\"\r\n    },\r\n    \"contracts/mocks/protocol/module/DebtModuleMock.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2021 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\nimport { Invoke } from \\\"../../../protocol/lib/Invoke.sol\\\";\\nimport { IController } from \\\"../../../interfaces/IController.sol\\\";\\nimport { IDebtIssuanceModule } from \\\"../../../interfaces/IDebtIssuanceModule.sol\\\";\\nimport { ISetToken } from \\\"../../../interfaces/ISetToken.sol\\\";\\nimport { ModuleBase } from \\\"../../../protocol/lib/ModuleBase.sol\\\";\\nimport { Position } from \\\"../../../protocol/lib/Position.sol\\\";\\n\\n// Mock for modules that handle debt positions. Used for testing DebtIssuanceModule\\ncontract DebtModuleMock is ModuleBase {\\n    using Position for uint256;\\n    using SafeCast for int256;\\n    using SafeCast for uint256;\\n    using Position for ISetToken;\\n    using Invoke for ISetToken;\\n\\n    address public module;\\n    bool public moduleIssueHookCalled;\\n    bool public moduleRedeemHookCalled;\\n    mapping(address=>int256) public equityIssuanceAdjustment;\\n    mapping(address=>int256) public debtIssuanceAdjustment;\\n\\n    constructor(IController _controller) ModuleBase(_controller) {}\\n\\n    function addDebt(ISetToken _setToken, address _token, uint256 _amount) external {\\n        _setToken.editExternalPosition(_token, address(this), _amount.toInt256() * -1, \\\"\\\");\\n    }\\n\\n    function addEquityIssuanceAdjustment(address _token, int256 _amount) external {\\n        equityIssuanceAdjustment[_token] = _amount;\\n    }\\n\\n    function addDebtIssuanceAdjustment(address _token, int256 _amount) external {\\n        debtIssuanceAdjustment[_token] = _amount;\\n    }\\n\\n    function moduleIssueHook(ISetToken /*_setToken*/, uint256 /*_setTokenQuantity*/) external { moduleIssueHookCalled = true; }\\n    function moduleRedeemHook(ISetToken /*_setToken*/, uint256 /*_setTokenQuantity*/) external { moduleRedeemHookCalled = true; }\\n\\n    function componentIssueHook(\\n        ISetToken _setToken,\\n        uint256 _setTokenQuantity,\\n        address _component,\\n        bool /* _isEquity */\\n    )\\n        external\\n    {\\n        uint256 unitAmount = (_setToken.getExternalPositionRealUnit(_component, address(this)) * -1).toUint256();\\n        uint256 notionalAmount = _setTokenQuantity.getDefaultTotalNotional(unitAmount);\\n        IERC20(_component).transfer(address(_setToken), notionalAmount);\\n    }\\n\\n    function componentRedeemHook(\\n        ISetToken _setToken,\\n        uint256 _setTokenQuantity,\\n        address _component,\\n        bool /* _isEquity */\\n    )\\n        external\\n    {\\n        uint256 unitAmount = (_setToken.getExternalPositionRealUnit(_component, address(this)) * -1).toUint256();\\n        uint256 notionalAmount = _setTokenQuantity.getDefaultTotalNotional(unitAmount);\\n        _setToken.invokeTransfer(_component, address(this), notionalAmount);\\n    }\\n\\n\\n    function getIssuanceAdjustments(\\n        ISetToken _setToken,\\n        uint256 /* _setTokenQuantity */\\n    )\\n        external\\n        view\\n        returns (int256[] memory, int256[] memory)\\n    {\\n        address[] memory components = _setToken.getComponents();\\n        uint256 componentsLength = components.length;\\n        int256[] memory equityAdjustments = new int256[](componentsLength);\\n        int256[] memory debtAdjustments = new int256[](componentsLength);\\n        for(uint256 i; i < componentsLength; ) {\\n            equityAdjustments[i] = equityIssuanceAdjustment[components[i]];\\n            debtAdjustments[i] = debtIssuanceAdjustment[components[i]];\\n            unchecked { ++i; }\\n        }\\n\\n        return (equityAdjustments, debtAdjustments);\\n    }\\n\\n    function getRedemptionAdjustments(\\n        ISetToken _setToken,\\n        uint256 /* _setTokenQuantity */\\n    )\\n        external\\n        view\\n        returns (int256[] memory, int256[] memory)\\n    {\\n        address[] memory components = _setToken.getComponents();\\n        uint256 componentsLength = components.length;\\n        int256[] memory equityAdjustments = new int256[](componentsLength);\\n        int256[] memory debtAdjustments = new int256[](componentsLength);\\n        for(uint256 i; i < componentsLength; ) {\\n            equityAdjustments[i] = equityIssuanceAdjustment[components[i]];\\n            debtAdjustments[i] = debtIssuanceAdjustment[components[i]];\\n            unchecked { ++i; }\\n        }\\n\\n        return (equityAdjustments, debtAdjustments);\\n    }\\n\\n    function initialize(ISetToken _setToken, address _module) external {\\n        _setToken.initializeModule();\\n        module = _module;\\n        IDebtIssuanceModule(module).registerToIssuanceModule(_setToken);\\n    }\\n\\n    function removeModule() external override {\\n        IDebtIssuanceModule(module).unregisterFromIssuanceModule(ISetToken(msg.sender));\\n    }\\n}\"\r\n    },\r\n    \"contracts/mocks/protocol/module/ManagerIssuanceHookMock.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { ISetToken } from \\\"../../../interfaces/ISetToken.sol\\\";\\n\\ncontract ManagerIssuanceHookMock {\\n    ISetToken public retrievedSetToken;\\n    uint256 public retrievedIssueQuantity;\\n    address public retrievedSender;\\n    address public retrievedTo;\\n\\n    function invokePreIssueHook(ISetToken _setToken, uint256 _issueQuantity, address _sender, address _to) external {\\n        retrievedSetToken = _setToken;\\n        retrievedIssueQuantity = _issueQuantity;\\n        retrievedSender = _sender;    \\n        retrievedTo = _to;        \\n    }\\n\\n    function invokePreRedeemHook(address _sender) external {\\n        retrievedSender = _sender;\\n    }\\n}\"\r\n    },\r\n    \"contracts/mocks/protocol/module/ModuleIssuanceHookMock.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2021 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\nimport { ISetToken } from \\\"../../../interfaces/ISetToken.sol\\\";\\nimport { IModuleIssuanceHook } from \\\"../../../interfaces/IModuleIssuanceHook.sol\\\";\\nimport { Invoke } from \\\"../../../protocol/lib/Invoke.sol\\\";\\nimport { Position } from \\\"../../../protocol/lib/Position.sol\\\";\\nimport { PreciseUnitMath } from \\\"../../../lib/PreciseUnitMath.sol\\\";\\n\\ncontract ModuleIssuanceHookMock is IModuleIssuanceHook {\\n    using Invoke for ISetToken;\\n    using Position for ISetToken;\\n    using SafeCast for int256;\\n    using PreciseUnitMath for uint256;\\n\\n    function initialize(ISetToken _setToken) external {\\n        _setToken.initializeModule();\\n    }\\n\\n    function addExternalPosition(ISetToken _setToken, address _component, int256 _quantity) external {\\n        _setToken.editExternalPosition(_component, address(this), _quantity, \\\"\\\");\\n    }\\n\\n    function moduleIssueHook(ISetToken _setToken, uint256 _setTokenQuantity) external override {}\\n    function moduleRedeemHook(ISetToken _setToken, uint256 _setTokenQuantity) external override {}\\n\\n    function componentIssueHook(\\n        ISetToken _setToken,\\n        uint256 _setTokenQuantity,\\n        IERC20 _component,\\n        bool /* _isEquity */\\n    ) external override {\\n        int256 externalPositionUnit = _setToken.getExternalPositionRealUnit(address(_component), address(this));\\n        uint256 totalNotionalExternalModule = _setTokenQuantity.preciseMul(externalPositionUnit.toUint256());\\n\\n        // Invoke the SetToken to send the token of total notional to this address\\n        _setToken.invokeTransfer(address(_component), address(this), totalNotionalExternalModule);\\n    }\\n\\n    function componentRedeemHook(\\n        ISetToken _setToken,\\n        uint256 _setTokenQuantity,\\n        IERC20 _component,\\n        bool /* _isEquity */\\n    ) external override {\\n        // Send the component to the settoken\\n        int256 externalPositionUnit = _setToken.getExternalPositionRealUnit(address(_component), address(this));\\n        uint256 totalNotionalExternalModule = _setTokenQuantity.preciseMul(externalPositionUnit.toUint256());\\n        _component.transfer(address(_setToken), totalNotionalExternalModule);\\n    }\\n}\"\r\n    },\r\n    \"contracts/mocks/StandardTokenMock.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\n// mock class using BasicToken\\ncontract StandardTokenMock is ERC20 {\\n    uint8 mockDecimals;\\n\\n    constructor(\\n        address _initialAccount,\\n        uint256 _initialBalance,\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    )\\n        ERC20(_name, _symbol)\\n    {   \\n        mockDecimals = _decimals;\\n        _mint(_initialAccount, _initialBalance * 10 ** _decimals);\\n    }\\n\\n   function mint(address to, uint amount) external {\\n       _mint(to, amount);\\n   }\\n\\n    function decimals() override public view returns (uint8) {\\n    return mockDecimals;\\n}\\n}\\n\"\r\n    },\r\n    \"contracts/mocks/StandardTokenWithFeeMock.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\n// mock class using BasicToken\\ncontract StandardTokenWithFeeMock {\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 value\\n    );\\n\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n\\n    uint256 constant public decimals = 18;\\n    string public name;\\n    string public symbol;\\n    uint256 public fee;\\n\\n    mapping (address => uint256) public _balances;\\n\\n    mapping (address => mapping (address => uint256)) public _allowed;\\n\\n    uint256 public _totalSupply;\\n\\n    constructor(\\n        address _initialAccount,\\n        uint256 _initialBalance,\\n        string memory _name,\\n        string memory _symbol,\\n        uint256 _fee\\n    )\\n    {\\n        _balances[_initialAccount] = _initialBalance;\\n        _totalSupply = _initialBalance;\\n        name = _name;\\n        symbol = _symbol;\\n        fee = _fee;\\n    }\\n\\n    /**\\n    * @dev Transfer tokens from one address to another with a fee component\\n    * @param _from address The address which you want to send tokens from\\n    * @param _to address The address which you want to transfer to\\n    * @param _value uint256 the amount of tokens to be transferred\\n    */\\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool) {\\n        require(_to != address(0), \\\"to nonnull\\\");\\n        require(_value <= _balances[_from], \\\"less than from\\\");\\n        require(_value <= _allowed[_from][msg.sender], \\\"value less than allowed\\\");\\n\\n        uint256 netValueMinusFee = _value - fee;\\n\\n        _balances[_from] = _balances[_from] - _value;\\n        _balances[_to] = _balances[_to] + netValueMinusFee;\\n        _allowed[_from][msg.sender] = _allowed[_from][msg.sender] - _value;\\n        emit Transfer(_from, _to, _value);\\n        return true;\\n    }\\n\\n    /**\\n    * @dev transfer token for a specified address with a fee component applied to the send\\n    * @param _to The address to transfer to.\\n    * @param _value The amount to be transferred.\\n    */\\n    function transfer(address _to, uint256 _value) external returns (bool) {\\n        require(_to != address(0));\\n        require(_value <= _balances[msg.sender]);\\n\\n        uint256 netValuePlusFee = _value + fee;\\n\\n        _balances[msg.sender] = _balances[msg.sender] - netValuePlusFee;\\n        _balances[_to] = _balances[_to] + _value;\\n        emit Transfer(msg.sender, _to, _value);\\n        return true;\\n    }\\n\\n    function setFee(uint256 _fee) external returns (bool) {\\n        fee = _fee;\\n        return true;\\n    }\\n\\n    function totalSupply() external view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function balanceOf(address owner) external view returns (uint256) {\\n        return _balances[owner];\\n    }\\n\\n    function allowance(\\n        address owner,\\n        address spender\\n    )\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return _allowed[owner][spender];\\n    }\\n\\n    function approve(address spender, uint256 value) external returns (bool) {\\n        require(spender != address(0));\\n\\n        _allowed[msg.sender][spender] = value;\\n        emit Approval(msg.sender, spender, value);\\n        return true;\\n    }\\n\\n    function increaseAllowance(\\n        address spender,\\n        uint256 addedValue\\n    )\\n        external\\n        returns (bool)\\n    {\\n        require(spender != address(0));\\n\\n        _allowed[msg.sender][spender] = (\\n          _allowed[msg.sender][spender] + addedValue);\\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\\n        return true;\\n    }\\n\\n    function decreaseAllowance(\\n        address spender,\\n        uint256 subtractedValue\\n    )\\n        external\\n        returns (bool)\\n    {\\n        require(spender != address(0));\\n\\n        _allowed[msg.sender][spender] = (\\n          _allowed[msg.sender][spender] - subtractedValue);\\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\\n        return true;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/mocks/StandardTokenWithRoundingErrorMock.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport \\\"./StandardTokenMock.sol\\\";\\n\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\ncontract StandardTokenWithRoundingErrorMock {\\n    using SafeCast for int256;\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 value\\n    );\\n\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n\\n    uint256 constant public decimals = 18;\\n    string public name;\\n    string public symbol;\\n    int256 public err;\\n\\n    mapping (address => uint256) public _balances;\\n\\n    mapping (address => mapping (address => uint256)) public _allowed;\\n\\n    uint256 public _totalSupply;\\n\\n\\n    constructor(\\n        address _initialAccount,\\n        uint256 _initialBalance,\\n        int256 _err,\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 /* _decimals */\\n    )\\n    {\\n        _balances[_initialAccount] = _initialBalance;\\n        _totalSupply = _initialBalance;\\n        name = _name;\\n        symbol = _symbol;\\n        err = _err;\\n    }\\n\\n    /**\\n    * @dev Returns balance of owner with the rounding error applied\\n    * @param owner address whose balance is to be returned\\n    */\\n    function balanceOf(address owner) external view returns (uint256) {\\n        uint256 balance = _balances[owner];\\n        if (err > -1) {\\n            return balance + err.toUint256();\\n        } else {\\n            uint256 absoluteError = (err * -1).toUint256();\\n            if (balance >= absoluteError) {\\n                return balance - absoluteError;\\n            } else {\\n                return 0;\\n            }\\n        }\\n    }\\n\\n    /**\\n    * @dev Transfer tokens from one address to another\\n    * @param _from address The address which you want to send tokens from\\n    * @param _to address The address which you want to transfer to\\n    * @param _value uint256 the amount of tokens to be transferred\\n    */\\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool) {\\n        require(_to != address(0), \\\"to null\\\");\\n        require(_value <= _balances[_from], \\\"value greater than from balance\\\");\\n        require(_value <= _allowed[_from][msg.sender], \\\"value greater than allowed\\\");\\n\\n        _balances[_from] = _balances[_from] - _value;\\n        _balances[_to] = _balances[_to] + _value;\\n        _allowed[_from][msg.sender] = _allowed[_from][msg.sender] - _value;\\n        emit Transfer(_from, _to, _value);\\n        return true;\\n    }\\n\\n    /**\\n    * @dev Transfer tokens from one address to another\\n    * @param _to The address to transfer to.\\n    * @param _value The amount to be transferred.\\n    */\\n    function transfer(address _to, uint256 _value) external returns (bool) {\\n        require(_to != address(0), \\\"to null\\\");\\n        require(_value <= _balances[msg.sender], \\\"value greater than sender balance\\\");\\n\\n        _balances[msg.sender] = _balances[msg.sender] - _value;\\n        _balances[_to] = _balances[_to] + _value;\\n        emit Transfer(msg.sender, _to, _value);\\n        return true;\\n    }\\n\\n    function setError(int256 _err) external returns (bool) {\\n        err = _err;\\n        return true;\\n    }\\n\\n    function totalSupply() external view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function allowance(\\n        address owner,\\n        address spender\\n    )\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return _allowed[owner][spender];\\n    }\\n\\n    function approve(address spender, uint256 value) external returns (bool) {\\n        require(spender != address(0));\\n\\n        _allowed[msg.sender][spender] = value;\\n        emit Approval(msg.sender, spender, value);\\n        return true;\\n    }\\n\\n    function increaseAllowance(\\n        address spender,\\n        uint256 addedValue\\n    )\\n        external\\n        returns (bool)\\n    {\\n        require(spender != address(0));\\n\\n        _allowed[msg.sender][spender] = (\\n          _allowed[msg.sender][spender] + addedValue);\\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\\n        return true;\\n    }\\n\\n    function decreaseAllowance(\\n        address spender,\\n        uint256 subtractedValue\\n    )\\n        external\\n        returns (bool)\\n    {\\n        require(spender != address(0));\\n\\n        _allowed[msg.sender][spender] = (\\n          _allowed[msg.sender][spender] - subtractedValue);\\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\\n        return true;\\n    }\\n}\"\r\n    },\r\n    \"contracts/mocks/StringArrayUtilsMock.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2021 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { StringArrayUtils } from \\\"../lib/StringArrayUtils.sol\\\";\\n\\ncontract StringArrayUtilsMock {\\n    using StringArrayUtils for string[];\\n\\n    string[] public storageArray;\\n\\n    function testIndexOf(string[] memory A, string memory a) external pure returns (uint256, bool) {\\n        return A.indexOf(a);\\n    }\\n\\n    function testRemoveStorage(string memory a) external {\\n        storageArray.removeStorage(a);\\n    }\\n\\n    function setStorageArray(string[] memory A) external {\\n        storageArray = A;\\n    }\\n\\n    function getStorageArray() external view returns(string[] memory) {\\n        return storageArray;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/product/SupplyCapIssuanceHook.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2021 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { Ownable2Step } from \\\"@openzeppelin/contracts/access/Ownable2Step.sol\\\";\\n\\nimport { IManagerIssuanceHook } from \\\"../interfaces/IManagerIssuanceHook.sol\\\";\\nimport { ISetToken } from \\\"../interfaces/ISetToken.sol\\\";\\n\\n/**\\n * @title SupplyCapIssuanceHook\\n * @author Set Protocol\\n *\\n * Issuance hook that checks new issuances won't push SetToken totalSupply over supply cap.\\n *\\n * CHANGELOG:\\n * - 4/27/23: Removed OZ SafeMath & upgrade Solidity to v0.8.20\\n * - 9/13/23: Switch from Ownable to Ownable2Step\\n * - 9/26/23: Added custom errors\\n */\\ncontract SupplyCapIssuanceHook is Ownable2Step, IManagerIssuanceHook {\\n\\n    /* ============ Custom Errors ============ */\\n\\n    /// @notice Emitted when the quantity to be issued exceeds the supply cap.\\n    error SupplyCapIssuanceHook__SupplyCapExceeded(address emitter, uint256 issueQuantity, uint256 cap);\\n\\n    /* ============ Events ============ */\\n\\n    event SupplyCapUpdated(uint256 _newCap);\\n\\n    /* ============ State Variables ============ */\\n\\n    // Cap on totalSupply of Sets\\n    uint256 public supplyCap;\\n\\n    /* ============ Constructor ============ */\\n\\n    /**\\n     * Constructor, overwrites owner and original supply cap.\\n     *\\n     * @param _initialOwner     Owner address, overwrites Ownable logic which sets to deployer as default\\n     * @param _supplyCap        Supply cap for Set (in wei of Set)\\n     */\\n    constructor(\\n        address _initialOwner,\\n        uint256 _supplyCap\\n    )\\n    {\\n        supplyCap = _supplyCap;\\n\\n        // Overwrite _owner param of Ownable contract\\n        transferOwnership(_initialOwner);\\n    }\\n\\n    /**\\n     * Adheres to IManagerIssuanceHook interface, and checks to make sure the current issue call won't push total supply over cap.\\n     */\\n    function invokePreIssueHook(\\n        ISetToken _setToken,\\n        uint256 _issueQuantity,\\n        address /*_sender*/,\\n        address /*_to*/\\n    )\\n        external\\n        view\\n        virtual\\n    {\\n        uint256 totalSupply = _setToken.totalSupply();\\n\\n        if (totalSupply + _issueQuantity > supplyCap) revert SupplyCapIssuanceHook__SupplyCapExceeded(address(this), _issueQuantity, supplyCap);\\n    }\\n\\n    /**\\n     * Adheres to IManagerIssuanceHook interface\\n     */\\n    function invokePreRedeemHook(\\n        address /*_sender*/\\n    )\\n        external\\n        view\\n        virtual\\n     { this; }\\n\\n    /**\\n     * Adheres to IManagerIssuanceHook interface\\n     */\\n    function invokePreRedeemHook(\\n        ISetToken /*_setToken*/,\\n        uint256 /*_redeemQuantity*/,\\n        address /*_sender*/,\\n        address /*_to*/\\n    )\\n        external\\n        view\\n        virtual\\n    { this; }\\n\\n    /**\\n     * ONLY OWNER: Updates supply cap\\n     */\\n    function updateSupplyCap(uint256 _newCap) external virtual onlyOwner {\\n        supplyCap = _newCap;\\n        emit SupplyCapUpdated(_newCap);\\n    }\\n}\"\r\n    },\r\n    \"contracts/product/SupplyCapPermissionedIssuanceHook.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2023 Amun Holdings Limited and affiliated entities.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { AddressArrayUtils } from \\\"../lib/AddressArrayUtils.sol\\\";\\nimport { ISanctionsList } from \\\"../interfaces/external/ISanctionsList.sol\\\";\\nimport { ISetToken } from \\\"../interfaces/ISetToken.sol\\\";\\nimport { SupplyCapIssuanceHook } from \\\"./SupplyCapIssuanceHook.sol\\\";\\n\\n/**\\n * @title SupplyCapPermissionedIssuanceHook\\n * @author Amun\\n *\\n * Issuance hook that checks\\n * 1) New issuances won't push SetToken totalSupply over supply cap\\n * 2) An address is not sanctioned\\n * 3) If whitelist enabled, address is in whitelist\\n * 4) If blacklist enabled, address is not in blacklist\\n */\\ncontract SupplyCapPermissionedIssuanceHook is SupplyCapIssuanceHook {\\n    using AddressArrayUtils for address[];\\n\\n    /* ============ Custom Errors ============ */\\n\\n    /// @notice Emitted when the provided caller address is blacklisted.\\n    error SupplyCapPermissionedIssuanceHook__AddressNotPermitted(address emitter, address caller);\\n    /// @notice Emitted when the provided caller address has been sanctioned.\\n    error SupplyCapPermissionedIssuanceHook__AddressSanctioned(address emitter, address caller);\\n\\n    /* ============ Events ============ */\\n\\n    event WhitelistUpdated(address indexed _caller, bool _status);\\n    event BlacklistUpdated(address indexed _caller, bool _status);\\n    event WhitelistStatusUpdated(bool indexed _status);\\n    event BlacklistStatusUpdated(bool indexed _status);\\n\\n    /* ============ Constants ============ */\\n    \\n    address public immutable SANCTIONS_CONTRACT;\\n\\n    /* ============ State Variables ============ */\\n\\n    // Mapping of addresses allowed to call function\\n    mapping(address => bool) public whitelist;\\n\\n    // Mapping of addresses not allowed to call function\\n    mapping(address => bool) public blacklist;\\n\\n    // Boolean indicating if whitelist is enabled\\n    bool public whitelistStatus;\\n\\n    // Boolean indicating if blacklist is enabled\\n    bool public blacklistStatus;\\n\\n    /* ============ Constructor ============ */\\n\\n    /**\\n     * Constructor, overwrites owner and original supply cap.\\n     *\\n     * @param _initialOwner      Owner address, overwrites Ownable logic which sets to deployer as default\\n     * @param _supplyCap         Supply cap for Set (in wei of Set)\\n     */\\n    constructor(\\n        address _initialOwner,\\n        uint256 _supplyCap,\\n        address _sanctionsOracle\\n    )\\n        SupplyCapIssuanceHook(\\n            _initialOwner, _supplyCap\\n        )\\n    {\\n        SANCTIONS_CONTRACT = _sanctionsOracle;\\n    }\\n\\n    /* ============ External Functions ============ */\\n\\n    /**\\n     * Adheres to IManagerIssuanceHook interface, and checks to make sure the current issue call won't push total supply over cap.\\n     */\\n    function invokePreIssueHook(\\n        ISetToken _setToken,\\n        uint256 _issueQuantity,\\n        address _sender,\\n        address /*_to*/\\n    )\\n        external\\n        view\\n        override\\n    {\\n        _validateAllowedCaller(_sender);\\n\\n        uint256 totalSupply = _setToken.totalSupply();\\n        if (totalSupply + _issueQuantity > supplyCap) revert SupplyCapIssuanceHook__SupplyCapExceeded(address(this), _issueQuantity, supplyCap);\\n    }\\n\\n    /**\\n     * Adheres to IManagerIssuanceHook interface\\n     */\\n    function invokePreRedeemHook(\\n        address _sender\\n    )\\n        external\\n        view\\n        override\\n    {\\n        _validateAllowedCaller(_sender);\\n    }\\n\\n    /**\\n     * ONLY OWNER: Updates supply cap\\n     */\\n    function updateSupplyCap(uint256 _newCap) external virtual override onlyOwner {\\n        supplyCap = _newCap;\\n        emit SupplyCapUpdated(_newCap);\\n    }\\n\\n    /**\\n     * ONLY OWNER: Toggle ability for passed addresses to call only allowed caller functions\\n     *\\n     * @param _callers           Array of caller addresses to toggle status\\n     * @param _statuses          Array of statuses for each caller\\n     */\\n    function updateWhitelist(address[] calldata _callers, bool[] calldata _statuses) external onlyOwner {\\n        _callers.validatePairsWithArray(_statuses);\\n        uint256 callersLen = _callers.length;\\n        for (uint256 i; i < callersLen;) {\\n            address caller = _callers[i];\\n            bool status = _statuses[i];\\n            whitelist[caller] = status;\\n            emit WhitelistUpdated(caller, status);\\n            unchecked { ++i; }\\n        }\\n    }\\n\\n    /**\\n     * ONLY OWNER: Toggle ability for passed addresses to not allow them to call functions\\n     *\\n     * @param _callers           Array of caller addresses to toggle status\\n     * @param _statuses          Array of statuses for each caller\\n     */\\n    function updateBlacklist(address[] calldata _callers, bool[] calldata _statuses) external onlyOwner {\\n        _callers.validatePairsWithArray(_statuses);\\n        uint256 callersLen = _callers.length;\\n        for (uint256 i; i < callersLen;) {\\n            address caller = _callers[i];\\n            bool status = _statuses[i];\\n            blacklist[caller] = status;\\n            emit BlacklistUpdated(caller, status);\\n            unchecked { ++i; }\\n        }\\n    }\\n\\n    /**\\n     * ONLY OWNER: Toggle whether anyone can call function, bypassing the whitelist\\n     *\\n     * @param _status           Boolean indicating whether whitelist is enabled or not.\\n     */\\n    function updateWhitelistStatus(bool _status) external onlyOwner {\\n        whitelistStatus = _status;\\n        emit WhitelistStatusUpdated(_status);\\n    }\\n\\n    /**\\n     * ONLY OWNER: Toggle whether blacklist is enabled\\n     *\\n     * @param _status           Boolean indicating whether blacklist is enabled or not.\\n     */\\n    function updateBlacklistStatus(bool _status) external onlyOwner {\\n        blacklistStatus = _status;\\n        emit BlacklistStatusUpdated(_status);\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    /**\\n     * Validate if passed address is allowed to call function.\\n     * If caller is included in the sanctions list, the transaction will revert.\\n     * If both whitelistStatus and blacklistStatus are set to false, any address can call function.\\n     */\\n    function _validateAllowedCaller(address _caller) internal view {\\n        ISanctionsList sanctionsList = ISanctionsList(SANCTIONS_CONTRACT);\\n        if (sanctionsList.isSanctioned(_caller)) revert SupplyCapPermissionedIssuanceHook__AddressSanctioned(address(this), _caller);\\n        if ((blacklistStatus && blacklist[_caller]) || (whitelistStatus && !whitelist[_caller])) {\\n            revert SupplyCapPermissionedIssuanceHook__AddressNotPermitted(address(this), _caller);\\n        }\\n    }\\n}\"\r\n    },\r\n    \"contracts/protocol-viewers/ERC20Viewer.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2021 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { ERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\n/**\\n * @title ERC20Viewer\\n * @author Set Protocol\\n *\\n * Interfaces for fetching multiple ERC20 state in a single read\\n *\\n * CHANGELOG\\n * - 9/18/23: Upgrade to Solidity 0.8.21\\n */\\ncontract ERC20Viewer {\\n\\n    /*\\n     * Fetches token balances for each tokenAddress, tokenOwner pair\\n     *\\n     * @param  _tokenAddresses    Addresses of ERC20 contracts\\n     * @param  _ownerAddresses    Addresses of users sequential to tokenAddress\\n     * @return  uint256[]         Array of balances for each ERC20 contract passed in\\n     */\\n    function batchFetchBalancesOf(\\n        address[] calldata _tokenAddresses,\\n        address[] calldata _ownerAddresses\\n    )\\n        public\\n        view\\n        returns (uint256[] memory)\\n    {\\n        // Cache length of addresses to fetch balances for\\n        uint256 addressesCount = _tokenAddresses.length;\\n\\n        // Instantiate output array in memory\\n        uint256[] memory balances = new uint256[](addressesCount);\\n\\n        // Cycle through contract addresses array and fetching the balance of each for the owner\\n        for (uint256 i; i < addressesCount; ) {\\n            balances[i] = ERC20(address(_tokenAddresses[i])).balanceOf(_ownerAddresses[i]);\\n            unchecked { ++i; }\\n        }\\n\\n        return balances;\\n    }\\n\\n    /*\\n     * Fetches token allowances for each tokenAddress, tokenOwner tuple\\n     *\\n     * @param  _tokenAddresses      Addresses of ERC20 contracts\\n     * @param  _ownerAddresses      Addresses of owner sequential to tokenAddress\\n     * @param  _spenderAddresses    Addresses of spenders sequential to tokenAddress\\n     * @return  uint256[]           Array of allowances for each ERC20 contract passed in\\n     */\\n    function batchFetchAllowances(\\n        address[] calldata _tokenAddresses,\\n        address[] calldata _ownerAddresses,\\n        address[] calldata _spenderAddresses\\n    )\\n        public\\n        view\\n        returns (uint256[] memory)\\n    {\\n        // Cache length of addresses to fetch allowances for\\n        uint256 addressesCount = _tokenAddresses.length;\\n\\n        // Instantiate output array in memory\\n        uint256[] memory allowances = new uint256[](addressesCount);\\n\\n        // Cycle through contract addresses array and fetching the balance of each for the owner\\n        for (uint256 i; i < addressesCount; ) {\\n            allowances[i] = ERC20(address(_tokenAddresses[i])).allowance(_ownerAddresses[i], _spenderAddresses[i]);\\n            unchecked { ++i; }\\n        }\\n\\n        return allowances;\\n    }\\n}\"\r\n    },\r\n    \"contracts/protocol-viewers/ProtocolViewer.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { ERC20Viewer } from \\\"./ERC20Viewer.sol\\\";\\nimport { SetTokenViewer } from \\\"./SetTokenViewer.sol\\\";\\nimport { StreamingFeeModuleViewer } from \\\"./StreamingFeeModuleViewer.sol\\\";\\n\\n/**\\n * @title ProtocolViewer\\n * @author Set Protocol\\n *\\n * ProtocolViewer enables batch queries of various protocol state.\\n */\\ncontract ProtocolViewer is\\n    ERC20Viewer,\\n    SetTokenViewer,\\n    StreamingFeeModuleViewer\\n{\\n    constructor() { this; }\\n}\\n\"\r\n    },\r\n    \"contracts/protocol-viewers/SetTokenViewer.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { ERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport { ISetToken } from \\\"../interfaces/ISetToken.sol\\\";\\n\\n/**\\n * @title SetTokenViewer\\n * @author Set Protocol\\n *\\n * SetTokenViewer enables batch queries of SetToken state.\\n *\\n * CHANGELOG\\n * - Added getSetDetails functions\\n * - 9/18/23: Upgrade to Solidity 0.8.21\\n */\\ncontract SetTokenViewer {\\n\\n    struct SetDetails {\\n        string name;\\n        string symbol;\\n        address manager;\\n        address[] modules;\\n        ISetToken.ModuleState[] moduleStatuses;\\n        ISetToken.Position[] positions;\\n        uint256 totalSupply;\\n    }\\n\\n    function batchFetchManagers(\\n        ISetToken[] memory _setTokens\\n    )\\n        external\\n        view\\n        returns (address[] memory) \\n    {\\n        uint256 setTokensLength = _setTokens.length;\\n        address[] memory managers = new address[](setTokensLength);\\n        for (uint256 i; i < setTokensLength; ) {\\n            managers[i] = _setTokens[i].manager();\\n            unchecked { ++i; }\\n        }\\n        return managers;\\n    }\\n\\n    function batchFetchModuleStates(\\n        ISetToken[] memory _setTokens,\\n        address[] calldata _modules\\n    )\\n        public\\n        view\\n        returns (ISetToken.ModuleState[][] memory)\\n    {\\n        uint256 setTokensLength = _setTokens.length;\\n        uint256 modulesLength = _modules.length;\\n        ISetToken.ModuleState[][] memory states = new ISetToken.ModuleState[][](setTokensLength);\\n        for (uint256 i; i < setTokensLength; ) {\\n            ISetToken.ModuleState[] memory moduleStates = new ISetToken.ModuleState[](modulesLength);\\n            for (uint256 j; j < modulesLength;) {\\n                moduleStates[j] = _setTokens[i].moduleStates(_modules[j]);\\n                unchecked { ++j; }\\n            }\\n            states[i] = moduleStates;\\n            unchecked { ++i; }\\n        }\\n        return states;\\n    }\\n\\n    function batchFetchDetails(\\n        ISetToken[] memory _setTokens,\\n        address[] calldata _moduleList\\n    )\\n        public\\n        view\\n        returns (SetDetails[] memory)\\n    {\\n        ISetToken.ModuleState[][] memory moduleStates = batchFetchModuleStates(_setTokens, _moduleList);\\n        uint256 setTokensLength = _setTokens.length;\\n        SetDetails[] memory details = new SetDetails[](setTokensLength);\\n        for (uint256 i; i < setTokensLength; ) {\\n            ISetToken setToken = _setTokens[i];\\n\\n            details[i] = SetDetails({\\n                name: ERC20(address(setToken)).name(),\\n                symbol: ERC20(address(setToken)).symbol(),\\n                manager: setToken.manager(),\\n                modules: setToken.getModules(),\\n                moduleStatuses: moduleStates[i],\\n                positions: setToken.getPositions(),\\n                totalSupply: setToken.totalSupply()\\n            });\\n            unchecked { ++i; }\\n        }\\n        return details;\\n    }\\n\\n    function getSetDetails(\\n        ISetToken _setToken,\\n        address[] calldata _moduleList\\n    )\\n        external\\n        view\\n        returns(SetDetails memory)\\n    {\\n        ISetToken[] memory setAddressForBatchFetch = new ISetToken[](1);\\n        setAddressForBatchFetch[0] = _setToken;\\n\\n        return batchFetchDetails(setAddressForBatchFetch, _moduleList)[0];\\n    }\\n}\"\r\n    },\r\n    \"contracts/protocol-viewers/StreamingFeeModuleViewer.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { ISetToken } from \\\"../interfaces/ISetToken.sol\\\";\\nimport { IStreamingFeeModule } from \\\"../interfaces/IStreamingFeeModule.sol\\\";\\n\\n/**\\n * @title StreamingFeeModuleViewer\\n * @author Set Protocol\\n *\\n * StreamingFeeModuleViewer enables batch queries of StreamingFeeModule state.\\n *\\n * CHANGELOG\\n * - 9/18/23: Upgrade to Solidity 0.8.21\\n */\\ncontract StreamingFeeModuleViewer {\\n\\n    struct StreamingFeeInfo {\\n        uint256 streamingFeePercentage;\\n        uint256 unaccruedFees;\\n        address feeRecipient;\\n    }\\n\\n    function batchFetchStreamingFeeInfo(\\n        IStreamingFeeModule _streamingFeeModule,\\n        ISetToken[] memory _setTokens\\n    )\\n        external\\n        view\\n        returns (StreamingFeeInfo[] memory)\\n    {\\n        StreamingFeeInfo[] memory feeInfo = new StreamingFeeInfo[](_setTokens.length);\\n        uint256 setTokensLength = _setTokens.length;\\n        for (uint256 i; i < setTokensLength; ) {\\n            IStreamingFeeModule.FeeState memory feeState = _streamingFeeModule.feeStates(_setTokens[i]);\\n            uint256 unaccruedFees = _streamingFeeModule.getFee(_setTokens[i]);\\n\\n            feeInfo[i] = StreamingFeeInfo({\\n                streamingFeePercentage: feeState.streamingFeePercentage,\\n                unaccruedFees: unaccruedFees,\\n                feeRecipient: feeState.feeRecipient\\n            });\\n            unchecked { ++i; }\\n        }\\n\\n        return feeInfo;\\n    }\\n}\"\r\n    },\r\n    \"contracts/protocol/Controller.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { IController } from \\\"../interfaces/IController.sol\\\";\\nimport { Ownable2Step } from \\\"@openzeppelin/contracts/access/Ownable2Step.sol\\\";\\nimport { AddressArrayUtils } from \\\"../lib/AddressArrayUtils.sol\\\";\\n\\n/**\\n * @title Controller\\n * @author Set Protocol\\n *\\n * Contract that houses state for approvals and system contracts such as added Sets,\\n * modules, factories, resources (like price oracles), and protocol fee configurations.\\n *\\n * CHANGELOG\\n * - 9/13/23: Switch from Ownable to Ownable2Step\\n * - 9/18/23: Upgrade to Solidity 0.8.21\\n * - 9/26/23: Added custom errors\\n */\\ncontract Controller is IController, Ownable2Step {\\n    using AddressArrayUtils for address[];\\n\\n    /* ============ Events ============ */\\n\\n    event FactoryAdded(address indexed _factory);\\n    event FactoryRemoved(address indexed _factory);\\n    event FeeEdited(address indexed _module, uint256 indexed _feeType, uint256 _feePercentage);\\n    event FeeRecipientChanged(address _newFeeRecipient);\\n    event ModuleAdded(address indexed _module);\\n    event ModuleRemoved(address indexed _module);\\n    event ResourceAdded(address indexed _resource, uint256 _id);\\n    event ResourceRemoved(address indexed _resource, uint256 _id);\\n    event SetAdded(address indexed _setToken, address indexed _factory);\\n    event SetRemoved(address indexed _setToken);\\n\\n    /* ============ Modifiers ============ */\\n\\n    /**\\n     * Throws if function is called by any address other than a valid factory.\\n     */\\n    modifier onlyFactory() {\\n        if (!isFactory[msg.sender]) revert Controller__CallerNotFactory(msg.sender);\\n        _;\\n    }\\n\\n    modifier onlyInitialized() {\\n        if (!isInitialized) revert Controller__Uninitialized();\\n        _;\\n    }\\n\\n    /* ============ State Variables ============ */\\n\\n    // List of enabled Sets\\n    address[] public sets;\\n    // List of enabled factories of SetTokens\\n    address[] public factories;\\n    // List of enabled Modules; Modules extend the functionality of SetTokens\\n    address[] public modules;\\n    // List of enabled Resources; Resources provide data, functionality, or\\n    // permissions that can be drawn upon from Module, SetTokens or factories\\n    address[] public resources;\\n\\n    // Mappings to check whether address is valid Set, Factory, Module or Resource\\n    mapping(address => bool) public isSet;\\n    mapping(address => bool) public isFactory;\\n    mapping(address => bool) public isModule;\\n    mapping(address => bool) public isResource;\\n\\n    // Mapping of modules to fee types to fee percentage. A module can have multiple feeTypes\\n    // Fee is denominated in precise unit percentages (100% = 1e18, 1% = 1e16)\\n    mapping(address => mapping(uint256 => uint256)) public fees;\\n\\n    // Mapping of resource ID to resource address, which allows contracts to fetch the correct\\n    // resource while providing an ID\\n    mapping(uint256 => address) public resourceId;\\n\\n    // Recipient of protocol fees\\n    address public feeRecipient;\\n\\n    // Return true if the controller is initialized\\n    bool public isInitialized;\\n\\n    /* ============ Constructor ============ */\\n\\n    /**\\n     * Initializes the initial fee recipient on deployment.\\n     *\\n     * @param _feeRecipient          Address of the initial protocol fee recipient\\n     */\\n    constructor(address _feeRecipient) {\\n        feeRecipient = _feeRecipient;\\n    }\\n\\n    /* ============ External Functions ============ */\\n\\n    /**\\n     * Initializes any predeployed factories, modules, and resources post deployment. Note: This function can\\n     * only be called by the owner once to batch initialize the initial system contracts.\\n     *\\n     * @param _factories             List of factories to add\\n     * @param _modules               List of modules to add\\n     * @param _resources             List of resources to add\\n     * @param _resourceIds           List of resource IDs associated with the resources\\n     */\\n    function initialize(\\n        address[] memory _factories,\\n        address[] memory _modules,\\n        address[] memory _resources,\\n        uint256[] memory _resourceIds\\n    )\\n        external\\n        onlyOwner\\n    {\\n        if (isInitialized) revert Controller__IsInitialized();\\n        uint256 resourcesLength = _resources.length;\\n        uint256 resourceIdsLength = _resourceIds.length;\\n        if (resourceIdsLength != resourcesLength) revert Controller__ArrayLengthMismatch(resourcesLength, resourceIdsLength);\\n\\n        factories = _factories;\\n        modules = _modules;\\n        resources = _resources;\\n\\n        uint256 factoriesLength = _factories.length;\\n        // Loop through and initialize isModule, isFactory, and isResource mapping\\n        for (uint256 i; i < factoriesLength; ) {\\n            if (_factories[i] == address(0)) revert Controller__ZeroAddress();\\n            isFactory[_factories[i]] = true;\\n            unchecked { ++i; }\\n        }\\n        uint256 modulesLength = _modules.length;\\n        for (uint256 i; i < modulesLength; ) {\\n            if (_modules[i] == address(0)) revert Controller__ZeroAddress();\\n            isModule[_modules[i]] = true;\\n            unchecked { ++i; }\\n        }\\n\\n        for (uint256 i; i < resourcesLength; ) {\\n            if (_resources[i] == address(0)) revert Controller__ZeroAddress();\\n            if (resourceId[_resourceIds[i]] != address(0)) revert Controller__ResourceExists();\\n            isResource[_resources[i]] = true;\\n            resourceId[_resourceIds[i]] = _resources[i];\\n            unchecked { ++i; }\\n        }\\n\\n        // Set to true to only allow initialization once\\n        isInitialized = true;\\n    }\\n\\n    /**\\n     * PRIVILEGED FACTORY FUNCTION. Adds a newly deployed SetToken as an enabled SetToken.\\n     *\\n     * @param _setToken               Address of the SetToken contract to add\\n     */\\n    function addSet(address _setToken) external onlyInitialized onlyFactory {\\n        if (isSet[_setToken]) revert Controller__SetExists();\\n\\n        isSet[_setToken] = true;\\n\\n        sets.push(_setToken);\\n\\n        emit SetAdded(_setToken, msg.sender);\\n    }\\n\\n    /**\\n     * PRIVILEGED GOVERNANCE FUNCTION. Allows governance to remove a Set\\n     *\\n     * @param _setToken               Address of the SetToken contract to remove\\n     */\\n    function removeSet(address _setToken) external onlyInitialized onlyOwner {\\n        if (!isSet[_setToken]) revert Controller__SetInvalid();\\n\\n        sets = sets.remove(_setToken);\\n\\n        isSet[_setToken] = false;\\n\\n        emit SetRemoved(_setToken);\\n    }\\n\\n    /**\\n     * PRIVILEGED GOVERNANCE FUNCTION. Allows governance to add a factory\\n     *\\n     * @param _factory               Address of the factory contract to add\\n     */\\n    function addFactory(address _factory) external onlyInitialized onlyOwner {\\n        if (isFactory[_factory]) revert Controller__FactoryExists();\\n\\n        isFactory[_factory] = true;\\n\\n        factories.push(_factory);\\n\\n        emit FactoryAdded(_factory);\\n    }\\n\\n    /**\\n     * PRIVILEGED GOVERNANCE FUNCTION. Allows governance to remove a factory\\n     *\\n     * @param _factory               Address of the factory contract to remove\\n     */\\n    function removeFactory(address _factory) external onlyInitialized onlyOwner {\\n        if (!isFactory[_factory]) revert Controller__FactoryInvalid();\\n\\n        factories = factories.remove(_factory);\\n\\n        isFactory[_factory] = false;\\n\\n        emit FactoryRemoved(_factory);\\n    }\\n\\n    /**\\n     * PRIVILEGED GOVERNANCE FUNCTION. Allows governance to add a module\\n     *\\n     * @param _module               Address of the module contract to add\\n     */\\n    function addModule(address _module) external onlyInitialized onlyOwner {\\n        if (isModule[_module]) revert Controller__ModuleExists();\\n\\n        isModule[_module] = true;\\n\\n        modules.push(_module);\\n\\n        emit ModuleAdded(_module);\\n    }\\n\\n    /**\\n     * PRIVILEGED GOVERNANCE FUNCTION. Allows governance to remove a module\\n     *\\n     * @param _module               Address of the module contract to remove\\n     */\\n    function removeModule(address _module) external onlyInitialized onlyOwner {\\n        if (!isModule[_module]) revert Controller__ModuleInvalid();\\n\\n        modules = modules.remove(_module);\\n\\n        isModule[_module] = false;\\n\\n        emit ModuleRemoved(_module);\\n    }\\n\\n    /**\\n     * PRIVILEGED GOVERNANCE FUNCTION. Allows governance to add a resource\\n     *\\n     * @param _resource               Address of the resource contract to add\\n     * @param _id                     New ID of the resource contract\\n     */\\n    function addResource(address _resource, uint256 _id) external onlyInitialized onlyOwner {\\n        if (isResource[_resource] || resourceId[_id] != address(0)) revert Controller__ResourceExists();\\n\\n        isResource[_resource] = true;\\n\\n        resourceId[_id] = _resource;\\n\\n        resources.push(_resource);\\n\\n        emit ResourceAdded(_resource, _id);\\n    }\\n\\n    /**\\n     * PRIVILEGED GOVERNANCE FUNCTION. Allows governance to remove a resource\\n     *\\n     * @param _id               ID of the resource contract to remove\\n     */\\n    function removeResource(uint256 _id) external onlyInitialized onlyOwner {\\n        address resourceToRemove = resourceId[_id];\\n\\n        if (resourceToRemove == address(0)) revert Controller__ResourceInvalid();\\n\\n        resources = resources.remove(resourceToRemove);\\n\\n        delete resourceId[_id];\\n\\n        isResource[resourceToRemove] = false;\\n\\n        emit ResourceRemoved(resourceToRemove, _id);\\n    }\\n\\n    /**\\n     * PRIVILEGED GOVERNANCE FUNCTION. Allows governance to add a fee to a module\\n     *\\n     * @param _module               Address of the module contract to add fee to\\n     * @param _feeType              Type of the fee to add in the module\\n     * @param _newFeePercentage     Percentage of fee to add in the module (denominated in preciseUnits eg 1% = 1e16)\\n     */\\n    function addFee(address _module, uint256 _feeType, uint256 _newFeePercentage) external onlyInitialized onlyOwner {\\n        if (!isModule[_module]) revert Controller__ModuleInvalid();\\n\\n        if (fees[_module][_feeType] != 0) revert Controller__FeeTypeExists();\\n\\n        fees[_module][_feeType] = _newFeePercentage;\\n\\n        emit FeeEdited(_module, _feeType, _newFeePercentage);\\n    }\\n\\n    /**\\n     * PRIVILEGED GOVERNANCE FUNCTION. Allows governance to edit a fee in an existing module\\n     *\\n     * @param _module               Address of the module contract to edit fee\\n     * @param _feeType              Type of the fee to edit in the module\\n     * @param _newFeePercentage     Percentage of fee to edit in the module (denominated in preciseUnits eg 1% = 1e16)\\n     */\\n    function editFee(address _module, uint256 _feeType, uint256 _newFeePercentage) external onlyInitialized onlyOwner {\\n        if (!isModule[_module]) revert Controller__ModuleInvalid();\\n\\n        if (fees[_module][_feeType] == 0) revert Controller__FeeTypeInvalid();\\n\\n        fees[_module][_feeType] = _newFeePercentage;\\n\\n        emit FeeEdited(_module, _feeType, _newFeePercentage);\\n    }\\n\\n    /**\\n     * PRIVILEGED GOVERNANCE FUNCTION. Allows governance to edit the protocol fee recipient\\n     *\\n     * @param _newFeeRecipient      Address of the new protocol fee recipient\\n     */\\n    function editFeeRecipient(address _newFeeRecipient) external onlyInitialized onlyOwner {\\n        if (_newFeeRecipient == address(0)) revert Controller__ZeroAddress();\\n\\n        feeRecipient = _newFeeRecipient;\\n\\n        emit FeeRecipientChanged(_newFeeRecipient);\\n    }\\n\\n    /* ============ External Getter Functions ============ */\\n\\n    function getModuleFee(\\n        address _moduleAddress,\\n        uint256 _feeType\\n    )\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return fees[_moduleAddress][_feeType];\\n    }\\n\\n    function getFactories() external view returns (address[] memory) {\\n        return factories;\\n    }\\n\\n    function getModules() external view returns (address[] memory) {\\n        return modules;\\n    }\\n\\n    function getResources() external view returns (address[] memory) {\\n        return resources;\\n    }\\n\\n    function getSets() external view returns (address[] memory) {\\n        return sets;\\n    }\\n\\n    /**\\n     * Check if a contract address is a module, Set, resource, factory or controller\\n     *\\n     * @param  _contractAddress           The contract address to check\\n     */\\n    function isSystemContract(address _contractAddress) external view returns (bool) {\\n        return (\\n            isSet[_contractAddress] ||\\n            isModule[_contractAddress] ||\\n            isResource[_contractAddress] ||\\n            isFactory[_contractAddress] ||\\n            _contractAddress == address(this)\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/protocol/integration/exchange/OneInchV4ExchangeAdapter.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2023 Amun Holdings Limited and affiliated entities.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\n/**\\n * @title OneInchV4ExchangeAdapter\\n * @author Amun\\n *\\n * Exchange adapter for 1Inch exchange that returns dynamic data for trades\\n */\\ncontract OneInchV4ExchangeAdapter {\\n\\n    /* ============ Custom Errors ============ */\\n\\n    /// @notice Emitted when the provided function signature doesn't match the expected one.\\n    error OneInchV4ExchangeAdapter__InvalidFunctionSignature(bytes4 providedSignature, bytes4 expectedSignature);\\n    /// @notice Emitted when the token sent doesn't match the expected token to be sent.\\n    error OneInchV4ExchangeAdapter__InvalidSendToken(address providedToken, address expectedToken);\\n    /// @notice Emitted when the token received doesn't match the expected token to be received.\\n    error OneInchV4ExchangeAdapter__InvalidReceiveToken(address providedToken, address expectedToken);\\n    /// @notice Emitted when the provided minimum destination quantity doesn't align with the expected quantity.\\n    error OneInchV4ExchangeAdapter__MinDestinationQuantityMismatch(uint256 providedQuantity, uint256 expectedQuantity);\\n    /// @notice Emitted when the provided source quantity doesn't align with the expected quantity.\\n    error OneInchV4ExchangeAdapter__SourceQuantityMismatch(uint256 providedQuantity, uint256 expectedQuantity);\\n\\n    /* ============ State Variables ============ */\\n    \\n    // Address of 1Inch approve token address\\n    address public immutable ONE_INCH_APPROVAL_ADDRESS;\\n\\n    // Address of 1Inch exchange address\\n    address public immutable ONE_INCH_EXCHANGE_ADDRESS;\\n\\n    // Bytes to check 1Inch function signature\\n    bytes4 public immutable ONE_INCH_FUNCTION_SIGNATURE;\\n\\n    /* ============ Constructor ============ */\\n\\n    /**\\n     * Set state variables\\n     *\\n     * @param _oneInchApprovalAddress       Address of 1inch approval contract\\n     * @param _oneInchExchangeAddress       Address of 1inch exchange contract\\n     * @param _oneInchFunctionSignature     Bytes of 1inch function signature\\n     */\\n    constructor(\\n        address _oneInchApprovalAddress,\\n        address _oneInchExchangeAddress,\\n        bytes4 _oneInchFunctionSignature\\n    ) {\\n        ONE_INCH_APPROVAL_ADDRESS = _oneInchApprovalAddress;\\n        ONE_INCH_EXCHANGE_ADDRESS = _oneInchExchangeAddress;\\n        ONE_INCH_FUNCTION_SIGNATURE = _oneInchFunctionSignature;\\n    }\\n\\n    /* ============ External Getter Functions ============ */\\n\\n    function isDynamicDataAdapter() external pure returns (bool) {\\n        return true;\\n    }\\n\\n    /**\\n     * Return 1inch calldata which is already generated from the 1inch API\\n     *\\n     * @param  _sourceToken              Address of source token to be sold\\n     * @param  _destinationToken         Address of destination token to buy\\n     * @param  _sourceQuantity           Amount of source token to sell\\n     * @param  _minDestinationQuantity   Min amount of destination token to buy\\n     * @param  _data                     Arbitrage bytes containing trade call data\\n     *\\n     * @return address                   Target contract address\\n     * @return uint256                   Call value\\n     * @return bytes                     Trade calldata\\n     */\\n    function getTradeCalldata(\\n        address _sourceToken,\\n        address _destinationToken,\\n        address /* _destinationAddress */,\\n        uint256 _sourceQuantity,\\n        uint256 _minDestinationQuantity,\\n        bytes memory _data\\n    )\\n        external\\n        view\\n        returns (address, uint256, bytes memory)\\n    {   \\n        (bytes4 signature,\\n        address fromToken,\\n        address toToken,\\n        uint256 fromTokenAmount,\\n        uint256 minReturnAmount) = this.getTradeMetadata(_data);\\n\\n        if (signature != ONE_INCH_FUNCTION_SIGNATURE) {\\n            revert OneInchV4ExchangeAdapter__InvalidFunctionSignature(signature, ONE_INCH_FUNCTION_SIGNATURE);\\n        }\\n        \\n        if (fromToken != _sourceToken) {\\n            revert OneInchV4ExchangeAdapter__InvalidSendToken(fromToken, _sourceToken);\\n        }\\n\\n        if (toToken != _destinationToken) {\\n            revert OneInchV4ExchangeAdapter__InvalidReceiveToken(toToken, _destinationToken);\\n        }\\n\\n        if (fromTokenAmount != _sourceQuantity) {\\n            revert OneInchV4ExchangeAdapter__SourceQuantityMismatch(fromTokenAmount, _sourceQuantity);\\n        }\\n\\n        if (minReturnAmount < _minDestinationQuantity) {\\n            revert OneInchV4ExchangeAdapter__MinDestinationQuantityMismatch(minReturnAmount, _minDestinationQuantity);\\n        }\\n\\n\\n        return (ONE_INCH_EXCHANGE_ADDRESS, 0, _data);\\n    }\\n    \\n    /**\\n     * Return 1inch metadata which was included in already generated from the 1inch API\\n     *\\n     * @param  _data                     Arbitrage bytes containing trade call data\\n     *\\n     * @return signature                 Signature of function to call\\n     * @return fromToken                 Input token address\\n     * @return toToken                 Output token address\\n     * @return inputAmount               Input token amount\\n     * @return minAmountOut              Minimum return amount of output token\\n     */\\n    function getTradeMetadata(\\n        bytes memory _data\\n    )\\n        external\\n        pure\\n        returns (bytes4 signature, address fromToken, address toToken, uint256 inputAmount, uint256 minAmountOut) {\\n            // Parse 1inch calldata and validate parameters match expected inputs\\n            /* solhint-disable-next-line no-inline-assembly */\\n            assembly {            \\n                signature := mload(add(_data, 32))\\n                fromToken := mload(add(_data, 132))\\n                toToken := mload(add(_data, 164))\\n                inputAmount := mload(add(_data, 260))\\n                minAmountOut := mload(add(_data, 292))\\n            }\\n\\n        }\\n\\n    /**\\n     * Returns the address to approve source tokens to for trading. This is the TokenTaker address\\n     *\\n     * @return address             Address of the contract to approve tokens to\\n     */\\n    function getSpender()\\n        external\\n        view\\n        returns (address)\\n    {\\n        return ONE_INCH_APPROVAL_ADDRESS;\\n    }\\n}\"\r\n    },\r\n    \"contracts/protocol/integration/exchange/UniswapV2ExchangeAdapter.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Yam Finance\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\n/**\\n * @title UniswapV2TradeAdapter\\n * @author Yam Finance\\n *\\n * Exchange adapter for Uniswap V2 Router02 that encodes non dynamic trade data\\n *\\n * CHANGELOG\\n * - 4/21/23: Add isDynamicDataAdapter() to announce adapter as non dynamic\\n * - 9/18/23: Upgrade to Solidity 0.8.21\\n */\\ncontract UniswapV2ExchangeAdapter {\\n\\n    /* ============ State Variables ============ */\\n\\n    // Address of Uniswap V2 Router02 contract\\n    address public immutable ROUTER;\\n\\n    /* ============ Constructor ============ */\\n\\n    /**\\n     * Set state variables\\n     *\\n     * @param _router       Address of Uniswap V2 Router02 contract\\n     */\\n    constructor(address _router) {\\n        ROUTER = _router;\\n    }\\n\\n    /* ============ External Getter Functions ============ */\\n\\n    function isDynamicDataAdapter() external pure returns (bool) {\\n        return false;\\n    }\\n\\n    /**\\n     * Return calldata for Uniswap V2 Router02\\n     *\\n     * @param  _sourceToken              Address of source token to be sold\\n     * @param  _destinationToken         Address of destination token to buy\\n     * @param  _destinationAddress       Address that assets should be transferred to\\n     * @param  _sourceQuantity           Amount of source token to sell\\n     * @param  _minDestinationQuantity   Min amount of destination token to buy\\n     * @param  _data                     Arbitrary bytes containing trade call data\\n     *\\n     * @return address                   Target contract address\\n     * @return uint256                   Call value\\n     * @return bytes                     Trade calldata\\n     */\\n    function getTradeCalldata(\\n        address _sourceToken,\\n        address _destinationToken,\\n        address _destinationAddress,\\n        uint256 _sourceQuantity,\\n        uint256 _minDestinationQuantity,\\n        bytes memory _data\\n    )\\n        external\\n        view\\n        returns (address, uint256, bytes memory)\\n    {   \\n        address[] memory path;\\n\\n        if(_data.length == 0){\\n            path = new address[](2);\\n            path[0] = _sourceToken;\\n            path[1] = _destinationToken;\\n        } else {\\n            path = abi.decode(_data, (address[]));\\n        }\\n        bytes memory callData = abi.encodeWithSignature(\\n            \\\"swapExactTokensForTokens(uint256,uint256,address[],address,uint256)\\\",\\n            _sourceQuantity,\\n            _minDestinationQuantity,\\n            path,\\n            _destinationAddress,\\n            block.timestamp /* solhint-disable-line not-rely-on-time */\\n        );\\n        return (ROUTER, 0, callData);\\n    }\\n\\n    /**\\n     * Returns the address to approve source tokens to for trading. This is the UniswapV2 Router02 address\\n     *\\n     * @return address             Address of the contract to approve tokens to\\n     */\\n    function getSpender()\\n        external\\n        view\\n        returns (address)\\n    {\\n        return ROUTER;\\n    }\\n} \"\r\n    },\r\n    \"contracts/protocol/integration/exchange/UniswapV2ExchangeAdapterV2.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2021 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\n/**\\n * @title UniswapV2ExchangeAdapterV2\\n * @author Set Protocol\\n *\\n * A Uniswap Router02 exchange adapter that returns calldata for trading. Includes option for 2 different trade types on Uniswap.\\n *\\n * CHANGE LOG:\\n * - Add helper that encodes path and boolean into bytes\\n * - Generalized ability to choose whether to swap an exact amount of source token for a min amount of receive token or swap a max amount of source token for\\n * an exact amount of receive token\\n * - Add helper to generate data parameter for `getTradeCallData`\\n * - 9/18/23: Upgrade to Solidity 0.8.21\\n */\\ncontract UniswapV2ExchangeAdapterV2 {\\n\\n    /* ============ State Variables ============ */\\n\\n    // Address of Uniswap V2 Router02 contract\\n    address public immutable ROUTER;\\n    // Uniswap router function string for swapping exact tokens for a minimum of receive tokens\\n    string internal constant SWAP_EXACT_TOKENS_FOR_TOKENS = \\\"swapExactTokensForTokens(uint256,uint256,address[],address,uint256)\\\";\\n    // Uniswap router function string for swapping tokens for an exact amount of receive tokens\\n    string internal constant SWAP_TOKENS_FOR_EXACT_TOKENS = \\\"swapTokensForExactTokens(uint256,uint256,address[],address,uint256)\\\";\\n\\n    /* ============ Constructor ============ */\\n\\n    /**\\n     * Set state variables\\n     *\\n     * @param _router       Address of Uniswap V2 Router02 contract\\n     */\\n    constructor(address _router) {\\n        ROUTER = _router;\\n    }\\n\\n    /* ============ External Getter Functions ============ */\\n\\n    /**\\n     * Return calldata for Uniswap V2 Router02. Trade paths and bool to select trade function are encoded in the arbitrary data parameter.\\n     *\\n     * Note: When selecting the swap for exact tokens function, _sourceQuantity is defined as the max token quantity you are willing to trade, and\\n     * _minDestinationQuantity is the exact quantity of token you are receiving.\\n     *\\n     * @param  _destinationAddress       Address that assets should be transferred to\\n     * @param  _sourceQuantity           Fixed/Max amount of source token to sell\\n     * @param  _destinationQuantity      Min/Fixed amount of destination token to buy\\n     * @param  _data                     Arbitrary bytes containing trade path and bool to determine function string\\n     *\\n     * @return address                   Target contract address\\n     * @return uint256                   Call value\\n     * @return bytes                     Trade calldata\\n     */\\n    function getTradeCalldata(\\n        address /* _sourceToken */,\\n        address /* _destinationToken */,\\n        address _destinationAddress,\\n        uint256 _sourceQuantity,\\n        uint256 _destinationQuantity,\\n        bytes memory _data\\n    )\\n        external\\n        view\\n        returns (address, uint256, bytes memory)\\n    {\\n        (\\n            address[] memory path,\\n            bool shouldSwapExactTokensForTokens\\n        ) = abi.decode(_data, (address[],bool));\\n\\n        bytes memory callData = abi.encodeWithSignature(\\n            shouldSwapExactTokensForTokens ? SWAP_EXACT_TOKENS_FOR_TOKENS : SWAP_TOKENS_FOR_EXACT_TOKENS,\\n            shouldSwapExactTokensForTokens ? _sourceQuantity : _destinationQuantity,\\n            shouldSwapExactTokensForTokens ? _destinationQuantity : _sourceQuantity,\\n            path,\\n            _destinationAddress,\\n            block.timestamp /* solhint-disable-line not-rely-on-time */\\n        );\\n        return (ROUTER, 0, callData);\\n    }\\n\\n    /**\\n     * Generate data parameter to be passed to `getTradeCallData`. Returns encoded trade paths and bool to select trade function.\\n     *\\n     * @param _sourceToken          Address of the source token to be sold\\n     * @param _destinationToken     Address of the destination token to buy\\n     * @param _fixIn                Boolean representing if input tokens amount is fixed\\n     *\\n     * @return bytes                Data parameter to be passed to `getTradeCallData`\\n     */\\n    function generateDataParam(address _sourceToken, address _destinationToken, bool _fixIn)\\n        external\\n        pure\\n        returns (bytes memory)\\n    {\\n        address[] memory path = new address[](2);\\n        path[0] = _sourceToken;\\n        path[1] = _destinationToken;\\n        return abi.encode(path, _fixIn);\\n    }\\n\\n    /**\\n     * Returns the address to approve source tokens to for trading. This is the UniswapV2 Router02 address\\n     *\\n     * @return address             Address of the contract to approve tokens to\\n     */\\n    function getSpender() external view returns (address) {\\n        return ROUTER;\\n    }\\n\\n    /**\\n     * Helper that returns the encoded data of trade path and boolean indicating the Uniswap function to use\\n     *\\n     * @return bytes               Encoded data used for trading on Uniswap\\n     */\\n    function getUniswapExchangeData(address[] memory _path, bool _shouldSwapExactTokensForTokens) external pure returns (bytes memory) {\\n        return abi.encode(_path, _shouldSwapExactTokensForTokens);\\n    }\\n}\"\r\n    },\r\n    \"contracts/protocol/integration/exchange/UniswapV3ExchangeAdapter.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2021 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { BytesLib } from \\\"../../../../external/contracts/uniswap/v3/lib/BytesLib.sol\\\";\\nimport { ISwapRouter } from \\\"../../../interfaces/external/ISwapRouter.sol\\\";\\n\\n/**\\n * @title UniswapV3TradeAdapter\\n * @author Set Protocol\\n *\\n * Exchange adapter for Uniswap V3 SwapRouter that encodes trade data\\n *\\n * CHANGELOG\\n * - 9/18/23: Upgrade to Solidity 0.8.21\\n * - 9/26/23: Added custom errors\\n */\\ncontract UniswapV3ExchangeAdapter {\\n    using BytesLib for bytes;\\n\\n    /* ============ Custom Errors ============ */\\n\\n    /// @notice Emitted when the provided destination token doesn't match the expected destination token in the trade path.\\n    error UniswapV3ExchangeAdapter__DestinationTokenPathMismatch(address providedDestination, address expectedDestination);\\n    /// @notice Emitted when the provided source token doesn't match the expected source token in the trade path.\\n    error UniswapV3ExchangeAdapter__SourceTokenPathMismatch(address providedSource, address expectedSource);\\n\\n    /* ============= Constants ================= */\\n\\n    // signature of exactInput SwapRouter function\\n    string internal constant EXACT_INPUT = \\\"exactInput((bytes,address,uint256,uint256,uint256))\\\";\\n\\n    /* ============ State Variables ============ */\\n\\n    // Address of Uniswap V3 SwapRouter contract\\n    address public immutable SWAP_ROUTER;\\n\\n    /* ============ Constructor ============ */\\n\\n    /**\\n     * Set state variables\\n     *\\n     * @param _swapRouter    Address of Uniswap V3 SwapRouter\\n     */\\n    constructor(address _swapRouter) {\\n        SWAP_ROUTER = _swapRouter;\\n    }\\n\\n    /* ============ External Getter Functions ============ */\\n\\n    /**\\n     * Return calldata for Uniswap V3 SwapRouter\\n     *\\n     * @param  _sourceToken              Address of source token to be sold\\n     * @param  _destinationToken         Address of destination token to buy\\n     * @param  _destinationAddress       Address that assets should be transferred to\\n     * @param  _sourceQuantity           Amount of source token to sell\\n     * @param  _minDestinationQuantity   Min amount of destination token to buy\\n     * @param  _data                     Uniswap V3 path. Equals the output of the generateDataParam function\\n     *\\n     * @return address                   Target contract address\\n     * @return uint256                   Call value\\n     * @return bytes                     Trade calldata\\n     */\\n    function getTradeCalldata(\\n        address _sourceToken,\\n        address _destinationToken,\\n        address _destinationAddress,\\n        uint256 _sourceQuantity,\\n        uint256 _minDestinationQuantity,\\n        bytes calldata _data\\n    )\\n        external\\n        view\\n        returns (address, uint256, bytes memory)\\n    {\\n\\n        address sourceFromPath = _data.toAddress(0);\\n        if (_sourceToken != sourceFromPath) revert UniswapV3ExchangeAdapter__SourceTokenPathMismatch(sourceFromPath, _sourceToken);\\n\\n        address destinationFromPath = _data.toAddress(_data.length - 20);\\n        if (_destinationToken != destinationFromPath) revert UniswapV3ExchangeAdapter__DestinationTokenPathMismatch(destinationFromPath, _destinationToken);\\n        ISwapRouter.ExactInputParams memory params = ISwapRouter.ExactInputParams(\\n            _data,\\n            _destinationAddress,\\n            block.timestamp, /* solhint-disable-line not-rely-on-time */\\n            _sourceQuantity,\\n            _minDestinationQuantity\\n        );\\n\\n        bytes memory callData = abi.encodeWithSignature(EXACT_INPUT, params);\\n        return (SWAP_ROUTER, 0, callData);\\n    }\\n\\n    /**\\n     * Returns the address to approve source tokens to for trading. This is the Uniswap SwapRouter address\\n     *\\n     * @return address             Address of the contract to approve tokens to\\n     */\\n    function getSpender() external view returns (address) {\\n        return SWAP_ROUTER;\\n    }\\n\\n    /**\\n     * Returns the appropriate _data argument for getTradeCalldata. Equal to the encodePacked path with the\\n     * fee of each hop between it, e.g [token1, fee1, token2, fee2, token3]. Note: _fees.length == _path.length - 1\\n     *\\n     * @param _path array of addresses to use as the path for the trade\\n     * @param _fees array of uint24 representing the pool fee to use for each hop\\n     */\\n    function generateDataParam(address[] calldata _path, uint24[] calldata _fees) external pure returns (bytes memory) {\\n        bytes memory data = \\\"\\\";\\n        uint256 length = _path.length - 1;\\n        for (uint256 i; i < length; ) {\\n            data = abi.encodePacked(data, _path[i], _fees[i]);\\n            unchecked { ++i; }\\n        }\\n\\n        // last encode has no fee associated with it since _fees.length == _path.length - 1\\n        return abi.encodePacked(data, _path[length]);\\n    }\\n} \"\r\n    },\r\n    \"contracts/protocol/integration/exchange/UniswapV3ExchangeAdapterV2.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2022 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { BytesArrayUtils } from \\\"../../../lib/BytesArrayUtils.sol\\\";\\nimport { BytesLib } from \\\"../../../../external/contracts/uniswap/v3/lib/BytesLib.sol\\\";\\nimport { ISwapRouter } from \\\"../../../interfaces/external/ISwapRouter.sol\\\";\\n\\n/* ============ Custom Errors ============ */\\n\\n/// @notice Emitted when the provided destination token doesn't match the expected destination token in the trade path.\\nerror UniswapV3ExchangeAdapterV2__DestinationTokenPathMismatch(address providedDestination, address expectedDestination);\\n/// @notice Emitted when the provided data for the trade is invalid.\\nerror UniswapV3ExchangeAdapterV2__InvalidData();\\n/// @notice Emitted when the provided source token doesn't match the expected source token in the trade path.\\nerror UniswapV3ExchangeAdapterV2__SourceTokenPathMismatch(address providedSource, address expectedSource);\\n\\n/**\\n * @title UniswapV3ExchangeAdapterV2\\n * @author Set Protocol\\n *\\n * Exchange adapter for Uniswap V3 SwapRouter that encodes trade data. Supports multi-hop trades.\\n *\\n * CHANGE LOG:\\n * - Generalized ability to choose whether to swap an exact amount of source token for a min amount of\\n * receive token or swap a max amount of source token for an exact amount of receive token.\\n *\\n * CHANGELOG\\n * - 9/18/23: Upgrade to Solidity 0.8.21\\n * - 9/26/23: Added custom errors\\n */\\ncontract UniswapV3ExchangeAdapterV2 {\\n\\n    using BytesLib for bytes;\\n    using BytesArrayUtils for bytes;\\n\\n    /* ============ State Variables ============ */\\n\\n    // Address of Uniswap V3 SwapRouter contract\\n    address public immutable SWAP_ROUTER;\\n\\n    /* ============ Constructor ============ */\\n\\n    /**\\n     * Set state variables\\n     *\\n     * @param _swapRouter    Address of Uniswap V3 SwapRouter\\n     */\\n    constructor(address _swapRouter) {\\n        SWAP_ROUTER = _swapRouter;\\n    }\\n\\n    /* ============ External Getter Functions ============ */\\n\\n    /**\\n     * Return calldata for Uniswap V3 SwapRouter\\n     *\\n     * @param  _sourceToken              Address of source token to be sold\\n     * @param  _destinationToken         Address of destination token to buy\\n     * @param  _destinationAddress       Address that assets should be transferred to\\n     * @param  _sourceQuantity           Fixed/Max amount of source token to sell\\n     * @param  _destinationQuantity      Min/Fixed amount of destination token to buy\\n     * @param  _data                     Bytes containing trade path and bool to determine function string.\\n     *                                   Equals the output of the generateDataParam function\\n     *                                   NOTE: Path for `exactOutput` swaps are reversed\\n     *\\n     * @return address                   Target contract address\\n     * @return uint256                   Call value\\n     * @return bytes                     Trade calldata\\n     */\\n    function getTradeCalldata(\\n        address _sourceToken,\\n        address _destinationToken,\\n        address _destinationAddress,\\n        uint256 _sourceQuantity,\\n        uint256 _destinationQuantity,\\n        bytes calldata _data\\n    )\\n        external\\n        view\\n        returns (address, uint256, bytes memory)\\n    {\\n        // For a single hop trade, `_data.length` is 44. 20 source/destination token address + 3 fees +\\n        // 20 source/destination token address + 1 fixInput bool.\\n        // For multi-hop trades, `_data.length` is greater than 44.\\n        if (_data.length < 44) revert UniswapV3ExchangeAdapterV2__InvalidData();\\n\\n        bool fixInput = _data.toBool(_data.length - 1);        // `fixInput` bool is stored at last byte\\n\\n        address sourceFromPath;\\n        address destinationFromPath;\\n\\n        if (fixInput) {\\n            sourceFromPath = _data.toAddress(0);\\n            destinationFromPath = _data.toAddress(_data.length - 21);\\n        } else {\\n            // Path for exactOutput swaps are reversed\\n            sourceFromPath = _data.toAddress(_data.length - 21);\\n            destinationFromPath = _data.toAddress(0);\\n        }\\n\\n        if (_sourceToken != sourceFromPath) revert UniswapV3ExchangeAdapterV2__SourceTokenPathMismatch(sourceFromPath, _sourceToken);\\n        if (_destinationToken != destinationFromPath) revert UniswapV3ExchangeAdapterV2__DestinationTokenPathMismatch(destinationFromPath, _destinationToken);\\n\\n\\n        bytes memory pathData = _data.slice(0, _data.length - 1);       // Extract path data from `_data`\\n\\n        bytes memory callData = fixInput\\n            ? abi.encodeWithSelector(\\n                ISwapRouter.exactInput.selector,\\n                ISwapRouter.ExactInputParams(\\n                    pathData,\\n                    _destinationAddress,\\n                    block.timestamp, /* solhint-disable-line not-rely-on-time */\\n                    _sourceQuantity,\\n                    _destinationQuantity\\n                )\\n            )\\n            : abi.encodeWithSelector(\\n                ISwapRouter.exactOutput.selector,\\n                ISwapRouter.ExactOutputParams(\\n                    pathData,\\n                    _destinationAddress,\\n                    block.timestamp, /* solhint-disable-line not-rely-on-time */\\n                    _destinationQuantity,       // swapped vs exactInputParams\\n                    _sourceQuantity\\n                )\\n            );\\n\\n        return (SWAP_ROUTER, 0, callData);\\n    }\\n\\n    /**\\n     * Returns the address to approve source tokens to for trading. This is the Uniswap SwapRouter address\\n     *\\n     * @return address             Address of the contract to approve tokens to\\n     */\\n    function getSpender() external view returns (address) {\\n        return SWAP_ROUTER;\\n    }\\n\\n    /**\\n     * Returns the appropriate _data argument for getTradeCalldata. Equal to the encodePacked path with the\\n     * fee of each hop between it and fixInput bool at the very end., e.g [token1, fee1, token2, fee2, token3, fixIn].\\n     * Note: _fees.length == _path.length - 1\\n     *\\n     * @param _path array of addresses to use as the path for the trade\\n     * @param _fees array of uint24 representing the pool fee to use for each hop\\n     * @param _fixIn Boolean indicating if input amount is fixed\\n     *\\n     * @return bytes  Bytes containing trade path and bool to determine function string.\\n     */\\n    function generateDataParam(\\n        address[] calldata _path,\\n        uint24[] calldata _fees,\\n        bool _fixIn\\n    ) external pure returns (bytes memory) {\\n        bytes memory data = \\\"\\\";\\n        uint256 length = _path.length - 1;\\n        for (uint256 i; i < length; ) {\\n            data = abi.encodePacked(data, _path[i], _fees[i]);\\n            unchecked { ++i; }\\n        }\\n\\n        // Last encode has no fee associated with it since _fees.length == _path.length - 1\\n        data = abi.encodePacked(data, _path[length]);\\n\\n        // Encode fixIn\\n        return abi.encodePacked(data, _fixIn);\\n    }\\n}\"\r\n    },\r\n    \"contracts/protocol/integration/lib/AaveV2.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2021 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { ILendingPool } from \\\"../../../interfaces/external/aave-v2/ILendingPool.sol\\\";\\nimport { ISetToken } from \\\"../../../interfaces/ISetToken.sol\\\";\\n\\n/**\\n * @title AaveV2\\n * @author Set Protocol\\n * \\n * Collection of helper functions for interacting with AaveV2 integrations.\\n *\\n * CHANGELOG\\n * - 9/18/23: Upgrade to Solidity 0.8.21\\n */\\nlibrary AaveV2 {\\n    /* ============ External ============ */\\n    \\n    /**\\n     * Get deposit calldata from SetToken\\n     *\\n     * Deposits an `_amountNotional` of underlying asset into the reserve, receiving in return overlying aTokens.\\n     * - E.g. User deposits 100 USDC and gets in return 100 aUSDC\\n     * @param _lendingPool          Address of the LendingPool contract\\n     * @param _asset                The address of the underlying asset to deposit\\n     * @param _amountNotional       The amount to be deposited\\n     * @param _onBehalfOf           The address that will receive the aTokens, same as msg.sender if the user\\n     *                              wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n     *                              is a different wallet\\n     * @param _referralCode         Code used to register the integrator originating the operation, for potential rewards.\\n     *                              0 if the action is executed directly by the user, without any middle-man\\n     *\\n     * @return address              Target contract address\\n     * @return uint256              Call value\\n     * @return bytes                Deposit calldata\\n     */\\n    function getDepositCalldata(\\n        ILendingPool _lendingPool,\\n        address _asset, \\n        uint256 _amountNotional,\\n        address _onBehalfOf,\\n        uint16 _referralCode\\n    )\\n        public\\n        pure\\n        returns (address, uint256, bytes memory)\\n    {\\n        bytes memory callData = abi.encodeWithSignature(\\n            \\\"deposit(address,uint256,address,uint16)\\\", \\n            _asset, \\n            _amountNotional, \\n            _onBehalfOf,\\n            _referralCode\\n        );\\n        \\n        return (address(_lendingPool), 0, callData);\\n    }\\n    \\n    /**\\n     * Invoke deposit on LendingPool from SetToken\\n     * \\n     * Deposits an `_amountNotional` of underlying asset into the reserve, receiving in return overlying aTokens.\\n     * - E.g. SetToken deposits 100 USDC and gets in return 100 aUSDC\\n     * @param _setToken             Address of the SetToken\\n     * @param _lendingPool          Address of the LendingPool contract\\n     * @param _asset                The address of the underlying asset to deposit\\n     * @param _amountNotional       The amount to be deposited\\n     */\\n    function invokeDeposit(\\n        ISetToken _setToken,\\n        ILendingPool _lendingPool,\\n        address _asset,\\n        uint256 _amountNotional        \\n    )\\n        external\\n    {\\n        ( , , bytes memory depositCalldata) = getDepositCalldata(\\n            _lendingPool,\\n            _asset,\\n            _amountNotional, \\n            address(_setToken), \\n            0\\n        );\\n        \\n        _setToken.invoke(address(_lendingPool), 0, depositCalldata);\\n    }\\n    \\n    /**\\n     * Get withdraw calldata from SetToken\\n     * \\n     * Withdraws an `_amountNotional` of underlying asset from the reserve, burning the equivalent aTokens owned\\n     * - E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n     * @param _lendingPool          Address of the LendingPool contract\\n     * @param _asset                The address of the underlying asset to withdraw\\n     * @param _amountNotional       The underlying amount to be withdrawn\\n     *                              Note: Passing type(uint256).max will withdraw the entire aToken balance\\n     * @param _receiver             Address that will receive the underlying, same as msg.sender if the user\\n     *                              wants to receive it on his own wallet, or a different address if the beneficiary is a\\n     *                              different wallet\\n     *\\n     * @return address              Target contract address\\n     * @return uint256              Call value\\n     * @return bytes                Withdraw calldata\\n     */\\n    function getWithdrawCalldata(\\n        ILendingPool _lendingPool,\\n        address _asset, \\n        uint256 _amountNotional,\\n        address _receiver        \\n    )\\n        public\\n        pure\\n        returns (address, uint256, bytes memory)\\n    {\\n        bytes memory callData = abi.encodeWithSignature(\\n            \\\"withdraw(address,uint256,address)\\\", \\n            _asset, \\n            _amountNotional, \\n            _receiver\\n        );\\n        \\n        return (address(_lendingPool), 0, callData);\\n    }\\n    \\n    /**\\n     * Invoke withdraw on LendingPool from SetToken\\n     * \\n     * Withdraws an `_amountNotional` of underlying asset from the reserve, burning the equivalent aTokens owned\\n     * - E.g. SetToken has 100 aUSDC, and receives 100 USDC, burning the 100 aUSDC\\n     *     \\n     * @param _setToken         Address of the SetToken\\n     * @param _lendingPool      Address of the LendingPool contract\\n     * @param _asset            The address of the underlying asset to withdraw\\n     * @param _amountNotional   The underlying amount to be withdrawn\\n     *                          Note: Passing type(uint256).max will withdraw the entire aToken balance\\n     *\\n     * @return uint256          The final amount withdrawn\\n     */\\n    function invokeWithdraw(\\n        ISetToken _setToken,\\n        ILendingPool _lendingPool,\\n        address _asset,\\n        uint256 _amountNotional        \\n    )\\n        external\\n        returns (uint256)\\n    {\\n        ( , , bytes memory withdrawCalldata) = getWithdrawCalldata(\\n            _lendingPool,\\n            _asset,\\n            _amountNotional, \\n            address(_setToken)\\n        );\\n        \\n        return abi.decode(_setToken.invoke(address(_lendingPool), 0, withdrawCalldata), (uint256));\\n    }\\n    \\n    /**\\n     * Get borrow calldata from SetToken\\n     *\\n     * Allows users to borrow a specific `_amountNotional` of the reserve underlying `_asset`, provided that \\n     * the borrower already deposited enough collateral, or he was given enough allowance by a credit delegator\\n     * on the corresponding debt token (StableDebtToken or VariableDebtToken)\\n     *\\n     * @param _lendingPool          Address of the LendingPool contract\\n     * @param _asset                The address of the underlying asset to borrow\\n     * @param _amountNotional       The amount to be borrowed\\n     * @param _interestRateMode     The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\n     * @param _referralCode         Code used to register the integrator originating the operation, for potential rewards.\\n     *                              0 if the action is executed directly by the user, without any middle-man\\n     * @param _onBehalfOf           Address of the user who will receive the debt. Should be the address of the borrower itself\\n     *                              calling the function if he wants to borrow against his own collateral, or the address of the\\n     *                              credit delegator if he has been given credit delegation allowance\\n     *\\n     * @return address              Target contract address\\n     * @return uint256              Call value\\n     * @return bytes                Borrow calldata\\n     */\\n    function getBorrowCalldata(\\n        ILendingPool _lendingPool,\\n        address _asset, \\n        uint256 _amountNotional,\\n        uint256 _interestRateMode,\\n        uint16 _referralCode,\\n        address _onBehalfOf\\n    )\\n        public\\n        pure\\n        returns (address, uint256, bytes memory)\\n    {\\n        bytes memory callData = abi.encodeWithSignature(\\n            \\\"borrow(address,uint256,uint256,uint16,address)\\\", \\n            _asset, \\n            _amountNotional, \\n            _interestRateMode,\\n            _referralCode,\\n            _onBehalfOf\\n        );\\n        \\n        return (address(_lendingPool), 0, callData);\\n    }\\n    \\n    /**\\n     * Invoke borrow on LendingPool from SetToken\\n     *\\n     * Allows SetToken to borrow a specific `_amountNotional` of the reserve underlying `_asset`, provided that \\n     * the SetToken already deposited enough collateral, or it was given enough allowance by a credit delegator\\n     * on the corresponding debt token (StableDebtToken or VariableDebtToken)\\n     * @param _setToken             Address of the SetToken\\n     * @param _lendingPool          Address of the LendingPool contract\\n     * @param _asset                The address of the underlying asset to borrow\\n     * @param _amountNotional       The amount to be borrowed\\n     * @param _interestRateMode     The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\n     */\\n    function invokeBorrow(\\n        ISetToken _setToken,\\n        ILendingPool _lendingPool,\\n        address _asset,\\n        uint256 _amountNotional,\\n        uint256 _interestRateMode\\n    )\\n        external\\n    {\\n        ( , , bytes memory borrowCalldata) = getBorrowCalldata(\\n            _lendingPool,\\n            _asset,\\n            _amountNotional,\\n            _interestRateMode,\\n            0, \\n            address(_setToken)\\n        );\\n        \\n        _setToken.invoke(address(_lendingPool), 0, borrowCalldata);\\n    }\\n\\n    /**\\n     * Get repay calldata from SetToken\\n     *\\n     * Repays a borrowed `_amountNotional` on a specific `_asset` reserve, burning the equivalent debt tokens owned\\n     * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\n     * @param _lendingPool          Address of the LendingPool contract\\n     * @param _asset                The address of the borrowed underlying asset previously borrowed\\n     * @param _amountNotional       The amount to repay\\n     *                              Note: Passing type(uint256).max will repay the whole debt for `_asset` on the specific `_interestRateMode`\\n     * @param _interestRateMode     The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n     * @param _onBehalfOf           Address of the user who will get his debt reduced/removed. Should be the address of the\\n     *                              user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n     *                              other borrower whose debt should be removed\\n     *\\n     * @return address              Target contract address\\n     * @return uint256              Call value\\n     * @return bytes                Repay calldata\\n     */\\n    function getRepayCalldata(\\n        ILendingPool _lendingPool,\\n        address _asset, \\n        uint256 _amountNotional,\\n        uint256 _interestRateMode,        \\n        address _onBehalfOf\\n    )\\n        public\\n        pure\\n        returns (address, uint256, bytes memory)\\n    {\\n        bytes memory callData = abi.encodeWithSignature(\\n            \\\"repay(address,uint256,uint256,address)\\\", \\n            _asset, \\n            _amountNotional, \\n            _interestRateMode,            \\n            _onBehalfOf\\n        );\\n        \\n        return (address(_lendingPool), 0, callData);\\n    }\\n\\n    /**\\n     * Invoke repay on LendingPool from SetToken\\n     *\\n     * Repays a borrowed `_amountNotional` on a specific `_asset` reserve, burning the equivalent debt tokens owned\\n     * - E.g. SetToken repays 100 USDC, burning 100 variable/stable debt tokens\\n     * @param _setToken             Address of the SetToken\\n     * @param _lendingPool          Address of the LendingPool contract\\n     * @param _asset                The address of the borrowed underlying asset previously borrowed\\n     * @param _amountNotional       The amount to repay\\n     *                              Note: Passing type(uint256).max will repay the whole debt for `_asset` on the specific `_interestRateMode`\\n     * @param _interestRateMode     The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n     *\\n     * @return uint256              The final amount repaid\\n     */\\n    function invokeRepay(\\n        ISetToken _setToken,\\n        ILendingPool _lendingPool,\\n        address _asset,\\n        uint256 _amountNotional,\\n        uint256 _interestRateMode\\n    )\\n        external\\n        returns (uint256)\\n    {\\n        ( , , bytes memory repayCalldata) = getRepayCalldata(\\n            _lendingPool,\\n            _asset,\\n            _amountNotional,\\n            _interestRateMode,\\n            address(_setToken)\\n        );\\n        \\n        return abi.decode(_setToken.invoke(address(_lendingPool), 0, repayCalldata), (uint256));\\n    }\\n\\n    /**\\n     * Get setUserUseReserveAsCollateral calldata from SetToken\\n     * \\n     * Allows borrower to enable/disable a specific deposited asset as collateral\\n     * @param _lendingPool          Address of the LendingPool contract\\n     * @param _asset                The address of the underlying asset deposited\\n     * @param _useAsCollateral      true` if the user wants to use the deposit as collateral, `false` otherwise\\n     *\\n     * @return address              Target contract address\\n     * @return uint256              Call value\\n     * @return bytes                SetUserUseReserveAsCollateral calldata\\n     */\\n    function getSetUserUseReserveAsCollateralCalldata(\\n        ILendingPool _lendingPool,\\n        address _asset,\\n        bool _useAsCollateral\\n    )\\n        public\\n        pure\\n        returns (address, uint256, bytes memory)\\n    {\\n        bytes memory callData = abi.encodeWithSignature(\\n            \\\"setUserUseReserveAsCollateral(address,bool)\\\", \\n            _asset,\\n            _useAsCollateral\\n        );\\n        \\n        return (address(_lendingPool), 0, callData);\\n    }\\n\\n    /**\\n     * Invoke an asset to be used as collateral on Aave from SetToken\\n     *\\n     * Allows SetToken to enable/disable a specific deposited asset as collateral\\n     * @param _setToken             Address of the SetToken\\n     * @param _lendingPool          Address of the LendingPool contract\\n     * @param _asset                The address of the underlying asset deposited\\n     * @param _useAsCollateral      true` if the user wants to use the deposit as collateral, `false` otherwise\\n     */\\n    function invokeSetUserUseReserveAsCollateral(\\n        ISetToken _setToken,\\n        ILendingPool _lendingPool,\\n        address _asset,\\n        bool _useAsCollateral\\n    )\\n        external\\n    {\\n        ( , , bytes memory callData) = getSetUserUseReserveAsCollateralCalldata(\\n            _lendingPool,\\n            _asset,\\n            _useAsCollateral\\n        );\\n        \\n        _setToken.invoke(address(_lendingPool), 0, callData);\\n    }\\n    \\n    /**\\n     * Get swapBorrowRate calldata from SetToken\\n     *\\n     * Allows a borrower to toggle his debt between stable and variable mode\\n     * @param _lendingPool      Address of the LendingPool contract\\n     * @param _asset            The address of the underlying asset borrowed\\n     * @param _rateMode         The rate mode that the user wants to swap to\\n     *\\n     * @return address          Target contract address\\n     * @return uint256          Call value\\n     * @return bytes            SwapBorrowRate calldata\\n     */\\n    function getSwapBorrowRateModeCalldata(\\n        ILendingPool _lendingPool,\\n        address _asset,\\n        uint256 _rateMode\\n    )\\n        public\\n        pure\\n        returns (address, uint256, bytes memory)\\n    {\\n        bytes memory callData = abi.encodeWithSignature(\\n            \\\"swapBorrowRateMode(address,uint256)\\\", \\n            _asset,\\n            _rateMode\\n        );\\n        \\n        return (address(_lendingPool), 0, callData);\\n    }\\n\\n    /**\\n     * Invoke to swap borrow rate of SetToken\\n     * \\n     * Allows SetToken to toggle it's debt between stable and variable mode\\n     * @param _setToken         Address of the SetToken\\n     * @param _lendingPool      Address of the LendingPool contract\\n     * @param _asset            The address of the underlying asset borrowed\\n     * @param _rateMode         The rate mode that the user wants to swap to\\n     */\\n    function invokeSwapBorrowRateMode(\\n        ISetToken _setToken,\\n        ILendingPool _lendingPool,\\n        address _asset,\\n        uint256 _rateMode\\n    )\\n        external\\n    {\\n        ( , , bytes memory callData) = getSwapBorrowRateModeCalldata(\\n            _lendingPool,\\n            _asset,\\n            _rateMode\\n        );\\n        \\n        _setToken.invoke(address(_lendingPool), 0, callData);\\n    }\\n}\"\r\n    },\r\n    \"contracts/protocol/IntegrationRegistry.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { IController } from \\\"../interfaces/IController.sol\\\";\\nimport { IIntegrationRegistry } from \\\"../interfaces/IIntegrationRegistry.sol\\\";\\nimport { Ownable2Step } from \\\"@openzeppelin/contracts/access/Ownable2Step.sol\\\";\\n\\n/**\\n * @title IntegrationRegistry\\n * @author Set Protocol\\n *\\n * The IntegrationRegistry holds state relating to the Modules and the integrations they are connected with.\\n * The state is combined into a single Registry to allow governance updates to be aggregated to one contract.\\n *\\n * CHANGELOG\\n * - 9/13/23: Switch from Ownable to Ownable2Step\\n * - 9/18/23: Upgrade to Solidity 0.8.21\\n * - 9/26/23: Added custom errors\\n */\\ncontract IntegrationRegistry is IIntegrationRegistry, Ownable2Step {\\n\\n    /* ============ Events ============ */\\n\\n    event IntegrationAdded(address indexed _module, address indexed _adapter, string _integrationName);\\n    event IntegrationRemoved(address indexed _module, address indexed _adapter, string _integrationName);\\n    event IntegrationEdited(\\n        address indexed _module,\\n        address _newAdapter,\\n        string _integrationName\\n    );\\n\\n    /* ============ State Variables ============ */\\n\\n    // Address of the Controller contract\\n    IController public immutable CONTROLLER;\\n\\n    // Mapping of module => integration identifier => adapter address\\n    mapping(address => mapping(bytes32 => address)) private integrations;\\n\\n    /* ============ Constructor ============ */\\n\\n    /**\\n     * Initializes the Controller\\n     *\\n     * @param _controller          Instance of the Controller\\n     */\\n    constructor(IController _controller) {\\n        CONTROLLER = _controller;\\n    }\\n\\n    /* ============ External Functions ============ */\\n\\n    /**\\n     * GOVERNANCE FUNCTION: Add a new integration to the registry\\n     *\\n     * @param  _module       The address of the module associated with the integration\\n     * @param  _name         Human readable string identifying the integration\\n     * @param  _adapter      Address of the adapter contract to add\\n     */\\n    function addIntegration(\\n        address _module,\\n        string memory _name,\\n        address _adapter\\n    )\\n        public\\n        onlyOwner\\n    {\\n        if (_adapter == address(0)) revert IntegrationRegistry__ZeroAddress();\\n        if (!CONTROLLER.isModule(_module)) revert IntegrationRegistry__ModuleInvalid();\\n        \\n        bytes32 hashedName = _nameHash(_name);\\n        if (integrations[_module][hashedName] != address(0)) revert IntegrationRegistry__IntegrationExists();\\n\\n        integrations[_module][hashedName] = _adapter;\\n\\n        emit IntegrationAdded(_module, _adapter, _name);\\n    }\\n\\n    /**\\n     * GOVERNANCE FUNCTION: Batch add new adapters. Reverts if exists on any module and name\\n     *\\n     * @param  _modules      Array of addresses of the modules associated with integration\\n     * @param  _names        Array of human readable strings identifying the integration\\n     * @param  _adapters     Array of addresses of the adapter contracts to add\\n     */\\n    function batchAddIntegration(\\n        address[] memory _modules,\\n        string[] memory _names,\\n        address[] memory _adapters\\n    )\\n        external\\n        onlyOwner\\n    {\\n        // Storing modules count to local variable to save on invocation\\n        uint256 modulesCount = _modules.length;\\n\\n        if (modulesCount == 0) revert IntegrationRegistry__ModulesEmpty();\\n        uint256 namesLength = _names.length;\\n        if (modulesCount != namesLength) revert IntegrationRegistry__ModulesNamesLengthMismatch(modulesCount, namesLength);\\n        uint256 adaptersLength = _adapters.length;\\n        if (modulesCount != adaptersLength) revert IntegrationRegistry__ModulesAdaptersLengthMismatch(modulesCount, adaptersLength);\\n\\n        for (uint256 i; i < modulesCount; ) {\\n            // Add integrations to the specified module. Will revert if module and name combination exists\\n            addIntegration(\\n                _modules[i],\\n                _names[i],\\n                _adapters[i]\\n            );\\n            unchecked { ++i; }\\n        }\\n    }\\n\\n    /**\\n     * GOVERNANCE FUNCTION: Edit an existing integration on the registry\\n     *\\n     * @param  _module       The address of the module associated with the integration\\n     * @param  _name         Human readable string identifying the integration\\n     * @param  _adapter      Address of the adapter contract to edit\\n     */\\n    function editIntegration(\\n        address _module,\\n        string memory _name,\\n        address _adapter\\n    )\\n        public\\n        onlyOwner\\n    {\\n        bytes32 hashedName = _nameHash(_name);\\n\\n        if (_adapter == address(0)) revert IntegrationRegistry__ZeroAddress();\\n        if (!CONTROLLER.isModule(_module)) revert IntegrationRegistry__ModuleInvalid();\\n        if (integrations[_module][hashedName] == address(0)) revert IntegrationRegistry__IntegrationInvalid();\\n\\n        integrations[_module][hashedName] = _adapter;\\n\\n        emit IntegrationEdited(_module, _adapter, _name);\\n    }\\n\\n    /**\\n     * GOVERNANCE FUNCTION: Batch edit adapters for modules. Reverts if module and\\n     * adapter name don't map to an adapter address\\n     *\\n     * @param  _modules      Array of addresses of the modules associated with integration\\n     * @param  _names        Array of human readable strings identifying the integration\\n     * @param  _adapters     Array of addresses of the adapter contracts to add\\n     */\\n    function batchEditIntegration(\\n        address[] memory _modules,\\n        string[] memory _names,\\n        address[] memory _adapters\\n    )\\n        external\\n        onlyOwner\\n    {\\n        // Storing name count to local variable to save on invocation\\n        uint256 modulesCount = _modules.length;\\n\\n        if (modulesCount == 0) revert IntegrationRegistry__ModulesEmpty();\\n        uint256 namesLength = _names.length;\\n        if (modulesCount != namesLength) revert IntegrationRegistry__ModulesNamesLengthMismatch(modulesCount, namesLength);\\n        uint256 adaptersLength = _adapters.length;\\n        if (modulesCount != adaptersLength) revert IntegrationRegistry__ModulesAdaptersLengthMismatch(modulesCount, adaptersLength);\\n\\n        for (uint256 i; i < modulesCount; ) {\\n            // Edits integrations to the specified module. Will revert if module and name combination does not exist\\n            editIntegration(\\n                _modules[i],\\n                _names[i],\\n                _adapters[i]\\n            );\\n            unchecked { ++i; }\\n        }\\n    }\\n\\n    /**\\n     * GOVERNANCE FUNCTION: Remove an existing integration on the registry\\n     *\\n     * @param  _module       The address of the module associated with the integration\\n     * @param  _name         Human readable string identifying the integration\\n     */\\n    function removeIntegration(address _module, string memory _name) external onlyOwner {\\n        bytes32 hashedName = _nameHash(_name);\\n        if (integrations[_module][hashedName] == address(0)) revert IntegrationRegistry__IntegrationInvalid();\\n\\n        address oldAdapter = integrations[_module][hashedName];\\n        delete integrations[_module][hashedName];\\n\\n        emit IntegrationRemoved(_module, oldAdapter, _name);\\n    }\\n\\n    /* ============ External Getter Functions ============ */\\n\\n    /**\\n     * Get integration adapter address associated with passed human readable name\\n     *\\n     * @param  _module       The address of the module associated with the integration\\n     * @param  _name         Human readable adapter name\\n     *\\n     * @return               Address of adapter\\n     */\\n    function getIntegrationAdapter(address _module, string memory _name) external view returns (address) {\\n        return integrations[_module][_nameHash(_name)];\\n    }\\n\\n    /**\\n     * Get integration adapter address associated with passed hashed name\\n     *\\n     * @param  _module       The address of the module associated with the integration\\n     * @param  _adapterNameHash     Hash of human readable adapter name\\n     *\\n     * @return               Address of adapter\\n     */\\n    function getIntegrationAdapterWithHash(address _module, bytes32 _adapterNameHash) external view returns (address) {\\n        return integrations[_module][_adapterNameHash];\\n    }\\n\\n    /**\\n     * Check if adapter name is valid\\n     *\\n     * @param  _module       The address of the module associated with the integration\\n     * @param  _name         Human readable string identifying the integration\\n     *\\n     * @return               Boolean indicating if valid\\n     */\\n    function isValidIntegration(address _module, string memory _name) external view returns (bool) {\\n        return integrations[_module][_nameHash(_name)] != address(0);\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    /**\\n     * Hashes the string and returns a bytes32 value\\n     */\\n    function _nameHash(string memory _name) internal pure returns(bytes32) {\\n        return keccak256(bytes(_name));\\n    }\\n}\"\r\n    },\r\n    \"contracts/protocol/lib/Invoke.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport { ISetToken } from \\\"../../interfaces/ISetToken.sol\\\";\\n\\n/**\\n * @title Invoke\\n * @author Set Protocol\\n *\\n * A collection of common utility functions for interacting with the SetToken's invoke function\\n *\\n * CHANGELOG\\n * - 4/21/23: Removed OZ SafeMath utils\\n * - 9/18/23: Upgrade to Solidity 0.8.21\\n * - 9/26/23: Added custom errors\\n */\\nlibrary Invoke {\\n\\n    /* ============ Custom Errors ============ */\\n\\n    /// @notice Emitted when the balance after a transfer doesn't match the expected balance.\\n    error Invoke__PostTransferBalanceInvalid(address emitter, uint256 newBalance, uint256 expectedBalance);\\n\\n    /* ============ Internal ============ */\\n\\n    /**\\n     * Instructs the SetToken to set approvals of the ERC20 token to a spender.\\n     *\\n     * @param _setToken        SetToken instance to invoke\\n     * @param _token           ERC20 token to approve\\n     * @param _spender         The account allowed to spend the SetToken's balance\\n     * @param _quantity        The quantity of allowance to allow\\n     */\\n    function invokeApprove(\\n        ISetToken _setToken,\\n        address _token,\\n        address _spender,\\n        uint256 _quantity\\n    )\\n        internal\\n    {\\n        bytes memory callData = abi.encodeWithSignature(\\\"approve(address,uint256)\\\", _spender, _quantity);\\n        _setToken.invoke(_token, 0, callData);\\n    }\\n\\n    /**\\n     * Instructs the SetToken to transfer the ERC20 token to a recipient.\\n     *\\n     * @param _setToken        SetToken instance to invoke\\n     * @param _token           ERC20 token to transfer\\n     * @param _to              The recipient account\\n     * @param _quantity        The quantity to transfer\\n     */\\n    function invokeTransfer(\\n        ISetToken _setToken,\\n        address _token,\\n        address _to,\\n        uint256 _quantity\\n    )\\n        internal\\n    {\\n        if (_quantity > 0) {\\n            bytes memory callData = abi.encodeWithSignature(\\\"transfer(address,uint256)\\\", _to, _quantity);\\n            _setToken.invoke(_token, 0, callData);\\n        }\\n    }\\n\\n    /**\\n     * Instructs the SetToken to transfer the ERC20 token to a recipient.\\n     * The new SetToken balance must equal the existing balance less the quantity transferred\\n     *\\n     * @param _setToken        SetToken instance to invoke\\n     * @param _token           ERC20 token to transfer\\n     * @param _to              The recipient account\\n     * @param _quantity        The quantity to transfer\\n     */\\n    function strictInvokeTransfer(\\n        ISetToken _setToken,\\n        address _token,\\n        address _to,\\n        uint256 _quantity\\n    )\\n        internal\\n    {\\n        if (_quantity > 0) {\\n            // Retrieve current balance of token for the SetToken\\n            uint256 existingBalance = IERC20(_token).balanceOf(address(_setToken));\\n\\n            Invoke.invokeTransfer(_setToken, _token, _to, _quantity);\\n\\n            // Get new balance of transferred token for SetToken\\n            uint256 newBalance = IERC20(_token).balanceOf(address(_setToken));\\n\\n            // Verify only the transfer quantity is subtracted\\n            uint256 expectedBalance = existingBalance - _quantity;\\n            if (newBalance != expectedBalance) {\\n                revert Invoke__PostTransferBalanceInvalid(address(this), newBalance, expectedBalance);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Instructs the SetToken to unwrap the passed quantity of WETH\\n     *\\n     * @param _setToken        SetToken instance to invoke\\n     * @param _weth            WETH address\\n     * @param _quantity        The quantity to unwrap\\n     */\\n    function invokeUnwrapWETH(ISetToken _setToken, address _weth, uint256 _quantity) internal {\\n        bytes memory callData = abi.encodeWithSignature(\\\"withdraw(uint256)\\\", _quantity);\\n        _setToken.invoke(_weth, 0, callData);\\n    }\\n\\n    /**\\n     * Instructs the SetToken to wrap the passed quantity of ETH\\n     *\\n     * @param _setToken        SetToken instance to invoke\\n     * @param _weth            WETH address\\n     * @param _quantity        The quantity to unwrap\\n     */\\n    function invokeWrapWETH(ISetToken _setToken, address _weth, uint256 _quantity) internal {\\n        bytes memory callData = abi.encodeWithSignature(\\\"deposit()\\\");\\n        _setToken.invoke(_weth, _quantity, callData);\\n    }\\n}\"\r\n    },\r\n    \"contracts/protocol/lib/IssuanceValidationUtils.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2021 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\nimport { ISetToken } from \\\"../../interfaces/ISetToken.sol\\\";\\nimport { PreciseUnitMath } from \\\"../../lib/PreciseUnitMath.sol\\\";\\n\\n/**\\n * @title IssuanceValidationUtils\\n * @author Set Protocol\\n *\\n * A collection of utility functions to help during issuance/redemption of SetToken.\\n *\\n * CHANGELOG\\n * - 4/21/23: Removed OZ SafeMath utils\\n * - 9/18/23: Upgrade to Solidity 0.8.21\\n * - 9/26/23: Added custom errors\\n */\\nlibrary IssuanceValidationUtils {\\n    using SafeCast for int256;\\n    using PreciseUnitMath for uint256;\\n\\n    /* ============ Custom Errors ============ */\\n\\n    /// @notice Emitted when the actual balance is less than the required minimum collateralization balance.\\n    error IssuanceValidation__Undercollateralization(address emitter, uint256 newBalance, uint256 minCollaterizationBalance);\\n\\n    /**\\n     * Validates component transfer IN to SetToken during issuance/redemption. Reverts if Set is undercollateralized post transfer.\\n     * NOTE: Call this function immediately after transfer IN but before calling external hooks (if any).\\n     *\\n     * @param _setToken             Instance of the SetToken being issued/redeemed\\n     * @param _component            Address of component being transferred in/out\\n     * @param _initialSetSupply     Initial SetToken supply before issuance/redemption\\n     * @param _componentQuantity    Amount of component transferred into SetToken\\n     */\\n    function validateCollateralizationPostTransferInPreHook(\\n        ISetToken _setToken, \\n        address _component, \\n        uint256 _initialSetSupply,\\n        uint256 _componentQuantity\\n    )\\n        internal\\n        view\\n    {\\n        uint256 newComponentBalance = IERC20(_component).balanceOf(address(_setToken));\\n\\n        uint256 defaultPositionUnit = _setToken.getDefaultPositionRealUnit(address(_component)).toUint256();\\n        \\n        // Use preciseMulCeil to increase the lower bound and maintain over-collateralization\\n        uint256 minCollaterizationBalance = _initialSetSupply.preciseMulCeil(defaultPositionUnit) + _componentQuantity;\\n        if (newComponentBalance < minCollaterizationBalance) {\\n                revert IssuanceValidation__Undercollateralization(address(this), newComponentBalance, minCollaterizationBalance);\\n        }\\n    }\\n\\n    /**\\n     * Validates component transfer OUT of SetToken during issuance/redemption. Reverts if Set is undercollateralized post transfer.\\n     *\\n     * @param _setToken         Instance of the SetToken being issued/redeemed\\n     * @param _component        Address of component being transferred in/out\\n     * @param _finalSetSupply   Final SetToken supply after issuance/redemption\\n     */\\n    function validateCollateralizationPostTransferOut(\\n        ISetToken _setToken, \\n        address _component, \\n        uint256 _finalSetSupply\\n    )\\n        internal \\n        view \\n    {\\n        uint256 newComponentBalance = IERC20(_component).balanceOf(address(_setToken));\\n\\n        uint256 defaultPositionUnit = _setToken.getDefaultPositionRealUnit(address(_component)).toUint256();\\n\\n        // Use preciseMulCeil to increase lower bound and maintain over-collateralization\\n        uint256 minCollaterizationBalance = _finalSetSupply.preciseMulCeil(defaultPositionUnit);\\n        if (newComponentBalance < minCollaterizationBalance) {\\n            revert IssuanceValidation__Undercollateralization(address(this), newComponentBalance, minCollaterizationBalance);\\n        }\\n    }\\n}\"\r\n    },\r\n    \"contracts/protocol/lib/ModuleBase.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport { AddressArrayUtils } from \\\"../../lib/AddressArrayUtils.sol\\\";\\nimport { ExplicitERC20 } from \\\"../../lib/ExplicitERC20.sol\\\";\\nimport { IController } from \\\"../../interfaces/IController.sol\\\";\\nimport { IModule } from \\\"../../interfaces/IModule.sol\\\";\\nimport { ISetToken } from \\\"../../interfaces/ISetToken.sol\\\";\\nimport { Invoke } from \\\"./Invoke.sol\\\";\\nimport { Position } from \\\"./Position.sol\\\";\\nimport { PreciseUnitMath } from \\\"../../lib/PreciseUnitMath.sol\\\";\\nimport { ResourceIdentifier } from \\\"./ResourceIdentifier.sol\\\";\\n\\n/**\\n * @title ModuleBase\\n * @author Set Protocol\\n *\\n * Abstract class that houses common Module-related state and functions.\\n *\\n * CHANGELOG\\n * - 4/21/21: Delegated modifier logic to internal helpers to reduce contract size\\n * - 4/21/23: Removed OZ SafeMath utils\\n * - 9/18/23: Upgrade to Solidity 0.8.21\\n * - 9/26/23: Added custom errors\\n */\\nabstract contract ModuleBase is IModule {\\n    using AddressArrayUtils for address[];\\n    using Invoke for ISetToken;\\n    using Position for ISetToken;\\n    using PreciseUnitMath for uint256;\\n    using ResourceIdentifier for IController;\\n\\n    /* ============ State Variables ============ */\\n\\n    // Address of the Controller\\n    IController public controller;\\n\\n    /* ============ Modifiers ============ */\\n\\n    modifier onlyManagerAndValidSet(ISetToken _setToken) {\\n        _validateOnlyManagerAndValidSet(_setToken);\\n        _;\\n    }\\n\\n    modifier onlySetManager(ISetToken _setToken, address _caller) {\\n        _validateOnlySetManager(_setToken, _caller);\\n        _;\\n    }\\n\\n    modifier onlyValidAndInitializedSet(ISetToken _setToken) {\\n        _validateOnlyValidAndInitializedSet(_setToken);\\n        _;\\n    }\\n\\n    /**\\n     * Throws if the sender is not a SetToken's module or module not enabled\\n     */\\n    modifier onlyModule(ISetToken _setToken) {\\n        _validateOnlyModule(_setToken);\\n        _;\\n    }\\n\\n    /**\\n     * Utilized during module initializations to check that the module is in pending state\\n     * and that the SetToken is valid\\n     */\\n    modifier onlyValidAndPendingSet(ISetToken _setToken) {\\n        _validateOnlyValidAndPendingSet(_setToken);\\n        _;\\n    }\\n\\n    /* ============ Constructor ============ */\\n\\n    /**\\n     * Set state variables and map asset pairs to their oracles\\n     *\\n     * @param _controller             Address of Controller contract\\n     */\\n    constructor(IController _controller) {\\n        controller = _controller;\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    /**\\n     * Transfers tokens from an address (that has set allowance on the module).\\n     *\\n     * @param  _token          The address of the ERC20 token\\n     * @param  _from           The address to transfer from\\n     * @param  _to             The address to transfer to\\n     * @param  _quantity       The number of tokens to transfer\\n     */\\n    function transferFrom(IERC20 _token, address _from, address _to, uint256 _quantity) internal {\\n        ExplicitERC20.transferFrom(_token, _from, _to, _quantity);\\n    }\\n\\n    /**\\n     * Gets the integration for the module with the passed in name. Validates that the address is not empty\\n     */\\n    function getAndValidateAdapter(string memory _integrationName) internal view returns(address) { \\n        bytes32 integrationHash = getNameHash(_integrationName);\\n        return getAndValidateAdapterWithHash(integrationHash);\\n    }\\n\\n    /**\\n     * Gets the integration for the module with the passed in hash. Validates that the address is not empty\\n     */\\n    function getAndValidateAdapterWithHash(bytes32 _integrationHash) internal view returns(address) { \\n        address adapter = controller.getIntegrationRegistry().getIntegrationAdapterWithHash(\\n            address(this),\\n            _integrationHash\\n        );\\n\\n        if (adapter == address(0)) revert Module__AdapterInvalid(address(this), _integrationHash);\\n        return adapter;\\n    }\\n\\n    /**\\n     * Gets the total fee for this module of the passed in index (fee % * quantity)\\n     */\\n    function getModuleFee(uint256 _feeIndex, uint256 _quantity) internal view returns(uint256) {\\n        uint256 feePercentage = controller.getModuleFee(address(this), _feeIndex);\\n        return _quantity.preciseMul(feePercentage);\\n    }\\n\\n    /**\\n     * Pays the _feeQuantity from the _setToken denominated in _token to the protocol fee recipient\\n     */\\n    function payProtocolFeeFromSetToken(ISetToken _setToken, address _token, uint256 _feeQuantity) internal {\\n        if (_feeQuantity > 0) {\\n            _setToken.strictInvokeTransfer(_token, controller.feeRecipient(), _feeQuantity); \\n        }\\n    }\\n\\n    /**\\n     * Returns true if the module is in process of initialization on the SetToken\\n     */\\n    function isSetPendingInitialization(ISetToken _setToken) internal view returns(bool) {\\n        return _setToken.isPendingModule(address(this));\\n    }\\n\\n    /**\\n     * Returns true if the address is the SetToken's manager\\n     */\\n    function isSetManager(ISetToken _setToken, address _toCheck) internal view returns(bool) {\\n        return _setToken.manager() == _toCheck;\\n    }\\n\\n    /**\\n     * Returns true if SetToken must be enabled on the controller \\n     * and module is registered on the SetToken\\n     */\\n    function isSetValidAndInitialized(ISetToken _setToken) internal view returns(bool) {\\n        return controller.isSet(address(_setToken)) &&\\n            _setToken.isInitializedModule(address(this));\\n    }\\n\\n    /**\\n     * Hashes the string and returns a bytes32 value\\n     */\\n    function getNameHash(string memory _name) internal pure returns(bytes32) {\\n        return keccak256(bytes(_name));\\n    }\\n\\n    /* ============== Modifier Helpers ===============\\n     * Internal functions used to reduce bytecode size\\n     */\\n\\n    /**\\n     * Caller must SetToken manager and SetToken must be valid and initialized\\n     */\\n    function _validateOnlyManagerAndValidSet(ISetToken _setToken) internal view {\\n       if (!isSetManager(_setToken, msg.sender)) revert Module__CallerNotManager(address(this), msg.sender, address(_setToken));\\n       if (!isSetValidAndInitialized(_setToken)) revert Module__SetTokenInvalidAndUninitialized(address(this), address(_setToken));\\n    }\\n\\n    /**\\n     * Caller must SetToken manager\\n     */\\n    function _validateOnlySetManager(ISetToken _setToken, address _caller) internal view {\\n       if (!isSetManager(_setToken, _caller)) revert Module__CallerNotManager(address(this), _caller, address(_setToken));\\n    }\\n\\n    /**\\n     * SetToken must be valid and initialized\\n     */\\n    function _validateOnlyValidAndInitializedSet(ISetToken _setToken) internal view {\\n        if (!isSetValidAndInitialized(_setToken)) revert Module__SetTokenInvalidAndUninitialized(address(this), address(_setToken));\\n    }\\n\\n    /**\\n     * Caller must be initialized module and module must be enabled on the controller\\n     */\\n    function _validateOnlyModule(ISetToken _setToken) internal view {\\n        if (_setToken.moduleStates(msg.sender) != ISetToken.ModuleState.INITIALIZED)\\n            revert Module__CallerNotInitializedModule(address(this), msg.sender);\\n\\n        if (!controller.isModule(msg.sender))\\n            revert Module__ModuleInvalid(address(this), msg.sender);\\n    }\\n\\n    /**\\n     * SetToken must be in a pending state and module must be in pending state\\n     */\\n    function _validateOnlyValidAndPendingSet(ISetToken _setToken) internal view {\\n        if (!controller.isSet(address(_setToken))) revert Module__SetTokenInvalid(address(this), address(_setToken));\\n        if (!isSetPendingInitialization(_setToken)) revert Module__SetTokenNotPending(address(this), address(_setToken));\\n    }\\n}\"\r\n    },\r\n    \"contracts/protocol/lib/ModuleBaseV2.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2022 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport { AddressArrayUtils } from \\\"../../lib/AddressArrayUtils.sol\\\";\\nimport { ExplicitERC20 } from \\\"../../lib/ExplicitERC20.sol\\\";\\nimport { IController } from \\\"../../interfaces/IController.sol\\\";\\nimport { IModule } from \\\"../../interfaces/IModule.sol\\\";\\nimport { ISetToken } from \\\"../../interfaces/ISetToken.sol\\\";\\nimport { Invoke } from \\\"./Invoke.sol\\\";\\nimport { PositionV2 } from \\\"./PositionV2.sol\\\";\\nimport { PreciseUnitMath } from \\\"../../lib/PreciseUnitMath.sol\\\";\\nimport { ResourceIdentifier } from \\\"./ResourceIdentifier.sol\\\";\\n\\n/**\\n * @title ModuleBaseV2\\n * @author Set Protocol\\n *\\n * Abstract class that houses common Module-related state and functions.\\n *\\n * CHANGELOG\\n * - Uses PositionV2 linkable library.\\n * - 4/21/23: Removed OZ SafeMath utils\\n * - 9/18/23: Upgrade to Solidity 0.8.21\\n * - 9/26/23: Added custom errors\\n */\\nabstract contract ModuleBaseV2 is IModule {\\n    using AddressArrayUtils for address[];\\n    using Invoke for ISetToken;\\n    using PositionV2 for ISetToken;\\n    using PreciseUnitMath for uint256;\\n    using ResourceIdentifier for IController;\\n\\n    /* ============ State Variables ============ */\\n\\n    // Address of the Controller\\n    IController public controller;\\n\\n    /* ============ Modifiers ============ */\\n\\n    modifier onlyManagerAndValidSet(ISetToken _setToken) {\\n        _validateOnlyManagerAndValidSet(_setToken);\\n        _;\\n    }\\n\\n    modifier onlySetManager(ISetToken _setToken, address _caller) {\\n        _validateOnlySetManager(_setToken, _caller);\\n        _;\\n    }\\n\\n    modifier onlyValidAndInitializedSet(ISetToken _setToken) {\\n        _validateOnlyValidAndInitializedSet(_setToken);\\n        _;\\n    }\\n\\n    /**\\n     * Throws if the sender is not a SetToken's module or module not enabled\\n     */\\n    modifier onlyModule(ISetToken _setToken) {\\n        _validateOnlyModule(_setToken);\\n        _;\\n    }\\n\\n    /**\\n     * Utilized during module initializations to check that the module is in pending state\\n     * and that the SetToken is valid\\n     */\\n    modifier onlyValidAndPendingSet(ISetToken _setToken) {\\n        _validateOnlyValidAndPendingSet(_setToken);\\n        _;\\n    }\\n\\n    /* ============ Constructor ============ */\\n\\n    /**\\n     * Set state variables and map asset pairs to their oracles\\n     *\\n     * @param _controller             Address of Controller contract\\n     */\\n    constructor(IController _controller) {\\n        controller = _controller;\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    /**\\n     * Transfers tokens from an address (that has set allowance on the module).\\n     *\\n     * @param  _token          The address of the ERC20 token\\n     * @param  _from           The address to transfer from\\n     * @param  _to             The address to transfer to\\n     * @param  _quantity       The number of tokens to transfer\\n     */\\n    function transferFrom(IERC20 _token, address _from, address _to, uint256 _quantity) internal {\\n        ExplicitERC20.transferFrom(_token, _from, _to, _quantity);\\n    }\\n\\n    /**\\n     * Gets the integration for the module with the passed in name. Validates that the address is not empty\\n     */\\n    function getAndValidateAdapter(string memory _integrationName) internal view returns(address) { \\n        bytes32 integrationHash = getNameHash(_integrationName);\\n        return getAndValidateAdapterWithHash(integrationHash);\\n    }\\n\\n    /**\\n     * Gets the integration for the module with the passed in hash. Validates that the address is not empty\\n     */\\n    function getAndValidateAdapterWithHash(bytes32 _integrationHash) internal view returns(address) { \\n        address adapter = controller.getIntegrationRegistry().getIntegrationAdapterWithHash(\\n            address(this),\\n            _integrationHash\\n        );\\n\\n        if (adapter == address(0)) revert Module__AdapterInvalid(address(this), _integrationHash);\\n        return adapter;\\n    }\\n\\n    /**\\n     * Gets the total fee for this module of the passed in index (fee % * quantity)\\n     */\\n    function getModuleFee(uint256 _feeIndex, uint256 _quantity) internal view returns(uint256) {\\n        uint256 feePercentage = controller.getModuleFee(address(this), _feeIndex);\\n        return _quantity.preciseMul(feePercentage);\\n    }\\n\\n    /**\\n     * Pays the _feeQuantity from the _setToken denominated in _token to the protocol fee recipient\\n     */\\n    function payProtocolFeeFromSetToken(ISetToken _setToken, address _token, uint256 _feeQuantity) internal {\\n        if (_feeQuantity > 0) {\\n            _setToken.strictInvokeTransfer(_token, controller.feeRecipient(), _feeQuantity); \\n        }\\n    }\\n\\n    /**\\n     * Returns true if the module is in process of initialization on the SetToken\\n     */\\n    function isSetPendingInitialization(ISetToken _setToken) internal view returns(bool) {\\n        return _setToken.isPendingModule(address(this));\\n    }\\n\\n    /**\\n     * Returns true if the address is the SetToken's manager\\n     */\\n    function isSetManager(ISetToken _setToken, address _toCheck) internal view returns(bool) {\\n        return _setToken.manager() == _toCheck;\\n    }\\n\\n    /**\\n     * Returns true if SetToken must be enabled on the controller \\n     * and module is registered on the SetToken\\n     */\\n    function isSetValidAndInitialized(ISetToken _setToken) internal view returns(bool) {\\n        return controller.isSet(address(_setToken)) &&\\n            _setToken.isInitializedModule(address(this));\\n    }\\n\\n    /**\\n     * Hashes the string and returns a bytes32 value\\n     */\\n    function getNameHash(string memory _name) internal pure returns(bytes32) {\\n        return keccak256(bytes(_name));\\n    }\\n\\n    /* ============== Modifier Helpers ===============\\n     * Internal functions used to reduce bytecode size\\n     */\\n\\n    /**\\n     * Caller must SetToken manager and SetToken must be valid and initialized\\n     */\\n    function _validateOnlyManagerAndValidSet(ISetToken _setToken) internal view {\\n       if (!isSetManager(_setToken, msg.sender)) revert Module__CallerNotManager(address(this), msg.sender, address(_setToken));\\n       if (!isSetValidAndInitialized(_setToken)) revert Module__SetTokenInvalidAndUninitialized(address(this), address(_setToken));\\n    }\\n\\n    /**\\n     * Caller must SetToken manager\\n     */\\n    function _validateOnlySetManager(ISetToken _setToken, address _caller) internal view {\\n       if (!isSetManager(_setToken, _caller)) revert Module__CallerNotManager(address(this), _caller, address(_setToken));\\n    }\\n\\n    /**\\n     * SetToken must be valid and initialized\\n     */\\n    function _validateOnlyValidAndInitializedSet(ISetToken _setToken) internal view {\\n        if (!isSetValidAndInitialized(_setToken)) revert Module__SetTokenInvalidAndUninitialized(address(this), address(_setToken));\\n    }\\n\\n    /**\\n     * Caller must be initialized module and module must be enabled on the controller\\n     */\\n    function _validateOnlyModule(ISetToken _setToken) internal view {\\n        if (_setToken.moduleStates(msg.sender) != ISetToken.ModuleState.INITIALIZED)\\n            revert Module__CallerNotInitializedModule(address(this), msg.sender);\\n\\n        if (!controller.isModule(msg.sender))\\n            revert Module__ModuleInvalid(address(this), msg.sender);\\n    }\\n\\n    /**\\n     * SetToken must be in a pending state and module must be in pending state\\n     */\\n    function _validateOnlyValidAndPendingSet(ISetToken _setToken) internal view {\\n        if (!controller.isSet(address(_setToken))) revert Module__SetTokenInvalid(address(this), address(_setToken));\\n        if (!isSetPendingInitialization(_setToken)) revert Module__SetTokenNotPending(address(this), address(_setToken));\\n    }\\n}\"\r\n    },\r\n    \"contracts/protocol/lib/Position.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\nimport { ISetToken } from \\\"../../interfaces/ISetToken.sol\\\";\\nimport { PreciseUnitMath } from \\\"../../lib/PreciseUnitMath.sol\\\";\\n\\n/**\\n * @title Position\\n * @author Set Protocol\\n *\\n * Collection of helper functions for handling and updating SetToken Positions\\n *\\n * CHANGELOG\\n * - Updated editExternalPosition to work when no external position is associated with module\\n * - 4/21/23: Removed OZ SafeMath utils\\n * - 9/18/23: Upgrade to Solidity 0.8.21\\n * - 9/26/23: Added custom errors\\n */\\nlibrary Position {\\n    using SafeCast for uint256;\\n    using SafeCast for int256;\\n    using PreciseUnitMath for uint256;\\n\\n    /* ============ Custom Errors ============ */\\n    \\n    /// @notice Emitted when unexpected data is passed where zero data is expected.\\n    error Position__DataNotNull(address emitter, bytes passed);\\n    /// @notice Emitted when the first module in positions isn't the expected module, \\n    ///         indicating potential unexpected external positions.\\n    error Position__UnexpectedModuleInFirstPosition(address emitter, address moduleInPosition);\\n\\n    /* ============ Helper ============ */\\n\\n    /**\\n     * Returns whether the SetToken has a default position for a given component (if the real unit is > 0)\\n     */\\n    function hasDefaultPosition(ISetToken _setToken, address _component) internal view returns(bool) {\\n        return _setToken.getDefaultPositionRealUnit(_component) > 0;\\n    }\\n\\n    /**\\n     * Returns whether the SetToken has an external position for a given component (if # of position modules is > 0)\\n     */\\n    function hasExternalPosition(ISetToken _setToken, address _component) internal view returns(bool) {\\n        return _setToken.getExternalPositionModules(_component).length > 0;\\n    }\\n    \\n    /**\\n     * Returns whether the SetToken component default position real unit is greater than or equal to units passed in.\\n     */\\n    function hasSufficientDefaultUnits(ISetToken _setToken, address _component, uint256 _unit) internal view returns(bool) {\\n        return _setToken.getDefaultPositionRealUnit(_component) >= _unit.toInt256();\\n    }\\n\\n    /**\\n     * Returns whether the SetToken component external position is greater than or equal to the real units passed in.\\n     */\\n    function hasSufficientExternalUnits(\\n        ISetToken _setToken,\\n        address _component,\\n        address _positionModule,\\n        uint256 _unit\\n    )\\n        internal\\n        view\\n        returns(bool)\\n    {\\n       return _setToken.getExternalPositionRealUnit(_component, _positionModule) >= _unit.toInt256();    \\n    }\\n\\n    /**\\n     * If the position does not exist, create a new Position and add to the SetToken. If it already exists,\\n     * then set the position units. If the new units is 0, remove the position. Handles adding/removing of \\n     * components where needed (in light of potential external positions).\\n     *\\n     * @param _setToken           Address of SetToken being modified\\n     * @param _component          Address of the component\\n     * @param _newUnit            Quantity of Position units - must be >= 0\\n     */\\n    function editDefaultPosition(ISetToken _setToken, address _component, uint256 _newUnit) internal {\\n        bool isPositionFound = hasDefaultPosition(_setToken, _component);\\n        if (!isPositionFound && _newUnit > 0) {\\n            // If there is no Default Position and no External Modules, then component does not exist\\n            if (!hasExternalPosition(_setToken, _component)) {\\n                _setToken.addComponent(_component);\\n            }\\n        } else if (isPositionFound && _newUnit == 0) {\\n            // If there is a Default Position and no external positions, remove the component\\n            if (!hasExternalPosition(_setToken, _component)) {\\n                _setToken.removeComponent(_component);\\n            }\\n        }\\n\\n        _setToken.editDefaultPositionUnit(_component, _newUnit.toInt256());\\n    }\\n\\n    /**\\n     * Update an external position and remove and external positions or components if necessary. The logic flows as follows:\\n     * 1) If component is not already added then add component and external position. \\n     * 2) If component is added but no existing external position using the passed module exists then add the external position.\\n     * 3) If the existing position is being added to then just update the unit and data\\n     * 4) If the position is being closed and no other external positions or default positions are associated with the component\\n     *    then untrack the component and remove external position.\\n     * 5) If the position is being closed and other existing positions still exist for the component then just remove the\\n     *    external position.\\n     *\\n     * @param _setToken         SetToken being updated\\n     * @param _component        Component position being updated\\n     * @param _module           Module external position is associated with\\n     * @param _newUnit          Position units of new external position\\n     * @param _data             Arbitrary data associated with the position\\n     */\\n    function editExternalPosition(\\n        ISetToken _setToken,\\n        address _component,\\n        address _module,\\n        int256 _newUnit,\\n        bytes memory _data\\n    )\\n        internal\\n    {\\n        if (_newUnit != 0) {\\n            if (!_setToken.isComponent(_component)) {\\n                _setToken.addComponent(_component);\\n                _setToken.addExternalPositionModule(_component, _module);\\n            } else if (!_setToken.isExternalPositionModule(_component, _module)) {\\n                _setToken.addExternalPositionModule(_component, _module);\\n            }\\n            _setToken.editExternalPositionUnit(_component, _module, _newUnit);\\n            _setToken.editExternalPositionData(_component, _module, _data);\\n        } else {\\n            if (_data.length != 0) revert Position__DataNotNull(address(this), _data);\\n            // If no default or external position remaining then remove component from components array\\n            if (_setToken.getExternalPositionRealUnit(_component, _module) != 0) {\\n                address[] memory positionModules = _setToken.getExternalPositionModules(_component);\\n                if (_setToken.getDefaultPositionRealUnit(_component) == 0 && positionModules.length == 1) {\\n                    if (positionModules[0] != _module) revert Position__UnexpectedModuleInFirstPosition(address(this), positionModules[0]);\\n                    _setToken.removeComponent(_component);\\n                }\\n                _setToken.removeExternalPositionModule(_component, _module);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Get total notional amount of Default position\\n     *\\n     * @param _setTokenSupply     Supply of SetToken in precise units (10^18)\\n     * @param _positionUnit       Quantity of Position units\\n     *\\n     * @return                    Total notional amount of units\\n     */\\n    function getDefaultTotalNotional(uint256 _setTokenSupply, uint256 _positionUnit) internal pure returns (uint256) {\\n        return _setTokenSupply.preciseMul(_positionUnit);\\n    }\\n\\n    /**\\n     * Get position unit from total notional amount\\n     *\\n     * @param _setTokenSupply     Supply of SetToken in precise units (10^18)\\n     * @param _totalNotional      Total notional amount of component prior to\\n     * @return                    Default position unit\\n     */\\n    function getDefaultPositionUnit(uint256 _setTokenSupply, uint256 _totalNotional) internal pure returns (uint256) {\\n        return _totalNotional.preciseDiv(_setTokenSupply);\\n    }\\n\\n    /**\\n     * Get the total tracked balance - total supply * position unit\\n     *\\n     * @param _setToken           Address of the SetToken\\n     * @param _component          Address of the component\\n     * @return                    Notional tracked balance\\n     */\\n    function getDefaultTrackedBalance(ISetToken _setToken, address _component) internal view returns(uint256) {\\n        int256 positionUnit = _setToken.getDefaultPositionRealUnit(_component); \\n        return _setToken.totalSupply().preciseMul(positionUnit.toUint256());\\n    }\\n\\n    /**\\n     * Calculates the new default position unit and performs the edit with the new unit\\n     *\\n     * @param _setToken                 Address of the SetToken\\n     * @param _component                Address of the component\\n     * @param _setTotalSupply           Current SetToken supply\\n     * @param _componentPreviousBalance Pre-action component balance\\n     * @return                          Current component balance\\n     * @return                          Previous position unit\\n     * @return                          New position unit\\n     */\\n    function calculateAndEditDefaultPosition(\\n        ISetToken _setToken,\\n        address _component,\\n        uint256 _setTotalSupply,\\n        uint256 _componentPreviousBalance\\n    )\\n        internal\\n        returns(uint256, uint256, uint256)\\n    {\\n        uint256 currentBalance = IERC20(_component).balanceOf(address(_setToken));\\n        uint256 positionUnit = _setToken.getDefaultPositionRealUnit(_component).toUint256();\\n\\n        uint256 newTokenUnit;\\n        if (currentBalance > 0) {\\n            newTokenUnit = calculateDefaultEditPositionUnit(\\n                _setTotalSupply,\\n                _componentPreviousBalance,\\n                currentBalance,\\n                positionUnit\\n            );\\n        }\\n\\n        editDefaultPosition(_setToken, _component, newTokenUnit);\\n\\n        return (currentBalance, positionUnit, newTokenUnit);\\n    }\\n\\n    /**\\n     * Calculate the new position unit given total notional values pre and post executing an action that changes SetToken state\\n     * The intention is to make updates to the units without accidentally picking up airdropped assets as well.\\n     *\\n     * @param _setTokenSupply     Supply of SetToken in precise units (10^18)\\n     * @param _preTotalNotional   Total notional amount of component prior to executing action\\n     * @param _postTotalNotional  Total notional amount of component after the executing action\\n     * @param _prePositionUnit    Position unit of SetToken prior to executing action\\n     * @return                    New position unit\\n     */\\n    function calculateDefaultEditPositionUnit(\\n        uint256 _setTokenSupply,\\n        uint256 _preTotalNotional,\\n        uint256 _postTotalNotional,\\n        uint256 _prePositionUnit\\n    )\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        // If pre action total notional amount is greater then subtract post action total notional and calculate new position units\\n        uint256 airdroppedAmount = _preTotalNotional - _prePositionUnit.preciseMul(_setTokenSupply);\\n        return (_postTotalNotional - airdroppedAmount).preciseDiv(_setTokenSupply);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/protocol/lib/PositionV2.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2022 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\nimport { ISetToken } from \\\"../../interfaces/ISetToken.sol\\\";\\nimport { PreciseUnitMath } from \\\"../../lib/PreciseUnitMath.sol\\\";\\n\\n/**\\n * @title PositionV2\\n * @author Set Protocol\\n *\\n * Collection of helper functions for handling and updating SetToken Positions.\\n *\\n * CHANGELOG\\n * - `Position` library has all internal functions which are inlined to the module contract during compilation.\\n * Inlining functions increases bytecode size of the module contract. This library contains the same functions\\n * as `Position` library but all the functions have public/external access modifier. Thus, making this version\\n * linkable which helps in reducing bytecode size of the module contract.\\n * - 4/21/23: Removed OZ SafeMath utils\\n * - 9/18/23: Upgrade to Solidity 0.8.21\\n * - 9/26/23: Added custom errors\\n */\\nlibrary PositionV2 {\\n    using SafeCast for uint256;\\n    using SafeCast for int256;\\n    using PreciseUnitMath for uint256;\\n\\n    /* ============ Custom Errors ============ */\\n\\n    /// @notice Emitted when unexpected data is passed where zero data is expected.\\n    error PositionV2__DataNotNull(address emitter, bytes passed);\\n    /// @notice Emitted when the first module in positions isn't the expected module, \\n    ///         indicating potential unexpected external positions.\\n    error PositionV2__UnexpectedModuleInFirstPosition(address emitter, address moduleInPosition);\\n\\n    /* ============ Helper ============ */\\n\\n    /**\\n     * Returns whether the SetToken has a default position for a given component (if the real unit is > 0)\\n     */\\n    function hasDefaultPosition(ISetToken _setToken, address _component) public view returns(bool) {\\n        return _setToken.getDefaultPositionRealUnit(_component) > 0;\\n    }\\n\\n    /**\\n     * Returns whether the SetToken has an external position for a given component (if # of position modules is > 0)\\n     */\\n    function hasExternalPosition(ISetToken _setToken, address _component) public view returns(bool) {\\n        return _setToken.getExternalPositionModules(_component).length > 0;\\n    }\\n\\n    /**\\n     * Returns whether the SetToken component default position real unit is greater than or equal to units passed in.\\n     */\\n    function hasSufficientDefaultUnits(ISetToken _setToken, address _component, uint256 _unit) external view returns(bool) {\\n        return _setToken.getDefaultPositionRealUnit(_component) >= _unit.toInt256();\\n    }\\n\\n    /**\\n     * Returns whether the SetToken component's external position is greater than or equal to the real units passed in.\\n     */\\n    function hasSufficientExternalUnits(\\n        ISetToken _setToken,\\n        address _component,\\n        address _positionModule,\\n        uint256 _unit\\n    )\\n        external\\n        view\\n        returns(bool)\\n    {\\n       return _setToken.getExternalPositionRealUnit(_component, _positionModule) >= _unit.toInt256();\\n    }\\n\\n    /**\\n     * If the position does not exist, create a new Position and add to the SetToken. If it already exists,\\n     * then set the position units. If the new units is 0, remove the position. Handles adding/removing of\\n     * components where needed (in light of potential external positions).\\n     *\\n     * @param _setToken           Address of SetToken being modified\\n     * @param _component          Address of the component\\n     * @param _newUnit            Quantity of Position units - must be >= 0\\n     */\\n    function editDefaultPosition(ISetToken _setToken, address _component, uint256 _newUnit) public {\\n        bool isPositionFound = hasDefaultPosition(_setToken, _component);\\n        if (!isPositionFound && _newUnit > 0) {\\n            // If there is no Default Position and no External Modules, then component does not exist\\n            if (!hasExternalPosition(_setToken, _component)) {\\n                _setToken.addComponent(_component);\\n            }\\n        } else if (isPositionFound && _newUnit == 0) {\\n            // If there is a Default Position and no external positions, remove the component\\n            if (!hasExternalPosition(_setToken, _component)) {\\n                _setToken.removeComponent(_component);\\n            }\\n        }\\n\\n        _setToken.editDefaultPositionUnit(_component, _newUnit.toInt256());\\n    }\\n\\n    /**\\n     * Update an external position and remove and external positions or components if necessary. The logic flows as follows:\\n     * 1) If component is not already added then add component and external position.\\n     * 2) If component is added but no existing external position using the passed module exists then add the external position.\\n     * 3) If the existing position is being added to then just update the unit and data\\n     * 4) If the position is being closed and no other external positions or default positions are associated with the component\\n     *    then untrack the component and remove external position.\\n     * 5) If the position is being closed and other existing positions still exist for the component then just remove the\\n     *    external position.\\n     *\\n     * @param _setToken         SetToken being updated\\n     * @param _component        Component position being updated\\n     * @param _module           Module external position is associated with\\n     * @param _newUnit          Position units of new external position\\n     * @param _data             Arbitrary data associated with the position\\n     */\\n    function editExternalPosition(\\n        ISetToken _setToken,\\n        address _component,\\n        address _module,\\n        int256 _newUnit,\\n        bytes memory _data\\n    )\\n        external\\n    {\\n        if (_newUnit != 0) {\\n            if (!_setToken.isComponent(_component)) {\\n                _setToken.addComponent(_component);\\n                _setToken.addExternalPositionModule(_component, _module);\\n            } else if (!_setToken.isExternalPositionModule(_component, _module)) {\\n                _setToken.addExternalPositionModule(_component, _module);\\n            }\\n            _setToken.editExternalPositionUnit(_component, _module, _newUnit);\\n            _setToken.editExternalPositionData(_component, _module, _data);\\n        } else {\\n            if (_data.length != 0) revert PositionV2__DataNotNull(address(this), _data);\\n            // If no default or external position remaining then remove component from components array\\n            if (_setToken.getExternalPositionRealUnit(_component, _module) != 0) {\\n                address[] memory positionModules = _setToken.getExternalPositionModules(_component);\\n                if (_setToken.getDefaultPositionRealUnit(_component) == 0 && positionModules.length == 1) {\\n                    if (positionModules[0] != _module) revert PositionV2__UnexpectedModuleInFirstPosition(address(this), positionModules[0]);\\n                    _setToken.removeComponent(_component);\\n                }\\n                _setToken.removeExternalPositionModule(_component, _module);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Get total notional amount of Default position\\n     *\\n     * @param _setTokenSupply     Supply of SetToken in precise units (10^18)\\n     * @param _positionUnit       Quantity of Position units\\n     *\\n     * @return                    Total notional amount of units\\n     */\\n    function getDefaultTotalNotional(uint256 _setTokenSupply, uint256 _positionUnit) external pure returns (uint256) {\\n        return _setTokenSupply.preciseMul(_positionUnit);\\n    }\\n\\n    /**\\n     * Get position unit from total notional amount\\n     *\\n     * @param _setTokenSupply     Supply of SetToken in precise units (10^18)\\n     * @param _totalNotional      Total notional amount of component prior to\\n     * @return                    Default position unit\\n     */\\n    function getDefaultPositionUnit(uint256 _setTokenSupply, uint256 _totalNotional) external pure returns (uint256) {\\n        return _totalNotional.preciseDiv(_setTokenSupply);\\n    }\\n\\n    /**\\n     * Get the total tracked balance - total supply * position unit\\n     *\\n     * @param _setToken           Address of the SetToken\\n     * @param _component          Address of the component\\n     * @return                    Notional tracked balance\\n     */\\n    function getDefaultTrackedBalance(ISetToken _setToken, address _component) external view returns(uint256) {\\n        int256 positionUnit = _setToken.getDefaultPositionRealUnit(_component);\\n        return _setToken.totalSupply().preciseMul(positionUnit.toUint256());\\n    }\\n\\n    /**\\n     * Calculates the new default position unit and performs the edit with the new unit\\n     *\\n     * @param _setToken                 Address of the SetToken\\n     * @param _component                Address of the component\\n     * @param _setTotalSupply           Current SetToken supply\\n     * @param _componentPreviousBalance Pre-action component balance\\n     * @return                          Current component balance\\n     * @return                          Previous position unit\\n     * @return                          New position unit\\n     */\\n    function calculateAndEditDefaultPosition(\\n        ISetToken _setToken,\\n        address _component,\\n        uint256 _setTotalSupply,\\n        uint256 _componentPreviousBalance\\n    )\\n        external\\n        returns(uint256, uint256, uint256)\\n    {\\n        uint256 currentBalance = IERC20(_component).balanceOf(address(_setToken));\\n        uint256 positionUnit = _setToken.getDefaultPositionRealUnit(_component).toUint256();\\n\\n        uint256 newTokenUnit;\\n        if (currentBalance > 0) {\\n            newTokenUnit = calculateDefaultEditPositionUnit(\\n                _setTotalSupply,\\n                _componentPreviousBalance,\\n                currentBalance,\\n                positionUnit\\n            );\\n        }\\n\\n        editDefaultPosition(_setToken, _component, newTokenUnit);\\n\\n        return (currentBalance, positionUnit, newTokenUnit);\\n    }\\n\\n    /**\\n     * Calculate the new position unit given total notional values pre and post executing an action that changes SetToken state\\n     * The intention is to make updates to the units without accidentally picking up airdropped assets as well.\\n     *\\n     * @param _setTokenSupply     Supply of SetToken in precise units (10^18)\\n     * @param _preTotalNotional   Total notional amount of component prior to executing action\\n     * @param _postTotalNotional  Total notional amount of component after the executing action\\n     * @param _prePositionUnit    Position unit of SetToken prior to executing action\\n     * @return                    New position unit\\n     */\\n    function calculateDefaultEditPositionUnit(\\n        uint256 _setTokenSupply,\\n        uint256 _preTotalNotional,\\n        uint256 _postTotalNotional,\\n        uint256 _prePositionUnit\\n    )\\n        public\\n        pure\\n        returns (uint256)\\n    {\\n        // If pre action total notional amount is greater then subtract post action total notional and calculate new position units\\n        uint256 airdroppedAmount = _preTotalNotional - (_prePositionUnit.preciseMul(_setTokenSupply));\\n        return (_postTotalNotional - (airdroppedAmount)).preciseDiv(_setTokenSupply);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/protocol/lib/ResourceIdentifier.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { IController } from \\\"../../interfaces/IController.sol\\\";\\nimport { IIntegrationRegistry } from \\\"../../interfaces/IIntegrationRegistry.sol\\\";\\nimport { IPriceOracle } from \\\"../../interfaces/IPriceOracle.sol\\\";\\nimport { ISetValuer } from \\\"../../interfaces/ISetValuer.sol\\\";\\n\\n/**\\n * @title ResourceIdentifier\\n * @author Set Protocol\\n *\\n * A collection of utility functions to fetch information related to Resource contracts in the system\\n *\\n * CHANGELOG\\n * - 9/18/23: Upgrade to Solidity 0.8.21\\n */\\nlibrary ResourceIdentifier {\\n\\n    // IntegrationRegistry will always be resource ID 0 in the system\\n    uint256 constant internal INTEGRATION_REGISTRY_RESOURCE_ID = 0;\\n    // PriceOracle will always be resource ID 1 in the system\\n    uint256 constant internal PRICE_ORACLE_RESOURCE_ID = 1;\\n    // SetValuer resource will always be resource ID 2 in the system\\n    uint256 constant internal SET_VALUER_RESOURCE_ID = 2;\\n\\n    /* ============ Internal ============ */\\n\\n    /**\\n     * Gets the instance of integration registry stored on Controller. Note: IntegrationRegistry is stored as index 0 on\\n     * the Controller\\n     */\\n    function getIntegrationRegistry(IController _controller) internal view returns (IIntegrationRegistry) {\\n        return IIntegrationRegistry(_controller.resourceId(INTEGRATION_REGISTRY_RESOURCE_ID));\\n    }\\n\\n    /**\\n     * Gets instance of price oracle on Controller. Note: PriceOracle is stored as index 1 on the Controller\\n     */\\n    function getPriceOracle(IController _controller) internal view returns (IPriceOracle) {\\n        return IPriceOracle(_controller.resourceId(PRICE_ORACLE_RESOURCE_ID));\\n    }\\n\\n    /**\\n     * Gets the instance of Set valuer on Controller. Note: SetValuer is stored as index 2 on the Controller\\n     */\\n    function getSetValuer(IController _controller) internal view returns (ISetValuer) {\\n        return ISetValuer(_controller.resourceId(SET_VALUER_RESOURCE_ID));\\n    }\\n}\"\r\n    },\r\n    \"contracts/protocol/modules/v1/AaveLeverageModule.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2021 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { Ownable2Step } from \\\"@openzeppelin/contracts/access/Ownable2Step.sol\\\";\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport { Math } from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\nimport { AaveV2 } from \\\"../../integration/lib/AaveV2.sol\\\";\\nimport { IAToken } from \\\"../../../interfaces/external/aave-v2/IAToken.sol\\\";\\nimport { IAaveLeverageModule } from \\\"../../../interfaces/IAaveLeverageModule.sol\\\";\\nimport { IController } from \\\"../../../interfaces/IController.sol\\\";\\nimport { IDebtIssuanceModule } from \\\"../../../interfaces/IDebtIssuanceModule.sol\\\";\\nimport { IExchangeAdapter } from \\\"../../../interfaces/IExchangeAdapter.sol\\\";\\nimport { ILendingPool } from \\\"../../../interfaces/external/aave-v2/ILendingPool.sol\\\";\\nimport { ILendingPoolAddressesProvider } from \\\"../../../interfaces/external/aave-v2/ILendingPoolAddressesProvider.sol\\\";\\nimport { IModuleIssuanceHook } from \\\"../../../interfaces/IModuleIssuanceHook.sol\\\";\\nimport { IProtocolDataProvider } from \\\"../../../interfaces/external/aave-v2/IProtocolDataProvider.sol\\\";\\nimport { ISetToken } from \\\"../../../interfaces/ISetToken.sol\\\";\\nimport { IVariableDebtToken } from \\\"../../../interfaces/external/aave-v2/IVariableDebtToken.sol\\\";\\n\\nimport { ModuleBaseV2 } from \\\"../../lib/ModuleBaseV2.sol\\\";\\nimport { PreciseUnitMath } from \\\"../../../lib/PreciseUnitMath.sol\\\";\\nimport { AddressArrayUtils } from \\\"../../../lib/AddressArrayUtils.sol\\\";\\nimport { Invoke } from \\\"../../../protocol/lib/Invoke.sol\\\";\\nimport { Position } from \\\"../../../protocol/lib/Position.sol\\\";\\n\\n/**\\n * @title AaveLeverageModule\\n * @author Set Protocol\\n * @notice Smart contract that enables leverage trading using Aave as the lending protocol.\\n * @dev Do not use this module in conjunction with other debt modules that allow Aave debt positions as it could lead to double counting of\\n * debt when borrowed assets are the same.\\n *\\n * CHANGELOG\\n * - 11/16/22: Add 1Inch integration to rebalance logic\\n * - 4/21/23: Removed OZ SafeMath utils\\n * - 9/13/23: Switch from Ownable to Ownable2Step\\n * - 9/18/23: Upgrade to Solidity 0.8.21\\n * - 9/26/23: Added custom errors\\n */\\ncontract AaveLeverageModule is ReentrancyGuard, ModuleBaseV2, Ownable2Step, IAaveLeverageModule, IModuleIssuanceHook {\\n    using AaveV2 for ISetToken;\\n    using SafeCast for uint256;\\n    using SafeCast for int256;\\n    using PreciseUnitMath for uint256;\\n    using AddressArrayUtils for address[];\\n    using Invoke for ISetToken;\\n    using Position for ISetToken;\\n\\n    /* ============ Structs ============ */\\n\\n    struct ActionInfo {\\n        ISetToken setToken;                      // SetToken instance\\n        ILendingPool lendingPool;                // Lending pool instance, we grab this everytime since it's best practice not to store\\n        IExchangeAdapter exchangeAdapter;        // Exchange adapter instance\\n        uint256 setTotalSupply;                  // Total supply of SetToken\\n        uint256 notionalSendQuantity;            // Total notional quantity sent to exchange\\n        uint256 minNotionalReceiveQuantity;      // Min total notional received from exchange\\n        IERC20 collateralAsset;                  // Address of collateral asset\\n        IERC20 borrowAsset;                      // Address of borrow asset\\n        uint256 preTradeReceiveTokenBalance;     // Balance of pre-trade receive token balance\\n    }\\n\\n    struct EnabledAssets {\\n        address[] collateralAssets;             // Array of enabled underlying collateral assets for a SetToken\\n        address[] borrowAssets;                 // Array of enabled underlying borrow assets for a SetToken\\n    }\\n\\n    struct ReserveTokens {\\n        IAToken aToken;                         // Reserve's aToken instance\\n        IVariableDebtToken variableDebtToken;   // Reserve's variable debt token instance\\n    }\\n\\n    /* ============ Events ============ */\\n\\n    /**\\n     * @dev Emitted on lever()\\n     * @param _setToken             Instance of the SetToken being levered\\n     * @param _borrowAsset          Asset being borrowed for leverage\\n     * @param _collateralAsset      Collateral asset being levered\\n     * @param _exchangeAdapter      Exchange adapter used for trading\\n     * @param _totalBorrowAmount    Total amount of `_borrowAsset` borrowed\\n     * @param _totalReceiveAmount   Total amount of `_collateralAsset` received by selling `_borrowAsset`\\n     * @param _protocolFee          Protocol fee charged\\n     */\\n    event LeverageIncreased(\\n        ISetToken indexed _setToken,\\n        IERC20 indexed _borrowAsset,\\n        IERC20 indexed _collateralAsset,\\n        IExchangeAdapter _exchangeAdapter,\\n        uint256 _totalBorrowAmount,\\n        uint256 _totalReceiveAmount,\\n        uint256 _protocolFee\\n    );\\n\\n    /**\\n     * @dev Emitted on delever() and deleverToZeroBorrowBalance()\\n     * @param _setToken             Instance of the SetToken being delevered\\n     * @param _collateralAsset      Asset sold to decrease leverage\\n     * @param _repayAsset           Asset being bought to repay to Aave\\n     * @param _exchangeAdapter      Exchange adapter used for trading\\n     * @param _totalRedeemAmount    Total amount of `_collateralAsset` being sold\\n     * @param _totalRepayAmount     Total amount of `_repayAsset` being repaid\\n     * @param _protocolFee          Protocol fee charged\\n     */\\n    event LeverageDecreased(\\n        ISetToken indexed _setToken,\\n        IERC20 indexed _collateralAsset,\\n        IERC20 indexed _repayAsset,\\n        IExchangeAdapter _exchangeAdapter,\\n        uint256 _totalRedeemAmount,\\n        uint256 _totalRepayAmount,\\n        uint256 _protocolFee\\n    );\\n\\n    /**\\n     * @dev Emitted on addCollateralAssets() and removeCollateralAssets()\\n     * @param _setToken Instance of SetToken whose collateral assets is updated\\n     * @param _added    true if assets are added false if removed\\n     * @param _assets   Array of collateral assets being added/removed\\n     */\\n    event CollateralAssetsUpdated(\\n        ISetToken indexed _setToken,\\n        bool indexed _added,\\n        IERC20[] _assets\\n    );\\n\\n    /**\\n     * @dev Emitted on addBorrowAssets() and removeBorrowAssets()\\n     * @param _setToken Instance of SetToken whose borrow assets is updated\\n     * @param _added    true if assets are added false if removed\\n     * @param _assets   Array of borrow assets being added/removed\\n     */\\n    event BorrowAssetsUpdated(\\n        ISetToken indexed _setToken,\\n        bool indexed _added,\\n        IERC20[] _assets\\n    );\\n\\n    /**\\n     * @dev Emitted when `underlyingToReserveTokensMappings` is updated\\n     * @param _underlying           Address of the underlying asset\\n     * @param _aToken               Updated aave reserve aToken\\n     * @param _variableDebtToken    Updated aave reserve variable debt token\\n     */\\n    event ReserveTokensUpdated(\\n        IERC20 indexed _underlying,\\n        IAToken indexed _aToken,\\n        IVariableDebtToken indexed _variableDebtToken\\n    );\\n\\n    /**\\n     * @dev Emitted on updateAllowedSetToken()\\n     * @param _setToken SetToken being whose allowance to initialize this module is being updated\\n     * @param _added    true if added false if removed\\n     */\\n    event SetTokenStatusUpdated(\\n        ISetToken indexed _setToken,\\n        bool indexed _added\\n    );\\n\\n    /**\\n     * @dev Emitted on updateAnySetAllowed()\\n     * @param _anySetAllowed    true if any set is allowed to initialize this module, false otherwise\\n     */\\n    event AnySetAllowedUpdated(\\n        bool indexed _anySetAllowed\\n    );\\n\\n    /**\\n     * @dev Emitted on updateAllowedDynamicExchangeAdapterDrift()\\n     * @param _allowedDynamicExchangeAdapterDrift   Percentage, expressed in million, of updated max drift allowed\\n     */\\n    event AllowedDynamicExchangeAdapterDriftUpdated(\\n        uint256 _allowedDynamicExchangeAdapterDrift\\n    );\\n\\n    /**\\n     * @dev Emitted on updateEmergencyRepayer()\\n     * @param _emergencyRepayer   Address of the emergency repayer\\n     */\\n    event EmergencyRepayerUpdated(\\n        address indexed _emergencyRepayer\\n    );\\n\\n    /* ============ Constants ============ */\\n\\n    // This module only supports borrowing in variable rate mode from Aave which is represented by 2\\n    uint256 constant internal BORROW_RATE_MODE = 2;\\n\\n    // String identifying the DebtIssuanceModule in the IntegrationRegistry. Note: Governance must add DefaultIssuanceModule as\\n    // the string as the integration name\\n    string constant internal DEFAULT_ISSUANCE_MODULE_NAME = \\\"DefaultIssuanceModule\\\";\\n\\n    // 0 index stores protocol fee % on the controller, charged in the _executeTrade function\\n    uint256 constant internal PROTOCOL_TRADE_FEE_INDEX = 0;\\n\\n    // Initial value of allowed input amount drift for dynamic adapter, equal to 0.01% (expressed in millions)\\n    uint256 constant internal INITIAL_ALLOWED_DYNAMIC_EXCHANGE_ADAPTER_DRIFT = 100;\\n\\n    /* ============ State Variables ============ */\\n\\n    // Propotional maximum difference between amount to swap fixed in swap data of dynamic adapter and amount calculated based on quantity units * total supply. Expressed in millions\\n    uint256 internal allowedDynamicExchangeAdapterDrift;\\n\\n    // Amount that is pending to be transferred to the emergency repayer    \\n    uint256 public emergencyRepayment;\\n\\n    // Mapping to efficiently fetch reserve token addresses. Tracking Aave reserve token addresses and updating them\\n    // upon requirement is more efficient than fetching them each time from Aave.\\n    // Note: For an underlying asset to be enabled as collateral/borrow asset on SetToken, it must be added to this mapping first.\\n    mapping(IERC20 => ReserveTokens) public underlyingToReserveTokens;\\n\\n    // Used to fetch reserves and user data from AaveV2\\n    IProtocolDataProvider public immutable PROTOCOL_DATA_PROVIDER;\\n\\n    // Used to fetch lendingPool address. This contract is immutable and its address will never change.\\n    ILendingPoolAddressesProvider public immutable LENDING_POOL_ADDRESSES_PROVIDER;\\n\\n    // Mapping to efficiently check if collateral asset is enabled in SetToken\\n    mapping(ISetToken => mapping(IERC20 => bool)) public collateralAssetEnabled;\\n\\n    // Mapping to efficiently check if a borrow asset is enabled in SetToken\\n    mapping(ISetToken => mapping(IERC20 => bool)) public borrowAssetEnabled;\\n\\n    // Internal mapping of enabled collateral and borrow tokens for syncing positions\\n    mapping(ISetToken => EnabledAssets) internal enabledAssets;\\n\\n    // Mapping of SetToken to boolean indicating if SetToken is on allow list. Updateable by governance\\n    mapping(ISetToken => bool) public allowedSetTokens;\\n\\n    // Boolean that returns if any SetToken can initialize this module. If false, then subject to allow list. Updateable by governance.\\n    bool public anySetAllowed;\\n\\n    // Address of the emergency repayer (if any)\\n    address public emergencyRepayer;\\n\\n    /* ============ Constructor ============ */\\n\\n    /**\\n     * @dev Instantiate addresses. Underlying to reserve tokens mapping is created.\\n     * @param _controller                       Address of Controller contract\\n     * @param _lendingPoolAddressesProvider     Address of Aave LendingPoolAddressProvider\\n     */\\n    constructor(\\n        IController _controller,\\n        ILendingPoolAddressesProvider _lendingPoolAddressesProvider\\n    )\\n        ModuleBaseV2(_controller)\\n    {\\n        LENDING_POOL_ADDRESSES_PROVIDER = _lendingPoolAddressesProvider;\\n        IProtocolDataProvider _protocolDataProvider = IProtocolDataProvider(\\n            // Use the raw input vs bytes32() conversion. This is to ensure the input is an uint and not a string.\\n            _lendingPoolAddressesProvider.getAddress(0x0100000000000000000000000000000000000000000000000000000000000000)\\n        );\\n        PROTOCOL_DATA_PROVIDER = _protocolDataProvider;\\n\\n        IProtocolDataProvider.TokenData[] memory reserveTokens = _protocolDataProvider.getAllReservesTokens();\\n        uint256 reserveTokensLength = reserveTokens.length;\\n        for(uint256 i; i < reserveTokensLength; ) {\\n            (address aToken, , address variableDebtToken) = _protocolDataProvider.getReserveTokensAddresses(reserveTokens[i].tokenAddress);\\n            underlyingToReserveTokens[IERC20(reserveTokens[i].tokenAddress)] = ReserveTokens(IAToken(aToken), IVariableDebtToken(variableDebtToken));\\n            unchecked { ++i; }\\n        }\\n        allowedDynamicExchangeAdapterDrift = INITIAL_ALLOWED_DYNAMIC_EXCHANGE_ADAPTER_DRIFT;\\n    }\\n\\n    /* ============ External Functions ============ */\\n\\n    /**\\n     * @dev MANAGER ONLY: Increases leverage for a given collateral position using an enabled borrow asset.\\n     * Borrows _borrowAsset from Aave. Performs a DEX trade, exchanging the _borrowAsset for _collateralAsset.\\n     * Deposits _collateralAsset to Aave and mints corresponding aToken.\\n     * Note: Both collateral and borrow assets need to be enabled, and they must not be the same asset.\\n     * @param _setToken                     Instance of the SetToken\\n     * @param _borrowAsset                  Address of underlying asset being borrowed for leverage\\n     * @param _collateralAsset              Address of underlying collateral asset\\n     * @param _borrowQuantityUnits          Borrow quantity of asset in position units\\n     * @param _minReceiveQuantityUnits      Min receive quantity of collateral asset to receive post-trade in position units\\n     * @param _tradeAdapterName             Name of trade adapter\\n     * @param _tradeData                    Arbitrary data for trade\\n     */\\n    function lever(\\n        ISetToken _setToken,\\n        IERC20 _borrowAsset,\\n        IERC20 _collateralAsset,\\n        uint256 _borrowQuantityUnits,\\n        uint256 _minReceiveQuantityUnits,\\n        string memory _tradeAdapterName,\\n        bytes memory _tradeData\\n    )\\n        external\\n        nonReentrant\\n        onlyManagerAndValidSet(_setToken)\\n    {\\n        // For levering up, send quantity is derived from borrow asset and receive quantity is derived from\\n        // collateral asset\\n        ActionInfo memory leverInfo = _createAndValidateActionInfo(\\n            _setToken,\\n            _borrowAsset,\\n            _collateralAsset,\\n            _borrowQuantityUnits,\\n            _minReceiveQuantityUnits,\\n            _tradeAdapterName,\\n            true,\\n            _tradeData\\n        );\\n\\n        _borrow(leverInfo.setToken, leverInfo.lendingPool, leverInfo.borrowAsset, leverInfo.notionalSendQuantity);\\n\\n        uint256 postTradeReceiveQuantity = _executeTrade(leverInfo, _borrowAsset, _collateralAsset, _tradeData);\\n\\n        uint256 protocolFee = _accrueProtocolFee(_setToken, _collateralAsset, postTradeReceiveQuantity);\\n\\n        uint256 postTradeCollateralQuantity = postTradeReceiveQuantity - protocolFee;\\n\\n        _deposit(leverInfo.setToken, leverInfo.lendingPool, _collateralAsset, postTradeCollateralQuantity);\\n\\n        _updateLeverPositions(leverInfo, _borrowAsset);\\n\\n        emit LeverageIncreased(\\n            _setToken,\\n            _borrowAsset,\\n            _collateralAsset,\\n            leverInfo.exchangeAdapter,\\n            leverInfo.notionalSendQuantity,\\n            postTradeCollateralQuantity,\\n            protocolFee\\n        );\\n    }\\n\\n    /**\\n     * @dev MANAGER ONLY: Decrease leverage for a given collateral position using an enabled borrow asset.\\n     * Withdraws _collateralAsset from Aave. Performs a DEX trade, exchanging the _collateralAsset for _repayAsset.\\n     * Repays _repayAsset to Aave and burns corresponding debt tokens.\\n     * Note: Both collateral and borrow assets need to be enabled, and they must not be the same asset.\\n     * @param _setToken                 Instance of the SetToken\\n     * @param _collateralAsset          Address of underlying collateral asset being withdrawn\\n     * @param _repayAsset               Address of underlying borrowed asset being repaid\\n     * @param _redeemQuantityUnits      Quantity of collateral asset to delever in position units\\n     * @param _minRepayQuantityUnits    Minimum amount of repay asset to receive post trade in position units\\n     * @param _tradeAdapterName         Name of trade adapter\\n     * @param _tradeData                Arbitrary data for trade\\n     */\\n    function delever(\\n        ISetToken _setToken,\\n        IERC20 _collateralAsset,\\n        IERC20 _repayAsset,\\n        uint256 _redeemQuantityUnits,\\n        uint256 _minRepayQuantityUnits,\\n        string memory _tradeAdapterName,\\n        bytes memory _tradeData\\n    )\\n        external\\n        nonReentrant\\n        onlyManagerAndValidSet(_setToken)\\n    {\\n        // Note: for delevering, send quantity is derived from collateral asset and receive quantity is derived from\\n        // repay asset\\n        ActionInfo memory deleverInfo = _createAndValidateActionInfo(\\n            _setToken,\\n            _collateralAsset,\\n            _repayAsset,\\n            _redeemQuantityUnits,\\n            _minRepayQuantityUnits,\\n            _tradeAdapterName,\\n            false,\\n            _tradeData\\n        );\\n\\n        _withdraw(deleverInfo.setToken, deleverInfo.lendingPool, _collateralAsset, deleverInfo.notionalSendQuantity);\\n\\n        uint256 postTradeReceiveQuantity = _executeTrade(deleverInfo, _collateralAsset, _repayAsset, _tradeData);\\n\\n        uint256 protocolFee = _accrueProtocolFee(_setToken, _repayAsset, postTradeReceiveQuantity);\\n\\n        uint256 repayQuantity = postTradeReceiveQuantity - protocolFee;\\n\\n        _repayBorrow(deleverInfo.setToken, deleverInfo.lendingPool, _repayAsset, repayQuantity);\\n\\n        _updateDeleverPositions(deleverInfo, _repayAsset);\\n\\n        emit LeverageDecreased(\\n            _setToken,\\n            _collateralAsset,\\n            _repayAsset,\\n            deleverInfo.exchangeAdapter,\\n            deleverInfo.notionalSendQuantity,\\n            repayQuantity,\\n            protocolFee\\n        );\\n    }\\n\\n    /** @dev MANAGER ONLY: Pays down the borrow asset to 0 selling off a given amount of collateral asset.\\n     * Withdraws _collateralAsset from Aave. Performs a DEX trade, exchanging the _collateralAsset for _repayAsset.\\n     * Minimum receive amount for the DEX trade is set to the current variable debt balance of the borrow asset.\\n     * Repays received _repayAsset to Aave which burns corresponding debt tokens. Any extra received borrow asset is .\\n     * updated as equity. No protocol fee is charged.\\n     * Note: Both collateral and borrow assets need to be enabled, and they must not be the same asset.\\n     * The function reverts if not enough collateral asset is redeemed to buy the required minimum amount of _repayAsset.\\n     * @param _setToken             Instance of the SetToken\\n     * @param _collateralAsset      Address of underlying collateral asset being redeemed\\n     * @param _repayAsset           Address of underlying asset being repaid\\n     * @param _redeemQuantityUnits  Quantity of collateral asset to delever in position units\\n     * @param _tradeAdapterName     Name of trade adapter\\n     * @param _tradeData            Arbitrary data for trade\\n     * @return uint256              Notional repay quantity\\n     */\\n    function deleverToZeroBorrowBalance(\\n        ISetToken _setToken,\\n        IERC20 _collateralAsset,\\n        IERC20 _repayAsset,\\n        uint256 _redeemQuantityUnits,\\n        string memory _tradeAdapterName,\\n        bytes memory _tradeData\\n    )\\n        external\\n        nonReentrant\\n        onlyManagerAndValidSet(_setToken)\\n        returns (uint256)\\n    {\\n        uint256 setTotalSupply = _setToken.totalSupply();\\n        uint256 notionalRedeemQuantity = _redeemQuantityUnits.preciseMul(setTotalSupply);\\n\\n        if (!borrowAssetEnabled[_setToken][_repayAsset]) revert AaveLeverageModule__BorrowDisabled(address(_repayAsset));\\n        uint256 notionalRepayQuantity = underlyingToReserveTokens[_repayAsset].variableDebtToken.balanceOf(address(_setToken));\\n        if (notionalRepayQuantity == 0) revert AaveLeverageModule__BorrowBalanceZero();\\n\\n        ActionInfo memory deleverInfo = _createAndValidateActionInfoNotional(\\n            _setToken,\\n            _collateralAsset,\\n            _repayAsset,\\n            notionalRedeemQuantity,\\n            notionalRepayQuantity,\\n            _tradeAdapterName,\\n            false,\\n            setTotalSupply,\\n            _tradeData\\n        );\\n\\n        \\n        _withdraw(deleverInfo.setToken, deleverInfo.lendingPool, _collateralAsset, deleverInfo.notionalSendQuantity);\\n\\n        _executeTrade(deleverInfo, _collateralAsset, _repayAsset, _tradeData);\\n\\n        _repayBorrow(deleverInfo.setToken, deleverInfo.lendingPool, _repayAsset, notionalRepayQuantity);\\n\\n        _updateDeleverPositions(deleverInfo, _repayAsset);\\n\\n        emit LeverageDecreased(\\n            _setToken,\\n            _collateralAsset,\\n            _repayAsset,\\n            deleverInfo.exchangeAdapter,\\n            deleverInfo.notionalSendQuantity,\\n            notionalRepayQuantity,\\n            0   // No protocol fee\\n        );\\n\\n        return notionalRepayQuantity;\\n    }\\n\\n    /**\\n     * @dev CALLABLE BY ANYBODY: Sync Set positions with ALL enabled Aave collateral and borrow positions.\\n     * For collateral assets, update aToken default position. For borrow assets, update external borrow position.\\n     * - Collateral assets may come out of sync when interest is accrued or a position is liquidated\\n     * - Borrow assets may come out of sync when interest is accrued or position is liquidated and borrow is repaid\\n     * Note: In Aave, both collateral and borrow interest is accrued in each block by increasing the balance of\\n     * aTokens and debtTokens for each user, and 1 aToken = 1 variableDebtToken = 1 underlying.\\n     * @param _setToken               Instance of the SetToken\\n     */\\n    function sync(ISetToken _setToken) public nonReentrant onlyValidAndInitializedSet(_setToken) {\\n        uint256 setTotalSupply = _setToken.totalSupply();\\n\\n        // Only sync positions when Set supply is not 0. Without this check, if sync is called by someone before the\\n        // first issuance, then editDefaultPosition would remove the default positions from the SetToken\\n        if (setTotalSupply > 0) {\\n            address[] memory collateralAssets = enabledAssets[_setToken].collateralAssets;\\n            uint256 collateralAssetsLength = collateralAssets.length;\\n            for(uint256 i; i < collateralAssetsLength; ) {\\n                IAToken aToken = underlyingToReserveTokens[IERC20(collateralAssets[i])].aToken;\\n\\n                uint256 previousPositionUnit = _setToken.getDefaultPositionRealUnit(address(aToken)).toUint256();\\n                uint256 newPositionUnit = _getCollateralPosition(_setToken, aToken, setTotalSupply);\\n\\n                // Note: Accounts for if position does not exist on SetToken but is tracked in enabledAssets\\n                if (previousPositionUnit != newPositionUnit) {\\n                  _updateCollateralPosition(_setToken, aToken, newPositionUnit);\\n                }\\n                unchecked { ++i; }\\n            }\\n\\n            address[] memory borrowAssets = enabledAssets[_setToken].borrowAssets;\\n            uint256 borrowAssetsLength = borrowAssets.length;\\n            for(uint256 i; i < borrowAssetsLength; ) {\\n                IERC20 borrowAsset = IERC20(borrowAssets[i]);\\n\\n                int256 previousPositionUnit = _setToken.getExternalPositionRealUnit(address(borrowAsset), address(this));\\n                int256 newPositionUnit = _getBorrowPosition(_setToken, borrowAsset, setTotalSupply);\\n\\n                // Note: Accounts for if position does not exist on SetToken but is tracked in enabledAssets\\n                if (newPositionUnit != previousPositionUnit) {\\n                    _updateBorrowPosition(_setToken, borrowAsset, newPositionUnit);\\n                }\\n                unchecked { ++i; }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev MANAGER ONLY: Initializes this module to the SetToken. Either the SetToken needs to be on the allowed list\\n     * or anySetAllowed needs to be true. Only callable by the SetToken's manager.\\n     * Note: Managers can enable collateral and borrow assets that don't exist as positions on the SetToken\\n     * @param _setToken             Instance of the SetToken to initialize\\n     * @param _collateralAssets     Underlying tokens to be enabled as collateral in the SetToken\\n     * @param _borrowAssets         Underlying tokens to be enabled as borrow in the SetToken\\n     */\\n    function initialize(\\n        ISetToken _setToken,\\n        IERC20[] memory _collateralAssets,\\n        IERC20[] memory _borrowAssets\\n    )\\n        external\\n        onlySetManager(_setToken, msg.sender)\\n        onlyValidAndPendingSet(_setToken)\\n    {\\n        if (!anySetAllowed) { \\n            if (!allowedSetTokens[_setToken]) revert AaveLeverageModule__SetTokenForbidden(address(_setToken));\\n        }\\n\\n        // Initialize module before trying register\\n        _setToken.initializeModule();\\n\\n        // Get debt issuance module registered to this module and require that it is initialized\\n        address defaultIssuanceModule = getAndValidateAdapter(DEFAULT_ISSUANCE_MODULE_NAME);\\n        if (!_setToken.isInitializedModule(defaultIssuanceModule)) revert AaveLeverageModule__IssuanceUninitialized(defaultIssuanceModule);\\n\\n        // Try if register exists on any of the modules including the debt issuance module\\n        address[] memory modules = _setToken.getModules();\\n        uint256 modulesLength = modules.length;\\n        for(uint256 i; i < modulesLength; ) {\\n            try IDebtIssuanceModule(modules[i]).registerToIssuanceModule(_setToken) { this; } catch { this; }\\n            unchecked { ++i; }\\n        }\\n\\n        // _collateralAssets and _borrowAssets arrays are validated in their respective internal functions\\n        _addCollateralAssets(_setToken, _collateralAssets);\\n        _addBorrowAssets(_setToken, _borrowAssets);\\n    }\\n\\n    /**\\n     * @dev MANAGER ONLY: Removes this module from the SetToken, via call by the SetToken. Any deposited collateral assets\\n     * are disabled to be used as collateral on Aave. Aave Settings and manager enabled assets state is deleted.\\n     * Note: Function will revert is there is any debt remaining on Aave\\n     */\\n    function removeModule() external override onlyValidAndInitializedSet(ISetToken(msg.sender)) {\\n        ISetToken setToken = ISetToken(msg.sender);\\n\\n        // Sync Aave and SetToken positions prior to any removal action\\n        sync(setToken);\\n\\n        address[] memory borrowAssets = enabledAssets[setToken].borrowAssets;\\n        uint256 borrowAssetsLength = borrowAssets.length;\\n        for(uint256 i; i < borrowAssetsLength; ) {\\n            IERC20 borrowAsset = IERC20(borrowAssets[i]);\\n            uint256 balanceOfVariableDebtToken = underlyingToReserveTokens[borrowAsset].variableDebtToken.balanceOf(address(setToken));\\n            if (balanceOfVariableDebtToken != 0) revert AaveLeverageModule__VariableDebtRemains(balanceOfVariableDebtToken);\\n\\n            delete borrowAssetEnabled[setToken][borrowAsset];\\n            unchecked { ++i; }\\n        }\\n\\n        address[] memory collateralAssets = enabledAssets[setToken].collateralAssets;\\n        uint256 collateralAssetsLength = collateralAssets.length;\\n        for(uint256 i; i < collateralAssetsLength; ) {\\n            IERC20 collateralAsset = IERC20(collateralAssets[i]);\\n            _updateUseReserveAsCollateral(setToken, collateralAsset, false);\\n\\n            delete collateralAssetEnabled[setToken][collateralAsset];\\n            unchecked { ++i; }\\n        }\\n\\n        delete enabledAssets[setToken];\\n\\n        // Try if unregister exists on any of the modules\\n        address[] memory modules = setToken.getModules();\\n        uint256 modulesLength = modules.length;\\n        for(uint256 i; i < modulesLength; ) {\\n            try IDebtIssuanceModule(modules[i]).unregisterFromIssuanceModule(setToken) { this; } catch { this; }\\n            unchecked { ++i; }\\n        }\\n    }\\n\\n    /**\\n     * @dev MANAGER ONLY: Add registration of this module on the debt issuance module for the SetToken.\\n     * Note: if the debt issuance module is not added to SetToken before this module is initialized, then this function\\n     * needs to be called if the debt issuance module is later added and initialized to prevent state inconsistencies\\n     * @param _setToken             Instance of the SetToken\\n     * @param _debtIssuanceModule   Debt issuance module address to register\\n     */\\n    function registerToModule(ISetToken _setToken, IDebtIssuanceModule _debtIssuanceModule) external onlyManagerAndValidSet(_setToken) {\\n        if (!_setToken.isInitializedModule(address(_debtIssuanceModule))) revert AaveLeverageModule__IssuanceUninitialized(address(_debtIssuanceModule));\\n\\n        _debtIssuanceModule.registerToIssuanceModule(_setToken);\\n    }\\n\\n    /**\\n     * @dev CALLABLE BY ANYBODY: Updates `underlyingToReserveTokens` mappings. Reverts if mapping already exists\\n     * or the passed _underlying asset does not have a valid reserve on Aave.\\n     * Note: Call this function when Aave adds a new reserve.\\n     * @param _underlying               Address of underlying asset\\n     */\\n    function addUnderlyingToReserveTokensMapping(IERC20 _underlying) external {\\n        address underlyingAToken = address(underlyingToReserveTokens[_underlying].aToken);\\n        if (underlyingAToken != address(0)) revert AaveLeverageModule__TokenMappingExists();\\n\\n        // An active reserve is an alias for a valid reserve on Aave.\\n        (,,,,,,,, bool isActive,) = PROTOCOL_DATA_PROVIDER.getReserveConfigurationData(address(_underlying));\\n        if (!isActive) revert AaveLeverageModule__ReserveInactive();\\n\\n        (address aToken, , address variableDebtToken) = PROTOCOL_DATA_PROVIDER.getReserveTokensAddresses(address(_underlying));\\n        underlyingToReserveTokens[_underlying].aToken = IAToken(aToken);\\n        underlyingToReserveTokens[_underlying].variableDebtToken = IVariableDebtToken(variableDebtToken);\\n\\n        emit ReserveTokensUpdated(_underlying, IAToken(aToken), IVariableDebtToken(variableDebtToken));\\n    }\\n\\n    /**\\n     * @dev MANAGER ONLY: Add collateral assets. aTokens corresponding to collateral assets are tracked for syncing positions.\\n     * Note: Reverts with \\\"Collateral already enabled\\\" if there are duplicate assets in the passed _newCollateralAssets array.\\n     *\\n     * NOTE: ALL ADDED COLLATERAL ASSETS CAN BE ADDED AS A POSITION ON THE SET TOKEN WITHOUT MANAGER'S EXPLICIT PERMISSION.\\n     * UNWANTED EXTRA POSITIONS CAN BREAK EXTERNAL LOGIC, INCREASE COST OF MINT/REDEEM OF SET TOKEN, AMONG OTHER POTENTIAL UNINTENDED CONSEQUENCES.\\n     * SO, PLEASE ADD ONLY THOSE COLLATERAL ASSETS WHOSE CORRESPONDING aTOKENS ARE NEEDED AS DEFAULT POSITIONS ON THE SET TOKEN.\\n     *\\n     * @param _setToken             Instance of the SetToken\\n     * @param _newCollateralAssets  Addresses of new collateral underlying assets\\n     */\\n    function addCollateralAssets(ISetToken _setToken, IERC20[] memory _newCollateralAssets) external onlyManagerAndValidSet(_setToken) {\\n        _addCollateralAssets(_setToken, _newCollateralAssets);\\n    }\\n\\n    /**\\n     * @dev MANAGER ONLY: Remove collateral assets. Disable deposited assets to be used as collateral on Aave market.\\n     * @param _setToken             Instance of the SetToken\\n     * @param _collateralAssets     Addresses of collateral underlying assets to remove\\n     */\\n    function removeCollateralAssets(ISetToken _setToken, IERC20[] memory _collateralAssets) external onlyManagerAndValidSet(_setToken) {\\n        uint256 collateralAssetsLength = _collateralAssets.length;\\n        for(uint256 i; i < collateralAssetsLength; ) {\\n            IERC20 collateralAsset = _collateralAssets[i];\\n            if(!collateralAssetEnabled[_setToken][collateralAsset]) revert AaveLeverageModule__CollateralUsageDisabled(address(collateralAsset));\\n\\n            _updateUseReserveAsCollateral(_setToken, collateralAsset, false);\\n\\n            delete collateralAssetEnabled[_setToken][collateralAsset];\\n            enabledAssets[_setToken].collateralAssets.removeStorage(address(collateralAsset));\\n            unchecked { ++i; }\\n        }\\n        emit CollateralAssetsUpdated(_setToken, false, _collateralAssets);\\n    }\\n\\n    /**\\n     * @dev MANAGER ONLY: Add borrow assets. Debt tokens corresponding to borrow assets are tracked for syncing positions.\\n     * Note: Reverts with \\\"Borrow already enabled\\\" if there are duplicate assets in the passed _newBorrowAssets array.\\n     * @param _setToken             Instance of the SetToken\\n     * @param _newBorrowAssets      Addresses of borrow underlying assets to add\\n     */\\n    function addBorrowAssets(ISetToken _setToken, IERC20[] memory _newBorrowAssets) external onlyManagerAndValidSet(_setToken) {\\n        _addBorrowAssets(_setToken, _newBorrowAssets);\\n    }\\n\\n    /**\\n     * @dev MANAGER ONLY: Remove borrow assets.\\n     * Note: If there is a borrow balance, borrow asset cannot be removed\\n     * @param _setToken             Instance of the SetToken\\n     * @param _borrowAssets         Addresses of borrow underlying assets to remove\\n     */\\n    function removeBorrowAssets(ISetToken _setToken, IERC20[] memory _borrowAssets) external onlyManagerAndValidSet(_setToken) {\\n        uint256 borrowAssetsLength = _borrowAssets.length;\\n        for(uint256 i; i < borrowAssetsLength; ) {\\n            IERC20 borrowAsset = _borrowAssets[i];\\n\\n            if (!borrowAssetEnabled[_setToken][borrowAsset]) revert AaveLeverageModule__BorrowDisabled(address(borrowAsset));\\n            uint256 balanceOfVariableDebtToken = underlyingToReserveTokens[borrowAsset].variableDebtToken.balanceOf(address(_setToken));\\n            if (balanceOfVariableDebtToken != 0) revert AaveLeverageModule__VariableDebtRemains(balanceOfVariableDebtToken);\\n\\n            delete borrowAssetEnabled[_setToken][borrowAsset];\\n            enabledAssets[_setToken].borrowAssets.removeStorage(address(borrowAsset));\\n            unchecked { ++i; }\\n        }\\n        emit BorrowAssetsUpdated(_setToken, false, _borrowAssets);\\n    }\\n\\n    /**\\n     * @dev GOVERNANCE ONLY: Enable/disable ability of a SetToken to initialize this module. Only callable by governance.\\n     * @param _setToken             Instance of the SetToken\\n     * @param _status               Bool indicating if _setToken is allowed to initialize this module\\n     */\\n    function updateAllowedSetToken(ISetToken _setToken, bool _status) external onlyOwner {\\n        if (!controller.isSet(address(_setToken)) && !allowedSetTokens[_setToken]) revert AaveLeverageModule__SetTokenInvalid();\\n        allowedSetTokens[_setToken] = _status;\\n        emit SetTokenStatusUpdated(_setToken, _status);\\n    }\\n\\n    /**\\n     * @dev GOVERNANCE ONLY: Toggle whether ANY SetToken is allowed to initialize this module. Only callable by governance.\\n     * @param _anySetAllowed             Bool indicating if ANY SetToken is allowed to initialize this module\\n     */\\n    function updateAnySetAllowed(bool _anySetAllowed) external onlyOwner {\\n        anySetAllowed = _anySetAllowed;\\n        emit AnySetAllowedUpdated(_anySetAllowed);\\n    }\\n\\n    /**\\n     * @dev GOVERNANCE ONLY: Updates maximum drift of dynamic exchange adapter. Only callable by governance.\\n     * @param _allowedDynamicExchangeAdapterDrift             Percentage, expressed in million, of max drift allowed\\n     */\\n    function updateAllowedDynamicExchangeAdapterDrift(uint256 _allowedDynamicExchangeAdapterDrift) external onlyOwner {\\n        allowedDynamicExchangeAdapterDrift = _allowedDynamicExchangeAdapterDrift;\\n        emit AllowedDynamicExchangeAdapterDriftUpdated(_allowedDynamicExchangeAdapterDrift);\\n    }\\n\\n    function updateEmergencyRepayer(address _emergencyRepayer) external onlyOwner {\\n        emergencyRepayer = _emergencyRepayer;\\n        emit EmergencyRepayerUpdated(_emergencyRepayer);\\n    }\\n\\n    /**\\n     * @dev MODULE ONLY: Hook called prior to issuance to sync positions on SetToken. Only callable by valid module.\\n     * @param _setToken             Instance of the SetToken\\n     */\\n    function moduleIssueHook(ISetToken _setToken, uint256 /* _setTokenQuantity */) external override onlyModule(_setToken) {\\n        sync(_setToken);\\n    }\\n\\n    /**\\n     * @dev MODULE ONLY: Hook called prior to redemption to sync positions on SetToken. For redemption, always use current borrowed\\n     * balance after interest accrual. Only callable by valid module.\\n     * @param _setToken             Instance of the SetToken\\n     */\\n    function moduleRedeemHook(ISetToken _setToken, uint256 /* _setTokenQuantity */) external override onlyModule(_setToken) {\\n        sync(_setToken);\\n    }\\n\\n    /**\\n     * @dev MODULE ONLY: Hook called prior to looping through each component on issuance. Invokes borrow in order for\\n     * module to return debt to issuer. Only callable by valid module.\\n     * @param _setToken             Instance of the SetToken\\n     * @param _setTokenQuantity     Quantity of SetToken\\n     * @param _component            Address of component\\n     */\\n    function componentIssueHook(ISetToken _setToken, uint256 _setTokenQuantity, IERC20 _component, bool _isEquity) external override onlyModule(_setToken) {\\n        // Check hook not being called for an equity position. If hook is called with equity position and outstanding borrow position\\n        // exists the loan would be taken out twice potentially leading to liquidation\\n        if (!_isEquity) {\\n            int256 componentDebt = _setToken.getExternalPositionRealUnit(address(_component), address(this));\\n\\n            if (componentDebt >= 0) revert AaveLeverageModule__ComponentDebtNotNegative(componentDebt);\\n\\n            uint256 notionalDebt = (componentDebt * -1).toUint256().preciseMul(_setTokenQuantity);\\n            _borrow(_setToken, ILendingPool(LENDING_POOL_ADDRESSES_PROVIDER.getLendingPool()), _component, notionalDebt);\\n        }\\n    }\\n\\n    /**\\n     * @dev MODULE ONLY: Hook called prior to looping through each component on redemption. Invokes repay after\\n     * the issuance module transfers debt from the issuer. Only callable by valid module.\\n     * @param _setToken             Instance of the SetToken\\n     * @param _setTokenQuantity     Quantity of SetToken\\n     * @param _component            Address of component\\n     */\\n    function componentRedeemHook(ISetToken _setToken, uint256 _setTokenQuantity, IERC20 _component, bool _isEquity) external override onlyModule(_setToken) {\\n        // Check hook not being called for an equity position. If hook is called with equity position and outstanding borrow position\\n        // exists the loan would be paid down twice, decollateralizing the Set\\n        if (!_isEquity) {\\n            int256 componentDebt = _setToken.getExternalPositionRealUnit(address(_component), address(this));\\n\\n            if (componentDebt >= 0) revert AaveLeverageModule__ComponentDebtNotNegative(componentDebt);\\n\\n            uint256 notionalDebt = (componentDebt * -1).toUint256().preciseMulCeil(_setTokenQuantity);\\n            _repayBorrow(_setToken, ILendingPool(LENDING_POOL_ADDRESSES_PROVIDER.getLendingPool()), _component, notionalDebt);\\n        }\\n    }\\n\\n    /* ============ External Getter Functions ============ */\\n\\n    /**\\n     * @dev Get enabled assets for SetToken. Returns an array of collateral and borrow assets.\\n     * @return Underlying collateral assets that are enabled\\n     * @return Underlying borrowed assets that are enabled\\n     */\\n    function getEnabledAssets(ISetToken _setToken) external view returns(address[] memory, address[] memory) {\\n        return (\\n            enabledAssets[_setToken].collateralAssets,\\n            enabledAssets[_setToken].borrowAssets\\n        );\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n    /**\\n     * @dev Invoke deposit from SetToken using AaveV2 library. Mints aTokens for SetToken.\\n     */\\n    function _deposit(ISetToken _setToken, ILendingPool _lendingPool, IERC20 _asset, uint256 _notionalQuantity) internal {\\n        _setToken.invokeApprove(address(_asset), address(_lendingPool), _notionalQuantity);\\n        _setToken.invokeDeposit(_lendingPool, address(_asset), _notionalQuantity);\\n    }\\n\\n    /**\\n     * @dev Invoke withdraw from SetToken using AaveV2 library. Burns aTokens and returns underlying to SetToken.\\n     */\\n    function _withdraw(ISetToken _setToken, ILendingPool _lendingPool, IERC20 _asset, uint256 _notionalQuantity) internal {\\n        try _setToken.invokeWithdraw(_lendingPool, address(_asset), _notionalQuantity) {} // solhint-disable-line no-empty-blocks\\n        catch Error(string memory reason) {\\n            if (keccak256(abi.encodePacked(reason)) == keccak256(\\\"6\\\")) {\\n                _asset.transferFrom(emergencyRepayer, address(_setToken), _notionalQuantity);\\n                _deposit(_setToken, _lendingPool, _asset, _notionalQuantity);\\n                _setToken.invokeWithdraw(_lendingPool, address(_asset), _notionalQuantity);\\n                emergencyRepayment += _notionalQuantity;\\n            } else {\\n                revert(reason);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Invoke repay from SetToken using AaveV2 library. Burns DebtTokens for SetToken.\\n     */\\n    function _repayBorrow(ISetToken _setToken, ILendingPool _lendingPool, IERC20 _asset, uint256 _notionalQuantity) internal {\\n        _setToken.invokeApprove(address(_asset), address(_lendingPool), _notionalQuantity);\\n        _setToken.invokeRepay(_lendingPool, address(_asset), _notionalQuantity, BORROW_RATE_MODE);\\n        if (emergencyRepayment > 0) {\\n            _withdraw(_setToken, _lendingPool, IERC20(enabledAssets[_setToken].collateralAssets[0]), emergencyRepayment);\\n            _setToken.invokeTransfer(enabledAssets[_setToken].collateralAssets[0], emergencyRepayer, emergencyRepayment);\\n            delete emergencyRepayment;\\n        }\\n    }\\n\\n    /**\\n     * @dev Invoke borrow from the SetToken using AaveV2 library. Mints DebtTokens for SetToken.\\n     */\\n    function _borrow(ISetToken _setToken, ILendingPool _lendingPool, IERC20 _asset, uint256 _notionalQuantity) internal {\\n        _setToken.invokeBorrow(_lendingPool, address(_asset), _notionalQuantity, BORROW_RATE_MODE);\\n    }\\n\\n    /**\\n     * @dev Invokes approvals, gets trade call data from exchange adapter and invokes trade from SetToken\\n     * @return uint256     The quantity of tokens received post-trade\\n     */\\n    function _executeTrade(\\n        ActionInfo memory _actionInfo,\\n        IERC20 _sendToken,\\n        IERC20 _receiveToken,\\n        bytes memory _data\\n    )\\n        internal\\n        returns (uint256)\\n    {\\n        ISetToken setToken = _actionInfo.setToken;\\n        uint256 notionalSendQuantity = _actionInfo.notionalSendQuantity;\\n\\n        setToken.invokeApprove(\\n            address(_sendToken),\\n            _actionInfo.exchangeAdapter.getSpender(),\\n            notionalSendQuantity\\n        );\\n\\n        (\\n            address targetExchange,\\n            uint256 callValue,\\n            bytes memory methodData\\n        ) = _actionInfo.exchangeAdapter.getTradeCalldata(\\n            address(_sendToken),\\n            address(_receiveToken),\\n            address(setToken),\\n            notionalSendQuantity,\\n            _actionInfo.minNotionalReceiveQuantity,\\n            _data\\n        );\\n        setToken.invoke(targetExchange, callValue, methodData);\\n\\n        uint256 receiveTokenQuantity = _receiveToken.balanceOf(address(setToken)) - _actionInfo.preTradeReceiveTokenBalance;\\n        if (receiveTokenQuantity < _actionInfo.minNotionalReceiveQuantity)\\n            revert AaveLeverageModule__ExcessiveSlippage(receiveTokenQuantity, _actionInfo.minNotionalReceiveQuantity);\\n\\n        return receiveTokenQuantity;\\n    }\\n\\n    /**\\n     * @dev Calculates protocol fee on module and pays protocol fee from SetToken\\n     * @return uint256          Total protocol fee paid\\n     */\\n    function _accrueProtocolFee(ISetToken _setToken, IERC20 _receiveToken, uint256 _exchangedQuantity) internal returns(uint256) {\\n        uint256 protocolFeeTotal = getModuleFee(PROTOCOL_TRADE_FEE_INDEX, _exchangedQuantity);\\n\\n        payProtocolFeeFromSetToken(_setToken, address(_receiveToken), protocolFeeTotal);\\n\\n        return protocolFeeTotal;\\n    }\\n\\n    /**\\n     * @dev Updates the collateral (aToken held) and borrow position (variableDebtToken held) of the SetToken\\n     */\\n    function _updateLeverPositions(ActionInfo memory _actionInfo, IERC20 _borrowAsset) internal {\\n        IAToken aToken = underlyingToReserveTokens[_actionInfo.collateralAsset].aToken;\\n        _updateCollateralPosition(\\n            _actionInfo.setToken,\\n            aToken,\\n            _getCollateralPosition(\\n                _actionInfo.setToken,\\n                aToken,\\n                _actionInfo.setTotalSupply\\n            )\\n        );\\n\\n        _updateBorrowPosition(\\n            _actionInfo.setToken,\\n            _borrowAsset,\\n            _getBorrowPosition(\\n                _actionInfo.setToken,\\n                _borrowAsset,\\n                _actionInfo.setTotalSupply\\n            )\\n        );\\n    }\\n\\n\\n    /**\\n     * @dev Updates positions as per _updateLeverPositions and updates Default position for borrow asset in case Set is\\n     * delevered all the way to zero any remaining borrow asset after the debt is paid can be added as a position.\\n     */\\n    function _updateDeleverPositions(ActionInfo memory _actionInfo, IERC20 _repayAsset) internal {\\n        // if amount of tokens traded for exceeds debt, update default position first to save gas on editing borrow position\\n        uint256 repayAssetBalance = _repayAsset.balanceOf(address(_actionInfo.setToken));\\n        if (repayAssetBalance != _actionInfo.preTradeReceiveTokenBalance) {\\n            _actionInfo.setToken.calculateAndEditDefaultPosition(\\n                address(_repayAsset),\\n                _actionInfo.setTotalSupply,\\n                _actionInfo.preTradeReceiveTokenBalance\\n            );\\n        }\\n\\n        _updateLeverPositions(_actionInfo, _repayAsset);\\n    }\\n\\n    /**\\n     * @dev Updates default position unit for given aToken on SetToken\\n     */\\n    function _updateCollateralPosition(ISetToken _setToken, IAToken _aToken, uint256 _newPositionUnit) internal {\\n        _setToken.editDefaultPosition(address(_aToken), _newPositionUnit);\\n    }\\n\\n    /**\\n     * @dev Updates external position unit for given borrow asset on SetToken\\n     */\\n    function _updateBorrowPosition(ISetToken _setToken, IERC20 _underlyingAsset, int256 _newPositionUnit) internal {\\n        _setToken.editExternalPosition(address(_underlyingAsset), address(this), _newPositionUnit, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Construct the ActionInfo struct for lever and delever\\n     * @return ActionInfo       Instance of constructed ActionInfo struct\\n     */\\n    function _createAndValidateActionInfo(\\n        ISetToken _setToken,\\n        IERC20 _sendToken,\\n        IERC20 _receiveToken,\\n        uint256 _sendQuantityUnits,\\n        uint256 _minReceiveQuantityUnits,\\n        string memory _tradeAdapterName,\\n        bool _isLever,\\n        bytes memory _tradeData\\n    )\\n        internal\\n        view\\n        returns(ActionInfo memory)\\n    {\\n        uint256 totalSupply = _setToken.totalSupply();\\n\\n        return _createAndValidateActionInfoNotional(\\n            _setToken,\\n            _sendToken,\\n            _receiveToken,\\n            _sendQuantityUnits.preciseMul(totalSupply),\\n            _minReceiveQuantityUnits.preciseMul(totalSupply),\\n            _tradeAdapterName,\\n            _isLever,\\n            totalSupply,\\n            _tradeData\\n        );\\n    }\\n\\n    /**\\n     * @dev Returns amount, that was fixed in trade data\\n     *\\n     * @return uint256 new token amount\\n     */\\n    function _getExchangeAdapterInputAmount(uint256 _notionalSendQuantity, IExchangeAdapter _tradeAdapter, bytes memory _tradeData, uint256 _tradeMaxDrift) public view returns (uint256) {\\n        (,,,uint256 dexAdapterSendQuantity,) = _tradeAdapter.getTradeMetadata(_tradeData);\\n        uint256 drift = (Math.max(dexAdapterSendQuantity, _notionalSendQuantity) - Math.min(dexAdapterSendQuantity, _notionalSendQuantity)) * 100000 / _notionalSendQuantity;\\n        if (drift >= _tradeMaxDrift) revert AaveLeverageModule__DexDataMismatch(drift, _tradeMaxDrift);\\n        return dexAdapterSendQuantity;\\n    }\\n\\n    /**\\n     * @dev returns information, whether given exchange adapter is a dynamic variant\\n     */\\n    function _isDynamicDataAdapter(IExchangeAdapter _adapter) public view returns (bool) {\\n        try _adapter.isDynamicDataAdapter() returns (bool _isDynamic) {\\n            return _isDynamic;\\n        } catch {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Construct the ActionInfo struct for lever and delever accepting notional units\\n     * @return ActionInfo       Instance of constructed ActionInfo struct\\n     */\\n    function _createAndValidateActionInfoNotional(\\n        ISetToken _setToken,\\n        IERC20 _sendToken,\\n        IERC20 _receiveToken,\\n        uint256 _notionalSendQuantity,\\n        uint256 _minNotionalReceiveQuantity,\\n        string memory _tradeAdapterName,\\n        bool _isLever,\\n        uint256 _setTotalSupply,\\n        bytes memory _tradeData\\n    )\\n        internal\\n        view\\n        returns(ActionInfo memory)\\n    {\\n        IExchangeAdapter tradeAdapter = IExchangeAdapter(getAndValidateAdapter(_tradeAdapterName));\\n        if(_isDynamicDataAdapter(tradeAdapter)) {\\n            _notionalSendQuantity = _getExchangeAdapterInputAmount(_notionalSendQuantity, tradeAdapter, _tradeData, allowedDynamicExchangeAdapterDrift);\\n        }\\n        ActionInfo memory actionInfo = ActionInfo ({\\n            exchangeAdapter: tradeAdapter,\\n            lendingPool: ILendingPool(LENDING_POOL_ADDRESSES_PROVIDER.getLendingPool()),\\n            setToken: _setToken,\\n            collateralAsset: _isLever ? _receiveToken : _sendToken,\\n            borrowAsset: _isLever ? _sendToken : _receiveToken,\\n            setTotalSupply: _setTotalSupply,\\n            notionalSendQuantity: _notionalSendQuantity,\\n            minNotionalReceiveQuantity: _minNotionalReceiveQuantity,\\n            preTradeReceiveTokenBalance: IERC20(_receiveToken).balanceOf(address(_setToken))\\n        });\\n\\n        _validateCommon(actionInfo);\\n\\n        return actionInfo;\\n    }\\n\\n    /**\\n     * @dev Add collateral assets to SetToken. Updates the collateralAssetsEnabled and enabledAssets mappings.\\n     * Emits CollateralAssetsUpdated event.\\n     */\\n    function _addCollateralAssets(ISetToken _setToken, IERC20[] memory _newCollateralAssets) internal {\\n        uint256 newcollateralAssetsLength = _newCollateralAssets.length;\\n        for(uint256 i; i < newcollateralAssetsLength; ) {\\n            IERC20 collateralAsset = _newCollateralAssets[i];\\n\\n            _validateNewCollateralAsset(_setToken, collateralAsset);\\n            _updateUseReserveAsCollateral(_setToken, collateralAsset, true);\\n\\n            collateralAssetEnabled[_setToken][collateralAsset] = true;\\n            enabledAssets[_setToken].collateralAssets.push(address(collateralAsset));\\n            unchecked { ++i; }\\n        }\\n        emit CollateralAssetsUpdated(_setToken, true, _newCollateralAssets);\\n    }\\n\\n    /**\\n     * @dev Add borrow assets to SetToken. Updates the borrowAssetsEnabled and enabledAssets mappings.\\n     * Emits BorrowAssetsUpdated event.\\n     */\\n    function _addBorrowAssets(ISetToken _setToken, IERC20[] memory _newBorrowAssets) internal {\\n        uint256 newborrowAssetsLength = _newBorrowAssets.length;\\n        for(uint256 i; i < newborrowAssetsLength; ) {\\n            IERC20 borrowAsset = _newBorrowAssets[i];\\n\\n            _validateNewBorrowAsset(_setToken, borrowAsset);\\n\\n            borrowAssetEnabled[_setToken][borrowAsset] = true;\\n            enabledAssets[_setToken].borrowAssets.push(address(borrowAsset));\\n            unchecked { ++i; }\\n        }\\n        emit BorrowAssetsUpdated(_setToken, true, _newBorrowAssets);\\n    }\\n\\n    /**\\n     * @dev Updates SetToken's ability to use an asset as collateral on Aave\\n     */\\n    function _updateUseReserveAsCollateral(ISetToken _setToken, IERC20 _asset, bool _useAsCollateral) internal {\\n        /*\\n        Note: Aave ENABLES an asset to be used as collateral by `to` address in an `aToken.transfer(to, amount)` call provided\\n            1. msg.sender (from address) isn't the same as `to` address\\n            2. `to` address had zero aToken balance before the transfer\\n            3. transfer `amount` is greater than 0\\n\\n        Note: Aave DISABLES an asset to be used as collateral by `msg.sender`in an `aToken.transfer(to, amount)` call provided\\n            1. msg.sender (from address) isn't the same as `to` address\\n            2. msg.sender has zero balance after the transfer\\n\\n        Different states of the SetToken and what this function does in those states:\\n\\n            Case 1: Manager adds collateral asset to SetToken before first issuance\\n                - Since aToken.balanceOf(setToken) == 0, we do not call `setToken.invokeUserUseReserveAsCollateral` because Aave\\n                requires aToken balance to be greater than 0 before enabling/disabling the underlying asset to be used as collateral\\n                on Aave markets.\\n\\n            Case 2: First issuance of the SetToken\\n                - SetToken was initialized with aToken as default position\\n                - DebtIssuanceModule reads the default position and transfers corresponding aToken from the issuer to the SetToken\\n                - Aave enables aToken to be used as collateral by the SetToken\\n                - Manager calls lever() and the aToken is used as collateral to borrow other assets\\n\\n            Case 3: Manager removes collateral asset from the SetToken\\n                - Disable asset to be used as collateral on SetToken by calling `setToken.invokeSetUserUseReserveAsCollateral` with\\n                useAsCollateral equals false\\n                - Note: If health factor goes below 1 by removing the collateral asset, then Aave reverts on the above call, thus whole\\n                transaction reverts, and manager can't remove corresponding collateral asset\\n\\n            Case 4: Manager adds collateral asset after removing it\\n                - If aToken.balanceOf(setToken) > 0, we call `setToken.invokeUserUseReserveAsCollateral` and the corresponding aToken\\n                is re-enabled as collateral on Aave\\n\\n            Case 5: On redemption/delever/liquidated and aToken balance becomes zero\\n                - Aave disables aToken to be used as collateral by SetToken\\n\\n        Values of variables in below if condition and corresponding action taken:\\n\\n        ---------------------------------------------------------------------------------------------------------------------\\n        | usageAsCollateralEnabled |  _useAsCollateral |   aToken.balanceOf()  |     Action                                 |\\n        |--------------------------|-------------------|-----------------------|--------------------------------------------|\\n        |   true                   |   true            |      X                |   Skip invoke. Save gas.                   |\\n        |--------------------------|-------------------|-----------------------|--------------------------------------------|\\n        |   true                   |   false           |   greater than 0      |   Invoke and set to false.                 |\\n        |--------------------------|-------------------|-----------------------|--------------------------------------------|\\n        |   true                   |   false           |   = 0                 |   Impossible case. Aave disables usage as  |\\n        |                          |                   |                       |   collateral when aToken balance becomes 0 |\\n        |--------------------------|-------------------|-----------------------|--------------------------------------------|\\n        |   false                  |   false           |     X                 |   Skip invoke. Save gas.                   |\\n        |--------------------------|-------------------|-----------------------|--------------------------------------------|\\n        |   false                  |   true            |   greater than 0      |   Invoke and set to true.                  |\\n        |--------------------------|-------------------|-----------------------|--------------------------------------------|\\n        |   false                  |   true            |   = 0                 |   Don't invoke. Will revert.               |\\n        ---------------------------------------------------------------------------------------------------------------------\\n        */\\n        (,,,,,,,,bool usageAsCollateralEnabled) = PROTOCOL_DATA_PROVIDER.getUserReserveData(address(_asset), address(_setToken));\\n        if (\\n            usageAsCollateralEnabled != _useAsCollateral\\n            && underlyingToReserveTokens[_asset].aToken.balanceOf(address(_setToken)) > 0\\n        ) {\\n            _setToken.invokeSetUserUseReserveAsCollateral(\\n                ILendingPool(LENDING_POOL_ADDRESSES_PROVIDER.getLendingPool()),\\n                address(_asset),\\n                _useAsCollateral\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Validate common requirements for lever and delever\\n     */\\n    function _validateCommon(ActionInfo memory _actionInfo) internal view {\\n        if (!collateralAssetEnabled[_actionInfo.setToken][_actionInfo.collateralAsset]) revert AaveLeverageModule__CollateralUsageDisabled(address(_actionInfo.collateralAsset));\\n        if (!borrowAssetEnabled[_actionInfo.setToken][_actionInfo.borrowAsset]) revert AaveLeverageModule__BorrowDisabled(address(_actionInfo.borrowAsset));\\n        if (_actionInfo.collateralAsset == _actionInfo.borrowAsset) revert AaveLeverageModule__CollateralAndBorrowMustDiffer(address(_actionInfo.collateralAsset), address(_actionInfo.borrowAsset));\\n        if (_actionInfo.notionalSendQuantity == 0) revert AaveLeverageModule__ZeroQuantity();\\n    }\\n\\n    /**\\n     * @dev Validates if a new asset can be added as collateral asset for given SetToken\\n     */\\n    function _validateNewCollateralAsset(ISetToken _setToken, IERC20 _asset) internal view {\\n        if (collateralAssetEnabled[_setToken][_asset]) revert AaveLeverageModule__CollateralIsEnabled();\\n\\n        (address aToken, , ) = PROTOCOL_DATA_PROVIDER.getReserveTokensAddresses(address(_asset));\\n        address reserveTokenAToken = address(underlyingToReserveTokens[_asset].aToken);\\n        if (reserveTokenAToken != aToken) revert AaveLeverageModule__ATokenInvalid(reserveTokenAToken);\\n\\n        ( , , , , , bool usageAsCollateralEnabled, , , bool isActive, bool isFrozen) = PROTOCOL_DATA_PROVIDER.getReserveConfigurationData(address(_asset));\\n        // An active reserve is an alias for a valid reserve on Aave.\\n        // We are checking for the availability of the reserve directly on Aave rather than checking our internal `underlyingToReserveTokens` mappings,\\n        // because our mappings can be out-of-date if a new reserve is added to Aave\\n        if (!isActive) revert AaveLeverageModule__ReserveInactive();\\n        // A frozen reserve doesn't allow any new deposit, borrow or rate swap but allows repayments, liquidations and withdrawals\\n        if (isFrozen) revert AaveLeverageModule__ReserveFrozen();\\n        if (!usageAsCollateralEnabled) revert AaveLeverageModule__CollateralUsageDisabled(address(_asset));\\n    }\\n\\n    /**\\n     * @dev Validates if a new asset can be added as borrow asset for given SetToken\\n     */\\n    function _validateNewBorrowAsset(ISetToken _setToken, IERC20 _asset) internal view {\\n        if (borrowAssetEnabled[_setToken][_asset]) revert AaveLeverageModule__BorrowIsEnabled();\\n\\n        ( , , address variableDebtToken) = PROTOCOL_DATA_PROVIDER.getReserveTokensAddresses(address(_asset));\\n        address reserveTokenVariableDebtToken = address(underlyingToReserveTokens[_asset].variableDebtToken);\\n        if (reserveTokenVariableDebtToken != variableDebtToken) revert AaveLeverageModule__VariableDebtTokenInvalid(reserveTokenVariableDebtToken);\\n\\n        (, , , , , , bool borrowingEnabled, , bool isActive, bool isFrozen) = PROTOCOL_DATA_PROVIDER.getReserveConfigurationData(address(_asset));\\n        if (!isActive) revert AaveLeverageModule__ReserveInactive();\\n        if (isFrozen) revert AaveLeverageModule__ReserveFrozen();\\n        if (!borrowingEnabled) revert AaveLeverageModule__ProtocolBorrowingDisabled();\\n    }\\n\\n    /**\\n     * @dev Reads aToken balance and calculates default position unit for given collateral aToken and SetToken\\n     *\\n     * @return uint256       default collateral position unit\\n     */\\n    function _getCollateralPosition(ISetToken _setToken, IAToken _aToken, uint256 _setTotalSupply) internal view returns (uint256) {\\n        uint256 collateralNotionalBalance = _aToken.balanceOf(address(_setToken));\\n        return collateralNotionalBalance.preciseDiv(_setTotalSupply);\\n    }\\n\\n    /**\\n     * @dev Reads variableDebtToken balance and calculates external position unit for given borrow asset and SetToken\\n     *\\n     * @return int256       external borrow position unit\\n     */\\n    function _getBorrowPosition(ISetToken _setToken, IERC20 _borrowAsset, uint256 _setTotalSupply) internal view returns (int256) {\\n        uint256 borrowNotionalBalance = underlyingToReserveTokens[_borrowAsset].variableDebtToken.balanceOf(address(_setToken));\\n        return borrowNotionalBalance.preciseDivCeil(_setTotalSupply).toInt256() * -1;\\n    }\\n}\"\r\n    },\r\n    \"contracts/protocol/modules/v1/BasicIssuanceModule.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n    http://www.apache.org/licenses/LICENSE-2.0\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\nimport { IBasicIssuanceModule } from \\\"../../../interfaces/IBasicIssuanceModule.sol\\\";\\nimport { IController } from \\\"../../../interfaces/IController.sol\\\";\\nimport { IManagerIssuanceHook } from \\\"../../../interfaces/IManagerIssuanceHook.sol\\\";\\nimport { Invoke } from \\\"../../lib/Invoke.sol\\\";\\nimport { ISetToken } from \\\"../../../interfaces/ISetToken.sol\\\";\\nimport { ModuleBase } from \\\"../../lib/ModuleBase.sol\\\";\\nimport { Position } from \\\"../../lib/Position.sol\\\";\\nimport { PreciseUnitMath } from \\\"../../../lib/PreciseUnitMath.sol\\\";\\n\\n/**\\n * @title BasicIssuanceModule\\n * @author Set Protocol\\n *\\n * Module that enables issuance and redemption functionality on a SetToken. This is a module that is\\n * required to bring the totalSupply of a Set above 0.\\n *\\n * CHANGELOG\\n * - 3/30/22: Add pre-redeem hook\\n * - 4/21/23: Removed OZ SafeMath utils\\n * - 9/18/23: Upgrade to Solidity 0.8.21\\n * - 9/26/23: Added custom errors\\n */\\ncontract BasicIssuanceModule is ReentrancyGuard, IBasicIssuanceModule, ModuleBase {\\n    using Invoke for ISetToken;\\n    using Position for ISetToken.Position;\\n    using Position for ISetToken;\\n    using PreciseUnitMath for uint256;\\n    using SafeCast for int256;\\n    using SafeCast for uint256;\\n\\n    /* ============ Events ============ */\\n\\n    event SetTokenIssued(\\n        address indexed _setToken,\\n        address indexed _issuer,\\n        address indexed _to,\\n        address _hookContract,\\n        uint256 _quantity\\n    );\\n    event SetTokenRedeemed(\\n        address indexed _setToken,\\n        address indexed _redeemer,\\n        address indexed _to,\\n        address _hookContract,\\n        uint256 _quantity\\n    );\\n\\n    /* ============ State Variables ============ */\\n\\n    // Mapping of SetToken to Issuance hook configurations\\n    mapping(ISetToken => IManagerIssuanceHook) public managerIssuanceHook;\\n\\n    /* ============ Constructor ============ */\\n\\n    /**\\n     * Set state controller state variable\\n     *\\n     * @param _controller             Address of Controller contract\\n     */\\n    constructor(IController _controller) ModuleBase(_controller) { this; }\\n\\n    /* ============ External Functions ============ */\\n\\n    /**\\n     * Deposits the SetToken's position components into the SetToken and mints the SetToken of the given quantity\\n     * to the specified _to address. This function only handles Default Positions (positionState = 0).\\n     *\\n     * @param _setToken             Instance of the SetToken contract\\n     * @param _quantity             Quantity of the SetToken to mint\\n     * @param _to                   Address to mint SetToken to\\n     */\\n    function issue(\\n        ISetToken _setToken,\\n        uint256 _quantity,\\n        address _to\\n    )\\n        external\\n        nonReentrant\\n        onlyValidAndInitializedSet(_setToken)\\n    {\\n        if (_quantity == 0) revert BasicIssuanceModule__ZeroQuantity();\\n\\n        address hookContract = _callPreIssueHooks(_setToken, _quantity, msg.sender, _to);\\n\\n        (\\n            address[] memory components,\\n            uint256[] memory componentQuantities\\n        ) = getRequiredComponentUnitsForIssue(_setToken, _quantity);\\n\\n        uint256 componentsLength = components.length;\\n        // For each position, transfer the required underlying to the SetToken\\n        for (uint256 i; i < componentsLength; ) {\\n            // Transfer the component to the SetToken\\n            transferFrom(\\n                IERC20(components[i]),\\n                msg.sender,\\n                address(_setToken),\\n                componentQuantities[i]\\n            );\\n            unchecked { ++i; }\\n        }\\n\\n        // Mint the SetToken\\n        _setToken.mint(_to, _quantity);\\n\\n        emit SetTokenIssued(address(_setToken), msg.sender, _to, hookContract, _quantity);\\n    }\\n\\n    /**\\n     * Redeems the SetToken's positions and sends the components of the given\\n     * quantity to the caller. This function only handles Default Positions (positionState = 0).\\n     *\\n     * @param _setToken             Instance of the SetToken contract\\n     * @param _quantity             Quantity of the SetToken to redeem\\n     * @param _to                   Address to send component assets to\\n     */\\n    function redeem(\\n        ISetToken _setToken,\\n        uint256 _quantity,\\n        address _to\\n    )\\n        external\\n        nonReentrant\\n        onlyValidAndInitializedSet(_setToken)\\n    {\\n        if (_quantity == 0) revert BasicIssuanceModule__ZeroQuantity();\\n\\n        address hookContract = _callPreRedeemHooks(_setToken, msg.sender);\\n\\n        // Burn the SetToken - ERC20's internal burn already checks that the user has enough balance\\n        _setToken.burn(msg.sender, _quantity);\\n\\n        // For each position, invoke the SetToken to transfer the tokens to the user\\n        address[] memory components = _setToken.getComponents();\\n        uint256 componentsLength = components.length;\\n        for (uint256 i; i < componentsLength; ) {\\n            address component = components[i];\\n            if (_setToken.hasExternalPosition(component)) revert BasicIssuanceModule__ExternalPositionNotSupported(address(this), component);\\n\\n            uint256 unit = _setToken.getDefaultPositionRealUnit(component).toUint256();\\n\\n            // Use preciseMul to round down to ensure overcollateration when small redeem quantities are provided\\n            uint256 componentQuantity = _quantity.preciseMul(unit);\\n\\n            // Instruct the SetToken to transfer the component to the user\\n            _setToken.strictInvokeTransfer(\\n                component,\\n                _to,\\n                componentQuantity\\n            );\\n            unchecked { ++i; }\\n        }\\n\\n        emit SetTokenRedeemed(address(_setToken), msg.sender, _to, hookContract, _quantity);\\n    }\\n\\n    /**\\n     * Initializes this module to the SetToken with issuance-related hooks. Only callable by the SetToken's manager.\\n     * Hook addresses are optional. Address(0) means that no hook will be called\\n     *\\n     * @param _setToken             Instance of the SetToken to issue\\n     * @param _preIssueHook         Instance of the Manager Contract with the Pre-Issuance Hook function\\n     */\\n    function initialize(\\n        ISetToken _setToken,\\n        IManagerIssuanceHook _preIssueHook\\n    )\\n        external\\n        onlySetManager(_setToken, msg.sender)\\n        onlyValidAndPendingSet(_setToken)\\n    {\\n        managerIssuanceHook[_setToken] = _preIssueHook;\\n\\n        _setToken.initializeModule();\\n    }\\n\\n    /**\\n     * Reverts as this module should not be removable after added. Users should always\\n     * have a way to redeem their Sets\\n     */\\n    function removeModule() external pure override {\\n        revert BasicIssuanceModule__RemovalForbidden();\\n    }\\n\\n    /* ============ External Getter Functions ============ */\\n\\n    /**\\n     * Retrieves the addresses and units required to mint a particular quantity of SetToken.\\n     *\\n     * @param _setToken             Instance of the SetToken to issue\\n     * @param _quantity             Quantity of SetToken to issue\\n     * @return address[]            List of component addresses\\n     * @return uint256[]            List of component units required to issue the quantity of SetTokens\\n     */\\n    function getRequiredComponentUnitsForIssue(\\n        ISetToken _setToken,\\n        uint256 _quantity\\n    )\\n        public\\n        view\\n        onlyValidAndInitializedSet(_setToken)\\n        returns (address[] memory, uint256[] memory)\\n    {\\n        address[] memory components = _setToken.getComponents();\\n        uint256 componentsLength = components.length;\\n        uint256[] memory notionalUnits = new uint256[](componentsLength);\\n        for (uint256 i; i < componentsLength; ) {\\n            if (_setToken.hasExternalPosition(components[i])) revert BasicIssuanceModule__ExternalPositionNotSupported(address(this), components[i]);\\n\\n            notionalUnits[i] = _setToken.getDefaultPositionRealUnit(components[i]).toUint256().preciseMulCeil(_quantity);\\n            unchecked { ++i; }\\n        }\\n\\n        return (components, notionalUnits);\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    /**\\n     * If a pre-issue hook has been configured, call the external-protocol contract. Pre-issue hook logic\\n     * can contain arbitrary logic including validations, external function calls, etc.\\n     */\\n    function _callPreIssueHooks(\\n        ISetToken _setToken,\\n        uint256 _quantity,\\n        address _caller,\\n        address _to\\n    )\\n        internal\\n        returns(address)\\n    {\\n        IManagerIssuanceHook preIssueHook = managerIssuanceHook[_setToken];\\n        if (address(preIssueHook) != address(0)) {\\n            preIssueHook.invokePreIssueHook(_setToken, _quantity, _caller, _to);\\n            return address(preIssueHook);\\n        }\\n\\n        return address(0);\\n    }\\n\\n    /**\\n     * If a pre-redeem hook has been configured, call the external-protocol contract. Pre-redeem hook logic\\n     * can contain arbitrary logic including validations, external function calls, etc.\\n     */\\n    function _callPreRedeemHooks(\\n        ISetToken _setToken,\\n        address _caller\\n    )\\n        internal\\n        returns(address)\\n    {\\n        IManagerIssuanceHook preRedeemHook = managerIssuanceHook[_setToken];\\n        if (address(preRedeemHook) != address(0)) {\\n            preRedeemHook.invokePreRedeemHook(_caller);\\n            return address(preRedeemHook);\\n        }\\n\\n        return address(0);\\n    }\\n}\"\r\n    },\r\n    \"contracts/protocol/modules/v1/DebtIssuanceModule.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2021 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport { AddressArrayUtils } from \\\"../../../lib/AddressArrayUtils.sol\\\";\\nimport { IController } from \\\"../../../interfaces/IController.sol\\\";\\nimport { IDebtIssuanceModule } from \\\"../../../interfaces/IDebtIssuanceModule.sol\\\";\\nimport { IManagerIssuanceHook } from \\\"../../../interfaces/IManagerIssuanceHook.sol\\\";\\nimport { IModuleIssuanceHook } from \\\"../../../interfaces/IModuleIssuanceHook.sol\\\";\\nimport { ISetToken } from \\\"../../../interfaces/ISetToken.sol\\\";\\nimport { Invoke } from \\\"../../lib/Invoke.sol\\\";\\nimport { ModuleBase } from \\\"../../lib/ModuleBase.sol\\\";\\nimport { Position } from \\\"../../lib/Position.sol\\\";\\nimport { PreciseUnitMath } from \\\"../../../lib/PreciseUnitMath.sol\\\";\\n\\n/**\\n * @title DebtIssuanceModule\\n * @author Set Protocol\\n *\\n * The DebtIssuanceModule is a module that enables users to issue and redeem SetTokens that contain default and all\\n * external positions, including debt positions. Module hooks are added to allow for syncing of positions, and component\\n * level hooks are added to ensure positions are replicated correctly. The manager can define arbitrary issuance logic\\n * in the manager hook, as well as specify issue and redeem fees.\\n *\\n * CHANGELOG\\n * - 3/30/22: Add pre-redeem hook\\n * - 4/21/23: Removed OZ SafeMath utils\\n * - 9/18/23: Upgrade to Solidity 0.8.21\\n * - 9/26/23: Added custom errors\\n */\\ncontract DebtIssuanceModule is ReentrancyGuard, IDebtIssuanceModule, ModuleBase {\\n    using PreciseUnitMath for uint256;\\n    using SafeCast for int256;\\n    using Invoke for ISetToken;\\n    using Position for ISetToken;\\n    using AddressArrayUtils for address[];\\n\\n    /* ============ Structs ============ */\\n\\n    // NOTE: moduleIssuanceHooks uses address[] for compatibility with AddressArrayUtils library\\n    struct IssuanceSettings {\\n        uint256 maxManagerFee;                          // Max issue/redeem fee defined on instantiation\\n        uint256 managerIssueFee;                        // Current manager issuance fees in precise units (10^16 = 1%)\\n        uint256 managerRedeemFee;                       // Current manager redeem fees in precise units (10^16 = 1%)\\n        address[] moduleIssuanceHooks;                  // Array of modules that are registered with this module\\n        mapping(address => bool) isModuleHook;          // Mapping of modules to if they've registered a hook\\n        IManagerIssuanceHook managerIssuanceHook;       // Instance of manager defined hook, can hold arbitrary logic\\n        address feeRecipient;                           // Address that receives all manager issue and redeem fees\\n    }\\n\\n    /* ============ Events ============ */\\n\\n    event SetTokenIssued(\\n        ISetToken indexed _setToken,\\n        address indexed _issuer,\\n        address indexed _to,\\n        address _hookContract,\\n        uint256 _quantity,\\n        uint256 _managerFee,\\n        uint256 _protocolFee\\n    );\\n    event SetTokenRedeemed(\\n        ISetToken indexed _setToken,\\n        address indexed _redeemer,\\n        address indexed _to,\\n        address _hookContract,\\n        uint256 _quantity,\\n        uint256 _managerFee,\\n        uint256 _protocolFee\\n    );\\n    event FeeRecipientUpdated(ISetToken indexed _setToken, address _newFeeRecipient);\\n    event IssueFeeUpdated(ISetToken indexed _setToken, uint256 _newIssueFee);\\n    event RedeemFeeUpdated(ISetToken indexed _setToken, uint256 _newRedeemFee);\\n\\n    /* ============ Constants ============ */\\n\\n    uint256 private constant ISSUANCE_MODULE_PROTOCOL_FEE_SPLIT_INDEX = 0;\\n\\n    /* ============ State ============ */\\n\\n    mapping(ISetToken => IssuanceSettings) public issuanceSettings;\\n\\n    /* ============ Constructor ============ */\\n\\n    constructor(IController _controller) ModuleBase(_controller) { this; }\\n\\n    /* ============ External Functions ============ */\\n\\n    /**\\n     * Deposits components to the SetToken, replicates any external module component positions and mints\\n     * the SetToken. If the token has a debt position all collateral will be transferred in first then debt\\n     * will be returned to the minting address. If specified, a fee will be charged on issuance.\\n     *\\n     * @param _setToken         Instance of the SetToken to issue\\n     * @param _quantity         Quantity of SetToken to issue\\n     * @param _to               Address to mint SetToken to\\n     */\\n    function issue(\\n        ISetToken _setToken,\\n        uint256 _quantity,\\n        address _to\\n    )\\n        external\\n        virtual\\n        nonReentrant\\n        onlyValidAndInitializedSet(_setToken)\\n    {\\n        if (_quantity == 0) revert DebtIssuanceModule__ZeroQuantity(address(this));\\n\\n        address hookContract = _callManagerPreIssueHooks(_setToken, _quantity, msg.sender, _to);\\n\\n        _callModulePreIssueHooks(_setToken, _quantity);\\n\\n        (\\n            uint256 quantityWithFees,\\n            uint256 managerFee,\\n            uint256 protocolFee\\n        ) = calculateTotalFees(_setToken, _quantity, true);\\n\\n        (\\n            address[] memory components,\\n            uint256[] memory equityUnits,\\n            uint256[] memory debtUnits\\n        ) = _calculateRequiredComponentIssuanceUnits(_setToken, quantityWithFees, true);\\n\\n        _resolveEquityPositions(_setToken, quantityWithFees, _to, true, components, equityUnits);\\n        _resolveDebtPositions(_setToken, quantityWithFees, true, components, debtUnits);\\n        _resolveFees(_setToken, managerFee, protocolFee);\\n\\n        _setToken.mint(_to, _quantity);\\n\\n        emit SetTokenIssued(\\n            _setToken,\\n            msg.sender,\\n            _to,\\n            hookContract,\\n            _quantity,\\n            managerFee,\\n            protocolFee\\n        );\\n    }\\n\\n    /**\\n     * Returns components from the SetToken, unwinds any external module component positions and burns the SetToken.\\n     * If the token has debt positions, the module transfers in the required debt amounts from the caller and uses\\n     * those funds to repay the debts on behalf of the SetToken. All debt will be paid down first then equity positions\\n     * will be returned to the minting address. If specified, a fee will be charged on redeem.\\n     *\\n     * @param _setToken         Instance of the SetToken to redeem\\n     * @param _quantity         Quantity of SetToken to redeem\\n     * @param _to               Address to send collateral to\\n     */\\n    function redeem(\\n        ISetToken _setToken,\\n        uint256 _quantity,\\n        address _to\\n    )\\n        external\\n        virtual\\n        nonReentrant\\n        onlyValidAndInitializedSet(_setToken)\\n    {\\n        if (_quantity == 0) revert DebtIssuanceModule__ZeroQuantity(address(this));\\n\\n        address hookContract = _callManagerPreRedeemHooks(_setToken, msg.sender);\\n\\n        _callModulePreRedeemHooks(_setToken, _quantity);\\n\\n        // Place burn after pre-redeem hooks because burning tokens may lead to false accounting of synced positions\\n        _setToken.burn(msg.sender, _quantity);\\n\\n        (\\n            uint256 quantityNetFees,\\n            uint256 managerFee,\\n            uint256 protocolFee\\n        ) = calculateTotalFees(_setToken, _quantity, false);\\n\\n        (\\n            address[] memory components,\\n            uint256[] memory equityUnits,\\n            uint256[] memory debtUnits\\n        ) = _calculateRequiredComponentIssuanceUnits(_setToken, quantityNetFees, false);\\n\\n        _resolveDebtPositions(_setToken, quantityNetFees, false, components, debtUnits);\\n        _resolveEquityPositions(_setToken, quantityNetFees, _to, false, components, equityUnits);\\n        _resolveFees(_setToken, managerFee, protocolFee);\\n\\n        emit SetTokenRedeemed(\\n            _setToken,\\n            msg.sender,\\n            _to,\\n            hookContract,\\n            _quantity,\\n            managerFee,\\n            protocolFee\\n        );\\n    }\\n\\n    /**\\n     * MANAGER ONLY: Updates address receiving issue/redeem fees for a given SetToken.\\n     *\\n     * @param _setToken             Instance of the SetToken to update fee recipient\\n     * @param _newFeeRecipient      New fee recipient address\\n     */\\n    function updateFeeRecipient(\\n        ISetToken _setToken,\\n        address _newFeeRecipient\\n    )\\n        external\\n        onlyManagerAndValidSet(_setToken)\\n    {\\n        if (_newFeeRecipient == issuanceSettings[_setToken].feeRecipient) revert DebtIssuanceModule__FeeRecipientUnchanged(address(this));\\n        if (_newFeeRecipient == address(0)) revert DebtIssuanceModule__ZeroAddress(address(this));\\n\\n        issuanceSettings[_setToken].feeRecipient = _newFeeRecipient;\\n\\n        emit FeeRecipientUpdated(_setToken, _newFeeRecipient);\\n    }\\n\\n    /**\\n     * MANAGER ONLY: Updates issue fee for passed SetToken\\n     *\\n     * @param _setToken             Instance of the SetToken to update issue fee\\n     * @param _newIssueFee          New fee amount in preciseUnits (1% = 10^16)\\n     */\\n    function updateIssueFee(\\n        ISetToken _setToken,\\n        uint256 _newIssueFee\\n    )\\n        external\\n        onlyManagerAndValidSet(_setToken)\\n    {\\n        if (_newIssueFee > issuanceSettings[_setToken].maxManagerFee) revert DebtIssuanceModule__FeeTooHigh(address(this), issuanceSettings[_setToken].maxManagerFee);\\n        if (_newIssueFee == issuanceSettings[_setToken].managerIssueFee) revert DebtIssuanceModule__FeeUnchanged(address(this));\\n\\n        issuanceSettings[_setToken].managerIssueFee = _newIssueFee;\\n\\n        emit IssueFeeUpdated(_setToken, _newIssueFee);\\n    }\\n\\n    /**\\n     * MANAGER ONLY: Updates redeem fee for passed SetToken\\n     *\\n     * @param _setToken             Instance of the SetToken to update redeem fee\\n     * @param _newRedeemFee         New fee amount in preciseUnits (1% = 10^16)\\n     */\\n    function updateRedeemFee(\\n        ISetToken _setToken,\\n        uint256 _newRedeemFee\\n    )\\n        external\\n        onlyManagerAndValidSet(_setToken)\\n    {\\n        if (_newRedeemFee > issuanceSettings[_setToken].maxManagerFee) revert DebtIssuanceModule__FeeTooHigh(address(this), issuanceSettings[_setToken].maxManagerFee);\\n        if (_newRedeemFee == issuanceSettings[_setToken].managerRedeemFee) revert DebtIssuanceModule__FeeUnchanged(address(this));\\n\\n        issuanceSettings[_setToken].managerRedeemFee = _newRedeemFee;\\n\\n        emit RedeemFeeUpdated(_setToken, _newRedeemFee);\\n    }\\n\\n    /**\\n     * MODULE ONLY: Adds calling module to array of modules that require they be called before component hooks are\\n     * called. Can be used to sync debt positions before issuance.\\n     *\\n     * @param _setToken             Instance of the SetToken to issue\\n     */\\n    function registerToIssuanceModule(ISetToken _setToken) external onlyModule(_setToken) onlyValidAndInitializedSet(_setToken) {\\n        if (issuanceSettings[_setToken].isModuleHook[msg.sender]) revert DebtIssuanceModule__ModuleHookExists(address(this));\\n        issuanceSettings[_setToken].moduleIssuanceHooks.push(msg.sender);\\n        issuanceSettings[_setToken].isModuleHook[msg.sender] = true;\\n    }\\n\\n    /**\\n     * MODULE ONLY: Removes calling module from array of modules that require they be called before component hooks are\\n     * called.\\n     *\\n     * @param _setToken             Instance of the SetToken to issue\\n     */\\n    function unregisterFromIssuanceModule(ISetToken _setToken) external onlyModule(_setToken) onlyValidAndInitializedSet(_setToken) {\\n        if (!issuanceSettings[_setToken].isModuleHook[msg.sender]) revert DebtIssuanceModule__ModuleHookInvalid(address(this), msg.sender);\\n        issuanceSettings[_setToken].moduleIssuanceHooks.removeStorage(msg.sender);\\n        issuanceSettings[_setToken].isModuleHook[msg.sender] = false;\\n    }\\n\\n    /**\\n     * MANAGER ONLY: Initializes this module to the SetToken with issuance-related hooks and fee information. Only callable\\n     * by the SetToken's manager. Hook addresses are optional. Address(0) means that no hook will be called\\n     *\\n     * @param _setToken                     Instance of the SetToken to issue\\n     * @param _maxManagerFee                Maximum fee that can be charged on issue and redeem\\n     * @param _managerIssueFee              Fee to charge on issuance\\n     * @param _managerRedeemFee             Fee to charge on redemption\\n     * @param _feeRecipient                 Address to send fees to\\n     * @param _managerIssuanceHook          Instance of the Manager Contract with the Pre-Issuance Hook function\\n     */\\n    function initialize(\\n        ISetToken _setToken,\\n        uint256 _maxManagerFee,\\n        uint256 _managerIssueFee,\\n        uint256 _managerRedeemFee,\\n        address _feeRecipient,\\n        IManagerIssuanceHook _managerIssuanceHook\\n    )\\n        external\\n        onlySetManager(_setToken, msg.sender)\\n        onlyValidAndPendingSet(_setToken)\\n    {\\n        if (_managerIssueFee > _maxManagerFee) revert DebtIssuanceModule__FeeTooHigh(address(this), _maxManagerFee);\\n        if (_managerRedeemFee > _maxManagerFee) revert DebtIssuanceModule__FeeTooHigh(address(this), _maxManagerFee);\\n\\n        IssuanceSettings storage _issuanceSettings = issuanceSettings[_setToken];\\n        _issuanceSettings.maxManagerFee = _maxManagerFee;\\n        _issuanceSettings.managerIssueFee = _managerIssueFee;\\n        _issuanceSettings.managerRedeemFee = _managerRedeemFee;\\n        _issuanceSettings.feeRecipient = _feeRecipient;\\n        _issuanceSettings.managerIssuanceHook = _managerIssuanceHook;\\n        _issuanceSettings.moduleIssuanceHooks = new address[](0);\\n\\n        _setToken.initializeModule();\\n    }\\n\\n    /**\\n     * SET TOKEN ONLY: Allows removal of module (and deletion of state) if no other modules are registered.\\n     */\\n    function removeModule() external override {\\n        uint256 numModules = issuanceSettings[ISetToken(msg.sender)].moduleIssuanceHooks.length;\\n        if (numModules != 0) revert DebtIssuanceModule__ModuleHooksExist(address(this), numModules);\\n        delete issuanceSettings[ISetToken(msg.sender)];\\n    }\\n\\n    /* ============ External View Functions ============ */\\n\\n    /**\\n     * Calculates the manager fee, protocol fee and resulting totalQuantity to use when calculating unit amounts. If fees are charged they\\n     * are added to the total issue quantity, for example 1% fee on 100 Sets means 101 Sets are minted by caller, the _to address receives\\n     * 100 and the feeRecipient receives 1. Conversely, on redemption the redeemer will only receive the collateral that collateralizes 99\\n     * Sets, while the additional Set is given to the feeRecipient.\\n     *\\n     * @param _setToken                 Instance of the SetToken to issue\\n     * @param _quantity                 Amount of SetToken issuer wants to receive/redeem\\n     * @param _isIssue                  If issuing or redeeming\\n     *\\n     * @return totalQuantity           Total amount of Sets to be issued/redeemed with fee adjustment\\n     * @return managerFee              Sets minted to the manager\\n     * @return protocolFee             Sets minted to the protocol\\n     */\\n    function calculateTotalFees(\\n        ISetToken _setToken,\\n        uint256 _quantity,\\n        bool _isIssue\\n    )\\n        public\\n        view\\n        returns (uint256 totalQuantity, uint256 managerFee, uint256 protocolFee)\\n    {\\n        IssuanceSettings storage setIssuanceSettings = issuanceSettings[_setToken];\\n        uint256 protocolFeeSplit = controller.getModuleFee(address(this), ISSUANCE_MODULE_PROTOCOL_FEE_SPLIT_INDEX);\\n        uint256 totalFeeRate = _isIssue ? setIssuanceSettings.managerIssueFee : setIssuanceSettings.managerRedeemFee;\\n\\n        uint256 totalFee = totalFeeRate.preciseMul(_quantity);\\n        protocolFee = totalFee.preciseMul(protocolFeeSplit);\\n        managerFee = totalFee - protocolFee;\\n\\n        totalQuantity = _isIssue ? _quantity + (totalFee) : _quantity - totalFee;\\n    }\\n\\n    /**\\n     * Calculates the amount of each component needed to collateralize passed issue quantity plus fees of Sets as well as amount of debt\\n     * that will be returned to caller. Values DO NOT take into account any updates from pre action manager or module hooks.\\n     *\\n     * @param _setToken         Instance of the SetToken to issue\\n     * @param _quantity         Amount of Sets to be issued\\n     *\\n     * @return address[]        Array of component addresses making up the Set\\n     * @return uint256[]        Array of equity notional amounts of each component, respectively, represented as uint256\\n     * @return uint256[]        Array of debt notional amounts of each component, respectively, represented as uint256\\n     */\\n    function getRequiredComponentIssuanceUnits(\\n        ISetToken _setToken,\\n        uint256 _quantity\\n    )\\n        external\\n        view\\n        virtual\\n        returns (address[] memory, uint256[] memory, uint256[] memory)\\n    {\\n        (\\n            uint256 totalQuantity,,\\n        ) = calculateTotalFees(_setToken, _quantity, true);\\n\\n        return _calculateRequiredComponentIssuanceUnits(_setToken, totalQuantity, true);\\n    }\\n\\n    /**\\n     * Calculates the amount of each component will be returned on redemption net of fees as well as how much debt needs to be paid down to.\\n     * redeem. Values DO NOT take into account any updates from pre action manager or module hooks.\\n     *\\n     * @param _setToken         Instance of the SetToken to issue\\n     * @param _quantity         Amount of Sets to be redeemed\\n     *\\n     * @return address[]        Array of component addresses making up the Set\\n     * @return uint256[]        Array of equity notional amounts of each component, respectively, represented as uint256\\n     * @return uint256[]        Array of debt notional amounts of each component, respectively, represented as uint256\\n     */\\n    function getRequiredComponentRedemptionUnits(\\n        ISetToken _setToken,\\n        uint256 _quantity\\n    )\\n        external\\n        view\\n        virtual\\n        returns (address[] memory, uint256[] memory, uint256[] memory)\\n    {\\n        (\\n            uint256 totalQuantity,,\\n        ) = calculateTotalFees(_setToken, _quantity, false);\\n\\n        return _calculateRequiredComponentIssuanceUnits(_setToken, totalQuantity, false);\\n    }\\n\\n    function getModuleIssuanceHooks(ISetToken _setToken) external view returns(address[] memory) {\\n        return issuanceSettings[_setToken].moduleIssuanceHooks;\\n    }\\n\\n    function isModuleIssuanceHook(ISetToken _setToken, address _hook) external view returns(bool) {\\n        return issuanceSettings[_setToken].isModuleHook[_hook];\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    /**\\n     * Calculates the amount of each component needed to collateralize passed issue quantity of Sets as well as amount of debt that will\\n     * be returned to caller. Can also be used to determine how much collateral will be returned on redemption as well as how much debt\\n     * needs to be paid down to redeem.\\n     *\\n     * @param _setToken         Instance of the SetToken to issue\\n     * @param _quantity         Amount of Sets to be issued/redeemed\\n     * @param _isIssue          Whether Sets are being issued or redeemed\\n     *\\n     * @return address[]        Array of component addresses making up the Set\\n     * @return uint256[]        Array of equity notional amounts of each component, respectively, represented as uint256\\n     * @return uint256[]        Array of debt notional amounts of each component, respectively, represented as uint256\\n     */\\n    function _calculateRequiredComponentIssuanceUnits(\\n        ISetToken _setToken,\\n        uint256 _quantity,\\n        bool _isIssue\\n    )\\n        internal\\n        view\\n        returns (address[] memory, uint256[] memory, uint256[] memory)\\n    {\\n        (\\n            address[] memory components,\\n            uint256[] memory equityUnits,\\n            uint256[] memory debtUnits\\n        ) = _getTotalIssuanceUnits(_setToken);\\n\\n        uint256 componentsLength = components.length;\\n        uint256[] memory totalEquityUnits = new uint256[](componentsLength);\\n        uint256[] memory totalDebtUnits = new uint256[](componentsLength);\\n        for (uint256 i; i < componentsLength; ) {\\n            // Use preciseMulCeil to round up to ensure overcollateration when small issue quantities are provided\\n            // and preciseMul to round down to ensure overcollateration when small redeem quantities are provided\\n            totalEquityUnits[i] = _isIssue ?\\n                equityUnits[i].preciseMulCeil(_quantity) :\\n                equityUnits[i].preciseMul(_quantity);\\n\\n            totalDebtUnits[i] = _isIssue ?\\n                debtUnits[i].preciseMul(_quantity) :\\n                debtUnits[i].preciseMulCeil(_quantity);\\n            unchecked { ++i; }\\n        }\\n\\n        return (components, totalEquityUnits, totalDebtUnits);\\n    }\\n\\n    /**\\n     * Sums total debt and equity units for each component, taking into account default and external positions.\\n     *\\n     * @param _setToken         Instance of the SetToken to issue\\n     *\\n     * @return address[]        Array of component addresses making up the Set\\n     * @return uint256[]        Array of equity unit amounts of each component, respectively, represented as uint256\\n     * @return uint256[]        Array of debt unit amounts of each component, respectively, represented as uint256\\n     */\\n    function _getTotalIssuanceUnits(\\n        ISetToken _setToken\\n    )\\n        internal\\n        view\\n        returns (address[] memory, uint256[] memory, uint256[] memory)\\n    {\\n        address[] memory components = _setToken.getComponents();\\n        uint256 componentsLength = components.length;\\n\\n        uint256[] memory equityUnits = new uint256[](componentsLength);\\n        uint256[] memory debtUnits = new uint256[](componentsLength);\\n\\n        for (uint256 i; i < componentsLength; ) {\\n            address component = components[i];\\n            int256 cumulativeEquity = _setToken.getDefaultPositionRealUnit(component);\\n            int256 cumulativeDebt;\\n            address[] memory externalPositions = _setToken.getExternalPositionModules(component);\\n\\n            if (externalPositions.length > 0) {\\n                for (uint256 j; j < externalPositions.length;) {\\n                    int256 externalPositionUnit = _setToken.getExternalPositionRealUnit(component, externalPositions[j]);\\n\\n                    // If positionUnit < 1 it will be \\\"added\\\" to debt position\\n                    if (externalPositionUnit > 0) {\\n                        cumulativeEquity = cumulativeEquity + externalPositionUnit;\\n                    } else {\\n                        cumulativeDebt = cumulativeDebt + externalPositionUnit;\\n                    }\\n                    unchecked { ++j; }\\n                }\\n            }\\n\\n            equityUnits[i] = cumulativeEquity.toUint256();\\n            debtUnits[i] = (cumulativeDebt * -1).toUint256();\\n            unchecked { ++i; }\\n        }\\n\\n        return (components, equityUnits, debtUnits);\\n    }\\n\\n    /**\\n     * Resolve equity positions associated with SetToken. On issuance, the total equity position for an asset (including default and external\\n     * positions) is transferred in. Then any external position hooks are called to transfer the external positions to their necessary place.\\n     * On redemption all external positions are recalled by the external position hook, then those position plus any default position are\\n     * transferred back to the _to address.\\n     */\\n    function _resolveEquityPositions(\\n        ISetToken _setToken,\\n        uint256 _quantity,\\n        address _to,\\n        bool _isIssue,\\n        address[] memory _components,\\n        uint256[] memory _componentEquityQuantities\\n    )\\n        internal\\n    {\\n        uint256 componentsLength = _components.length;\\n        for (uint256 i; i < componentsLength; ) {\\n            address component = _components[i];\\n            uint256 componentQuantity = _componentEquityQuantities[i];\\n            if (componentQuantity > 0) {\\n                if (_isIssue) {\\n                    transferFrom(\\n                        IERC20(component),\\n                        msg.sender,\\n                        address(_setToken),\\n                        componentQuantity\\n                    );\\n\\n                    _executeExternalPositionHooks(_setToken, _quantity, IERC20(component), true, true);\\n                } else {\\n                    _executeExternalPositionHooks(_setToken, _quantity, IERC20(component), false, true);\\n\\n                    _setToken.strictInvokeTransfer(\\n                        component,\\n                        _to,\\n                        componentQuantity\\n                    );\\n                }\\n            }\\n            unchecked { ++i; }\\n        }\\n    }\\n\\n    /**\\n     * Resolve debt positions associated with SetToken. On issuance, debt positions are entered into by calling the external position hook. The\\n     * resulting debt is then returned to the calling address. On redemption, the module transfers in the required debt amount from the caller\\n     * and uses those funds to repay the debt on behalf of the SetToken.\\n     */\\n    function _resolveDebtPositions(\\n        ISetToken _setToken,\\n        uint256 _quantity,\\n        bool _isIssue,\\n        address[] memory _components,\\n        uint256[] memory _componentDebtQuantities\\n    )\\n        internal\\n    {\\n        uint256 componentsLength = _components.length;\\n        for (uint256 i; i < componentsLength; ) {\\n            address component = _components[i];\\n            uint256 componentQuantity = _componentDebtQuantities[i];\\n            if (componentQuantity > 0) {\\n                if (_isIssue) {\\n                    _executeExternalPositionHooks(_setToken, _quantity, IERC20(component), true, false);\\n                    _setToken.strictInvokeTransfer(\\n                        component,\\n                        msg.sender,\\n                        componentQuantity\\n                    );\\n                } else {\\n                    transferFrom(\\n                        IERC20(component),\\n                        msg.sender,\\n                        address(_setToken),\\n                        componentQuantity\\n                    );\\n                    _executeExternalPositionHooks(_setToken, _quantity, IERC20(component), false, false);\\n                }\\n            }\\n            unchecked { ++i; }\\n        }\\n    }\\n\\n    /**\\n     * If any manager fees mints Sets to the defined feeRecipient. If protocol fee is enabled mints Sets to protocol\\n     * feeRecipient.\\n     */\\n    function _resolveFees(ISetToken _setToken, uint256 managerFee, uint256 protocolFee) internal {\\n        if (managerFee > 0) {\\n            _setToken.mint(issuanceSettings[_setToken].feeRecipient, managerFee);\\n\\n            // Protocol fee check is inside manager fee check because protocol fees are only collected on manager fees\\n            if (protocolFee > 0) {\\n                _setToken.mint(controller.feeRecipient(), protocolFee);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * If a pre-issue hook has been configured, call the external-protocol contract. Pre-issue hook logic\\n     * can contain arbitrary logic including validations, external function calls, etc.\\n     */\\n    function _callManagerPreIssueHooks(\\n        ISetToken _setToken,\\n        uint256 _quantity,\\n        address _caller,\\n        address _to\\n    )\\n        internal\\n        returns(address)\\n    {\\n        IManagerIssuanceHook preIssueHook = issuanceSettings[_setToken].managerIssuanceHook;\\n        if (address(preIssueHook) != address(0)) {\\n            preIssueHook.invokePreIssueHook(_setToken, _quantity, _caller, _to);\\n            return address(preIssueHook);\\n        }\\n\\n        return address(0);\\n    }\\n\\n    /**\\n     * If a pre-redeem hook has been configured, call the external-protocol contract. Pre-redeem hook logic\\n     * can contain arbitrary logic including validations, external function calls, etc.\\n     */\\n    function _callManagerPreRedeemHooks(\\n        ISetToken _setToken,\\n        address _caller\\n    )\\n        internal\\n        returns(address)\\n    {\\n        IManagerIssuanceHook preRedeemHook = issuanceSettings[_setToken].managerIssuanceHook;\\n        if (address(preRedeemHook) != address(0)) {\\n            preRedeemHook.invokePreRedeemHook(_caller);\\n            return address(preRedeemHook);\\n        }\\n\\n        return address(0);\\n    }\\n\\n    /**\\n     * Calls all modules that have registered with the DebtIssuanceModule that have a moduleIssueHook.\\n     */\\n    function _callModulePreIssueHooks(ISetToken _setToken, uint256 _quantity) internal {\\n        address[] memory issuanceHooks = issuanceSettings[_setToken].moduleIssuanceHooks;\\n        uint256 issuanceHooksLength = issuanceHooks.length;\\n        for (uint256 i; i < issuanceHooksLength; ) {\\n            IModuleIssuanceHook(issuanceHooks[i]).moduleIssueHook(_setToken, _quantity);\\n            unchecked { ++i; }\\n        }\\n    }\\n\\n    /**\\n     * Calls all modules that have registered with the DebtIssuanceModule that have a moduleRedeemHook.\\n     */\\n    function _callModulePreRedeemHooks(ISetToken _setToken, uint256 _quantity) internal {\\n        address[] memory issuanceHooks = issuanceSettings[_setToken].moduleIssuanceHooks;\\n        uint256 issuanceHooksLength = issuanceHooks.length;\\n        for (uint256 i; i < issuanceHooksLength; ) {\\n            IModuleIssuanceHook(issuanceHooks[i]).moduleRedeemHook(_setToken, _quantity);\\n            unchecked { ++i; }\\n        }\\n    }\\n\\n    /**\\n     * For each component's external module positions, calculate the total notional quantity, and\\n     * call the module's issue hook or redeem hook.\\n     * Note: It is possible that these hooks can cause the states of other modules to change.\\n     * It can be problematic if the hook called an external function that called back into a module, resulting in state inconsistencies.\\n     */\\n    function _executeExternalPositionHooks(\\n        ISetToken _setToken,\\n        uint256 _setTokenQuantity,\\n        IERC20 _component,\\n        bool _isIssue,\\n        bool _isEquity\\n    )\\n        internal\\n    {\\n        address[] memory externalPositionModules = _setToken.getExternalPositionModules(address(_component));\\n        uint256 modulesLength = externalPositionModules.length;\\n        if (_isIssue) {\\n            for (uint256 i; i < modulesLength; ) {\\n                IModuleIssuanceHook(externalPositionModules[i]).componentIssueHook(_setToken, _setTokenQuantity, _component, _isEquity);\\n                unchecked { ++i; }\\n            }\\n        } else {\\n            for (uint256 i; i < modulesLength; ) {\\n                IModuleIssuanceHook(externalPositionModules[i]).componentRedeemHook(_setToken, _setTokenQuantity, _component, _isEquity);\\n                unchecked { ++i; }\\n            }\\n        }\\n    }\\n}\"\r\n    },\r\n    \"contracts/protocol/modules/v1/DebtIssuanceModuleV2.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2021 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\nimport { DebtIssuanceModule } from \\\"./DebtIssuanceModule.sol\\\";\\nimport { IController } from \\\"../../../interfaces/IController.sol\\\";\\nimport { Invoke } from \\\"../../lib/Invoke.sol\\\";\\nimport { ISetToken } from \\\"../../../interfaces/ISetToken.sol\\\";\\nimport { IssuanceValidationUtils } from \\\"../../lib/IssuanceValidationUtils.sol\\\";\\nimport { Position } from \\\"../../lib/Position.sol\\\";\\nimport { PreciseUnitMath } from \\\"../../../lib/PreciseUnitMath.sol\\\";\\n\\n/**\\n * @title DebtIssuanceModuleV2\\n * @author Set Protocol\\n *\\n * The DebtIssuanceModuleV2 is a module that enables users to issue and redeem SetTokens that contain default and all\\n * external positions, including debt positions. Module hooks are added to allow for syncing of positions, and component\\n * level hooks are added to ensure positions are replicated correctly. The manager can define arbitrary issuance logic\\n * in the manager hook, as well as specify issue and redeem fees.\\n *\\n * NOTE:\\n * DebtIssuanceModule contract confirms increase/decrease in balance of component held by the SetToken after every transfer in/out\\n * for each component during issuance/redemption. This contract replaces those strict checks with slightly looser checks which\\n * ensure that the SetToken remains collateralized after every transfer in/out for each component during issuance/redemption.\\n * This module should be used to issue/redeem SetToken whose one or more components return a balance value with +/-1 wei error.\\n * For example, this module can be used to issue/redeem SetTokens which has one or more aTokens as its components.\\n * The new checks do NOT apply to any transfers that are part of an external position. A token that has rounding issues may lead to\\n * reverts if it is included as an external position unless explicitly allowed in a module hook.\\n *\\n * The getRequiredComponentIssuanceUnits function on this module assumes that Default token balances will be synced on every issuance\\n * and redemption. If token balances are not being synced it will over-estimate the amount of tokens required to issue a Set.\\n *\\n * CHANGELOG\\n * - 3/30/22: Add pre-redeem hook\\n * - 4/21/23: Removed OZ SafeMath utils\\n * - 9/18/23: Upgrade to Solidity 0.8.21\\n * - 9/26/23: Added custom errors\\n */\\ncontract DebtIssuanceModuleV2 is DebtIssuanceModule {\\n    using Position for uint256;\\n    using PreciseUnitMath for uint256;\\n    using SafeCast for int256;\\n    using SafeCast for uint256;\\n    using Invoke for ISetToken;\\n\\n    /* ============ Custom Errors ============ */\\n\\n    /// @notice Emitted when a provided quantity is zero.\\n    error DebtIssuanceModuleV2__ZeroQuantity();\\n\\n    /* ============ Constructor ============ */\\n\\n    constructor(IController _controller) DebtIssuanceModule(_controller) { this; }\\n\\n    /* ============ External Functions ============ */\\n\\n    /**\\n     * Deposits components to the SetToken, replicates any external module component positions and mints\\n     * the SetToken. If the token has a debt position all collateral will be transferred in first then debt\\n     * will be returned to the minting address. If specified, a fee will be charged on issuance.\\n     *\\n     * NOTE: Overrides DebtIssuanceModule#issue external function and adds undercollateralization checks in place of the\\n     * previous default strict balances checks. The undercollateralization checks are implemented in IssuanceValidationUtils library and they\\n     * revert upon undercollateralization of the SetToken post component transfer.\\n     *\\n     * @param _setToken         Instance of the SetToken to issue\\n     * @param _quantity         Quantity of SetToken to issue\\n     * @param _to               Address to mint SetToken to\\n     */\\n    function issue(\\n        ISetToken _setToken,\\n        uint256 _quantity,\\n        address _to\\n    )\\n        external\\n        override\\n        nonReentrant\\n        onlyValidAndInitializedSet(_setToken)\\n    {\\n        if (_quantity == 0) revert DebtIssuanceModuleV2__ZeroQuantity();\\n\\n        address hookContract = _callManagerPreIssueHooks(_setToken, _quantity, msg.sender, _to);\\n\\n        _callModulePreIssueHooks(_setToken, _quantity);\\n\\n\\n        uint256 initialSetSupply = _setToken.totalSupply();\\n\\n        (\\n            uint256 quantityWithFees,\\n            uint256 managerFee,\\n            uint256 protocolFee\\n        ) = calculateTotalFees(_setToken, _quantity, true);\\n\\n        // Prevent stack too deep\\n        {\\n            (\\n                address[] memory components,\\n                uint256[] memory equityUnits,\\n                uint256[] memory debtUnits\\n            ) = _calculateRequiredComponentIssuanceUnits(_setToken, quantityWithFees, true);\\n\\n            uint256 finalSetSupply = initialSetSupply + quantityWithFees;\\n\\n            _resolveEquityPositions(_setToken, quantityWithFees, _to, true, components, equityUnits, initialSetSupply, finalSetSupply);\\n            _resolveDebtPositions(_setToken, quantityWithFees, true, components, debtUnits, initialSetSupply, finalSetSupply);\\n            _resolveFees(_setToken, managerFee, protocolFee);\\n        }\\n\\n        _setToken.mint(_to, _quantity);\\n\\n        emit SetTokenIssued(\\n            _setToken,\\n            msg.sender,\\n            _to,\\n            hookContract,\\n            _quantity,\\n            managerFee,\\n            protocolFee\\n        );\\n    }\\n\\n    /**\\n     * Returns components from the SetToken, unwinds any external module component positions and burns the SetToken.\\n     * If the token has debt positions, the module transfers in the required debt amounts from the caller and uses\\n     * those funds to repay the debts on behalf of the SetToken. All debt will be paid down first then equity positions\\n     * will be returned to the minting address. If specified, a fee will be charged on redeem.\\n     *\\n     * NOTE: Overrides DebtIssuanceModule#redeem internal function and adds undercollateralization checks in place of the\\n     * previous default strict balances checks. The undercollateralization checks are implemented in IssuanceValidationUtils library\\n     * and they revert upon undercollateralization of the SetToken post component transfer.\\n     *\\n     * @param _setToken         Instance of the SetToken to redeem\\n     * @param _quantity         Quantity of SetToken to redeem\\n     * @param _to               Address to send collateral to\\n     */\\n    function redeem(\\n        ISetToken _setToken,\\n        uint256 _quantity,\\n        address _to\\n    )\\n        external\\n        override\\n        nonReentrant\\n        onlyValidAndInitializedSet(_setToken)\\n    {\\n        if (_quantity == 0) revert DebtIssuanceModuleV2__ZeroQuantity();\\n\\n        address hookContract = _callManagerPreRedeemHooks(_setToken, msg.sender);\\n\\n        _callModulePreRedeemHooks(_setToken, _quantity);\\n\\n        uint256 initialSetSupply = _setToken.totalSupply();\\n\\n        // Place burn after pre-redeem hooks because burning tokens may lead to false accounting of synced positions\\n        _setToken.burn(msg.sender, _quantity);\\n\\n        (\\n            uint256 quantityNetFees,\\n            uint256 managerFee,\\n            uint256 protocolFee\\n        ) = calculateTotalFees(_setToken, _quantity, false);\\n\\n        // Prevent stack too deep\\n        {\\n            (\\n                address[] memory components,\\n                uint256[] memory equityUnits,\\n                uint256[] memory debtUnits\\n            ) = _calculateRequiredComponentIssuanceUnits(_setToken, quantityNetFees, false);\\n\\n            uint256 finalSetSupply = initialSetSupply - quantityNetFees;\\n\\n            _resolveDebtPositions(_setToken, quantityNetFees, false, components, debtUnits, initialSetSupply, finalSetSupply);\\n            _resolveEquityPositions(_setToken, quantityNetFees, _to, false, components, equityUnits, initialSetSupply, finalSetSupply);\\n            _resolveFees(_setToken, managerFee, protocolFee);\\n        }\\n\\n        emit SetTokenRedeemed(\\n            _setToken,\\n            msg.sender,\\n            _to,\\n            hookContract,\\n            _quantity,\\n            managerFee,\\n            protocolFee\\n        );\\n    }\\n\\n    /* ============ External View Functions ============ */\\n\\n    /**\\n     * Calculates the amount of each component needed to collateralize passed issue quantity plus fees of Sets as well as amount of debt\\n     * that will be returned to caller. Default equity alues are calculated based on token balances and not position units in order to more\\n     * closely track any accrued tokens that will be synced during issuance. External equity and debt positions will use the stored position\\n     * units. IF TOKEN VALUES ARE NOT BEING SYNCED DURING ISSUANCE THIS FUNCTION WILL OVER ESTIMATE THE AMOUNT OF REQUIRED TOKENS.\\n     *\\n     * @param _setToken         Instance of the SetToken to issue\\n     * @param _quantity         Amount of Sets to be issued\\n     *\\n     * @return address[]        Array of component addresses making up the Set\\n     * @return uint256[]        Array of equity notional amounts of each component, respectively, represented as uint256\\n     * @return uint256[]        Array of debt notional amounts of each component, respectively, represented as uint256\\n     */\\n    function getRequiredComponentIssuanceUnits(\\n        ISetToken _setToken,\\n        uint256 _quantity\\n    )\\n        external\\n        view\\n        override\\n        returns (address[] memory, uint256[] memory, uint256[] memory)\\n    {\\n        (\\n            uint256 totalQuantity,,\\n        ) = calculateTotalFees(_setToken, _quantity, true);\\n\\n        if(_setToken.totalSupply() == 0) {\\n            return _calculateRequiredComponentIssuanceUnits(_setToken, totalQuantity, true);\\n        } else {\\n            (\\n                address[] memory components,\\n                uint256[] memory equityUnits,\\n                uint256[] memory debtUnits\\n            ) = _getTotalIssuanceUnitsFromBalances(_setToken);\\n\\n            uint256 componentsLength = components.length;\\n            uint256[] memory totalEquityUnits = new uint256[](componentsLength);\\n            uint256[] memory totalDebtUnits = new uint256[](componentsLength);\\n            for (uint256 i; i < components.length; ) {\\n                // Use preciseMulCeil to round up to ensure overcollateration of equity when small issue quantities are provided\\n                // and use preciseMul to round debt calculations down to make sure we don't return too much debt to issuer\\n                totalEquityUnits[i] = equityUnits[i].preciseMulCeil(totalQuantity);\\n                totalDebtUnits[i] = debtUnits[i].preciseMul(totalQuantity);\\n                unchecked { ++i; }\\n            }\\n\\n            return (components, totalEquityUnits, totalDebtUnits);\\n        }\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    /**\\n     * Resolve equity positions associated with SetToken. On issuance, the total equity position for an asset (including default and external\\n     * positions) is transferred in. Then any external position hooks are called to transfer the external positions to their necessary place.\\n     * On redemption all external positions are recalled by the external position hook, then those position plus any default position are\\n     * transferred back to the _to address.\\n     */\\n    function _resolveEquityPositions(\\n        ISetToken _setToken,\\n        uint256 _quantity,\\n        address _to,\\n        bool _isIssue,\\n        address[] memory _components,\\n        uint256[] memory _componentEquityQuantities,\\n        uint256 _initialSetSupply,\\n        uint256 _finalSetSupply\\n    )\\n        internal\\n    {\\n        uint256 componentsLength = _components.length;\\n        for (uint256 i; i < componentsLength; ) {\\n            address component = _components[i];\\n            uint256 componentQuantity = _componentEquityQuantities[i];\\n            if (componentQuantity > 0) {\\n                if (_isIssue) {\\n                    // Call SafeERC20#safeTransferFrom instead of ExplicitERC20#transferFrom\\n                    SafeERC20.safeTransferFrom(\\n                        IERC20(component),\\n                        msg.sender,\\n                        address(_setToken),\\n                        componentQuantity\\n                    );\\n\\n                    IssuanceValidationUtils.validateCollateralizationPostTransferInPreHook(_setToken, component, _initialSetSupply, componentQuantity);\\n\\n                    _executeExternalPositionHooks(_setToken, _quantity, IERC20(component), true, true);\\n                } else {\\n                    _executeExternalPositionHooks(_setToken, _quantity, IERC20(component), false, true);\\n\\n                    // Call Invoke#invokeTransfer instead of Invoke#strictInvokeTransfer\\n                    _setToken.invokeTransfer(component, _to, componentQuantity);\\n\\n                    IssuanceValidationUtils.validateCollateralizationPostTransferOut(_setToken, component, _finalSetSupply);\\n                }\\n            }\\n            unchecked { ++i; }\\n        }\\n    }\\n\\n    /**\\n     * Resolve debt positions associated with SetToken. On issuance, debt positions are entered into by calling the external position hook. The\\n     * resulting debt is then returned to the calling address. On redemption, the module transfers in the required debt amount from the caller\\n     * and uses those funds to repay the debt on behalf of the SetToken.\\n     */\\n    function _resolveDebtPositions(\\n        ISetToken _setToken,\\n        uint256 _quantity,\\n        bool _isIssue,\\n        address[] memory _components,\\n        uint256[] memory _componentDebtQuantities,\\n        uint256 _initialSetSupply,\\n        uint256 _finalSetSupply\\n    )\\n        internal\\n    {\\n        uint256 componentsLength = _components.length;\\n        for (uint256 i; i < componentsLength;) {\\n            address component = _components[i];\\n            uint256 componentQuantity = _componentDebtQuantities[i];\\n            if (componentQuantity > 0) {\\n                if (_isIssue) {\\n                    _executeExternalPositionHooks(_setToken, _quantity, IERC20(component), true, false);\\n\\n                    // Call Invoke#invokeTransfer instead of Invoke#strictInvokeTransfer\\n                    _setToken.invokeTransfer(component, msg.sender, componentQuantity);\\n\\n                    IssuanceValidationUtils.validateCollateralizationPostTransferOut(_setToken, component, _finalSetSupply);\\n                } else {\\n                    // Call SafeERC20#safeTransferFrom instead of ExplicitERC20#transferFrom\\n                    SafeERC20.safeTransferFrom(\\n                        IERC20(component),\\n                        msg.sender,\\n                        address(_setToken),\\n                        componentQuantity\\n                    );\\n\\n                    IssuanceValidationUtils.validateCollateralizationPostTransferInPreHook(_setToken, component, _initialSetSupply, componentQuantity);\\n\\n                    _executeExternalPositionHooks(_setToken, _quantity, IERC20(component), false, false);\\n                }\\n            }\\n            unchecked { ++i; }\\n        }\\n    }\\n    /**\\n     * Reimplementation of _getTotalIssuanceUnits but instead derives Default equity positions from token balances on Set instead of from\\n     * position units. This function is ONLY to be used in getRequiredComponentIssuanceUnits in order to return more accurate required\\n     * token amounts to issuers when positions are being synced on issuance.\\n     *\\n     * @param _setToken         Instance of the SetToken to issue\\n     *\\n     * @return address[]        Array of component addresses making up the Set\\n     * @return uint256[]        Array of equity unit amounts of each component, respectively, represented as uint256\\n     * @return uint256[]        Array of debt unit amounts of each component, respectively, represented as uint256\\n     */\\n    function _getTotalIssuanceUnitsFromBalances(\\n        ISetToken _setToken\\n    )\\n        internal\\n        view\\n        returns (address[] memory, uint256[] memory, uint256[] memory)\\n    {\\n        address[] memory components = _setToken.getComponents();\\n        uint256 componentsLength = components.length;\\n\\n        uint256[] memory equityUnits = new uint256[](componentsLength);\\n        uint256[] memory debtUnits = new uint256[](componentsLength);\\n\\n        uint256 totalSupply = _setToken.totalSupply();\\n\\n        for (uint256 i; i < componentsLength; ) {\\n            address component = components[i];\\n            int256 cumulativeEquity = \\n                    totalSupply.getDefaultPositionUnit(IERC20(component).balanceOf(address(_setToken))).toInt256();\\n            int256 cumulativeDebt;\\n            address[] memory externalPositions = _setToken.getExternalPositionModules(component);\\n\\n            if (externalPositions.length > 0) {\\n                for (uint256 j; j < externalPositions.length;) {\\n                    int256 externalPositionUnit = _setToken.getExternalPositionRealUnit(component, externalPositions[j]);\\n\\n                    // If positionUnit < 1 it will be \\\"added\\\" to debt position\\n                    if (externalPositionUnit > 0) {\\n                        cumulativeEquity = cumulativeEquity + externalPositionUnit;\\n                    } else {\\n                        cumulativeDebt = cumulativeDebt + externalPositionUnit;\\n                    }\\n                    unchecked { ++j; }\\n                }\\n            }\\n\\n            equityUnits[i] = cumulativeEquity.toUint256();\\n            debtUnits[i] = (cumulativeDebt * -1).toUint256();\\n            unchecked { ++i; }\\n        }\\n\\n        return (components, equityUnits, debtUnits);\\n    }\\n}\"\r\n    },\r\n    \"contracts/protocol/modules/v1/IssuanceModule.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2022 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { DebtIssuanceModuleV2 } from \\\"./DebtIssuanceModuleV2.sol\\\";\\nimport { IController } from \\\"../../../interfaces/IController.sol\\\";\\n\\n/**\\n * @title IssuanceModule\\n * @author Set Protocol\\n *\\n * The IssuanceModule is a module that enables users to issue and redeem SetTokens that contain default and all\\n * external positions, including debt positions. The manager can define arbitrary issuance logic in the manager\\n * hook, as well as specify issue and redeem fees. The manager can remove the module.\\n *\\n * CHANGELOG\\n * - 9/18/23: Upgrade to Solidity 0.8.21\\n */\\ncontract IssuanceModule is DebtIssuanceModuleV2 {\\n\\n    /* ============ Constructor ============ */\\n\\n    /**\\n     * Set state controller state variable\\n     */\\n    constructor(IController _controller) DebtIssuanceModuleV2(_controller) { this; }\\n}\\n\"\r\n    },\r\n    \"contracts/protocol/modules/v1/StreamingFeeModule.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\nimport { IController } from \\\"../../../interfaces/IController.sol\\\";\\nimport { ISetToken } from \\\"../../../interfaces/ISetToken.sol\\\";\\nimport { IStreamingFeeModule } from \\\"../../../interfaces/IStreamingFeeModule.sol\\\";\\nimport { ModuleBase } from \\\"../../lib/ModuleBase.sol\\\";\\nimport { PreciseUnitMath } from \\\"../../../lib/PreciseUnitMath.sol\\\";\\n\\n/**\\n * @title StreamingFeeModule\\n * @author Set Protocol\\n *\\n * Smart contract that accrues streaming fees for Set managers. Streaming fees are denominated as percent\\n * per year and realized as Set inflation rewarded to the manager.\\n *\\n * CHANGELOG\\n * - 4/21/23: Removed OZ SafeMath utils\\n * - 9/18/23: Upgrade to Solidity 0.8.21\\n * - 9/26/23: Added custom errors\\n */\\ncontract StreamingFeeModule is ReentrancyGuard, IStreamingFeeModule, ModuleBase {\\n    using PreciseUnitMath for uint256;\\n    using PreciseUnitMath for int256;\\n    using SafeCast for uint256;\\n\\n    /* ============ Events ============ */\\n\\n    event FeeActualized(address indexed _setToken, uint256 _managerFee, uint256 _protocolFee);\\n    event StreamingFeeUpdated(address indexed _setToken, uint256 _newStreamingFee);\\n    event FeeRecipientUpdated(address indexed _setToken, address _newFeeRecipient);\\n\\n    /* ============ Constants ============ */\\n\\n    uint256 private constant ONE_YEAR_IN_SECONDS = 365.25 days;\\n    uint256 private constant PROTOCOL_STREAMING_FEE_INDEX = 0;\\n\\n    /* ============ State Variables ============ */\\n\\n    mapping(ISetToken => FeeState) public streamingFeeStates;\\n\\n    /* ============ Constructor ============ */\\n\\n    constructor(IController _controller) ModuleBase(_controller) { this; }\\n\\n    /* ============ External Functions ============ */\\n\\n    /*\\n     * Calculates total inflation percentage then mints new Sets to the fee recipient. Position units are\\n     * then adjusted down (in magnitude) in order to ensure full collateralization. Callable by anyone.\\n     *\\n     * @param _setToken       Address of SetToken\\n     */\\n    function accrueFee(ISetToken _setToken) public nonReentrant onlyValidAndInitializedSet(_setToken) {\\n        uint256 managerFee;\\n        uint256 protocolFee;\\n\\n        if (_streamingFeePercentage(_setToken) > 0) {\\n            uint256 inflationFeePercentage = _calculateStreamingFee(_setToken);\\n\\n            // Calculate incentiveFee inflation\\n            uint256 feeQuantity = _calculateStreamingFeeInflation(_setToken, inflationFeePercentage);\\n\\n            // Mint new Sets to manager and protocol\\n            (\\n                managerFee,\\n                protocolFee\\n            ) = _mintManagerAndProtocolFee(_setToken, feeQuantity);\\n\\n            _editPositionMultiplier(_setToken, inflationFeePercentage);\\n        }\\n\\n        /* solhint-disable-next-line not-rely-on-time */\\n        streamingFeeStates[_setToken].lastStreamingFeeTimestamp = block.timestamp;\\n\\n        emit FeeActualized(address(_setToken), managerFee, protocolFee);\\n    }\\n\\n    /**\\n     * SET MANAGER ONLY. Initialize module with SetToken and set the fee state for the SetToken. Passed\\n     * _settings will have lastStreamingFeeTimestamp over-written.\\n     *\\n     * @param _setToken                 Address of SetToken\\n     * @param _settings                 FeeState struct defining fee parameters\\n     */\\n    function initialize(\\n        ISetToken _setToken,\\n        FeeState memory _settings\\n    )\\n        external\\n        onlySetManager(_setToken, msg.sender)\\n        onlyValidAndPendingSet(_setToken)\\n    {\\n        if (_settings.feeRecipient == address(0)) revert StreamingFeeModule__ZeroAddress();\\n        if (_settings.maxStreamingFeePercentage >= PreciseUnitMath.preciseUnit()) revert StreamingFeeModule__FeeTooHigh(PreciseUnitMath.preciseUnit());\\n        if (_settings.streamingFeePercentage > _settings.maxStreamingFeePercentage) revert StreamingFeeModule__FeeTooHigh(_settings.maxStreamingFeePercentage);\\n\\n        /* solhint-disable-next-line not-rely-on-time */\\n        _settings.lastStreamingFeeTimestamp = block.timestamp;\\n\\n        streamingFeeStates[_setToken] = _settings;\\n        _setToken.initializeModule();\\n    }\\n\\n    /**\\n     * Removes this module from the SetToken, via call by the SetToken. Manager's feeState is deleted. Fees\\n     * are not accrued in case reason for removing module is related to fee accrual.\\n     */\\n    function removeModule() external override {\\n        delete streamingFeeStates[ISetToken(msg.sender)];\\n    }\\n\\n    /*\\n     * Set new streaming fee. Fees accrue at current rate then new rate is set.\\n     * Fees are accrued to prevent the manager from unfairly accruing a larger percentage.\\n     *\\n     * @param _setToken       Address of SetToken\\n     * @param _newFee         New streaming fee 18 decimal precision\\n     */\\n    function updateStreamingFee(\\n        ISetToken _setToken,\\n        uint256 _newFee\\n    )\\n        external\\n        onlySetManager(_setToken, msg.sender)\\n        onlyValidAndInitializedSet(_setToken)\\n    {\\n        uint256 maxStreamingFeePercentage = _maxStreamingFeePercentage(_setToken);\\n        if (_newFee >= maxStreamingFeePercentage) revert StreamingFeeModule__FeeTooHigh(maxStreamingFeePercentage);\\n        accrueFee(_setToken);\\n\\n        streamingFeeStates[_setToken].streamingFeePercentage = _newFee;\\n\\n        emit StreamingFeeUpdated(address(_setToken), _newFee);\\n    }\\n\\n    /*\\n     * Set new fee recipient.\\n     *\\n     * @param _setToken             Address of SetToken\\n     * @param _newFeeRecipient      New fee recipient\\n     */\\n    function updateFeeRecipient(ISetToken _setToken, address _newFeeRecipient)\\n        external\\n        onlySetManager(_setToken, msg.sender)\\n        onlyValidAndInitializedSet(_setToken)\\n    {\\n        if (_newFeeRecipient == address(0)) revert StreamingFeeModule__ZeroAddress();\\n\\n        streamingFeeStates[_setToken].feeRecipient = _newFeeRecipient;\\n\\n        emit FeeRecipientUpdated(address(_setToken), _newFeeRecipient);\\n    }\\n\\n    /*\\n     * Calculates total inflation percentage in order to accrue fees to manager.\\n     *\\n     * @param _setToken       Address of SetToken\\n     * @return  uint256       Percent inflation of supply\\n     */\\n    function getFee(ISetToken _setToken) external view returns (uint256) {\\n        return _calculateStreamingFee(_setToken);\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    /**\\n     * Calculates streaming fee by multiplying streamingFeePercentage by the elapsed amount of time since the last fee\\n     * was collected divided by one year in seconds, since the fee is a yearly fee.\\n     *\\n     * @param  _setToken          Address of Set to have feeState updated\\n     * @return uint256            Streaming fee denominated in percentage of totalSupply\\n     */\\n    function _calculateStreamingFee(ISetToken _setToken) internal view returns(uint256) {\\n        /* solhint-disable-next-line not-rely-on-time */\\n        uint256 timeSinceLastFee = block.timestamp - _lastStreamingFeeTimestamp(_setToken);\\n\\n        // Streaming fee is streaming fee times years since last fee\\n        return timeSinceLastFee * _streamingFeePercentage(_setToken) / ONE_YEAR_IN_SECONDS;\\n    }\\n\\n    /**\\n     * Returns the new incentive fee denominated in the number of SetTokens to mint. The calculation for the fee involves\\n     * implying mint quantity so that the feeRecipient owns the fee percentage of the entire supply of the Set.\\n     *\\n     * The formula to solve for fee is:\\n     * (feeQuantity / feeQuantity) + totalSupply = fee / scaleFactor\\n     *\\n     * The simplified formula utilized below is:\\n     * feeQuantity = fee * totalSupply / (scaleFactor - fee)\\n     *\\n     * @param   _setToken               SetToken instance\\n     * @param   _feePercentage          Fee levied to feeRecipient\\n     * @return  uint256                 New RebalancingSet issue quantity\\n     */\\n    function _calculateStreamingFeeInflation(\\n        ISetToken _setToken,\\n        uint256 _feePercentage\\n    )\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 totalSupply = _setToken.totalSupply();\\n\\n        // fee * totalSupply\\n        uint256 a = _feePercentage * totalSupply;\\n\\n        // ScaleFactor (10e18) - fee\\n        uint256 b = PreciseUnitMath.preciseUnit() - _feePercentage;\\n\\n        return a / b;\\n    }\\n\\n    /**\\n     * Mints sets to both the manager and the protocol. Protocol takes a percentage fee of the total amount of Sets\\n     * minted to manager.\\n     *\\n     * @param   _setToken               SetToken instance\\n     * @param   _feeQuantity            Amount of Sets to be minted as fees\\n     * @return  uint256                 Amount of Sets accrued to manager as fee\\n     * @return  uint256                 Amount of Sets accrued to protocol as fee\\n     */\\n    function _mintManagerAndProtocolFee(ISetToken _setToken, uint256 _feeQuantity) internal returns (uint256, uint256) {\\n        address protocolFeeRecipient = controller.feeRecipient();\\n        uint256 protocolFee = controller.getModuleFee(address(this), PROTOCOL_STREAMING_FEE_INDEX);\\n\\n        uint256 protocolFeeAmount = _feeQuantity.preciseMul(protocolFee);\\n        uint256 managerFeeAmount = _feeQuantity - protocolFeeAmount;\\n\\n        _setToken.mint(_feeRecipient(_setToken), managerFeeAmount);\\n\\n        if (protocolFeeAmount > 0) {\\n            _setToken.mint(protocolFeeRecipient, protocolFeeAmount);\\n        }\\n\\n        return (managerFeeAmount, protocolFeeAmount);\\n    }\\n\\n    /**\\n     * Calculates new position multiplier according to following formula:\\n     *\\n     * newMultiplier = oldMultiplier * (1-inflationFee)\\n     *\\n     * This reduces position sizes to offset increase in supply due to fee collection.\\n     *\\n     * @param   _setToken               SetToken instance\\n     * @param   _inflationFee           Fee inflation rate\\n     */\\n    function _editPositionMultiplier(ISetToken _setToken, uint256 _inflationFee) internal {\\n        int256 currentMultipler = _setToken.positionMultiplier();\\n        int256 newMultiplier = currentMultipler.preciseMul((PreciseUnitMath.preciseUnit() - _inflationFee).toInt256());\\n\\n        _setToken.editPositionMultiplier(newMultiplier);\\n    }\\n\\n    function _feeRecipient(ISetToken _set) internal view returns (address) {\\n        return streamingFeeStates[_set].feeRecipient;\\n    }\\n\\n    function _lastStreamingFeeTimestamp(ISetToken _set) internal view returns (uint256) {\\n        return streamingFeeStates[_set].lastStreamingFeeTimestamp;\\n    }\\n\\n    function _maxStreamingFeePercentage(ISetToken _set) internal view returns (uint256) {\\n        return streamingFeeStates[_set].maxStreamingFeePercentage;\\n    }\\n\\n    function _streamingFeePercentage(ISetToken _set) internal view returns (uint256) {\\n        return streamingFeeStates[_set].streamingFeePercentage;\\n    }\\n\\n    function feeStates(ISetToken _setToken) external view returns (FeeState memory) {\\n        return streamingFeeStates[_setToken];\\n    }\\n}\"\r\n    },\r\n    \"contracts/protocol/PriceOracle.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { Ownable2Step } from \\\"@openzeppelin/contracts/access/Ownable2Step.sol\\\";\\n\\nimport { AddressArrayUtils } from \\\"../lib/AddressArrayUtils.sol\\\";\\nimport { IController } from \\\"../interfaces/IController.sol\\\";\\nimport { IOracle } from \\\"../interfaces/IOracle.sol\\\";\\nimport { IOracleAdapter } from \\\"../interfaces/IOracleAdapter.sol\\\";\\nimport { IPriceOracle } from \\\"../interfaces/IPriceOracle.sol\\\";\\nimport { PreciseUnitMath } from \\\"../lib/PreciseUnitMath.sol\\\";\\n\\n/**\\n * @title PriceOracle\\n * @author Set Protocol\\n *\\n * Contract that returns the price for any given asset pair. Price is retrieved either directly from an oracle,\\n * calculated using common asset pairs, or uses external data to calculate price.\\n * Note: Prices are returned in preciseUnits (i.e. 18 decimals of precision)\\n *\\n * CHANGELOG\\n * - 9/13/23: Switch from Ownable to Ownable2Step\\n * - 9/18/23: Upgrade to Solidity 0.8.21\\n * - 9/26/23: Added custom errors\\n */\\ncontract PriceOracle is IPriceOracle, Ownable2Step {\\n    using PreciseUnitMath for uint256;\\n    using AddressArrayUtils for address[];\\n\\n    /* ============ Events ============ */\\n\\n    event PairAdded(address indexed _assetOne, address indexed _assetTwo, address _oracle);\\n    event PairRemoved(address indexed _assetOne, address indexed _assetTwo, address _oracle);\\n    event PairEdited(address indexed _assetOne, address indexed _assetTwo, address _newOracle);\\n    event AdapterAdded(address _adapter);\\n    event AdapterRemoved(address _adapter);\\n    event MasterQuoteAssetEdited(address _newMasterQuote);\\n\\n    /* ============ State Variables ============ */\\n\\n    // Address of the Controller contract\\n    IController public immutable CONTROLLER;\\n\\n    // Mapping between assetA/assetB and its associated Price Oracle\\n    // Asset 1 -> Asset 2 -> IOracle Interface\\n    mapping(address => mapping(address => IOracle)) public oracles;\\n\\n    // List of IOracleAdapters used to return prices of third party protocols (e.g. Uniswap, Compound, Balancer)\\n    address[] public adapters;\\n\\n    // Token address of the bridge asset that prices are derived from if the specified pair price is missing\\n    address public masterQuoteAsset;\\n\\n    /* ============ Constructor ============ */\\n\\n    /**\\n     * Set state variables and map asset pairs to their oracles\\n     *\\n     * @param _controller             Address of Controller contract\\n     * @param _masterQuoteAsset       Address of asset that can be used to link unrelated asset pairs\\n     * @param _adapters               List of adapters used to price assets created by other protocols\\n     * @param _assetOnes              List of first asset in pair, index i maps to same index in assetTwos and oracles\\n     * @param _assetTwos              List of second asset in pair, index i maps to same index in assetOnes and oracles\\n     * @param _oracles                List of oracles, index i maps to same index in assetOnes and assetTwos\\n     */\\n    constructor(\\n        IController _controller,\\n        address _masterQuoteAsset,\\n        address[] memory _adapters,\\n        address[] memory _assetOnes,\\n        address[] memory _assetTwos,\\n        IOracle[] memory _oracles\\n    )\\n    {\\n        CONTROLLER = _controller;\\n        masterQuoteAsset = _masterQuoteAsset;\\n        adapters = _adapters;\\n        uint256 assetsOnesLength = _assetOnes.length;\\n        uint256 assetsTwosLength = _assetTwos.length;\\n        uint256 oraclesLength = _oracles.length;\\n        if (assetsOnesLength != assetsTwosLength || assetsTwosLength != oraclesLength)\\n         revert PriceOracle__ArrayLengthsMismatch(assetsOnesLength, assetsTwosLength, oraclesLength);\\n\\n        for (uint256 i; i < assetsOnesLength; ) {\\n            oracles[_assetOnes[i]][_assetTwos[i]] = _oracles[i];\\n            unchecked { ++i; }\\n        }\\n    }\\n\\n    /* ============ External Functions ============ */\\n\\n    /**\\n     * SYSTEM-ONLY PRIVELEGE: Find price of passed asset pair, if possible. The steps it takes are:\\n     *  1) Check to see if a direct or inverse oracle of the pair exists,\\n     *  2) If not, use masterQuoteAsset to link pairs together (i.e. BTC/ETH and ETH/USDC\\n     *     could be used to calculate BTC/USDC).\\n     *  3) If not, check oracle adapters in case one or more of the assets needs external protocol data\\n     *     to price.\\n     *  4) If all steps fail, revert.\\n     *\\n     * @param _assetOne         Address of first asset in pair\\n     * @param _assetTwo         Address of second asset in pair\\n     * @return                  Price of asset pair to 18 decimals of precision\\n     */\\n    function getPrice(address _assetOne, address _assetTwo) external view returns (uint256) {\\n        if (!CONTROLLER.isSystemContract(msg.sender))\\n            revert PriceOracle__CallerNotSystemContract(msg.sender);\\n\\n        (bool priceFound, uint256 price) = _getDirectOrInversePrice(_assetOne, _assetTwo);\\n\\n        if (!priceFound) {\\n            (priceFound, price) = _getPriceFromMasterQuote(_assetOne, _assetTwo);\\n        }\\n\\n        if (!priceFound) {\\n            (priceFound, price) = _getPriceFromAdapters(_assetOne, _assetTwo);\\n        }\\n\\n        if (!priceFound) revert PriceOracle__PriceNotFound();\\n\\n        return price;\\n    }\\n\\n    /**\\n     * GOVERNANCE FUNCTION: Add new asset pair oracle.\\n     *\\n     * @param _assetOne         Address of first asset in pair\\n     * @param _assetTwo         Address of second asset in pair\\n     * @param _oracle           Address of asset pair's oracle\\n     */\\n    function addPair(address _assetOne, address _assetTwo, IOracle _oracle) external onlyOwner {\\n        if (address(oracles[_assetOne][_assetTwo]) != address(0))\\n            revert PriceOracle__PairExists();\\n        oracles[_assetOne][_assetTwo] = _oracle;\\n\\n        emit PairAdded(_assetOne, _assetTwo, address(_oracle));\\n    }\\n\\n    /**\\n     * GOVERNANCE FUNCTION: Edit an existing asset pair's oracle.\\n     *\\n     * @param _assetOne         Address of first asset in pair\\n     * @param _assetTwo         Address of second asset in pair\\n     * @param _oracle           Address of asset pair's new oracle\\n     */\\n    function editPair(address _assetOne, address _assetTwo, IOracle _oracle) external onlyOwner {\\n        if (address(oracles[_assetOne][_assetTwo]) == address(0))\\n            revert PriceOracle__PairInvalid();\\n        oracles[_assetOne][_assetTwo] = _oracle;\\n\\n        emit PairEdited(_assetOne, _assetTwo, address(_oracle));\\n    }\\n\\n    /**\\n     * GOVERNANCE FUNCTION: Remove asset pair's oracle.\\n     *\\n     * @param _assetOne         Address of first asset in pair\\n     * @param _assetTwo         Address of second asset in pair\\n     */\\n    function removePair(address _assetOne, address _assetTwo) external onlyOwner {\\n        if (address(oracles[_assetOne][_assetTwo]) == address(0))\\n            revert PriceOracle__PairInvalid();\\n        IOracle oldOracle = oracles[_assetOne][_assetTwo];\\n        delete oracles[_assetOne][_assetTwo];\\n\\n        emit PairRemoved(_assetOne, _assetTwo, address(oldOracle));\\n    }\\n\\n    /**\\n     * GOVERNANCE FUNCTION: Add new oracle adapter.\\n     *\\n     * @param _adapter         Address of new adapter\\n     */\\n    function addAdapter(address _adapter) external onlyOwner {\\n        if (adapters.contains(_adapter))\\n            revert PriceOracle__AdapterExists();\\n        adapters.push(_adapter);\\n\\n        emit AdapterAdded(_adapter);\\n    }\\n\\n    /**\\n     * GOVERNANCE FUNCTION: Remove oracle adapter.\\n     *\\n     * @param _adapter         Address of adapter to remove\\n     */\\n    function removeAdapter(address _adapter) external onlyOwner {\\n        if (!adapters.contains(_adapter)) \\n            revert PriceOracle__AdapterInvalid();\\n        adapters = adapters.remove(_adapter);\\n\\n        emit AdapterRemoved(_adapter);\\n    }\\n\\n    /**\\n     * GOVERNANCE FUNCTION: Change the master quote asset.\\n     *\\n     * @param _newMasterQuoteAsset         New address of master quote asset\\n     */\\n    function editMasterQuoteAsset(address _newMasterQuoteAsset) external onlyOwner {\\n        masterQuoteAsset = _newMasterQuoteAsset;\\n\\n        emit MasterQuoteAssetEdited(_newMasterQuoteAsset);\\n    }\\n\\n    /* ============ External View Functions ============ */\\n\\n    /**\\n     * Returns an array of adapters\\n     */\\n    function getAdapters() external view returns (address[] memory) {\\n        return adapters;\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    /**\\n     * Check if direct or inverse oracle exists. If so return that price along with boolean indicating\\n     * it exists. Otherwise return boolean indicating oracle doesn't exist.\\n     *\\n     * @param _assetOne         Address of first asset in pair\\n     * @param _assetTwo         Address of second asset in pair\\n     * @return bool             Boolean indicating if oracle exists\\n     * @return uint256          Price of asset pair to 18 decimal precision (if exists, otherwise 0)\\n     */\\n    function _getDirectOrInversePrice(\\n        address _assetOne,\\n        address _assetTwo\\n    )\\n        internal\\n        view\\n        returns (bool, uint256)\\n    {\\n        IOracle directOracle = oracles[_assetOne][_assetTwo];\\n        bool hasDirectOracle = address(directOracle) != address(0);\\n\\n        // Check asset1 -> asset 2. If exists, then return value\\n        if (hasDirectOracle) {\\n            return (true, directOracle.read());\\n        }\\n\\n        IOracle inverseOracle = oracles[_assetTwo][_assetOne];\\n        bool hasInverseOracle = address(inverseOracle) != address(0);\\n\\n        // If not, check asset 2 -> asset 1. If exists, then return 1 / asset1 -> asset2\\n        if (hasInverseOracle) {\\n            return (true, _calculateInversePrice(inverseOracle));\\n        }\\n\\n        return (false, 0);\\n    }\\n\\n    /**\\n     * Try to calculate asset pair price by getting each asset in the pair's price relative to master\\n     * quote asset. Both prices must exist otherwise function returns false and no price.\\n     *\\n     * @param _assetOne         Address of first asset in pair\\n     * @param _assetTwo         Address of second asset in pair\\n     * @return bool             Boolean indicating if oracle exists\\n     * @return uint256          Price of asset pair to 18 decimal precision (if exists, otherwise 0)\\n     */\\n    function _getPriceFromMasterQuote(\\n        address _assetOne,\\n        address _assetTwo\\n    )\\n        internal\\n        view\\n        returns (bool, uint256)\\n    {\\n        (\\n            bool priceFoundOne,\\n            uint256 assetOnePrice\\n        ) = _getDirectOrInversePrice(_assetOne, masterQuoteAsset);\\n\\n        (\\n            bool priceFoundTwo,\\n            uint256 assetTwoPrice\\n        ) = _getDirectOrInversePrice(_assetTwo, masterQuoteAsset);\\n\\n        if (priceFoundOne && priceFoundTwo) {\\n            return (true, assetOnePrice.preciseDiv(assetTwoPrice));\\n        }\\n\\n        return (false, 0);\\n    }\\n\\n    /**\\n     * Scan adapters to see if one or more of the assets needs external protocol data to be priced. If\\n     * does not exist return false and no price.\\n     *\\n     * @param _assetOne         Address of first asset in pair\\n     * @param _assetTwo         Address of second asset in pair\\n     * @return bool             Boolean indicating if oracle exists\\n     * @return uint256          Price of asset pair to 18 decimal precision (if exists, otherwise 0)\\n     */\\n    function _getPriceFromAdapters(\\n        address _assetOne,\\n        address _assetTwo\\n    )\\n        internal\\n        view\\n        returns (bool, uint256)\\n    {\\n        uint256 adaptersLength = adapters.length;\\n        for (uint256 i; i < adaptersLength; ) {\\n            (\\n                bool priceFound,\\n                uint256 price\\n            ) = IOracleAdapter(adapters[i]).getPrice(_assetOne, _assetTwo);\\n\\n            if (priceFound) {\\n                return (priceFound, price);\\n            }\\n            unchecked { ++i; }\\n        }\\n\\n        return (false, 0);\\n    }\\n\\n    /**\\n     * Calculate inverse price of passed oracle. The inverse price is 1 (or 1e18) / inverse price\\n     *\\n     * @param _inverseOracle        Address of oracle to invert\\n     * @return uint256              Inverted price of asset pair to 18 decimal precision\\n     */\\n    function _calculateInversePrice(IOracle _inverseOracle) internal view returns(uint256) {\\n        uint256 inverseValue = _inverseOracle.read();\\n\\n        return PreciseUnitMath.preciseUnit().preciseDiv(inverseValue);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/protocol/SetToken.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport { ERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\nimport { IController } from \\\"../interfaces/IController.sol\\\";\\nimport { IModule } from \\\"../interfaces/IModule.sol\\\";\\nimport { ISetToken } from \\\"../interfaces/ISetToken.sol\\\";\\nimport { PreciseUnitMath } from \\\"../lib/PreciseUnitMath.sol\\\";\\nimport { AddressArrayUtils } from \\\"../lib/AddressArrayUtils.sol\\\";\\n\\n/**\\n * @title SetToken\\n * @author Set Protocol\\n *\\n * ERC20 Token contract that allows privileged modules to make modifications to its positions and invoke function calls\\n * from the SetToken. \\n *\\n * CHANGELOG\\n * - 4/21/23: Removed OZ SafeMath utils\\n * - 9/18/23: Upgrade to Solidity 0.8.21\\n * - 9/26/23: Added custom errors\\n */\\ncontract SetToken is ISetToken, ERC20 {\\n    using SafeCast for int256;\\n    using SafeCast for uint256;\\n    using PreciseUnitMath for int256;\\n    using Address for address;\\n    using AddressArrayUtils for address[];\\n\\n    /* ============ Constants ============ */\\n\\n    /*\\n        The PositionState is the status of the Position, whether it is Default (held on the SetToken)\\n        or otherwise held on a separate smart contract (whether a module or external source).\\n        There are issues with cross-usage of enums, so we are defining position states\\n        as a uint8.\\n    */\\n    uint8 internal constant DEFAULT = 0;\\n    uint8 internal constant EXTERNAL = 1;\\n\\n    /* ============ Events ============ */\\n\\n    event Invoked(address indexed _target, uint256 indexed _value, bytes _data, bytes _returnValue);\\n    event ModuleAdded(address indexed _module);\\n    event ModuleRemoved(address indexed _module);    \\n    event ModuleInitialized(address indexed _module);\\n    event ManagerEdited(address _newManager, address _oldManager);\\n    event PendingModuleRemoved(address indexed _module);\\n    event PositionMultiplierEdited(int256 _newMultiplier);\\n    event ComponentAdded(address indexed _component);\\n    event ComponentRemoved(address indexed _component);\\n    event DefaultPositionUnitEdited(address indexed _component, int256 _realUnit);\\n    event ExternalPositionUnitEdited(address indexed _component, address indexed _positionModule, int256 _realUnit);\\n    event ExternalPositionDataEdited(address indexed _component, address indexed _positionModule, bytes _data);\\n    event PositionModuleAdded(address indexed _component, address indexed _positionModule);\\n    event PositionModuleRemoved(address indexed _component, address indexed _positionModule);\\n\\n    /* ============ Modifiers ============ */\\n\\n    /**\\n     * Throws if the sender is not a SetToken's module or module not enabled\\n     */\\n    modifier onlyModule() {\\n        // Internal function used to reduce bytecode size\\n        _validateOnlyModule();\\n        _;\\n    }\\n\\n    /**\\n     * Throws if the sender is not the SetToken's manager\\n     */\\n    modifier onlyManager() {\\n        _validateOnlyManager();\\n        _;\\n    }\\n\\n    /**\\n     * Throws if SetToken is locked and called by any account other than the locker.\\n     */\\n    modifier whenLockedOnlyLocker() {\\n        _validateWhenLockedOnlyLocker();\\n        _;\\n    }\\n\\n    /* ============ State Variables ============ */\\n\\n    // List of initialized Modules; Modules extend the functionality of SetTokens\\n    address[] public modules;\\n\\n    // Modules are initialized from NONE -> PENDING -> INITIALIZED through the\\n    // addModule (called by manager) and initialize  (called by module) functions\\n    mapping(address => ISetToken.ModuleState) public moduleStates;\\n\\n    // List of components\\n    address[] public components;\\n\\n    // Mapping that stores all Default and External position information for a given component.\\n    // Position quantities are represented as virtual units; Default positions are on the top-level,\\n    // while external positions are stored in a module array and accessed through its externalPositions mapping\\n    mapping(address => ISetToken.ComponentPosition) private componentPositions;\\n\\n    // The multiplier applied to the virtual position unit to achieve the real/actual unit.\\n    // This multiplier is used for efficiently modifying the entire position units (e.g. streaming fee)\\n    int256 public positionMultiplier;\\n\\n    // Address of the Controller\\n    IController public immutable CONTROLLER;\\n\\n    // The manager has the privelege to add modules, remove, and set a new manager\\n    address public manager;\\n\\n    // A module that has locked other modules from privileged functionality, typically required\\n    // for multi-block module actions such as auctions\\n    address public locker;\\n\\n    // When locked, only the locker (a module) can call privileged functionality\\n    // Typically utilized if a module (e.g. Auction) needs multiple transactions to complete an action\\n    // without interruption\\n    bool public isLocked;\\n\\n    /* ============ Constructor ============ */\\n\\n    /**\\n     * When a new SetToken is created, initializes Positions in default state and adds modules into pending state.\\n     * All parameter validations are on the SetTokenCreator contract. Validations are performed already on the \\n     * SetTokenCreator. Initiates the positionMultiplier as 1e18 (no adjustments).\\n     *\\n     * @param _components             List of addresses of components for initial Positions\\n     * @param _units                  List of units. Each unit is the # of components per 10^18 of a SetToken\\n     * @param _modules                List of modules to enable. All modules must be approved by the Controller\\n     * @param _controller             Address of the Controller\\n     * @param _manager                Address of the manager\\n     * @param _name                   Name of the SetToken\\n     * @param _symbol                 Symbol of the SetToken\\n     */\\n    constructor(\\n        address[] memory _components,\\n        int256[] memory _units,\\n        address[] memory _modules,\\n        IController _controller,\\n        address _manager,\\n        string memory _name,\\n        string memory _symbol\\n    )\\n        ERC20(_name, _symbol)\\n    {\\n        CONTROLLER = _controller;\\n        manager = _manager;\\n        positionMultiplier = PreciseUnitMath.preciseUnitInt();\\n        components = _components;\\n\\n        uint256 modulesLength = _modules.length;\\n        // Modules are put in PENDING state, as they need to be individually initialized by the Module\\n        for (uint256 i; i < modulesLength;) {\\n            moduleStates[_modules[i]] = ISetToken.ModuleState.PENDING;\\n            unchecked { ++i; }\\n        }\\n\\n        uint256 componentsLength = _components.length;\\n        // Positions are put in default state initially\\n        for (uint256 j; j < componentsLength;) {\\n            componentPositions[_components[j]].virtualUnit = _units[j];\\n            unchecked { ++j; }\\n        }\\n    }\\n\\n    /* ============ External Functions ============ */\\n\\n    /**\\n     * PRIVELEGED MODULE FUNCTION. Low level function that allows a module to make an arbitrary function\\n     * call to any contract.\\n     *\\n     * @param _target                 Address of the smart contract to call\\n     * @param _value                  Quantity of Ether to provide the call (typically 0)\\n     * @param _data                   Encoded function selector and arguments\\n     * @return _returnValue           Bytes encoded return value\\n     */\\n    function invoke(\\n        address _target,\\n        uint256 _value,\\n        bytes calldata _data\\n    )\\n        external\\n        onlyModule\\n        whenLockedOnlyLocker\\n        returns (bytes memory _returnValue)\\n    {\\n        _returnValue = _target.functionCallWithValue(_data, _value);\\n\\n        emit Invoked(_target, _value, _data, _returnValue);\\n\\n        return _returnValue;\\n    }\\n\\n    /**\\n     * PRIVELEGED MODULE FUNCTION. Low level function that adds a component to the components array.\\n     */\\n    function addComponent(address _component) external onlyModule whenLockedOnlyLocker {\\n        if (isComponent(_component)) revert SetToken__IsComponent();\\n        \\n        components.push(_component);\\n\\n        emit ComponentAdded(_component);\\n    }\\n\\n    /**\\n     * PRIVELEGED MODULE FUNCTION. Low level function that removes a component from the components array.\\n     */\\n    function removeComponent(address _component) external onlyModule whenLockedOnlyLocker {\\n        components.removeStorage(_component);\\n\\n        emit ComponentRemoved(_component);\\n    }\\n\\n    /**\\n     * PRIVELEGED MODULE FUNCTION. Low level function that edits a component's virtual unit. Takes a real unit\\n     * and converts it to virtual before committing.\\n     */\\n    function editDefaultPositionUnit(address _component, int256 _realUnit) external onlyModule whenLockedOnlyLocker {\\n        int256 virtualUnit = _convertRealToVirtualUnit(_realUnit);\\n\\n        componentPositions[_component].virtualUnit = virtualUnit;\\n\\n        emit DefaultPositionUnitEdited(_component, _realUnit);\\n    }\\n\\n    /**\\n     * PRIVELEGED MODULE FUNCTION. Low level function that adds a module to a component's externalPositionModules array\\n     */\\n    function addExternalPositionModule(address _component, address _positionModule) external onlyModule whenLockedOnlyLocker {\\n        if (isExternalPositionModule(_component, _positionModule)) revert SetToken__ExternalPositionModuleExists();\\n\\n        componentPositions[_component].externalPositionModules.push(_positionModule);\\n\\n        emit PositionModuleAdded(_component, _positionModule);\\n    }\\n\\n    /**\\n     * PRIVELEGED MODULE FUNCTION. Low level function that removes a module from a component's \\n     * externalPositionModules array and deletes the associated externalPosition.\\n     */\\n    function removeExternalPositionModule(\\n        address _component,\\n        address _positionModule\\n    )\\n        external\\n        onlyModule\\n        whenLockedOnlyLocker\\n    {\\n        componentPositions[_component].externalPositionModules.removeStorage(_positionModule);\\n\\n        delete componentPositions[_component].externalPositions[_positionModule];\\n\\n        emit PositionModuleRemoved(_component, _positionModule);\\n    }\\n\\n    /**\\n     * PRIVELEGED MODULE FUNCTION. Low level function that edits a component's external position virtual unit. \\n     * Takes a real unit and converts it to virtual before committing.\\n     */\\n    function editExternalPositionUnit(\\n        address _component,\\n        address _positionModule,\\n        int256 _realUnit\\n    )\\n        external\\n        onlyModule\\n        whenLockedOnlyLocker\\n    {\\n        int256 virtualUnit = _convertRealToVirtualUnit(_realUnit);\\n\\n        componentPositions[_component].externalPositions[_positionModule].virtualUnit = virtualUnit;\\n\\n        emit ExternalPositionUnitEdited(_component, _positionModule, _realUnit);\\n    }\\n\\n    /**\\n     * PRIVELEGED MODULE FUNCTION. Low level function that edits a component's external position data\\n     */\\n    function editExternalPositionData(\\n        address _component,\\n        address _positionModule,\\n        bytes calldata _data\\n    )\\n        external\\n        onlyModule\\n        whenLockedOnlyLocker\\n    {\\n        componentPositions[_component].externalPositions[_positionModule].data = _data;\\n\\n        emit ExternalPositionDataEdited(_component, _positionModule, _data);\\n    }\\n\\n    /**\\n     * PRIVELEGED MODULE FUNCTION. Modifies the position multiplier. This is typically used to efficiently\\n     * update all the Positions' units at once in applications where inflation is awarded (e.g. subscription fees).\\n     */\\n    function editPositionMultiplier(int256 _newMultiplier) external onlyModule whenLockedOnlyLocker {        \\n        _validateNewMultiplier(_newMultiplier);\\n\\n        positionMultiplier = _newMultiplier;\\n\\n        emit PositionMultiplierEdited(_newMultiplier);\\n    }\\n\\n    /**\\n     * PRIVELEGED MODULE FUNCTION. Increases the \\\"account\\\" balance by the \\\"quantity\\\".\\n     */\\n    function mint(address _account, uint256 _quantity) external onlyModule whenLockedOnlyLocker {\\n        _mint(_account, _quantity);\\n    }\\n\\n    /**\\n     * PRIVELEGED MODULE FUNCTION. Decreases the \\\"account\\\" balance by the \\\"quantity\\\".\\n     * _burn checks that the \\\"account\\\" already has the required \\\"quantity\\\".\\n     */\\n    function burn(address _account, uint256 _quantity) external onlyModule whenLockedOnlyLocker {\\n        _burn(_account, _quantity);\\n    }\\n\\n    /**\\n     * PRIVELEGED MODULE FUNCTION. When a SetToken is locked, only the locker can call privileged functions.\\n     */\\n    function lock() external onlyModule {\\n        if (isLocked) revert SetToken__IsLocked();\\n        locker = msg.sender;\\n        isLocked = true;\\n    }\\n\\n    /**\\n     * PRIVELEGED MODULE FUNCTION. Unlocks the SetToken and clears the locker\\n     */\\n    function unlock() external onlyModule {\\n        if (!isLocked) revert SetToken__IsUnlocked();\\n        if (msg.sender != locker) revert SetToken__CallerNotLocker(msg.sender, locker);\\n        delete locker;\\n        isLocked = false;\\n    }\\n\\n    /**\\n     * MANAGER ONLY. Adds a module into a PENDING state; Module must later be initialized via \\n     * module's initialize function\\n     */\\n    function addModule(address _module) external onlyManager {\\n        ISetToken.ModuleState moduleState = moduleStates[_module];\\n        if (moduleState != ISetToken.ModuleState.NONE) revert SetToken__ModuleStateInvalid(_module, moduleState, ISetToken.ModuleState.NONE);\\n        if (!CONTROLLER.isModule(_module)) revert SetToken__ModuleInvalid(_module);\\n\\n        moduleStates[_module] = ISetToken.ModuleState.PENDING;\\n\\n        emit ModuleAdded(_module);\\n    }\\n\\n    /**\\n     * MANAGER ONLY. Removes a module from the SetToken. SetToken calls removeModule on module itself to confirm\\n     * it is not needed to manage any remaining positions and to remove state.\\n     */\\n    function removeModule(address _module) external onlyManager {\\n        if (isLocked) revert SetToken__IsLocked();\\n        ISetToken.ModuleState moduleState = moduleStates[_module];\\n        if (moduleState != ISetToken.ModuleState.INITIALIZED) revert SetToken__ModuleStateInvalid(_module, moduleState, ISetToken.ModuleState.INITIALIZED);\\n\\n        IModule(_module).removeModule();\\n\\n        moduleStates[_module] = ISetToken.ModuleState.NONE;\\n\\n        modules.removeStorage(_module);\\n\\n        emit ModuleRemoved(_module);\\n    }\\n\\n    /**\\n     * MANAGER ONLY. Removes a pending module from the SetToken.\\n     */\\n    function removePendingModule(address _module) external onlyManager {\\n        if (isLocked) revert SetToken__IsLocked();\\n        ISetToken.ModuleState moduleState = moduleStates[_module];\\n        if (moduleState != ISetToken.ModuleState.PENDING) revert SetToken__ModuleStateInvalid(_module, moduleState, ISetToken.ModuleState.PENDING);\\n\\n        moduleStates[_module] = ISetToken.ModuleState.NONE;\\n\\n        emit PendingModuleRemoved(_module);\\n    }\\n\\n    /**\\n     * Initializes an added module from PENDING to INITIALIZED state. Can only call when unlocked.\\n     * An address can only enter a PENDING state if it is an enabled module added by the manager.\\n     * Only callable by the module itself, hence msg.sender is the subject of update.\\n     */\\n    function initializeModule() external {\\n        if (isLocked) revert SetToken__IsLocked();\\n        ISetToken.ModuleState moduleState = moduleStates[msg.sender];\\n        if (moduleState != ISetToken.ModuleState.PENDING) revert SetToken__ModuleStateInvalid(msg.sender, moduleState, ISetToken.ModuleState.PENDING);\\n        \\n        moduleStates[msg.sender] = ISetToken.ModuleState.INITIALIZED;\\n        modules.push(msg.sender);\\n\\n        emit ModuleInitialized(msg.sender);\\n    }\\n\\n    /**\\n     * MANAGER ONLY. Changes manager; We allow null addresses in case the manager wishes to wind down the SetToken.\\n     * Modules may rely on the manager state, so only changable when unlocked\\n     */\\n    function setManager(address _manager) external onlyManager {\\n        if (isLocked) revert SetToken__IsLocked();\\n        address oldManager = manager;\\n        manager = _manager;\\n\\n        emit ManagerEdited(_manager, oldManager);\\n    }\\n\\n    /* ============ External Getter Functions ============ */\\n\\n    function getComponents() external view returns(address[] memory) {\\n        return components;\\n    }\\n\\n    function getDefaultPositionRealUnit(address _component) public view returns(int256) {\\n        return _convertVirtualToRealUnit(_defaultPositionVirtualUnit(_component));\\n    }\\n\\n    function getExternalPositionRealUnit(address _component, address _positionModule) public view returns(int256) {\\n        return _convertVirtualToRealUnit(_externalPositionVirtualUnit(_component, _positionModule));\\n    }\\n\\n    function getExternalPositionModules(address _component) external view returns(address[] memory) {\\n        return _externalPositionModules(_component);\\n    }\\n\\n    function getExternalPositionData(address _component,address _positionModule) external view returns(bytes memory) {\\n        return _externalPositionData(_component, _positionModule);\\n    }\\n\\n    function getModules() external view returns (address[] memory) {\\n        return modules;\\n    }\\n\\n    function isComponent(address _component) public view returns(bool) {\\n        return components.contains(_component);\\n    }\\n\\n    function isExternalPositionModule(address _component, address _module) public view returns(bool) {\\n        return _externalPositionModules(_component).contains(_module);\\n    }\\n\\n    /**\\n     * Only ModuleStates of INITIALIZED modules are considered enabled\\n     */\\n    function isInitializedModule(address _module) external view returns (bool) {\\n        return moduleStates[_module] == ISetToken.ModuleState.INITIALIZED;\\n    }\\n\\n    /**\\n     * Returns whether the module is in a pending state\\n     */\\n    function isPendingModule(address _module) external view returns (bool) {\\n        return moduleStates[_module] == ISetToken.ModuleState.PENDING;\\n    }\\n\\n    /**\\n     * Returns a list of Positions, through traversing the components. Each component with a non-zero virtual unit\\n     * is considered a Default Position, and each externalPositionModule will generate a unique position.\\n     * Virtual units are converted to real units. This function is typically used off-chain for data presentation purposes.\\n     */\\n    function getPositions() external view returns (ISetToken.Position[] memory) {\\n        ISetToken.Position[] memory positions = new ISetToken.Position[](_getPositionCount());\\n        uint256 positionCount;\\n\\n        uint256 componentsLength = components.length;\\n        for (uint256 i; i < componentsLength; ) {\\n            address component = components[i];\\n\\n            // A default position exists if the default virtual unit is > 0\\n            if (_defaultPositionVirtualUnit(component) > 0) {\\n                positions[positionCount] = ISetToken.Position({\\n                    component: component,\\n                    module: address(0),\\n                    unit: getDefaultPositionRealUnit(component),\\n                    positionState: DEFAULT,\\n                    data: \\\"\\\"\\n                });\\n\\n                positionCount++;\\n            }\\n\\n            address[] memory externalModules = _externalPositionModules(component);\\n            uint256 externalModulesLength = externalModules.length;\\n            for (uint256 j; j < externalModulesLength;) {\\n                address currentModule = externalModules[j];\\n\\n                positions[positionCount] = ISetToken.Position({\\n                    component: component,\\n                    module: currentModule,\\n                    unit: getExternalPositionRealUnit(component, currentModule),\\n                    positionState: EXTERNAL,\\n                    data: _externalPositionData(component, currentModule)\\n                });\\n\\n                positionCount++;\\n                unchecked { ++j; }\\n            }\\n            unchecked { ++i; }\\n        }\\n\\n        return positions;\\n    }\\n\\n    /**\\n     * Returns the total Real Units for a given component, summing the default and external position units.\\n     */\\n    function getTotalComponentRealUnits(address _component) external view returns(int256) {\\n        int256 totalUnits = getDefaultPositionRealUnit(_component);\\n\\n        address[] memory externalModules = _externalPositionModules(_component);\\n        uint256 externalModulesLength = externalModules.length;\\n        for (uint256 i; i < externalModulesLength; ) {\\n            // We will perform the summation no matter what, as an external position virtual unit can be negative\\n            totalUnits = totalUnits + getExternalPositionRealUnit(_component, externalModules[i]);\\n            unchecked { ++i; }\\n        }\\n\\n        return totalUnits;\\n    }\\n\\n    receive() external payable { this; }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    function _defaultPositionVirtualUnit(address _component) internal view returns(int256) {\\n        return componentPositions[_component].virtualUnit;\\n    }\\n\\n    function _externalPositionModules(address _component) internal view returns(address[] memory) {\\n        return componentPositions[_component].externalPositionModules;\\n    }\\n\\n    function _externalPositionVirtualUnit(address _component, address _module) internal view returns(int256) {\\n        return componentPositions[_component].externalPositions[_module].virtualUnit;\\n    }\\n\\n    function _externalPositionData(address _component, address _module) internal view returns(bytes memory) {\\n        return componentPositions[_component].externalPositions[_module].data;\\n    }\\n\\n    /**\\n     * Takes a real unit and divides by the position multiplier to return the virtual unit. Negative units will\\n     * be rounded away from 0 so no need to check that unit will be rounded down to 0 in conversion.\\n     */\\n    function _convertRealToVirtualUnit(int256 _realUnit) internal view returns(int256) {\\n        int256 virtualUnit = _realUnit.conservativePreciseDiv(positionMultiplier);\\n\\n        // This check ensures that the virtual unit does not return a result that has rounded down to 0\\n        if (_realUnit > 0 && virtualUnit == 0) {\\n            revert SetToken__RealToVirtualUnitConversionInvalid(_realUnit, virtualUnit);\\n        }\\n\\n        // This check ensures that when converting back to realUnits the unit won't be rounded down to 0\\n        int256 virtualConverted = _convertVirtualToRealUnit(virtualUnit);\\n        if (_realUnit > 0 && virtualConverted == 0) {\\n            revert SetToken__VirtualToRealUnitConversionInvalid(_realUnit, virtualConverted);\\n        }\\n\\n        return virtualUnit;\\n    }\\n\\n    /**\\n     * Takes a virtual unit and multiplies by the position multiplier to return the real unit\\n     */\\n    function _convertVirtualToRealUnit(int256 _virtualUnit) internal view returns(int256) {\\n        return _virtualUnit.conservativePreciseMul(positionMultiplier);\\n    }\\n\\n    /**\\n     * To prevent virtual to real unit conversion issues (where real unit may be 0), the \\n     * product of the positionMultiplier and the lowest absolute virtualUnit value (across default and\\n     * external positions) must be greater than 0.\\n     */\\n    function _validateNewMultiplier(int256 _newMultiplier) internal view {\\n        int256 minVirtualUnit = _getPositionsAbsMinimumVirtualUnit();\\n\\n        if (minVirtualUnit.conservativePreciseMul(_newMultiplier) == 0) revert SetToken__ZeroMultiplier();\\n    }\\n\\n    /**\\n     * Loops through all of the positions and returns the smallest absolute value of \\n     * the virtualUnit.\\n     *\\n     * @return Min virtual unit across positions denominated as int256\\n     */\\n    function _getPositionsAbsMinimumVirtualUnit() internal view returns(int256) {\\n        // Additional assignment happens in the loop below\\n        uint256 minimumUnit = type(uint256).max;\\n        uint256 componentsLength = components.length;\\n        for (uint256 i; i < componentsLength; ) {\\n            address component = components[i];\\n\\n            // A default position exists if the default virtual unit is > 0\\n            uint256 defaultUnit = _defaultPositionVirtualUnit(component).toUint256();\\n            if (defaultUnit > 0 && defaultUnit < minimumUnit) {\\n                minimumUnit = defaultUnit;\\n            }\\n\\n            address[] memory externalModules = _externalPositionModules(component);\\n            uint256 externalModulesLength = externalModules.length;\\n            for (uint256 j; j < externalModulesLength;) {\\n                address currentModule = externalModules[j];\\n\\n                uint256 virtualUnit = _absoluteValue(\\n                    _externalPositionVirtualUnit(component, currentModule)\\n                );\\n                if (virtualUnit > 0 && virtualUnit < minimumUnit) {\\n                    minimumUnit = virtualUnit;\\n                }\\n                unchecked { ++j; }\\n            }\\n            unchecked { ++i; }\\n        }\\n\\n        return minimumUnit.toInt256();\\n    }\\n\\n    /**\\n     * Gets the total number of positions, defined as the following:\\n     * - Each component has a default position if its virtual unit is > 0\\n     * - Each component's external positions module is counted as a position\\n     */\\n    function _getPositionCount() internal view returns (uint256) {\\n        uint256 positionCount;\\n        uint256 componentsLength = components.length;\\n        for (uint256 i; i < componentsLength; ) {\\n            address component = components[i];\\n\\n            // Increment the position count if the default position is > 0\\n            if (_defaultPositionVirtualUnit(component) > 0) {\\n                positionCount++;\\n            }\\n\\n            // Increment the position count by each external position module\\n            address[] memory externalModules = _externalPositionModules(component);\\n            if (externalModules.length > 0) {\\n                positionCount = positionCount + externalModules.length;  \\n            }\\n            unchecked { ++i; }\\n        }\\n\\n        return positionCount;\\n    }\\n\\n    /**\\n     * Returns the absolute value of the signed integer value\\n     * @param _a Signed interger value\\n     * @return Returns the absolute value in uint256\\n     */\\n    function _absoluteValue(int256 _a) internal pure returns(uint256) {\\n        return _a > -1 ? _a.toUint256() : (-_a).toUint256();\\n    }\\n\\n    /**\\n     * Due to reason error bloat, internal functions are used to reduce bytecode size\\n     *\\n     * Module must be initialized on the SetToken and enabled by the Controller\\n     */\\n    function _validateOnlyModule() internal view {\\n        ISetToken.ModuleState moduleState = moduleStates[msg.sender];\\n        if (moduleState != ISetToken.ModuleState.INITIALIZED)\\n           revert SetToken__ModuleStateInvalid(msg.sender, moduleState, ISetToken.ModuleState.INITIALIZED);\\n\\n        if (!CONTROLLER.isModule(msg.sender))\\n            revert SetToken__ModuleInvalid(msg.sender);\\n    }\\n\\n    function _validateOnlyManager() internal view {\\n        if (msg.sender != manager) revert SetToken__CallerNotManager(msg.sender, manager);\\n    }\\n\\n    function _validateWhenLockedOnlyLocker() internal view {\\n        if (isLocked) {\\n            if (msg.sender != locker) revert SetToken__CallerNotLocker(msg.sender, locker);\\n        }\\n    }\\n}\"\r\n    },\r\n    \"contracts/protocol/SetTokenCreator.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { IController } from \\\"../interfaces/IController.sol\\\";\\nimport { ISetTokenCreator } from \\\"../interfaces/ISetTokenCreator.sol\\\";\\nimport { SetToken } from \\\"./SetToken.sol\\\";\\nimport { AddressArrayUtils } from \\\"../lib/AddressArrayUtils.sol\\\";\\n\\n/**\\n * @title SetTokenCreator\\n * @author Set Protocol\\n *\\n * SetTokenCreator is a smart contract used to deploy new SetToken contracts. The SetTokenCreator\\n * is a Factory contract that is enabled by the Controller to create and register new SetTokens.\\n *\\n * CHANGELOG\\n * - 4/17/23: OnlyOwner can create\\n * - 9/18/23: Upgrade to Solidity 0.8.21\\n * - 9/26/23: Added custom errors\\n * - 9/28/23: Switch create() `_components` parameter from memory to calldata\\n */\\ncontract SetTokenCreator is ISetTokenCreator, Ownable {\\n    using AddressArrayUtils for address[];\\n\\n    /* ============ Events ============ */\\n\\n    event SetTokenCreated(address indexed _setToken, address _manager, string _name, string _symbol);\\n\\n    /* ============ State Variables ============ */\\n\\n    // Instance of the Controller smart contract\\n    IController public immutable CONTROLLER;\\n\\n    /* ============ Functions ============ */\\n\\n    /**\\n     * @param _controller          Instance of the Controller\\n     */\\n    constructor(IController _controller) {\\n        CONTROLLER = _controller;\\n    }\\n\\n    /**\\n     * GOVERNANCE FUNCTION: Creates a SetToken smart contract and registers the SetToken with the CONTROLLER. \\n     * The SetTokens are composed of positions that are instantiated as DEFAULT (positionState = 0) state.\\n     *\\n     * @param _components             List of addresses of components for initial Positions\\n     * @param _units                  List of units. Each unit is the # of components per 10^18 of a SetToken\\n     * @param _modules                List of modules to enable. All modules must be approved by the Controller\\n     * @param _manager                Address of the manager\\n     * @param _name                   Name of the SetToken\\n     * @param _symbol                 Symbol of the SetToken\\n     * @return address                Address of the newly created SetToken\\n     */\\n    function create(\\n        address[] calldata _components,\\n        int256[] memory _units,\\n        address[] memory _modules,\\n        address _manager,\\n        string memory _name,\\n        string memory _symbol\\n    )\\n        external\\n        onlyOwner\\n        returns (address)\\n    {\\n        if (_manager == address(0)) revert SetTokenCreator__ZeroAddress();\\n\\n        uint256 modulesLength = _modules.length;\\n        if (modulesLength == 0) revert SetTokenCreator__ModulesEmpty();\\n        \\n        uint256 componentsLength = _components.length;\\n        if (componentsLength == 0) revert SetTokenCreator__ComponentsEmpty();\\n\\n        uint256 unitsLength = _units.length;\\n        if (componentsLength != unitsLength) revert SetTokenCreator__ArrayLengthMismatch(componentsLength, unitsLength);\\n        \\n        if (_components.hasDuplicate()) revert SetTokenCreator__ComponentsContainDuplicates();\\n\\n        for (uint256 i; i < componentsLength; ) {\\n            if (_components[i] == address(0)) revert SetTokenCreator__ComponentsContainZeroAddress();\\n            \\n            int256 unit = _units[i];\\n            if (unit <= 0) revert SetTokenCreator__UnitsLessThanOrEqualToZero(unit, i);\\n            unchecked { ++i; }\\n        }\\n\\n        for (uint256 j; j < modulesLength;) {\\n            address module = _modules[j];\\n            if (!CONTROLLER.isModule(module)) revert SetTokenCreator__ModuleInvalid(module);\\n            unchecked { ++j; }\\n        }\\n\\n        // Creates a new SetToken instance\\n        SetToken setToken = new SetToken(\\n            _components,\\n            _units,\\n            _modules,\\n            CONTROLLER,\\n            _manager,\\n            _name,\\n            _symbol\\n        );\\n\\n        // Registers Set with the Controller\\n        CONTROLLER.addSet(address(setToken));\\n\\n        emit SetTokenCreated(address(setToken), _manager, _name, _symbol);\\n\\n        return address(setToken);\\n    }\\n}\\n\\n\"\r\n    },\r\n    \"contracts/protocol/SetValuer.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { ERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\nimport { IController } from \\\"../interfaces/IController.sol\\\";\\nimport { ISetToken } from \\\"../interfaces/ISetToken.sol\\\";\\nimport { IPriceOracle } from \\\"../interfaces/IPriceOracle.sol\\\";\\nimport { PreciseUnitMath } from \\\"../lib/PreciseUnitMath.sol\\\";\\nimport { Position } from \\\"./lib/Position.sol\\\";\\nimport { ResourceIdentifier } from \\\"./lib/ResourceIdentifier.sol\\\";\\n\\n/**\\n * @title SetValuer\\n * @author Set Protocol\\n *\\n * Contract that returns the valuation of SetTokens using price oracle data used in contracts\\n * that are external to the system.\\n *\\n * Note: Prices are returned in preciseUnits (i.e. 18 decimals of precision)\\n *\\n * CHANGELOG\\n * - 4/21/23: Removed OZ SafeMath utils\\n * - 9/18/23: Upgrade to Solidity 0.8.21\\n */\\ncontract SetValuer {\\n    using PreciseUnitMath for int256;\\n    using PreciseUnitMath for uint256;\\n    using Position for ISetToken;\\n    using ResourceIdentifier for IController;\\n    using SafeCast for int256;\\n    using SafeCast for uint256;\\n    \\n    /* ============ State Variables ============ */\\n\\n    // Instance of the Controller contract\\n    IController public immutable CONTROLLER;\\n\\n    /* ============ Constructor ============ */\\n\\n    /**\\n     * Set state variables and map asset pairs to their oracles\\n     *\\n     * @param _controller             Address of Controller contract\\n     */\\n    constructor(IController _controller) {\\n        CONTROLLER = _controller;\\n    }\\n\\n    /* ============ External Functions ============ */\\n\\n    /**\\n     * Gets the valuation of a SetToken using data from the price oracle. Reverts\\n     * if no price exists for a component in the SetToken. Note: this works for external\\n     * positions and negative (debt) positions.\\n     * \\n     * Note: There is a risk that the valuation is off if airdrops aren't retrieved or\\n     * debt builds up via interest and its not reflected in the position\\n     *\\n     * @param _setToken        SetToken instance to get valuation\\n     * @param _quoteAsset      Address of token to quote valuation in\\n     *\\n     * @return                 SetToken valuation in terms of quote asset in precise units 1e18\\n     */\\n    function calculateSetTokenValuation(ISetToken _setToken, address _quoteAsset) external view returns (uint256) {\\n        IPriceOracle priceOracle = CONTROLLER.getPriceOracle();\\n        address masterQuoteAsset = priceOracle.masterQuoteAsset();\\n        address[] memory components = _setToken.getComponents();\\n        int256 valuation;\\n        uint256 componentsLength = components.length;\\n        for (uint256 i; i < componentsLength; ) {\\n            address component = components[i];\\n            // Get component price from price oracle. If price does not exist, revert.\\n            uint256 componentPrice = priceOracle.getPrice(component, masterQuoteAsset);\\n\\n            int256 aggregateUnits = _setToken.getTotalComponentRealUnits(component);\\n\\n            // Normalize each position unit to preciseUnits 1e18 and cast to signed int\\n            uint256 unitDecimals = ERC20(component).decimals();\\n            uint256 baseUnits = 10 ** unitDecimals;\\n            int256 normalizedUnits = aggregateUnits.preciseDiv(baseUnits.toInt256());\\n\\n            // Calculate valuation of the component. Debt positions are effectively subtracted\\n            valuation = normalizedUnits.preciseMul(componentPrice.toInt256()) + valuation;\\n            unchecked { ++i; }\\n        }\\n\\n        if (masterQuoteAsset != _quoteAsset) {\\n            uint256 quoteToMaster = priceOracle.getPrice(_quoteAsset, masterQuoteAsset);\\n            valuation = valuation.preciseDiv(quoteToMaster.toInt256());\\n        }\\n\\n        return valuation.toUint256();\\n    }\\n}\\n\"\r\n    },\r\n    \"external/contracts/uniswap/v3/lib/BytesLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\u00e7alo S\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity 0.8.21;\\n\\nlibrary BytesLib {\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    ) internal pure returns (bytes memory) {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_start + _length >= _start, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n                case 0 {\\n                    // Get a location of some free memory and store it in tempBytes as\\n                    // Solidity does for memory variables.\\n                    tempBytes := mload(0x40)\\n\\n                    // The first word of the slice result is potentially a partial\\n                    // word read from the original array. To read it, we calculate\\n                    // the length of that partial word and start copying that many\\n                    // bytes into the array. The first word we copy will start with\\n                    // data we don't care about, but the last `lengthmod` bytes will\\n                    // land at the beginning of the contents of the new array. When\\n                    // we're done copying, we overwrite the full first word with\\n                    // the actual length of the slice.\\n                    let lengthmod := and(_length, 31)\\n\\n                    // The multiplication in the next line is necessary\\n                    // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                    // the following copy loop was copying the origin's length\\n                    // and then ending prematurely not copying everything it should.\\n                    let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                    let end := add(mc, _length)\\n\\n                    for {\\n                        // The multiplication in the next line has the same exact purpose\\n                        // as the one above.\\n                        let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                    } lt(mc, end) {\\n                        mc := add(mc, 0x20)\\n                        cc := add(cc, 0x20)\\n                    } {\\n                        mstore(mc, mload(cc))\\n                    }\\n\\n                    mstore(tempBytes, _length)\\n\\n                    //update free-memory pointer\\n                    //allocating the array padded to 32 bytes like the compiler does now\\n                    mstore(0x40, and(add(mc, 31), not(31)))\\n                }\\n                //if we want a zero-length slice let's just return a zero-length array\\n                default {\\n                    tempBytes := mload(0x40)\\n                    //zero out the 32 bytes slice we are about to return\\n                    //we need to do it because Solidity does not garbage collect\\n                    mstore(tempBytes, 0)\\n\\n                    mstore(0x40, add(tempBytes, 0x20))\\n                }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n        require(_start + 20 >= _start, \\\"toAddress_overflow\\\");\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint24(bytes memory _bytes, uint256 _start) internal pure returns (uint24) {\\n        require(_start + 3 >= _start, \\\"toUint24_overflow\\\");\\n        require(_bytes.length >= _start + 3, \\\"toUint24_outOfBounds\\\");\\n        uint24 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x3), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ROUTER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSpender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sourceToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_destinationToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_destinationAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_sourceQuantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minDestinationQuantity\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"getTradeCalldata\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isDynamicDataAdapter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "UniswapV2ExchangeAdapter", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000a5e0829caced8ffdd4de3c43696c57f7d7a678ff", "EVMVersion": "paris", "Library": "", "LicenseType": "Apache-2.0", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://16e0c821c2a4f3741d12f222528cc6b5e9c0d69a86a8b40d1cadfb61641da7a8"}