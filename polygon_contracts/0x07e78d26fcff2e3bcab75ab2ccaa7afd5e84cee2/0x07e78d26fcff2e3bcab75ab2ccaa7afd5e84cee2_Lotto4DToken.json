{"SourceCode": "// File: strutils.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\nlibrary strutils {\r\n        struct slice {\r\n        uint _len;\r\n        uint _ptr;\r\n    }\r\n\r\n    function toString(uint256 value, uint8 digits) internal pure returns (string memory) {\r\n        bytes memory result = new bytes(digits);\r\n        for (uint8 i = 0; i < digits; i++) {\r\n            result[digits - 1 - i] = bytes1(uint8(48 + (value / (10**i)) % 10));\r\n        }\r\n        return string(result);\r\n    }\r\n        function toSlice(string memory self) internal pure returns (slice memory) {\r\n        uint ptr;\r\n        assembly {\r\n            ptr := add(self, 0x20)\r\n        }\r\n        return slice(bytes(self).length, ptr);\r\n    }\r\n\r\n    function len(slice memory self) internal pure returns (uint) {\r\n        return self._len;\r\n    }\r\n        function equals(slice memory self, slice memory other) internal pure returns (bool) {\r\n        if (self._len != other._len) {\r\n            return false;\r\n        } else {\r\n            for (uint i = 0; i < self._len; i++) {\r\n                if (load(self, i) != load(other, i)) {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function load(slice memory self, uint index) internal pure returns (bytes1) {\r\n        require(index < self._len, \"Index out of range\");\r\n        return bytes1(uint8(loadPtr(self, index)));\r\n    }\r\n\r\n    function loadPtr(slice memory self, uint index) internal pure returns (uint) {\r\n        require(index < self._len, \"Index out of range\");\r\n        return self._ptr + index;\r\n    }\r\n    function substringFromIndex(slice memory self, uint start, uint length) internal pure returns (slice memory) {\r\n        require(start + length <= self._len, \"Substr out of range\");\r\n        return slice(length, self._ptr + start);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * The initial owner is set to the address provided by the deployer. This can\r\n * later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    /**\r\n     * @dev The caller account is not authorized to perform an operation.\r\n     */\r\n    error OwnableUnauthorizedAccount(address account);\r\n\r\n    /**\r\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\r\n     */\r\n    error OwnableInvalidOwner(address owner);\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\r\n     */\r\n    constructor(address initialOwner) {\r\n        if (initialOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(initialOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        if (owner() != _msgSender()) {\r\n            revert OwnableUnauthorizedAccount(_msgSender());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        if (newOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\r\n     * caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\r\n     * allowance mechanism. `value` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n}\r\n\r\n// File: lotto4d.sol\r\n\r\n\r\npragma solidity ^0.8.2;\r\n\r\n\r\n\r\n\r\ncontract Lotto4DToken is IERC20, Ownable {\r\n    using strutils for *; // Enable string utilities\r\n    string public name = \"Lotto 4D Token\";\r\n    string public symbol = \"L4D\";\r\n    uint8 public decimals = 9;\r\n    \r\n    // Total supply of tokens\r\n    uint256 private _totalSupply;\r\n    \r\n    // Mapping of user addresses to their token balances\r\n    mapping(address => uint256) private _balances;\r\n    \r\n    // Mapping of allowances for token transfers\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 public minimumBet =   100000000; // 0.1 L4D\r\n    uint256 public maximumBet = 250000000000; // 250 L4D\r\n    uint256 public drawTime = 86400; // 24 hour in seconds\r\n    uint256 public lastDrawTimestamp;\r\n    uint256 public lastDrawResult;\r\n\r\n\r\n    // List to store all draw results\r\n    struct DrawResult {\r\n        uint256 result;\r\n        uint256 timestamp;\r\n    }\r\n    DrawResult[] public drawResults;\r\n\r\n    // List to store total bets and amount placed\r\n\r\n    uint256 public betTotal;\r\n    uint256 public amountTotal;\r\n \r\n \r\n    // List to store all winners\r\n    struct WinnerLists {\r\n        address addressWin;\r\n        uint256 drawNum;\r\n        uint256 betAmount;\r\n        uint256 winAmount;\r\n        uint8 digit;\r\n    }\r\n    WinnerLists[] public winnerLists;\r\n\r\n    constructor(uint256 initialSupply) Ownable(msg.sender) {\r\n        _totalSupply = initialSupply * 10 ** uint256(decimals);\r\n        _balances[msg.sender] = _totalSupply;\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n        lastDrawTimestamp = block.timestamp;\r\n    }\r\n\r\n    function totalSupply() external view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) external view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) external view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) external override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender] - amount);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender] - subtractedValue);\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"Transfer from the zero address\");\r\n        require(recipient != address(0), \"Transfer to the zero address\");\r\n        require(_balances[sender] >= amount, \"Insufficient balance\");\r\n        _balances[sender] -= amount;\r\n        _balances[recipient] += amount;\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \"Approve from the zero address\");\r\n        require(spender != address(0), \"Approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    // Function for onlyOwner to withdraw contract balance\r\n    function withdrawL4D(uint256 amount) external onlyOwner {\r\n        require(_balances[address(this)] >= amount, \"Insufficient contract balance\");\r\n\r\n       // Transfer L4D tokens from the contract to the owner\r\n        _transfer(address(this), owner(), amount);\r\n    }\r\n       \r\n    struct Bet {\r\n        address player;\r\n        uint256 amount;\r\n        uint256 guess;\r\n   \tuint8 numDigit;\r\n    }\r\n    \r\n    Bet[] public bets;\r\n\r\n    event BetPlaced(address indexed player, uint256 amount, uint16 guess, uint8 numDigit);\r\n    event Draw(uint256 result);\r\n    event Winner(address indexed player, uint256 amount);\r\n\r\n    modifier onlyBeforeDrawTime() {\r\n        require(block.timestamp < lastDrawTimestamp + drawTime, \"Draw time has passed\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyAfterDrawTime() {\r\n        require(block.timestamp >= lastDrawTimestamp + drawTime, \"Draw time has not passed yet\");\r\n        _;\r\n    }\r\n\r\n    function placeBatchBetsWithToken(uint16[] memory guesses, uint256[] memory amounts, uint8[] memory numDigit) external onlyBeforeDrawTime {\r\n        require(guesses.length > 0 && guesses.length == amounts.length, \"Invalid batch bet data\");\r\n        uint256 totalBatchAmount = 0;\r\n        uint256 totalBatchPlaced = 0;\r\n\r\n        for (uint256 i = 0; i < guesses.length; i++) {\r\n            require(amounts[i] >= minimumBet && amounts[i] <= maximumBet, \"Invalid bet amount\");\r\n            require(_balances[msg.sender] >= amounts[i], \"Insufficient token balance\");\r\n\r\n            // Transfer the tokens to smart contract\r\n            _transfer(msg.sender, address(this), amounts[i]);\r\n            bets.push(Bet(msg.sender, amounts[i], guesses[i], numDigit[i]));\r\n            totalBatchAmount += amounts[i];\r\n            totalBatchPlaced += 1;\r\n            emit BetPlaced(msg.sender, amounts[i], guesses[i], numDigit[i]);\r\n\r\n        }\r\n        betTotal += totalBatchPlaced;\r\n        amountTotal += totalBatchAmount;\r\n        require(totalBatchAmount <= _balances[msg.sender], \"Insufficient token balance\");\r\n    }\r\n\r\n    function setMinimumBet(uint256 _minimumBet) external onlyOwner {\r\n        minimumBet = _minimumBet;\r\n    }\r\n\r\n    function setMaximumBet(uint256 _maximumBet) external onlyOwner {\r\n        maximumBet = _maximumBet;\r\n    }\r\n\r\n    function setDrawTime(uint256 _drawTime) external onlyOwner {\r\n        drawTime = _drawTime;\r\n    }\r\n    function compareStrings(string memory a, string memory b) internal pure returns (bool) {\r\n        return (keccak256(abi.encodePacked(a)) == keccak256(abi.encodePacked(b)));\r\n    }\r\n        function toUint(string memory s) public pure returns (uint256) {\r\n        uint256 result = 0;\r\n        for (uint256 i = 0; i < bytes(s).length; i++) {\r\n            result = result * 10 + (uint256(uint8(bytes(s)[i]) - 48));\r\n        }\r\n        return result;\r\n    }\r\n    function draw() external onlyAfterDrawTime {\r\n        // Generate a random 4-digit result (0-9999)\r\n        uint256 result = uint256(keccak256(abi.encodePacked(block.timestamp, block.prevrandao))) % 10000;\r\n\r\n        // Format the result with leading zeros\r\n        string memory formattedResult = uint256(result).toString(4); // Format as a 4-digit number\r\n\r\n        lastDrawResult = toUint(formattedResult); // Convert back to uint256\r\n        emit Draw(lastDrawResult);\r\n\r\n        // Store the draw result in the list\r\n        drawResults.push(DrawResult(lastDrawResult, block.timestamp));\r\n    \tuint256 payout;\r\n        for (uint256 i = 0; i < bets.length; i++) {\r\n            Bet memory bet = bets[i];\r\n\r\n    \tif (bet.numDigit == 4 && bet.guess == lastDrawResult) {\r\n\r\n    \t\tpayout = bet.amount * 4000;\r\n            require(_balances[address(this)] >= payout, \"Insufficient contract balance\");\r\n            _balances[bet.player] += payout;\r\n            _balances[address(this)] -= payout;  // Adjust the smart contract balance\r\n           \r\n            winnerLists.push(WinnerLists(bet.player, lastDrawResult, bet.amount, payout, bet.numDigit));\r\n\r\n    \t} else if (bet.numDigit == 3 && bet.guess % 1000 == lastDrawResult % 1000) {\r\n\t\r\n    \t\tpayout = bet.amount * 350;\r\n            require(_balances[address(this)] >= payout, \"Insufficient contract balance\");\r\n            _balances[bet.player] += payout;\r\n            _balances[address(this)] -= payout;  // Adjust the smart contract balance\r\n           \r\n            winnerLists.push(WinnerLists(bet.player, lastDrawResult, bet.amount, payout, bet.numDigit));\r\n\r\n    \t} else if (bet.numDigit == 2 && bet.guess % 100 == lastDrawResult % 100) {\r\n\r\n    \t\tpayout = bet.amount * 70;\r\n            require(_balances[address(this)] >= payout, \"Insufficient contract balance\");\r\n            _balances[bet.player] += payout;\r\n            _balances[address(this)] -= payout;  // Adjust the smart contract balance\r\n           \r\n            winnerLists.push(WinnerLists(bet.player, lastDrawResult, bet.amount, payout, bet.numDigit));\r\n    \t}    \r\n        }\r\n\r\n    // Reset bets after the draw\r\n    for (uint256 i = 0; i < bets.length; i++) {\r\n        delete bets[i];\r\n    }\r\n    while (bets.length > 0) {\r\n        bets.pop();\r\n    }\r\n        lastDrawTimestamp = block.timestamp;\r\n    }\r\n        \r\n\r\n    function getBetHistory() external view returns (Bet[] memory) {\r\n        Bet[] memory formattedBets = new Bet[](bets.length);\r\n\r\n        for (uint256 i = 0; i < bets.length; i++) {\r\n           Bet memory originalBet = bets[i];\r\n            string memory formattedGuess = uint256(originalBet.guess).toString(4);\r\n\r\n           formattedBets[i] = Bet(originalBet.player, originalBet.amount, toUint(formattedGuess), originalBet.numDigit);\r\n        }\r\n        return formattedBets;\r\n    }\r\n\r\n\r\n    // View function to get the last draw timestamp\r\n    function getLastDrawTime() external view returns (uint256) {\r\n        return lastDrawTimestamp;\r\n    }\r\n\r\n    // View function to get the last draw result\r\n    function getLastDrawResult() external view returns (uint256) {\r\n        return lastDrawResult;\r\n    }\r\n\r\n    // Function to view all draw results\r\n    function getAllDrawResults() external view returns (DrawResult[] memory) {\r\n        return drawResults;\r\n    }\r\n\r\n    // Function to view total bets placed\r\n \r\n    function getTotalBets() external view returns (uint256) {\r\n        return betTotal;\r\n    }\r\n    function getTotalAmounts() external view returns (uint256) {\r\n        return amountTotal;\r\n    }\r\n    // Function to view all winners\r\n    function getWinnerLists() external view returns (WinnerLists[] memory) {\r\n        return winnerLists;\r\n    }\r\n\r\n    // Function to view the contract's balance\r\n    function getContractBalance() external view returns (uint256) {\r\n        return _balances[address(this)];\r\n    }\r\n\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initialSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"guess\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"numDigit\",\"type\":\"uint8\"}],\"name\":\"BetPlaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"name\":\"Draw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Winner\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"betTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"guess\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"numDigit\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"draw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"drawResults\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"drawTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllDrawResults\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct Lotto4DToken.DrawResult[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBetHistory\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"guess\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"numDigit\",\"type\":\"uint8\"}],\"internalType\":\"struct Lotto4DToken.Bet[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastDrawResult\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastDrawTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalBets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWinnerLists\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addressWin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"drawNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"betAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"winAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"digit\",\"type\":\"uint8\"}],\"internalType\":\"struct Lotto4DToken.WinnerLists[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastDrawResult\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastDrawTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maximumBet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumBet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"guesses\",\"type\":\"uint16[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8[]\",\"name\":\"numDigit\",\"type\":\"uint8[]\"}],\"name\":\"placeBatchBetsWithToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_drawTime\",\"type\":\"uint256\"}],\"name\":\"setDrawTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maximumBet\",\"type\":\"uint256\"}],\"name\":\"setMaximumBet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimumBet\",\"type\":\"uint256\"}],\"name\":\"setMinimumBet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"s\",\"type\":\"string\"}],\"name\":\"toUint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"winnerLists\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addressWin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"drawNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"betAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"winAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"digit\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawL4D\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Lotto4DToken", "CompilerVersion": "v0.8.22+commit.4fc1097e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000989680", "EVMVersion": "paris", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://891365ecdbef2aefc9fa4b3c42959906ac973d0ff3094efdf0c75d221550dd88"}