{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/VideoPoker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./Common.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title video poker game, players get dealt a 5 card hand and can replace any number of cards to form winning combinations\\r\\n */\\r\\n\\r\\ncontract VideoPoker is Common {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    constructor(\\r\\n        address _bankroll,\\r\\n        address _vrf,\\r\\n        address link_eth_feed,\\r\\n        address _forwarder\\r\\n    ) {\\r\\n        Bankroll = IBankRoll(_bankroll);\\r\\n        IChainLinkVRF = IVRFCoordinatorV2(_vrf);\\r\\n        LINK_ETH_FEED = AggregatorV3Interface(link_eth_feed);\\r\\n        ChainLinkVRF = _vrf;\\r\\n        _trustedForwarder = _forwarder;\\r\\n\\r\\n        for (uint8 s = 0; s < 4; s++) {\\r\\n            for (uint8 n = 1; n < 14; n++) {\\r\\n                initialDeck.push(Card(n, s));\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    struct Card {\\r\\n        uint8 number;\\r\\n        uint8 suit;\\r\\n    }\\r\\n\\r\\n    struct VideoPokerGame {\\r\\n        uint256 wager;\\r\\n        uint256 requestID;\\r\\n        address tokenAddress;\\r\\n        uint64 blockNumber;\\r\\n        Card[5] cardsInHand;\\r\\n        bool[5] toReplace;\\r\\n        bool ingame;\\r\\n        bool isFirstRequest;\\r\\n    }\\r\\n\\r\\n    Card[] initialDeck;\\r\\n    mapping(address => VideoPokerGame) videoPokerGames;\\r\\n    mapping(uint256 => address) videoPokerIDs;\\r\\n\\r\\n    event VideoPoker_Play_Event(\\r\\n        address indexed playerAddress,\\r\\n        uint256 wager,\\r\\n        address tokenAddress,\\r\\n        uint256 VRFFee\\r\\n    );\\r\\n    /**\\r\\n     * @dev event emitted by the VRF callback with the intial 5 card hand\\r\\n     * @param playerAddress address of the player that made the bet\\r\\n     * @param playerHand initial player Hand\\r\\n     */\\r\\n    event VideoPoker_Start_Event(\\r\\n        address indexed playerAddress,\\r\\n        Card[5] playerHand\\r\\n    );\\r\\n\\r\\n    event VideoPoker_Fee_Event(address indexed playerAddress, uint256 VRFFee);\\r\\n\\r\\n    /**\\r\\n     * @dev event emitted by the VRF callback with the final results\\r\\n     * @param playerAddress address of the player that made the bet\\r\\n     * @param wager wager amount\\r\\n     * @param payout total payout transfered to the player\\r\\n     * @param tokenAddress address of token the wager was made and payout, 0 address is considered the native coin\\r\\n     * @param playerHand final player Hand\\r\\n     * @param outcome result of final hand, 0-> no winning combination\\r\\n     */\\r\\n    event VideoPoker_Outcome_Event(\\r\\n        address indexed playerAddress,\\r\\n        uint256 wager,\\r\\n        uint256 payout,\\r\\n        address tokenAddress,\\r\\n        Card[5] playerHand,\\r\\n        uint256 outcome\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev event emitted when a refund is done in video poker\\r\\n     * @param player address of the player reciving the refund\\r\\n     * @param wager amount of wager that was refunded\\r\\n     * @param tokenAddress address of token the refund was made in\\r\\n     */\\r\\n    event VideoPoker_Refund_Event(\\r\\n        address indexed player,\\r\\n        uint256 wager,\\r\\n        address tokenAddress\\r\\n    );\\r\\n\\r\\n    error AlreadyInGame();\\r\\n    error NotInGame();\\r\\n    error AwaitingVRF(uint256 requestID);\\r\\n    error NoFeeRequired();\\r\\n    error NoRequestPending();\\r\\n    error BlockNumberTooLow(uint256 have, uint256 want);\\r\\n    error OnlyCoordinatorCanFulfill(address have, address want);\\r\\n    error WagerAboveLimit(uint256 wager, uint256 maxWager);\\r\\n\\r\\n    /**\\r\\n     * @dev Function to get current state of video Poker\\r\\n     * @param player address of player to view game state\\r\\n     * @return videopokerState current state of game of the player\\r\\n     */\\r\\n    function VideoPoker_GetState(\\r\\n        address player\\r\\n    ) external view returns (VideoPokerGame memory videopokerState) {\\r\\n        videopokerState = videoPokerGames[player];\\r\\n        return videopokerState;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Function to start Video poker, takes the user wager saves bet parameters and makes a request to the VRF\\r\\n     * @param wager wager amount\\r\\n     * @param tokenAddress address of token to bet, 0 address is considered the native coin\\r\\n     */\\r\\n    function VideoPoker_Start(\\r\\n        uint256 wager,\\r\\n        address tokenAddress\\r\\n    ) external payable nonReentrant {\\r\\n        address msgSender = _msgSender();\\r\\n\\r\\n        VideoPokerGame storage game = videoPokerGames[msgSender];\\r\\n        if (game.requestID != 0) {\\r\\n            revert AwaitingVRF(game.requestID);\\r\\n        }\\r\\n        if (game.ingame) {\\r\\n            revert AlreadyInGame();\\r\\n        }\\r\\n\\r\\n        _kellyWager(wager, tokenAddress);\\r\\n        uint256 fee = _transferWager(tokenAddress, wager, 500000, msgSender);\\r\\n        uint256 id = _requestRandomWords(5);\\r\\n\\r\\n        videoPokerIDs[id] = msgSender;\\r\\n        game.tokenAddress = tokenAddress;\\r\\n        game.wager = wager;\\r\\n        game.isFirstRequest = true;\\r\\n        game.requestID = id;\\r\\n        game.blockNumber = uint64(block.number);\\r\\n        game.ingame = true;\\r\\n\\r\\n        emit VideoPoker_Play_Event(msgSender, wager, tokenAddress, fee);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Function to replace cards in player hand, if no cards to replace are selected there isn't a VRF request\\r\\n     * @param toReplace array of cards that the player whished to replace, true equals that the card will be replaced\\r\\n     */\\r\\n    function VideoPoker_Replace(\\r\\n        bool[5] calldata toReplace\\r\\n    ) external payable nonReentrant {\\r\\n        address msgSender = _msgSender();\\r\\n        VideoPokerGame storage game = videoPokerGames[msgSender];\\r\\n        if (!game.ingame) {\\r\\n            revert NotInGame();\\r\\n        }\\r\\n        if (game.requestID != 0) {\\r\\n            revert AwaitingVRF(game.requestID);\\r\\n        }\\r\\n\\r\\n        bool replaceCards;\\r\\n        for (uint8 i = 0; i < 5; i++) {\\r\\n            if (toReplace[i]) {\\r\\n                replaceCards = true;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (replaceCards) {\\r\\n            uint256 VRFFee = _payVRFFee(500000);\\r\\n            uint256 id = _requestRandomWords(5);\\r\\n            videoPokerIDs[id] = msgSender;\\r\\n            game.toReplace = toReplace;\\r\\n            game.requestID = id;\\r\\n            game.blockNumber = uint64(block.number);\\r\\n            emit VideoPoker_Fee_Event(msgSender, VRFFee);\\r\\n        } else {\\r\\n            if (msg.value != 0) {\\r\\n                revert NoFeeRequired();\\r\\n            }\\r\\n            (uint256 multiplier, uint256 outcome) = _determineHandPayout(\\r\\n                game.cardsInHand\\r\\n            );\\r\\n\\r\\n            address tokenAddress = game.tokenAddress;\\r\\n            uint256 wager = game.wager;\\r\\n            emit VideoPoker_Outcome_Event(\\r\\n                msgSender,\\r\\n                wager,\\r\\n                multiplier * wager,\\r\\n                tokenAddress,\\r\\n                game.cardsInHand,\\r\\n                outcome\\r\\n            );\\r\\n            _transferToBankroll(tokenAddress, game.wager);\\r\\n            delete (videoPokerGames[msgSender]);\\r\\n            if (multiplier != 0) {\\r\\n                _transferPayout(msgSender, multiplier * wager, tokenAddress);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Function to get refund for game if VRF request fails\\r\\n     */\\r\\n    function VideoPoker_Refund() external nonReentrant {\\r\\n        address msgSender = _msgSender();\\r\\n        VideoPokerGame storage game = videoPokerGames[msgSender];\\r\\n        if (!game.ingame) {\\r\\n            revert NotInGame();\\r\\n        }\\r\\n        if (game.requestID == 0) {\\r\\n            revert NoRequestPending();\\r\\n        }\\r\\n        if (game.blockNumber + BLOCK_NUMBER_REFUND + 10 > block.number) {\\r\\n            revert BlockNumberTooLow(\\r\\n                block.number,\\r\\n                game.blockNumber + BLOCK_NUMBER_REFUND + 10\\r\\n            );\\r\\n        }\\r\\n\\r\\n        uint256 wager = game.wager;\\r\\n        address tokenAddress = game.tokenAddress;\\r\\n        delete (videoPokerGames[msgSender]);\\r\\n        if (tokenAddress == address(0)) {\\r\\n            (bool success, ) = payable(msgSender).call{value: wager}(\\\"\\\");\\r\\n            if (!success) {\\r\\n                revert TransferFailed();\\r\\n            }\\r\\n        } else {\\r\\n            IERC20(tokenAddress).safeTransfer(msgSender, wager);\\r\\n        }\\r\\n        emit VideoPoker_Refund_Event(msgSender, wager, tokenAddress);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev function called by Chainlink VRF with random numbers\\r\\n     * @param requestId id provided when the request was made\\r\\n     * @param randomWords array of random numbers\\r\\n     */\\r\\n    function rawFulfillRandomWords(\\r\\n        uint256 requestId,\\r\\n        uint256[] memory randomWords\\r\\n    ) external {\\r\\n        if (msg.sender != ChainLinkVRF) {\\r\\n            revert OnlyCoordinatorCanFulfill(msg.sender, ChainLinkVRF);\\r\\n        }\\r\\n        fulfillRandomWords(requestId, randomWords);\\r\\n    }\\r\\n\\r\\n    function fulfillRandomWords(\\r\\n        uint256 requestId,\\r\\n        uint256[] memory randomWords\\r\\n    ) internal {\\r\\n        address player = videoPokerIDs[requestId];\\r\\n        if (player == address(0)) revert();\\r\\n        delete (videoPokerIDs[requestId]);\\r\\n        VideoPokerGame storage game = videoPokerGames[player];\\r\\n        if (block.number > game.blockNumber + BLOCK_NUMBER_REFUND) revert();\\r\\n\\r\\n        if (game.isFirstRequest) {\\r\\n            Card[] memory deck = initialDeck;\\r\\n\\r\\n            for (uint8 i = 0; i < 5; i++) {\\r\\n                _pickCard(i, randomWords[i], player, deck);\\r\\n            }\\r\\n\\r\\n            game.requestID = 0;\\r\\n            game.isFirstRequest = false;\\r\\n            emit VideoPoker_Start_Event(player, game.cardsInHand);\\r\\n        } else {\\r\\n            Card[] memory deck = initialDeck;\\r\\n\\r\\n            for (uint256 g = 0; g < 5; g++) {\\r\\n                for (uint256 j = 0; j < 52; j++) {\\r\\n                    if (\\r\\n                        game.cardsInHand[g].number == deck[j].number &&\\r\\n                        game.cardsInHand[g].suit == deck[j].suit\\r\\n                    ) {\\r\\n                        deck[j] = deck[deck.length - 1];\\r\\n                        assembly {\\r\\n                            mstore(deck, sub(mload(deck), 1))\\r\\n                        }\\r\\n                        break;\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n\\r\\n            for (uint8 i = 0; i < 5; i++) {\\r\\n                if (game.toReplace[i]) {\\r\\n                    _pickCard(i, randomWords[i], player, deck);\\r\\n                }\\r\\n            }\\r\\n\\r\\n            uint256 wager = game.wager;\\r\\n            address tokenAddress = game.tokenAddress;\\r\\n            (uint256 multiplier, uint256 outcome) = _determineHandPayout(\\r\\n                game.cardsInHand\\r\\n            );\\r\\n            emit VideoPoker_Outcome_Event(\\r\\n                player,\\r\\n                wager,\\r\\n                wager * multiplier,\\r\\n                tokenAddress,\\r\\n                game.cardsInHand,\\r\\n                outcome\\r\\n            );\\r\\n            _transferToBankroll(tokenAddress, game.wager);\\r\\n            delete (videoPokerGames[player]);\\r\\n            _transferPayout(player, wager * multiplier, tokenAddress);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _pickCard(\\r\\n        uint8 handPosition,\\r\\n        uint256 rng,\\r\\n        address player,\\r\\n        Card[] memory deck\\r\\n    ) internal {\\r\\n        uint256 cardPosition = rng % deck.length;\\r\\n        videoPokerGames[player].cardsInHand[handPosition] = deck[cardPosition];\\r\\n        _removeCardFromDeck(cardPosition, deck);\\r\\n    }\\r\\n\\r\\n    function _removeCardFromDeck(\\r\\n        uint256 cardPositon,\\r\\n        Card[] memory deck\\r\\n    ) internal pure {\\r\\n        deck[cardPositon] = deck[deck.length - 1];\\r\\n        assembly {\\r\\n            mstore(deck, sub(mload(deck), 1))\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _determineHandPayout(\\r\\n        Card[5] memory cardsInHand\\r\\n    ) public pure returns (uint256, uint256) {\\r\\n        Card[5] memory sortedCards = _sort(cardsInHand);\\r\\n\\r\\n        //check 4 of a kind\\r\\n        if (\\r\\n            sortedCards[1].number == sortedCards[2].number &&\\r\\n            sortedCards[2].number == sortedCards[3].number\\r\\n        ) {\\r\\n            if (\\r\\n                sortedCards[1].number == sortedCards[0].number ||\\r\\n                sortedCards[3].number == sortedCards[4].number\\r\\n            ) {\\r\\n                return (30, 7);\\r\\n            }\\r\\n        }\\r\\n        //check full house -> 3 of a kind + pair\\r\\n        if (\\r\\n            sortedCards[1].number == sortedCards[0].number &&\\r\\n            sortedCards[4].number == sortedCards[3].number\\r\\n        ) {\\r\\n            if (\\r\\n                sortedCards[1].number == sortedCards[2].number ||\\r\\n                sortedCards[3].number == sortedCards[2].number\\r\\n            ) {\\r\\n                return (8, 6);\\r\\n            }\\r\\n        }\\r\\n        //check royal flush + straight flush + flush\\r\\n        if (\\r\\n            sortedCards[0].suit == sortedCards[1].suit &&\\r\\n            sortedCards[2].suit == sortedCards[3].suit &&\\r\\n            sortedCards[0].suit == sortedCards[4].suit &&\\r\\n            sortedCards[2].suit == sortedCards[1].suit\\r\\n        ) {\\r\\n            if (sortedCards[0].number == 1 && sortedCards[4].number == 13) {\\r\\n                if (\\r\\n                    sortedCards[2].number == sortedCards[3].number - 1 &&\\r\\n                    sortedCards[3].number == sortedCards[4].number - 1 &&\\r\\n                    sortedCards[1].number == sortedCards[2].number - 1\\r\\n                ) {\\r\\n                    return (100, 9);\\r\\n                }\\r\\n            }\\r\\n            if (sortedCards[0].number == 1 && sortedCards[1].number == 2) {\\r\\n                if (\\r\\n                    sortedCards[0].number == sortedCards[1].number - 1 &&\\r\\n                    sortedCards[2].number == sortedCards[3].number - 1 &&\\r\\n                    sortedCards[3].number == sortedCards[4].number - 1 &&\\r\\n                    sortedCards[1].number == sortedCards[2].number - 1\\r\\n                ) {\\r\\n                    return (50, 8);\\r\\n                }\\r\\n            }\\r\\n            if (\\r\\n                sortedCards[0].number == sortedCards[1].number - 1 &&\\r\\n                sortedCards[2].number == sortedCards[3].number - 1 &&\\r\\n                sortedCards[3].number == sortedCards[4].number - 1 &&\\r\\n                sortedCards[1].number == sortedCards[2].number - 1\\r\\n            ) {\\r\\n                return (50, 8);\\r\\n            }\\r\\n            return (6, 5);\\r\\n        }\\r\\n\\r\\n        //check straight\\r\\n        if (sortedCards[0].number == 1 && sortedCards[1].number == 2) {\\r\\n            if (\\r\\n                sortedCards[0].number == sortedCards[1].number - 1 &&\\r\\n                sortedCards[2].number == sortedCards[3].number - 1 &&\\r\\n                sortedCards[3].number == sortedCards[4].number - 1 &&\\r\\n                sortedCards[1].number == sortedCards[2].number - 1\\r\\n            ) {\\r\\n                return (5, 4);\\r\\n            }\\r\\n        }\\r\\n        if (sortedCards[0].number == 1 && sortedCards[4].number == 13) {\\r\\n            if (\\r\\n                sortedCards[2].number == sortedCards[3].number - 1 &&\\r\\n                sortedCards[3].number == sortedCards[4].number - 1 &&\\r\\n                sortedCards[1].number == sortedCards[2].number - 1\\r\\n            ) {\\r\\n                return (5, 4);\\r\\n            }\\r\\n        }\\r\\n        if (\\r\\n            sortedCards[0].number == sortedCards[1].number - 1 &&\\r\\n            sortedCards[1].number == sortedCards[2].number - 1 &&\\r\\n            sortedCards[2].number == sortedCards[3].number - 1 &&\\r\\n            sortedCards[3].number == sortedCards[4].number - 1\\r\\n        ) {\\r\\n            return (5, 4);\\r\\n        }\\r\\n        //check three of a kind\\r\\n        if (\\r\\n            sortedCards[0].number == sortedCards[1].number &&\\r\\n            sortedCards[1].number == sortedCards[2].number\\r\\n        ) {\\r\\n            return (3, 3);\\r\\n        }\\r\\n        if (\\r\\n            sortedCards[1].number == sortedCards[2].number &&\\r\\n            sortedCards[2].number == sortedCards[3].number\\r\\n        ) {\\r\\n            return (3, 3);\\r\\n        }\\r\\n        if (\\r\\n            sortedCards[2].number == sortedCards[3].number &&\\r\\n            sortedCards[3].number == sortedCards[4].number\\r\\n        ) {\\r\\n            return (3, 3);\\r\\n        }\\r\\n        //check two pair\\r\\n        if (sortedCards[0].number == sortedCards[1].number) {\\r\\n            if (\\r\\n                sortedCards[2].number == sortedCards[3].number ||\\r\\n                sortedCards[3].number == sortedCards[4].number\\r\\n            ) {\\r\\n                return (2, 2);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (sortedCards[1].number == sortedCards[2].number) {\\r\\n            if (sortedCards[3].number == sortedCards[4].number) {\\r\\n                return (2, 2);\\r\\n            }\\r\\n        }\\r\\n        //check one pair jacks or higher\\r\\n        if (sortedCards[0].number == sortedCards[1].number) {\\r\\n            if (sortedCards[0].number > 10 || sortedCards[0].number == 1) {\\r\\n                return (1, 1);\\r\\n            }\\r\\n        }\\r\\n        if (sortedCards[1].number == sortedCards[2].number) {\\r\\n            if (sortedCards[1].number > 10 || sortedCards[1].number == 1) {\\r\\n                return (1, 1);\\r\\n            }\\r\\n        }\\r\\n        if (sortedCards[2].number == sortedCards[3].number) {\\r\\n            if (sortedCards[2].number > 10 || sortedCards[2].number == 1) {\\r\\n                return (1, 1);\\r\\n            }\\r\\n        }\\r\\n        if (sortedCards[3].number == sortedCards[4].number) {\\r\\n            if (sortedCards[3].number > 10 || sortedCards[3].number == 1) {\\r\\n                return (1, 1);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return (0, 0);\\r\\n    }\\r\\n\\r\\n    function _quickSort(\\r\\n        Card[5] memory arr,\\r\\n        int256 left,\\r\\n        int256 right\\r\\n    ) internal pure {\\r\\n        int256 i = left;\\r\\n        int256 j = right;\\r\\n        if (i == j) return;\\r\\n        uint256 pivot = arr[uint256(left + (right - left) / 2)].number;\\r\\n        while (i <= j) {\\r\\n            while (arr[uint256(i)].number < pivot) i++;\\r\\n            while (pivot < arr[uint256(j)].number) j--;\\r\\n            if (i <= j) {\\r\\n                (arr[uint256(i)].number, arr[uint256(j)].number) = (\\r\\n                    arr[uint256(j)].number,\\r\\n                    arr[uint256(i)].number\\r\\n                );\\r\\n                (arr[uint256(i)].suit, arr[uint256(j)].suit) = (\\r\\n                    arr[uint256(j)].suit,\\r\\n                    arr[uint256(i)].suit\\r\\n                );\\r\\n                i++;\\r\\n                j--;\\r\\n            }\\r\\n        }\\r\\n        if (left < j) {\\r\\n            _quickSort(arr, left, j);\\r\\n        }\\r\\n        if (i < right) {\\r\\n            _quickSort(arr, i, right);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _sort(Card[5] memory data) internal pure returns (Card[5] memory) {\\r\\n        _quickSort(data, int256(0), int256(data.length - 1));\\r\\n        return data;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev calculates the maximum wager allowed based on the bankroll size\\r\\n     */\\r\\n    function _kellyWager(uint256 wager, address tokenAddress) internal view {\\r\\n        uint256 balance;\\r\\n        if (tokenAddress == address(0)) {\\r\\n            balance = address(Bankroll).balance;\\r\\n        } else {\\r\\n            balance = IERC20(tokenAddress).balanceOf(address(Bankroll));\\r\\n        }\\r\\n        uint256 maxWager = (balance * 133937) / 100000000;\\r\\n        if (wager > maxWager) {\\r\\n            revert WagerAboveLimit(wager, maxWager);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Common.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport {SafeERC20, IERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\n\\r\\n//import \\\"hardhat/console.sol\\\";\\r\\n\\r\\ninterface IBankRoll {\\r\\n    function getIsGame(address game) external view returns (bool);\\r\\n\\r\\n    function getIsValidWager(\\r\\n        address game,\\r\\n        address tokenAddress\\r\\n    ) external view returns (bool);\\r\\n\\r\\n    function transferPayout(\\r\\n        address player,\\r\\n        uint256 payout,\\r\\n        address token\\r\\n    ) external;\\r\\n\\r\\n    function getOwner() external view returns (address);\\r\\n\\r\\n    function isPlayerSuspended(\\r\\n        address player\\r\\n    ) external view returns (bool, uint256);\\r\\n}\\r\\n\\r\\ninterface IVRFCoordinatorV2 is VRFCoordinatorV2Interface {\\r\\n    function getFeeConfig()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint32,\\r\\n            uint32,\\r\\n            uint32,\\r\\n            uint32,\\r\\n            uint32,\\r\\n            uint24,\\r\\n            uint24,\\r\\n            uint24,\\r\\n            uint24\\r\\n        );\\r\\n}\\r\\n\\r\\ncontract Common is ReentrancyGuard {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    uint256 public VRFFees;\\r\\n    address public ChainLinkVRF;\\r\\n    address public _trustedForwarder;\\r\\n\\r\\n    uint64 constant BLOCK_NUMBER_REFUND = 1000;\\r\\n\\r\\n    AggregatorV3Interface public LINK_ETH_FEED;\\r\\n    IVRFCoordinatorV2 public IChainLinkVRF;\\r\\n    IBankRoll public Bankroll;\\r\\n\\r\\n    error NotApprovedBankroll();\\r\\n    error InvalidValue(uint256 required, uint256 sent);\\r\\n    error TransferFailed();\\r\\n    error RefundFailed();\\r\\n    error NotOwner(address want, address have);\\r\\n    error ZeroWager();\\r\\n    error PlayerSuspended(uint256 suspensionTime);\\r\\n\\r\\n    /**\\r\\n     * @dev function to transfer the player wager to bankroll, and charge for VRF fee\\r\\n     * , reverts if bankroll doesn't approve game or token\\r\\n     * @param tokenAddress address of the token the wager is made on\\r\\n     * @param wager total amount wagered\\r\\n     */\\r\\n\\r\\n    function _transferWager(\\r\\n        address tokenAddress,\\r\\n        uint256 wager,\\r\\n        uint256 gasAmount,\\r\\n        address msgSender\\r\\n    ) internal returns (uint256 VRFfee) {\\r\\n        if (!Bankroll.getIsValidWager(address(this), tokenAddress)) {\\r\\n            revert NotApprovedBankroll();\\r\\n        }\\r\\n        if (wager == 0) {\\r\\n            revert ZeroWager();\\r\\n        }\\r\\n        (bool suspended, uint256 suspendedTime) = Bankroll.isPlayerSuspended(\\r\\n            msgSender\\r\\n        );\\r\\n        if (suspended) {\\r\\n            revert PlayerSuspended(suspendedTime);\\r\\n        }\\r\\n        VRFfee = getVRFFee(gasAmount);\\r\\n\\r\\n        if (tokenAddress == address(0)) {\\r\\n            if (msg.value < wager + VRFfee) {\\r\\n                revert InvalidValue(wager + VRFfee, msg.value);\\r\\n            }\\r\\n            _refundExcessValue(msg.value - (VRFfee + wager));\\r\\n        } else {\\r\\n            if (msg.value < VRFfee) {\\r\\n                revert InvalidValue(VRFfee, msg.value);\\r\\n            }\\r\\n\\r\\n            IERC20(tokenAddress).safeTransferFrom(\\r\\n                msgSender,\\r\\n                address(this),\\r\\n                wager\\r\\n            );\\r\\n\\r\\n            _refundExcessValue(msg.value - VRFfee);\\r\\n        }\\r\\n        VRFFees += VRFfee;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev function to transfer the wager held by the game contract to the bankroll\\r\\n     * @param tokenAddress address of the token to transfer\\r\\n     * @param amount token amount to transfer\\r\\n     */\\r\\n    function _transferToBankroll(\\r\\n        address tokenAddress,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        if (tokenAddress == address(0)) {\\r\\n            (bool success, ) = payable(address(Bankroll)).call{value: amount}(\\r\\n                \\\"\\\"\\r\\n            );\\r\\n            if (!success) {\\r\\n                revert RefundFailed();\\r\\n            }\\r\\n        } else {\\r\\n            IERC20(tokenAddress).safeTransfer(address(Bankroll), amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev calculates in form of native token the fee charged by chainlink VRF\\r\\n     * @return fee amount of fee user has to pay\\r\\n     */\\r\\n    function getVRFFee(uint256 gasAmount) public view returns (uint256 fee) {\\r\\n        (, int256 answer, , , ) = LINK_ETH_FEED.latestRoundData();\\r\\n        (uint32 fulfillmentFlatFeeLinkPPMTier1, , , , , , , , ) = IChainLinkVRF\\r\\n            .getFeeConfig();\\r\\n\\r\\n        fee =\\r\\n            tx.gasprice *\\r\\n            (gasAmount) +\\r\\n            ((1e12 *\\r\\n                uint256(fulfillmentFlatFeeLinkPPMTier1) *\\r\\n                uint256(answer)) / 1e18);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev returns to user the excess fee sent to pay for the VRF\\r\\n     * @param refund amount to send back to user\\r\\n     */\\r\\n    function _refundExcessValue(uint256 refund) internal {\\r\\n        if (refund == 0) {\\r\\n            return;\\r\\n        }\\r\\n        (bool success, ) = payable(msg.sender).call{value: refund}(\\\"\\\");\\r\\n        if (!success) {\\r\\n            revert RefundFailed();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev function to charge user for VRF\\r\\n     */\\r\\n    function _payVRFFee(uint256 gasAmount) internal returns (uint256 VRFfee) {\\r\\n        VRFfee = getVRFFee(gasAmount);\\r\\n        if (msg.value < VRFfee) {\\r\\n            revert InvalidValue(VRFfee, msg.value);\\r\\n        }\\r\\n        _refundExcessValue(msg.value - VRFfee);\\r\\n        VRFFees += VRFfee;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev function to transfer VRF fees acumulated in the contract to the Bankroll\\r\\n     * Can only be called by owner\\r\\n     */\\r\\n    function transferFees(address to) external nonReentrant {\\r\\n        if (msg.sender != Bankroll.getOwner()) {\\r\\n            revert NotOwner(Bankroll.getOwner(), msg.sender);\\r\\n        }\\r\\n        uint256 fee = VRFFees;\\r\\n        VRFFees = 0;\\r\\n        (bool success, ) = payable(address(to)).call{value: fee}(\\\"\\\");\\r\\n        if (!success) {\\r\\n            revert TransferFailed();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev function to transfer wager to game contract, without charging for VRF\\r\\n     * @param tokenAddress tokenAddress the wager is made on\\r\\n     * @param wager wager amount\\r\\n     */\\r\\n    function _transferWagerPvPNoVRF(\\r\\n        address tokenAddress,\\r\\n        uint256 wager\\r\\n    ) internal {\\r\\n        if (!Bankroll.getIsValidWager(address(this), tokenAddress)) {\\r\\n            revert NotApprovedBankroll();\\r\\n        }\\r\\n        if (tokenAddress == address(0)) {\\r\\n            if (!(msg.value == wager)) {\\r\\n                revert InvalidValue(wager, msg.value);\\r\\n            }\\r\\n        } else {\\r\\n            IERC20(tokenAddress).safeTransferFrom(\\r\\n                msg.sender,\\r\\n                address(this),\\r\\n                wager\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev function to transfer wager to game contract, including charge for VRF\\r\\n     * @param tokenAddress tokenAddress the wager is made on\\r\\n     * @param wager wager amount\\r\\n     */\\r\\n    function _transferWagerPvP(\\r\\n        address tokenAddress,\\r\\n        uint256 wager,\\r\\n        uint256 gasAmount\\r\\n    ) internal {\\r\\n        if (!Bankroll.getIsValidWager(address(this), tokenAddress)) {\\r\\n            revert NotApprovedBankroll();\\r\\n        }\\r\\n\\r\\n        uint256 VRFfee = getVRFFee(gasAmount);\\r\\n        if (tokenAddress == address(0)) {\\r\\n            if (msg.value < wager + VRFfee) {\\r\\n                revert InvalidValue(wager, msg.value);\\r\\n            }\\r\\n\\r\\n            _refundExcessValue(msg.value - (VRFfee + wager));\\r\\n        } else {\\r\\n            if (msg.value < VRFfee) {\\r\\n                revert InvalidValue(VRFfee, msg.value);\\r\\n            }\\r\\n\\r\\n            IERC20(tokenAddress).safeTransferFrom(\\r\\n                msg.sender,\\r\\n                address(this),\\r\\n                wager\\r\\n            );\\r\\n            _refundExcessValue(msg.value - VRFfee);\\r\\n        }\\r\\n        VRFFees += VRFfee;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev transfers payout from the game contract to the players\\r\\n     * @param player address of the player to transfer the payout to\\r\\n     * @param payout amount of payout to transfer\\r\\n     * @param tokenAddress address of the token that payout will be transfered\\r\\n     */\\r\\n    function _transferPayoutPvP(\\r\\n        address player,\\r\\n        uint256 payout,\\r\\n        address tokenAddress\\r\\n    ) internal {\\r\\n        if (tokenAddress == address(0)) {\\r\\n            (bool success, ) = payable(player).call{value: payout}(\\\"\\\");\\r\\n            if (!success) {\\r\\n                revert TransferFailed();\\r\\n            }\\r\\n        } else {\\r\\n            IERC20(tokenAddress).safeTransfer(player, payout);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev transfers house edge from game contract to bankroll\\r\\n     * @param amount amount to transfer\\r\\n     * @param tokenAddress address of token to transfer\\r\\n     */\\r\\n    function _transferHouseEdgePvP(\\r\\n        uint256 amount,\\r\\n        address tokenAddress\\r\\n    ) internal {\\r\\n        if (tokenAddress == address(0)) {\\r\\n            (bool success, ) = payable(address(Bankroll)).call{value: amount}(\\r\\n                \\\"\\\"\\r\\n            );\\r\\n            if (!success) {\\r\\n                revert TransferFailed();\\r\\n            }\\r\\n        } else {\\r\\n            IERC20(tokenAddress).safeTransfer(address(Bankroll), amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev function to request bankroll to give payout to player\\r\\n     * @param player address of the player\\r\\n     * @param payout amount of payout to give\\r\\n     * @param tokenAddress address of the token in which to give the payout\\r\\n     */\\r\\n    function _transferPayout(\\r\\n        address player,\\r\\n        uint256 payout,\\r\\n        address tokenAddress\\r\\n    ) internal {\\r\\n        Bankroll.transferPayout(player, payout, tokenAddress);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev function to send the request for randomness to chainlink\\r\\n     * @param numWords number of random numbers required\\r\\n     */\\r\\n    function _requestRandomWords(\\r\\n        uint32 numWords\\r\\n    ) internal returns (uint256 s_requestId) {\\r\\n        s_requestId = VRFCoordinatorV2Interface(ChainLinkVRF)\\r\\n            .requestRandomWords(\\r\\n                0xd729dc84e21ae57ffb6be0053bf2b0668aa2aaf300a2a7b2ddf7dc0bb6e875a8,\\r\\n                576,\\r\\n                3,\\r\\n                2500000,\\r\\n                numWords\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function isTrustedForwarder(address forwarder) public view returns (bool) {\\r\\n        return forwarder == _trustedForwarder;\\r\\n    }\\r\\n\\r\\n    function _msgSender() internal view returns (address ret) {\\r\\n        if (msg.data.length >= 20 && isTrustedForwarder(msg.sender)) {\\r\\n            // At this point we know that the sender is a trusted forwarder,\\r\\n            // so we trust that the last bytes of msg.data are the verified sender address.\\r\\n            // extract sender address from the end of msg.data\\r\\n            assembly {\\r\\n                ret := shr(96, calldataload(sub(calldatasize(), 20)))\\r\\n            }\\r\\n        } else {\\r\\n            ret = msg.sender;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bankroll\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vrf\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"link_eth_feed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_forwarder\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyInGame\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestID\",\"type\":\"uint256\"}],\"name\":\"AwaitingVRF\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"have\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"want\",\"type\":\"uint256\"}],\"name\":\"BlockNumberTooLow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sent\",\"type\":\"uint256\"}],\"name\":\"InvalidValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoFeeRequired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoRequestPending\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotApprovedBankroll\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInGame\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"}],\"name\":\"NotOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"suspensionTime\",\"type\":\"uint256\"}],\"name\":\"PlayerSuspended\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RefundFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wager\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxWager\",\"type\":\"uint256\"}],\"name\":\"WagerAboveLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroWager\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"playerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"VRFFee\",\"type\":\"uint256\"}],\"name\":\"VideoPoker_Fee_Event\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"playerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wager\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"number\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"suit\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct VideoPoker.Card[5]\",\"name\":\"playerHand\",\"type\":\"tuple[5]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outcome\",\"type\":\"uint256\"}],\"name\":\"VideoPoker_Outcome_Event\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"playerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wager\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"VRFFee\",\"type\":\"uint256\"}],\"name\":\"VideoPoker_Play_Event\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wager\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"VideoPoker_Refund_Event\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"playerAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"number\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"suit\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct VideoPoker.Card[5]\",\"name\":\"playerHand\",\"type\":\"tuple[5]\"}],\"name\":\"VideoPoker_Start_Event\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Bankroll\",\"outputs\":[{\"internalType\":\"contract IBankRoll\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ChainLinkVRF\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IChainLinkVRF\",\"outputs\":[{\"internalType\":\"contract IVRFCoordinatorV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LINK_ETH_FEED\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VRFFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"VideoPoker_GetState\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"wager\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requestID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"blockNumber\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"number\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"suit\",\"type\":\"uint8\"}],\"internalType\":\"struct VideoPoker.Card[5]\",\"name\":\"cardsInHand\",\"type\":\"tuple[5]\"},{\"internalType\":\"bool[5]\",\"name\":\"toReplace\",\"type\":\"bool[5]\"},{\"internalType\":\"bool\",\"name\":\"ingame\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isFirstRequest\",\"type\":\"bool\"}],\"internalType\":\"struct VideoPoker.VideoPokerGame\",\"name\":\"videopokerState\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VideoPoker_Refund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool[5]\",\"name\":\"toReplace\",\"type\":\"bool[5]\"}],\"name\":\"VideoPoker_Replace\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wager\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"VideoPoker_Start\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"number\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"suit\",\"type\":\"uint8\"}],\"internalType\":\"struct VideoPoker.Card[5]\",\"name\":\"cardsInHand\",\"type\":\"tuple[5]\"}],\"name\":\"_determineHandPayout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_trustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gasAmount\",\"type\":\"uint256\"}],\"name\":\"getVRFFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "VideoPoker", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "00000000000000000000000051e99a0d09eeca8d7efec3062ac024b6d0989959000000000000000000000000ae975071be8f8ee67addbc1a82488f1c248580670000000000000000000000005787befdc0ecd210dfa948264631cd53e68f7802000000000000000000000000f73ab2d782bf6ba97ac4405d2cd4f1135da8dbd9", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}