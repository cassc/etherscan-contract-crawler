{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/CompoundStrategyERC20DMMflat.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// CAUTION\\r\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\r\\n// because it relies on the compiler's built in overflow checks.\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity's arithmetic operations.\\r\\n *\\r\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\r\\n * now has built in overflow checking.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryAdd(uint256 a, uint256 b)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bool, uint256)\\r\\n    {\\r\\n        unchecked {\\r\\n            uint256 c = a + b;\\r\\n            if (c < a) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function trySub(uint256 a, uint256 b)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bool, uint256)\\r\\n    {\\r\\n        unchecked {\\r\\n            if (b > a) return (false, 0);\\r\\n            return (true, a - b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMul(uint256 a, uint256 b)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bool, uint256)\\r\\n    {\\r\\n        unchecked {\\r\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n            // benefit is lost if 'b' is also tested.\\r\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n            if (a == 0) return (true, 0);\\r\\n            uint256 c = a * b;\\r\\n            if (c / a != b) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryDiv(uint256 a, uint256 b)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bool, uint256)\\r\\n    {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a / b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMod(uint256 a, uint256 b)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bool, uint256)\\r\\n    {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a % b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a + b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a * b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a % b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b <= a, errorMessage);\\r\\n            return a - b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a / b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting with custom message when dividing by zero.\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a % b;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n}\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\r\\n\\r\\npragma solidity ^0.8.1;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\r\\n     *\\r\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\r\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\r\\n     * constructor.\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize/address.code.length, which returns 0\\r\\n        // for contracts in construction, since the code is only stored at the end\\r\\n        // of the constructor execution.\\r\\n\\r\\n        return account.code.length > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(\\r\\n            address(this).balance >= amount,\\r\\n            \\\"Address: insufficient balance\\\"\\r\\n        );\\r\\n\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(\\r\\n            success,\\r\\n            \\\"Address: unable to send value, recipient may have reverted\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain `call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data)\\r\\n        internal\\r\\n        returns (bytes memory)\\r\\n    {\\r\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value\\r\\n    ) internal returns (bytes memory) {\\r\\n        return\\r\\n            functionCallWithValue(\\r\\n                target,\\r\\n                data,\\r\\n                value,\\r\\n                \\\"Address: low-level call with value failed\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(\\r\\n            address(this).balance >= value,\\r\\n            \\\"Address: insufficient balance for call\\\"\\r\\n        );\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.call{value: value}(\\r\\n            data\\r\\n        );\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data)\\r\\n        internal\\r\\n        view\\r\\n        returns (bytes memory)\\r\\n    {\\r\\n        return\\r\\n            functionStaticCall(\\r\\n                target,\\r\\n                data,\\r\\n                \\\"Address: low-level static call failed\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data)\\r\\n        internal\\r\\n        returns (bytes memory)\\r\\n    {\\r\\n        return\\r\\n            functionDelegateCall(\\r\\n                target,\\r\\n                data,\\r\\n                \\\"Address: low-level delegate call failed\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\r\\n     * revert reason using the provided one.\\r\\n     *\\r\\n     * _Available since v4.3._\\r\\n     */\\r\\n    function verifyCallResult(\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length > 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title SafeERC20\\r\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\r\\n * contract returns false). Tokens that return no value (and instead revert or\\r\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\r\\n * successful.\\r\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\r\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\r\\n */\\r\\nlibrary SafeERC20 {\\r\\n    using Address for address;\\r\\n\\r\\n    function safeTransfer(\\r\\n        IERC20 token,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.transfer.selector, to, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        IERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deprecated. This function has issues similar to the ones found in\\r\\n     * {IERC20-approve}, and its usage is discouraged.\\r\\n     *\\r\\n     * Whenever possible, use {safeIncreaseAllowance} and\\r\\n     * {safeDecreaseAllowance} instead.\\r\\n     */\\r\\n    function safeApprove(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        // safeApprove should only be called when setting an initial allowance,\\r\\n        // or when resetting it to zero. To increase and decrease it, use\\r\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\r\\n        require(\\r\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.approve.selector, spender, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeIncreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(\\r\\n                token.approve.selector,\\r\\n                spender,\\r\\n                newAllowance\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeDecreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        unchecked {\\r\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\r\\n            require(\\r\\n                oldAllowance >= value,\\r\\n                \\\"SafeERC20: decreased allowance below zero\\\"\\r\\n            );\\r\\n            uint256 newAllowance = oldAllowance - value;\\r\\n            _callOptionalReturn(\\r\\n                token,\\r\\n                abi.encodeWithSelector(\\r\\n                    token.approve.selector,\\r\\n                    spender,\\r\\n                    newAllowance\\r\\n                )\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\r\\n        // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n        bytes memory returndata = address(token).functionCall(\\r\\n            data,\\r\\n            \\\"SafeERC20: low-level call failed\\\"\\r\\n        );\\r\\n        if (returndata.length > 0) {\\r\\n            // Return data is optional\\r\\n            require(\\r\\n                abi.decode(returndata, (bool)),\\r\\n                \\\"SafeERC20: ERC20 operation did not succeed\\\"\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\r\\n */\\r\\ninterface IAccessControl {\\r\\n    /**\\r\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\r\\n     *\\r\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\r\\n     * {RoleAdminChanged} not being emitted signaling this.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    event RoleAdminChanged(\\r\\n        bytes32 indexed role,\\r\\n        bytes32 indexed previousAdminRole,\\r\\n        bytes32 indexed newAdminRole\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `account` is granted `role`.\\r\\n     *\\r\\n     * `sender` is the account that originated the contract call, an admin role\\r\\n     * bearer except when using {AccessControl-_setupRole}.\\r\\n     */\\r\\n    event RoleGranted(\\r\\n        bytes32 indexed role,\\r\\n        address indexed account,\\r\\n        address indexed sender\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `account` is revoked `role`.\\r\\n     *\\r\\n     * `sender` is the account that originated the contract call:\\r\\n     *   - if using `revokeRole`, it is the admin role bearer\\r\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\r\\n     */\\r\\n    event RoleRevoked(\\r\\n        bytes32 indexed role,\\r\\n        address indexed account,\\r\\n        address indexed sender\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Returns `true` if `account` has been granted `role`.\\r\\n     */\\r\\n    function hasRole(bytes32 role, address account)\\r\\n        external\\r\\n        view\\r\\n        returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\r\\n     * {revokeRole}.\\r\\n     *\\r\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\r\\n     */\\r\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\r\\n\\r\\n    /**\\r\\n     * @dev Grants `role` to `account`.\\r\\n     *\\r\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\r\\n     * event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the caller must have ``role``'s admin role.\\r\\n     */\\r\\n    function grantRole(bytes32 role, address account) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Revokes `role` from `account`.\\r\\n     *\\r\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the caller must have ``role``'s admin role.\\r\\n     */\\r\\n    function revokeRole(bytes32 role, address account) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Revokes `role` from the calling account.\\r\\n     *\\r\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\r\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\r\\n     * if they are compromised (such as when a trusted device is misplaced).\\r\\n     *\\r\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\r\\n     * event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the caller must be `account`.\\r\\n     */\\r\\n    function renounceRole(bytes32 role, address account) external;\\r\\n}\\r\\n\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev String operations.\\r\\n */\\r\\nlibrary Strings {\\r\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\r\\n     */\\r\\n    function toString(uint256 value) internal pure returns (string memory) {\\r\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\r\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\r\\n\\r\\n        if (value == 0) {\\r\\n            return \\\"0\\\";\\r\\n        }\\r\\n        uint256 temp = value;\\r\\n        uint256 digits;\\r\\n        while (temp != 0) {\\r\\n            digits++;\\r\\n            temp /= 10;\\r\\n        }\\r\\n        bytes memory buffer = new bytes(digits);\\r\\n        while (value != 0) {\\r\\n            digits -= 1;\\r\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\r\\n            value /= 10;\\r\\n        }\\r\\n        return string(buffer);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\r\\n     */\\r\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\r\\n        if (value == 0) {\\r\\n            return \\\"0x00\\\";\\r\\n        }\\r\\n        uint256 temp = value;\\r\\n        uint256 length = 0;\\r\\n        while (temp != 0) {\\r\\n            length++;\\r\\n            temp >>= 8;\\r\\n        }\\r\\n        return toHexString(value, length);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\r\\n     */\\r\\n    function toHexString(uint256 value, uint256 length)\\r\\n        internal\\r\\n        pure\\r\\n        returns (string memory)\\r\\n    {\\r\\n        bytes memory buffer = new bytes(2 * length + 2);\\r\\n        buffer[0] = \\\"0\\\";\\r\\n        buffer[1] = \\\"x\\\";\\r\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\r\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\r\\n            value >>= 4;\\r\\n        }\\r\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\r\\n        return string(buffer);\\r\\n    }\\r\\n}\\r\\n\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC165 standard, as defined in the\\r\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\r\\n *\\r\\n * Implementers can declare support of contract interfaces, which can then be\\r\\n * queried by others ({ERC165Checker}).\\r\\n *\\r\\n * For an implementation, see {ERC165}.\\r\\n */\\r\\ninterface IERC165 {\\r\\n    /**\\r\\n     * @dev Returns true if this contract implements the interface defined by\\r\\n     * `interfaceId`. See the corresponding\\r\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\r\\n     * to learn more about how these ids are created.\\r\\n     *\\r\\n     * This function call must use less than 30 000 gas.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\r\\n}\\r\\n\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the {IERC165} interface.\\r\\n *\\r\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\r\\n * for the additional interface id that will be supported. For example:\\r\\n *\\r\\n * ```solidity\\r\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\r\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\r\\n * }\\r\\n * ```\\r\\n *\\r\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\r\\n */\\r\\nabstract contract ERC165 is IERC165 {\\r\\n    /**\\r\\n     * @dev See {IERC165-supportsInterface}.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        return interfaceId == type(IERC165).interfaceId;\\r\\n    }\\r\\n}\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v4.6.0) (access/AccessControl.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Contract module that allows children to implement role-based access\\r\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\r\\n * members except through off-chain means by accessing the contract event logs. Some\\r\\n * applications may benefit from on-chain enumerability, for those cases see\\r\\n * {AccessControlEnumerable}.\\r\\n *\\r\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\r\\n * in the external API and be unique. The best way to achieve this is by\\r\\n * using `public constant` hash digests:\\r\\n *\\r\\n * ```\\r\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\r\\n * ```\\r\\n *\\r\\n * Roles can be used to represent a set of permissions. To restrict access to a\\r\\n * function call, use {hasRole}:\\r\\n *\\r\\n * ```\\r\\n * function foo() public {\\r\\n *     require(hasRole(MY_ROLE, msg.sender));\\r\\n *     ...\\r\\n * }\\r\\n * ```\\r\\n *\\r\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\r\\n * {revokeRole} functions. Each role has an associated admin role, and only\\r\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\r\\n *\\r\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\r\\n * that only accounts with this role will be able to grant or revoke other\\r\\n * roles. More complex role relationships can be created by using\\r\\n * {_setRoleAdmin}.\\r\\n *\\r\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\r\\n * grant and revoke this role. Extra precautions should be taken to secure\\r\\n * accounts that have been granted it.\\r\\n */\\r\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\r\\n    struct RoleData {\\r\\n        mapping(address => bool) members;\\r\\n        bytes32 adminRole;\\r\\n    }\\r\\n\\r\\n    mapping(bytes32 => RoleData) private _roles;\\r\\n\\r\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\r\\n     * with a standardized message including the required role.\\r\\n     *\\r\\n     * The format of the revert reason is given by the following regular expression:\\r\\n     *\\r\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\r\\n     *\\r\\n     * _Available since v4.1._\\r\\n     */\\r\\n    modifier onlyRole(bytes32 role) {\\r\\n        _checkRole(role);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC165-supportsInterface}.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        return\\r\\n            interfaceId == type(IAccessControl).interfaceId ||\\r\\n            super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns `true` if `account` has been granted `role`.\\r\\n     */\\r\\n    function hasRole(bytes32 role, address account)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        return _roles[role].members[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\r\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\r\\n     *\\r\\n     * Format of the revert message is described in {_checkRole}.\\r\\n     *\\r\\n     * _Available since v4.6._\\r\\n     */\\r\\n    function _checkRole(bytes32 role) internal view virtual {\\r\\n        _checkRole(role, _msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Revert with a standard message if `account` is missing `role`.\\r\\n     *\\r\\n     * The format of the revert reason is given by the following regular expression:\\r\\n     *\\r\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\r\\n     */\\r\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\r\\n        if (!hasRole(role, account)) {\\r\\n            revert(\\r\\n                string(\\r\\n                    abi.encodePacked(\\r\\n                        \\\"AccessControl: account \\\",\\r\\n                        Strings.toHexString(uint160(account), 20),\\r\\n                        \\\" is missing role \\\",\\r\\n                        Strings.toHexString(uint256(role), 32)\\r\\n                    )\\r\\n                )\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\r\\n     * {revokeRole}.\\r\\n     *\\r\\n     * To change a role's admin, use {_setRoleAdmin}.\\r\\n     */\\r\\n    function getRoleAdmin(bytes32 role)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (bytes32)\\r\\n    {\\r\\n        return _roles[role].adminRole;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Grants `role` to `account`.\\r\\n     *\\r\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\r\\n     * event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the caller must have ``role``'s admin role.\\r\\n     */\\r\\n    function grantRole(bytes32 role, address account)\\r\\n        public\\r\\n        virtual\\r\\n        override\\r\\n        onlyRole(getRoleAdmin(role))\\r\\n    {\\r\\n        _grantRole(role, account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Revokes `role` from `account`.\\r\\n     *\\r\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the caller must have ``role``'s admin role.\\r\\n     */\\r\\n    function revokeRole(bytes32 role, address account)\\r\\n        public\\r\\n        virtual\\r\\n        override\\r\\n        onlyRole(getRoleAdmin(role))\\r\\n    {\\r\\n        _revokeRole(role, account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Revokes `role` from the calling account.\\r\\n     *\\r\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\r\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\r\\n     * if they are compromised (such as when a trusted device is misplaced).\\r\\n     *\\r\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\r\\n     * event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the caller must be `account`.\\r\\n     */\\r\\n    function renounceRole(bytes32 role, address account)\\r\\n        public\\r\\n        virtual\\r\\n        override\\r\\n    {\\r\\n        require(\\r\\n            account == _msgSender(),\\r\\n            \\\"AccessControl: can only renounce roles for self\\\"\\r\\n        );\\r\\n\\r\\n        _revokeRole(role, account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Grants `role` to `account`.\\r\\n     *\\r\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\r\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\r\\n     * checks on the calling account.\\r\\n     *\\r\\n     * [WARNING]\\r\\n     * ====\\r\\n     * This function should only be called from the constructor when setting\\r\\n     * up the initial roles for the system.\\r\\n     *\\r\\n     * Using this function in any other way is effectively circumventing the admin\\r\\n     * system imposed by {AccessControl}.\\r\\n     * ====\\r\\n     *\\r\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\r\\n     */\\r\\n    function _setupRole(bytes32 role, address account) internal virtual {\\r\\n        _grantRole(role, account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\r\\n     *\\r\\n     * Emits a {RoleAdminChanged} event.\\r\\n     */\\r\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\r\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\r\\n        _roles[role].adminRole = adminRole;\\r\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Grants `role` to `account`.\\r\\n     *\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _grantRole(bytes32 role, address account) internal virtual {\\r\\n        if (!hasRole(role, account)) {\\r\\n            _roles[role].members[account] = true;\\r\\n            emit RoleGranted(role, account, _msgSender());\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Revokes `role` from `account`.\\r\\n     *\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\r\\n        if (hasRole(role, account)) {\\r\\n            _roles[role].members[account] = false;\\r\\n            emit RoleRevoked(role, account, _msgSender());\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Contract module that helps prevent reentrant calls to a function.\\r\\n *\\r\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\r\\n * available, which can be applied to functions to make sure there are no nested\\r\\n * (reentrant) calls to them.\\r\\n *\\r\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\r\\n * `nonReentrant` may not call one another. This can be worked around by making\\r\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\r\\n * points to them.\\r\\n *\\r\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\r\\n * to protect against it, check out our blog post\\r\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\r\\n */\\r\\nabstract contract ReentrancyGuard {\\r\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\r\\n    // word because each write operation emits an extra SLOAD to first read the\\r\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\r\\n    // back. This is the compiler's defense against contract upgrades and\\r\\n    // pointer aliasing, and it cannot be disabled.\\r\\n\\r\\n    // The values being non-zero value makes deployment a bit more expensive,\\r\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\r\\n    // amount. Since refunds are capped to a percentage of the total\\r\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\r\\n    // increase the likelihood of the full refund coming into effect.\\r\\n    uint256 private constant _NOT_ENTERED = 1;\\r\\n    uint256 private constant _ENTERED = 2;\\r\\n\\r\\n    uint256 private _status;\\r\\n\\r\\n    constructor() {\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\r\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\r\\n     * function is not supported. It is possible to prevent this from happening\\r\\n     * by making the `nonReentrant` function external, and making it call a\\r\\n     * `private` function that does the actual work.\\r\\n     */\\r\\n    modifier nonReentrant() {\\r\\n        // On the first call to nonReentrant, _notEntered will be true\\r\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\r\\n\\r\\n        // Any calls to nonReentrant after this point will fail\\r\\n        _status = _ENTERED;\\r\\n\\r\\n        _;\\r\\n\\r\\n        // By storing the original value once again, a refund is triggered (see\\r\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n}\\r\\n\\r\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Contract module which allows children to implement an emergency stop\\r\\n * mechanism that can be triggered by an authorized account.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the\\r\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\r\\n * the functions of your contract. Note that they will not be pausable by\\r\\n * simply including this module, only once the modifiers are put in place.\\r\\n */\\r\\nabstract contract Pausable is Context {\\r\\n    /**\\r\\n     * @dev Emitted when the pause is triggered by `account`.\\r\\n     */\\r\\n    event Paused(address account);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the pause is lifted by `account`.\\r\\n     */\\r\\n    event Unpaused(address account);\\r\\n\\r\\n    bool private _paused;\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract in unpaused state.\\r\\n     */\\r\\n    constructor() {\\r\\n        _paused = false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the contract is paused, and false otherwise.\\r\\n     */\\r\\n    function paused() public view virtual returns (bool) {\\r\\n        return _paused;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The contract must not be paused.\\r\\n     */\\r\\n    modifier whenNotPaused() {\\r\\n        require(!paused(), \\\"Pausable: paused\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to make a function callable only when the contract is paused.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The contract must be paused.\\r\\n     */\\r\\n    modifier whenPaused() {\\r\\n        require(paused(), \\\"Pausable: not paused\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Triggers stopped state.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The contract must not be paused.\\r\\n     */\\r\\n    function _pause() internal virtual whenNotPaused {\\r\\n        _paused = true;\\r\\n        emit Paused(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns to normal state.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The contract must be paused.\\r\\n     */\\r\\n    function _unpause() internal virtual whenPaused {\\r\\n        _paused = false;\\r\\n        emit Unpaused(_msgSender());\\r\\n    }\\r\\n}\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IrVault {\\r\\n    //  -------------------- EVENTS --------------------\\r\\n    event Deposited(address indexed user, uint256 amount);\\r\\n    event Withdrawn(address indexed user, uint256 amount);\\r\\n\\r\\n    //  -------------------- VIEW FUNCTIONS --------------------\\r\\n    function getDepositToken() external view returns (address);\\r\\n\\r\\n    function totalBalance() external view returns (uint);\\r\\n\\r\\n    function getPricePerFullShare() external view returns (uint256);\\r\\n\\r\\n    function getTokensFromShares() external view returns (uint256);\\r\\n\\r\\n    //  -------------------- ADMIN FUNCTIONS --------------------\\r\\n    function setStrategy(address _strategyAddr) external;\\r\\n\\r\\n    function pause() external;\\r\\n\\r\\n    function unpause() external;\\r\\n\\r\\n    function emergencyWithdrawFromStrategy() external;\\r\\n\\r\\n    //  -------------------- USER FUNCTIONS --------------------\\r\\n    function deposit(uint _amount) external payable;\\r\\n\\r\\n    function withdraw(uint _shares) external;\\r\\n\\r\\n    function withdrawAll() external;\\r\\n}\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nabstract contract rStrategy is AccessControl, ReentrancyGuard, Pausable {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    //  -------------------- CONTRACT VARIABLES --------------------\\r\\n    string public name;\\r\\n\\r\\n    // Tokens and Contracts to Interface with\\r\\n    IrVault internal immutable _vault; // The vault contract that this strategy is deployed for, immutable\\r\\n    IERC20 internal immutable _depositToken; // The depositToken that the vault can deposit in this strategy, immutable\\r\\n\\r\\n    // Access Control\\r\\n    bytes32 constant OWNER_ROLE = keccak256(\\\"OWNER\\\");\\r\\n    bytes32 constant MANAGER_ROLE = keccak256(\\\"MANAGER\\\");\\r\\n    bytes32 constant VAULT_ROLE = keccak256(\\\"VAULT\\\");\\r\\n    address public owner; // Address that has admin control over the strategy\\r\\n    address public manager; // Address that calls investment actions on the vault\\r\\n\\r\\n    // Constants\\r\\n    uint constant MAX_UNIT = (2**256) - 1;\\r\\n    uint constant BIG_UNIT = 10**18;\\r\\n\\r\\n    // Balances\\r\\n    uint internal _externalContractTokenBalance; // Total balance of deposit tokens provided to external contracts\\r\\n    uint internal _feeBalance; // Balance of deposit tokens that have been accumulated by the vault as fees\\r\\n\\r\\n    // Parameters\\r\\n    uint public feePercent; // Percentage fee for performance and operations (in big units of percent * 10 ** 18)\\r\\n\\r\\n    //  -------------------- EVENTS --------------------\\r\\n    event Deposited(address indexed user, uint256 amount);\\r\\n    event Withdrawn(address indexed user, uint256 amount);\\r\\n    event Received(address sender, uint amount);\\r\\n\\r\\n    //  -------------------- CONSTRUCTOR FUNCTION --------------------\\r\\n    constructor(\\r\\n        string memory _name,\\r\\n        address _vaultAddr,\\r\\n        address _depositTokenAddr,\\r\\n        uint _feePercent,\\r\\n        address _managerAddr\\r\\n    ) {\\r\\n        // Assign initial variable values\\r\\n        name = _name;\\r\\n        _vault = IrVault(_vaultAddr);\\r\\n        _depositToken = IERC20(_depositTokenAddr);\\r\\n        feePercent = _feePercent;\\r\\n\\r\\n        // Assign roles for access control\\r\\n        owner = msg.sender;\\r\\n        _setupRole(DEFAULT_ADMIN_ROLE, owner);\\r\\n        _setupRole(OWNER_ROLE, owner);\\r\\n\\r\\n        manager = _managerAddr;\\r\\n        _setupRole(MANAGER_ROLE, manager);\\r\\n\\r\\n        _setupRole(VAULT_ROLE, _vaultAddr);\\r\\n    }\\r\\n\\r\\n    //  -------------------- VIEW FUNCTIONS ----------------------\\r\\n    function totalBalance() public view returns (uint) {\\r\\n        return\\r\\n            _depositToken\\r\\n                .balanceOf(address(this))\\r\\n                .add(_externalContractTokenBalance)\\r\\n                .sub(_feeBalance);\\r\\n    }\\r\\n\\r\\n    function getDepositToken() external view returns (address) {\\r\\n        return address(_depositToken);\\r\\n    }\\r\\n\\r\\n    //  -------------------- UTILITY FUNCTIONS --------------------\\r\\n\\r\\n    receive() external payable {\\r\\n        // Receive function required by the Sushiswap Router\\r\\n        emit Received(msg.sender, msg.value);\\r\\n    }\\r\\n\\r\\n    function _availableBalance() internal view returns (uint) {\\r\\n        return _depositToken.balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    function _updateFeeBalance(uint _amountNewTokens) internal {\\r\\n        _feeBalance = _feeBalance.add(\\r\\n            _amountNewTokens.mul(feePercent).div(BIG_UNIT)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _invest(uint _amount) internal virtual;\\r\\n\\r\\n    function _divest(uint _amount) internal virtual;\\r\\n\\r\\n    //  -------------------- MANAGER FUNCTIONS --------------------\\r\\n\\r\\n    //  -------------------- OWNER FUNCTIONS ----------------------\\r\\n    function setManager(address _managerAddr) external onlyRole(OWNER_ROLE) {\\r\\n        revokeRole(MANAGER_ROLE, manager);\\r\\n        manager = _managerAddr;\\r\\n        grantRole(MANAGER_ROLE, manager);\\r\\n    }\\r\\n\\r\\n    function setOwner(address _ownerAddr) external onlyRole(OWNER_ROLE) {\\r\\n        address currentOwner = msg.sender;\\r\\n        owner = _ownerAddr;\\r\\n        grantRole(OWNER_ROLE, owner);\\r\\n        grantRole(DEFAULT_ADMIN_ROLE, owner);\\r\\n        renounceRole(OWNER_ROLE, currentOwner);\\r\\n        renounceRole(DEFAULT_ADMIN_ROLE, currentOwner);\\r\\n    }\\r\\n\\r\\n    function setFeePercent(uint _percent) external onlyRole(OWNER_ROLE) {\\r\\n        feePercent = _percent;\\r\\n    }\\r\\n\\r\\n    function feeBalance() external view onlyRole(OWNER_ROLE) returns (uint) {\\r\\n        return _feeBalance;\\r\\n    }\\r\\n\\r\\n    function withdrawFees() external onlyRole(OWNER_ROLE) nonReentrant {\\r\\n        require(_feeBalance > 0, \\\"Cannot withdraw 0.\\\");\\r\\n        // Check if vault has enough to withdraw, otherwise withdraw from the strategy\\r\\n        uint _balance = _availableBalance();\\r\\n        if (_balance < _feeBalance) {\\r\\n            uint _withdraw = _feeBalance.sub(_balance);\\r\\n            _divest(_withdraw);\\r\\n            uint _after = _availableBalance();\\r\\n            uint _diff = _after.sub(_balance);\\r\\n            if (_diff < _withdraw) {\\r\\n                // Check is for deflationary tokens\\r\\n                _feeBalance = _balance.add(_diff);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Transfer the tokens to the owner\\r\\n        _depositToken.safeTransfer(owner, _feeBalance);\\r\\n\\r\\n        // Set fee balance to zero\\r\\n        _feeBalance = 0;\\r\\n    }\\r\\n\\r\\n    function pause() external onlyRole(OWNER_ROLE) {\\r\\n        _pause();\\r\\n    }\\r\\n\\r\\n    function unpause() external onlyRole(OWNER_ROLE) {\\r\\n        _unpause();\\r\\n    }\\r\\n\\r\\n    //  -------------------- VAULT FUNCTIONS --------------------\\r\\n    function deposit(uint _amount)\\r\\n        external\\r\\n        whenNotPaused\\r\\n        nonReentrant\\r\\n        onlyRole(VAULT_ROLE)\\r\\n    {\\r\\n        // Require the deposit to be non-zero\\r\\n        require(_amount > 0, \\\"Cannot deposit 0.\\\");\\r\\n\\r\\n        // Transfer the staking tokens to the vault\\r\\n        _depositToken.transferFrom(msg.sender, address(this), _amount);\\r\\n\\r\\n        // Emit deposit event\\r\\n        emit Deposited(msg.sender, _amount);\\r\\n    }\\r\\n\\r\\n    function withdraw(uint _amount) external nonReentrant onlyRole(VAULT_ROLE) {\\r\\n        // Require the amount be greater than zero and the sender to have a balance greater than or equal to the amount\\r\\n        require(_amount > 0, \\\"Cannot withdraw 0.\\\");\\r\\n        require(totalBalance() >= _amount, \\\"Cannot withdraw > your balance.\\\");\\r\\n\\r\\n        // Check if vault has enough to withdraw, otherwise withdraw from the strategy\\r\\n        uint _balance = _availableBalance();\\r\\n        if (_balance < _amount) {\\r\\n            uint _withdraw = _amount.sub(_balance);\\r\\n            _divest(_withdraw);\\r\\n            uint _after = _availableBalance();\\r\\n            uint _diff = _after.sub(_balance);\\r\\n            if (_diff < _withdraw) {\\r\\n                // Check is for deflationary tokens\\r\\n                _amount = _balance.add(_diff);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Transfer the tokens to the caller\\r\\n        _depositToken.transfer(msg.sender, _amount);\\r\\n        emit Withdrawn(msg.sender, _amount);\\r\\n    }\\r\\n\\r\\n    function withdrawAll() external nonReentrant onlyRole(VAULT_ROLE) {\\r\\n        // Require the amount be greater than zero and the sender to have a balance greater than or equal to the amount\\r\\n        uint _total = totalBalance();\\r\\n        require(_total >= 0, \\\"Cannot withdraw 0.\\\");\\r\\n\\r\\n        // Check if vault has enough to withdraw, otherwise withdraw from the strategy\\r\\n        uint _balance = _availableBalance();\\r\\n        if (_balance < _total) {\\r\\n            uint _withdraw = _total.sub(_balance);\\r\\n            _divest(_withdraw);\\r\\n            uint _after = _availableBalance();\\r\\n            uint _diff = _after.sub(_balance);\\r\\n            if (_diff < _withdraw) {\\r\\n                // Check is for deflationary tokens\\r\\n                _total = _balance.add(_diff);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Transfer the tokens to the caller\\r\\n        _depositToken.transfer(msg.sender, _total);\\r\\n        emit Withdrawn(msg.sender, _total);\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface IDMMFactory {\\r\\n    function createPool(\\r\\n        IERC20 tokenA,\\r\\n        IERC20 tokenB,\\r\\n        uint32 ampBps\\r\\n    ) external returns (address pool);\\r\\n\\r\\n    function setFeeConfiguration(address feeTo, uint16 governmentFeeBps)\\r\\n        external;\\r\\n\\r\\n    function setFeeToSetter(address) external;\\r\\n\\r\\n    function getFeeConfiguration()\\r\\n        external\\r\\n        view\\r\\n        returns (address feeTo, uint16 governmentFeeBps);\\r\\n\\r\\n    function feeToSetter() external view returns (address);\\r\\n\\r\\n    function allPools(uint256) external view returns (address pool);\\r\\n\\r\\n    function allPoolsLength() external view returns (uint256);\\r\\n\\r\\n    function getUnamplifiedPool(IERC20 token0, IERC20 token1)\\r\\n        external\\r\\n        view\\r\\n        returns (address);\\r\\n\\r\\n    function getPools(IERC20 token0, IERC20 token1)\\r\\n        external\\r\\n        view\\r\\n        returns (address[] memory _tokenPools);\\r\\n\\r\\n    function isPool(\\r\\n        IERC20 token0,\\r\\n        IERC20 token1,\\r\\n        address pool\\r\\n    ) external view returns (bool);\\r\\n}\\r\\n\\r\\ninterface IWETH is IERC20 {\\r\\n    function deposit() external payable;\\r\\n\\r\\n    function withdraw(uint256) external;\\r\\n}\\r\\n\\r\\n/// @dev an simple interface for integration dApp to swap\\r\\ninterface IDMMExchangeRouter {\\r\\n    function swapExactTokensForTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata poolsPath,\\r\\n        IERC20[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapTokensForExactTokens(\\r\\n        uint256 amountOut,\\r\\n        uint256 amountInMax,\\r\\n        address[] calldata poolsPath,\\r\\n        IERC20[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapExactETHForTokens(\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata poolsPath,\\r\\n        IERC20[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapTokensForExactETH(\\r\\n        uint256 amountOut,\\r\\n        uint256 amountInMax,\\r\\n        address[] calldata poolsPath,\\r\\n        IERC20[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapExactTokensForETH(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata poolsPath,\\r\\n        IERC20[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapETHForExactTokens(\\r\\n        uint256 amountOut,\\r\\n        address[] calldata poolsPath,\\r\\n        IERC20[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256[] memory amounts);\\r\\n\\r\\n    function getAmountsOut(\\r\\n        uint256 amountIn,\\r\\n        address[] calldata poolsPath,\\r\\n        IERC20[] calldata path\\r\\n    ) external view returns (uint256[] memory amounts);\\r\\n\\r\\n    function getAmountsIn(\\r\\n        uint256 amountOut,\\r\\n        address[] calldata poolsPath,\\r\\n        IERC20[] calldata path\\r\\n    ) external view returns (uint256[] memory amounts);\\r\\n}\\r\\n\\r\\n/// @dev an simple interface for integration dApp to contribute liquidity\\r\\ninterface IDMMLiquidityRouter {\\r\\n    /**\\r\\n     * @param tokenA address of token in the pool\\r\\n     * @param tokenB address of token in the pool\\r\\n     * @param pool the address of the pool\\r\\n     * @param amountADesired the amount of tokenA users want to add to the pool\\r\\n     * @param amountBDesired the amount of tokenB users want to add to the pool\\r\\n     * @param amountAMin bounds to the extents to which amountB/amountA can go up\\r\\n     * @param amountBMin bounds to the extents to which amountB/amountA can go down\\r\\n     * @param vReserveRatioBounds bounds to the extents to which vReserveB/vReserveA can go (precision: 2 ** 112)\\r\\n     * @param to Recipient of the liquidity tokens.\\r\\n     * @param deadline Unix timestamp after which the transaction will revert.\\r\\n     */\\r\\n    function addLiquidity(\\r\\n        IERC20 tokenA,\\r\\n        IERC20 tokenB,\\r\\n        address pool,\\r\\n        uint256 amountADesired,\\r\\n        uint256 amountBDesired,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        uint256[2] calldata vReserveRatioBounds,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    )\\r\\n        external\\r\\n        returns (\\r\\n            uint256 amountA,\\r\\n            uint256 amountB,\\r\\n            uint256 liquidity\\r\\n        );\\r\\n\\r\\n    function addLiquidityNewPool(\\r\\n        IERC20 tokenA,\\r\\n        IERC20 tokenB,\\r\\n        uint32 ampBps,\\r\\n        uint256 amountADesired,\\r\\n        uint256 amountBDesired,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    )\\r\\n        external\\r\\n        returns (\\r\\n            uint256 amountA,\\r\\n            uint256 amountB,\\r\\n            uint256 liquidity\\r\\n        );\\r\\n\\r\\n    function addLiquidityNewPoolETH(\\r\\n        IERC20 token,\\r\\n        uint32 ampBps,\\r\\n        uint256 amountTokenDesired,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    )\\r\\n        external\\r\\n        payable\\r\\n        returns (\\r\\n            uint256 amountToken,\\r\\n            uint256 amountETH,\\r\\n            uint256 liquidity\\r\\n        );\\r\\n\\r\\n    /**\\r\\n     * @param token address of token in the pool\\r\\n     * @param pool the address of the pool\\r\\n     * @param amountTokenDesired the amount of token users want to add to the pool\\r\\n     * @dev   msg.value equals to amountEthDesired\\r\\n     * @param amountTokenMin bounds to the extents to which WETH/token can go up\\r\\n     * @param amountETHMin bounds to the extents to which WETH/token can go down\\r\\n     * @param vReserveRatioBounds bounds to the extents to which vReserveB/vReserveA can go (precision: 2 ** 112)\\r\\n     * @param to Recipient of the liquidity tokens.\\r\\n     * @param deadline Unix timestamp after which the transaction will revert.\\r\\n     */\\r\\n    function addLiquidityETH(\\r\\n        IERC20 token,\\r\\n        address pool,\\r\\n        uint256 amountTokenDesired,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        uint256[2] calldata vReserveRatioBounds,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    )\\r\\n        external\\r\\n        payable\\r\\n        returns (\\r\\n            uint256 amountToken,\\r\\n            uint256 amountETH,\\r\\n            uint256 liquidity\\r\\n        );\\r\\n\\r\\n    /**\\r\\n     * @param tokenA address of token in the pool\\r\\n     * @param tokenB address of token in the pool\\r\\n     * @param pool the address of the pool\\r\\n     * @param liquidity the amount of lp token users want to burn\\r\\n     * @param amountAMin the minimum token retuned after burning\\r\\n     * @param amountBMin the minimum token retuned after burning\\r\\n     * @param to Recipient of the returned tokens.\\r\\n     * @param deadline Unix timestamp after which the transaction will revert.\\r\\n     */\\r\\n    function removeLiquidity(\\r\\n        IERC20 tokenA,\\r\\n        IERC20 tokenB,\\r\\n        address pool,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountA, uint256 amountB);\\r\\n\\r\\n    /**\\r\\n     * @param tokenA address of token in the pool\\r\\n     * @param tokenB address of token in the pool\\r\\n     * @param pool the address of the pool\\r\\n     * @param liquidity the amount of lp token users want to burn\\r\\n     * @param amountAMin the minimum token retuned after burning\\r\\n     * @param amountBMin the minimum token retuned after burning\\r\\n     * @param to Recipient of the returned tokens.\\r\\n     * @param deadline Unix timestamp after which the transaction will revert.\\r\\n     * @param approveMax whether users permit the router spending max lp token or not.\\r\\n     * @param r s v Signature of user to permit the router spending lp token\\r\\n     */\\r\\n    function removeLiquidityWithPermit(\\r\\n        IERC20 tokenA,\\r\\n        IERC20 tokenB,\\r\\n        address pool,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline,\\r\\n        bool approveMax,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (uint256 amountA, uint256 amountB);\\r\\n\\r\\n    /**\\r\\n     * @param token address of token in the pool\\r\\n     * @param pool the address of the pool\\r\\n     * @param liquidity the amount of lp token users want to burn\\r\\n     * @param amountTokenMin the minimum token retuned after burning\\r\\n     * @param amountETHMin the minimum eth in wei retuned after burning\\r\\n     * @param to Recipient of the returned tokens.\\r\\n     * @param deadline Unix timestamp after which the transaction will revert\\r\\n     */\\r\\n    function removeLiquidityETH(\\r\\n        IERC20 token,\\r\\n        address pool,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\r\\n\\r\\n    /**\\r\\n     * @param token address of token in the pool\\r\\n     * @param pool the address of the pool\\r\\n     * @param liquidity the amount of lp token users want to burn\\r\\n     * @param amountTokenMin the minimum token retuned after burning\\r\\n     * @param amountETHMin the minimum eth in wei retuned after burning\\r\\n     * @param to Recipient of the returned tokens.\\r\\n     * @param deadline Unix timestamp after which the transaction will revert\\r\\n     * @param approveMax whether users permit the router spending max lp token\\r\\n     * @param r s v signatures of user to permit the router spending lp token.\\r\\n     */\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        IERC20 token,\\r\\n        address pool,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline,\\r\\n        bool approveMax,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\r\\n\\r\\n    /**\\r\\n     * @param amountA amount of 1 side token added to the pool\\r\\n     * @param reserveA current reserve of the pool\\r\\n     * @param reserveB current reserve of the pool\\r\\n     * @return amountB amount of the other token added to the pool\\r\\n     */\\r\\n    function quote(\\r\\n        uint256 amountA,\\r\\n        uint256 reserveA,\\r\\n        uint256 reserveB\\r\\n    ) external pure returns (uint256 amountB);\\r\\n}\\r\\n\\r\\n/// @dev full interface for router\\r\\ninterface IDMMRouter01 is IDMMExchangeRouter, IDMMLiquidityRouter {\\r\\n    function factory() external pure returns (address);\\r\\n\\r\\n    function weth() external pure returns (IWETH);\\r\\n}\\r\\n\\r\\ninterface IDMMRouter02 is IDMMRouter01 {\\r\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n        IERC20 token,\\r\\n        address pool,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountETH);\\r\\n\\r\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n        IERC20 token,\\r\\n        address pool,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline,\\r\\n        bool approveMax,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (uint256 amountETH);\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata poolsPath,\\r\\n        IERC20[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external;\\r\\n\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata poolsPath,\\r\\n        IERC20[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable;\\r\\n\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata poolsPath,\\r\\n        IERC20[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external;\\r\\n\\r\\n    function getAmountOut(\\r\\n        uint amountIn,\\r\\n        uint reserveIn,\\r\\n        uint reserveOut\\r\\n    ) external pure returns (uint amountOut);\\r\\n\\r\\n    function getAmountIn(\\r\\n        uint amountOut,\\r\\n        uint reserveIn,\\r\\n        uint reserveOut\\r\\n    ) external pure returns (uint amountIn);\\r\\n}\\r\\n\\r\\ninterface IDMMPool {\\r\\n    function mint(address to) external returns (uint256 liquidity);\\r\\n\\r\\n    function burn(address to)\\r\\n        external\\r\\n        returns (uint256 amount0, uint256 amount1);\\r\\n\\r\\n    function swap(\\r\\n        uint256 amount0Out,\\r\\n        uint256 amount1Out,\\r\\n        address to,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n\\r\\n    function sync() external;\\r\\n\\r\\n    function getReserves()\\r\\n        external\\r\\n        view\\r\\n        returns (uint112 reserve0, uint112 reserve1);\\r\\n\\r\\n    function getTradeInfo()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint112 _vReserve0,\\r\\n            uint112 _vReserve1,\\r\\n            uint112 reserve0,\\r\\n            uint112 reserve1,\\r\\n            uint256 feeInPrecision\\r\\n        );\\r\\n\\r\\n    function token0() external view returns (IERC20);\\r\\n\\r\\n    function token1() external view returns (IERC20);\\r\\n\\r\\n    function ampBps() external view returns (uint32);\\r\\n\\r\\n    function factory() external view returns (IDMMFactory);\\r\\n\\r\\n    function kLast() external view returns (uint256);\\r\\n}\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IFlagStaking {\\r\\n    // --------- UTILITY FUNCTIONS ------------\\r\\n    function isStaker(address _address) external view returns (bool);\\r\\n\\r\\n    // ----------- STAKING ACTIONS ------------\\r\\n    function createStake(uint _amount) external;\\r\\n\\r\\n    function removeStake(uint _amount) external;\\r\\n\\r\\n    // Backup function in case something happens with the update rewards functions\\r\\n    function emergencyUnstake(uint _amount) external;\\r\\n\\r\\n    // ------------ REWARD ACTIONS ---------------\\r\\n    function getRewards() external;\\r\\n\\r\\n    function updateAddressRewardsBalance(address _address)\\r\\n        external\\r\\n        returns (uint);\\r\\n\\r\\n    function updateBigRewardsPerToken() external;\\r\\n\\r\\n    function userPendingRewards(address _address) external view returns (uint);\\r\\n\\r\\n    // ------------ ADMIN ACTIONS ---------------\\r\\n    function withdrawRewards(uint _amount) external;\\r\\n\\r\\n    function depositRewards(uint _amount) external;\\r\\n\\r\\n    function setDailyEmissions(uint _amount) external;\\r\\n\\r\\n    function pause() external;\\r\\n\\r\\n    function unpause() external;\\r\\n\\r\\n    // ------------ VIEW FUNCTIONS ---------------\\r\\n    function timeSinceLastReward() external view returns (uint);\\r\\n\\r\\n    function rewardsBalance() external view returns (uint);\\r\\n\\r\\n    function addressStakedBalance(address _address)\\r\\n        external\\r\\n        view\\r\\n        returns (uint);\\r\\n\\r\\n    function showStakingToken() external view returns (address);\\r\\n\\r\\n    function showRewardToken() external view returns (address);\\r\\n\\r\\n    function showBigRewardsPerToken() external view returns (uint);\\r\\n\\r\\n    function showBigUserRewardsCollected() external view returns (uint);\\r\\n}\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ncontract CompoundStrategyERC20DMMflat is rStrategy {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n    using SafeERC20 for IWETH;\\r\\n\\r\\n    //  -------------------- CONTRACT VARIABLES --------------------\\r\\n    // Tokens and Contracts to Interface with\\r\\n    IFlagStaking internal _stakingContract; // The staking contract that the vault will compound into\\r\\n    IDMMPool internal _stakingToken; // The LP token people can stake\\r\\n    IERC20 internal _pairedToken; // The project token in the staking LP pair\\r\\n    IERC20 internal _stakingLpBaseToken; // The base token in the staking LP pair\\r\\n\\r\\n    IDMMPool internal _rewardLpToken; // The LP token for the reward token paired with MATIC\\r\\n    IERC20 internal _rewardToken; // The project token people will be rewarded with\\r\\n    IERC20 internal _rewardLpBaseToken; //  The base token in the reward LP pair\\r\\n\\r\\n    IDMMRouter02 internal _router; // Sushiswap Router to swap tokens and provide liquidity\\r\\n    IERC20[] internal _swapPath; // Path array needed for routing uniswapv2 swaps\\r\\n    address[] internal _poolPath; // LP for swap\\r\\n\\r\\n    // Parameters\\r\\n    uint public compoundFrequency; // number of seconds to wait between compounding\\r\\n    uint public lastCompoundTime; // For calculating how recently the vault was compounded\\r\\n    uint internal _priceSlippage; // Slippage tolerance on DEX transactions in big units\\r\\n    uint internal _dexFee; // Amount charged by the DEX for trading fees\\r\\n\\r\\n    IWETH public _wmaticAddr; // The WMATIC token address\\r\\n\\r\\n    //  -------------------- EVENTS ----------------------------------\\r\\n    event Compounded(uint timestamp, uint256 amount);\\r\\n\\r\\n    //  -------------------- CONSTRUCTOR FUNCTION --------------------\\r\\n    constructor(\\r\\n        string memory _name,\\r\\n        address _vaultAddr,\\r\\n        address _stakingContractAddr,\\r\\n        address _stakingTokenAddr,\\r\\n        address _rewardTokenAddr,\\r\\n        address _rewardTokenLpAddr,\\r\\n        address _routerAddr,\\r\\n        uint _compoundFrequency,\\r\\n        uint _feePercent,\\r\\n        address _managerAddr\\r\\n    )\\r\\n        rStrategy(\\r\\n            _name,\\r\\n            _vaultAddr,\\r\\n            _stakingTokenAddr,\\r\\n            _feePercent,\\r\\n            _managerAddr\\r\\n        )\\r\\n    {\\r\\n        // Assign initial variable values\\r\\n        _stakingContract = IFlagStaking(_stakingContractAddr);\\r\\n        _stakingToken = IDMMPool(_stakingTokenAddr);\\r\\n        _pairedToken = IERC20(_stakingToken.token1());\\r\\n        _stakingLpBaseToken = IERC20(_stakingToken.token0());\\r\\n        _rewardToken = IERC20(_rewardTokenAddr);\\r\\n        _rewardLpToken = IDMMPool(_rewardTokenLpAddr);\\r\\n        _rewardLpBaseToken = IERC20(_rewardLpToken.token0());\\r\\n        _router = IDMMRouter02(_routerAddr);\\r\\n        _wmaticAddr = _router.weth();\\r\\n\\r\\n        lastCompoundTime = block.timestamp;\\r\\n        compoundFrequency = _compoundFrequency;\\r\\n        _priceSlippage = 2 * 10**16; // 2% slippage by default from TWAP\\r\\n        _dexFee = 3 * 10**15; // 0.3% fee charged by UniswapV2\\r\\n\\r\\n        // Approve Reward Token and Token to Pair for LP on Router\\r\\n        _pairedToken.approve(_routerAddr, MAX_UNIT);\\r\\n        if (_rewardTokenAddr != address(_pairedToken)) {\\r\\n            _rewardToken.approve(_routerAddr, MAX_UNIT);\\r\\n            if (_rewardLpBaseToken != _wmaticAddr) {\\r\\n                _rewardLpBaseToken.approve(_routerAddr, MAX_UNIT);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Approve LP Token on Router\\r\\n        IERC20(_stakingTokenAddr).approve(_routerAddr, MAX_UNIT);\\r\\n\\r\\n        // Approve LP base token on the router\\r\\n        _stakingLpBaseToken.approve(_routerAddr, MAX_UNIT);\\r\\n\\r\\n        // Approve staking contract for LP Token\\r\\n        IERC20(_stakingTokenAddr).approve(_stakingContractAddr, MAX_UNIT);\\r\\n    }\\r\\n\\r\\n    //  -------------------- VIEW FUNCTIONS -------------------------\\r\\n    // function timeSinceLastCompound() public view returns (uint) {\\r\\n    //     return block.timestamp.sub(lastCompoundTime);\\r\\n    // }\\r\\n\\r\\n    function getStakingContract() external view returns (address) {\\r\\n        return address(_stakingContract);\\r\\n    }\\r\\n\\r\\n    //  -------------------- UTILITY FUNCTIONS ---------------------\\r\\n\\r\\n    function _invest(uint _amount) internal override whenNotPaused {\\r\\n        _stakingContract.createStake(_amount);\\r\\n        _externalContractTokenBalance = _externalContractTokenBalance.add(\\r\\n            _amount\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _divest(uint _amount) internal override {\\r\\n        _stakingContract.removeStake(_amount);\\r\\n        _externalContractTokenBalance = _externalContractTokenBalance.sub(\\r\\n            _amount\\r\\n        );\\r\\n    }\\r\\n\\r\\n    struct SwapInfo {\\r\\n        // Declare variables for swaps\\r\\n        uint minAmountBaseToken;\\r\\n        uint minAmountPairedToken;\\r\\n        uint desiredAmountBaseToken;\\r\\n        uint desiredAmountPairedToken;\\r\\n        //uint oracleAmount;\\r\\n        uint reserveA;\\r\\n        uint reserveB;\\r\\n        uint vReserveA;\\r\\n        uint vReserveB;\\r\\n    }\\r\\n\\r\\n    //  -------------------- MANAGER FUNCTIONS --------------------\\r\\n    function compound()\\r\\n        external\\r\\n        payable\\r\\n        whenNotPaused\\r\\n        nonReentrant\\r\\n        onlyRole(MANAGER_ROLE)\\r\\n    {\\r\\n        // Get outstanding rewards\\r\\n        _stakingContract.getRewards();\\r\\n        uint rewardsToCompound = _rewardToken.balanceOf(address(this));\\r\\n\\r\\n        // Declare variables for swaps\\r\\n        SwapInfo memory swap;\\r\\n        uint[] memory amounts;\\r\\n\\r\\n        // Swap tokens to get the right amounts for providing liquidity\\r\\n        if (address(_rewardToken) == address(_pairedToken)) {\\r\\n            // Flag/(ERC20) LP Case\\r\\n            //// Swap 1/2 of the reward token for the LP base token\\r\\n            // Get the current price from the exchange\\r\\n            // Create the swap path\\r\\n            _swapPath.push(IERC20(_rewardToken));\\r\\n            _swapPath.push(IERC20(_stakingLpBaseToken));\\r\\n            _poolPath.push(address(_stakingToken));\\r\\n\\r\\n            amounts = _router.getAmountsOut(\\r\\n                rewardsToCompound.mul(50 * (10**16)).div(BIG_UNIT),\\r\\n                _poolPath,\\r\\n                _swapPath\\r\\n            );\\r\\n\\r\\n            swap.minAmountBaseToken = amounts[1];\\r\\n            delete amounts;\\r\\n\\r\\n            // Execute the swap\\r\\n            amounts = _router.swapExactTokensForTokens(\\r\\n                rewardsToCompound.mul(50 * (10**16)).div(BIG_UNIT), // amount of _pairedToken in\\r\\n                swap.minAmountBaseToken, // minimum amonut of _stakingLpBaseToken out\\r\\n                _poolPath,\\r\\n                _swapPath, // _router path\\r\\n                address(this), // address to send matic to (this contract)\\r\\n                block.timestamp + 30 // deadline for executing the swap\\r\\n            );\\r\\n\\r\\n            swap.desiredAmountBaseToken = amounts[1];\\r\\n            delete amounts;\\r\\n            delete _swapPath;\\r\\n            delete _poolPath;\\r\\n\\r\\n            swap.desiredAmountPairedToken = _pairedToken.balanceOf(\\r\\n                address(this)\\r\\n            );\\r\\n        } else {\\r\\n            //// ERC20/(ERC20) LP Case\\r\\n            //// Swap the rewards for ERC20\\r\\n            // Create swap path for multi-hop quote and swap\\r\\n            _swapPath.push(IERC20(_rewardToken));\\r\\n            _swapPath.push(IERC20(_rewardLpBaseToken));\\r\\n            _swapPath.push(IERC20(_pairedToken));\\r\\n            _poolPath.push(address(_rewardLpToken));\\r\\n            _poolPath.push(address(_stakingToken));\\r\\n\\r\\n            // Get the current price from the exchange\\r\\n            amounts = _router.getAmountsOut(\\r\\n                rewardsToCompound,\\r\\n                _poolPath,\\r\\n                _swapPath\\r\\n            );\\r\\n            swap.minAmountPairedToken = amounts[2];\\r\\n            delete amounts;\\r\\n\\r\\n            // Execute the swap\\r\\n            amounts = _router.swapExactTokensForTokens(\\r\\n                rewardsToCompound, // amount of _rewardToken in\\r\\n                swap.minAmountPairedToken, // minAmount of _pairedToken out\\r\\n                _poolPath,\\r\\n                _swapPath, // _router path\\r\\n                address(this), // address to send matic to (this contract)\\r\\n                block.timestamp + 20 // deadline for executing the swap\\r\\n            );\\r\\n            swap.desiredAmountPairedToken = amounts[2].mul(50 * (10**16)).div(\\r\\n                BIG_UNIT\\r\\n            );\\r\\n            delete amounts;\\r\\n            delete _swapPath;\\r\\n            delete _poolPath;\\r\\n\\r\\n            //// Swap 1/2 of the paired token for the stakingLpBaseToken\\r\\n            // Get the current price from the exchange\\r\\n            (swap.reserveA, swap.reserveB) = _stakingToken.getReserves(); // Token A is the base token in all of the Flag Pairs and Token B is the _pairedToken\\r\\n\\r\\n            // Create the swap path\\r\\n            _swapPath.push(IERC20(_pairedToken));\\r\\n            _swapPath.push(IERC20(_stakingLpBaseToken));\\r\\n            _poolPath.push(address(_stakingToken));\\r\\n\\r\\n            amounts = _router.getAmountsOut(\\r\\n                swap.desiredAmountPairedToken,\\r\\n                _poolPath,\\r\\n                _swapPath\\r\\n            ); // accounts for slippage and fees\\r\\n            swap.minAmountBaseToken = amounts[1];\\r\\n            delete amounts;\\r\\n            // Execute the swap\\r\\n            _router.swapExactTokensForTokens(\\r\\n                swap.desiredAmountPairedToken, // amount of _pairedToken in\\r\\n                swap.minAmountBaseToken, // minimum amonut of _stakingLpBaseToken out\\r\\n                _poolPath,\\r\\n                _swapPath, // _router path\\r\\n                address(this), // address to send matic to (this contract)\\r\\n                block.timestamp + 40 // deadline for executing the swap\\r\\n            );\\r\\n            delete _swapPath;\\r\\n            delete _poolPath;\\r\\n\\r\\n            swap.desiredAmountBaseToken = _stakingLpBaseToken.balanceOf(\\r\\n                address(this)\\r\\n            );\\r\\n        }\\r\\n\\r\\n        {\\r\\n            (\\r\\n                swap.vReserveA,\\r\\n                swap.vReserveB,\\r\\n                swap.reserveA,\\r\\n                swap.reserveB,\\r\\n\\r\\n            ) = _stakingToken.getTradeInfo();\\r\\n            uint256[2] memory vReserveRatioBounds;\\r\\n            (vReserveRatioBounds[0], vReserveRatioBounds[1]) = (\\r\\n                swap.vReserveA.mul(2**112).div(swap.vReserveB),\\r\\n                swap.vReserveB.mul(2**112).div(swap.vReserveA)\\r\\n            );\\r\\n\\r\\n            // Enclose in brackets to get around compiler issues\\r\\n            //// Calculate the remaining variables for the adding the liquidity\\r\\n            // Calculate the amounts based on exchange reserves (No need to use oracle here because the values have been checked already on this block)\\r\\n            // Create the swap path\\r\\n            _swapPath.push(IERC20(_pairedToken));\\r\\n            _swapPath.push(IERC20(_stakingLpBaseToken));\\r\\n            _poolPath.push(address(_stakingToken));\\r\\n\\r\\n            amounts = _router.getAmountsOut(\\r\\n                swap.desiredAmountBaseToken,\\r\\n                _poolPath,\\r\\n                _swapPath\\r\\n            );\\r\\n\\r\\n            swap.minAmountPairedToken = amounts[1];\\r\\n            delete amounts;\\r\\n            delete _swapPath;\\r\\n            delete _poolPath;\\r\\n\\r\\n            swap.minAmountBaseToken = _router.quote(\\r\\n                swap.minAmountPairedToken,\\r\\n                swap.reserveB,\\r\\n                swap.reserveA\\r\\n            );\\r\\n\\r\\n            //// Add the liquidity, handle WMATIC or ERC20 base function calls\\r\\n            (, , uint newStakingTokens) = _router.addLiquidity(\\r\\n                IERC20(_stakingLpBaseToken), // base token for the LP\\r\\n                IERC20(_pairedToken), // token to pair address\\r\\n                address(_stakingToken),\\r\\n                swap.desiredAmountBaseToken, // desired amount of base token\\r\\n                swap.desiredAmountPairedToken, // desired amount of token to pair\\r\\n                swap.minAmountBaseToken, // minimum amount of base token to pair - same as minimum received from swap\\r\\n                swap.minAmountPairedToken, // minimum amount of token to pair\\r\\n                vReserveRatioBounds,\\r\\n                address(this), // address to receive the LP tokens (this contract)\\r\\n                block.timestamp + 60 // deadline for supplying the liquidity\\r\\n            );\\r\\n\\r\\n            //// Update the fee balance\\r\\n            _updateFeeBalance(newStakingTokens);\\r\\n        }\\r\\n\\r\\n        //// Deposit new tokens, including any deposited recently, into the staking contract\\r\\n        _invest(_availableBalance());\\r\\n\\r\\n        //// Emit event and update last compound time\\r\\n        lastCompoundTime = block.timestamp;\\r\\n        emit Compounded(lastCompoundTime, rewardsToCompound);\\r\\n    }\\r\\n\\r\\n    function invest(uint _amount)\\r\\n        public\\r\\n        whenNotPaused\\r\\n        nonReentrant\\r\\n        onlyRole(MANAGER_ROLE)\\r\\n    {\\r\\n        _invest(_amount);\\r\\n    }\\r\\n\\r\\n    function divest(uint _amount) public nonReentrant onlyRole(MANAGER_ROLE) {\\r\\n        _divest(_amount);\\r\\n    }\\r\\n\\r\\n    //  -------------------- OWNER FUNCTIONS --------------------\\r\\n    function setCompoundFrequency(uint _seconds) external onlyRole(OWNER_ROLE) {\\r\\n        compoundFrequency = _seconds;\\r\\n    }\\r\\n\\r\\n    function priceSlippage() external view onlyRole(OWNER_ROLE) returns (uint) {\\r\\n        return _priceSlippage;\\r\\n    }\\r\\n\\r\\n    function setPriceSlippage(uint _slippage) external onlyRole(OWNER_ROLE) {\\r\\n        _priceSlippage = _slippage;\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200,\r\n      \"details\": {\r\n        \"yul\": false\r\n      }\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_vaultAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakingContractAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakingTokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardTokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardTokenLpAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_routerAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_compoundFrequency\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feePercent\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_managerAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Compounded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Received\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_wmaticAddr\",\"outputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"compound\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"compoundFrequency\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"divest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDepositToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakingContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"invest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastCompoundTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceSlippage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_seconds\",\"type\":\"uint256\"}],\"name\":\"setCompoundFrequency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"setFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_managerAddr\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ownerAddr\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_slippage\",\"type\":\"uint256\"}],\"name\":\"setPriceSlippage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "CompoundStrategyERC20DMMflat", "CompilerVersion": "v0.8.1+commit.df193b15", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000001400000000000000000000000004cd334012b540a0287256a4395b58ddc9a68543c000000000000000000000000ef53d068d955df5eac30d4e668de206e8282340d000000000000000000000000cfe88814f8ef4bcefeb4483046b7229511e8aa060000000000000000000000009111d6446ac5b88a84cf06425c6286658368542f000000000000000000000000cfe88814f8ef4bcefeb4483046b7229511e8aa06000000000000000000000000546c79662e028b661dfb4767664d0273184e4dd10000000000000000000000000000000000000000000000000000000000000e1000000000000000000000000000000000000000000000000000000000000000050000000000000000000000006daa6909ca7dcfa4697c1cbdc77318905504d50f0000000000000000000000000000000000000000000000000000000000000013464c4147204d4154494320436f6d706f756e6400000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}