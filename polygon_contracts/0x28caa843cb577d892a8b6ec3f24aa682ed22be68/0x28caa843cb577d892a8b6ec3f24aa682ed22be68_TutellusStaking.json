{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/TutellusStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport \\\"./utils/AccessControlProxyPausable.sol\\\";\\nimport \\\"./interfaces/ITutellusERC20.sol\\\";\\nimport \\\"./interfaces/ITutellusRewardsVault.sol\\\";\\n\\ncontract TutellusStaking is AccessControlProxyPausable {\\n\\n    address public token;\\n    address public vault;\\n\\n    bool public autoreward;\\n\\n    uint256 public balance;\\n    uint256 public minFee;\\n    uint256 public maxFee;\\n    uint256 public accRewardsPerShare;\\n    uint256 private _released;\\n\\n    uint public lastUpdate;\\n    uint public feeInterval;\\n    uint public stakers;\\n\\n    struct UserInfo {\\n      uint256 amount;\\n      uint256 rewardDebt;\\n      uint256 notClaimed;\\n      uint endInterval;\\n      uint256 minFee;\\n      uint256 maxFee;\\n      uint256 feeInterval;\\n    }\\n\\n    mapping(address=>UserInfo) private _userInfo;\\n\\n    event Claim(address account);\\n    event Deposit(address account, uint256 amount);\\n    event Withdraw(address account, uint256 amount, uint256 burned);\\n    event Rewards(address account, uint256 amount);\\n\\n    event SyncBalance(address account, uint256 amount);\\n    event ToggleAutoreward(bool autoreward);\\n    event Update(uint256 balance, uint256 accRewardsPerShare, uint lastUpdate, uint stakers);\\n    event UpdateUserInfo(address account, uint256 amount, uint256 rewardDebt, uint256 notClaimed, uint endInterval);\\n    event SetFees(uint256 minFee, uint256 maxFee);\\n    event SetFeeInterval(uint feeInterval);\\n    event Migrate(address from, address to, address account, uint256 amount, bytes response);\\n\\n    function _update() internal {\\n      if (block.number <= lastUpdate) {\\n        return;\\n      }\\n      ITutellusRewardsVault rewardsInterface = ITutellusRewardsVault(vault);\\n      uint256 released = rewardsInterface.releasedId(address(this)) - _released;\\n      _released += released;\\n      if(balance > 0) {\\n        accRewardsPerShare += (released * 1e18 / balance);\\n      }\\n      lastUpdate = block.number;\\n    }\\n\\n    // Sets maximum and minimum fees\\n    function setFees(uint256 minFee_, uint256 maxFee_) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n      require(minFee_ <= maxFee_, \\\"TutellusStaking: mininum fee must be greater or equal than maximum fee\\\");\\n      require(minFee_ <= 1e20 && maxFee_ <= 1e20, \\\"TutellusStaking: fees must be less than 100e18\\\");\\n      minFee = minFee_;\\n      maxFee = maxFee_;\\n      emit SetFees(minFee, maxFee);\\n    }\\n\\n    // Sets fee interval (blocks) for staking\\n    function setFeeInterval(uint feeInterval_) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n      feeInterval = feeInterval_;\\n      emit SetFeeInterval(feeInterval);\\n    }\\n\\n    // Updates rewards for an account\\n    function _updateRewards(address account) internal {\\n      UserInfo storage user = _userInfo[account];\\n      uint256 diff = accRewardsPerShare - user.rewardDebt;\\n      user.notClaimed = diff * user.amount / 1e18;\\n      user.rewardDebt = accRewardsPerShare;\\n    }\\n\\n    // Deposits tokens for staking\\n    function depositFrom(address account, uint256 amount) public whenNotPaused {\\n      require(amount > 0, \\\"TutellusStaking: amount must be over zero\\\");\\n\\n      UserInfo storage user = _userInfo[account];\\n\\n      _update();\\n      _updateRewards(account);\\n\\n      if(user.amount == 0) {\\n        stakers += 1;\\n      }\\n\\n      user.endInterval = block.number + feeInterval;\\n      user.minFee = minFee;\\n      user.maxFee = maxFee;\\n      user.feeInterval = feeInterval;\\n      user.amount += amount;\\n      balance += amount;\\n\\n      ITutellusERC20 tokenInterface = ITutellusERC20(token);\\n\\n      require(tokenInterface.balanceOf(account) >= amount, \\\"TutellusStaking: user has not enough balance\\\");\\n      require(tokenInterface.allowance(account, address(this)) >= amount, \\\"TutellusStaking: amount exceeds allowance\\\");\\n\\n      if(autoreward) {\\n        _reward(account);\\n      }\\n\\n      require(tokenInterface.transferFrom(account, address(this), amount), \\\"TutellusStaking: deposit transfer failed\\\");\\n\\n      emit Update(balance, accRewardsPerShare, lastUpdate, stakers);\\n      emit UpdateUserInfo(account, user.amount, user.rewardDebt, user.notClaimed, user.endInterval);\\n      emit Deposit(account, amount);\\n    }\\n\\n    // Withdraws tokens from staking\\n    function withdraw(uint256 amount) public whenNotPaused returns (uint256) {\\n      require(amount > 0, \\\"TutellusStaking: amount must be over zero\\\");\\n\\n      address account = msg.sender;\\n      UserInfo storage user = _userInfo[account];\\n\\n      require(amount <= user.amount, \\\"TutellusStaking: user has not enough staking balance\\\");\\n\\n      _update();\\n      _updateRewards(account);\\n\\n      user.rewardDebt = accRewardsPerShare;\\n      user.amount -= amount;\\n      balance -= amount;\\n\\n      if(user.amount == 0) {\\n        stakers -= 1;\\n      }\\n\\n      ITutellusERC20 tokenInterface = ITutellusERC20(token);\\n\\n      uint256 burned = amount * getFee(account) / 1e20;\\n      amount -= burned;\\n\\n      if(autoreward) {\\n        _reward(account);\\n      }\\n      if(burned > 0){\\n        tokenInterface.burn(burned);\\n      }\\n      require(tokenInterface.transfer(account, amount), \\\"TutellusStaking: withdraw transfer failed\\\");\\n\\n      emit Update(balance, accRewardsPerShare, lastUpdate, stakers);\\n      emit UpdateUserInfo(account, user.amount, user.rewardDebt, user.notClaimed, user.endInterval);\\n      emit Withdraw(account, amount, burned);\\n      return amount;\\n    }\\n\\n    // Claims rewards\\n    function claim() public whenNotPaused {\\n      address account = msg.sender;\\n      UserInfo storage user = _userInfo[account];\\n\\n      _update();\\n      _updateRewards(account);\\n\\n      require(user.notClaimed > 0, \\\"TutellusStaking: nothing to claim\\\");\\n\\n      _reward(account);\\n\\n      emit Update(balance, accRewardsPerShare, lastUpdate, stakers);\\n      emit UpdateUserInfo(account, user.amount, user.rewardDebt, user.notClaimed, user.endInterval);\\n      emit Claim(account);\\n    }\\n\\n    // Toggles autoreward\\n    function toggleAutoreward() public onlyRole(DEFAULT_ADMIN_ROLE) {\\n      autoreward = !autoreward;\\n      emit ToggleAutoreward(autoreward);\\n    }\\n\\n    function _reward(address account) internal {\\n      ITutellusRewardsVault rewardsInterface = ITutellusRewardsVault(vault);\\n      uint256 amount = _userInfo[account].notClaimed;\\n      if(amount > 0) {\\n        _userInfo[account].notClaimed = 0;\\n        rewardsInterface.distributeTokens(account, amount);\\n        emit Rewards(account, amount);\\n      }\\n    }\\n\\n    // Gets current fee for a user\\n    function getFee(address account) public view returns(uint256) {\\n      UserInfo memory user = _userInfo[account];\\n      uint256 fee = block.number < user.endInterval ? user.feeInterval > 0 ? user.maxFee * (user.endInterval - block.number) / user.feeInterval : user.minFee : user.minFee;\\n      return fee > user.minFee ? fee : user.minFee;\\n    }\\n\\n    // Gets blocks until endInverval\\n    function getBlocksLeft(address account) public view returns (uint) {\\n      if(block.number > _userInfo[account].endInterval) {\\n        return 0;\\n      } else {\\n        return _userInfo[account].endInterval - block.number;\\n      }\\n    }\\n\\n    // Gets user pending rewards\\n    function pendingRewards(address user_) public view returns(uint256) {\\n        UserInfo memory user = _userInfo[user_];\\n        uint256 rewards = user.notClaimed;\\n        if(balance > 0){\\n          ITutellusRewardsVault rewardsInterface = ITutellusRewardsVault(vault);\\n          uint256 released = rewardsInterface.releasedId(address(this)) - _released;\\n          uint256 total = (released * 1e18 / balance);\\n          rewards += (accRewardsPerShare - user.rewardDebt + total) * user.amount / 1e18;\\n        }\\n        return rewards;\\n    }\\n\\n    constructor (address token_, address rolemanager, address vault_, uint256 minFee_, uint256 maxFee_, uint feeInterval_) {\\n      __TutellusStaking_init(token_, rolemanager, vault_, minFee_, maxFee_, feeInterval_);\\n    }\\n\\n    function __TutellusStaking_init(address token_, address rolemanager, address vault_, uint256 minFee_, uint256 maxFee_, uint feeInterval_) internal initializer {\\n      __AccessControlProxyPausable_init(rolemanager);\\n      __TutellusStaking_init_unchained(token_, vault_, minFee_, maxFee_, feeInterval_);\\n    }\\n\\n    function __TutellusStaking_init_unchained(address token_, address vault_, uint256 minFee_, uint256 maxFee_, uint feeInterval_) internal initializer {\\n      token = token_;\\n      vault = vault_;\\n      setFees(minFee_, maxFee_);\\n      setFeeInterval(feeInterval_);\\n      autoreward = true;\\n      lastUpdate = block.number;\\n    }\\n\\n        // Gets token gap\\n    function getTokenGap() public view returns (uint256) {\\n      ITutellusERC20 tokenInterface = ITutellusERC20(token);\\n      uint256 tokenBalance = tokenInterface.balanceOf(address(this));\\n      return tokenBalance - balance;\\n    }\\n\\n        // Synchronizes balance, transfering the gap to an external account\\n    function syncBalance(address account) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n      ITutellusERC20 tokenInterface = ITutellusERC20(token);\\n      uint256 gap = getTokenGap();\\n      require(gap > 0, \\\"TutellusStaking: there is no gap\\\");\\n      tokenInterface.transfer(account, gap);\\n      emit SyncBalance(account, gap);\\n    }\\n\\n        // Gets user staking balance\\n    function getUserBalance(address user_) public view returns(uint256){\\n      UserInfo memory user = _userInfo[user_];\\n      return user.amount;\\n    }\\n\\n    function migrate(address to) public returns (bytes memory){\\n      address account = msg.sender;\\n      uint256 amount = withdraw(_userInfo[account].amount);\\n      (bool success, bytes memory response) = to.call(\\n            abi.encodeWithSignature(\\\"depositFrom(address,uint256)\\\", account, amount)\\n        );\\n      require(success, 'TutellusStaking: migration failed');\\n      emit Migrate(address(this), to, account, amount, response);\\n      return response;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/AccessControlProxyPausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\n\\nabstract contract AccessControlProxyPausable is PausableUpgradeable {\\n\\n    address private _manager;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n    modifier onlyRole(bytes32 role) {\\n        address account = msg.sender;\\n        require(hasRole(role, account), string(\\n                    abi.encodePacked(\\n                        \\\"AccessControlProxyPausable: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                ));\\n        _;\\n    }\\n\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        IAccessControlUpgradeable manager = IAccessControlUpgradeable(_manager);\\n        return manager.hasRole(role, account);\\n    }\\n\\n    function __AccessControlProxyPausable_init(address manager) internal initializer {\\n        __Pausable_init();\\n        __AccessControlProxyPausable_init_unchained(manager);\\n    }\\n\\n    function __AccessControlProxyPausable_init_unchained(address manager) internal initializer {\\n        _manager = manager;\\n    }\\n\\n    function pause() public onlyRole(PAUSER_ROLE){\\n        _pause();\\n    }\\n    \\n    function unpause() public onlyRole(PAUSER_ROLE){\\n        _unpause();\\n    }\\n\\n    function updateManager(address manager) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _manager = manager;\\n    }\\n}\"\r\n    },\r\n    \"contracts/interfaces/ITutellusERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\ninterface ITutellusERC20 {\\n\\n    /**\\n     * @dev Returns the amount of tokens burned.\\n     */\\n    function burned() external view returns (uint256);\\n    \\n    /**\\n     * @dev Mints `amount` tokens to `account`.\\n     */\\n    function mint(address account, uint256 amount) external;\\n\\n    /**\\n     * @dev Burns `amount` tokens.\\n     */\\n    function burn(uint256 amount) external;\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\"\r\n    },\r\n    \"contracts/interfaces/ITutellusRewardsVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\ninterface ITutellusRewardsVault {\\n\\n    function add(address account, uint256[] memory allocation) external;\\n\\n    function updateAllocation(uint256[] memory allocation) external;\\n\\n    function released() external view returns (uint256);\\n\\n    function availableId(address account) external view returns (uint256);\\n\\n    function releasedRange(uint from, uint to) external view returns (uint256);\\n\\n    function releasedId(address account) external view returns (uint256);\\n\\n    function distributeTokens(address account, uint256 amount) external;\\n\\n    function info(address account) external view;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal initializer {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rolemanager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vault_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minFee_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFee_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeInterval_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"}],\"name\":\"Migrate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Rewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeInterval\",\"type\":\"uint256\"}],\"name\":\"SetFeeInterval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxFee\",\"type\":\"uint256\"}],\"name\":\"SetFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SyncBalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"autoreward\",\"type\":\"bool\"}],\"name\":\"ToggleAutoreward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accRewardsPerShare\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastUpdate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakers\",\"type\":\"uint256\"}],\"name\":\"Update\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"notClaimed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endInterval\",\"type\":\"uint256\"}],\"name\":\"UpdateUserInfo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burned\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accRewardsPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoreward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getBlocksLeft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenGap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user_\",\"type\":\"address\"}],\"name\":\"getUserBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user_\",\"type\":\"address\"}],\"name\":\"pendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feeInterval_\",\"type\":\"uint256\"}],\"name\":\"setFeeInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minFee_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFee_\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"syncBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleAutoreward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"updateManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TutellusStaking", "CompilerVersion": "v0.8.2+commit.661d1103", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000ce9a30c3b300d1c0c06d0c1ef2f5e7ae0e474cf9000000000000000000000000edfb8b686903c6eb56b069e9d42d40c918a093a100000000000000000000000014cb53cfa6c7fe6a3d84dad8882df25aa997fef7000000000000000000000000000000000000000000000000016345785d8a00000000000000000000000000000000000000000000000000008ac7230489e80000000000000000000000000000000000000000000000000000000000000013c680", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}