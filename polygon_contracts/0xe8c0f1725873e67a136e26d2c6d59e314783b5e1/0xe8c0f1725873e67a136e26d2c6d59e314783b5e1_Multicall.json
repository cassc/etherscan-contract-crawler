{"SourceCode": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity ^0.8.0;\r\npragma abicoder v2;\r\n\r\n/// @title Multicall\r\n/// @notice Enables calling multiple methods in a single call to the contract\r\ncontract Multicall {\r\n    function multicall(address[] calldata targets, bytes[] calldata data) public payable returns (bool[] memory results) {\r\n        results = new bool[](data.length);\r\n        for (uint256 i = 0; i < data.length; i++) {\r\n            (bool success, bytes memory result) = address(targets[i]).delegatecall(data[i]);\r\n\r\n            if (!success) {\r\n                results[i] = false;\r\n            } else {\r\n                results[i] = true;\r\n            }\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"results\",\"type\":\"bool[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "Multicall", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://56b13f6f4a9a90a9bd6dcf7e90111aa879a66c8a5e61a2811500aa7d824f2d7b"}