{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ICollectionNFT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"../library/AuctionLibrary.sol\\\";\\nimport \\\"../library/AuctionStructure.sol\\\";\\n\\ninterface ICollectionNFT {\\n    event STAN_EVENT(\\n        bytes requestId,\\n        string nameFunction,\\n        bool platForm,\\n        uint256 tokenId\\n    );\\n\\n    function getTokenIdToCollectionId(uint256 _tokenId)\\n        external\\n        view\\n        returns (bytes memory);\\n\\n    function createCollection(\\n        bytes calldata _requestId,\\n        bytes calldata _collectionId,\\n        uint128 _ratioCreatorRoyaltyFee,\\n        uint128 _ratioCreatorDenomination,\\n        bool _isWeb\\n    ) external;\\n\\n    function createCollectionByStan(\\n        bytes calldata _requestId,\\n        address _to,\\n        bytes calldata _collectionId,\\n        bool _isWeb,\\n        uint128 _ratioCreatorRoyaltyFee,\\n        uint128 _ratioCreatorDenomination\\n    ) external;\\n\\n    function addNFTtoCollection(\\n        bytes calldata _requestId,\\n        bytes calldata _idCollection,\\n        uint256 _tokenId,\\n        address _creator,\\n        bool _isWeb\\n    ) external;\\n\\n    function updateOwnerNFT(\\n        bytes calldata _idCollection,\\n        address _from,\\n        address _to\\n    ) external;\\n\\n    function addBatchNFTToCollection(\\n        bytes calldata _idCollection,\\n        address _creator,\\n        uint256 _toId,\\n        uint256 _quantity\\n    ) external;\\n\\n    function getInfoCollection(\\n        bytes calldata _idCollection,\\n        uint256 _tokenId,\\n        address _currentOwnerNFT\\n    ) external view returns (AuctionStructure.infoCollection memory);\\n\\n    function processAddingBatchtoCollection(\\n        bytes calldata _oldIdCollection,\\n        bytes calldata _newIdCollection,\\n        address _creator,\\n        uint256 _quantity,\\n        uint256[] calldata _tokenIds\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IConfig.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"../library/AuctionStructure.sol\\\";\\n\\ninterface IConfig {\\n    function getTokenIdToCollectionId(uint256 _tokenId)\\n        external\\n        view\\n        returns (bytes memory);\\n\\n    function setRoyaltyFee(\\n        uint128 _ratioCreatorVal,\\n        uint128 _ratioCreatorDenomination,\\n        uint128 _ratioStanVal,\\n        uint128 _ratioStanDenomination\\n    ) external;\\n\\n    function setStanFee(uint256 _stanFee) external;\\n\\n    function setMaxCollectionNumber(uint128 _maxCollectionNumber) external;\\n\\n    function setServiceFee(\\n        AuctionStructure.feeStanService calldata _feeStanService\\n    ) external;\\n\\n    function setStanFixed(AuctionStructure.feeStanFixed calldata _feeStanFixed)\\n        external;\\n\\n    function getFeeStanSystem()\\n        external\\n        view\\n        returns (AuctionStructure.feeStanSystem calldata);\\n\\n    function getFeeStanFixed()\\n        external\\n        view\\n        returns (AuctionStructure.feeStanFixed calldata);\\n\\n    function getFeeStanService()\\n        external\\n        view\\n        returns (AuctionStructure.feeStanService calldata);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IStanToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\ninterface IStanToken {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\"\r\n    },\r\n    \"contracts/library/AuctionLibrary.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"./AuctionStructure.sol\\\";\\n\\nlibrary AuctionLibrary {\\n    enum FunctionName {\\n        LIST_FIXED_PRICE,\\n        LIST_AUCTION,\\n        BUY_NFT,\\n        CANCEL_LISTING_FIX_PRICE,\\n        CANCEL_LISTING_AUCTION,\\n        MAKE_OFFER_WITH_NFT,\\n        RE_OFFER,\\n        MAKE_OFFER_WITH_AUCTION,\\n        ACCEPT_OFFER_WITH_NFT,\\n        ACCEPT_OFFER_WITH_AUCTION,\\n        CANCEL_OFFER_WITH_NFT,\\n        CANCEL_OFFER_WITH_AUCTION,\\n        EXPIRED_FIX_PRICE,\\n        EXPIRED_LISTING,\\n        TRANSFER_NFT_PVP,\\n        DEPOSIT,\\n        WITHDRAW,\\n        WITHDRAW_BY_STAN,\\n        CLAIM_NFT,\\n        DEPOSIT_NFT,\\n        FINISH_AUCTION,\\n        CREATE_NFT_BY_STAN,\\n        CREATE_NFT,\\n        CREATE_COLLECTION,\\n        ADD_NFT_TO_COLLECTION,\\n        MOVE_BATCH_NFT,\\n        SET_ROYALTY_FEE,\\n        SET_SERVICE_FEE,\\n        SET_MAX_COLLECTION,\\n        SET_STAN_FIXED,\\n        DEPOSIT_BY_STAN\\n    }\\n\\n    function saveOffer(\\n        AuctionStructure.Offer storage _offerInstance,\\n        AuctionStructure.paramOffer memory _params\\n    ) internal {\\n        _offerInstance.tokenId = _params.tokenId;\\n        if (_params.indexId.length != 0) {\\n            _offerInstance.nftID = _params.indexId;\\n        }\\n        _offerInstance.subOffers[_params.subOfferId].subOfferId = _params\\n            .subOfferId;\\n        _offerInstance.owner = _params.owner;\\n        _offerInstance.subOffers[_params.subOfferId].maker = _params.maker;\\n        _offerInstance.subOffers[_params.subOfferId].amount = _params.amount;\\n        _offerInstance.subOffers[_params.subOfferId].expirationTime = _params\\n            .expiTime;\\n        _offerInstance.subOffers[_params.subOfferId].state = AuctionStructure\\n            .StateOfOffer\\n            .ACTIVE;\\n        _offerInstance.subOffers[_params.subOfferId].currency = _params\\n            .currency;\\n    }\\n\\n    function processCancel(\\n        AuctionStructure.Offer storage _offerInstance,\\n        bytes calldata _subOfferId\\n    ) internal {\\n        AuctionStructure.StateOfOffer stateOfOffer = _offerInstance\\n            .subOffers[_subOfferId]\\n            .state;\\n\\n        require(\\n            stateOfOffer != AuctionStructure.StateOfOffer.CANCELLED &&\\n                stateOfOffer != AuctionStructure.StateOfOffer.INACTIVE,\\n            \\\"AlreadyInActive\\\"\\n        );\\n        _offerInstance.subOffers[_subOfferId].state = AuctionStructure\\n            .StateOfOffer\\n            .INACTIVE;\\n    }\\n\\n    function findTheBestFitWinner(\\n        AuctionStructure.auctionStruct storage _auction\\n    ) internal view returns (uint256) {\\n        uint256 max = 0;\\n        uint256 winnerIndex = 0;\\n\\n        for (uint256 i = 0; i < _auction.offerIds.length; ) {\\n            uint256 _amount = _auction\\n                .offers\\n                .subOffers[_auction.offerIds[i]]\\n                .amount;\\n            if (_amount > max) {\\n                max = _amount;\\n                winnerIndex = i;\\n            }\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        return winnerIndex;\\n    }\\n\\n    function processChangeExpired(\\n        AuctionStructure.Offer storage _offerInstance,\\n        bytes[] calldata subOffersIdParam\\n    ) internal {\\n        for (uint256 i = 0; i < subOffersIdParam.length; ) {\\n            _offerInstance\\n                .subOffers[subOffersIdParam[i]]\\n                .state = AuctionStructure.StateOfOffer.CANCELLED;\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function getPaymentMethod(\\n        AuctionStructure.Currency _from,\\n        AuctionStructure.Currency _to\\n    ) internal pure returns (AuctionStructure.MethodToPayment) {\\n        if (\\n            _from == AuctionStructure.Currency.POINT &&\\n            _to == AuctionStructure.Currency.CRYPTO\\n        ) {\\n            return AuctionStructure.MethodToPayment.POINT_TO_CRYPTO;\\n        } else if (\\n            _from == AuctionStructure.Currency.CRYPTO &&\\n            _to == AuctionStructure.Currency.POINT\\n        ) {\\n            return AuctionStructure.MethodToPayment.CRYPTO_TO_POINT;\\n        } else if (\\n            _from == AuctionStructure.Currency.CRYPTO &&\\n            _to == AuctionStructure.Currency.CRYPTO\\n        ) {\\n            return AuctionStructure.MethodToPayment.CRYPTO_TO_CRYPTO;\\n        } else {\\n            return AuctionStructure.MethodToPayment.POINT_TO_POINT;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/library/AuctionStructure.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nlibrary AuctionStructure {\\n    struct auctionStruct {\\n        bytes autionId;\\n        uint256 tokenId;\\n        StateOfAution state;\\n        address owner;\\n        address winner;\\n        bytes[] offerIds;\\n        Currency currency;\\n        Offer offers;\\n        mapping(bytes => uint256) offerIdToIndex;\\n        mapping(address => uint256) userToBidnumber;\\n    }\\n\\n    struct Offer {\\n        uint256 tokenId;\\n        mapping(bytes => subOffer) subOffers;\\n        address owner;\\n        bytes nftID;\\n    }\\n\\n    struct subOffer {\\n        bytes subOfferId;\\n        address maker;\\n        uint256 amount;\\n        uint256 expirationTime;\\n        StateOfOffer state;\\n        Currency currency;\\n    }\\n\\n    struct Listing {\\n        bytes ListingID;\\n        address Owner;\\n        address ownerOfNFT;\\n        bool isAuction;\\n        uint256 ExpirationTime;\\n        uint256 Amount;\\n        uint256 tokenId;\\n        StateOfListing state;\\n        bytes AuctionId;\\n        bytes nftId;\\n        Currency currency;\\n    }\\n\\n    struct stateCollection {\\n        bytes id;\\n        uint128 currentNumber;\\n        uint128 maxNumber;\\n        uint128 ratioCreatorVal;\\n        uint128 ratioCreatorDenomination;\\n        uint128 ratioStanVal;\\n        uint128 ratioStanDenomination;\\n        address owner;\\n        mapping(uint256 => uint256) NFT;\\n        mapping(address => address) currentOwnerNFT;\\n        mapping(uint256 => address) creator;\\n    }\\n\\n    struct participant {\\n        address user;\\n        uint256 index;\\n    }\\n\\n    struct paramOffer {\\n        bytes subOfferId;\\n        bytes indexId;\\n        uint256 tokenId;\\n        address owner;\\n        address maker;\\n        uint256 expiTime;\\n        uint256 amount;\\n        bool isAuction;\\n        Currency currency;\\n    }\\n\\n    struct paramListing {\\n        bytes indexId;\\n        uint256 amount;\\n        uint256 tokenId;\\n        uint256 expirationTime;\\n        address maker;\\n        bytes nftId;\\n        Currency currency;\\n    }\\n\\n    struct puchasing {\\n        address seller;\\n        address buyer;\\n        uint256 amount;\\n        uint256 feeStanVal;\\n        uint256 feeStanValDenomination;\\n        uint256 tokenId;\\n        Method method;\\n        MethodToPayment methodToPayment;\\n    }\\n\\n    struct userFund {\\n        address maker;\\n        uint256 bidnumber;\\n    }\\n\\n    struct infoOffer {\\n        uint256 tokenId;\\n        address owner;\\n        address maker;\\n        uint256 amount;\\n        uint256 expirationTime;\\n        bytes nftId;\\n        StateOfOffer state;\\n        Currency currency;\\n    }\\n\\n    struct infoOfferAuction {\\n        uint256 tokenId;\\n        address owner;\\n        address maker;\\n        uint256 amount;\\n        uint256 expirationTime;\\n        StateOfOffer state;\\n        Currency currency;\\n    }\\n\\n    struct infoAuction {\\n        bytes auctionId;\\n        uint256 tokenId;\\n        StateOfAution state;\\n        address owner;\\n        address winner;\\n        bytes[] offerIds;\\n        Currency currency;\\n    }\\n\\n    struct infoCollection {\\n        uint256 ratioCreatorVal;\\n        uint256 ratioCreatorDenomination;\\n        uint256 ratioStanVal;\\n        uint256 ratioStanDenomination;\\n        address creator;\\n        address _owner;\\n        uint256 nft;\\n        address currentOwnerNFT;\\n    }\\n\\n    struct paramReOffer {\\n        bytes subOfferId;\\n        bytes auctionId;\\n        uint256 amount;\\n    }\\n\\n    struct stanFundParams {\\n        uint256 userStanFund;\\n        bool result;\\n    }\\n\\n        struct feeStanSystem {\\n        uint128 ratioCreatorVal;\\n        uint128 ratioCreatorDenomination;\\n        uint128 ratioStanVal;\\n        uint128 ratioStanDenomination;\\n        uint128 maxCollectionNumber;\\n    }\\n\\n    struct abilityToWithdraw {\\n        uint256 val;\\n        uint256 valDenomination;\\n    }\\n\\n    struct feeStanFixed {\\n        uint256 feeTransferNFTPvP;\\n        uint256 feeListingNFTAuction;\\n        uint256 feeCancelListingAuction;\\n        uint256 feePlaceBidAuction;\\n        uint256 feeMintingNFT;\\n        uint256 feeCreateCollection;\\n    }\\n\\n    struct totalFee {\\n        uint256 royalty;\\n        uint256 stanFee;\\n        uint256 exchangeWeb;\\n    }\\n\\n    struct feeStanService {\\n        uint128 ratioBuyFixedPriceVal;\\n        uint128 ratioBuyFixedPriceDenomination;\\n        uint128 ratioAcceptOfferPvPVal;\\n        uint128 ratioAcceptOfferPvPDenomination;\\n        uint128 ratioAcceptOfferAuctionVal;\\n        uint128 ratioAcceptOfferAuctionDenomination;\\n        uint128 ratioFinishAuctionVal;\\n        uint128 ratioFinishAuctionDenomination;\\n        uint128 ratioCancelOfferPvPVal;\\n        uint128 ratioCancelOfferPvPDenomination;\\n    }\\n\\n    enum StateOfListing {\\n        INACTIVE,\\n        ACTIVE,\\n        EXPIRED\\n    }\\n\\n    enum Method {\\n        BUY,\\n        AUCTION,\\n        OTHER\\n    }\\n\\n    enum Currency {\\n        POINT,\\n        CRYPTO\\n    }\\n\\n    enum Operator {\\n        PLUS,\\n        MINUS\\n    }\\n\\n    enum StateOfOffer {\\n        INACTIVE,\\n        ACTIVE,\\n        EXPIRED,\\n        DONE,\\n        CANCELLED\\n    }\\n\\n    enum StateOfAution {\\n        ACTIVE,\\n        DONE,\\n        CANCEL,\\n        EXPIRED\\n    }\\n\\n    enum MethodToPayment {\\n        POINT_TO_POINT,\\n        POINT_TO_CRYPTO,\\n        CRYPTO_TO_POINT,\\n        CRYPTO_TO_CRYPTO\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/V2/StanFundV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"../interfaces/IStanToken.sol\\\";\\nimport \\\"../interfaces/ICollectionNFT.sol\\\";\\nimport \\\"../interfaces/IConfig.sol\\\";\\nimport \\\"../library/AuctionLibrary.sol\\\";\\n\\ncontract StanFundV2 is OwnableUpgradeable, ReentrancyGuard {\\n    address public auctionAddress;\\n    ICollectionNFT private collectionNFT;\\n    IConfig private config;\\n    mapping(address => uint256) public stanFund;\\n    mapping(address => bool) private whiteList;\\n    AuctionStructure.abilityToWithdraw public ability;\\n    uint256 public totalSupply;\\n    uint256 public userSupply;\\n    address public stanAdmin;\\n\\n    modifier onlyAuthorizer() {\\n        require(whiteList[msg.sender], \\\"InvalidOwner\\\");\\n        _;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(msg.sender == stanAdmin, \\\"Invalidadmin\\\");\\n        _;\\n    }\\n\\n    event STAN_EVENT(\\n        bytes requestId,\\n        AuctionLibrary.FunctionName nameFunction,\\n        address from,\\n        uint256 amount\\n    );\\n\\n    event STAN_WARNING(uint256 _totalSupply, uint256 _userSupply);\\n\\n    function initialize(\\n        address _collectionNFT,\\n        address _config,\\n        address _admin,\\n        uint256 _val,\\n        uint256 _valDenomination\\n    ) public initializer {\\n        OwnableUpgradeable.__Ownable_init();\\n        ReentrancyGuard.__ReentrancyGuard_init();\\n        collectionNFT = ICollectionNFT(_collectionNFT);\\n        config = IConfig(_config);\\n        ability.val = _val;\\n        ability.valDenomination = _valDenomination;\\n        stanAdmin = _admin;\\n    }\\n\\n    function setConfig(address _config) external onlyOwner {\\n        config = IConfig(_config);\\n    }\\n\\n    function setAbilityToWithdraw(\\n        uint256 _val,\\n        uint256 _valDenomination\\n    ) external onlyOwner {\\n        ability.val = _val;\\n        ability.valDenomination = _valDenomination;\\n    }\\n\\n    function setAuthorizers(\\n        address[] calldata _authorizers,\\n        bool _allowed\\n    ) external onlyOwner {\\n        for (uint256 i = 0; i < _authorizers.length; ) {\\n            whiteList[_authorizers[i]] = _allowed;\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function setAdmin(address _stanAdmin) external onlyOwner {\\n        stanAdmin = _stanAdmin;\\n    }\\n\\n    function setCollection(address _collectionNFT) external onlyOwner {\\n        collectionNFT = ICollectionNFT(_collectionNFT);\\n    }\\n\\n    function distributeToken(\\n        AuctionStructure.puchasing memory params,\\n        uint256 fee\\n    ) private returns (AuctionStructure.totalFee memory) {\\n        if (\\n            params.methodToPayment ==\\n            AuctionStructure.MethodToPayment.POINT_TO_CRYPTO ||\\n            params.methodToPayment ==\\n            AuctionStructure.MethodToPayment.CRYPTO_TO_CRYPTO\\n        ) {\\n            require(\\n                params.method == AuctionStructure.Method.AUCTION ||\\n                    (params.method != AuctionStructure.Method.AUCTION &&\\n                        stanFund[params.buyer] >= params.amount),\\n                \\\"InvalidBalance\\\"\\n            );\\n\\n            stanFund[params.buyer] = params.method ==\\n                AuctionStructure.Method.AUCTION\\n                ? stanFund[params.buyer]\\n                : stanFund[params.buyer] - params.amount;\\n        }\\n\\n        AuctionStructure.feeStanSystem memory feeInstance = config\\n            .getFeeStanSystem();\\n\\n        AuctionStructure.infoCollection memory infoCollection = collectionNFT\\n            .getInfoCollection(\\n                collectionNFT.getTokenIdToCollectionId(params.tokenId),\\n                params.tokenId,\\n                params.seller\\n            );\\n\\n        uint256 creatorAmount = (params.amount *\\n            infoCollection.ratioCreatorVal) /\\n            10 ** infoCollection.ratioCreatorDenomination;\\n        uint256 creatorStan = (params.amount * feeInstance.ratioStanVal) /\\n            10 ** feeInstance.ratioStanDenomination;\\n        uint256 remainAmount = params.amount -\\n            creatorAmount -\\n            creatorStan -\\n            fee;\\n\\n        if (\\n            params.methodToPayment ==\\n            AuctionStructure.MethodToPayment.CRYPTO_TO_POINT ||\\n            params.methodToPayment ==\\n            AuctionStructure.MethodToPayment.CRYPTO_TO_CRYPTO\\n        ) {\\n            stanFund[infoCollection.creator] += creatorAmount;\\n            stanFund[params.seller] += remainAmount;\\n        }\\n\\n        if (\\n            params.methodToPayment ==\\n            AuctionStructure.MethodToPayment.POINT_TO_CRYPTO\\n        ) {\\n            userSupply -= params.amount;\\n        }\\n\\n        if (\\n            params.methodToPayment ==\\n            AuctionStructure.MethodToPayment.CRYPTO_TO_POINT ||\\n            params.methodToPayment ==\\n            AuctionStructure.MethodToPayment.POINT_TO_CRYPTO\\n        ) {\\n            creatorStan = 0;\\n            fee = 0;\\n        }\\n\\n        AuctionStructure.totalFee memory totalFee = AuctionStructure.totalFee(\\n            creatorStan,\\n            fee,\\n            params.methodToPayment ==\\n                AuctionStructure.MethodToPayment.CRYPTO_TO_POINT\\n                ? (remainAmount + creatorAmount)\\n                : 0\\n        );\\n\\n        return totalFee;\\n    }\\n\\n    function purchaseProcessing(\\n        AuctionStructure.puchasing memory params\\n    ) external onlyAuthorizer returns (AuctionStructure.totalFee memory) {\\n        AuctionStructure.totalFee memory totalFee = AuctionStructure.totalFee(\\n            0,\\n            0,\\n            0\\n        );\\n\\n        if (\\n            params.methodToPayment ==\\n            AuctionStructure.MethodToPayment.POINT_TO_POINT\\n        ) return totalFee;\\n\\n        uint256 fee = (params.amount * params.feeStanVal) /\\n            10 ** params.feeStanValDenomination;\\n\\n        totalFee = distributeToken(params, fee);\\n\\n        return totalFee;\\n    }\\n\\n    function handleBackFeeToUser(\\n        AuctionStructure.userFund[] memory _users\\n    ) external onlyAuthorizer {\\n        for (uint256 i = 0; i < _users.length; ) {\\n            stanFund[_users[i].maker] += _users[i].bidnumber;\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function get(\\n        address _user\\n    ) external view returns (AuctionStructure.stanFundParams memory) {\\n        bool result = stanFund[_user] > 0;\\n        AuctionStructure.stanFundParams memory params = AuctionStructure\\n            .stanFundParams(stanFund[_user], result);\\n\\n        return params;\\n    }\\n\\n    function set(\\n        uint256 _amount,\\n        AuctionStructure.Operator _operator,\\n        address _user\\n    ) external onlyAuthorizer {\\n        if (_operator == AuctionStructure.Operator.PLUS) {\\n            stanFund[_user] += _amount;\\n        } else {\\n            require(stanFund[_user] >= _amount, \\\"InvalidAmount\\\");\\n            stanFund[_user] -= _amount;\\n        }\\n    }\\n\\n    function deposit(\\n        bytes calldata _requestId,\\n        AuctionStructure.Currency _currency\\n    ) external payable {\\n        stanFund[msg.sender] += msg.value;\\n        totalSupply += msg.value;\\n        userSupply += msg.value;\\n        (bool sent, ) = address(this).call{value: msg.value}(\\\"\\\");\\n        require(sent, \\\"Failed to send Ether\\\");\\n\\n        emit STAN_EVENT(\\n            _requestId,\\n            AuctionLibrary.FunctionName.DEPOSIT,\\n            msg.sender,\\n            msg.value\\n        );\\n    }\\n\\n    function depositByStan(\\n        bytes calldata _requestId,\\n        AuctionStructure.Currency _currency\\n    ) external payable nonReentrant {\\n        totalSupply += msg.value;\\n        (bool sent, ) = address(this).call{value: msg.value}(\\\"\\\");\\n        require(sent, \\\"Failed to send Ether\\\");\\n\\n        emit STAN_EVENT(\\n            _requestId,\\n            AuctionLibrary.FunctionName.DEPOSIT_BY_STAN,\\n            msg.sender,\\n            msg.value\\n        );\\n    }\\n\\n    function withdraw(\\n        bytes calldata _requestId,\\n        uint256 _amount,\\n        AuctionStructure.Currency _currency\\n    ) external nonReentrant {\\n        uint256 stanFundAmount = stanFund[msg.sender];\\n        require(\\n            stanFundAmount != 0 && _amount <= stanFundAmount,\\n            \\\"InvalidBalance\\\"\\n        );\\n\\n        stanFund[msg.sender] -= _amount;\\n        totalSupply -= _amount;\\n        userSupply -= _amount;\\n\\n        (bool sent, ) = payable(msg.sender).call{value: _amount}(\\\"\\\");\\n        require(sent, \\\"Failed to send Ether\\\");\\n\\n        emit STAN_EVENT(\\n            _requestId,\\n            AuctionLibrary.FunctionName.WITHDRAW,\\n            msg.sender,\\n            _amount\\n        );\\n    }\\n\\n    function withdrawByStan(\\n        bytes calldata _requestId,\\n        uint256 _amount,\\n        AuctionStructure.Currency _currency\\n    ) external onlyAdmin nonReentrant {\\n        uint256 stanFundToWithdraw = ((totalSupply - userSupply) *\\n            ability.val) / ability.valDenomination;\\n        require(_amount <= stanFundToWithdraw, \\\"InvalidBalance\\\");\\n        totalSupply -= _amount;\\n\\n        (bool sent, ) = payable(stanAdmin).call{value: _amount}(\\\"\\\");\\n        require(sent, \\\"Failed to send Ether\\\");\\n\\n        emit STAN_EVENT(\\n            _requestId,\\n            AuctionLibrary.FunctionName.WITHDRAW_BY_STAN,\\n            msg.sender,\\n            _amount\\n        );\\n    }\\n\\n    function getInforStanFund()\\n        external\\n        view\\n        returns (uint256, uint256, uint256, uint256, uint256)\\n    {\\n        return (\\n            totalSupply,\\n            userSupply,\\n            ability.val,\\n            ability.valDenomination,\\n            ((totalSupply - userSupply) * ability.val) / ability.valDenomination\\n        );\\n    }\\n\\n    function setSupply(\\n        uint256 _amount,\\n        AuctionStructure.Operator _operator\\n    ) external onlyAuthorizer {\\n        if (_operator == AuctionStructure.Operator.PLUS) {\\n            emit STAN_WARNING(totalSupply, userSupply);\\n            require(\\n                userSupply + _amount <= totalSupply,\\n                \\\"TotalSupplyBiggerUserSupply\\\"\\n            );\\n\\n            userSupply += _amount;\\n        } else {\\n            require(userSupply >= _amount, \\\"InvalidAmount\\\");\\n            userSupply -= _amount;\\n        }\\n    }\\n\\n    function test() public pure returns (bool) {\\n        return true;\\n    }\\n\\n    receive() external payable {}\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"requestId\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"enum AuctionLibrary.FunctionName\",\"name\":\"nameFunction\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"STAN_EVENT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_totalSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_userSupply\",\"type\":\"uint256\"}],\"name\":\"STAN_WARNING\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ability\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valDenomination\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_requestId\",\"type\":\"bytes\"},{\"internalType\":\"enum AuctionStructure.Currency\",\"name\":\"_currency\",\"type\":\"uint8\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_requestId\",\"type\":\"bytes\"},{\"internalType\":\"enum AuctionStructure.Currency\",\"name\":\"_currency\",\"type\":\"uint8\"}],\"name\":\"depositByStan\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"get\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"userStanFund\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"internalType\":\"struct AuctionStructure.stanFundParams\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInforStanFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bidnumber\",\"type\":\"uint256\"}],\"internalType\":\"struct AuctionStructure.userFund[]\",\"name\":\"_users\",\"type\":\"tuple[]\"}],\"name\":\"handleBackFeeToUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collectionNFT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_config\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_val\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_valDenomination\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeStanVal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeStanValDenomination\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enum AuctionStructure.Method\",\"name\":\"method\",\"type\":\"uint8\"},{\"internalType\":\"enum AuctionStructure.MethodToPayment\",\"name\":\"methodToPayment\",\"type\":\"uint8\"}],\"internalType\":\"struct AuctionStructure.puchasing\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"purchaseProcessing\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"royalty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stanFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exchangeWeb\",\"type\":\"uint256\"}],\"internalType\":\"struct AuctionStructure.totalFee\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"enum AuctionStructure.Operator\",\"name\":\"_operator\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_val\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_valDenomination\",\"type\":\"uint256\"}],\"name\":\"setAbilityToWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stanAdmin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_authorizers\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_allowed\",\"type\":\"bool\"}],\"name\":\"setAuthorizers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collectionNFT\",\"type\":\"address\"}],\"name\":\"setCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_config\",\"type\":\"address\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"enum AuctionStructure.Operator\",\"name\":\"_operator\",\"type\":\"uint8\"}],\"name\":\"setSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stanAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stanFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"test\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_requestId\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"enum AuctionStructure.Currency\",\"name\":\"_currency\",\"type\":\"uint8\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_requestId\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"enum AuctionStructure.Currency\",\"name\":\"_currency\",\"type\":\"uint8\"}],\"name\":\"withdrawByStan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "StanFundV2", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}