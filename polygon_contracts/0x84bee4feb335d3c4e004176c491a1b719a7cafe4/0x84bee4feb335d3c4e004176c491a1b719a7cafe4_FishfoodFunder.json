{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/FishfoodFunder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\ncontract FishfoodFunder {\\n    error TooSoon();\\n    error TooDepleted();\\n    error TooMuch();\\n    error TooLitte();\\n    error TooRich();\\n    error TooExpensive();\\n    error TooBad();\\n\\n    event FundingSent(address indexed recipient, uint256 amount);\\n\\n    uint256 public upperRequestLimit;\\n    uint256 public lowerRequestLimit;\\n    uint256 public balanceLimit;\\n    uint256 public adminCount;\\n    uint256 public gasLimit;\\n\\n    struct FishfoodFundingStatus {\\n        bool authorized;\\n        bool isAdmin;\\n        uint256 timestampOfLastCall;\\n    }\\n\\n    mapping(address fishfoodAddress => FishfoodFundingStatus status) public\\n        fishFoodFundingStatus;\\n\\n    constructor() {\\n        upperRequestLimit = 0.3 ether;\\n        lowerRequestLimit = 0.05 ether;\\n        balanceLimit = 0.15 ether;\\n        gasLimit = 30 gwei;\\n        fishFoodFundingStatus[msg.sender].isAdmin = true;\\n        adminCount = 1;\\n    }\\n\\n    function getFunding(uint256 amountRequested) external {\\n        // Only permit authorized addresses to receive fishfood funding.\\n        if (!fishFoodFundingStatus[msg.sender].authorized) {\\n            revert TooBad();\\n        }\\n\\n        // Revert with a useful message if the contract is broke.\\n        if (amountRequested > address(this).balance) {\\n            revert TooDepleted();\\n        }\\n\\n        // Don't be greedy.\\n        if (amountRequested > upperRequestLimit) {\\n            revert TooMuch();\\n        }\\n\\n        // Don't get confused by wei vs ETH.\\n        if (amountRequested < lowerRequestLimit) {\\n            revert TooLitte();\\n        }\\n\\n        // Don't be out here spending 10 bucks to request 11.\\n        if (tx.gasprice > gasLimit) {\\n            revert TooExpensive();\\n        }\\n\\n        // Don't ask for money if you already have a lot.\\n        if (msg.sender.balance > balanceLimit) {\\n            revert TooRich();\\n        }\\n\\n        // Only permit one request every week.\\n        if (\\n            fishFoodFundingStatus[msg.sender].timestampOfLastCall + 7 days\\n                > block.timestamp\\n        ) {\\n            revert TooSoon();\\n        }\\n\\n        // Update the last request block timestamp.\\n        fishFoodFundingStatus[msg.sender].timestampOfLastCall = block.timestamp;\\n\\n        emit FundingSent(msg.sender, amountRequested);\\n\\n        // If all the checks pass, send the funds.\\n        bool sent = payable(msg.sender).send(amountRequested);\\n        require(sent, \\\"Failed to send\\\");\\n    }\\n\\n    function setUpperRequestLimit(uint256 newLimit) external {\\n        if (!fishFoodFundingStatus[msg.sender].isAdmin) {\\n            revert TooBad();\\n        }\\n\\n        upperRequestLimit = newLimit;\\n    }\\n\\n    function setLowerRequestLimit(uint256 newLimit) external {\\n        if (!fishFoodFundingStatus[msg.sender].isAdmin) {\\n            revert TooBad();\\n        }\\n\\n        lowerRequestLimit = newLimit;\\n    }\\n\\n    function setBalanceLimit(uint256 newLimit) external {\\n        if (!fishFoodFundingStatus[msg.sender].isAdmin) {\\n            revert TooBad();\\n        }\\n\\n        balanceLimit = newLimit;\\n    }\\n\\n    function setGasLimit(uint256 newLimit) external {\\n        if (!fishFoodFundingStatus[msg.sender].isAdmin) {\\n            revert TooBad();\\n        }\\n\\n        gasLimit = newLimit;\\n    }\\n\\n    function authorizeAddress(address fishfoodAddress) external {\\n        if (!fishFoodFundingStatus[msg.sender].isAdmin) {\\n            revert TooBad();\\n        }\\n\\n        fishFoodFundingStatus[fishfoodAddress].authorized = true;\\n    }\\n\\n    function batchAuthorizeAddresses(address[] memory fishfoodAddresses)\\n        external\\n    {\\n        if (!fishFoodFundingStatus[msg.sender].isAdmin) {\\n            revert TooBad();\\n        }\\n\\n        for (uint256 i = 0; i < fishfoodAddresses.length; ++i) {\\n            fishFoodFundingStatus[fishfoodAddresses[i]].authorized = true;\\n        }\\n    }\\n\\n    function deauthorizeAddress(address fishfoodAddress) external {\\n        if (!fishFoodFundingStatus[msg.sender].isAdmin) {\\n            revert TooBad();\\n        }\\n\\n        fishFoodFundingStatus[fishfoodAddress].authorized = false;\\n    }\\n\\n    function batchDeauthorizeAddresses(address[] memory fishfoodAddresses)\\n        external\\n    {\\n        if (!fishFoodFundingStatus[msg.sender].isAdmin) {\\n            revert TooBad();\\n        }\\n\\n        for (uint256 i = 0; i < fishfoodAddresses.length; ++i) {\\n            fishFoodFundingStatus[fishfoodAddresses[i]].authorized = false;\\n        }\\n    }\\n\\n    function addAdmin(address newAdmin) external {\\n        if (!fishFoodFundingStatus[msg.sender].isAdmin) {\\n            revert TooBad();\\n        }\\n\\n        fishFoodFundingStatus[newAdmin].isAdmin = true;\\n        ++adminCount;\\n    }\\n\\n    function removeAdmin(address newAdmin) external {\\n        if (\\n            !fishFoodFundingStatus[msg.sender].isAdmin\\n            // Don't allow the last admin to be removed if there are funds\\n            // in the contract.\\n            || (adminCount == 1 && address(this).balance > 0)\\n        ) {\\n            revert TooBad();\\n        }\\n\\n        fishFoodFundingStatus[newAdmin].isAdmin = false;\\n        --adminCount;\\n    }\\n\\n    function isAuthorized(address fishfoodAddress)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        return fishFoodFundingStatus[fishfoodAddress].authorized;\\n    }\\n\\n    function lastRequestTimestamp(address fishfoodAddress)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return fishFoodFundingStatus[fishfoodAddress].timestampOfLastCall;\\n    }\\n\\n    function withdraw() external {\\n        if (!fishFoodFundingStatus[msg.sender].isAdmin) {\\n            revert TooBad();\\n        }\\n\\n        bool sent = payable(msg.sender).send(address(this).balance);\\n        require(sent, \\\"Failed to send\\\");\\n    }\\n\\n    receive() external payable { }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"TooBad\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooDepleted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooExpensive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooLitte\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooMuch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooRich\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooSoon\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundingSent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fishfoodAddress\",\"type\":\"address\"}],\"name\":\"authorizeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"fishfoodAddresses\",\"type\":\"address[]\"}],\"name\":\"batchAuthorizeAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"fishfoodAddresses\",\"type\":\"address[]\"}],\"name\":\"batchDeauthorizeAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fishfoodAddress\",\"type\":\"address\"}],\"name\":\"deauthorizeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fishfoodAddress\",\"type\":\"address\"}],\"name\":\"fishFoodFundingStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"authorized\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isAdmin\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"timestampOfLastCall\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountRequested\",\"type\":\"uint256\"}],\"name\":\"getFunding\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fishfoodAddress\",\"type\":\"address\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fishfoodAddress\",\"type\":\"address\"}],\"name\":\"lastRequestTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lowerRequestLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"setBalanceLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"setGasLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"setLowerRequestLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"setUpperRequestLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upperRequestLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "FishfoodFunder", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}