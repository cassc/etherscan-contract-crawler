{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@tetu_io/tetu-contracts/contracts/base/governance/ControllableV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\n/**\\n* By using this software, you understand, acknowledge and accept that Tetu\\n* and/or the underlying software are provided \u201cas is\u201d and \u201cas available\u201d\\n* basis and without warranties or representations of any kind either expressed\\n* or implied. Any use of this open source software released under the ISC\\n* Internet Systems Consortium license is done at your own risk to the fullest\\n* extent permissible pursuant to applicable law any and all liability as well\\n* as all warranties, including any fitness for a particular purpose with respect\\n* to Tetu and/or the underlying software and the use thereof are disclaimed.\\n*/\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"../../openzeppelin/Initializable.sol\\\";\\nimport \\\"../interfaces/IControllable.sol\\\";\\nimport \\\"../interfaces/IControllableExtended.sol\\\";\\nimport \\\"../interfaces/IController.sol\\\";\\n\\n/// @title Implement basic functionality for any contract that require strict control\\n///        V2 is optimised version for less gas consumption\\n/// @dev Can be used with upgradeable pattern.\\n///      Require call initializeControllable() in any case.\\n/// @author belbix\\nabstract contract ControllableV2 is Initializable, IControllable, IControllableExtended {\\n\\n  bytes32 internal constant _CONTROLLER_SLOT = bytes32(uint256(keccak256(\\\"eip1967.controllable.controller\\\")) - 1);\\n  bytes32 internal constant _CREATED_SLOT = bytes32(uint256(keccak256(\\\"eip1967.controllable.created\\\")) - 1);\\n  bytes32 internal constant _CREATED_BLOCK_SLOT = bytes32(uint256(keccak256(\\\"eip1967.controllable.created_block\\\")) - 1);\\n\\n  event ContractInitialized(address controller, uint ts, uint block);\\n\\n  /// @notice Initialize contract after setup it as proxy implementation\\n  ///         Save block.timestamp in the \\\"created\\\" variable\\n  /// @dev Use it only once after first logic setup\\n  /// @param __controller Controller address\\n  function initializeControllable(address __controller) public initializer {\\n    _setController(__controller);\\n    _setCreated(block.timestamp);\\n    _setCreatedBlock(block.number);\\n    emit ContractInitialized(__controller, block.timestamp, block.number);\\n  }\\n\\n  /// @dev Return true if given address is controller\\n  function isController(address _value) external override view returns (bool) {\\n    return _isController(_value);\\n  }\\n\\n  function _isController(address _value) internal view returns (bool) {\\n    return _value == _controller();\\n  }\\n\\n  /// @notice Return true if given address is setup as governance in Controller\\n  function isGovernance(address _value) external override view returns (bool) {\\n    return _isGovernance(_value);\\n  }\\n\\n  function _isGovernance(address _value) internal view returns (bool) {\\n    return IController(_controller()).governance() == _value;\\n  }\\n\\n  // ************* SETTERS/GETTERS *******************\\n\\n  /// @notice Return controller address saved in the contract slot\\n  function controller() external view override returns (address) {\\n    return _controller();\\n  }\\n\\n  function _controller() internal view returns (address result) {\\n    bytes32 slot = _CONTROLLER_SLOT;\\n    assembly {\\n      result := sload(slot)\\n    }\\n  }\\n\\n  /// @dev Set a controller address to contract slot\\n  function _setController(address _newController) private {\\n    require(_newController != address(0));\\n    bytes32 slot = _CONTROLLER_SLOT;\\n    assembly {\\n      sstore(slot, _newController)\\n    }\\n  }\\n\\n  /// @notice Return creation timestamp\\n  /// @return ts Creation timestamp\\n  function created() external view override returns (uint256 ts) {\\n    bytes32 slot = _CREATED_SLOT;\\n    assembly {\\n      ts := sload(slot)\\n    }\\n  }\\n\\n  /// @dev Filled only once when contract initialized\\n  /// @param _value block.timestamp\\n  function _setCreated(uint256 _value) private {\\n    bytes32 slot = _CREATED_SLOT;\\n    assembly {\\n      sstore(slot, _value)\\n    }\\n  }\\n\\n  /// @notice Return creation block number\\n  /// @return ts Creation block number\\n  function createdBlock() external view returns (uint256 ts) {\\n    bytes32 slot = _CREATED_BLOCK_SLOT;\\n    assembly {\\n      ts := sload(slot)\\n    }\\n  }\\n\\n  /// @dev Filled only once when contract initialized\\n  /// @param _value block.number\\n  function _setCreatedBlock(uint256 _value) private {\\n    bytes32 slot = _CREATED_BLOCK_SLOT;\\n    assembly {\\n      sstore(slot, _value)\\n    }\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"@tetu_io/tetu-contracts/contracts/base/interfaces/IBookkeeper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\n/**\\n* By using this software, you understand, acknowledge and accept that Tetu\\n* and/or the underlying software are provided \u201cas is\u201d and \u201cas available\u201d\\n* basis and without warranties or representations of any kind either expressed\\n* or implied. Any use of this open source software released under the ISC\\n* Internet Systems Consortium license is done at your own risk to the fullest\\n* extent permissible pursuant to applicable law any and all liability as well\\n* as all warranties, including any fitness for a particular purpose with respect\\n* to Tetu and/or the underlying software and the use thereof are disclaimed.\\n*/\\n\\npragma solidity 0.8.4;\\n\\ninterface IBookkeeper {\\n\\n  struct PpfsChange {\\n    address vault;\\n    uint256 block;\\n    uint256 time;\\n    uint256 value;\\n    uint256 oldBlock;\\n    uint256 oldTime;\\n    uint256 oldValue;\\n  }\\n\\n  struct HardWork {\\n    address strategy;\\n    uint256 block;\\n    uint256 time;\\n    uint256 targetTokenAmount;\\n  }\\n\\n  function _vaults(uint id) external view returns (address);\\n\\n  function _strategies(uint id) external view returns (address);\\n\\n  function addVault(address _vault) external;\\n\\n  function addStrategy(address _strategy) external;\\n\\n  function registerStrategyEarned(uint256 _targetTokenAmount) external;\\n\\n  function registerFundKeeperEarned(address _token, uint256 _fundTokenAmount) external;\\n\\n  function registerUserAction(address _user, uint256 _amount, bool _deposit) external;\\n\\n  function registerVaultTransfer(address from, address to, uint256 amount) external;\\n\\n  function registerUserEarned(address _user, address _vault, address _rt, uint256 _amount) external;\\n\\n  function registerPpfsChange(address vault, uint256 value) external;\\n\\n  function registerRewardDistribution(address vault, address token, uint256 amount) external;\\n\\n  function vaults() external view returns (address[] memory);\\n\\n  function vaultsLength() external view returns (uint256);\\n\\n  function strategies() external view returns (address[] memory);\\n\\n  function strategiesLength() external view returns (uint256);\\n\\n  function lastPpfsChange(address vault) external view returns (PpfsChange memory);\\n\\n  /// @notice Return total earned TETU tokens for strategy\\n  /// @dev Should be incremented after strategy rewards distribution\\n  /// @param strategy Strategy address\\n  /// @return Earned TETU tokens\\n  function targetTokenEarned(address strategy) external view returns (uint256);\\n\\n  /// @notice Return share(xToken) balance of given user\\n  /// @dev Should be calculated for each xToken transfer\\n  /// @param vault Vault address\\n  /// @param user User address\\n  /// @return User share (xToken) balance\\n  function vaultUsersBalances(address vault, address user) external view returns (uint256);\\n\\n  /// @notice Return earned token amount for given token and user\\n  /// @dev Fills when user claim rewards\\n  /// @param user User address\\n  /// @param vault Vault address\\n  /// @param token Token address\\n  /// @return User's earned tokens amount\\n  function userEarned(address user, address vault, address token) external view returns (uint256);\\n\\n  function lastHardWork(address strategy) external view returns (HardWork memory);\\n\\n  /// @notice Return users quantity for given Vault\\n  /// @dev Calculation based in Bookkeeper user balances\\n  /// @param vault Vault address\\n  /// @return Users quantity\\n  function vaultUsersQuantity(address vault) external view returns (uint256);\\n\\n  function fundKeeperEarned(address vault) external view returns (uint256);\\n\\n  function vaultRewards(address vault, address token, uint256 idx) external view returns (uint256);\\n\\n  function vaultRewardsLength(address vault, address token) external view returns (uint256);\\n\\n  function strategyEarnedSnapshots(address strategy, uint256 idx) external view returns (uint256);\\n\\n  function strategyEarnedSnapshotsTime(address strategy, uint256 idx) external view returns (uint256);\\n\\n  function strategyEarnedSnapshotsLength(address strategy) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@tetu_io/tetu-contracts/contracts/base/interfaces/IControllable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\n/**\\n* By using this software, you understand, acknowledge and accept that Tetu\\n* and/or the underlying software are provided \u201cas is\u201d and \u201cas available\u201d\\n* basis and without warranties or representations of any kind either expressed\\n* or implied. Any use of this open source software released under the ISC\\n* Internet Systems Consortium license is done at your own risk to the fullest\\n* extent permissible pursuant to applicable law any and all liability as well\\n* as all warranties, including any fitness for a particular purpose with respect\\n* to Tetu and/or the underlying software and the use thereof are disclaimed.\\n*/\\n\\npragma solidity 0.8.4;\\n\\ninterface IControllable {\\n\\n  function isController(address _contract) external view returns (bool);\\n\\n  function isGovernance(address _contract) external view returns (bool);\\n\\n}\\n\"\r\n    },\r\n    \"@tetu_io/tetu-contracts/contracts/base/interfaces/IControllableExtended.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\n/**\\n* By using this software, you understand, acknowledge and accept that Tetu\\n* and/or the underlying software are provided \u201cas is\u201d and \u201cas available\u201d\\n* basis and without warranties or representations of any kind either expressed\\n* or implied. Any use of this open source software released under the ISC\\n* Internet Systems Consortium license is done at your own risk to the fullest\\n* extent permissible pursuant to applicable law any and all liability as well\\n* as all warranties, including any fitness for a particular purpose with respect\\n* to Tetu and/or the underlying software and the use thereof are disclaimed.\\n*/\\n\\npragma solidity 0.8.4;\\n\\n/// @dev This interface contains additional functions for Controllable class\\n///      Don't extend the exist Controllable for the reason of huge coherence\\ninterface IControllableExtended {\\n\\n  function created() external view returns (uint256 ts);\\n\\n  function controller() external view returns (address adr);\\n\\n}\\n\"\r\n    },\r\n    \"@tetu_io/tetu-contracts/contracts/base/interfaces/IController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\n/**\\n* By using this software, you understand, acknowledge and accept that Tetu\\n* and/or the underlying software are provided \u201cas is\u201d and \u201cas available\u201d\\n* basis and without warranties or representations of any kind either expressed\\n* or implied. Any use of this open source software released under the ISC\\n* Internet Systems Consortium license is done at your own risk to the fullest\\n* extent permissible pursuant to applicable law any and all liability as well\\n* as all warranties, including any fitness for a particular purpose with respect\\n* to Tetu and/or the underlying software and the use thereof are disclaimed.\\n*/\\n\\npragma solidity 0.8.4;\\n\\ninterface IController {\\n\\n\\n  function VERSION() external view returns (string memory);\\n\\n  function addHardWorker(address _worker) external;\\n\\n  function addStrategiesToSplitter(\\n    address _splitter,\\n    address[] memory _strategies\\n  ) external;\\n\\n  function addStrategy(address _strategy) external;\\n\\n  function addVaultsAndStrategies(\\n    address[] memory _vaults,\\n    address[] memory _strategies\\n  ) external;\\n\\n  function announcer() external view returns (address);\\n\\n  function bookkeeper() external view returns (address);\\n\\n  function changeWhiteListStatus(address[] memory _targets, bool status)\\n  external;\\n\\n  function controllerTokenMove(\\n    address _recipient,\\n    address _token,\\n    uint256 _amount\\n  ) external;\\n\\n  function dao() external view returns (address);\\n\\n  function distributor() external view returns (address);\\n\\n  function doHardWork(address _vault) external;\\n\\n  function feeRewardForwarder() external view returns (address);\\n\\n  function fund() external view returns (address);\\n\\n  function fundDenominator() external view returns (uint256);\\n\\n  function fundKeeperTokenMove(\\n    address _fund,\\n    address _token,\\n    uint256 _amount\\n  ) external;\\n\\n  function fundNumerator() external view returns (uint256);\\n\\n  function fundToken() external view returns (address);\\n\\n  function governance() external view returns (address);\\n\\n  function hardWorkers(address) external view returns (bool);\\n\\n  function initialize() external;\\n\\n  function isAllowedUser(address _adr) external view returns (bool);\\n\\n  function isDao(address _adr) external view returns (bool);\\n\\n  function isHardWorker(address _adr) external view returns (bool);\\n\\n  function isPoorRewardConsumer(address _adr) external view returns (bool);\\n\\n  function isRewardDistributor(address _adr) external view returns (bool);\\n\\n  function isValidStrategy(address _strategy) external view returns (bool);\\n\\n  function isValidVault(address _vault) external view returns (bool);\\n\\n  function mintAndDistribute(uint256 totalAmount, bool mintAllAvailable)\\n  external;\\n\\n  function mintHelper() external view returns (address);\\n\\n  function psDenominator() external view returns (uint256);\\n\\n  function psNumerator() external view returns (uint256);\\n\\n  function psVault() external view returns (address);\\n\\n  function pureRewardConsumers(address) external view returns (bool);\\n\\n  function removeHardWorker(address _worker) external;\\n\\n  function rewardDistribution(address) external view returns (bool);\\n\\n  function rewardToken() external view returns (address);\\n\\n  function setAnnouncer(address _newValue) external;\\n\\n  function setBookkeeper(address newValue) external;\\n\\n  function setDao(address newValue) external;\\n\\n  function setDistributor(address _distributor) external;\\n\\n  function setFeeRewardForwarder(address _feeRewardForwarder) external;\\n\\n  function setFund(address _newValue) external;\\n\\n  function setFundNumeratorDenominator(uint256 numerator, uint256 denominator)\\n  external;\\n\\n  function setFundToken(address _newValue) external;\\n\\n  function setGovernance(address newValue) external;\\n\\n  function setMintHelper(address _newValue) external;\\n\\n  function setPSNumeratorDenominator(uint256 numerator, uint256 denominator)\\n  external;\\n\\n  function setPsVault(address _newValue) external;\\n\\n  function setPureRewardConsumers(address[] memory _targets, bool _flag)\\n  external;\\n\\n  function setRewardDistribution(\\n    address[] memory _newRewardDistribution,\\n    bool _flag\\n  ) external;\\n\\n  function setRewardToken(address _newValue) external;\\n\\n  function setVaultController(address _newValue) external;\\n\\n  function setVaultStrategyBatch(\\n    address[] memory _vaults,\\n    address[] memory _strategies\\n  ) external;\\n\\n  function strategies(address) external view returns (bool);\\n\\n  function strategyTokenMove(\\n    address _strategy,\\n    address _token,\\n    uint256 _amount\\n  ) external;\\n\\n  function upgradeTetuProxyBatch(\\n    address[] memory _contracts,\\n    address[] memory _implementations\\n  ) external;\\n\\n  function vaultController() external view returns (address);\\n\\n  function vaults(address) external view returns (bool);\\n\\n  function whiteList(address) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@tetu_io/tetu-contracts/contracts/base/interfaces/IFeeRewardForwarder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\n/**\\n* By using this software, you understand, acknowledge and accept that Tetu\\n* and/or the underlying software are provided \u201cas is\u201d and \u201cas available\u201d\\n* basis and without warranties or representations of any kind either expressed\\n* or implied. Any use of this open source software released under the ISC\\n* Internet Systems Consortium license is done at your own risk to the fullest\\n* extent permissible pursuant to applicable law any and all liability as well\\n* as all warranties, including any fitness for a particular purpose with respect\\n* to Tetu and/or the underlying software and the use thereof are disclaimed.\\n*/\\n\\npragma solidity 0.8.4;\\n\\ninterface IFeeRewardForwarder {\\n\\n  function LIQUIDITY_DENOMINATOR() external view returns (uint256);\\n\\n  function MINIMUM_AMOUNT() external view returns (uint256);\\n\\n  function SLIPPAGE_DENOMINATOR() external view returns (uint256);\\n\\n  function VERSION() external view returns (string memory);\\n\\n  function liquidityRouter() external view returns (address);\\n\\n  function liquidityNumerator() external view returns (uint);\\n\\n  function distribute(\\n    uint256 _amount,\\n    address _token,\\n    address _vault\\n  ) external returns (uint256);\\n\\n  function fund() external view returns (address);\\n\\n  function fundToken() external view returns (address);\\n\\n  function liquidate(\\n    address tokenIn,\\n    address tokenOut,\\n    uint256 amount\\n  ) external returns (uint256);\\n\\n  function notifyCustomPool(\\n    address,\\n    address,\\n    uint256\\n  ) external pure returns (uint256);\\n\\n  function notifyPsPool(address, uint256) external pure returns (uint256);\\n\\n  function slippageNumerator() external view returns (uint256);\\n\\n  function tetu() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@tetu_io/tetu-contracts/contracts/base/interfaces/ISmartVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\n/**\\n* By using this software, you understand, acknowledge and accept that Tetu\\n* and/or the underlying software are provided \u201cas is\u201d and \u201cas available\u201d\\n* basis and without warranties or representations of any kind either expressed\\n* or implied. Any use of this open source software released under the ISC\\n* Internet Systems Consortium license is done at your own risk to the fullest\\n* extent permissible pursuant to applicable law any and all liability as well\\n* as all warranties, including any fitness for a particular purpose with respect\\n* to Tetu and/or the underlying software and the use thereof are disclaimed.\\n*/\\n\\npragma solidity 0.8.4;\\n\\ninterface ISmartVault {\\n\\n  function DEPOSIT_FEE_DENOMINATOR() external view returns (uint256);\\n\\n  function LOCK_PENALTY_DENOMINATOR() external view returns (uint256);\\n\\n  function TO_INVEST_DENOMINATOR() external view returns (uint256);\\n\\n  function VERSION() external view returns (string memory);\\n\\n  function active() external view returns (bool);\\n\\n  function addRewardToken(address rt) external;\\n\\n  function alwaysInvest() external view returns (bool);\\n\\n  function availableToInvestOut() external view returns (uint256);\\n\\n  function changeActivityStatus(bool _active) external;\\n\\n  function changeAlwaysInvest(bool _active) external;\\n\\n  function changeDoHardWorkOnInvest(bool _active) external;\\n\\n  function changePpfsDecreaseAllowed(bool _value) external;\\n\\n  function changeProtectionMode(bool _active) external;\\n\\n  function deposit(uint256 amount) external;\\n\\n  function depositAndInvest(uint256 amount) external;\\n\\n  function depositFeeNumerator() external view returns (uint256);\\n\\n  function depositFor(uint256 amount, address holder) external;\\n\\n  function doHardWork() external;\\n\\n  function doHardWorkOnInvest() external view returns (bool);\\n\\n  function duration() external view returns (uint256);\\n\\n  function earned(address rt, address account)\\n  external\\n  view\\n  returns (uint256);\\n\\n  function earnedWithBoost(address rt, address account)\\n  external\\n  view\\n  returns (uint256);\\n\\n  function exit() external;\\n\\n  function getAllRewards() external;\\n\\n  function getAllRewardsAndRedirect(address owner) external;\\n\\n  function getPricePerFullShare() external view returns (uint256);\\n\\n  function getReward(address rt) external;\\n\\n  function getRewardTokenIndex(address rt) external view returns (uint256);\\n\\n  function initializeSmartVault(\\n    string memory _name,\\n    string memory _symbol,\\n    address _controller,\\n    address __underlying,\\n    uint256 _duration,\\n    bool _lockAllowed,\\n    address _rewardToken,\\n    uint256 _depositFee\\n  ) external;\\n\\n  function lastTimeRewardApplicable(address rt)\\n  external\\n  view\\n  returns (uint256);\\n\\n  function lastUpdateTimeForToken(address) external view returns (uint256);\\n\\n  function lockAllowed() external view returns (bool);\\n\\n  function lockPenalty() external view returns (uint256);\\n\\n  function notifyRewardWithoutPeriodChange(\\n    address _rewardToken,\\n    uint256 _amount\\n  ) external;\\n\\n  function notifyTargetRewardAmount(address _rewardToken, uint256 amount)\\n  external;\\n\\n  function overrideName(string memory value) external;\\n\\n  function overrideSymbol(string memory value) external;\\n\\n  function periodFinishForToken(address) external view returns (uint256);\\n\\n  function ppfsDecreaseAllowed() external view returns (bool);\\n\\n  function protectionMode() external view returns (bool);\\n\\n  function rebalance() external;\\n\\n  function removeRewardToken(address rt) external;\\n\\n  function rewardPerToken(address rt) external view returns (uint256);\\n\\n  function rewardPerTokenStoredForToken(address)\\n  external\\n  view\\n  returns (uint256);\\n\\n  function rewardRateForToken(address) external view returns (uint256);\\n\\n  function rewardTokens() external view returns (address[] memory);\\n\\n  function rewardTokensLength() external view returns (uint256);\\n\\n  function rewardsForToken(address, address) external view returns (uint256);\\n\\n  function setLockPenalty(uint256 _value) external;\\n\\n  function setRewardsRedirect(address owner, address receiver) external;\\n\\n  function setLockPeriod(uint256 _value) external;\\n\\n  function setStrategy(address newStrategy) external;\\n\\n  function setToInvest(uint256 _value) external;\\n\\n  function stop() external;\\n\\n  function strategy() external view returns (address);\\n\\n  function toInvest() external view returns (uint256);\\n\\n  function underlying() external view returns (address);\\n\\n  function underlyingBalanceInVault() external view returns (uint256);\\n\\n  function underlyingBalanceWithInvestment() external view returns (uint256);\\n\\n  function underlyingBalanceWithInvestmentForHolder(address holder)\\n  external\\n  view\\n  returns (uint256);\\n\\n  function underlyingUnit() external view returns (uint256);\\n\\n  function userBoostTs(address) external view returns (uint256);\\n\\n  function userLastDepositTs(address) external view returns (uint256);\\n\\n  function userLastWithdrawTs(address) external view returns (uint256);\\n\\n  function userLockTs(address) external view returns (uint256);\\n\\n  function userRewardPerTokenPaidForToken(address, address)\\n  external\\n  view\\n  returns (uint256);\\n\\n  function withdraw(uint256 numberOfShares) external;\\n\\n  function withdrawAllToVault() external;\\n\\n  function getAllRewardsFor(address rewardsReceiver) external;\\n\\n  function lockPeriod() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@tetu_io/tetu-contracts/contracts/base/interfaces/IStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\n/**\\n* By using this software, you understand, acknowledge and accept that Tetu\\n* and/or the underlying software are provided \u201cas is\u201d and \u201cas available\u201d\\n* basis and without warranties or representations of any kind either expressed\\n* or implied. Any use of this open source software released under the ISC\\n* Internet Systems Consortium license is done at your own risk to the fullest\\n* extent permissible pursuant to applicable law any and all liability as well\\n* as all warranties, including any fitness for a particular purpose with respect\\n* to Tetu and/or the underlying software and the use thereof are disclaimed.\\n*/\\n\\npragma solidity 0.8.4;\\n\\ninterface IStrategy {\\n\\n  enum Platform {\\n    UNKNOWN, // 0\\n    TETU, // 1\\n    QUICK, // 2\\n    SUSHI, // 3\\n    WAULT, // 4\\n    IRON, // 5\\n    COSMIC, // 6\\n    CURVE, // 7\\n    DINO, // 8\\n    IRON_LEND, // 9\\n    HERMES, // 10\\n    CAFE, // 11\\n    TETU_SWAP, // 12\\n    SPOOKY, // 13\\n    AAVE_LEND, //14\\n    AAVE_MAI_BAL, // 15\\n    GEIST, //16\\n    HARVEST, //17\\n    SCREAM_LEND, //18\\n    KLIMA, //19\\n    VESQ, //20\\n    QIDAO, //21\\n    SUNFLOWER, //22\\n    NACHO, //23\\n    STRATEGY_SPLITTER, //24\\n    TOMB, //25\\n    TAROT, //26\\n    BEETHOVEN, //27\\n    IMPERMAX, //28\\n    TETU_SF, //29\\n    ALPACA, //30\\n    MARKET, //31\\n    UNIVERSE, //32\\n    MAI_BAL, //33\\n    UMA, //34\\n    SPHERE, //35\\n    BALANCER, //36\\n    OTTERCLAM, //37\\n    MESH, //38\\n    D_FORCE, //39\\n    DYSTOPIA, //40\\n    CONE, //41\\n    AURA, //42\\n    COMPOUND, //43\\n    ZEROVIX, //44\\n    CONVEX, //45\\n    TANGIBLE, //46\\n    SLOT_47, //47\\n    SLOT_48, //48\\n    SLOT_49, //49\\n    SLOT_50 //50\\n  }\\n\\n  // *************** GOVERNANCE ACTIONS **************\\n  function STRATEGY_NAME() external view returns (string memory);\\n\\n  function withdrawAllToVault() external;\\n\\n  function withdrawToVault(uint256 amount) external;\\n\\n  function salvage(address recipient, address token, uint256 amount) external;\\n\\n  function doHardWork() external;\\n\\n  function investAllUnderlying() external;\\n\\n  function emergencyExit() external;\\n\\n  function pauseInvesting() external;\\n\\n  function continueInvesting() external;\\n\\n  // **************** VIEWS ***************\\n  function rewardTokens() external view returns (address[] memory);\\n\\n  function underlying() external view returns (address);\\n\\n  function underlyingBalance() external view returns (uint256);\\n\\n  function rewardPoolBalance() external view returns (uint256);\\n\\n  function buyBackRatio() external view returns (uint256);\\n\\n  function unsalvageableTokens(address token) external view returns (bool);\\n\\n  function vault() external view returns (address);\\n\\n  function investedUnderlyingBalance() external view returns (uint256);\\n\\n  function platform() external view returns (Platform);\\n\\n  function assets() external view returns (address[] memory);\\n\\n  function pausedInvesting() external view returns (bool);\\n\\n  function readyToClaim() external view returns (uint256[] memory);\\n\\n  function poolTotalAmount() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@tetu_io/tetu-contracts/contracts/base/strategies/ProxyStrategyBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\n/**\\n* By using this software, you understand, acknowledge and accept that Tetu\\n* and/or the underlying software are provided \u201cas is\u201d and \u201cas available\u201d\\n* basis and without warranties or representations of any kind either expressed\\n* or implied. Any use of this open source software released under the ISC\\n* Internet Systems Consortium license is done at your own risk to the fullest\\n* extent permissible pursuant to applicable law any and all liability as well\\n* as all warranties, including any fitness for a particular purpose with respect\\n* to Tetu and/or the underlying software and the use thereof are disclaimed.\\n*/\\npragma solidity 0.8.4;\\n\\n\\nimport \\\"../../openzeppelin/Math.sol\\\";\\nimport \\\"../../openzeppelin/SafeERC20.sol\\\";\\nimport \\\"./StrategyStorage.sol\\\";\\nimport \\\"../governance/ControllableV2.sol\\\";\\nimport \\\"../interfaces/IStrategy.sol\\\";\\nimport \\\"../interfaces/IFeeRewardForwarder.sol\\\";\\nimport \\\"../interfaces/IBookkeeper.sol\\\";\\nimport \\\"../interfaces/ISmartVault.sol\\\";\\nimport \\\"../../third_party/uniswap/IUniswapV2Pair.sol\\\";\\nimport \\\"../../third_party/uniswap/IUniswapV2Router02.sol\\\";\\n\\n/// @title Abstract contract for base strategy functionality\\n///        Implementation must support proxy\\n/// @author belbix\\nabstract contract ProxyStrategyBase is IStrategy, ControllableV2, StrategyStorage {\\n  using SafeERC20 for IERC20;\\n\\n  uint internal constant _BUY_BACK_DENOMINATOR = 100_00;\\n  uint internal constant _TOLERANCE_DENOMINATOR = 1000;\\n\\n  //************************ MODIFIERS **************************\\n\\n  /// @dev Only for linked Vault or Governance/Controller.\\n  ///      Use for functions that should have strict access.\\n  modifier restricted() {\\n    require(msg.sender == _vault()\\n    || msg.sender == address(_controller())\\n      || IController(_controller()).governance() == msg.sender,\\n      \\\"SB: Not Gov or Vault\\\");\\n    _;\\n  }\\n\\n  /// @dev Extended strict access with including HardWorkers addresses\\n  ///      Use for functions that should be called by HardWorkers\\n  modifier hardWorkers() {\\n    require(msg.sender == _vault()\\n    || msg.sender == address(_controller())\\n    || IController(_controller()).isHardWorker(msg.sender)\\n      || IController(_controller()).governance() == msg.sender,\\n      \\\"SB: Not HW or Gov or Vault\\\");\\n    _;\\n  }\\n\\n  /// @dev Allow operation only for Controller\\n  modifier onlyController() {\\n    require(_controller() == msg.sender, \\\"SB: Not controller\\\");\\n    _;\\n  }\\n\\n  /// @dev This is only used in `investAllUnderlying()`\\n  ///      The user can still freely withdraw from the strategy\\n  modifier onlyNotPausedInvesting() {\\n    require(!_onPause(), \\\"SB: Paused\\\");\\n    _;\\n  }\\n\\n  /// @notice Initialize contract after setup it as proxy implementation\\n  /// @param _controller Controller address\\n  /// @param _underlying Underlying token address\\n  /// @param _vault SmartVault address that will provide liquidity\\n  /// @param __rewardTokens Reward tokens that the strategy will farm\\n  /// @param _bbRatio Buy back ratio\\n  function initializeStrategyBase(\\n    address _controller,\\n    address _underlying,\\n    address _vault,\\n    address[] memory __rewardTokens,\\n    uint _bbRatio\\n  ) public initializer {\\n    ControllableV2.initializeControllable(_controller);\\n    require(ISmartVault(_vault).underlying() == _underlying, \\\"SB: Wrong underlying\\\");\\n    require(IControllable(_vault).isController(_controller), \\\"SB: Wrong controller\\\");\\n    _setUnderlying(_underlying);\\n    _setVault(_vault);\\n    require(_bbRatio <= _BUY_BACK_DENOMINATOR, \\\"SB: Too high buyback ratio\\\");\\n    _setBuyBackRatio(_bbRatio);\\n\\n    // prohibit the movement of tokens that are used in the main logic\\n    for (uint i = 0; i < __rewardTokens.length; i++) {\\n      _rewardTokens.push(__rewardTokens[i]);\\n      _unsalvageableTokens[__rewardTokens[i]] = true;\\n    }\\n    _unsalvageableTokens[_underlying] = true;\\n    _setToleranceNumerator(999);\\n  }\\n\\n  // *************** VIEWS ****************\\n\\n  /// @notice Reward tokens of external project\\n  /// @return Reward tokens array\\n  function rewardTokens() external view override returns (address[] memory) {\\n    return _rewardTokens;\\n  }\\n\\n  /// @notice Strategy underlying, the same in the Vault\\n  /// @return Strategy underlying token\\n  function underlying() external view override returns (address) {\\n    return _underlying();\\n  }\\n\\n  /// @notice Underlying balance of this contract\\n  /// @return Balance of underlying token\\n  function underlyingBalance() external view override returns (uint) {\\n    return IERC20(_underlying()).balanceOf(address(this));\\n  }\\n\\n  /// @notice SmartVault address linked to this strategy\\n  /// @return Vault address\\n  function vault() external view override returns (address) {\\n    return _vault();\\n  }\\n\\n  /// @notice Return true for tokens that governance can't touch\\n  /// @return True if given token unsalvageable\\n  function unsalvageableTokens(address token) external override view returns (bool) {\\n    return _unsalvageableTokens[token];\\n  }\\n\\n  /// @notice Strategy buy back ratio\\n  /// @return Buy back ratio\\n  function buyBackRatio() external view override returns (uint) {\\n    return _buyBackRatio();\\n  }\\n\\n  /// @notice Return underlying balance + balance in the reward pool\\n  /// @return Sum of underlying balances\\n  function investedUnderlyingBalance() external override virtual view returns (uint) {\\n    // Adding the amount locked in the reward pool and the amount that is somehow in this contract\\n    // both are in the units of \\\"underlying\\\"\\n    // The second part is needed because there is the emergency exit mechanism\\n    // which would break the assumption that all the funds are always inside of the reward pool\\n    return _rewardPoolBalance() + IERC20(_underlying()).balanceOf(address(this));\\n  }\\n\\n  function rewardPoolBalance() external override view returns (uint) {\\n    return _rewardPoolBalance();\\n  }\\n\\n  /// @dev When this flag is true, the strategy will not be able to invest. But users should be able to withdraw.\\n  function pausedInvesting() external override view returns (bool) {\\n    return _onPause();\\n  }\\n\\n  //******************** GOVERNANCE *******************\\n\\n\\n  /// @notice In case there are some issues discovered about the pool or underlying asset\\n  ///         Governance can exit the pool properly\\n  ///         The function is only used for emergency to exit the pool\\n  ///         Pause investing\\n  function emergencyExit() external override hardWorkers {\\n    emergencyExitRewardPool();\\n    _setOnPause(true);\\n  }\\n\\n  /// @notice Pause investing into the underlying reward pools\\n  function pauseInvesting() external override hardWorkers {\\n    _setOnPause(true);\\n  }\\n\\n  /// @notice Resumes the ability to invest into the underlying reward pools\\n  function continueInvesting() external override restricted {\\n    _setOnPause(false);\\n  }\\n\\n  /// @notice Controller can claim coins that are somehow transferred into the contract\\n  ///         Note that they cannot come in take away coins that are used and defined in the strategy itself\\n  /// @param recipient Recipient address\\n  /// @param recipient Token address\\n  /// @param recipient Token amount\\n  function salvage(address recipient, address token, uint amount)\\n  external override onlyController {\\n    // To make sure that governance cannot come in and take away the coins\\n    require(!_unsalvageableTokens[token], \\\"SB: Not salvageable\\\");\\n    IERC20(token).safeTransfer(recipient, amount);\\n  }\\n\\n  /// @notice Withdraws all the asset to the vault\\n  function withdrawAllToVault() external override hardWorkers {\\n    exitRewardPool();\\n    IERC20(_underlying()).safeTransfer(_vault(), IERC20(_underlying()).balanceOf(address(this)));\\n  }\\n\\n  /// @notice Withdraws some asset to the vault\\n  /// @param amount Asset amount\\n  function withdrawToVault(uint amount) external override hardWorkers {\\n    // Typically there wouldn't be any amount here\\n    // however, it is possible because of the emergencyExit\\n    uint uBalance = IERC20(_underlying()).balanceOf(address(this));\\n    if (amount > uBalance) {\\n      // While we have the check above, we still using SafeMath below\\n      // for the peace of mind (in case something gets changed in between)\\n      uint needToWithdraw = amount - uBalance;\\n      uint toWithdraw = Math.min(_rewardPoolBalance(), needToWithdraw);\\n      withdrawAndClaimFromPool(toWithdraw);\\n    }\\n    uBalance = IERC20(_underlying()).balanceOf(address(this));\\n    uint amountAdjusted = Math.min(amount, uBalance);\\n    require(amountAdjusted > amount * toleranceNumerator() / _TOLERANCE_DENOMINATOR, \\\"SB: Withdrew too low\\\");\\n    IERC20(_underlying()).safeTransfer(_vault(), amountAdjusted);\\n  }\\n\\n  /// @notice Stakes everything the strategy holds into the reward pool\\n  function investAllUnderlying() external override hardWorkers onlyNotPausedInvesting {\\n    _investAllUnderlying();\\n  }\\n\\n  /// @dev Set withdraw loss tolerance numerator\\n  function setToleranceNumerator(uint numerator) external restricted {\\n    require(numerator <= _TOLERANCE_DENOMINATOR, \\\"SB: Too high\\\");\\n    _setToleranceNumerator(numerator);\\n  }\\n\\n  function setBuyBackRatio(uint value) external restricted {\\n    require(value <= _BUY_BACK_DENOMINATOR, \\\"SB: Too high buyback ratio\\\");\\n    _setBuyBackRatio(value);\\n  }\\n\\n  // ***************** INTERNAL ************************\\n\\n  /// @notice Balance of given reward token on this contract\\n  function _rewardBalance(uint rewardTokenIdx) internal view returns (uint) {\\n    return IERC20(_rewardTokens[rewardTokenIdx]).balanceOf(address(this));\\n  }\\n\\n  /// @dev Tolerance to difference between asked and received values on user withdraw action\\n  ///      Where 0 is full tolerance, and range of 1-999 means how many % of tokens do you expect as minimum\\n  function toleranceNumerator() internal view virtual returns (uint){\\n    return _toleranceNumerator();\\n  }\\n\\n  /// @notice Stakes everything the strategy holds into the reward pool\\n  function _investAllUnderlying() internal {\\n    // this check is needed, because most of the SNX reward pools will revert if\\n    // you try to stake(0).\\n    uint uBalance = IERC20(_underlying()).balanceOf(address(this));\\n    if (uBalance > 0) {\\n      depositToPool(uBalance);\\n    }\\n  }\\n\\n  /// @dev Withdraw everything from external pool\\n  function exitRewardPool() internal virtual {\\n    uint bal = _rewardPoolBalance();\\n    if (bal != 0) {\\n      withdrawAndClaimFromPool(bal);\\n    }\\n  }\\n\\n  /// @dev Withdraw everything from external pool without caring about rewards\\n  function emergencyExitRewardPool() internal {\\n    uint bal = _rewardPoolBalance();\\n    if (bal != 0) {\\n      emergencyWithdrawFromPool();\\n    }\\n  }\\n\\n  /// @dev Default implementation of liquidation process\\n  ///      Send all profit to FeeRewardForwarder\\n  function liquidateRewardDefault() internal {\\n    _liquidateReward(true);\\n  }\\n\\n  function liquidateRewardSilently() internal {\\n    _liquidateReward(false);\\n  }\\n\\n  function _liquidateReward(bool revertOnErrors) internal {\\n    address forwarder = IController(_controller()).feeRewardForwarder();\\n    uint targetTokenEarnedTotal = 0;\\n    for (uint i = 0; i < _rewardTokens.length; i++) {\\n      address rt = _rewardTokens[i];\\n      uint amount = IERC20(rt).balanceOf(address(this));\\n      if (amount != 0) {\\n        IERC20(rt).safeApprove(forwarder, 0);\\n        IERC20(rt).safeApprove(forwarder, amount);\\n        // it will sell reward token to Target Token and distribute it to SmartVault and PS\\n        uint targetTokenEarned = 0;\\n        if (revertOnErrors) {\\n          targetTokenEarned = IFeeRewardForwarder(forwarder).distribute(amount, rt, _vault());\\n        } else {\\n          //slither-disable-next-line unused-return,variable-scope,uninitialized-local\\n          try IFeeRewardForwarder(forwarder).distribute(amount, rt, _vault()) returns (uint r) {\\n            targetTokenEarned = r;\\n          } catch {}\\n        }\\n        targetTokenEarnedTotal += targetTokenEarned;\\n      }\\n    }\\n    if (targetTokenEarnedTotal > 0) {\\n      IBookkeeper(IController(_controller()).bookkeeper()).registerStrategyEarned(targetTokenEarnedTotal);\\n    }\\n  }\\n\\n  /// @dev Liquidate rewards and buy underlying asset\\n  function autocompound() internal {\\n    address forwarder = IController(_controller()).feeRewardForwarder();\\n    for (uint i = 0; i < _rewardTokens.length; i++) {\\n      address rt = _rewardTokens[i];\\n      uint amount = IERC20(rt).balanceOf(address(this));\\n      if (amount != 0) {\\n        uint toCompound = amount * (_BUY_BACK_DENOMINATOR - _buyBackRatio()) / _BUY_BACK_DENOMINATOR;\\n        IERC20(rt).safeApprove(forwarder, 0);\\n        IERC20(rt).safeApprove(forwarder, toCompound);\\n        IFeeRewardForwarder(forwarder).liquidate(rt, _underlying(), toCompound);\\n      }\\n    }\\n  }\\n\\n  /// @dev Default implementation of auto-compounding for swap pairs\\n  ///      Liquidate rewards, buy assets and add to liquidity pool\\n  function autocompoundLP(address _router) internal {\\n    address forwarder = IController(_controller()).feeRewardForwarder();\\n    for (uint i = 0; i < _rewardTokens.length; i++) {\\n      address rt = _rewardTokens[i];\\n      uint amount = IERC20(rt).balanceOf(address(this));\\n      if (amount != 0) {\\n        uint toCompound = amount * (_BUY_BACK_DENOMINATOR - _buyBackRatio()) / _BUY_BACK_DENOMINATOR;\\n        IERC20(rt).safeApprove(forwarder, 0);\\n        IERC20(rt).safeApprove(forwarder, toCompound);\\n\\n        IUniswapV2Pair pair = IUniswapV2Pair(_underlying());\\n        if (rt != pair.token0()) {\\n          uint token0Amount = IFeeRewardForwarder(forwarder).liquidate(rt, pair.token0(), toCompound / 2);\\n          require(token0Amount != 0, \\\"SB: Token0 zero amount\\\");\\n        }\\n        if (rt != pair.token1()) {\\n          uint token1Amount = IFeeRewardForwarder(forwarder).liquidate(rt, pair.token1(), toCompound / 2);\\n          require(token1Amount != 0, \\\"SB: Token1 zero amount\\\");\\n        }\\n        addLiquidity(_underlying(), _router);\\n      }\\n    }\\n  }\\n\\n  /// @dev Add all available tokens to given pair\\n  function addLiquidity(address _pair, address _router) internal {\\n    IUniswapV2Router02 router = IUniswapV2Router02(_router);\\n    IUniswapV2Pair pair = IUniswapV2Pair(_pair);\\n    address _token0 = pair.token0();\\n    address _token1 = pair.token1();\\n\\n    uint amount0 = IERC20(_token0).balanceOf(address(this));\\n    uint amount1 = IERC20(_token1).balanceOf(address(this));\\n\\n    IERC20(_token0).safeApprove(_router, 0);\\n    IERC20(_token0).safeApprove(_router, amount0);\\n    IERC20(_token1).safeApprove(_router, 0);\\n    IERC20(_token1).safeApprove(_router, amount1);\\n    //slither-disable-next-line unused-return\\n    router.addLiquidity(\\n      _token0,\\n      _token1,\\n      amount0,\\n      amount1,\\n      1,\\n      1,\\n      address(this),\\n      block.timestamp\\n    );\\n  }\\n\\n  //******************** VIRTUAL *********************\\n  // This functions should be implemented in the strategy contract\\n\\n  function _rewardPoolBalance() internal virtual view returns (uint);\\n\\n  //slither-disable-next-line dead-code\\n  function depositToPool(uint amount) internal virtual;\\n\\n  //slither-disable-next-line dead-code\\n  function withdrawAndClaimFromPool(uint amount) internal virtual;\\n\\n  //slither-disable-next-line dead-code\\n  function emergencyWithdrawFromPool() internal virtual;\\n\\n  //slither-disable-next-line dead-code\\n  function liquidateReward() internal virtual;\\n\\n}\\n\"\r\n    },\r\n    \"@tetu_io/tetu-contracts/contracts/base/strategies/StrategyStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\n/**\\n* By using this software, you understand, acknowledge and accept that Tetu\\n* and/or the underlying software are provided \u201cas is\u201d and \u201cas available\u201d\\n* basis and without warranties or representations of any kind either expressed\\n* or implied. Any use of this open source software released under the ISC\\n* Internet Systems Consortium license is done at your own risk to the fullest\\n* extent permissible pursuant to applicable law any and all liability as well\\n* as all warranties, including any fitness for a particular purpose with respect\\n* to Tetu and/or the underlying software and the use thereof are disclaimed.\\n*/\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"../../openzeppelin/Initializable.sol\\\";\\n\\n/// @title Eternal storage + getters and setters pattern\\n/// @dev If you will change a key value it will require setup it again\\n/// @author belbix\\nabstract contract StrategyStorage is Initializable {\\n\\n  // don't change names or ordering!\\n  mapping(bytes32 => uint256) private uintStorage;\\n  mapping(bytes32 => address) private addressStorage;\\n  mapping(bytes32 => bool) private boolStorage;\\n\\n  //************************ VARIABLES **************************\\n  /// @dev Tokens that forbidden to transfer from strategy contract\\n  mapping(address => bool) internal _unsalvageableTokens;\\n  address[] internal _rewardTokens;\\n\\n  /// @notice Address changed the variable with `name`\\n  event UpdatedAddressSlot(string name, address oldValue, address newValue);\\n  /// @notice Value changed the variable with `name`\\n  event UpdatedUint256Slot(string name, uint256 oldValue, uint256 newValue);\\n  /// @notice Boolean value changed the variable with `name`\\n  event UpdatedBoolSlot(string name, bool oldValue, bool newValue);\\n\\n  // ******************* SETTERS AND GETTERS **********************\\n\\n  function _setUnderlying(address _address) internal {\\n    emit UpdatedAddressSlot(\\\"underlying\\\", _underlying(), _address);\\n    setAddress(\\\"underlying\\\", _address);\\n  }\\n\\n  function _underlying() internal view returns (address) {\\n    return getAddress(\\\"underlying\\\");\\n  }\\n\\n  function _setVault(address _address) internal {\\n    emit UpdatedAddressSlot(\\\"vault\\\", _vault(), _address);\\n    setAddress(\\\"vault\\\", _address);\\n  }\\n\\n  function _vault() internal view returns (address) {\\n    return getAddress(\\\"vault\\\");\\n  }\\n\\n  function _setBuyBackRatio(uint _value) internal {\\n    emit UpdatedUint256Slot(\\\"buyBackRatio\\\", _buyBackRatio(), _value);\\n    setUint256(\\\"buyBackRatio\\\", _value);\\n  }\\n\\n  /// @dev Buyback numerator - reflects but does not guarantee that this percent of the profit will go to distribution\\n  function _buyBackRatio() internal view returns (uint) {\\n    return getUint256(\\\"buyBackRatio\\\");\\n  }\\n\\n  function _setOnPause(bool _value) internal {\\n    emit UpdatedBoolSlot(\\\"onPause\\\", _onPause(), _value);\\n    setBoolean(\\\"onPause\\\", _value);\\n  }\\n\\n  /// @dev When this flag is true, the strategy will not be able to invest. But users should be able to withdraw.\\n  function _onPause() internal view returns (bool) {\\n    return getBoolean(\\\"onPause\\\");\\n  }\\n\\n  function _setToleranceNumerator(uint _value) internal {\\n    emit UpdatedUint256Slot(\\\"tolerance\\\", _toleranceNumerator(), _value);\\n    setUint256(\\\"tolerance\\\", _value);\\n  }\\n\\n  function _toleranceNumerator() internal view returns (uint) {\\n    return getUint256(\\\"tolerance\\\");\\n  }\\n\\n  // ******************** STORAGE INTERNAL FUNCTIONS ********************\\n\\n  function setAddress(string memory key, address _address) private {\\n    addressStorage[keccak256(abi.encodePacked(key))] = _address;\\n  }\\n\\n  function getAddress(string memory key) private view returns (address) {\\n    return addressStorage[keccak256(abi.encodePacked(key))];\\n  }\\n\\n  function setUint256(string memory key, uint256 _value) private {\\n    uintStorage[keccak256(abi.encodePacked(key))] = _value;\\n  }\\n\\n  function getUint256(string memory key) private view returns (uint256) {\\n    return uintStorage[keccak256(abi.encodePacked(key))];\\n  }\\n\\n  function setBoolean(string memory key, bool _value) private {\\n    boolStorage[keccak256(abi.encodePacked(key))] = _value;\\n  }\\n\\n  function getBoolean(string memory key) private view returns (bool) {\\n    return boolStorage[keccak256(abi.encodePacked(key))];\\n  }\\n\\n  //slither-disable-next-line unused-state\\n  uint256[50] private ______gap;\\n}\\n\"\r\n    },\r\n    \"@tetu_io/tetu-contracts/contracts/openzeppelin/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n  /**\\n   * @dev Returns true if `account` is a contract.\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * It is unsafe to assume that an address for which this function returns\\n   * false is an externally-owned account (EOA) and not a contract.\\n   *\\n   * Among others, `isContract` will return false for the following\\n   * types of addresses:\\n   *\\n   *  - an externally-owned account\\n   *  - a contract in construction\\n   *  - an address where a contract will be created\\n   *  - an address where a contract lived, but was destroyed\\n   * ====\\n   */\\n  function isContract(address account) internal view returns (bool) {\\n    // This method relies on extcodesize, which returns 0 for contracts in\\n    // construction, since the code is only stored at the end of the\\n    // constructor execution.\\n\\n    uint256 size;\\n    assembly {\\n      size := extcodesize(account)\\n    }\\n    return size > 0;\\n  }\\n\\n  /**\\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n   * `recipient`, forwarding all available gas and reverting on errors.\\n   *\\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n   * imposed by `transfer`, making them unable to receive funds via\\n   * `transfer`. {sendValue} removes this limitation.\\n   *\\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n   *\\n   * IMPORTANT: because control is transferred to `recipient`, care must be\\n   * taken to not create reentrancy vulnerabilities. Consider using\\n   * {ReentrancyGuard} or the\\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n   */\\n  function sendValue(address payable recipient, uint256 amount) internal {\\n    require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n    (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n    require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n  }\\n\\n  /**\\n   * @dev Performs a Solidity function call using a low level `call`. A\\n   * plain `call` is an unsafe replacement for a function call: use this\\n   * function instead.\\n   *\\n   * If `target` reverts with a revert reason, it is bubbled up by this\\n   * function (like regular Solidity function calls).\\n   *\\n   * Returns the raw returned data. To convert to the expected return value,\\n   * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n   *\\n   * Requirements:\\n   *\\n   * - `target` must be a contract.\\n   * - calling `target` with `data` must not revert.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n    return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n   * `errorMessage` as a fallback revert reason when `target` reverts.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, 0, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but also transferring `value` wei to `target`.\\n   *\\n   * Requirements:\\n   *\\n   * - the calling contract must have an ETH balance of at least `value`.\\n   * - the called Solidity function must be `payable`.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value\\n  ) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n   * with `errorMessage` as a fallback revert reason when `target` reverts.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n    require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n    (bool success, bytes memory returndata) = target.call{value: value}(data);\\n    return verifyCallResult(success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but performing a static call.\\n   *\\n   * _Available since v3.3._\\n   */\\n  function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n    return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n   * but performing a static call.\\n   *\\n   * _Available since v3.3._\\n   */\\n  function functionStaticCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal view returns (bytes memory) {\\n    require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n    (bool success, bytes memory returndata) = target.staticcall(data);\\n    return verifyCallResult(success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but performing a delegate call.\\n   *\\n   * _Available since v3.4._\\n   */\\n  function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n    return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n   * but performing a delegate call.\\n   *\\n   * _Available since v3.4._\\n   */\\n  function functionDelegateCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n    (bool success, bytes memory returndata) = target.delegatecall(data);\\n    return verifyCallResult(success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n   * revert reason using the provided one.\\n   *\\n   * _Available since v4.3._\\n   */\\n  function verifyCallResult(\\n    bool success,\\n    bytes memory returndata,\\n    string memory errorMessage\\n  ) internal pure returns (bytes memory) {\\n    if (success) {\\n      return returndata;\\n    } else {\\n      // Look for revert reason and bubble it up if present\\n      if (returndata.length > 0) {\\n        // The easiest way to bubble the revert reason is using memory via assembly\\n\\n        assembly {\\n          let returndata_size := mload(returndata)\\n          revert(add(32, returndata), returndata_size)\\n        }\\n      } else {\\n        revert(errorMessage);\\n      }\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"@tetu_io/tetu-contracts/contracts/openzeppelin/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@tetu_io/tetu-contracts/contracts/openzeppelin/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  bool private _initialized;\\n\\n  /**\\n   * @dev Indicates that the contract is in the process of being initialized.\\n   */\\n  bool private _initializing;\\n\\n  /**\\n   * @dev Modifier to protect an initializer function from being invoked twice.\\n   */\\n  modifier initializer() {\\n    require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n    bool isTopLevelCall = !_initializing;\\n    if (isTopLevelCall) {\\n      _initializing = true;\\n      _initialized = true;\\n    }\\n\\n    _;\\n\\n    if (isTopLevelCall) {\\n      _initializing = false;\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"@tetu_io/tetu-contracts/contracts/openzeppelin/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n  enum Rounding {\\n    Down, // Toward negative infinity\\n    Up, // Toward infinity\\n    Zero // Toward zero\\n  }\\n\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a * b;\\n  }\\n\\n  function div(\\n    uint256 a,\\n    uint256 b,\\n    bool roundUp\\n  ) internal pure returns (uint256) {\\n    return roundUp ? divUp(a, b) : divDown(a, b);\\n  }\\n\\n  function divDown(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a / b;\\n  }\\n\\n  function divUp(uint256 a, uint256 b) internal pure returns (uint256) {\\n    if (a == 0) {\\n      return 0;\\n    } else {\\n      return 1 + (a - 1) / b;\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the largest of two numbers.\\n     */\\n  function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a > b ? a : b;\\n  }\\n\\n  /**\\n   * @dev Returns the smallest of two numbers.\\n     */\\n  function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a < b ? a : b;\\n  }\\n\\n  /**\\n   * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n  function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // (a + b) / 2 can overflow.\\n    return (a & b) + (a ^ b) / 2;\\n  }\\n\\n  /**\\n   * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n  function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // (a + b - 1) / b can overflow on addition, so we distribute.\\n    return a == 0 ? 0 : (a - 1) / b + 1;\\n  }\\n\\n  /**\\n   * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n  function mulDiv(\\n    uint256 x,\\n    uint256 y,\\n    uint256 denominator\\n  ) internal pure returns (uint256 result) {\\n  unchecked {\\n    // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n    // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n    // variables such that product = prod1 * 2^256 + prod0.\\n    uint256 prod0; // Least significant 256 bits of the product\\n    uint256 prod1; // Most significant 256 bits of the product\\n    assembly {\\n      let mm := mulmod(x, y, not(0))\\n      prod0 := mul(x, y)\\n      prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n    }\\n\\n    // Handle non-overflow cases, 256 by 256 division.\\n    if (prod1 == 0) {\\n      return prod0 / denominator;\\n    }\\n\\n    // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n    require(denominator > prod1);\\n\\n    ///////////////////////////////////////////////\\n    // 512 by 256 division.\\n    ///////////////////////////////////////////////\\n\\n    // Make division exact by subtracting the remainder from [prod1 prod0].\\n    uint256 remainder;\\n    assembly {\\n    // Compute remainder using mulmod.\\n      remainder := mulmod(x, y, denominator)\\n\\n    // Subtract 256 bit number from 512 bit number.\\n      prod1 := sub(prod1, gt(remainder, prod0))\\n      prod0 := sub(prod0, remainder)\\n    }\\n\\n    // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n    // See https://cs.stackexchange.com/q/138556/92363.\\n\\n    // Does not overflow because the denominator cannot be zero at this stage in the function.\\n    uint256 twos = denominator & (~denominator + 1);\\n    assembly {\\n    // Divide denominator by twos.\\n      denominator := div(denominator, twos)\\n\\n    // Divide [prod1 prod0] by twos.\\n      prod0 := div(prod0, twos)\\n\\n    // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n      twos := add(div(sub(0, twos), twos), 1)\\n    }\\n\\n    // Shift in bits from prod1 into prod0.\\n    prod0 |= prod1 * twos;\\n\\n    // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n    // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n    // four bits. That is, denominator * inv = 1 mod 2^4.\\n    uint256 inverse = (3 * denominator) ^ 2;\\n\\n    // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n    // in modular arithmetic, doubling the correct bits in each step.\\n    inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n    inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n    inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n    inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n    inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n    inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n    // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n    // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n    // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n    // is no longer required.\\n    result = prod0 * inverse;\\n    return result;\\n  }\\n  }\\n\\n  /**\\n   * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n  function mulDiv(\\n    uint256 x,\\n    uint256 y,\\n    uint256 denominator,\\n    Rounding rounding\\n  ) internal pure returns (uint256) {\\n    uint256 result = mulDiv(x, y, denominator);\\n    if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n      result += 1;\\n    }\\n    return result;\\n  }\\n\\n  /**\\n   * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n  function sqrt(uint256 a) internal pure returns (uint256) {\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n    //\\n    // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n    // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n    //\\n    // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n    // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n    // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n    //\\n    // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n    uint256 result = 1 << (log2(a) >> 1);\\n\\n    // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n    // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n    // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n    // into the expected uint128 result.\\n  unchecked {\\n    result = (result + a / result) >> 1;\\n    result = (result + a / result) >> 1;\\n    result = (result + a / result) >> 1;\\n    result = (result + a / result) >> 1;\\n    result = (result + a / result) >> 1;\\n    result = (result + a / result) >> 1;\\n    result = (result + a / result) >> 1;\\n    return min(result, a / result);\\n  }\\n  }\\n\\n  /**\\n   * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n  function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n  unchecked {\\n    uint256 result = sqrt(a);\\n    return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n  }\\n  }\\n\\n  /**\\n   * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n  function log2(uint256 value) internal pure returns (uint256) {\\n    uint256 result = 0;\\n  unchecked {\\n    if (value >> 128 > 0) {\\n      value >>= 128;\\n      result += 128;\\n    }\\n    if (value >> 64 > 0) {\\n      value >>= 64;\\n      result += 64;\\n    }\\n    if (value >> 32 > 0) {\\n      value >>= 32;\\n      result += 32;\\n    }\\n    if (value >> 16 > 0) {\\n      value >>= 16;\\n      result += 16;\\n    }\\n    if (value >> 8 > 0) {\\n      value >>= 8;\\n      result += 8;\\n    }\\n    if (value >> 4 > 0) {\\n      value >>= 4;\\n      result += 4;\\n    }\\n    if (value >> 2 > 0) {\\n      value >>= 2;\\n      result += 2;\\n    }\\n    if (value >> 1 > 0) {\\n      result += 1;\\n    }\\n  }\\n    return result;\\n  }\\n\\n  /**\\n   * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n  function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n  unchecked {\\n    uint256 result = log2(value);\\n    return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n  }\\n  }\\n\\n  /**\\n   * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n  function log10(uint256 value) internal pure returns (uint256) {\\n    uint256 result = 0;\\n  unchecked {\\n    if (value >= 10**64) {\\n      value /= 10**64;\\n      result += 64;\\n    }\\n    if (value >= 10**32) {\\n      value /= 10**32;\\n      result += 32;\\n    }\\n    if (value >= 10**16) {\\n      value /= 10**16;\\n      result += 16;\\n    }\\n    if (value >= 10**8) {\\n      value /= 10**8;\\n      result += 8;\\n    }\\n    if (value >= 10**4) {\\n      value /= 10**4;\\n      result += 4;\\n    }\\n    if (value >= 10**2) {\\n      value /= 10**2;\\n      result += 2;\\n    }\\n    if (value >= 10**1) {\\n      result += 1;\\n    }\\n  }\\n    return result;\\n  }\\n\\n  /**\\n   * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n  function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n  unchecked {\\n    uint256 result = log10(value);\\n    return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n  }\\n  }\\n\\n  /**\\n   * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n  function log256(uint256 value) internal pure returns (uint256) {\\n    uint256 result = 0;\\n  unchecked {\\n    if (value >> 128 > 0) {\\n      value >>= 128;\\n      result += 16;\\n    }\\n    if (value >> 64 > 0) {\\n      value >>= 64;\\n      result += 8;\\n    }\\n    if (value >> 32 > 0) {\\n      value >>= 32;\\n      result += 4;\\n    }\\n    if (value >> 16 > 0) {\\n      value >>= 16;\\n      result += 2;\\n    }\\n    if (value >> 8 > 0) {\\n      result += 1;\\n    }\\n  }\\n    return result;\\n  }\\n\\n  /**\\n   * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n  function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n  unchecked {\\n    uint256 result = log256(value);\\n    return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n  }\\n  }\\n}\\n\"\r\n    },\r\n    \"@tetu_io/tetu-contracts/contracts/openzeppelin/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n  using Address for address;\\n\\n  function safeTransfer(\\n    IERC20 token,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n  }\\n\\n  function safeTransferFrom(\\n    IERC20 token,\\n    address from,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n  }\\n\\n  /**\\n   * @dev Deprecated. This function has issues similar to the ones found in\\n   * {IERC20-approve}, and its usage is discouraged.\\n   *\\n   * Whenever possible, use {safeIncreaseAllowance} and\\n   * {safeDecreaseAllowance} instead.\\n   */\\n  function safeApprove(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    // safeApprove should only be called when setting an initial allowance,\\n    // or when resetting it to zero. To increase and decrease it, use\\n    // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n    require(\\n      (value == 0) || (token.allowance(address(this), spender) == 0),\\n      \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n    );\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n  }\\n\\n  function safeIncreaseAllowance(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    uint256 newAllowance = token.allowance(address(this), spender) + value;\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n  }\\n\\n  function safeDecreaseAllowance(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n  unchecked {\\n    uint256 oldAllowance = token.allowance(address(this), spender);\\n    require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n    uint256 newAllowance = oldAllowance - value;\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n  }\\n  }\\n\\n  /**\\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n   * on the return value: the return value is optional (but if data is returned, it must not be false).\\n   * @param token The token targeted by the call.\\n   * @param data The call data (encoded using abi.encode or one of its variants).\\n   */\\n  function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n    // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n    // the target address contains contract code and also asserts for success in the low-level call.\\n\\n    bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n    if (returndata.length > 0) {\\n      // Return data is optional\\n      require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"@tetu_io/tetu-contracts/contracts/third_party/uniswap/IUniswapV2Pair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity 0.8.4;\\n\\ninterface IUniswapV2Pair {\\n  event Approval(address indexed owner, address indexed spender, uint value);\\n  event Transfer(address indexed from, address indexed to, uint value);\\n\\n  function name() external pure returns (string memory);\\n\\n  function symbol() external pure returns (string memory);\\n\\n  function decimals() external pure returns (uint8);\\n\\n  function totalSupply() external view returns (uint);\\n\\n  function balanceOf(address owner) external view returns (uint);\\n\\n  function allowance(address owner, address spender) external view returns (uint);\\n\\n  function approve(address spender, uint value) external returns (bool);\\n\\n  function transfer(address to, uint value) external returns (bool);\\n\\n  function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n  function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n  function nonces(address owner) external view returns (uint);\\n\\n  function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n  event Mint(address indexed sender, uint amount0, uint amount1);\\n  event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n  event Swap(\\n    address indexed sender,\\n    uint amount0In,\\n    uint amount1In,\\n    uint amount0Out,\\n    uint amount1Out,\\n    address indexed to\\n  );\\n  event Sync(uint112 reserve0, uint112 reserve1);\\n\\n  function MINIMUM_LIQUIDITY() external pure returns (uint);\\n\\n  function factory() external view returns (address);\\n\\n  function token0() external view returns (address);\\n\\n  function token1() external view returns (address);\\n\\n  function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n\\n  function price0CumulativeLast() external view returns (uint);\\n\\n  function price1CumulativeLast() external view returns (uint);\\n\\n  function kLast() external view returns (uint);\\n\\n  function mint(address to) external returns (uint liquidity);\\n\\n  function burn(address to) external returns (uint amount0, uint amount1);\\n\\n  function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n\\n  function skim(address to) external;\\n\\n  function sync() external;\\n\\n  function initialize(address, address) external;\\n}\\n\"\r\n    },\r\n    \"@tetu_io/tetu-contracts/contracts/third_party/uniswap/IUniswapV2Router02.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.4;\\n\\ninterface IUniswapV2Router02 {\\n  function factory() external view returns (address);\\n\\n  function WETH() external view returns (address);\\n\\n  function addLiquidity(\\n    address tokenA,\\n    address tokenB,\\n    uint amountADesired,\\n    uint amountBDesired,\\n    uint amountAMin,\\n    uint amountBMin,\\n    address to,\\n    uint deadline\\n  ) external returns (uint amountA, uint amountB, uint liquidity);\\n\\n  function addLiquidityETH(\\n    address token,\\n    uint amountTokenDesired,\\n    uint amountTokenMin,\\n    uint amountETHMin,\\n    address to,\\n    uint deadline\\n  ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n\\n  function removeLiquidity(\\n    address tokenA,\\n    address tokenB,\\n    uint liquidity,\\n    uint amountAMin,\\n    uint amountBMin,\\n    address to,\\n    uint deadline\\n  ) external returns (uint amountA, uint amountB);\\n\\n  function removeLiquidityETH(\\n    address token,\\n    uint liquidity,\\n    uint amountTokenMin,\\n    uint amountETHMin,\\n    address to,\\n    uint deadline\\n  ) external returns (uint amountToken, uint amountETH);\\n\\n  function removeLiquidityWithPermit(\\n    address tokenA,\\n    address tokenB,\\n    uint liquidity,\\n    uint amountAMin,\\n    uint amountBMin,\\n    address to,\\n    uint deadline,\\n    bool approveMax, uint8 v, bytes32 r, bytes32 s\\n  ) external returns (uint amountA, uint amountB);\\n\\n  function removeLiquidityETHWithPermit(\\n    address token,\\n    uint liquidity,\\n    uint amountTokenMin,\\n    uint amountETHMin,\\n    address to,\\n    uint deadline,\\n    bool approveMax, uint8 v, bytes32 r, bytes32 s\\n  ) external returns (uint amountToken, uint amountETH);\\n\\n  function swapExactTokensForTokens(\\n    uint amountIn,\\n    uint amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  ) external returns (uint[] memory amounts);\\n\\n  function swapTokensForExactTokens(\\n    uint amountOut,\\n    uint amountInMax,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  ) external returns (uint[] memory amounts);\\n\\n  function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n  external\\n  payable\\n  returns (uint[] memory amounts);\\n\\n  function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n  external\\n  returns (uint[] memory amounts);\\n\\n  function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n  external\\n  returns (uint[] memory amounts);\\n\\n  function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n  external\\n  payable\\n  returns (uint[] memory amounts);\\n\\n  function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n\\n  function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n\\n  function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n\\n  function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n\\n  function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n\\n  function removeLiquidityETHSupportingFeeOnTransferTokens(\\n    address token,\\n    uint liquidity,\\n    uint amountTokenMin,\\n    uint amountETHMin,\\n    address to,\\n    uint deadline\\n  ) external returns (uint amountETH);\\n\\n  function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n    address token,\\n    uint liquidity,\\n    uint amountTokenMin,\\n    uint amountETHMin,\\n    address to,\\n    uint deadline,\\n    bool approveMax, uint8 v, bytes32 r, bytes32 s\\n  ) external returns (uint amountETH);\\n\\n  function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n    uint amountIn,\\n    uint amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  ) external;\\n\\n  function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n    uint amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  ) external payable;\\n\\n  function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n    uint amountIn,\\n    uint amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/impl/balancer/StrategyBalancerBoostBPT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\n/**\\n* By using this software, you understand, acknowledge and accept that Tetu\\n* and/or the underlying software are provided \u201cas is\u201d and \u201cas available\u201d\\n* basis and without warranties or representations of any kind either expressed\\n* or implied. Any use of this open source software released under the ISC\\n* Internet Systems Consortium license is done at your own risk to the fullest\\n* extent permissible pursuant to applicable law any and all liability as well\\n* as all warranties, including any fitness for a particular purpose with respect\\n* to Tetu and/or the underlying software and the use thereof are disclaimed.\\n*/\\npragma solidity 0.8.4;\\n\\nimport \\\"../../strategies/balancer/BalancerBoostBPTStrategyBase.sol\\\";\\n\\ncontract StrategyBalancerBoostBPT is BalancerBoostBPTStrategyBase {\\n\\n  function initialize(\\n    address controller_,\\n    address vault_,\\n    bytes32 poolId_,\\n    address gauge_,\\n    uint _bbRatio,\\n    address depositToken_,\\n    bytes32 depositBPTPoolId_,\\n    address gaugeDepositor_\\n  ) external initializer {\\n    initializeStrategy(\\n      controller_,\\n      vault_,\\n      poolId_,\\n      gauge_,\\n      _bbRatio,\\n      depositToken_,\\n      depositBPTPoolId_,\\n      gaugeDepositor_\\n    );\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITetuLiquidator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\ninterface ITetuLiquidator {\\n\\n  struct PoolData {\\n    address pool;\\n    address swapper;\\n    address tokenIn;\\n    address tokenOut;\\n  }\\n\\n  function getPrice(address tokenIn, address tokenOut, uint amount) external view returns (uint);\\n\\n  function getPriceForRoute(PoolData[] memory route, uint amount) external view returns (uint);\\n\\n  function isRouteExist(address tokenIn, address tokenOut) external view returns (bool);\\n\\n  function buildRoute(\\n    address tokenIn,\\n    address tokenOut\\n  ) external view returns (PoolData[] memory route, string memory errorMessage);\\n\\n  function liquidate(\\n    address tokenIn,\\n    address tokenOut,\\n    uint amount,\\n    uint priceImpactTolerance\\n  ) external;\\n\\n  function liquidateWithRoute(\\n    PoolData[] memory route,\\n    uint amount,\\n    uint priceImpactTolerance\\n  ) external;\\n\\n  function addLargestPools(PoolData[] memory _pools, bool rewrite) external;\\n\\n  function controller() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/strategies/balancer/BalancerBoostBPTStrategyBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\n/**\\n* By using this software, you understand, acknowledge and accept that Tetu\\n* and/or the underlying software are provided \u201cas is\u201d and \u201cas available\u201d\\n* basis and without warranties or representations of any kind either expressed\\n* or implied. Any use of this open source software released under the ISC\\n* Internet Systems Consortium license is done at your own risk to the fullest\\n* extent permissible pursuant to applicable law any and all liability as well\\n* as all warranties, including any fitness for a particular purpose with respect\\n* to Tetu and/or the underlying software and the use thereof are disclaimed.\\n*/\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"@tetu_io/tetu-contracts/contracts/base/strategies/ProxyStrategyBase.sol\\\";\\nimport \\\"../../third_party/balancer/IBalancerGauge.sol\\\";\\nimport \\\"../../third_party/balancer/IBVault.sol\\\";\\nimport \\\"../../third_party/balancer/IBalancerMinter.sol\\\";\\nimport \\\"../../interfaces/ITetuLiquidator.sol\\\";\\nimport \\\"./IGaugeDepositor.sol\\\";\\n\\n/// @title Base contract for farming Balancer pools of BPTs with staking boost by GaugeDepositor\\n/// @author a17\\nabstract contract BalancerBoostBPTStrategyBase is ProxyStrategyBase {\\n  using SafeERC20 for IERC20;\\n\\n  // *******************************************************\\n  //                      CONSTANTS\\n  // *******************************************************\\n\\n  /// @notice Strategy type for statistical purposes\\n  string public constant override STRATEGY_NAME = \\\"BalancerBoostBPTStrategyBase\\\";\\n  /// @notice Version of the contract\\n  /// @dev Should be incremented when contract changed\\n  string public constant VERSION = \\\"1.0.1\\\";\\n\\n  uint private constant PRICE_IMPACT_TOLERANCE = 10_000;\\n  IBVault public constant BALANCER_VAULT = IBVault(0xBA12222222228d8Ba445958a75a0704d566BF2C8);\\n  ITetuLiquidator public constant TETU_LIQUIDATOR = ITetuLiquidator(0xC737eaB847Ae6A92028862fE38b828db41314772);\\n  address public constant BAL_TOKEN = 0x9a71012B13CA4d3D0Cdc72A177DF3ef03b0E76A3;\\n  address internal constant DEFAULT_PERF_FEE_RECEIVER = 0x9Cc199D4353b5FB3e6C8EEBC99f5139e0d8eA06b;\\n  uint internal constant MAX_GAUGE_REWARDS = 8;\\n\\n  // *******************************************************\\n  //                      VARIABLES\\n  // *******************************************************\\n\\n  IAsset[] public poolTokens;\\n  uint public lastHw;\\n  IBalancerGauge public gauge;\\n  bytes32 public poolId;\\n  address public depositToken;\\n  bytes32 public depositBPTPoolId;\\n  IAsset[] public depositPoolTokens;\\n  address public gaugeDepositor;\\n\\n  /// @notice Initialize contract after setup it as proxy implementation\\n  function initializeStrategy(\\n    address controller_,\\n    address vault_,\\n    bytes32 poolId_,\\n    address gauge_,\\n    uint _bbRatio,\\n    address depositToken_,\\n    bytes32 depositBPTPoolId_,\\n    address gaugeDepositor_\\n  ) public initializer {\\n    poolId = poolId_;\\n    depositToken = depositToken_;\\n    gauge = IBalancerGauge(gauge_);\\n    depositBPTPoolId = depositBPTPoolId_;\\n    gaugeDepositor = gaugeDepositor_;\\n\\n    (IERC20[] memory tokens,,) = BALANCER_VAULT.getPoolTokens(poolId_);\\n    uint len = tokens.length;\\n    IAsset[] memory tokenAssets = new IAsset[](len);\\n    for (uint i; i < len; ++i) {\\n      tokenAssets[i] = IAsset(address(tokens[i]));\\n    }\\n    poolTokens = tokenAssets;\\n\\n    (tokens,,) = BALANCER_VAULT.getPoolTokens(depositBPTPoolId_);\\n    len = tokens.length;\\n    tokenAssets = new IAsset[](len);\\n    for (uint i; i < len; ++i) {\\n      tokenAssets[i] = IAsset(address(tokens[i]));\\n    }\\n    depositPoolTokens = tokenAssets;\\n\\n    IERC20(_getPoolAddress(poolId_)).safeApprove(gaugeDepositor, type(uint).max);\\n\\n    address[] memory rewardTokens_;\\n    {\\n      address[] memory rewardTokensTmp = new address[](MAX_GAUGE_REWARDS);\\n      uint rtsLength;\\n      for (uint i; i < MAX_GAUGE_REWARDS; ++i) {\\n        address rt = IBalancerGauge(gauge_).reward_tokens(i);\\n        if (rt == address(0)) {\\n          break;\\n        }\\n        rewardTokensTmp[i] = rt;\\n        rtsLength++;\\n      }\\n      rewardTokens_ = new address[](rtsLength + 1);\\n      for (uint i; i < rtsLength; ++i) {\\n        rewardTokens_[i] = rewardTokensTmp[i];\\n      }\\n      // BAL token is special, it's not registered inside gauge.reward_tokens, we claim it through pseudo-minter\\n      rewardTokens_[rtsLength] = BAL_TOKEN;\\n    }\\n\\n    ProxyStrategyBase.initializeStrategyBase(\\n      controller_,\\n      _getPoolAddress(poolId_),\\n      vault_,\\n      rewardTokens_,\\n      _bbRatio\\n    );\\n  }\\n\\n  // *******************************************************\\n  //                      GOV ACTIONS\\n  // *******************************************************\\n\\n  /// @dev Set new reward tokens\\n  function setRewardTokens(address[] memory rts) external restricted {\\n    delete _rewardTokens;\\n    uint len = rts.length;\\n    for (uint i; i < len; ++i) {\\n      _rewardTokens.push(rts[i]);\\n      _unsalvageableTokens[rts[i]] = true;\\n    }\\n  }\\n\\n  // *******************************************************\\n  //                      STRATEGY LOGIC\\n  // *******************************************************\\n\\n  /// @dev Balance of staked LPs in the gauge\\n  function _rewardPoolBalance() internal override view returns (uint256) {\\n    return IGaugeDepositor(gaugeDepositor).getBalance(address(this), address(gauge));\\n  }\\n\\n  /// @dev Rewards amount ready to claim\\n  function readyToClaim() external view override returns (uint256[] memory toClaim) {\\n    uint len = _rewardTokens.length;\\n    toClaim = new uint256[](len);\\n    for (uint i; i < len; ++i) {\\n      address rt = _rewardTokens[i];\\n      if (rt == BAL_TOKEN) {\\n        uint total = gauge.integrate_fraction(gaugeDepositor);\\n        uint minted = IBalancerMinter(gauge.bal_pseudo_minter()).minted(gaugeDepositor, address(gauge));\\n        toClaim[i] = total > minted ? total - minted : 0;\\n      } else {\\n        toClaim[i] = gauge.claimable_reward(gaugeDepositor, rt);\\n      }\\n    }\\n  }\\n\\n  /// @dev Return TVL of the farmable pool\\n  function poolTotalAmount() external view override returns (uint256) {\\n    return IERC20(_underlying()).balanceOf(address(gauge));\\n  }\\n\\n  /// @dev Platform name for statistical purposes\\n  /// @return Platform enum index\\n  function platform() external override pure returns (Platform) {\\n    return Platform.BALANCER;\\n  }\\n\\n  /// @dev assets should reflect underlying tokens need to investing\\n  function assets() external override view returns (address[] memory) {\\n    uint len = poolTokens.length;\\n    address[] memory token = new address[](len);\\n    for (uint i; i < len; ++i) {\\n      token[i] = address(poolTokens[i]);\\n    }\\n    return token;\\n  }\\n\\n  /// @dev Deposit LP tokens to gauge\\n  function depositToPool(uint256 amount) internal override {\\n    if (amount != 0) {\\n      IGaugeDepositor(gaugeDepositor).deposit(_underlying(), amount, address(gauge));\\n    }\\n  }\\n\\n  /// @dev Withdraw LP tokens from gauge\\n  function withdrawAndClaimFromPool(uint256 amount) internal override {\\n    if (amount != 0) {\\n      IGaugeDepositor(gaugeDepositor).withdraw(amount, address(gauge));\\n    }\\n    _doHardWork(true, false);\\n  }\\n\\n  /// @dev Emergency withdraw all from a gauge\\n  function emergencyWithdrawFromPool() internal override {\\n    IGaugeDepositor(gaugeDepositor).withdraw(gauge.balanceOf(gaugeDepositor), address(gauge));\\n  }\\n\\n  /// @dev Make something useful with rewards\\n  function doHardWork() external onlyNotPausedInvesting override hardWorkers {\\n    _doHardWork(false, true);\\n  }\\n\\n  function _doHardWork(bool silently, bool push) internal {\\n    _refreshRewardTokens();\\n    uint _lastHw = lastHw;\\n    if (push || _lastHw == 0 || block.timestamp - _lastHw > 12 hours) {\\n      IGaugeDepositor(gaugeDepositor).claimRewards(_rewardTokens, address(gauge));\\n      _liquidateRewards(silently);\\n      lastHw = block.timestamp;\\n    }\\n  }\\n\\n  function _refreshRewardTokens() internal {\\n    delete _rewardTokens;\\n\\n    for (uint i; i < MAX_GAUGE_REWARDS; ++i) {\\n      address rt = gauge.reward_tokens(i);\\n      if (rt == address(0)) {\\n        break;\\n      }\\n      _rewardTokens.push(rt);\\n      if (!_unsalvageableTokens[rt]) {\\n        _unsalvageableTokens[rt] = true;\\n      }\\n    }\\n\\n    // BAL token is special, it's not registered inside gauge.reward_tokens, we claim it through pseudo-minter\\n    _rewardTokens.push(BAL_TOKEN);\\n    if (!_unsalvageableTokens[BAL_TOKEN]) {\\n      _unsalvageableTokens[BAL_TOKEN] = true;\\n    }\\n  }\\n\\n  /// @dev Deprecated\\n  function liquidateReward() internal override {\\n    // noop\\n  }\\n\\n  function _liquidateRewards(bool silently) internal {\\n    address _depositToken = depositToken;\\n    uint bbRatio = _buyBackRatio();\\n    address[] memory rts = _rewardTokens;\\n    uint undBalanceBefore = IERC20(_underlying()).balanceOf(address(this));\\n    uint len = rts.length;\\n    for (uint i; i < len; ++i) {\\n      address rt = rts[i];\\n      uint amount = IERC20(rt).balanceOf(address(this));\\n      if (amount != 0) {\\n        uint toRewards = amount * (_BUY_BACK_DENOMINATOR - bbRatio) / _BUY_BACK_DENOMINATOR;\\n        uint toGov = amount - toRewards;\\n\\n        if (toGov != 0) {\\n          IERC20(rt).safeTransfer(DEFAULT_PERF_FEE_RECEIVER, toGov);\\n        }\\n\\n        if (toRewards != 0) {\\n          if (rt != _depositToken) {\\n            _liquidate(rt, _depositToken, toRewards, silently);\\n          }\\n        }\\n      }\\n    }\\n\\n    uint toBPT = IERC20(_depositToken).balanceOf(address(this));\\n    if (toBPT != 0) {\\n      bytes32 _depositBPTPoolId = depositBPTPoolId;\\n      _balancerJoin(depositPoolTokens, _depositBPTPoolId, _depositToken, toBPT);\\n\\n      address depositBPT = _getPoolAddress(_depositBPTPoolId);\\n      uint toPool = IERC20(depositBPT).balanceOf(address(this));\\n      _balancerJoin(poolTokens, poolId, depositBPT, toPool);\\n    }\\n\\n    uint undBalance = IERC20(_underlying()).balanceOf(address(this)) - undBalanceBefore;\\n    if (undBalance != 0) {\\n      IGaugeDepositor(gaugeDepositor).deposit(_underlying(), undBalance, address(gauge));\\n    }\\n\\n    IBookkeeper(IController(_controller()).bookkeeper()).registerStrategyEarned(0);\\n  }\\n\\n  /// @dev Join to the given pool (exchange tokenIn to underlying BPT)\\n  function _balancerJoin(IAsset[] memory _poolTokens, bytes32 _poolId, address _tokenIn, uint _amountIn) internal {\\n    if (_amountIn != 0) {\\n      if (_poolHasPhantomBpt(_poolTokens, _poolId)) {\\n        // just swap for enter\\n        _balancerSwap(_poolId, _tokenIn, _getPoolAddress(_poolId), _amountIn);\\n      } else {\\n        uint len = _poolTokens.length;\\n        uint[] memory amounts = new uint[](len);\\n        for (uint i; i < len; ++i) {\\n          amounts[i] = address(_poolTokens[i]) == _tokenIn ? _amountIn : 0;\\n        }\\n        bytes memory userData = abi.encode(1, amounts, 1);\\n        IBVault.JoinPoolRequest memory request = IBVault.JoinPoolRequest({\\n          assets: _poolTokens,\\n          maxAmountsIn: amounts,\\n          userData: userData,\\n          fromInternalBalance: false\\n        });\\n        _approveIfNeeds(_tokenIn, _amountIn, address(BALANCER_VAULT));\\n        BALANCER_VAULT.joinPool(_poolId, address(this), address(this), request);\\n      }\\n    }\\n  }\\n\\n  function _poolHasPhantomBpt(IAsset[] memory _poolTokens, bytes32 _poolId) internal pure returns (bool) {\\n    address poolAdr = _getPoolAddress(_poolId);\\n    uint len = _poolTokens.length;\\n    for (uint i; i < len; ++i) {\\n      if (address(_poolTokens[i]) == poolAdr) {\\n        return true;\\n      }\\n    }\\n    return false;\\n  }\\n\\n  function _liquidate(address tokenIn, address tokenOut, uint amount, bool silently) internal {\\n    if (amount != 0) {\\n      _approveIfNeeds(tokenIn, amount, address(TETU_LIQUIDATOR));\\n      // don't revert on errors\\n      if (silently) {\\n        try TETU_LIQUIDATOR.liquidate(tokenIn, tokenOut, amount, PRICE_IMPACT_TOLERANCE) {} catch {}\\n      } else {\\n        TETU_LIQUIDATOR.liquidate(tokenIn, tokenOut, amount, PRICE_IMPACT_TOLERANCE);\\n      }\\n    }\\n  }\\n\\n  /// @dev Swap _tokenIn to _tokenOut using pool identified by _poolId\\n  function _balancerSwap(bytes32 _poolId, address _tokenIn, address _tokenOut, uint _amountIn) internal {\\n    if (_amountIn != 0) {\\n      IBVault.SingleSwap memory singleSwapData = IBVault.SingleSwap({\\n        poolId: _poolId,\\n        kind: IBVault.SwapKind.GIVEN_IN,\\n        assetIn: IAsset(_tokenIn),\\n        assetOut: IAsset(_tokenOut),\\n        amount: _amountIn,\\n        userData: \\\"\\\"\\n      });\\n\\n      IBVault.FundManagement memory fundManagementStruct = IBVault.FundManagement({\\n        sender: address(this),\\n        fromInternalBalance: false,\\n        recipient: payable(address(this)),\\n        toInternalBalance: false\\n      });\\n\\n      _approveIfNeeds(_tokenIn, _amountIn, address(BALANCER_VAULT));\\n      BALANCER_VAULT.swap(singleSwapData, fundManagementStruct, 1, block.timestamp);\\n    }\\n  }\\n\\n  function _approveIfNeeds(address token, uint amount, address spender) internal {\\n    if (IERC20(token).allowance(address(this), spender) < amount) {\\n      IERC20(token).safeApprove(spender, 0);\\n      IERC20(token).safeApprove(spender, type(uint).max);\\n    }\\n  }\\n\\n  /// @dev Returns the address of a Pool's contract.\\n  ///      Due to how Pool IDs are created, this is done with no storage accesses and costs little gas.\\n  function _getPoolAddress(bytes32 id) internal pure returns (address) {\\n    // 12 byte logical shift left to remove the nonce and specialization setting. We don't need to mask,\\n    // since the logical shift already sets the upper bits to zero.\\n    return address(uint160(uint(id) >> (12 * 8)));\\n  }\\n\\n  //slither-disable-next-line unused-state\\n  uint256[50 - 6] private ______gap;\\n}\\n\"\r\n    },\r\n    \"contracts/strategies/balancer/IGaugeDepositor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\n/**\\n* By using this software, you understand, acknowledge and accept that Tetu\\n* and/or the underlying software are provided \u201cas is\u201d and \u201cas available\u201d\\n* basis and without warranties or representations of any kind either expressed\\n* or implied. Any use of this open source software released under the ISC\\n* Internet Systems Consortium license is done at your own risk to the fullest\\n* extent permissible pursuant to applicable law any and all liability as well\\n* as all warranties, including any fitness for a particular purpose with respect\\n* to Tetu and/or the underlying software and the use thereof are disclaimed.\\n*/\\n\\npragma solidity 0.8.4;\\n\\ninterface IGaugeDepositor {\\n\\n    function deposit(address token, uint amount, address gauge) external;\\n\\n    function withdraw(uint amount, address gauge) external;\\n\\n    function claimRewards(address[] memory tokens, address gauge) external;\\n\\n    function getBalance(address user, address gauge) external view returns (uint);\\n\\n}\\n\"\r\n    },\r\n    \"contracts/third_party/balancer/IBalancerGauge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\n/// @notice gauge-v2, see 0xc9b36096f5201ea332Db35d6D195774ea0D5988f\\n/// @dev see 20230316-child-chain-gauge-factory-v2 in balancer-deployments repository\\ninterface IBalancerGauge {\\n  event Approval(\\n    address indexed _owner,\\n    address indexed _spender,\\n    uint256 _value\\n  );\\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\\n  event Deposit(address indexed _user, uint256 _value);\\n  event Withdraw(address indexed _user, uint256 _value);\\n  event UpdateLiquidityLimit(\\n    address indexed _user,\\n    uint256 _original_balance,\\n    uint256 _original_supply,\\n    uint256 _working_balance,\\n    uint256 _working_supply\\n  );\\n\\n  function deposit(uint256 _value) external;\\n\\n  function deposit(uint256 _value, address _user) external;\\n\\n  function withdraw(uint256 _value) external;\\n\\n  function withdraw(uint256 _value, address _user) external;\\n\\n  function transferFrom(\\n    address _from,\\n    address _to,\\n    uint256 _value\\n  ) external returns (bool);\\n\\n  function approve(address _spender, uint256 _value) external returns (bool);\\n\\n  function permit(\\n    address _owner,\\n    address _spender,\\n    uint256 _value,\\n    uint256 _deadline,\\n    uint8 _v,\\n    bytes32 _r,\\n    bytes32 _s\\n  ) external returns (bool);\\n\\n  function transfer(address _to, uint256 _value) external returns (bool);\\n\\n  function increaseAllowance(address _spender, uint256 _added_value)\\n  external\\n  returns (bool);\\n\\n  function decreaseAllowance(address _spender, uint256 _subtracted_value)\\n  external\\n  returns (bool);\\n\\n  function user_checkpoint(address addr) external returns (bool);\\n\\n  function claimable_tokens(address addr) external returns (uint256);\\n\\n  function claimed_reward(address _addr, address _token)\\n  external\\n  view\\n  returns (uint256);\\n\\n  function claimable_reward(address _user, address _reward_token)\\n  external\\n  view\\n  returns (uint256);\\n\\n  function set_rewards_receiver(address _receiver) external;\\n\\n  function claim_rewards() external;\\n\\n  function claim_rewards(address _addr) external;\\n\\n  function claim_rewards(address _addr, address _receiver) external;\\n\\n  function claim_rewards(\\n    address _addr,\\n    address _receiver,\\n    uint256[] memory _reward_indexes\\n  ) external;\\n\\n  function add_reward(address _reward_token, address _distributor) external;\\n\\n  function set_reward_distributor(address _reward_token, address _distributor)\\n  external;\\n\\n  function deposit_reward_token(address _reward_token, uint256 _amount)\\n  external;\\n\\n  function killGauge() external;\\n\\n  function unkillGauge() external;\\n\\n  function decimals() external view returns (uint256);\\n\\n  function allowance(address owner, address spender)\\n  external\\n  view\\n  returns (uint256);\\n\\n  function integrate_checkpoint() external view returns (uint256);\\n\\n  function bal_token() external view returns (address);\\n\\n  function bal_pseudo_minter() external view returns (address);\\n\\n  function voting_escrow_delegation_proxy() external view returns (address);\\n\\n  function authorizer_adaptor() external view returns (address);\\n\\n  function initialize(address _lp_token, string memory _version) external;\\n\\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n  function nonces(address arg0) external view returns (uint256);\\n\\n  function name() external view returns (string memory);\\n\\n  function symbol() external view returns (string memory);\\n\\n  function balanceOf(address arg0) external view returns (uint256);\\n\\n  function totalSupply() external view returns (uint256);\\n\\n  function lp_token() external view returns (address);\\n\\n  function version() external view returns (string memory);\\n\\n  function factory() external view returns (address);\\n\\n  function working_balances(address arg0) external view returns (uint256);\\n\\n  function working_supply() external view returns (uint256);\\n\\n  function period() external view returns (uint256);\\n\\n  function period_timestamp(uint256 arg0) external view returns (uint256);\\n\\n  function integrate_checkpoint_of(address arg0)\\n  external\\n  view\\n  returns (uint256);\\n\\n  function integrate_fraction(address arg0) external view returns (uint256);\\n\\n  function integrate_inv_supply(uint256 arg0) external view returns (uint256);\\n\\n  function integrate_inv_supply_of(address arg0)\\n  external\\n  view\\n  returns (uint256);\\n\\n  function reward_count() external view returns (uint256);\\n\\n  function reward_tokens(uint256 arg0) external view returns (address);\\n\\n  function reward_data(address arg0) external view returns (S_0 memory);\\n\\n  function rewards_receiver(address arg0) external view returns (address);\\n\\n  function reward_integral_for(address arg0, address arg1)\\n  external\\n  view\\n  returns (uint256);\\n\\n  function is_killed() external view returns (bool);\\n\\n  function inflation_rate(uint256 arg0) external view returns (uint256);\\n}\\n\\n  struct S_0 {\\n    address distributor;\\n    uint256 period_finish;\\n    uint256 rate;\\n    uint256 last_update;\\n    uint256 integral;\\n  }\\n\"\r\n    },\r\n    \"contracts/third_party/balancer/IBalancerMinter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity 0.8.4;\\n\\ninterface IBalancerMinter {\\n  event Minted(address indexed recipient, address gauge, uint256 minted);\\n  event MinterApprovalSet(\\n    address indexed user,\\n    address indexed minter,\\n    bool approval\\n  );\\n\\n  function allowed_to_mint_for(address minter, address user)\\n  external\\n  view\\n  returns (bool);\\n\\n  function getBalancerToken() external view returns (address);\\n\\n  function getBalancerTokenAdmin() external view returns (address);\\n\\n  function getDomainSeparator() external view returns (bytes32);\\n\\n  function getGaugeController() external view returns (address);\\n\\n  function getMinterApproval(address minter, address user)\\n  external\\n  view\\n  returns (bool);\\n\\n  function getNextNonce(address user) external view returns (uint256);\\n\\n  function mint(address gauge) external returns (uint256);\\n\\n  function mintFor(address gauge, address user) external returns (uint256);\\n\\n  function mintMany(address[] memory gauges) external returns (uint256);\\n\\n  function mintManyFor(address[] memory gauges, address user)\\n  external\\n  returns (uint256);\\n\\n  function mint_for(address gauge, address user) external;\\n\\n  function mint_many(address[8] memory gauges) external;\\n\\n  function minted(address user, address gauge)\\n  external\\n  view\\n  returns (uint256);\\n\\n  function setMinterApproval(address minter, bool approval) external;\\n\\n  function setMinterApprovalWithSignature(\\n    address minter,\\n    bool approval,\\n    address user,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n\\n  function toggle_approve_mint(address minter) external;\\n}\\n\"\r\n    },\r\n    \"contracts/third_party/balancer/IBVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\npragma solidity 0.8.4;\\n\\nimport \\\"@tetu_io/tetu-contracts/contracts/openzeppelin/IERC20.sol\\\";\\n\\n\\ninterface IAsset {\\n}\\n\\ninterface IBVault {\\n  // Internal Balance\\n  //\\n  // Users can deposit tokens into the Vault, where they are allocated to their Internal Balance, and later\\n  // transferred or withdrawn. It can also be used as a source of tokens when joining Pools, as a destination\\n  // when exiting them, and as either when performing swaps. This usage of Internal Balance results in greatly reduced\\n  // gas costs when compared to relying on plain ERC20 transfers, leading to large savings for frequent users.\\n  //\\n  // Internal Balance management features batching, which means a single contract call can be used to perform multiple\\n  // operations of different kinds, with different senders and recipients, at once.\\n\\n  /**\\n   * @dev Returns `user`'s Internal Balance for a set of tokens.\\n     */\\n  function getInternalBalance(address user, IERC20[] calldata tokens) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Performs a set of user balance operations, which involve Internal Balance (deposit, withdraw or transfer)\\n     * and plain ERC20 transfers using the Vault's allowance. This last feature is particularly useful for relayers, as\\n     * it lets integrators reuse a user's Vault allowance.\\n     *\\n     * For each operation, if the caller is not `sender`, it must be an authorized relayer for them.\\n     */\\n  function manageUserBalance(UserBalanceOp[] calldata ops) external payable;\\n\\n  /**\\n   * @dev Data for `manageUserBalance` operations, which include the possibility for ETH to be sent and received\\n     without manual WETH wrapping or unwrapping.\\n     */\\n  struct UserBalanceOp {\\n    UserBalanceOpKind kind;\\n    IAsset asset;\\n    uint256 amount;\\n    address sender;\\n    address payable recipient;\\n  }\\n\\n  // There are four possible operations in `manageUserBalance`:\\n  //\\n  // - DEPOSIT_INTERNAL\\n  // Increases the Internal Balance of the `recipient` account by transferring tokens from the corresponding\\n  // `sender`. The sender must have allowed the Vault to use their tokens via `IERC20.approve()`.\\n  //\\n  // ETH can be used by passing the ETH sentinel value as the asset and forwarding ETH in the call: it will be wrapped\\n  // and deposited as WETH. Any ETH amount remaining will be sent back to the caller (not the sender, which is\\n  // relevant for relayers).\\n  //\\n  // Emits an `InternalBalanceChanged` event.\\n  //\\n  //\\n  // - WITHDRAW_INTERNAL\\n  // Decreases the Internal Balance of the `sender` account by transferring tokens to the `recipient`.\\n  //\\n  // ETH can be used by passing the ETH sentinel value as the asset. This will deduct WETH instead, unwrap it and send\\n  // it to the recipient as ETH.\\n  //\\n  // Emits an `InternalBalanceChanged` event.\\n  //\\n  //\\n  // - TRANSFER_INTERNAL\\n  // Transfers tokens from the Internal Balance of the `sender` account to the Internal Balance of `recipient`.\\n  //\\n  // Reverts if the ETH sentinel value is passed.\\n  //\\n  // Emits an `InternalBalanceChanged` event.\\n  //\\n  //\\n  // - TRANSFER_EXTERNAL\\n  // Transfers tokens from `sender` to `recipient`, using the Vault's ERC20 allowance. This is typically used by\\n  // relayers, as it lets them reuse a user's Vault allowance.\\n  //\\n  // Reverts if the ETH sentinel value is passed.\\n  //\\n  // Emits an `ExternalBalanceTransfer` event.\\n\\n  enum UserBalanceOpKind {DEPOSIT_INTERNAL, WITHDRAW_INTERNAL, TRANSFER_INTERNAL, TRANSFER_EXTERNAL}\\n\\n  /**\\n   * @dev Emitted when a user's Internal Balance changes, either from calls to `manageUserBalance`, or through\\n     * interacting with Pools using Internal Balance.\\n     *\\n     * Because Internal Balance works exclusively with ERC20 tokens, ETH deposits and withdrawals will use the WETH\\n     * address.\\n     */\\n  event InternalBalanceChanged(address indexed user, IERC20 indexed token, int256 delta);\\n\\n  /**\\n   * @dev Emitted when a user's Vault ERC20 allowance is used by the Vault to transfer tokens to an external account.\\n     */\\n  event ExternalBalanceTransfer(IERC20 indexed token, address indexed sender, address recipient, uint256 amount);\\n\\n  // Pools\\n  //\\n  // There are three specialization settings for Pools, which allow for cheaper swaps at the cost of reduced\\n  // functionality:\\n  //\\n  //  - General: no specialization, suited for all Pools. IGeneralPool is used for swap request callbacks, passing the\\n  // balance of all tokens in the Pool. These Pools have the largest swap costs (because of the extra storage reads),\\n  // which increase with the number of registered tokens.\\n  //\\n  //  - Minimal Swap Info: IMinimalSwapInfoPool is used instead of IGeneralPool, which saves gas by only passing the\\n  // balance of the two tokens involved in the swap. This is suitable for some pricing algorithms, like the weighted\\n  // constant product one popularized by Balancer V1. Swap costs are smaller compared to general Pools, and are\\n  // independent of the number of registered tokens.\\n  //\\n  //  - Two Token: only allows two tokens to be registered. This achieves the lowest possible swap gas cost. Like\\n  // minimal swap info Pools, these are called via IMinimalSwapInfoPool.\\n\\n  enum PoolSpecialization {GENERAL, MINIMAL_SWAP_INFO, TWO_TOKEN}\\n\\n  /**\\n   * @dev Registers the caller account as a Pool with a given specialization setting. Returns the Pool's ID, which\\n     * is used in all Pool-related functions. Pools cannot be deregistered, nor can the Pool's specialization be\\n     * changed.\\n     *\\n     * The caller is expected to be a smart contract that implements either `IGeneralPool` or `IMinimalSwapInfoPool`,\\n     * depending on the chosen specialization setting. This contract is known as the Pool's contract.\\n     *\\n     * Note that the same contract may register itself as multiple Pools with unique Pool IDs, or in other words,\\n     * multiple Pools may share the same contract.\\n     *\\n     * Emits a `PoolRegistered` event.\\n     */\\n  function registerPool(PoolSpecialization specialization) external returns (bytes32);\\n\\n  /**\\n   * @dev Emitted when a Pool is registered by calling `registerPool`.\\n     */\\n  event PoolRegistered(bytes32 indexed poolId, address indexed poolAddress, PoolSpecialization specialization);\\n\\n  /**\\n   * @dev Returns a Pool's contract address and specialization setting.\\n     */\\n  function getPool(bytes32 poolId) external view returns (address, PoolSpecialization);\\n\\n  /**\\n   * @dev Registers `tokens` for the `poolId` Pool. Must be called by the Pool's contract.\\n     *\\n     * Pools can only interact with tokens they have registered. Users join a Pool by transferring registered tokens,\\n     * exit by receiving registered tokens, and can only swap registered tokens.\\n     *\\n     * Each token can only be registered once. For Pools with the Two Token specialization, `tokens` must have a length\\n     * of two, that is, both tokens must be registered in the same `registerTokens` call, and they must be sorted in\\n     * ascending order.\\n     *\\n     * The `tokens` and `assetManagers` arrays must have the same length, and each entry in these indicates the Asset\\n     * Manager for the corresponding token. Asset Managers can manage a Pool's tokens via `managePoolBalance`,\\n     * depositing and withdrawing them directly, and can even set their balance to arbitrary amounts. They are therefore\\n     * expected to be highly secured smart contracts with sound design principles, and the decision to register an\\n     * Asset Manager should not be made lightly.\\n     *\\n     * Pools can choose not to assign an Asset Manager to a given token by passing in the zero address. Once an Asset\\n     * Manager is set, it cannot be changed except by deregistering the associated token and registering again with a\\n     * different Asset Manager.\\n     *\\n     * Emits a `TokensRegistered` event.\\n     */\\n  function registerTokens(\\n    bytes32 poolId,\\n    IERC20[] calldata tokens,\\n    address[] calldata assetManagers\\n  ) external;\\n\\n  /**\\n   * @dev Emitted when a Pool registers tokens by calling `registerTokens`.\\n     */\\n  event TokensRegistered(bytes32 indexed poolId, IERC20[] tokens, address[] assetManagers);\\n\\n  /**\\n   * @dev Deregisters `tokens` for the `poolId` Pool. Must be called by the Pool's contract.\\n     *\\n     * Only registered tokens (via `registerTokens`) can be deregistered. Additionally, they must have zero total\\n     * balance. For Pools with the Two Token specialization, `tokens` must have a length of two, that is, both tokens\\n     * must be deregistered in the same `deregisterTokens` call.\\n     *\\n     * A deregistered token can be re-registered later on, possibly with a different Asset Manager.\\n     *\\n     * Emits a `TokensDeregistered` event.\\n     */\\n  function deregisterTokens(bytes32 poolId, IERC20[] calldata tokens) external;\\n\\n  /**\\n   * @dev Emitted when a Pool deregisters tokens by calling `deregisterTokens`.\\n     */\\n  event TokensDeregistered(bytes32 indexed poolId, IERC20[] tokens);\\n\\n  /**\\n   * @dev Returns detailed information for a Pool's registered token.\\n     *\\n     * `cash` is the number of tokens the Vault currently holds for the Pool. `managed` is the number of tokens\\n     * withdrawn and held outside the Vault by the Pool's token Asset Manager. The Pool's total balance for `token`\\n     * equals the sum of `cash` and `managed`.\\n     *\\n     * Internally, `cash` and `managed` are stored using 112 bits. No action can ever cause a Pool's token `cash`,\\n     * `managed` or `total` balance to be greater than 2^112 - 1.\\n     *\\n     * `lastChangeBlock` is the number of the block in which `token`'s total balance was last modified (via either a\\n     * join, exit, swap, or Asset Manager update). This value is useful to avoid so-called 'sandwich attacks', for\\n     * example when developing price oracles. A change of zero (e.g. caused by a swap with amount zero) is considered a\\n     * change for this purpose, and will update `lastChangeBlock`.\\n     *\\n     * `assetManager` is the Pool's token Asset Manager.\\n     */\\n  function getPoolTokenInfo(bytes32 poolId, IERC20 token)\\n  external\\n  view\\n  returns (\\n    uint256 cash,\\n    uint256 managed,\\n    uint256 lastChangeBlock,\\n    address assetManager\\n  );\\n\\n  /**\\n   * @dev Returns a Pool's registered tokens, the total balance for each, and the latest block when *any* of\\n     * the tokens' `balances` changed.\\n     *\\n     * The order of the `tokens` array is the same order that will be used in `joinPool`, `exitPool`, as well as in all\\n     * Pool hooks (where applicable). Calls to `registerTokens` and `deregisterTokens` may change this order.\\n     *\\n     * If a Pool only registers tokens once, and these are sorted in ascending order, they will be stored in the same\\n     * order as passed to `registerTokens`.\\n     *\\n     * Total balances include both tokens held by the Vault and those withdrawn by the Pool's Asset Managers. These are\\n     * the amounts used by joins, exits and swaps. For a detailed breakdown of token balances, use `getPoolTokenInfo`\\n     * instead.\\n     */\\n  function getPoolTokens(bytes32 poolId)\\n  external\\n  view\\n  returns (\\n    IERC20[] memory tokens,\\n    uint256[] memory balances,\\n    uint256 lastChangeBlock\\n  );\\n\\n  /**\\n   * @dev Called by users to join a Pool, which transfers tokens from `sender` into the Pool's balance. This will\\n     * trigger custom Pool behavior, which will typically grant something in return to `recipient` - often tokenized\\n     * Pool shares.\\n     *\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\n     *\\n     * The `assets` and `maxAmountsIn` arrays must have the same length, and each entry indicates the maximum amount\\n     * to send for each asset. The amounts to send are decided by the Pool and not the Vault: it just enforces\\n     * these maximums.\\n     *\\n     * If joining a Pool that holds WETH, it is possible to send ETH directly: the Vault will do the wrapping. To enable\\n     * this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead of the\\n     * WETH address. Note that it is not possible to combine ETH and WETH in the same join. Any excess ETH will be sent\\n     * back to the caller (not the sender, which is important for relayers).\\n     *\\n     * `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\\n     * interacting with Pools that register and deregister tokens frequently. If sending ETH however, the array must be\\n     * sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the final\\n     * `assets` array might not be sorted. Pools with no registered tokens cannot be joined.\\n     *\\n     * If `fromInternalBalance` is true, the caller's Internal Balance will be preferred: ERC20 transfers will only\\n     * be made for the difference between the requested amount and Internal Balance (if any). Note that ETH cannot be\\n     * withdrawn from Internal Balance: attempting to do so will trigger a revert.\\n     *\\n     * This causes the Vault to call the `IBasePool.onJoinPool` hook on the Pool's contract, where Pools implement\\n     * their own custom logic. This typically requires additional information from the user (such as the expected number\\n     * of Pool shares). This can be encoded in the `userData` argument, which is ignored by the Vault and passed\\n     * directly to the Pool's contract, as is `recipient`.\\n     *\\n     * Emits a `PoolBalanceChanged` event.\\n     */\\n  function joinPool(\\n    bytes32 poolId,\\n    address sender,\\n    address recipient,\\n    JoinPoolRequest calldata request\\n  ) external payable;\\n\\n  enum JoinKind {INIT, EXACT_TOKENS_IN_FOR_BPT_OUT, TOKEN_IN_FOR_EXACT_BPT_OUT}\\n  enum ExitKind {EXACT_BPT_IN_FOR_ONE_TOKEN_OUT, EXACT_BPT_IN_FOR_TOKENS_OUT, BPT_IN_FOR_EXACT_TOKENS_OUT}\\n\\n  struct JoinPoolRequest {\\n    IAsset[] assets;\\n    uint256[] maxAmountsIn;\\n    bytes userData;\\n    bool fromInternalBalance;\\n  }\\n\\n  /**\\n   * @dev Called by users to exit a Pool, which transfers tokens from the Pool's balance to `recipient`. This will\\n     * trigger custom Pool behavior, which will typically ask for something in return from `sender` - often tokenized\\n     * Pool shares. The amount of tokens that can be withdrawn is limited by the Pool's `cash` balance (see\\n     * `getPoolTokenInfo`).\\n     *\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\n     *\\n     * The `tokens` and `minAmountsOut` arrays must have the same length, and each entry in these indicates the minimum\\n     * token amount to receive for each token contract. The amounts to send are decided by the Pool and not the Vault:\\n     * it just enforces these minimums.\\n     *\\n     * If exiting a Pool that holds WETH, it is possible to receive ETH directly: the Vault will do the unwrapping. To\\n     * enable this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead\\n     * of the WETH address. Note that it is not possible to combine ETH and WETH in the same exit.\\n     *\\n     * `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\\n     * interacting with Pools that register and deregister tokens frequently. If receiving ETH however, the array must\\n     * be sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the\\n     * final `assets` array might not be sorted. Pools with no registered tokens cannot be exited.\\n     *\\n     * If `toInternalBalance` is true, the tokens will be deposited to `recipient`'s Internal Balance. Otherwise,\\n     * an ERC20 transfer will be performed. Note that ETH cannot be deposited to Internal Balance: attempting to\\n     * do so will trigger a revert.\\n     *\\n     * `minAmountsOut` is the minimum amount of tokens the user expects to get out of the Pool, for each token in the\\n     * `tokens` array. This array must match the Pool's registered tokens.\\n     *\\n     * This causes the Vault to call the `IBasePool.onExitPool` hook on the Pool's contract, where Pools implement\\n     * their own custom logic. This typically requires additional information from the user (such as the expected number\\n     * of Pool shares to return). This can be encoded in the `userData` argument, which is ignored by the Vault and\\n     * passed directly to the Pool's contract.\\n     *\\n     * Emits a `PoolBalanceChanged` event.\\n     */\\n  function exitPool(\\n    bytes32 poolId,\\n    address sender,\\n    address payable recipient,\\n    ExitPoolRequest calldata request\\n  ) external;\\n\\n  struct ExitPoolRequest {\\n    IAsset[] assets;\\n    uint256[] minAmountsOut;\\n    bytes userData;\\n    bool toInternalBalance;\\n  }\\n\\n  /**\\n   * @dev Emitted when a user joins or exits a Pool by calling `joinPool` or `exitPool`, respectively.\\n     */\\n  event PoolBalanceChanged(\\n    bytes32 indexed poolId,\\n    address indexed liquidityProvider,\\n    IERC20[] tokens,\\n    int256[] deltas,\\n    uint256[] protocolFeeAmounts\\n  );\\n\\n  enum PoolBalanceChangeKind {JOIN, EXIT}\\n\\n  // Swaps\\n  //\\n  // Users can swap tokens with Pools by calling the `swap` and `batchSwap` functions. To do this,\\n  // they need not trust Pool contracts in any way: all security checks are made by the Vault. They must however be\\n  // aware of the Pools' pricing algorithms in order to estimate the prices Pools will quote.\\n  //\\n  // The `swap` function executes a single swap, while `batchSwap` can perform multiple swaps in sequence.\\n  // In each individual swap, tokens of one kind are sent from the sender to the Pool (this is the 'token in'),\\n  // and tokens of another kind are sent from the Pool to the recipient in exchange (this is the 'token out').\\n  // More complex swaps, such as one token in to multiple tokens out can be achieved by batching together\\n  // individual swaps.\\n  //\\n  // There are two swap kinds:\\n  //  - 'given in' swaps, where the amount of tokens in (sent to the Pool) is known, and the Pool determines (via the\\n  // `onSwap` hook) the amount of tokens out (to send to the recipient).\\n  //  - 'given out' swaps, where the amount of tokens out (received from the Pool) is known, and the Pool determines\\n  // (via the `onSwap` hook) the amount of tokens in (to receive from the sender).\\n  //\\n  // Additionally, it is possible to chain swaps using a placeholder input amount, which the Vault replaces with\\n  // the calculated output of the previous swap. If the previous swap was 'given in', this will be the calculated\\n  // tokenOut amount. If the previous swap was 'given out', it will use the calculated tokenIn amount. These extended\\n  // swaps are known as 'multihop' swaps, since they 'hop' through a number of intermediate tokens before arriving at\\n  // the final intended token.\\n  //\\n  // In all cases, tokens are only transferred in and out of the Vault (or withdrawn from and deposited into Internal\\n  // Balance) after all individual swaps have been completed, and the net token balance change computed. This makes\\n  // certain swap patterns, such as multihops, or swaps that interact with the same token pair in multiple Pools, cost\\n  // much less gas than they would otherwise.\\n  //\\n  // It also means that under certain conditions it is possible to perform arbitrage by swapping with multiple\\n  // Pools in a way that results in net token movement out of the Vault (profit), with no tokens being sent in (only\\n  // updating the Pool's internal accounting).\\n  //\\n  // To protect users from front-running or the market changing rapidly, they supply a list of 'limits' for each token\\n  // involved in the swap, where either the maximum number of tokens to send (by passing a positive value) or the\\n  // minimum amount of tokens to receive (by passing a negative value) is specified.\\n  //\\n  // Additionally, a 'deadline' timestamp can also be provided, forcing the swap to fail if it occurs after\\n  // this point in time (e.g. if the transaction failed to be included in a block promptly).\\n  //\\n  // If interacting with Pools that hold WETH, it is possible to both send and receive ETH directly: the Vault will do\\n  // the wrapping and unwrapping. To enable this mechanism, the IAsset sentinel value (the zero address) must be\\n  // passed in the `assets` array instead of the WETH address. Note that it is possible to combine ETH and WETH in the\\n  // same swap. Any excess ETH will be sent back to the caller (not the sender, which is relevant for relayers).\\n  //\\n  // Finally, Internal Balance can be used when either sending or receiving tokens.\\n\\n  enum SwapKind {GIVEN_IN, GIVEN_OUT}\\n\\n  /**\\n   * @dev Performs a swap with a single Pool.\\n     *\\n     * If the swap is 'given in' (the number of tokens to send to the Pool is known), it returns the amount of tokens\\n     * taken from the Pool, which must be greater than or equal to `limit`.\\n     *\\n     * If the swap is 'given out' (the number of tokens to take from the Pool is known), it returns the amount of tokens\\n     * sent to the Pool, which must be less than or equal to `limit`.\\n     *\\n     * Internal Balance usage and the recipient are determined by the `funds` struct.\\n     *\\n     * Emits a `Swap` event.\\n     */\\n  function swap(\\n    SingleSwap calldata singleSwap,\\n    FundManagement calldata funds,\\n    uint256 limit,\\n    uint256 deadline\\n  ) external payable returns (uint256);\\n\\n  /**\\n   * @dev Data for a single swap executed by `swap`. `amount` is either `amountIn` or `amountOut` depending on\\n     * the `kind` value.\\n     *\\n     * `assetIn` and `assetOut` are either token addresses, or the IAsset sentinel value for ETH (the zero address).\\n     * Note that Pools never interact with ETH directly: it will be wrapped to or unwrapped from WETH by the Vault.\\n     *\\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\\n     * used to extend swap behavior.\\n     */\\n  struct SingleSwap {\\n    bytes32 poolId;\\n    SwapKind kind;\\n    IAsset assetIn;\\n    IAsset assetOut;\\n    uint256 amount;\\n    bytes userData;\\n  }\\n\\n  /**\\n   * @dev Performs a series of swaps with one or multiple Pools. In each individual swap, the caller determines either\\n     * the amount of tokens sent to or received from the Pool, depending on the `kind` value.\\n     *\\n     * Returns an array with the net Vault asset balance deltas. Positive amounts represent tokens (or ETH) sent to the\\n     * Vault, and negative amounts represent tokens (or ETH) sent by the Vault. Each delta corresponds to the asset at\\n     * the same index in the `assets` array.\\n     *\\n     * Swaps are executed sequentially, in the order specified by the `swaps` array. Each array element describes a\\n     * Pool, the token to be sent to this Pool, the token to receive from it, and an amount that is either `amountIn` or\\n     * `amountOut` depending on the swap kind.\\n     *\\n     * Multihop swaps can be executed by passing an `amount` value of zero for a swap. This will cause the amount in/out\\n     * of the previous swap to be used as the amount in for the current one. In a 'given in' swap, 'tokenIn' must equal\\n     * the previous swap's `tokenOut`. For a 'given out' swap, `tokenOut` must equal the previous swap's `tokenIn`.\\n     *\\n     * The `assets` array contains the addresses of all assets involved in the swaps. These are either token addresses,\\n     * or the IAsset sentinel value for ETH (the zero address). Each entry in the `swaps` array specifies tokens in and\\n     * out by referencing an index in `assets`. Note that Pools never interact with ETH directly: it will be wrapped to\\n     * or unwrapped from WETH by the Vault.\\n     *\\n     * Internal Balance usage, sender, and recipient are determined by the `funds` struct. The `limits` array specifies\\n     * the minimum or maximum amount of each token the vault is allowed to transfer.\\n     *\\n     * `batchSwap` can be used to make a single swap, like `swap` does, but doing so requires more gas than the\\n     * equivalent `swap` call.\\n     *\\n     * Emits `Swap` events.\\n     */\\n  function batchSwap(\\n    SwapKind kind,\\n    BatchSwapStep[] calldata swaps,\\n    IAsset[] calldata assets,\\n    FundManagement calldata funds,\\n    int256[] calldata limits,\\n    uint256 deadline\\n  ) external payable returns (int256[] memory);\\n\\n  /**\\n   * @dev Data for each individual swap executed by `batchSwap`. The asset in and out fields are indexes into the\\n     * `assets` array passed to that function, and ETH assets are converted to WETH.\\n     *\\n     * If `amount` is zero, the multihop mechanism is used to determine the actual amount based on the amount in/out\\n     * from the previous swap, depending on the swap kind.\\n     *\\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\\n     * used to extend swap behavior.\\n     */\\n  struct BatchSwapStep {\\n    bytes32 poolId;\\n    uint256 assetInIndex;\\n    uint256 assetOutIndex;\\n    uint256 amount;\\n    bytes userData;\\n  }\\n\\n  /**\\n   * @dev Emitted for each individual swap performed by `swap` or `batchSwap`.\\n     */\\n  event Swap(\\n    bytes32 indexed poolId,\\n    IERC20 indexed tokenIn,\\n    IERC20 indexed tokenOut,\\n    uint256 amountIn,\\n    uint256 amountOut\\n  );\\n\\n  /**\\n   * @dev All tokens in a swap are either sent from the `sender` account to the Vault, or from the Vault to the\\n     * `recipient` account.\\n     *\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\n     *\\n     * If `fromInternalBalance` is true, the `sender`'s Internal Balance will be preferred, performing an ERC20\\n     * transfer for the difference between the requested amount and the User's Internal Balance (if any). The `sender`\\n     * must have allowed the Vault to use their tokens via `IERC20.approve()`. This matches the behavior of\\n     * `joinPool`.\\n     *\\n     * If `toInternalBalance` is true, tokens will be deposited to `recipient`'s internal balance instead of\\n     * transferred. This matches the behavior of `exitPool`.\\n     *\\n     * Note that ETH cannot be deposited to or withdrawn from Internal Balance: attempting to do so will trigger a\\n     * revert.\\n     */\\n  struct FundManagement {\\n    address sender;\\n    bool fromInternalBalance;\\n    address payable recipient;\\n    bool toInternalBalance;\\n  }\\n\\n  /**\\n   * @dev Simulates a call to `batchSwap`, returning an array of Vault asset deltas. Calls to `swap` cannot be\\n     * simulated directly, but an equivalent `batchSwap` call can and will yield the exact same result.\\n     *\\n     * Each element in the array corresponds to the asset at the same index, and indicates the number of tokens (or ETH)\\n     * the Vault would take from the sender (if positive) or send to the recipient (if negative). The arguments it\\n     * receives are the same that an equivalent `batchSwap` call would receive.\\n     *\\n     * Unlike `batchSwap`, this function performs no checks on the sender or recipient field in the `funds` struct.\\n     * This makes it suitable to be called by off-chain applications via eth_call without needing to hold tokens,\\n     * approve them for the Vault, or even know a user's address.\\n     *\\n     * Note that this function is not 'view' (due to implementation details): the client code must explicitly execute\\n     * eth_call instead of eth_sendTransaction.\\n     */\\n  function queryBatchSwap(\\n    SwapKind kind,\\n    BatchSwapStep[] calldata swaps,\\n    IAsset[] calldata assets,\\n    FundManagement calldata funds\\n  ) external returns (int256[] memory assetDeltas);\\n\\n  // BasePool.sol\\n\\n  /**\\n* @dev Returns the amount of BPT that would be burned from `sender` if the `onExitPool` hook were called by the\\n     * Vault with the same arguments, along with the number of tokens `recipient` would receive.\\n     *\\n     * This function is not meant to be called directly, but rather from a helper contract that fetches current Vault\\n     * data, such as the protocol swap fee percentage and Pool balances.\\n     *\\n     * Like `IVault.queryBatchSwap`, this function is not view due to internal implementation details: the caller must\\n     * explicitly use eth_call instead of eth_sendTransaction.\\n     */\\n  function queryExit(\\n    bytes32 poolId,\\n    address sender,\\n    address recipient,\\n    uint256[] memory balances,\\n    uint256 lastChangeBlock,\\n    uint256 protocolSwapFeePercentage,\\n    bytes memory userData\\n  ) external returns (uint256 bptIn, uint256[] memory amountsOut);\\n\\n\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 150\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"}],\"name\":\"ContractInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldValue\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"UpdatedAddressSlot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"oldValue\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"UpdatedBoolSlot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdatedUint256Slot\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BALANCER_VAULT\",\"outputs\":[{\"internalType\":\"contract IBVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BAL_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STRATEGY_NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TETU_LIQUIDATOR\",\"outputs\":[{\"internalType\":\"contract ITetuLiquidator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assets\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBackRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"continueInvesting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"created\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createdBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositBPTPoolId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"depositPoolTokens\",\"outputs\":[{\"internalType\":\"contract IAsset\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"doHardWork\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyExit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gauge\",\"outputs\":[{\"internalType\":\"contract IBalancerGauge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gaugeDepositor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"controller_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vault_\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"poolId_\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"gauge_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_bbRatio\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"depositToken_\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"depositBPTPoolId_\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"gaugeDepositor_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"__controller\",\"type\":\"address\"}],\"name\":\"initializeControllable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"controller_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vault_\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"poolId_\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"gauge_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_bbRatio\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"depositToken_\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"depositBPTPoolId_\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"gaugeDepositor_\",\"type\":\"address\"}],\"name\":\"initializeStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"__rewardTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_bbRatio\",\"type\":\"uint256\"}],\"name\":\"initializeStrategyBase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"investAllUnderlying\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"investedUnderlyingBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_value\",\"type\":\"address\"}],\"name\":\"isController\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_value\",\"type\":\"address\"}],\"name\":\"isGovernance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastHw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseInvesting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pausedInvesting\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platform\",\"outputs\":[{\"internalType\":\"enum IStrategy.Platform\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolTokens\",\"outputs\":[{\"internalType\":\"contract IAsset\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolTotalAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"readyToClaim\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"toClaim\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPoolBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"salvage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setBuyBackRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"rts\",\"type\":\"address[]\"}],\"name\":\"setRewardTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"}],\"name\":\"setToleranceNumerator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlyingBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"unsalvageableTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAllToVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "StrategyBalancerBoostBPT", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "150", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}