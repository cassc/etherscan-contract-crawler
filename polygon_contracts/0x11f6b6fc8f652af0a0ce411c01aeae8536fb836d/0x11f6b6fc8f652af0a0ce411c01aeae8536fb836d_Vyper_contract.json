{"SourceCode": "# @version 0.3.1\r\n\"\"\"\r\n@title Rewards-Only Gauge\r\n@author Curve Finance\r\n@license MIT\r\n@notice Distribution of third-party rewards without CRV\r\n\"\"\"\r\n\r\nfrom vyper.interfaces import ERC20\r\n\r\nimplements: ERC20\r\n\r\nstruct RewardToken:\r\n    distributor: address\r\n    period_finish: uint256\r\n    rate: uint256\r\n    duration: uint256\r\n    received: uint256\r\n    paid: uint256\r\n\r\ninterface Streamer:\r\n    def reward_data(_token: address) -> RewardToken: view\r\n    def last_update_time() -> uint256: view\r\n\r\ninterface ERC20Extended:\r\n    def symbol() -> String[26]: view\r\n\r\ninterface ERC1271:\r\n    def isValidSignature(_hash: bytes32, _signature: Bytes[65]) -> bytes32: view\r\n\r\nevent Deposit:\r\n    provider: indexed(address)\r\n    value: uint256\r\n\r\nevent Withdraw:\r\n    provider: indexed(address)\r\n    value: uint256\r\n\r\nevent Transfer:\r\n    _from: indexed(address)\r\n    _to: indexed(address)\r\n    _value: uint256\r\n\r\nevent Approval:\r\n    _owner: indexed(address)\r\n    _spender: indexed(address)\r\n    _value: uint256\r\n\r\nstruct Reward:\r\n    token: address\r\n    distributor: address\r\n    period_finish: uint256\r\n    rate: uint256\r\n    last_update: uint256\r\n    integral: uint256\r\n\r\nMAX_REWARDS: constant(uint256) = 8\r\nCLAIM_FREQUENCY: constant(uint256) = 3600\r\n\r\n# keccak256(\"isValidSignature(bytes32,bytes)\")[:4] << 224\r\nERC1271_MAGIC_VAL: constant(bytes32) = 0x1626ba7e00000000000000000000000000000000000000000000000000000000\r\nVERSION: constant(String[8]) = \"v1.0.0\"\r\n\r\nEIP712_TYPEHASH: constant(bytes32) = keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\")\r\nPERMIT_TYPEHASH: constant(bytes32) = keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\")\r\n\r\nBAL_TOKEN: immutable(address)\r\nBAL_VAULT: immutable(address)\r\nAUTHORIZER_ADAPTOR: immutable(address)\r\n\r\nlp_token: public(address)\r\n\r\nbalanceOf: public(HashMap[address, uint256])\r\ntotalSupply: public(uint256)\r\n_allowance: HashMap[address, HashMap[address, uint256]]\r\n\r\nname: public(String[64])\r\nsymbol: public(String[40])\r\n\r\n# ERC2612\r\nDOMAIN_SEPARATOR: public(bytes32)\r\nnonces: public(HashMap[address, uint256])\r\n\r\n# For tracking external rewards\r\n_reward_data: uint256\r\nreward_tokens: public(address[MAX_REWARDS])\r\nreward_balances: public(HashMap[address, uint256])\r\n# claimant -> default reward receiver\r\nrewards_receiver: public(HashMap[address, address])\r\n\r\nclaim_sig: public(Bytes[4])\r\n\r\n# reward token -> integral\r\nreward_integral: public(HashMap[address, uint256])\r\n\r\n# reward token -> claiming address -> integral\r\nreward_integral_for: public(HashMap[address, HashMap[address, uint256]])\r\n\r\n# user -> [uint128 claimable amount][uint128 claimed amount]\r\nclaim_data: HashMap[address, HashMap[address, uint256]]\r\n\r\n\r\n@external\r\ndef __init__(_bal_token: address, _vault: address, _authorizerAdaptor: address):\r\n    \"\"\"\r\n    @notice Contract constructor\r\n    @param _vault Balancer Vault contract address\r\n    \"\"\"\r\n\r\n    BAL_TOKEN = _bal_token\r\n    BAL_VAULT = _vault\r\n    AUTHORIZER_ADAPTOR = _authorizerAdaptor\r\n\r\n    # prevent initialization of implementation\r\n    self.lp_token = 0x000000000000000000000000000000000000dEaD\r\n\r\n@view\r\n@external\r\ndef decimals() -> uint256:\r\n    \"\"\"\r\n    @notice Get the number of decimals for this token\r\n    @dev Implemented as a view method to reduce gas costs\r\n    @return uint256 decimal places\r\n    \"\"\"\r\n    return 18\r\n\r\n@view\r\n@external\r\ndef version() -> String[8]:\r\n    \"\"\"\r\n    @notice Get the version of this gauge contract\r\n    \"\"\"\r\n    return VERSION\r\n\r\n@view\r\n@internal\r\ndef _get_allowance(owner: address, spender: address) -> uint256:\r\n    \"\"\"\r\n     @dev Override to grant the Vault infinite allowance, causing for Gauge Tokens to not require approval.\r\n     This is sound as the Vault already provides authorization mechanisms when initiating token transfers, which this\r\n     contract inherits.\r\n    \"\"\"\r\n    if (spender == BAL_VAULT):\r\n        return MAX_UINT256\r\n    return self._allowance[owner][spender]\r\n\r\n@internal\r\ndef _checkpoint_rewards(_user: address, _total_supply: uint256, _claim: bool, _receiver: address):\r\n    \"\"\"\r\n    @notice Claim pending rewards and checkpoint rewards for a user\r\n    \"\"\"\r\n    # claim from reward contract\r\n\r\n    reward_data: uint256 = self._reward_data\r\n    if _total_supply != 0 and reward_data != 0 and block.timestamp > shift(reward_data, -160) + CLAIM_FREQUENCY:\r\n        reward_contract: address = convert(reward_data % 2**160, address)\r\n        raw_call(reward_contract, self.claim_sig)  # dev: bad claim sig\r\n        self._reward_data = convert(reward_contract, uint256) + shift(block.timestamp, 160)\r\n\r\n    receiver: address = _receiver\r\n    if _claim and receiver == ZERO_ADDRESS:\r\n        # if receiver is not explicitly declared, check for default receiver\r\n        receiver = self.rewards_receiver[_user]\r\n        if receiver == ZERO_ADDRESS:\r\n            # direct claims to user if no default receiver is set\r\n            receiver = _user\r\n\r\n    # calculate new user reward integral and transfer any owed rewards\r\n    user_balance: uint256 = self.balanceOf[_user]\r\n    for i in range(MAX_REWARDS):\r\n        token: address = self.reward_tokens[i]\r\n        if token == ZERO_ADDRESS:\r\n            break\r\n        dI: uint256 = 0\r\n        if _total_supply != 0:\r\n            token_balance: uint256 = ERC20(token).balanceOf(self)\r\n            dI = 10**18 * (token_balance - self.reward_balances[token]) / _total_supply\r\n            self.reward_balances[token] = token_balance\r\n            if _user == ZERO_ADDRESS:\r\n                if dI != 0:\r\n                    self.reward_integral[token] += dI\r\n                continue\r\n\r\n        integral: uint256 = self.reward_integral[token] + dI\r\n        if dI != 0:\r\n            self.reward_integral[token] = integral\r\n\r\n        integral_for: uint256 = self.reward_integral_for[token][_user]\r\n        new_claimable: uint256 = 0\r\n        if integral_for < integral:\r\n            self.reward_integral_for[token][_user] = integral\r\n            new_claimable = user_balance * (integral - integral_for) / 10**18\r\n\r\n        claim_data: uint256 = self.claim_data[_user][token]\r\n        total_claimable: uint256 = shift(claim_data, -128) + new_claimable\r\n        if total_claimable > 0:\r\n            total_claimed: uint256 = claim_data % 2 ** 128\r\n            if _claim:\r\n                response: Bytes[32] = raw_call(\r\n                    token,\r\n                    concat(\r\n                        method_id(\"transfer(address,uint256)\"),\r\n                        convert(receiver, bytes32),\r\n                        convert(total_claimable, bytes32),\r\n                    ),\r\n                    max_outsize=32,\r\n                )\r\n                if len(response) != 0:\r\n                    assert convert(response, bool)\r\n                self.reward_balances[token] -= total_claimable\r\n                # update amount claimed (lower order bytes)\r\n                self.claim_data[_user][token] = total_claimed + total_claimable\r\n            elif new_claimable > 0:\r\n                # update total_claimable (higher order bytes)\r\n                self.claim_data[_user][token] = total_claimed + shift(total_claimable, 128)\r\n\r\n\r\n@view\r\n@external\r\ndef reward_contract() -> address:\r\n    \"\"\"\r\n    @notice Address of the reward contract providing non-CRV incentives for this gauge\r\n    @dev Returns `ZERO_ADDRESS` if there is no reward contract active\r\n    \"\"\"\r\n    return convert(self._reward_data % 2**160, address)\r\n\r\n\r\n@view\r\n@external\r\ndef last_claim() -> uint256:\r\n    \"\"\"\r\n    @notice Epoch timestamp of the last call to claim from `reward_contract`\r\n    @dev Rewards are claimed at most once per hour in order to reduce gas costs\r\n    \"\"\"\r\n    return shift(self._reward_data, -160)\r\n\r\n\r\n@view\r\n@external\r\ndef claimed_reward(_addr: address, _token: address) -> uint256:\r\n    \"\"\"\r\n    @notice Get the number of already-claimed reward tokens for a user\r\n    @param _addr Account to get reward amount for\r\n    @param _token Token to get reward amount for\r\n    @return uint256 Total amount of `_token` already claimed by `_addr`\r\n    \"\"\"\r\n    return self.claim_data[_addr][_token] % 2**128\r\n\r\n\r\n@view\r\n@external\r\ndef claimable_reward(_addr: address, _token: address) -> uint256:\r\n    \"\"\"\r\n    @notice Get the number of claimable reward tokens for a user\r\n    @dev This call does not consider pending claimable amount in `reward_contract`.\r\n         Off-chain callers should instead use `claimable_rewards_write` as a\r\n         view method.\r\n    @param _addr Account to get reward amount for\r\n    @param _token Token to get reward amount for\r\n    @return uint256 Claimable reward token amount\r\n    \"\"\"\r\n    return shift(self.claim_data[_addr][_token], -128)\r\n\r\n@view\r\n@external\r\ndef reward_data(_token: address) -> Reward:\r\n    reward_contract: address = convert(self._reward_data % 2**160, address)\r\n    reward_token: RewardToken = Streamer(reward_contract).reward_data(_token)\r\n    last_update_time: uint256 = Streamer(reward_contract).last_update_time()\r\n    return Reward({\r\n        token: _token,\r\n        distributor: reward_token.distributor,\r\n        period_finish: reward_token.period_finish,\r\n        rate: reward_token.rate,\r\n        last_update: last_update_time,\r\n        integral: self.reward_integral[_token]\r\n    })\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef claimable_reward_write(_addr: address, _token: address) -> uint256:\r\n    \"\"\"\r\n    @notice Get the number of claimable reward tokens for a user\r\n    @dev This function should be manually changed to \"view\" in the ABI\r\n         Calling it via a transaction will claim available reward tokens\r\n    @param _addr Account to get reward amount for\r\n    @param _token Token to get reward amount for\r\n    @return uint256 Claimable reward token amount\r\n    \"\"\"\r\n    if self.reward_tokens[0] != ZERO_ADDRESS:\r\n        self._checkpoint_rewards(_addr, self.totalSupply, False, ZERO_ADDRESS)\r\n    return shift(self.claim_data[_addr][_token], -128)\r\n\r\n\r\n@external\r\ndef set_rewards_receiver(_receiver: address):\r\n    \"\"\"\r\n    @notice Set the default reward receiver for the caller.\r\n    @dev When set to ZERO_ADDRESS, rewards are sent to the caller\r\n    @param _receiver Receiver address for any rewards claimed via `claim_rewards`\r\n    \"\"\"\r\n    self.rewards_receiver[msg.sender] = _receiver\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef claim_rewards(_addr: address = msg.sender, _receiver: address = ZERO_ADDRESS):\r\n    \"\"\"\r\n    @notice Claim available reward tokens for `_addr`\r\n    @param _addr Address to claim for\r\n    @param _receiver Address to transfer rewards to - if set to\r\n                     ZERO_ADDRESS, uses the default reward receiver\r\n                     for the caller\r\n    \"\"\"\r\n    if _receiver != ZERO_ADDRESS:\r\n        assert _addr == msg.sender  # dev: cannot redirect when claiming for another user\r\n    self._checkpoint_rewards(_addr, self.totalSupply, True, _receiver)\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef deposit(_value: uint256, _addr: address = msg.sender, _claim_rewards: bool = False):\r\n    \"\"\"\r\n    @notice Deposit `_value` LP tokens\r\n    @dev Depositting also claims pending reward tokens\r\n    @param _value Number of tokens to deposit\r\n    @param _addr Address to deposit for\r\n    \"\"\"\r\n    if _value != 0:\r\n        reward_contract: address = convert(self._reward_data % 2**160, address)\r\n        total_supply: uint256 = self.totalSupply\r\n\r\n        self._checkpoint_rewards(_addr, total_supply, _claim_rewards, ZERO_ADDRESS)\r\n\r\n        total_supply += _value\r\n        new_balance: uint256 = self.balanceOf[_addr] + _value\r\n        self.balanceOf[_addr] = new_balance\r\n        self.totalSupply = total_supply\r\n\r\n        ERC20(self.lp_token).transferFrom(msg.sender, self, _value)\r\n\r\n    log Deposit(_addr, _value)\r\n    log Transfer(ZERO_ADDRESS, _addr, _value)\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef withdraw(_value: uint256, _claim_rewards: bool = False):\r\n    \"\"\"\r\n    @notice Withdraw `_value` LP tokens\r\n    @dev Withdrawing also claims pending reward tokens\r\n    @param _value Number of tokens to withdraw\r\n    \"\"\"\r\n    if _value != 0:\r\n        reward_contract: address = convert(self._reward_data % 2**160, address)\r\n        total_supply: uint256 = self.totalSupply\r\n\r\n        self._checkpoint_rewards(msg.sender, total_supply, _claim_rewards, ZERO_ADDRESS)\r\n\r\n        total_supply -= _value\r\n        new_balance: uint256 = self.balanceOf[msg.sender] - _value\r\n        self.balanceOf[msg.sender] = new_balance\r\n        self.totalSupply = total_supply\r\n\r\n        ERC20(self.lp_token).transfer(msg.sender, _value)\r\n\r\n    log Withdraw(msg.sender, _value)\r\n    log Transfer(msg.sender, ZERO_ADDRESS, _value)\r\n\r\n\r\n@internal\r\ndef _transfer(_from: address, _to: address, _value: uint256):\r\n    reward_contract: address = convert(self._reward_data % 2**160, address)\r\n\r\n    if _value != 0:\r\n        total_supply: uint256 = self.totalSupply\r\n        self._checkpoint_rewards(_from, total_supply, False, ZERO_ADDRESS)\r\n        new_balance: uint256 = self.balanceOf[_from] - _value\r\n        self.balanceOf[_from] = new_balance\r\n\r\n        self._checkpoint_rewards(_to, total_supply, False, ZERO_ADDRESS)\r\n        new_balance = self.balanceOf[_to] + _value\r\n        self.balanceOf[_to] = new_balance\r\n\r\n    log Transfer(_from, _to, _value)\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef transfer(_to : address, _value : uint256) -> bool:\r\n    \"\"\"\r\n    @notice Transfer token for a specified address\r\n    @dev Transferring claims pending reward tokens for the sender and receiver\r\n    @param _to The address to transfer to.\r\n    @param _value The amount to be transferred.\r\n    \"\"\"\r\n    self._transfer(msg.sender, _to, _value)\r\n\r\n    return True\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef transferFrom(_from : address, _to : address, _value : uint256) -> bool:\r\n    \"\"\"\r\n    @notice Transfer tokens from one address to another.\r\n    @dev Transferring claims pending reward tokens for the sender and receiver\r\n    @param _from address The address which you want to send tokens from\r\n    @param _to address The address which you want to transfer to\r\n    @param _value uint256 the amount of tokens to be transferred\r\n    \"\"\"\r\n    _allowance: uint256 = self._get_allowance(_from, msg.sender)\r\n    if _allowance != MAX_UINT256:\r\n        self._allowance[_from][msg.sender] = _allowance - _value\r\n\r\n    self._transfer(_from, _to, _value)\r\n\r\n    return True\r\n\r\n@view\r\n@external\r\ndef allowance(owner: address, spender: address) -> uint256:\r\n    \"\"\"\r\n     @notice Get `spender`'s current allowance from `owner` \r\n    \"\"\"\r\n    return self._get_allowance(owner, spender)\r\n\r\n@external\r\ndef approve(_spender : address, _value : uint256) -> bool:\r\n    \"\"\"\r\n    @notice Approve the passed address to transfer the specified amount of\r\n            tokens on behalf of msg.sender\r\n    @dev Beware that changing an allowance via this method brings the risk\r\n         that someone may use both the old and new allowance by unfortunate\r\n         transaction ordering. This may be mitigated with the use of\r\n         {incraseAllowance} and {decreaseAllowance}.\r\n         https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    @param _spender The address which will transfer the funds\r\n    @param _value The amount of tokens that may be transferred\r\n    @return bool success\r\n    \"\"\"\r\n    self._allowance[msg.sender][_spender] = _value\r\n    log Approval(msg.sender, _spender, _value)\r\n\r\n    return True\r\n\r\n@external\r\ndef permit(\r\n    _owner: address,\r\n    _spender: address,\r\n    _value: uint256,\r\n    _deadline: uint256,\r\n    _v: uint8,\r\n    _r: bytes32,\r\n    _s: bytes32\r\n) -> bool:\r\n    \"\"\"\r\n    @notice Approves spender by owner's signature to expend owner's tokens.\r\n        See https://eips.ethereum.org/EIPS/eip-2612.\r\n    @dev Inspired by https://github.com/yearn/yearn-vaults/blob/main/contracts/Vault.vy#L753-L793\r\n    @dev Supports smart contract wallets which implement ERC1271\r\n        https://eips.ethereum.org/EIPS/eip-1271\r\n    @param _owner The address which is a source of funds and has signed the Permit.\r\n    @param _spender The address which is allowed to spend the funds.\r\n    @param _value The amount of tokens to be spent.\r\n    @param _deadline The timestamp after which the Permit is no longer valid.\r\n    @param _v The bytes[64] of the valid secp256k1 signature of permit by owner\r\n    @param _r The bytes[0:32] of the valid secp256k1 signature of permit by owner\r\n    @param _s The bytes[32:64] of the valid secp256k1 signature of permit by owner\r\n    @return True, if transaction completes successfully\r\n    \"\"\"\r\n    assert _owner != ZERO_ADDRESS\r\n    assert block.timestamp <= _deadline\r\n\r\n    nonce: uint256 = self.nonces[_owner]\r\n    digest: bytes32 = keccak256(\r\n        concat(\r\n            b\"\\x19\\x01\",\r\n            self.DOMAIN_SEPARATOR,\r\n            keccak256(_abi_encode(PERMIT_TYPEHASH, _owner, _spender, _value, nonce, _deadline))\r\n        )\r\n    )\r\n\r\n    if _owner.is_contract:\r\n        sig: Bytes[65] = concat(_abi_encode(_r, _s), slice(convert(_v, bytes32), 31, 1))\r\n        # reentrancy not a concern since this is a staticcall\r\n        assert ERC1271(_owner).isValidSignature(digest, sig) == ERC1271_MAGIC_VAL\r\n    else:\r\n        assert ecrecover(digest, convert(_v, uint256), convert(_r, uint256), convert(_s, uint256)) == _owner\r\n\r\n    self._allowance[_owner][_spender] = _value\r\n    self.nonces[_owner] = nonce + 1\r\n\r\n    log Approval(_owner, _spender, _value)\r\n    return True\r\n\r\n@external\r\ndef increaseAllowance(_spender: address, _added_value: uint256) -> bool:\r\n    \"\"\"\r\n    @notice Increase the allowance granted to `_spender` by the caller\r\n    @dev This is alternative to {approve} that can be used as a mitigation for\r\n         the potential race condition\r\n    @param _spender The address which will transfer the funds\r\n    @param _added_value The amount of to increase the allowance\r\n    @return bool success\r\n    \"\"\"\r\n    allowance: uint256 = self._get_allowance(msg.sender, _spender) + _added_value\r\n    self._allowance[msg.sender][_spender] = allowance\r\n\r\n    log Approval(msg.sender, _spender, allowance)\r\n\r\n    return True\r\n\r\n\r\n@external\r\ndef decreaseAllowance(_spender: address, _subtracted_value: uint256) -> bool:\r\n    \"\"\"\r\n    @notice Decrease the allowance granted to `_spender` by the caller\r\n    @dev This is alternative to {approve} that can be used as a mitigation for\r\n         the potential race condition\r\n    @param _spender The address which will transfer the funds\r\n    @param _subtracted_value The amount of to decrease the allowance\r\n    @return bool success\r\n    \"\"\"\r\n    allowance: uint256 = self._get_allowance(msg.sender, _spender) - _subtracted_value\r\n    self._allowance[msg.sender][_spender] = allowance\r\n\r\n    log Approval(msg.sender, _spender, allowance)\r\n\r\n    return True\r\n\r\n@internal\r\ndef _set_rewards(_reward_contract: address, _claim_sig: bytes32, _reward_tokens: address[MAX_REWARDS]):\r\n    \"\"\"\r\n    @notice Set the active reward contract\r\n    @dev A reward contract cannot be set while this contract has no deposits\r\n    @param _reward_contract Reward contract address. Set to ZERO_ADDRESS to\r\n                            disable staking.\r\n    @param _claim_sig Four byte selectors for staking, withdrawing and claiming,\r\n                 left padded with zero bytes. If the reward contract can\r\n                 be claimed from but does not require staking, the staking\r\n                 and withdraw selectors should be set to 0x00\r\n    @param _reward_tokens List of claimable reward tokens. New reward tokens\r\n                          may be added but they cannot be removed. When calling\r\n                          this function to unset or modify a reward contract,\r\n                          this array must begin with the already-set reward\r\n                          token addresses.\r\n    \"\"\"\r\n    lp_token: address = self.lp_token\r\n    current_reward_contract: address = convert(self._reward_data % 2**160, address)\r\n    total_supply: uint256 = self.totalSupply\r\n    self._checkpoint_rewards(ZERO_ADDRESS, total_supply, False, ZERO_ADDRESS)\r\n\r\n    if _reward_contract != ZERO_ADDRESS:\r\n        assert _reward_tokens[0] != ZERO_ADDRESS  # dev: no reward token\r\n        assert _reward_contract.is_contract  # dev: not a contract\r\n\r\n    self._reward_data = convert(_reward_contract, uint256)\r\n    self.claim_sig = slice(_claim_sig, 28, 4)\r\n    for i in range(MAX_REWARDS):\r\n        current_token: address = self.reward_tokens[i]\r\n        new_token: address = _reward_tokens[i]\r\n        if current_token != ZERO_ADDRESS:\r\n            assert current_token == new_token  # dev: cannot modify existing reward token\r\n        elif new_token != ZERO_ADDRESS:\r\n            self.reward_tokens[i] = new_token\r\n        else:\r\n            break\r\n\r\n    if _reward_contract != ZERO_ADDRESS:\r\n        # do an initial checkpoint to verify that claims are working\r\n        self._checkpoint_rewards(ZERO_ADDRESS, total_supply, False, ZERO_ADDRESS)\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef set_rewards(_reward_contract: address, _claim_sig: bytes32, _reward_tokens: address[MAX_REWARDS]):\r\n    \"\"\"\r\n    @notice Set the active reward contract\r\n    @dev A reward contract cannot be set while this contract has no deposits\r\n    @param _reward_contract Reward contract address. Set to ZERO_ADDRESS to\r\n                            disable staking.\r\n    @param _claim_sig Four byte selectors for staking, withdrawing and claiming,\r\n                 left padded with zero bytes. If the reward contract can\r\n                 be claimed from but does not require staking, the staking\r\n                 and withdraw selectors should be set to 0x00\r\n    @param _reward_tokens List of claimable reward tokens. New reward tokens\r\n                          may be added but they cannot be removed. When calling\r\n                          this function to unset or modify a reward contract,\r\n                          this array must begin with the already-set reward\r\n                          token addresses.\r\n    \"\"\"\r\n    assert msg.sender == AUTHORIZER_ADAPTOR  # dev: only owner\r\n    self._set_rewards(_reward_contract, _claim_sig, _reward_tokens)\r\n\r\n# Initializer\r\n\r\n@external\r\ndef initialize(_lp_token: address, _reward_contract: address, _claim_sig: bytes32):\r\n    \"\"\"\r\n    @notice Contract constructor\r\n    @param _lp_token Liquidity Pool contract address\r\n    \"\"\"\r\n    assert self.lp_token == ZERO_ADDRESS\r\n    assert _lp_token != ZERO_ADDRESS\r\n\r\n    self.lp_token = _lp_token\r\n\r\n    symbol: String[32] = ERC20Extended(_lp_token).symbol()\r\n    name: String[64] = concat(\"Balancer \", symbol, \" RewardGauge Deposit\")\r\n\r\n    self.name = name\r\n    self.symbol = concat(symbol, \"-gauge\")\r\n\r\n    self.DOMAIN_SEPARATOR = keccak256(\r\n        _abi_encode(EIP712_TYPEHASH, keccak256(name), keccak256(VERSION), chain.id, self)\r\n    )\r\n\r\n    # Initialise connection to ChildChainStreamer contract\r\n    reward_tokens: address[MAX_REWARDS] = empty(address[MAX_REWARDS])\r\n    reward_tokens[0] = BAL_TOKEN\r\n    self._set_rewards(_reward_contract, _claim_sig, reward_tokens)", "ABI": "[{\"name\":\"Deposit\",\"inputs\":[{\"name\":\"provider\",\"type\":\"address\",\"indexed\":true},{\"name\":\"value\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"Withdraw\",\"inputs\":[{\"name\":\"provider\",\"type\":\"address\",\"indexed\":true},{\"name\":\"value\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"Transfer\",\"inputs\":[{\"name\":\"_from\",\"type\":\"address\",\"indexed\":true},{\"name\":\"_to\",\"type\":\"address\",\"indexed\":true},{\"name\":\"_value\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"Approval\",\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\",\"indexed\":true},{\"name\":\"_spender\",\"type\":\"address\",\"indexed\":true},{\"name\":\"_value\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"inputs\":[{\"name\":\"_bal_token\",\"type\":\"address\"},{\"name\":\"_vault\",\"type\":\"address\"},{\"name\":\"_authorizerAdaptor\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"decimals\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"version\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"reward_contract\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"last_claim\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"claimed_reward\",\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"claimable_reward\",\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"reward_data\",\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"tuple\",\"components\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"distributor\",\"type\":\"address\"},{\"name\":\"period_finish\",\"type\":\"uint256\"},{\"name\":\"rate\",\"type\":\"uint256\"},{\"name\":\"last_update\",\"type\":\"uint256\"},{\"name\":\"integral\",\"type\":\"uint256\"}]}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"claimable_reward_write\",\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"set_rewards_receiver\",\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"claim_rewards\",\"inputs\":[],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"claim_rewards\",\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"claim_rewards\",\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_receiver\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"deposit\",\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"deposit\",\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_addr\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"deposit\",\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_claim_rewards\",\"type\":\"bool\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"withdraw\",\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"withdraw\",\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_claim_rewards\",\"type\":\"bool\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"transfer\",\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"transferFrom\",\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"allowance\",\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"approve\",\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"permit\",\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_deadline\",\"type\":\"uint256\"},{\"name\":\"_v\",\"type\":\"uint8\"},{\"name\":\"_r\",\"type\":\"bytes32\"},{\"name\":\"_s\",\"type\":\"bytes32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"increaseAllowance\",\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_added_value\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"decreaseAllowance\",\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtracted_value\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"set_rewards\",\"inputs\":[{\"name\":\"_reward_contract\",\"type\":\"address\"},{\"name\":\"_claim_sig\",\"type\":\"bytes32\"},{\"name\":\"_reward_tokens\",\"type\":\"address[8]\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"initialize\",\"inputs\":[{\"name\":\"_lp_token\",\"type\":\"address\"},{\"name\":\"_reward_contract\",\"type\":\"address\"},{\"name\":\"_claim_sig\",\"type\":\"bytes32\"}],\"outputs\":[]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"lp_token\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"balanceOf\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"totalSupply\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"name\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"symbol\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"DOMAIN_SEPARATOR\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"nonces\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"reward_tokens\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"reward_balances\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"rewards_receiver\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"claim_sig\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"reward_integral\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"reward_integral_for\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"},{\"name\":\"arg1\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]}]", "ContractName": "Vyper_contract", "CompilerVersion": "vyper:0.3.1", "OptimizationUsed": "0", "Runs": "0", "ConstructorArguments": "0000000000000000000000009a71012b13ca4d3d0cdc72a177df3ef03b0e76a3000000000000000000000000ba12222222228d8ba445958a75a0704d566bf2c8000000000000000000000000c128468b7ce63ea702c1f104d55a2566b13d3abd", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}