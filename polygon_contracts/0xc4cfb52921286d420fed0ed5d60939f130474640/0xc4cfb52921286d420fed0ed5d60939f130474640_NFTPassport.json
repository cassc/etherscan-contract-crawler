{"SourceCode": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastvalue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastvalue;\n                // Update the index for the moved value\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n}\n\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal initializer {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal initializer {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n    uint256[50] private __gap;\n}\n\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal initializer {\n        __Context_init_unchained();\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal initializer {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n    uint256[49] private __gap;\n}\n\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControlUpgradeable {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n\n\n/**\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\n */\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\n}\n\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSetUpgradeable {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastvalue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastvalue;\n                // Update the index for the moved value\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal initializer {\n        __ERC165_init_unchained();\n    }\n\n    function __ERC165_init_unchained() internal initializer {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n    uint256[50] private __gap;\n}\n\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControlUpgradeable is\n    Initializable,\n    ContextUpgradeable,\n    IAccessControlUpgradeable\n{\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 internal constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role, _msgSender());\n        _;\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        StringsUpgradeable.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        StringsUpgradeable.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    function _grantRole(bytes32 role, address account) internal {  // here it's internal not private as in openzeppelin\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    function _revokeRole(bytes32 role, address account) internal {  // here it's internal not private as in openzeppelin\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n    uint256[10] private __gap_AccessControlUpgradeable;\n}\n\n\n/**\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\n */\nabstract contract AccessControlEnumerableUpgradeable is Initializable, IAccessControlEnumerableUpgradeable, AccessControlUpgradeable {\n\n//    depends on:\n//        __Context_init_unchained();\n//        __ERC165_init_unchained();\n\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\n\n    mapping(bytes32 => EnumerableSetUpgradeable.AddressSet) internal _roleMembers;\n\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) public view override returns (address) {\n        return _roleMembers[role].at(index);\n    }\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) public view override returns (uint256) {\n        return _roleMembers[role].length();\n    }\n\n    /**\n     * @dev Overload {grantRole} to track enumerable memberships\n     */\n    function grantRole(bytes32 role, address account) public virtual override(AccessControlUpgradeable, IAccessControlUpgradeable) {\n        super.grantRole(role, account);\n        _roleMembers[role].add(account);\n    }\n\n    /**\n     * @dev Overload {revokeRole} to track enumerable memberships\n     */\n    function revokeRole(bytes32 role, address account) public virtual override(AccessControlUpgradeable, IAccessControlUpgradeable) {\n        super.revokeRole(role, account);\n        _roleMembers[role].remove(account);\n    }\n\n    /**\n     * @dev Overload {renounceRole} to track enumerable memberships\n     */\n    function renounceRole(bytes32 role, address account) public virtual override(AccessControlUpgradeable, IAccessControlUpgradeable) {\n        super.renounceRole(role, account);\n        _roleMembers[role].remove(account);\n    }\n\n    /**\n     * @dev Overload {_setupRole} to track enumerable memberships\n     */\n    function _setupRole(bytes32 role, address account) internal virtual override {\n        super._setupRole(role, account);\n        _roleMembers[role].add(account);\n    }\n    uint256[10] private __gap_AccessControlEnumerableUpgradeable;\n}\n\n\ninterface IAccessStorage {\n    function getUint256Setting(bytes32) external view returns (uint256);\n}\n\ninterface ICheckConfiguratorAllowedSelector {\n    function checkConfiguratorAllowedSelector(bytes32 selector) external view returns(bool);\n}\n\nlibrary SettingsStorage {\n    using Strings for uint256;\n\n    event MinUint256SettingChanged(address contractAddress, bytes32 indexed setting, uint256 value);\n    event MaxUint256SettingChanged(address contractAddress, bytes32 indexed setting, uint256 value);\n    event Uint256SettingChanged(address contractAddress, bytes32 indexed setting, uint256 value);\n    event AddressSettingChanged(address contractAddress, bytes32 indexed setting, address value);\n\n    struct Layout {\n        mapping(bytes32 => uint256) uint256Settings;\n        mapping(bytes32 => address) addressSettings;\n        mapping(bytes32 => uint256) uint256SettingsMin;\n        mapping(bytes32 => uint256) uint256SettingsMax;\n    }\n\n    bytes32 internal constant STORAGE_SLOT =\n        keccak256('storage.SettingsStorage');\n\n    function layout() internal pure returns (Layout storage l) {\n        bytes32 slot = STORAGE_SLOT;\n        assembly {\n            l.slot := slot\n        }\n    }\n\n    function setUint256SettingMinMax(bytes32 setting, uint256 min, uint256 max) external {\n        Layout storage l = layout();\n        require(setting != bytes32(0), \"setting is zero\");\n        l.uint256SettingsMin[setting] = min;\n        l.uint256SettingsMax[setting] = max;\n        emit MinUint256SettingChanged(address(this), setting, min);\n        emit MaxUint256SettingChanged(address(this), setting, max);\n    }\n\n    function setUint256SettingMin(bytes32 setting, uint256 value) public {\n        Layout storage l = layout();\n        require(setting != bytes32(0), \"setting is zero\");\n        l.uint256SettingsMin[setting] = value;\n        emit MinUint256SettingChanged(address(this), setting, value);\n    }\n\n    function setUint256SettingMax(bytes32 setting, uint256 value) public {\n        Layout storage l = layout();\n        require(setting != bytes32(0), \"setting is zero\");\n        l.uint256SettingsMax[setting] = value;\n        emit MaxUint256SettingChanged(address(this), setting, value);\n    }\n\n    function strAndBytes32(string memory str, bytes32 b) public pure returns (string memory) {\n        return string(abi.encodePacked(str, uint256(b).toHexString(32)));\n    }\n\n    function setUint256Setting(bytes32 setting, uint256 value) external {\n        Layout storage l = layout();\n        require(setting != bytes32(0), \"setting is zero\");\n\n        uint256 min = l.uint256SettingsMin[setting];\n        uint256 max = l.uint256SettingsMax[setting];\n        require(value >= min, strAndBytes32(\"value < min: \", setting));\n        if (max != 0) {\n            require(value <= max, strAndBytes32(\"value > max: \", setting));\n        }\n\n        l.uint256Settings[setting] = value;\n        emit Uint256SettingChanged(address(this), setting, value);\n    }\n\n    function getUint256Setting(bytes32 setting) internal view returns (uint256) {\n        Layout storage l = layout();\n        return l.uint256Settings[setting];\n    }\n\n    function setAddressSetting(bytes32 setting, address value) external {\n        Layout storage l = layout();\n        l.addressSettings[setting] = value;\n        emit AddressSettingChanged(address(this), setting, value);\n    }\n\n    function getAddressSetting(bytes32 setting) internal view returns (address) {\n        Layout storage l = layout();\n        return l.addressSettings[setting];\n    }\n}\n\n/// @title AccessUtils\n/// @notice Utility functions\ncontract AccessUtils {\n    function getUint256SettingAccessIdentifier(bytes32 setting) public pure returns (bytes32) {\n        bytes32 accessIdentifier = keccak256(abi.encodePacked(\n            bytes4(keccak256(bytes(\"setUint256Setting(bytes32,uint256)\"))),\n            setting\n        ));\n        return accessIdentifier;\n    }\n}\n\n/// @title useful access features of combination of Roles model and Ownable\nabstract contract Access is ICheckConfiguratorAllowedSelector, OwnableUpgradeable, AccessControlEnumerableUpgradeable {\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\n    using EnumerableSet for EnumerableSet.Bytes32Set;\n\n    bytes32 constant internal CONFIGURATOR_ROLE = keccak256(\"CONFIGURATOR_ROLE\");\n    bytes32 constant internal CONFIGURATOR_ALLOWED_SELECTORS_SLOT = keccak256(\"Access.CONFIGURATOR_ALLOWED_SELECTORS.slot\");\n\n    function __Access_init(address ownerValue) internal initializer {\n        __Ownable_init_unchained();\n        __Access_init_unchained(ownerValue);\n    }\n\n    function __Access_init_unchained(address ownerValue) internal {\n        transferOwnership(ownerValue);\n        _setupRole(CONFIGURATOR_ROLE, address(this));  // grant itself role\n    }\n\n    event CallSetUint256Setting(address caller, address contractAddress, bytes32 setting, uint256 value);\n\n    function setUint256Setting(bytes32 setting, uint256 value) external {\n        emit CallSetUint256Setting(msg.sender, address(this), setting, value);\n        bytes32 accessIdentifier = keccak256(abi.encodePacked(\n            bytes4(keccak256(bytes(\"setUint256Setting(bytes32,uint256)\"))),\n            setting\n        ));\n        _checkOwnerOrConfiguratorAllowedSelector(accessIdentifier);\n        _setUint256Setting(setting, value);\n    }\n\n    function _setUint256Setting(bytes32 setting, uint256 value) internal {\n        SettingsStorage.setUint256Setting(setting, value);\n    }\n\n    function setUint256SettingMinMax(bytes32 setting, uint256 min, uint256 max) external onlyOwner {\n        SettingsStorage.setUint256SettingMinMax(setting, min, max);\n    }\n\n    function _setUint256SettingMinMax(bytes32 setting, uint256 min, uint256 max) internal {\n        SettingsStorage.setUint256SettingMinMax(setting, min, max);\n    }\n\n    function _setUint256SettingMin(bytes32 setting, uint256 min) internal {\n        SettingsStorage.setUint256SettingMin(setting, min);\n    }\n\n    function _setUint256SettingMax(bytes32 setting, uint256 max) internal {\n        SettingsStorage.setUint256SettingMax(setting, max);\n    }\n\n    // note: exposes all storage variables to read\n    function getUint256Setting(bytes32 setting) public view returns (uint256) {\n        return SettingsStorage.getUint256Setting(setting);\n    }\n\n    function setAddressSetting(bytes32 setting, address value) external {\n        bytes32 accessIdentifier = keccak256(abi.encodePacked(bytes4(keccak256(bytes(\"setAddressSetting(bytes32,address)\"))), setting));\n        _checkOwnerOrConfiguratorAllowedSelector(accessIdentifier);\n        _setAddressSetting(setting, value);\n    }\n\n    function _setAddressSetting(bytes32 setting, address value) internal {\n        SettingsStorage.setAddressSetting(setting, value);\n    }\n\n    function getAddressSetting(bytes32 setting) public view returns (address) {\n        return SettingsStorage.getAddressSetting(setting);\n    }\n\n    function _configuratorAllowedSelectorsSet() private pure returns (EnumerableSet.Bytes32Set storage set) {\n        bytes32 slot = CONFIGURATOR_ALLOWED_SELECTORS_SLOT;\n        assembly {\n            set.slot := slot\n        }\n    }\n\n    event ConfiguratorAllowedSelectorSet(bytes32 selector, bool value);\n\n    function checkConfiguratorAllowedSelector(bytes32 selector) external override view returns(bool) {\n        // note: we store bytes32\n        //   for selector we store bytes32(bytes4(selector))\n        return _configuratorAllowedSelectorsSet().contains(selector);\n    }\n\n    function _enableConfiguratorSelector(bytes32 _id) internal {\n        _configuratorAllowedSelectorsSet().add(_id);\n        emit ConfiguratorAllowedSelectorSet(_id, true);\n    }\n\n    function _enableConfiguratorUint256Setting(bytes32 settingKey) internal {\n        bytes32 accessIdentifier = keccak256(abi.encodePacked(\n            bytes4(keccak256(bytes(\"setUint256Setting(bytes32,uint256)\"))),\n            settingKey\n        ));\n        _enableConfiguratorSelector(accessIdentifier);\n    }\n\n    function setConfiguratorAllowedSelector(bytes32 selector, bool value) external onlyOwner {\n        if (value) {\n            _configuratorAllowedSelectorsSet().add(selector);\n            emit ConfiguratorAllowedSelectorSet(selector, true);\n        } else {\n            _configuratorAllowedSelectorsSet().remove(selector);\n            emit ConfiguratorAllowedSelectorSet(selector, false);\n        }\n    }\n\n    function getConfiguratorAllowedSelectorAt(uint256 index) public view returns (bytes32) {\n        return _configuratorAllowedSelectorsSet().at(index);\n    }\n\n    /// @notice Grant role to account\n    /// @param role role\n    /// @param account account\n    function grantRole(bytes32 role, address account) public virtual override onlyOwner {\n        _grantRole(role, account);\n        _roleMembers[role].add(account);\n    }\n\n    /// @notice Revokes role from account\n    /// @param role role\n    /// @param account account\n    function revokeRole(bytes32 role, address account) public virtual override onlyOwner {\n        _revokeRole(role, account);\n        _roleMembers[role].remove(account);\n    }\n\n    function _checkOwnerOrConfiguratorAllowedSelector(bytes32 selector) internal view {\n        if (msg.sender != owner()) {\n            require(hasRole(CONFIGURATOR_ROLE, msg.sender), \"not the owner or configurator\");\n            require(_configuratorAllowedSelectorsSet().contains(selector), \"disallowed selector\");\n        }\n    }\n\n    modifier onlyOwnerOrConfigurator(bytes4 selector) {\n        // this is a trick to save contract size because modifier is copied in place\n        _checkOwnerOrConfiguratorAllowedSelector(bytes32(selector));\n        _;\n    }\n}\n\n\ninterface IPayments {\n    function hasMandatoryOverduePayments(uint256 userId) external view returns (bool);\n}\n\nabstract contract PaymentsStorage is Access {\n    bytes32 internal constant PAYMENTS_SETTING_KEY = keccak256(\"PAYMENTS_SETTING_KEY\");\n\n    function paymentsStorage() internal view returns (IPayments) {\n        return IPayments(getAddressSetting(PAYMENTS_SETTING_KEY));\n    }\n\n    function hasMandatoryOverduePayments(uint256 userId) internal view returns (bool) {\n        return paymentsStorage().hasMandatoryOverduePayments(userId);\n    }\n}\n\n\n/// @title Utils\nlibrary Utils {\n    function ensureNotZero(address addr) internal pure returns(address) {\n        require(addr != address(0), \"ZERO_ADDRESS\");\n        return addr;\n    }\n\n    modifier onlyNotZeroAddress(address addr) {\n        require(addr != address(0), \"ZERO_ADDRESS\");\n        _;\n    }\n}\n\n\n/// @title TreasuryStorage\nabstract contract TreasuryStorage is\n    Access\n{\n    using Utils for address;\n    address public treasury;\n    event TreasurySet(address indexed treasury);\n\n    function __TreasuryStorage_init_unchained(address treasuryAddress) internal {\n        treasury = treasuryAddress;\n    }\n\n    /// @notice Set new \"treasury\" setting value (only contract owner may call)\n    /// @param treasuryAddress new setting value\n    function setTreasury(address treasuryAddress) public onlyOwner {\n        treasury = treasuryAddress.ensureNotZero();\n        emit TreasurySet(treasuryAddress);\n    }\n}\n\n\n/// @title CoinStorage\nabstract contract CoinStorage {\n    using Utils for address;\n    address public coin;\n\n    function __CoinStorage_init_unchained(address coinAddress) internal {\n        coin = coinAddress.ensureNotZero();\n    }\n}\n\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n\n\n/**\n * @dev Implementation of the {IERC721Receiver} interface.\n *\n * Accepts all token transfers.\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\n */\ncontract ERC721Holder is IERC721Receiver {\n    /**\n     * @dev See {IERC721Receiver-onERC721Received}.\n     *\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address,\n        address,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n}\n\n\ninterface IERC721MintReturningTokenId is IERC721 {\n    function mint() external returns(uint256 tokenId);\n}\n\n\n/// @title AvatarsMixinBase\nabstract contract AvatarsMixinBase is Access, ERC721Holder {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    address internal _defaultAvatarSmartContractAddress;  // is not set for non-passport\n    EnumerableSet.AddressSet internal _availableAvatarSmartContractAddresses;\n    struct Avatar {\n        address avatarSmartContract;\n        uint256 avatarTokenId;\n    }\n    mapping (uint256 /*passport or membership tokenId*/ => Avatar) public tokenAvatar;\n\n    event DefaultAvatarSmartContractAddressSet(address indexed value);\n    event AvailableAvatarSmartContractAddressAdded(address indexed value);\n    event AvailableAvatarSmartContractAddressRemoved(address indexed value);\n    event AvatarSet(\n        uint256 indexed tokenId,\n        address indexed avatarSmartContract,\n        uint256 indexed avatarTokenId\n    );\n\n    function _getDefaultAvatarSmartContractAddress() internal view virtual returns(address) {\n        return _defaultAvatarSmartContractAddress;\n    }\n\n    function _mintDefaultAvatarAndConnectToToken(uint256 tokenId) internal {\n        address _dflt = _getDefaultAvatarSmartContractAddress();\n        require(_dflt != address(0), \"defaultAvatarSmartContractAddress not set\");\n        uint256 avatarTokenId = IERC721MintReturningTokenId(_dflt).mint();\n        tokenAvatar[tokenId] = Avatar({\n            avatarSmartContract: _dflt,\n            avatarTokenId: avatarTokenId\n        });\n        emit AvatarSet(tokenId, _dflt, avatarTokenId);\n    }\n\n    /// @notice clear avatar (on burn)\n    /// @param tokenId token id\n    /// @param to send avatar to the account\n    function _clearAvatar(uint256 tokenId, address to) internal {\n        Avatar memory currentAvatar = tokenAvatar[tokenId];\n        delete tokenAvatar[tokenId];\n        IERC721(currentAvatar.avatarSmartContract).safeTransferFrom(address(this), to, currentAvatar.avatarTokenId);\n        emit AvatarSet(tokenId, address(0), 0);\n    }\n\n    function _checkAvailableAvatarSmartContractAddress(address avatarSmartContractAddress) internal virtual view returns(bool) {\n        return (\n            _availableAvatarSmartContractAddresses.contains(avatarSmartContractAddress) ||\n            (avatarSmartContractAddress == _getDefaultAvatarSmartContractAddress())\n        );\n    }\n\n    /// @notice set avatar on token\n    /// @param tokenId token id\n    /// @param avatarSmartContract new avatar SmartContract\n    /// @param avatarTokenId new avatar TokenId\n    function setAvatar(uint256 tokenId, address avatarSmartContract, uint256 avatarTokenId) external {\n        require(\n            IERC721(address(this)).ownerOf(tokenId) == msg.sender,\n            \"not owner\"\n        );\n        require(\n            _checkAvailableAvatarSmartContractAddress(avatarSmartContract),\n            \"wrong avatarSmartContract\"\n        );\n        Avatar memory currentAvatar = tokenAvatar[tokenId];\n        tokenAvatar[tokenId] = Avatar(avatarSmartContract, avatarTokenId);\n        IERC721(currentAvatar.avatarSmartContract).safeTransferFrom(address(this), msg.sender, currentAvatar.avatarTokenId);\n        IERC721(avatarSmartContract).safeTransferFrom(msg.sender, address(this), avatarTokenId);\n        emit AvatarSet(tokenId, avatarSmartContract, avatarTokenId);\n    }\n\n    /// @notice add some address to list of AvailableAvatarSmartContractAddress\n    /// @param availableAvatarSmartContractAddress some address\n    function addAvailableAvatarSmartContractAddress(address availableAvatarSmartContractAddress) public onlyOwnerOrConfigurator(bytes4(keccak256(\"addAvailableAvatarSmartContractAddress(address)\"))) {\n        require(availableAvatarSmartContractAddress != address(0), \"zero address\");\n        _availableAvatarSmartContractAddresses.add(availableAvatarSmartContractAddress);\n        emit AvailableAvatarSmartContractAddressAdded(availableAvatarSmartContractAddress);\n    }\n\n    /// @notice remove address from AvailableAvatarSmartContractAddress\n    /// @param availableAvatarSmartContractAddress some address\n    function removeAvailableAvatarSmartContractAddress(address availableAvatarSmartContractAddress) public onlyOwnerOrConfigurator(bytes4(keccak256(\"removeAvailableAvatarSmartContractAddress(address)\"))) {\n        _availableAvatarSmartContractAddresses.remove(availableAvatarSmartContractAddress);\n        emit AvailableAvatarSmartContractAddressRemoved(availableAvatarSmartContractAddress);\n    }\n\n    /// @notice return the length of _availableAvatarSmartContractAddresses\n    /// @return length\n    function availableAvatarSmartContractAddressesLength() external view returns(uint256) {\n        return _availableAvatarSmartContractAddresses.length();\n    }\n\n    /// @notice address at index in _availableAvatarSmartContractAddresses\n    /// @param index index\n    /// @return address\n    function availableAvatarSmartContractAddressAt(uint256 index) external view returns(address) {\n        return _availableAvatarSmartContractAddresses.at(index);\n    }\n}\n\n\n/// @title AvatarsMixin\nabstract contract AvatarsMixinPassport is AvatarsMixinBase {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    function defaultAvatarSmartContractAddress() public view returns(address) {\n        return _getDefaultAvatarSmartContractAddress();\n    }\n\n    function checkAvailableAvatarSmartContractAddress(address avatarSmartContractAddress) public view returns(bool){\n        return _checkAvailableAvatarSmartContractAddress(avatarSmartContractAddress);\n    }\n\n    /// @notice Set new \"DefaultAvatarSmartContractAddress\" setting value (only contract owner may call)\n    /// @param value new setting value\n    function setDefaultAvatarSmartContractAddress(address value) external onlyOwnerOrConfigurator(bytes4(keccak256(\"setDefaultAvatarSmartContractAddress(address)\"))) {\n        _setDefaultAvatarSmartContractAddress(value);\n    }\n\n    function _setDefaultAvatarSmartContractAddress(address value) internal {\n        require(value != address(0), \"zero address\");\n        _defaultAvatarSmartContractAddress = value;\n        emit DefaultAvatarSmartContractAddressSet(value);\n    }\n}\n\n\ninterface INFTPassportForAvatars {\n    function defaultAvatarSmartContractAddress() external view returns(address);\n    function checkAvailableAvatarSmartContractAddress(address avatarSmartContractAddress) external view returns(bool);\n}\n\n\nabstract contract AvatarsMixinMembership is AvatarsMixinBase {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    function _getNFTPassportForAvatars() internal view virtual returns(address) {\n        revert(\"not implemented\");  // implemented in NFTCommunityMembership\n    }\n\n    function _getDefaultAvatarSmartContractAddress() internal view override virtual returns(address) {\n        return INFTPassportForAvatars(_getNFTPassportForAvatars()).defaultAvatarSmartContractAddress();\n    }\n\n    function _checkAvailableAvatarSmartContractAddress(address avatarSmartContractAddress) internal virtual override view returns(bool) {\n        return (\n            _availableAvatarSmartContractAddresses.contains(avatarSmartContractAddress) ||\n            INFTPassportForAvatars(_getNFTPassportForAvatars()).checkAvailableAvatarSmartContractAddress(avatarSmartContractAddress)\n        );\n    }\n}\n\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721Upgradeable is IERC165Upgradeable {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721ReceiverUpgradeable {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\n    using AddressUpgradeable for address;\n    using StringsUpgradeable for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    function __ERC721_init(string memory name_, string memory symbol_) internal initializer {\n        __Context_init_unchained();\n        __ERC165_init_unchained();\n        __ERC721_init_unchained(name_, symbol_);\n    }\n\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal initializer {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\n        return\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overriden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\n\n        _operatorApprovals[_msgSender()][operator] = approved;\n        emit ApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n    uint256[44] private __gap;\n}\n\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721EnumerableUpgradeable is IERC721Upgradeable {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n\n\n/**\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\n * enumerability of all the token ids in the contract as well as all token ids owned by each\n * account.\n */\nabstract contract ERC721EnumerableUpgradeable is Initializable, ERC721Upgradeable, IERC721EnumerableUpgradeable {\n    function __ERC721Enumerable_init() internal initializer {\n        __Context_init_unchained();\n        __ERC165_init_unchained();\n        __ERC721Enumerable_init_unchained();\n    }\n\n    function __ERC721Enumerable_init_unchained() internal initializer {\n    }\n    // Mapping from owner to list of owned token IDs\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\n\n    // Mapping from token ID to index of the owner tokens list\n    mapping(uint256 => uint256) private _ownedTokensIndex;\n\n    // Array with all token ids, used for enumeration\n    uint256[] private _allTokens;\n\n    // Mapping from token id to position in the allTokens array\n    mapping(uint256 => uint256) private _allTokensIndex;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165Upgradeable, ERC721Upgradeable) returns (bool) {\n        return interfaceId == type(IERC721EnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721Upgradeable.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\n        return _ownedTokens[owner][index];\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _allTokens.length;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenByIndex}.\n     */\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721EnumerableUpgradeable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\n        return _allTokens[index];\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, tokenId);\n\n        if (from == address(0)) {\n            _addTokenToAllTokensEnumeration(tokenId);\n        } else if (from != to) {\n            _removeTokenFromOwnerEnumeration(from, tokenId);\n        }\n        if (to == address(0)) {\n            _removeTokenFromAllTokensEnumeration(tokenId);\n        } else if (to != from) {\n            _addTokenToOwnerEnumeration(to, tokenId);\n        }\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\n     * @param to address representing the new owner of the given token ID\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n     */\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\n        uint256 length = ERC721Upgradeable.balanceOf(to);\n        _ownedTokens[to][length] = tokenId;\n        _ownedTokensIndex[tokenId] = length;\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's token tracking data structures.\n     * @param tokenId uint256 ID of the token to be added to the tokens list\n     */\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\n        _allTokensIndex[tokenId] = _allTokens.length;\n        _allTokens.push(tokenId);\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\n     * @param from address representing the previous owner of the given token ID\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n     */\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = ERC721Upgradeable.balanceOf(from) - 1;\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary\n        if (tokenIndex != lastTokenIndex) {\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\n\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n        }\n\n        // This also deletes the contents at the last position of the array\n        delete _ownedTokensIndex[tokenId];\n        delete _ownedTokens[from][lastTokenIndex];\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's token tracking data structures.\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\n     */\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = _allTokens.length - 1;\n        uint256 tokenIndex = _allTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\n\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n\n        // This also deletes the contents at the last position of the array\n        delete _allTokensIndex[tokenId];\n        _allTokens.pop();\n    }\n    uint256[46] private __gap;\n}\n\n\n/**\n * @title ERC721 Burnable Token\n * @dev ERC721 Token that can be irreversibly burned (destroyed).\n */\nabstract contract ERC721BurnableUpgradeable is Initializable, ContextUpgradeable, ERC721Upgradeable {\n    function __ERC721Burnable_init() internal initializer {\n        __Context_init_unchained();\n        __ERC165_init_unchained();\n        __ERC721Burnable_init_unchained();\n    }\n\n    function __ERC721Burnable_init_unchained() internal initializer {\n    }\n    /**\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\n     *\n     * Requirements:\n     *\n     * - The caller must own `tokenId` or be an approved operator.\n     */\n    function burn(uint256 tokenId) public virtual {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721Burnable: caller is not owner nor approved\");\n        _burn(tokenId);\n    }\n    uint256[50] private __gap;\n}\n\n\n/**\n * @dev ERC721 token with storage based token URI management.\n */\nabstract contract ERC721URIStorageUpgradeable is Initializable, ERC721Upgradeable {\n    function __ERC721URIStorage_init() internal initializer {\n        __Context_init_unchained();\n        __ERC165_init_unchained();\n        __ERC721URIStorage_init_unchained();\n    }\n\n    function __ERC721URIStorage_init_unchained() internal initializer {\n    }\n    using StringsUpgradeable for uint256;\n\n    // Optional mapping for token URIs\n    mapping(uint256 => string) private _tokenURIs;\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721URIStorage: URI query for nonexistent token\");\n\n        string memory _tokenURI = _tokenURIs[tokenId];\n        string memory base = _baseURI();\n\n        // If there is no base URI, return the token URI.\n        if (bytes(base).length == 0) {\n            return _tokenURI;\n        }\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\n        if (bytes(_tokenURI).length > 0) {\n            return string(abi.encodePacked(base, _tokenURI));\n        }\n\n        return super.tokenURI(tokenId);\n    }\n\n    /**\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\n        require(_exists(tokenId), \"ERC721URIStorage: URI set of nonexistent token\");\n        _tokenURIs[tokenId] = _tokenURI;\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual override {\n        super._burn(tokenId);\n\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\n            delete _tokenURIs[tokenId];\n        }\n    }\n    uint256[49] private __gap;\n}\n\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSAUpgradeable {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s;\n        uint8 v;\n        assembly {\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n            v := add(shr(255, vs), 27)\n        }\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n\n\n/**\n * @dev Interface of the ERC1271 standard signature validation method for\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\n *\n * _Available since v4.1._\n */\ninterface IERC1271Upgradeable {\n    /**\n     * @dev Should return whether the signature provided is valid for the provided data\n     * @param hash      Hash of the data to be signed\n     * @param signature Signature byte array associated with _data\n     */\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\n}\n\n\n/**\n * @dev Signature verification helper: Provide a single mechanism to verify both private-key (EOA) ECDSA signature and\n * ERC1271 contract sigantures. Using this instead of ECDSA.recover in your contract will make them compatible with\n * smart contract wallets such as Argent and Gnosis.\n *\n * Note: unlike ECDSA signatures, contract signature's are revocable, and the outcome of this function can thus change\n * through time. It could return true at block N and false at block N+1 (or the opposite).\n *\n * _Available since v4.1._\n */\nlibrary SignatureCheckerUpgradeable {\n    function isValidSignatureNow(\n        address signer,\n        bytes32 hash,\n        bytes memory signature\n    ) internal view returns (bool) {\n        (address recovered, ECDSAUpgradeable.RecoverError error) = ECDSAUpgradeable.tryRecover(hash, signature);\n        if (error == ECDSAUpgradeable.RecoverError.NoError && recovered == signer) {\n            return true;\n        }\n\n        (bool success, bytes memory result) = signer.staticcall(\n            abi.encodeWithSelector(IERC1271Upgradeable.isValidSignature.selector, hash, signature)\n        );\n        return (success && result.length == 32 && abi.decode(result, (bytes4)) == IERC1271Upgradeable.isValidSignature.selector);\n    }\n}\n\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * _Available since v3.4._\n */\nabstract contract EIP712Upgradeable is Initializable {\n    /* solhint-disable var-name-mixedcase */\n    bytes32 private _HASHED_NAME;\n    bytes32 private _HASHED_VERSION;\n    bytes32 private constant _TYPE_HASH = keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\n\n    /* solhint-enable var-name-mixedcase */\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    function __EIP712_init(string memory name, string memory version) internal initializer {\n        __EIP712_init_unchained(name, version);\n    }\n\n    function __EIP712_init_unchained(string memory name, string memory version) internal initializer {\n        bytes32 hashedName = keccak256(bytes(name));\n        bytes32 hashedVersion = keccak256(bytes(version));\n        _HASHED_NAME = hashedName;\n        _HASHED_VERSION = hashedVersion;\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        return _buildDomainSeparator(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash());\n    }\n\n    function _buildDomainSeparator(\n        bytes32 typeHash,\n        bytes32 nameHash,\n        bytes32 versionHash\n    ) private view returns (bytes32) {\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n\n    /**\n     * @dev The hash of the name parameter for the EIP712 domain.\n     *\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\n     * are a concern.\n     */\n    function _EIP712NameHash() internal virtual view returns (bytes32) {\n        return _HASHED_NAME;\n    }\n\n    /**\n     * @dev The hash of the version parameter for the EIP712 domain.\n     *\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\n     * are a concern.\n     */\n    function _EIP712VersionHash() internal virtual view returns (bytes32) {\n        return _HASHED_VERSION;\n    }\n    uint256[50] private __gap;\n}\n\n\n/// @title TransferTaxStorage\nabstract contract TransferTaxStorage is\n    Access,\n    CoinStorage,\n    TreasuryStorage\n{\n    using SafeERC20 for IERC20;\n\n    uint256 private ____DEPRECATED_transferTax;\n    bytes32 internal constant TRANSFER_TAX_SETTING_KEY = keccak256(\"TRANSFER_TAX_SETTING_KEY\");\n\n    event NoTransferTaxAccountSet(address indexed account, bool flag);\n\n    mapping(address => bool) public isNoTransferTaxAccount;\n\n    function _ownStorage_transferTax() internal view returns(uint256) {\n        return getUint256Setting(TRANSFER_TAX_SETTING_KEY);\n    }\n\n    function transferTax() internal view returns(uint256) {\n        uint256 value = getUint256Setting(TRANSFER_TAX_SETTING_KEY);\n        if (value == 0) {\n            value = IAccessStorage(treasury).getUint256Setting(TRANSFER_TAX_SETTING_KEY);\n        }\n        return value;\n    }\n\n    function _setTransferTax(uint256 transferTaxValue) internal {\n        _setUint256Setting(TRANSFER_TAX_SETTING_KEY, transferTaxValue);\n    }\n\n    function setNoTransferTaxAccount(address account, bool flag) external onlyOwnerOrConfigurator(bytes4(keccak256(\"setNoTransferTaxAccount(address,bool)\"))) {\n        _setNoTransferTaxAccount(account, flag);\n    }\n\n    function _setNoTransferTaxAccount(address account, bool flag) internal {\n        isNoTransferTaxAccount[account] = flag;\n        emit NoTransferTaxAccountSet(account, flag);\n    }\n\n    function transferTaxIfNeeded(address from) internal {\n        if (isNoTransferTaxAccount[msg.sender] || isNoTransferTaxAccount[from]) {\n            return;\n        }\n        uint256 tax = transferTax();\n        if (tax == 0) {\n            return;\n        }\n        IERC20(coin).safeTransferFrom(from, treasury, tax);\n    }\n}\n\n\ninterface ISaleTax is IERC165 {\n    /// @notice get information for sale on marketplace, how much taxAmount should be transferred to treasury\n    ///     based on tokenId and price amount\n    /// @param tokenId id of the token to sale\n    /// @param salePrice sale price amount\n    /// @return taxAmount tax amount to charge\n    function saleTax(uint256 tokenId, uint256 salePrice) external view returns(uint256 taxAmount);\n}\n\n\nabstract contract DenominatorStorage {\n    uint256 constant internal DENOMINATOR = 10000;\n}\n\n\n/// @title SaleTaxNumeratorStorageBase\nabstract contract SaleTaxNumeratorStorageBase is Access, DenominatorStorage {\n    uint256 private ____DEPRECATED_saleTaxNumerator;\n    uint256 constant internal MAX_TAX_NUMERATOR = 500;  // 5%\n    bytes32 internal constant SALE_TAX_NUMERATOR_SETTING_KEY = keccak256(\"SALE_TAX_NUMERATOR_SETTING_KEY\");\n\n    function saleTaxNumerator() internal view returns(uint256) {\n        return getUint256Setting(SALE_TAX_NUMERATOR_SETTING_KEY);\n    }\n\n    function _setSaleTaxNumerator(uint256 value) internal {\n        _setUint256Setting(SALE_TAX_NUMERATOR_SETTING_KEY, value);\n    }\n\n    function __SaleTaxNumeratorStorage_init_unchained(uint saleTaxNumeratorValue) internal {\n        require(saleTaxNumeratorValue <= MAX_TAX_NUMERATOR, \"TAX_IS_TOO_HIGH\");\n        _setSaleTaxNumerator(saleTaxNumeratorValue);\n    }\n\n    function _saleTax(uint256 salePrice) internal view returns(uint256 taxAmount) {\n        taxAmount = saleTaxNumerator() * salePrice / DENOMINATOR;\n    }\n}\n\n\n/// @title SaleTaxNumeratorStorage\nabstract contract SaleTaxNumeratorStorage is ISaleTax, SaleTaxNumeratorStorageBase {\n    /// @inheritdoc ISaleTax\n    function saleTax(uint256 tokenId, uint256 salePrice) external view override returns(uint256 taxAmount) {\n        taxAmount = saleTaxNumerator() * salePrice / DENOMINATOR;\n    }\n\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns(bool) {\n        return interfaceId == type(ISaleTax).interfaceId;\n    }\n}\n\n\n/// @title MintPriceStorage\nabstract contract MintPriceStorage is\n    Access,\n    CoinStorage,\n    TreasuryStorage\n{\n    using SafeERC20 for IERC20;\n    uint256 private ____DEPRECATED_mintPrice;  // reserve old storage slot for upgrade\n    bytes32 internal constant MINT_PRICE_SETTING_KEY = keccak256(\"MINT_PRICE_SETTING_KEY\");\n\n    function mintPrice() internal view returns(uint256) {\n        return getUint256Setting(MINT_PRICE_SETTING_KEY);\n    }\n}\n\n\n/// @title ERC721 with offchain marketplace and some other general features\ncontract NFTWalletOwnershipPauserMintPriceTransferTaxBase is\n    Initializable,\n    EIP712Upgradeable,\n    Access,\n    CoinStorage,\n    TreasuryStorage,\n    TransferTaxStorage,\n    MintPriceStorage,\n    ERC721EnumerableUpgradeable,\n    ERC721BurnableUpgradeable,\n    SaleTaxNumeratorStorage\n{\n    using SafeERC20 for IERC20;\n\n    uint256 internal _lastTokenId;  // note: start from 1\n\n    function __NFTWalletOwnershipPauserMintPriceTransferTaxBase_init(\n        string memory name_,\n        string memory symbol_,\n        string memory version,\n        address coinAddress,\n        address treasuryAddress,\n        uint256 mintPriceValue,\n        uint256 transferTaxValue,\n        uint256 saleTaxNumeratorValue,\n        address ownerValue\n    ) internal {\n        __Context_init_unchained();\n        __ERC165_init_unchained();\n        __Ownable_init_unchained();\n        __Access_init_unchained(ownerValue);\n\n        __ERC721_init_unchained(name_, symbol_);\n\n        __ERC721Enumerable_init_unchained();\n        __ERC721Burnable_init_unchained();\n\n//        __Pausable_init_unchained();\n//        __ERC721Pausable_init_unchained();\n\n        __EIP712_init_unchained(name_, version);\n        __CoinStorage_init_unchained(coinAddress);\n        __TreasuryStorage_init_unchained(treasuryAddress);\n        __SaleTaxNumeratorStorage_init_unchained(saleTaxNumeratorValue);\n\n        _setTransferTax(transferTaxValue);\n        _setUint256Setting(MINT_PRICE_SETTING_KEY, mintPriceValue);\n    }\n\n    event MintPricePaid(address indexed payer, uint256 indexed tokenId, uint256 amount);\n\n    function _mintPayingPrice(address to, uint256 tokenId, uint256 _mintPrice, address payTo) internal virtual {\n        if (_mintPrice != 0) {\n            IERC20(coin).safeTransferFrom(_msgSender(), payTo, _mintPrice);\n        }\n        emit MintPricePaid(_msgSender(), tokenId, _mintPrice);\n        super._mint(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        require(\n            _isApprovedOrOwner(_msgSender(), tokenId),\n            \"ERC721: transfer caller is not owner nor approved\");\n        transferTaxIfNeeded(from);\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        transferTaxIfNeeded(from);\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual override(ERC721Upgradeable, ERC721EnumerableUpgradeable) {\n//    ) internal virtual override(ERC721Upgradeable, ERC721EnumerableUpgradeable) {\n        if ((from != address(0)) && (to != address(0))){\n            require(!transfersNotAllowed, \"transfers are not allowed\");\n        }\n\n        super._beforeTokenTransfer(from, to, tokenId);\n    }\n\n    function supportsInterface(bytes4 interfaceId) public virtual override(ERC721Upgradeable, ERC721EnumerableUpgradeable, SaleTaxNumeratorStorage) view returns(bool) {\n        return ERC721EnumerableUpgradeable.supportsInterface(interfaceId) ||\n            SaleTaxNumeratorStorage.supportsInterface(interfaceId)\n        ;\n    }\n\n    function burn(uint256 tokenId) public onlyOwnerOrConfigurator(bytes4(keccak256(\"burn(uint256)\"))) virtual override {  // warning: centralization power\n        _burn(tokenId);\n    }\n\n\n    bool public transfersNotAllowed;\n\n    event TransfersNotAllowedSet(bool value);\n\n    /// @notice Set new \"transfersNotAllowed\" setting value (only contract owner may call)\n    /// @param value new setting value\n    function setTransfersNotAllowed(bool value) external onlyOwnerOrConfigurator(bytes4(keccak256(\"setTransfersNotAllowed(bool)\"))) {\n        transfersNotAllowed = value;\n        emit TransfersNotAllowedSet(value);\n    }\n\n    string public baseURI;\n\n    function _baseURI() internal view override returns (string memory) {\n        return baseURI;\n    }\n\n    event BaseURISet(string value);\n\n    /// @notice Set new \"baseURI\" setting value (only contract owner may call)\n    /// @param value new setting value\n    function setBaseURI(string memory value) external onlyOwner {\n        baseURI = value;\n        emit BaseURISet(value);\n    }\n}\n\n\nabstract contract AmbassadorStorage is EIP712Upgradeable, Access {\n    using SignatureCheckerUpgradeable for address;\n\n    bytes32 internal constant AMBASSADOR_VERIFIER_ROLE = keccak256(\"AMBASSADOR_VERIFIER_ROLE\");\n    bytes32 internal constant AMBASSADOR_PRICE_SETTING_KEY = keccak256(\"AMBASSADOR_PRICE_SETTING_KEY\");\n    bytes32 internal constant AMBASSADOR_REWARD_SETTING_KEY = keccak256(\"AMBASSADOR_REWARD_SETTING_KEY\");\n\n    uint256 private ____DEPRECATED_ambassadorPrice;\n    uint256 private ____DEPRECATED_ambassadorReward;\n\n    function ambassadorPrice() internal view returns(uint256) {\n        return getUint256Setting(AMBASSADOR_PRICE_SETTING_KEY);\n    }\n\n    function ambassadorReward() internal view returns(uint256) {\n        return getUint256Setting(AMBASSADOR_REWARD_SETTING_KEY);\n    }\n\n    event AmbassadorRewardPaid(\n        address indexed minter,\n        address indexed ambassador,\n        uint256 indexed tokenId,\n        uint256 reward\n    );\n\n    event AmbassadorRewardManyPaid(\n        address indexed minter,\n        address indexed ambassador,\n        uint256 indexed startTokenId,\n        uint256 mintedTokensAmount,\n        uint256 totalReward\n    );\n\n    // to avoid re-using the same signature twice\n    mapping (address /*user*/ => mapping (address /*verifier*/ => mapping(uint256 /*nonce*/ => bool /*used*/))) public userVerifierNonceIsUsed;\n\n    function mintViaAmbassadorDigest(\n        address minter,\n        address ambassador,\n        uint256 nonce,\n        uint256 deadline\n    ) public view returns(bytes32 digest) {\n        digest = _hashTypedDataV4(keccak256(abi.encode(\n            keccak256(\"mintViaAmbassador(address minter,address ambassador,uint256 nonce,uint256 deadline)\"),\n            minter,\n            ambassador,\n            nonce,\n            deadline\n        )));\n    }\n\n    function _checkMintViaAmbassadorSignature(\n        address minter,\n        address ambassador,\n        uint256 nonce,\n        uint256 deadline,\n        address signer,\n        bytes memory signature\n    ) internal {\n        require(block.timestamp < deadline, \"EXPIRED\");\n        bytes32 digest = mintViaAmbassadorDigest({\n            minter: minter,\n            ambassador: ambassador,\n            nonce: nonce,\n            deadline: deadline\n        });\n\n        require(!userVerifierNonceIsUsed[msg.sender][signer][nonce], \"NONCE_ALREADY_USED\");\n        userVerifierNonceIsUsed[msg.sender][signer][nonce] = true;\n        require(signer != address(0), \"SIGNER_IS_ZERO_ADDRESS\");\n        require(signer.isValidSignatureNow({hash: digest, signature: signature}), \"INVALID_SIGNATURE\");\n        require(hasRole(AMBASSADOR_VERIFIER_ROLE, signer), \"SIGNER_HAS_NO_VERIFIER_ROLE\");\n    }\n\n    function _checkMintManyViaAmbassadorSignature(\n        address minter,\n        address ambassador,\n        uint256 amount,\n        uint256 nonce,\n        uint256 deadline,\n        address signer,\n        bytes memory signature\n    ) internal {\n        require(block.timestamp < deadline, \"EXPIRED\");\n        bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n            keccak256(\"mintManyViaAmbassador(address minter,address ambassador,uint256 amount,uint256 nonce,uint256 deadline)\"),\n            minter,\n            ambassador,\n            amount,\n            nonce,\n            deadline\n        )));\n\n        require(!userVerifierNonceIsUsed[msg.sender][signer][nonce], \"NONCE_ALREADY_USED\");\n        userVerifierNonceIsUsed[msg.sender][signer][nonce] = true;\n        require(signer != address(0), \"SIGNER_IS_ZERO_ADDRESS\");\n        require(signer.isValidSignatureNow({hash: digest, signature: signature}), \"INVALID_SIGNATURE\");\n        require(hasRole(AMBASSADOR_VERIFIER_ROLE, signer), \"SIGNER_HAS_NO_VERIFIER_ROLE\");\n    }\n}\n\n\nabstract contract DocsCustodyStorage is Access {\n    event DocsCustodySet(address indexed value);\n    address public docsCustody;\n\n    /// @notice set docs custody\n    /// @param value new address\n    function setDocsCustody(address value) external onlyOwner {\n        require(docsCustody != value, \"unchanged value\");\n        docsCustody = value;\n        emit DocsCustodySet(value);\n    }\n}\n\n\n/// @title PowerPointsOnFinalizeStorage\nabstract contract PowerPointsOnFinalizeStorage is Access {\n    uint256 private ____DEPRECATED_powerPointsOnFinalize;\n\n    bytes32 internal constant POWER_POINTS_ON_FINALIZE_SETTING_KEY =\n        keccak256(\"POWER_POINTS_ON_FINALIZE_SETTING_KEY\");\n\n    function powerPointsOnFinalize() public view returns (uint256) {\n        return getUint256Setting(POWER_POINTS_ON_FINALIZE_SETTING_KEY);\n    }\n\n    function _setPowerPointsOnFinalize(uint256 powerPointsOnFinalizeValue) internal {\n        _setUint256Setting(POWER_POINTS_ON_FINALIZE_SETTING_KEY, powerPointsOnFinalizeValue);\n    }\n}\n\n\n/// @title RestrictDebtorRightsStorage\nabstract contract RestrictDebtorRightsStorage is\n    Access\n{\n    bytes32 internal constant RESTRICT_DEBTOR_RIGHTS_SETTING_KEY = keccak256('RESTRICT_DEBTOR_RIGHTS_SETTING_KEY');\n\n    function _setRestrictDebtorRights(bool restrictDebtorRights_) internal {\n        _setUint256Setting(RESTRICT_DEBTOR_RIGHTS_SETTING_KEY, restrictDebtorRights_ ? 1: 0);\n    }\n\n    function restrictDebtorRights() internal view returns (bool) {\n        return getUint256Setting(RESTRICT_DEBTOR_RIGHTS_SETTING_KEY) != 0;\n    }\n}\n\n\ninterface INFTCommunityStatus\n{\n    enum Status {\n        None,\n        InProgress,\n        Accepted,\n        Declined,\n        Founded,\n        Expired\n    }\n}\n\n/**\n * @title NFT NfC is an ERC721 token confirming the founding of a community.\n */\ninterface INFTCommunity is INFTCommunityStatus\n{\n    /// @notice the number of parties where the account is participating\n    /// @param account account\n    /// @return count number of parties\n    function membershipsNumber(address account) external view returns(uint256 count);\n\n    /// @notice community token id of the account by the index\n    /// @param account account\n    /// @param index index\n    /// @return communityId community token id\n    function membershipByIndex(address account, uint256 index) external view returns(uint256 communityId);\n\n    function transferMembership(address from, address to) external;\n\n    function assignMembership(address account) external;\n\n    function resignMembership(address account) external;\n\n    struct TokenInfoData {\n        uint256 mintedTimestamp;\n        Status status;\n        uint256 votes;\n        address nftCommunityMembership;\n        address nftDraftCommunityRules;\n        address nftCommunityRules;\n        address nftNomineeForCommunityLeader;\n        address nftCommunityLeader;\n        address communityVotingWindow;\n        address treasury;\n        address payments;\n    }\n\n    /// @notice get token info\n    /// @param tokenId token id\n    function getTokenInfo(uint256 tokenId) external view returns(\n        TokenInfoData memory\n    );\n\n    /// @notice get related contract address\n    /// @param tokenId token id\n    /// @return contract address\n    function getNFTCommunityMembership(uint256 tokenId) external view returns(address);\n\n    /// @notice get related contract address\n    /// @param tokenId token id\n    /// @return contract address\n    function getNFTCommunityDraftRules(uint256 tokenId) external view returns(address);\n\n    /// @notice get related contract address\n    /// @param tokenId token id\n    /// @return contract address\n    function getNFTCommunityRules(uint256 tokenId) external view returns(address);\n\n    /// @notice get related contract address\n    /// @param tokenId token id\n    /// @return contract address\n    function getNFTNomineeForCommunityLeader(uint256 tokenId) external view returns(address);\n\n    /// @notice get related contract address\n    /// @param tokenId token id\n    /// @return contract address\n    function getNFTCommunityLeader(uint256 tokenId) external view returns(address);\n\n    /// @notice get related contract address\n    /// @param tokenId token id\n    /// @return contract address\n    function getCommunityVotingWindow(uint256 tokenId) external view returns(address);\n}\n\n\ninterface IPowerPointsBooster {\n    /// @notice Boost power points\n    /// @param points power points\n    /// @return boosted power points\n    function boostPowerPoints(uint256 points) external view returns(uint256);\n}\n\n\nlibrary PromoLib {\n    bytes32 internal constant PROMO_VERIFIER_ROLE = keccak256(\"PROMO_VERIFIER_ROLE\");\n    bytes32 internal constant PROMO_PRICE_SETTING_KEY = keccak256(\"PROMO_PRICE_SETTING_KEY\");\n    bytes32 internal constant PROMO_USER_NONCE_MAPPING = keccak256(\"PROMO_USER_NONCE_MAPPING\");\n\n    function promoPrice() internal view returns(uint256) {\n        return SettingsStorage.getUint256Setting(PROMO_PRICE_SETTING_KEY);\n    }\n\n    struct UserNonce {\n        mapping (\n            address /*user*/ => mapping (address /*verifier*/ => mapping(uint256 /*nonce*/ => bool /*used*/))\n        ) userVerifierNonceIsUsed;\n    }\n\n    function promoUserVerifierNonceIsUsed() internal view returns(\n        mapping (address => mapping (address => mapping(uint256 => bool))) storage\n    ) {\n        UserNonce storage userNonce;\n        bytes32 slot = PROMO_USER_NONCE_MAPPING;\n        assembly {\n            userNonce.slot := slot\n        }\n        return userNonce.userVerifierNonceIsUsed;\n    }\n\n    function getPromoUserVerifierNonceIsUsed(\n        address user,\n        address verifier,\n        uint256 nonce\n    ) internal view returns(bool) {\n        return promoUserVerifierNonceIsUsed()[user][verifier][nonce];\n    }\n\n    function usePromoUserVerifierNonce(\n        address user,\n        address verifier,\n        uint256 nonce\n    ) internal {\n        require(!promoUserVerifierNonceIsUsed()[user][verifier][nonce], \"NONCE_ALREADY_USED\");\n        promoUserVerifierNonceIsUsed()[user][verifier][nonce] = true;\n    }\n}\n\nabstract contract PromoStorage is EIP712Upgradeable, Access {\n    using SignatureCheckerUpgradeable for address;\n\n    event PromoPricePaid(\n        address indexed minter,\n        address indexed verifier,\n        uint256 indexed tokenId,\n        uint256 promoPrice,\n        uint256 nonce\n    );\n\n    function mintWithPromoPriceDigest(\n        address minter,\n        uint256 promoPrice,\n        uint256 nonce,\n        uint256 deadline\n    ) public view returns(bytes32 digest) {\n        digest = _hashTypedDataV4(keccak256(abi.encode(\n            keccak256(\"mintWithPromoPrice(address minter,uint256 promoPrice,uint256 nonce,uint256 deadline)\"),\n            minter,\n            promoPrice,\n            nonce,\n            deadline\n        )));\n    }\n\n    function _checkMintWithPromoPriceSignature(\n        address minter,\n        uint256 promoPrice,\n        uint256 nonce,\n        uint256 deadline,\n        address signer,\n        bytes memory signature\n    ) internal {\n        require(block.timestamp < deadline, \"EXPIRED\");\n        require(promoPrice == PromoLib.promoPrice(), \"INVALID_PROMO_PRICE\");\n        bytes32 digest = mintWithPromoPriceDigest({\n            minter: minter,\n            promoPrice: promoPrice,\n            nonce: nonce,\n            deadline: deadline\n        });\n        PromoLib.usePromoUserVerifierNonce(minter, signer, nonce);\n        require(signer != address(0), \"SIGNER_IS_ZERO_ADDRESS\");\n        require(signer.isValidSignatureNow({hash: digest, signature: signature}), \"INVALID_SIGNATURE\");\n        require(hasRole(PromoLib.PROMO_VERIFIER_ROLE, signer), \"SIGNER_HAS_NO_VERIFIER_ROLE\");\n    }\n}\n\n\nlibrary Z {}\ninterface IAvatarsHolder {\n    struct Avatar {\n        address avatarSmartContract;\n        uint256 avatarTokenId;\n    }\n    function tokenAvatar(uint256 tokenId) external view returns (address avatarSmartContract, uint256 avatarTokenId);\n}\n\ninterface IPM is IERC721Enumerable {\n    function burnTransferringProperty(\n        uint256 tokenId,\n        uint256 maxBatchSize,\n        uint256 currentBatchSize\n    ) external returns(bool, uint256);\n}\n\ninterface IDocsCustodyTransfer {\n    function transferToDocsCustody(\n        uint256 tokenId,\n        address docsCustody\n    ) external;\n}\n\ninterface IBurnOnBurn {\n    function burnOnBurn(uint256 tokenId) external;\n}\n\ninterface INFTCommunityMembershipStorage {\n    function nftCommunityMembership() external view returns(address);\n}\n\n/// @dev this is a huge logic just to burn NFTs\nlibrary NFTPassportBurnUtils {\n    bytes32 internal constant NFT_ACT = keccak256(\"NFT_ACT\");\n    bytes32 internal constant NFT_LEGISLATIVE_INITIATIVE = keccak256(\"NFT_LEGISLATIVE_INITIATIVE\");\n    bytes32 internal constant NFT_BILL = keccak256(\"NFT_BILL\");\n    bytes32 internal constant NFT_COMMUNITY = keccak256(\"NFT_COMMUNITY\");\n    bytes32 internal constant NFT_NOMINEE_FOR_CANDIDATE = keccak256(\"NFT_NOMINEE_FOR_CANDIDATE\");\n    bytes32 internal constant NFT_NOMINEE_FOR_PRESIDENT = keccak256(\"NFT_NOMINEE_FOR_PRESIDENT\");\n    bytes32 internal constant NFT_PRESIDENT = keccak256(\"NFT_PRESIDENT\");\n\n    function transferAllToCustody(\n        mapping (bytes32 => address) storage contractsRegistry,\n        bytes32 contractCode,\n        address account,\n        uint256 maxBatchSize,\n        uint256 currentBatchSize,\n        address docsCustody\n    ) internal returns (bool finished, uint256 /*currentBatchSize*/) {\n        address contractAddress = contractsRegistry[contractCode];\n        require(contractAddress != address(0), \"WRONG_SETUP\");\n\n        uint256 tokensNumber = IERC721Enumerable(contractAddress).balanceOf(account);\n        uint256 restBatchSize = maxBatchSize - currentBatchSize;\n        uint256 numberToProcess = 0;\n        if (tokensNumber <= restBatchSize) {\n            finished = true;\n            numberToProcess = tokensNumber;\n        } else {\n            finished = false;\n            numberToProcess = restBatchSize;\n        }\n        for (uint256 _counter = 0; _counter < numberToProcess; ) {\n            IDocsCustodyTransfer(contractAddress).transferToDocsCustody({\n                tokenId: IERC721Enumerable(contractAddress).tokenOfOwnerByIndex(account, 0),\n                docsCustody: docsCustody\n            });\n            unchecked {\n                _counter += 1;\n            }\n        }\n        return (finished, currentBatchSize+numberToProcess);\n    }\n\n    function burnAll(\n        mapping (bytes32 => address) storage contractsRegistry,\n        bytes32 contractCode,\n        address account,\n        uint256 maxBatchSize,\n        uint256 currentBatchSize\n    ) internal returns (bool finished, uint256 /*currentBatchSize*/) {\n        address contractAddress = contractsRegistry[contractCode];\n        require(contractAddress != address(0), \"WRONG_SETUP\");\n\n        uint256 tokensNumber = IERC721Enumerable(contractAddress).balanceOf(account);\n        uint256 restBatchSize = maxBatchSize - currentBatchSize;\n        uint256 numberToProcess = 0;\n        if (tokensNumber <= restBatchSize) {\n            finished = true;\n            numberToProcess = tokensNumber;\n        } else {\n            finished = false;\n            numberToProcess = restBatchSize;\n        }\n        for (uint256 _counter = 0; _counter < numberToProcess; ) {\n            IBurnOnBurn(contractAddress).burnOnBurn({\n                tokenId: IERC721Enumerable(contractAddress).tokenOfOwnerByIndex(account, 0)\n            });\n            unchecked {\n                _counter += 1;\n            }\n        }\n        return (finished, currentBatchSize+numberToProcess);\n    }\n\n    function burnTransferringProperty(\n        mapping (bytes32 => address) storage contractsRegistry,\n        address account,\n        uint256 tokenId,\n        uint256 maxBatchSize,\n        address docsCustody\n    ) external returns(bool) {\n        uint256 currentBatchSize = 0;\n        bool finished;\n\n        (finished, currentBatchSize) = transferAllToCustody({\n            contractsRegistry: contractsRegistry,\n            contractCode: NFT_LEGISLATIVE_INITIATIVE,\n            account: account,\n            maxBatchSize: maxBatchSize,\n            currentBatchSize: currentBatchSize,\n            docsCustody: docsCustody\n        });\n        if (!finished) {\n            return false;\n        }\n\n        (finished, currentBatchSize) = transferAllToCustody({\n            contractsRegistry: contractsRegistry,\n            contractCode: NFT_BILL,\n            account: account,\n            maxBatchSize: maxBatchSize,\n            currentBatchSize: currentBatchSize,\n            docsCustody: docsCustody\n        });\n        if (!finished) {\n            return false;\n        }\n\n        (finished, currentBatchSize) = transferAllToCustody({\n            contractsRegistry: contractsRegistry,\n            contractCode: NFT_ACT,\n            account: account,\n            maxBatchSize: maxBatchSize,\n            currentBatchSize: currentBatchSize,\n            docsCustody: docsCustody\n        });\n        if (!finished) {\n            return false;\n        }\n\n        (finished, currentBatchSize) = burnAll({\n            contractsRegistry: contractsRegistry,\n            contractCode: NFT_NOMINEE_FOR_CANDIDATE,\n            account: account,\n            maxBatchSize: maxBatchSize,\n            currentBatchSize: currentBatchSize\n        });\n        if (!finished) {\n            return false;\n        }\n\n        (finished, currentBatchSize) = burnAll({\n            contractsRegistry: contractsRegistry,\n            contractCode: NFT_NOMINEE_FOR_PRESIDENT,\n            account: account,\n            maxBatchSize: maxBatchSize,\n            currentBatchSize: currentBatchSize\n        });\n        if (!finished) {\n            return false;\n        }\n\n        (finished, currentBatchSize) = burnAll({\n            contractsRegistry: contractsRegistry,\n            contractCode: NFT_PRESIDENT,\n            account: account,\n            maxBatchSize: maxBatchSize,\n            currentBatchSize: currentBatchSize\n        });\n        if (!finished) {\n            return false;\n        }\n\n        INFTCommunity nftCommunity = INFTCommunity(contractsRegistry[NFT_COMMUNITY]);\n        require(address(nftCommunity) != address(0), \"WRONG_SETUP\");\n        while (nftCommunity.membershipsNumber(account) != 0) {\n            uint256 communityId = nftCommunity.membershipByIndex(account, 0);\n            IPM pm = IPM(nftCommunity.getNFTCommunityMembership(communityId));\n            uint256 communityMembershipId = pm.tokenOfOwnerByIndex(account, 0);\n            (finished, currentBatchSize) = pm.burnTransferringProperty({\n                tokenId: communityMembershipId,\n                maxBatchSize: maxBatchSize,\n                currentBatchSize: currentBatchSize\n            });\n            if (!finished) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}\n\n/**\n * @title NFT Passport ERC721 token confirming citizenship.\n */\ncontract NFTPassport is\n    AmbassadorStorage,\n    AvatarsMixinPassport,\n    NFTWalletOwnershipPauserMintPriceTransferTaxBase,\n    DocsCustodyStorage,\n    PowerPointsOnFinalizeStorage,\n    PaymentsStorage,\n    RestrictDebtorRightsStorage,\n    PromoStorage\n{\n    using SafeERC20 for IERC20;\n    using SignatureCheckerUpgradeable for address;\n    mapping (bytes32 /*contractCode*/ => address /*contract*/) internal contractsRegistry;\n\n    // Each citizen receives PowerPoints (PP) for activity,\n    // which are recorded and stored in the NFT Passport for each ID.\n    mapping (uint256 /*tokenId*/ => uint256 /*points*/) public powerPoints;\n\n    // The NFT Passport records how many times a citizen has become President.\n    mapping (uint256 /*tokenId*/ => uint256 /*count*/) public presidentCounter;\n\n    uint256 private ____DEPRECATED_powerPointsBurnRateNumeratorOnTransfer;\n    bytes32 internal constant POWER_POINTS_BURN_RATE_NUMERATOR_ON_TRANSFER_SETTING_KEY = keccak256(\"POWER_POINTS_BURN_RATE_NUMERATOR_ON_TRANSFER_SETTING_KEY\");\n\n    function powerPointsBurnRateNumeratorOnTransfer() internal view returns(uint256) {\n        return getUint256Setting(POWER_POINTS_BURN_RATE_NUMERATOR_ON_TRANSFER_SETTING_KEY);\n    }\n\n    function _setPowerPointsBurnRateNumeratorOnTransfer(uint256 value) internal {\n        _setUint256Setting(POWER_POINTS_BURN_RATE_NUMERATOR_ON_TRANSFER_SETTING_KEY, value);\n    }\n\n    bytes32 internal constant ADD_POWER_POINTS_ROLE = keccak256(\"ADD_POWER_POINTS_ROLE\");\n    bytes32 internal constant ICO_MINTER_ROLE = keccak256(\"ICO_MINTER_ROLE\");\n    bytes32 internal constant RESTRICTED_MINTER_ROLE = keccak256(\"RESTRICTED_MINTER_ROLE\");\n    bytes32 internal constant INCREASE_PRESIDENT_COUNTER_ROLE = keccak256(\"INCREASE_PRESIDENT_COUNTER_ROLE\");\n\n    event ContractRegistered(bytes32 indexed contractCode, address indexed contractAddress);\n    event PowerPointsBurnOnTransfer(uint256 indexed tokenId, uint256 indexed burnPowerPoints, uint256 restPowerPoints);\n\n    /// @notice power points added to the citizen\n    /// @param tokenId passport ID\n    /// @param points power points added (boosted)\n    /// @param totalPoints total power points\n    /// @param originalPoints original power points\n    event PowerPointsAdded(uint256 indexed tokenId, uint256 points, uint256 totalPoints, uint256 originalPoints);\n\n    event PresidentCounterIncreased(uint256 indexed tokenId, uint256 newValue);\n\n    uint256 public maxAmountICO;\n\n    event MaxAmountICOSet(uint256 value);\n\n    /// @notice register related contract (could be called only once for every contract)\n    /// @param contractCode contract code\n    /// @param contractAddress contract address\n    function registerContract(bytes32 contractCode, address contractAddress) external onlyOwner {\n        require(contractsRegistry[contractCode] == address(0), \"ALREADY_SET\");\n        contractsRegistry[contractCode] = contractAddress;\n        emit ContractRegistered(contractCode, contractAddress);\n    }\n\n    function setMaxAmountICO(uint256 value) external onlyOwner {\n        require((\n                maxAmountICO > _lastTokenId ||\n                _lastTokenId == 0\n            ), \"CANNOT_CHANGE_FINISHED_ICO\");\n        require(maxAmountICO != value, \"UNCHANGED\");\n        maxAmountICO = value;\n        emit MaxAmountICOSet(value);\n    }\n\n    /// @notice initialize the contract\n    /// @param nameValue name\n    /// @param symbolValue symbol\n    /// @param versionValue version\n    /// @param treasuryAddress treasury to receive fees\n    /// @param coinAddress coin address\n    /// @param mintPriceValue mint price\n    /// @param transferTaxValue transfer tax\n    /// @param saleTaxNumeratorValue sale tax numerator value\n    /// @param ownerValue contract owner\n    function initialize(\n        string memory nameValue,\n        string memory symbolValue,\n        string memory versionValue,\n        address treasuryAddress,\n        address coinAddress,\n        uint256 mintPriceValue,\n        uint256 transferTaxValue,\n        uint256 saleTaxNumeratorValue,\n        uint256 powerPointsBurnRateNumeratorOnTransferValue,\n        address ownerValue\n    ) external virtual initializer {\n        __NFTWalletOwnershipPauserMintPriceTransferTaxBase_init({\n            name_: nameValue,\n            symbol_: symbolValue,\n            version: versionValue,\n            coinAddress: coinAddress,\n            treasuryAddress: treasuryAddress,\n            mintPriceValue: mintPriceValue,\n            transferTaxValue: transferTaxValue,\n            saleTaxNumeratorValue: saleTaxNumeratorValue,\n            ownerValue: ownerValue\n        });\n        require(powerPointsBurnRateNumeratorOnTransferValue <= DENOMINATOR, \"BURN_RATE_TOO_HIGH\");\n        _setPowerPointsBurnRateNumeratorOnTransfer(powerPointsBurnRateNumeratorOnTransferValue);\n\n        _enableConfiguratorUint256Setting(MINT_PRICE_SETTING_KEY);\n        _enableConfiguratorUint256Setting(AMBASSADOR_PRICE_SETTING_KEY);\n        _enableConfiguratorUint256Setting(AMBASSADOR_REWARD_SETTING_KEY);\n        _enableConfiguratorUint256Setting(RESTRICT_DEBTOR_RIGHTS_SETTING_KEY);\n        _setUint256SettingMinMax(RESTRICT_DEBTOR_RIGHTS_SETTING_KEY, 0, 1);\n        _enableConfiguratorUint256Setting(POWER_POINTS_ON_FINALIZE_SETTING_KEY);\n    }\n\n    event MintedDuringICO(address indexed minter, address indexed to, uint256 indexed tokenId);\n\n    // disabled since not is use\n//    /// @notice mint new passport during ICO (for free but only ICO_MINTER_ROLE can call)\n//    /// @param recipients list of recipients\n//    function mintICO(address[] memory recipients) external onlyRole(ICO_MINTER_ROLE) {\n//        uint256 currentTokenId = _lastTokenId;\n//         require(currentTokenId + recipients.length <= maxAmountICO, \"EXCEED_ICO_MAX_AMOUNT\");\n//        _lastTokenId = currentTokenId + recipients.length;\n//\n//        for (uint256 index=0; index < recipients.length; ++index) {\n//            address to = recipients[index];\n//            currentTokenId += 1;\n//            _mint(to, currentTokenId);\n//            emit MintedDuringICO({\n//                minter: _msgSender(),\n//                to: to,\n//                tokenId: currentTokenId\n//            });\n//            _mintDefaultAvatarAndConnectToToken(currentTokenId);\n//        }\n//    }\n\n    /// @notice mint new passport by owner or RESTRICTED_MINTER_ROLE (for free)\n    /// @param to recipient\n    /// @return tokenId minted token id\n    function mintRestricted(address to) external returns(uint256) {\n        require(msg.sender == owner() || hasRole(RESTRICTED_MINTER_ROLE, msg.sender), \"NOT_ALLOWED\");\n        uint256 currentTokenId = ++_lastTokenId;\n        _mint(to, currentTokenId);\n        _mintDefaultAvatarAndConnectToToken(currentTokenId);\n        return currentTokenId;\n    }\n\n    /// @notice mint new passport\n    function mint() external {\n        uint256 tokenId = ++_lastTokenId;  // note: id starts from 1\n        require(tokenId > maxAmountICO, \"ICO_NOT_FINISHED\");\n\n        _mintPayingPrice({\n            to: _msgSender(),\n            tokenId: tokenId,\n            _mintPrice: mintPrice(),\n            payTo: treasury\n        });\n\n        _mintDefaultAvatarAndConnectToToken(tokenId);\n    }\n\n    /// @notice mint new passport via ambassador\n    /// @param ambassador ambassador\n    /// @param nonce user verifier signature nonce\n    /// @param deadline signature deadline\n    /// @param verifier verifier\n    /// @param verifierSignature verifier signature\n    function mintViaAmbassador(\n        address ambassador,\n        uint256 nonce,\n        uint256 deadline,\n        address verifier,\n        bytes memory verifierSignature\n    ) external {\n        uint256 tokenId = ++_lastTokenId;  // note: id starts from 1\n        require(tokenId > maxAmountICO, \"ICO_NOT_FINISHED\");\n        _checkMintViaAmbassadorSignature({\n            minter: _msgSender(),\n            ambassador: ambassador,\n            nonce: nonce,\n            deadline: deadline,\n            signer: verifier,\n            signature: verifierSignature\n        });\n\n        _mintPayingPrice({\n            to: _msgSender(),\n            tokenId: tokenId,\n            _mintPrice: ambassadorPrice(),\n            payTo: address(this)\n        });\n\n        IERC20(coin).safeTransfer(treasury, ambassadorPrice()-ambassadorReward());\n        IERC20(coin).safeTransfer(ambassador, ambassadorReward());\n\n        emit AmbassadorRewardPaid({\n            minter: _msgSender(),\n            ambassador: ambassador,\n            tokenId: tokenId,\n            reward: ambassadorReward()\n        });\n\n        _mintDefaultAvatarAndConnectToToken(tokenId);\n    }\n\n    /// @notice mint new passport with a promo price\n    /// @param promoPrice price\n    /// @param nonce user verifier signature nonce\n    /// @param deadline signature deadline\n    /// @param verifier verifier\n    /// @param verifierSignature verifier signature\n    function mintWithPromoPrice(\n        uint256 promoPrice,\n        uint256 nonce,\n        uint256 deadline,\n        address verifier,\n        bytes memory verifierSignature\n    ) external {\n        uint256 tokenId = ++_lastTokenId;  // note: id starts from 1\n        _checkMintWithPromoPriceSignature({\n            minter: _msgSender(),\n            promoPrice: promoPrice,\n            nonce: nonce,\n            deadline: deadline,\n            signer: verifier,\n            signature: verifierSignature\n        });\n\n        _mintPayingPrice({\n            to: _msgSender(),\n            tokenId: tokenId,\n            _mintPrice: promoPrice,\n            payTo: treasury\n        });\n\n        emit PromoPricePaid({\n            minter: _msgSender(),\n            tokenId: tokenId,\n            verifier: verifier,\n            promoPrice: promoPrice,\n            nonce: nonce\n        });\n\n        _mintDefaultAvatarAndConnectToToken(tokenId);\n    }\n\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual override {\n        // Transfer / resale is only possible if AllowTransfers = True.\n        // ERC721AllowedTransfer\n\n        super._beforeTokenTransfer(from, to, tokenId);\n        // Only one NFT Passport can have one network address at a time.\n        // The recipient address must not have an NFT Passport.\n        if (to != address(0)){\n            require(balanceOf(to) == 0, \"ONLY_ONE_NFT_PASSPORT_PER_ACCOUNT\");\n\n            require(!isBanned[to], \"BANNED_RECEIVER\");  // note: tiny gas optimisation to skip the check on burn\n        }\n\n        uint256 burnPowerPoints = powerPoints[tokenId] * powerPointsBurnRateNumeratorOnTransfer() / DENOMINATOR;\n        powerPoints[tokenId] -= burnPowerPoints;\n        emit PowerPointsBurnOnTransfer(tokenId, burnPowerPoints, powerPoints[tokenId]);\n\n        // note: we do not reset the presidentCounter upon transfer\n    }\n\n    function _addPowerPoints(\n        uint256 tokenId,\n        uint256 points,\n        address avatarSmartContract\n    ) internal {\n        uint256 _boostedPoints;\n        if (avatarSmartContract != address(0)) {\n            // this is safe because:\n            //   1) we manually whitelist avatarSmartContract\n            //   2) we use it just for powerPoints calculations purposes (not for money transfer)\n            try IPowerPointsBooster(avatarSmartContract).boostPowerPoints({\n                points: points\n            }) returns(uint256 boostedPoints) {\n                _boostedPoints = boostedPoints;\n            } catch {\n                _boostedPoints = points;\n            }\n        } else {\n            _boostedPoints = points;\n        }\n\n        uint256 _newPoints = powerPoints[tokenId] + _boostedPoints;\n        powerPoints[tokenId] = _newPoints;\n        emit PowerPointsAdded(tokenId, _boostedPoints, _newPoints, points);\n    }\n\n    /// @notice add more power points to the passport onlyRole(ADD_POWER_POINTS_ROLE)\n    /// @param tokenId passport id\n    /// @param points points amount to add\n    function addPowerPoints(\n        uint256 tokenId,\n        uint256 points\n    ) external onlyRole(ADD_POWER_POINTS_ROLE) {\n        address avatarSmartContract = tokenAvatar[tokenId].avatarSmartContract;\n        _addPowerPoints(tokenId, points, avatarSmartContract);\n    }\n\n    /// @notice increase presidentCounter of the passport\n    /// @param tokenId passport id\n    function increasePresidentCounter(uint256 tokenId)\n        external onlyRole(INCREASE_PRESIDENT_COUNTER_ROLE)\n    {\n        presidentCounter[tokenId] += 1;\n        emit PresidentCounterIncreased(tokenId, presidentCounter[tokenId]);\n    }\n\n    event Banned(address indexed account);\n    event Unbanned(address indexed account);\n    mapping (address /*account*/ => bool /*is banned*/) public isBanned;\n\n    function _ban(address account) internal {\n        require(!isBanned[account], \"ALREADY_BANNED\");\n        isBanned[account] = true;\n        emit Banned(account);\n    }\n\n    function ban(address account) external onlyOwnerOrConfigurator(bytes4(keccak256(\"ban(address)\"))) {\n        require(balanceOf(account) == 0, \"has passport, use burn\");\n        _ban(account);\n    }\n\n    function unban(address account) external onlyOwnerOrConfigurator(bytes4(keccak256(\"unban(address)\"))) {\n        require(isBanned[account], \"NOT_BANNED\");\n        isBanned[account] = false;\n        emit Unbanned(account);\n    }\n\n    event BURN_TRANSFERRING_PROPERTY_UNFINISHED();\n    event BURN_TRANSFERRING_PROPERTY_FINISHED();\n\n    function burnTransferringProperty(\n        uint256 tokenId,\n        uint256 maxBatchSize,\n        bool banAccount\n    ) external onlyOwnerOrConfigurator(bytes4(keccak256(\"burnTransferringProperty(uint256,uint256,bool)\"))) {\n        address account = ownerOf(tokenId);\n        if (banAccount) {\n            _ban(account);\n        }\n\n        bool finished = NFTPassportBurnUtils.burnTransferringProperty({\n            contractsRegistry: contractsRegistry,\n            tokenId: tokenId,\n            maxBatchSize: maxBatchSize,\n            account: account,\n            docsCustody: docsCustody\n        });\n        if (!finished) {\n            emit BURN_TRANSFERRING_PROPERTY_UNFINISHED();\n            return;\n        }\n\n        _burn(tokenId);\n        emit BURN_TRANSFERRING_PROPERTY_FINISHED();\n    }\n\n    /// @notice burning NFT passport involves\n    ///     1. passport avatar is detached from the passport and transferred to the owner\n    ///     2. remove from enumeration - https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/v4.3.3/contracts/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol#L92\n    ///     3. clear storage: remove powerPoints, presidentCounter\n    function _burn(uint256 tokenId) internal virtual override {\n        _clearAvatar(tokenId, ownerOf(tokenId));\n        super._burn(tokenId);\n        delete powerPoints[tokenId];\n        delete presidentCounter[tokenId];\n    }\n\n    function checkRightsActive(uint256 tokenId) public view {\n        if (ownerOf(tokenId) == address(0)) {\n            // not exists\n            revert(\"NOT_EXISTS\");\n        }\n        if (!restrictDebtorRights()) {\n            // no restrictions\n            return;\n        }\n        if (hasMandatoryOverduePayments(tokenId)) {\n            // mandatory payments\n            revert(\"MANDATORY_PAYMENTS\");\n        } else {\n            return;\n        }\n    }\n\n    function lastTokenId() external view returns(uint256) {\n        return _lastTokenId;\n    }\n\n    uint256[10] private __gap_NFTPassport;\n}\n", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ambassador\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"startTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintedTokensAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalReward\",\"type\":\"uint256\"}],\"name\":\"AmbassadorRewardManyPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ambassador\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"AmbassadorRewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"AvailableAvatarSmartContractAddressAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"AvailableAvatarSmartContractAddressRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"avatarSmartContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"avatarTokenId\",\"type\":\"uint256\"}],\"name\":\"AvatarSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"BURN_TRANSFERRING_PROPERTY_FINISHED\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"BURN_TRANSFERRING_PROPERTY_UNFINISHED\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Banned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"name\":\"BaseURISet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"setting\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"CallSetUint256Setting\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"selector\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"ConfiguratorAllowedSelectorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"contractCode\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"ContractRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"DefaultAvatarSmartContractAddressSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"DocsCustodySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"MaxAmountICOSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MintPricePaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"MintedDuringICO\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"NoTransferTaxAccountSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"points\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalPoints\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"originalPoints\",\"type\":\"uint256\"}],\"name\":\"PowerPointsAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"burnPowerPoints\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"restPowerPoints\",\"type\":\"uint256\"}],\"name\":\"PowerPointsBurnOnTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"PresidentCounterIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"promoPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"PromoPricePaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"TransfersNotAllowedSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"}],\"name\":\"TreasurySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unbanned\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"availableAvatarSmartContractAddress\",\"type\":\"address\"}],\"name\":\"addAvailableAvatarSmartContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"points\",\"type\":\"uint256\"}],\"name\":\"addPowerPoints\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"availableAvatarSmartContractAddressAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"availableAvatarSmartContractAddressesLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ban\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxBatchSize\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"banAccount\",\"type\":\"bool\"}],\"name\":\"burnTransferringProperty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"avatarSmartContractAddress\",\"type\":\"address\"}],\"name\":\"checkAvailableAvatarSmartContractAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"selector\",\"type\":\"bytes32\"}],\"name\":\"checkConfiguratorAllowedSelector\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"checkRightsActive\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultAvatarSmartContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"docsCustody\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"setting\",\"type\":\"bytes32\"}],\"name\":\"getAddressSetting\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getConfiguratorAllowedSelectorAt\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"setting\",\"type\":\"bytes32\"}],\"name\":\"getUint256Setting\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"increasePresidentCounter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"nameValue\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbolValue\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"versionValue\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"treasuryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"coinAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"mintPriceValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transferTaxValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saleTaxNumeratorValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"powerPointsBurnRateNumeratorOnTransferValue\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"ownerValue\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBanned\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isNoTransferTaxAccount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAmountICO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mintRestricted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ambassador\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"verifierSignature\",\"type\":\"bytes\"}],\"name\":\"mintViaAmbassador\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ambassador\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"mintViaAmbassadorDigest\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"digest\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"promoPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"verifierSignature\",\"type\":\"bytes\"}],\"name\":\"mintWithPromoPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"promoPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"mintWithPromoPriceDigest\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"digest\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"powerPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"powerPointsOnFinalize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"presidentCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"contractCode\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"registerContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"availableAvatarSmartContractAddress\",\"type\":\"address\"}],\"name\":\"removeAvailableAvatarSmartContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"saleTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"taxAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"setting\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"setAddressSetting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"avatarSmartContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"avatarTokenId\",\"type\":\"uint256\"}],\"name\":\"setAvatar\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"selector\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setConfiguratorAllowedSelector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"setDefaultAvatarSmartContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"setDocsCustody\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setMaxAmountICO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"setNoTransferTaxAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setTransfersNotAllowed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"treasuryAddress\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"setting\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setUint256Setting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"setting\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"setUint256SettingMinMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenAvatar\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"avatarSmartContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"avatarTokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transfersNotAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"unban\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userVerifierNonceIsUsed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "NFTPassport", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "10", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "SettingsStorage:9a88589db7caee7416f0fe2e9a8af6ad3bfae4b3;NFTPassportBurnUtils:20fb0304b7226f4f33ab488b9572dec0e02ed48b", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}