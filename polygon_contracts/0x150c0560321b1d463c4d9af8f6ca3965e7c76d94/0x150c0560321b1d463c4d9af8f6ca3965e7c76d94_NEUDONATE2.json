{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.0;\r\n\r\ninterface Token{\r\n    function transferFrom(address,address,uint) external;\r\n    function transfer(address,uint) external;\r\n    function approve(address,uint) external;\r\n    function balanceOf(address) external view returns(uint);\r\n    function mint(address dst,uint256 wad)external;\r\n}\r\ninterface Neudonate{\r\n    function getUserInfo(address usr) external view returns(UserInfo memory user);\r\n    function getUsers() external view returns(address[] memory,uint);\r\n}\r\ninterface FarmLike{\r\n    function harvestForOther(address usr) external;\r\n    function deposit(address,uint) external;\r\n    function beharvest(address usr) external view returns (uint256);\r\n}\r\ninterface IUniswapV2Router{\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\nstruct UserInfo { \r\n        address    owner;\r\n        address    recommend;\r\n        address[]  under;\r\n        bool       white;\r\n        uint256    amount;\r\n        uint256[3] team;\r\n        uint256    hasten;\r\n        uint256    releaseAmount;\r\n        uint256    released;\r\n        uint256[2] reward;\r\n        uint256    releasFinish;\r\n        uint256    lastTime;\r\n        uint256    ethAmount;\r\n        uint256    vip;\r\n        uint256[4][]  depositList;\r\n        uint256[2][]  withdrawList;\r\n        uint256[3][]  ethList;\r\n        uint256[3][]  neuList;\r\n        RecommendInfo[]  recommendList;\r\n    }\r\n    struct RecommendInfo { \r\n        address    recommend;\r\n        uint256    amount;\r\n        uint256    what;\r\n        uint256    time;\r\n    }\r\ncontract NEUDONATE2  {\r\n\r\n    mapping (address => uint) public wards;\r\n    function rely(address usr) external  auth { wards[usr] = 1; }\r\n    function deny(address usr) external  auth { wards[usr] = 0; }\r\n    modifier auth {\r\n        require(wards[msg.sender] == 1, \"NEUDONATE2/not-authorized\");\r\n        _;\r\n    }\r\n    uint256                                           public  max = 50000*1E6;\r\n    uint256                                           public  rate = 200;\r\n    uint256                                           public  scale = 200;\r\n    uint256                                           public  compound = 5;\r\n    uint256[]                                         public  ratio = [4000000,1000000,500000,500000,500000,500000];\r\n    uint256[]                                         public  ass = [45,50,10,40,3];\r\n    uint256[]                                         public  recommendRate = [10,5];\r\n    uint256[]                                         public  teamAmount = [30000,100000,300000,1000000,3000000,10000000,20000000];\r\n    uint256[]                                         public  teamScale = [800000,300000,800000,1500000,2500000,3500000,4600000,5800000];\r\n    uint256                                           public  lastTime = 1695830400;\r\n    uint256                                           public  unlockTime = 1692460800;\r\n    uint256                                           public  base = 12688;\r\n    bool                                              public  pool;\r\n    bool                                              public  canMint = true;\r\n    bool                                              public  withETH;\r\n    bool                                              public  live =true;\r\n    uint256                                           public  tier = 100;\r\n    uint256                                           public  totalDeposit = 56800000000;\r\n    uint256                                           public  totalWith = 496462677;\r\n    uint256                                           public  totalEth = 3438413008028874324;\r\n    uint256                                           public  totalMint = 226534589152322182526794;\r\n    uint256                                           public  lastId;\r\n    uint256                                           public  lastCopyId;\r\n    address                                           public  fountaddress = 0xA3C5520363323364725b58149e9526d776d89046;\r\n    address                                           public  exchequer = 0x9fb3312C38d9fbE43022d5D4DdA14C9Ad1fd3c88;\r\n    address                                           public  NEU = 0xEeE1e6e2eAb894F30aD66cf933AC9369E6958b4A;\r\n    address                                           public  usdt = 0xc2132D05D31c914a87C6611C10748AEb04B58e8F;\r\n    address                                           private uniswapV2Router = 0xa5E0829CaCEd8fFDD4De3c43696c57F7D7A678ff;\r\n    address                                           public  ETH = 0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619;\r\n    address                                           public  neufoundFarm = 0xE7F1cB8D1E749d1A993a13ef67C1b425fdA33076;\r\n    address                                           public  usdtFarm = 0x72b18A24B7e09e136eD611E65F4977E6f7276140;\r\n    mapping (address => UserInfo)                     public  userInfo;\r\n    mapping (address => bool)                         public  role;\r\n    mapping (uint256 => uint256)                      public  dayDeposit;\r\n    mapping (uint256 => uint256)                      public  dayWith;\r\n    mapping (address => mapping(uint256 => uint256))  public  userDayTotal;\r\n    address[]                                         public  depositUsers;\r\n    Neudonate                                         public  neudonate = Neudonate(0xb414982D7feAC717D0AF8A5E5fd3336D9D1076aE);\r\n\r\n    event Withdraw( address  indexed  owner,\r\n                    uint256           wad\r\n                 );\r\n    constructor() {\r\n        wards[msg.sender] = 1;\r\n        init();\r\n    }\r\n    function global(uint256 what, uint data,address usr) external auth {\r\n        if (what == 1) max = data;                           \r\n        else if (what == 2) rate = data; \r\n        else if (what == 3) lastTime = data; \r\n        else if (what == 4) unlockTime = data;  \r\n        else if (what == 5) pool = !pool;                     \r\n        else if (what == 6) fountaddress = usr; \r\n        else if (what == 7) exchequer = usr;   \r\n        else if (what == 8) NEU = usr; \r\n        else if (what == 9) ETH = usr; \r\n        else if (what == 10) scale = data; \r\n        else if (what == 11) neufoundFarm = usr; \r\n        else if (what == 12) compound = data;\r\n        else if (what == 13) usdtFarm = usr;\r\n        else if (what == 14) tier = data;\r\n        else if (what == 15) userInfo[usr].white = !userInfo[usr].white;\r\n        else if (what == 16) userInfo[usr].amount = data;\r\n        else if (what == 17) userInfo[usr].team[0] = data;  \r\n        else if (what == 18) userInfo[usr].hasten = data;\r\n        else if (what == 19) userInfo[usr].releaseAmount = data;\r\n        else if (what == 20) userInfo[usr].released = data;\r\n        else if (what == 21) userInfo[usr].releasFinish = data;\r\n        else if (what == 22) userInfo[usr].lastTime = data;\r\n        else if (what == 23) userInfo[usr].ethAmount = data; \r\n        else if (what == 24) base = data;   \r\n        else if (what == 25) role[usr] = !role[usr]; \r\n        else if (what == 26) canMint = !canMint; \r\n        else if (what == 27) withETH = !withETH;\r\n        else if (what == 28) live = !live; \r\n        else if (what == 29) totalDeposit = data;\r\n        else if (what == 30) totalWith = data;\r\n        else if (what == 31) totalEth = data;\r\n        else if (what == 32) totalMint = data;      \r\n        else revert(\"NEUDONATE2/setdata-unrecognized-param\");\r\n    }\r\n    function setArry(uint what, uint[] memory data) external auth {                          \r\n        if (what == 1) ratio = data;   \r\n        else if (what == 2) recommendRate = data;  \r\n        else if (what == 3) teamAmount = data;\r\n        else if (what == 4) teamScale = data;  \r\n        else if (what == 5) ass = data;                                   \r\n        else revert(\"NEUDONATE2/1\");\r\n    }\r\n    function setTeamData(address usr, uint[3] memory data) external auth {                          \r\n        userInfo[usr].team = data;\r\n    }\r\n    function setRewardData(address usr, uint[2] memory data) external auth {                          \r\n        userInfo[usr].reward = data;\r\n    }\r\n    function setDepositListData(address usr, uint[4] memory data) external auth {                          \r\n        userInfo[usr].depositList.push(data);\r\n    } \r\n    function setWithdrawListData(address usr, uint[2] memory data) external auth {                          \r\n        userInfo[usr].withdrawList.push(data);\r\n    } \r\n    function setEthListData(address usr, uint[3] memory data) external auth {                          \r\n        userInfo[usr].ethList.push(data);\r\n    }\r\n    function setNeuListData(address usr, uint[3] memory data) external auth {                          \r\n        userInfo[usr].neuList.push(data);\r\n    } \r\n    function setDepoistUser(address usr) external auth {                          \r\n        depositUsers.push(usr);\r\n    } \r\n    function setdayDeposit(uint time , uint data) external auth {                          \r\n        dayDeposit[time]= data;\r\n    } \r\n    function setdayWith(uint time , uint data) external auth {                          \r\n        dayWith[time]= data;\r\n    }\r\n    function setuserDayTotal(address usr,uint time , uint data) external auth {                          \r\n        userDayTotal[usr][time]= data;\r\n    }   \r\n    function setRecommendInfoData(address usr, address recommend,uint amount,uint what,uint time) external auth {  \r\n        RecommendInfo memory list;\r\n                    list.recommend = recommend;\r\n                    list.amount = amount;\r\n                    list.what = what;\r\n                    list.time = time;\r\n        userInfo[usr].recommendList.push(list);                        \r\n    }\r\n    function setUser(uint256 what, uint data,address usr) external{  \r\n        require(role[msg.sender],\"NEUDONATE2/2\");                        \r\n        if (what == 1) userInfo[usr].white = !userInfo[usr].white;\r\n        else if (what == 2) userInfo[usr].amount = data;\r\n        else if (what == 3) userInfo[usr].team[0] = data;                                       \r\n        else revert(\"NEUDONATE2/3\");\r\n    }\r\n    function setVip(uint256 vip,address usr) external{  \r\n        require(role[msg.sender],\"NEUDONATE2/4\");                        \r\n        userInfo[usr].vip = vip;   \r\n    }\r\n    function setNeuPrice(uint256 price) external{  \r\n        require(role[msg.sender],\"NEUDONATE2/5\");                        \r\n        base = price;   \r\n    }\r\n    function setAuth(uint what,address usr,uint data) external auth returns(uint res){\r\n        if (what == 1) teamStatic(usr,data);                           \r\n        else if (what == 2) teamFeward(usr,data); \r\n        else if (what == 3) reward(usr,data); \r\n        else if (what == 4) res = swapUsdtForETH(data); \r\n        else if (what == 5) withUsdtForEth(data,usr);\r\n    }\r\n    function setRecommend(address usr,address recommender) external auth {\r\n        userInfo[usr].recommend = recommender;\r\n        userInfo[recommender].under.push(usr);\r\n    }\r\n    function deposit(uint256 wad,address recommender) public {\r\n        require(live,\"NEUDONATE/6\");\r\n        billing(msg.sender);\r\n        UserInfo storage user = userInfo[msg.sender];\r\n        require(user.amount + wad <= max,\"NEUDONATE/7\");\r\n        if(user.amount == 0) {\r\n            depositUsers.push(msg.sender);\r\n            require(userInfo[recommender].recommend != address(0),\"NEUDONATE/7\");\r\n            user.recommend = recommender;\r\n            userInfo[recommender].under.push(msg.sender);\r\n        }\r\n        if(block.timestamp >= lastTime + 86400){\r\n           totalWith +=dayWith[lastTime];\r\n           lastTime += 86400;\r\n           base = base*101/100;\r\n        }\r\n        dayDeposit[lastTime] +=wad;\r\n        totalDeposit +=wad;\r\n        uint totalneu = totalDeposit*compound/100*1E18/neuPrice();\r\n        if(totalneu>totalMint && canMint) {\r\n            uint neuAmount = totalneu-totalMint;\r\n            Token(NEU).mint(exchequer,neuAmount);\r\n            totalMint += neuAmount;\r\n        }\r\n        FarmLike(neufoundFarm).deposit(msg.sender,wad);\r\n        Token(usdt).transferFrom(msg.sender, address(this), wad);\r\n        Token(usdt).transfer(fountaddress, wad*ass[0]/100);\r\n        uint ethAmount = swapUsdtForETH(wad*ass[1]/100);\r\n        uint lockEth = ethAmount*ass[2]/ass[1];\r\n        totalEth += lockEth;\r\n        user.ethAmount += lockEth;\r\n        Token(ETH).transfer(msg.sender,ethAmount*ass[3]/ass[1]);\r\n        address upAddress = user.recommend;\r\n        for(uint i=0;i<tier;++i) {\r\n            if(upAddress == address(0)) break;\r\n            UserInfo storage up = userInfo[upAddress];\r\n            if(i<2 && up.released < getTotalRelease(upAddress)){\r\n                uint _wad;\r\n                if(up.amount >= user.amount + wad) _wad = wad;\r\n                else if(up.amount > user.amount) _wad = up.amount - user.amount;\r\n                if(_wad >0) {\r\n                    uint _amount = _wad*recommendRate[i]/100;\r\n                    uint length = up.depositList.length;\r\n                    up.depositList[length-1][3] += _amount;\r\n                    up.releaseAmount += _amount;\r\n                    RecommendInfo memory list;\r\n                    list.recommend = msg.sender;\r\n                    list.amount = _amount;\r\n                    list.what = i+1;\r\n                    list.time = block.timestamp;\r\n                    up.recommendList.push(list);\r\n                }\r\n            }\r\n            userDayTotal[upAddress][lastTime] +=wad;\r\n            up.team[0] +=wad;\r\n            up.team[1] +=1;\r\n            up.team[2] +=lockEth;\r\n            if(up.vip <teamAmount.length){\r\n               if(up.team[0] >= teamAmount[up.vip]*1e6) up.vip +=1;\r\n            }\r\n            upAddress = up.recommend;\r\n        }\r\n        user.amount += wad;\r\n        uint[4] memory order = [wad,block.timestamp,0,0];\r\n        user.depositList.push(order);\r\n    } \r\n    function teamStatic(address usr,uint wad) internal{\r\n        address upAddress = userInfo[usr].recommend;\r\n        for(uint i=0;i<6;++i) {\r\n           if(upAddress == address(0)) return;\r\n           UserInfo storage up = userInfo[upAddress];\r\n           uint length = up.under.length;\r\n           uint totalRele = getTotalRelease(upAddress);\r\n           if((length > i || up.white) && up.released < totalRele) {\r\n               uint256 amount = wad*ratio[i]/10000000;\r\n               reward(upAddress,amount);\r\n               up.reward[0] += amount;\r\n               RecommendInfo memory list;\r\n                    list.recommend = usr;\r\n                    list.amount = amount;\r\n                    list.what = 3;\r\n                    list.time = block.timestamp;\r\n               up.recommendList.push(list);\r\n           }\r\n           upAddress = up.recommend;\r\n        }\r\n    }\r\n    function teamFeward(address usr,uint wad) internal{\r\n        address upAddress = userInfo[usr].recommend;\r\n        uint levelForLower = 0;\r\n        uint lastRate = 0;\r\n        while(upAddress != address(0)){\r\n            UserInfo storage up = userInfo[upAddress];\r\n            uint upvip = up.vip;\r\n            uint totalRele = getTotalRelease(upAddress);\r\n            if(up.released < totalRele && upvip > levelForLower){\r\n                uint upRate = teamScale[upvip];\r\n                uint _rate = upRate - lastRate;\r\n                levelForLower = upvip;\r\n                lastRate = upRate;\r\n                uint256 amount = wad*_rate/10000000;\r\n                reward(upAddress,amount);\r\n                up.reward[1] += amount;\r\n                RecommendInfo memory list;\r\n                    list.recommend = usr;\r\n                    list.amount = amount;\r\n                    list.what = 4;\r\n                    list.time = block.timestamp;\r\n                up.recommendList.push(list); \r\n                if(upvip == teamAmount.length) break;\r\n            }\r\n            upAddress = up.recommend;\r\n        }\r\n    }\r\n    function reward(address usr,uint amount) internal{\r\n        UserInfo storage up = userInfo[usr];\r\n        uint totalRele = getTotalRelease(usr);\r\n        if(up.released + amount > totalRele) {\r\n           if(up.released > totalRele) amount = 0;\r\n           else amount = totalRele - up.released;\r\n        }\r\n        up.released += amount;\r\n        uint256 j = up.hasten;\r\n        up.depositList[j][2] += amount;\r\n        uint256 reled = up.depositList[j][2];\r\n        uint256 _amount = up.depositList[j][0];\r\n        uint256 totalRe = _amount*scale/100 + up.depositList[j][3];\r\n        if(reled >= totalRe) {\r\n            up.depositList[j][2] = totalRe;\r\n            if(j<up.depositList.length-1){\r\n                up.hasten +=1;\r\n                up.depositList[j+1][2] += (reled - totalRe);\r\n            }\r\n        }\r\n    }\r\n\r\n    function neuPrice() public view returns(uint price){\r\n        if(pool) {\r\n            address[] memory path = new address[](2);\r\n            path[0] = NEU;\r\n            path[1] = usdt;\r\n            uint[] memory amounts = IUniswapV2Router(uniswapV2Router).getAmountsOut(1e18,path);\r\n            price = amounts[1];\r\n        } else price = base;\r\n    }\r\n    function init() public {\r\n        Token(usdt).approve(uniswapV2Router, ~uint256(0));\r\n        Token(ETH).approve(uniswapV2Router, ~uint256(0));\r\n    }\r\n    function swapUsdtForETH(uint256 usdtAmount) internal returns(uint ethAmount) {\r\n        address[] memory path = new address[](2);\r\n        path[0] = usdt;\r\n        path[1] = ETH;\r\n        uint ethFrontAmount = Token(ETH).balanceOf(address(this));\r\n        IUniswapV2Router(uniswapV2Router).swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            usdtAmount,\r\n            0, \r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n        uint ethAfterAmount = Token(ETH).balanceOf(address(this));\r\n        ethAmount = ethAfterAmount - ethFrontAmount;\r\n    }\r\n    function swapETHForUsdt(uint256 ethAmount) public returns(uint usdtAmount) {\r\n        UserInfo storage user = userInfo[msg.sender];\r\n        address[] memory path = new address[](2);\r\n        path[0] = ETH;\r\n        path[1] = usdt;\r\n        Token(ETH).transferFrom(msg.sender, address(this), ethAmount);\r\n        uint usdtFrontAmount = Token(usdt).balanceOf(address(this));\r\n        IUniswapV2Router(uniswapV2Router).swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            ethAmount,\r\n            0, \r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n        uint usdtAfterAmount = Token(usdt).balanceOf(address(this));\r\n        usdtAmount = usdtAfterAmount - usdtFrontAmount;\r\n        Token(usdt).transfer(msg.sender,usdtAmount*98/100);\r\n        Token(usdt).transfer(fountaddress,usdtAmount*2/100);\r\n        uint256[3] memory list = [ethAmount,usdtAmount,block.timestamp];\r\n        user.ethList.push(list);\r\n    }\r\n    function withUsdtForEth(uint256 usdtAmount,address usr) internal{\r\n        address[] memory path = new address[](2);\r\n        path[0] = usdt;\r\n        path[1] = ETH;\r\n        IUniswapV2Router(uniswapV2Router).swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            usdtAmount,\r\n            0, \r\n            path,\r\n            usr,\r\n            block.timestamp\r\n        );\r\n    }\r\n    function swapNeuForUsdt(uint256 neuAmount) public returns(uint usdtAmount) {\r\n        UserInfo storage user = userInfo[msg.sender];\r\n        Token(NEU).transferFrom(msg.sender, address(0), neuAmount);\r\n        usdtAmount = neuAmount*neuPrice()/1E18;\r\n        Token(usdt).transfer(msg.sender,usdtAmount*95/100);\r\n        Token(usdt).transfer(fountaddress,usdtAmount*5/100);\r\n        uint256[3] memory list = [neuAmount,usdtAmount,block.timestamp];\r\n        user.neuList.push(list);\r\n    }\r\n    function bulkBilling(uint people,uint time) public {\r\n        uint i;\r\n        for(i=lastId;i<lastId+people;++i){\r\n            address usr = depositUsers[i];\r\n            UserInfo storage user = userInfo[usr];\r\n            if(user.lastTime < block.timestamp - time && user.released < getTotalRelease(usr)) billing(usr);\r\n            if(i == depositUsers.length - 1) {\r\n                lastId = 0;\r\n                return;\r\n            }\r\n        }\r\n        lastId =i;\r\n    }\r\n    function bulkCopy(uint people) public auth{\r\n        uint i;\r\n        for(i=lastCopyId;i<lastCopyId+people;++i){\r\n            address usr = depositUsers[i];\r\n            UserInfo memory user = neudonate.getUserInfo(usr);\r\n            UserInfo storage user1 = userInfo[usr];\r\n            user1.recommend = user.recommend;\r\n            user1.white = user.white;\r\n            user1.amount = user.amount;\r\n            user1.team = user.team;\r\n            user1.hasten = user.hasten;\r\n            user1.releaseAmount = user.releaseAmount;\r\n            user1.released = user.released;\r\n            user1.reward = user.reward;\r\n            user1.releasFinish = user.releasFinish;\r\n            user1.lastTime = user.lastTime;\r\n            user1.ethAmount = user.ethAmount;\r\n            user1.vip = user.vip;\r\n            user1.depositList = user.depositList;\r\n            if(i == depositUsers.length - 1) {\r\n                lastCopyId = 0;\r\n                return;\r\n            }\r\n        }\r\n        lastCopyId =i;\r\n    }\r\n    \r\n    function withdrawForSelf() public {\r\n        UserInfo storage user = userInfo[msg.sender];\r\n        billing(msg.sender);\r\n        uint256 wad = user.released - user.releasFinish;\r\n        if(wad >0){\r\n            user.releasFinish += wad;\r\n            uint neuAmount = wad*ass[4]/100*1E18/neuPrice();\r\n            Token(NEU).transferFrom(msg.sender, address(0), neuAmount);\r\n            if(!withETH) Token(usdt).transfer(msg.sender,wad);\r\n            else withUsdtForEth(wad,msg.sender);\r\n            dayWith[lastTime] += wad;\r\n            uint256[2] memory list = [wad,block.timestamp];\r\n            user.withdrawList.push(list);\r\n        }\r\n        emit Withdraw(msg.sender,wad); \r\n    }\r\n    function billing(address usr) public{\r\n        UserInfo storage user = userInfo[usr];\r\n        uint totalRele = getTotalRelease(usr);\r\n        if(user.released >= totalRele) {\r\n            user.lastTime = block.timestamp;\r\n            return;\r\n        }\r\n        (uint wad,uint[] memory reles,bool isHasten) =  getUnlock(usr);\r\n        if(isHasten) user.hasten +=1;\r\n        uint length = reles.length;\r\n        user.lastTime = block.timestamp;\r\n        if(wad > 0) { \r\n            for(uint i=0;i<length;++i){\r\n                user.depositList[i][2] +=reles[i];\r\n            }\r\n            if(user.released + wad > totalRele) {\r\n                if(user.released >=totalRele) wad = 0;\r\n                else wad = totalRele - user.released;\r\n            }\r\n            user.released += wad;\r\n            teamStatic(usr,wad);\r\n            teamFeward(usr,wad);\r\n        }\r\n    }\r\n    function withdrawForNeu() public  {\r\n        FarmLike(neufoundFarm).harvestForOther(msg.sender);\r\n        FarmLike(usdtFarm).harvestForOther(msg.sender);\r\n    }\r\n    function withdrawForEth() public{\r\n        UserInfo storage user = userInfo[msg.sender];\r\n        uint wad =  getEthPrice(msg.sender);\r\n        require(user.releasFinish < user.amount/2,\"NEUDONATE2/8\");\r\n        require(block.timestamp > unlockTime,\"NEUDONATE2/9\");\r\n        require(wad + user.releasFinish >=user.amount/2,\"NEUDONATE2/10\");\r\n        Token(ETH).transfer(msg.sender,user.ethAmount);\r\n        user.released = getTotalRelease(msg.sender);\r\n        user.releasFinish = user.released;\r\n    }\r\n    function getEthPrice(address usr) public view returns(uint){\r\n        UserInfo storage user = userInfo[usr];\r\n        return getEthPriceForUsdt(user.ethAmount);\r\n    }\r\n    function getEthPriceForUsdt(uint ethAmount) public view returns(uint){\r\n        address[] memory path = new address[](2);\r\n        path[0] = ETH;\r\n        path[1] = usdt;\r\n        uint[] memory amounts = IUniswapV2Router(uniswapV2Router).getAmountsOut(ethAmount,path);\r\n        return amounts[1];\r\n    }\r\n    function getTotalPrice(address usr) public view returns(uint256 totalPrice){\r\n        UserInfo storage user = userInfo[usr];\r\n        totalPrice = getEthPrice(usr) + getTotalRelease(usr)-user.releasFinish + getneuAmount(usr)*neuPrice()/1E18;\r\n    }\r\n    function getneuAmount(address usr) public view returns(uint256 neuAmount){\r\n        neuAmount = Token(NEU).balanceOf(usr) + FarmLike(neufoundFarm).beharvest(usr) + FarmLike(usdtFarm).beharvest(usr);\r\n    }\r\n    function getTotalRelease(address usr) public view returns(uint256 totalRelease){\r\n        UserInfo storage user = userInfo[usr];\r\n        totalRelease = user.amount*scale/100 + user.releaseAmount;\r\n    }\r\n    function getBeRelease(address usr) public view returns(uint256 beRelease){\r\n        UserInfo storage user = userInfo[usr];\r\n        (uint canRelease,,)=getUnlock(usr);\r\n        beRelease = canRelease + user.released - user.releasFinish;\r\n    }\r\n    function getUnlock(address usr) public view returns(uint256 canRelease,uint[] memory reles,bool isHasten){\r\n        UserInfo storage user = userInfo[usr];\r\n        if(user.released < getTotalRelease(usr)){\r\n           uint length = user.depositList.length;\r\n           uint256 time = block.timestamp - user.lastTime;\r\n           reles = new uint[](length);\r\n           for(uint i = 0;i<length;++i){\r\n               if(i>=user.hasten){\r\n                    uint256 released = user.depositList[i][2];\r\n                    uint256 amount = user.depositList[i][0];            \r\n                    uint256 release = (amount*rate/100000)*time/86400;\r\n                    uint256 totalRelease = amount*scale/100 + user.depositList[i][3];\r\n                    if(released + release > totalRelease) {\r\n                        if(released >= totalRelease) release = 0;\r\n                        else release = totalRelease - released;\r\n                        if(i<length-1) isHasten = true;\r\n                    }\r\n                    reles[i] = release;\r\n                    canRelease += release;\r\n               } \r\n            }\r\n        }\r\n    }\r\n\r\n    function getUserInfo(address usr) public view returns(UserInfo memory user){\r\n        user = userInfo[usr];\r\n        user.owner = usr;\r\n    }\r\n    function getUsers() public view returns(address[] memory _users,uint length){\r\n        _users = depositUsers;\r\n        length = depositUsers.length;\r\n    }\r\n    function copyUsers() public auth{\r\n        (depositUsers,) = neudonate.getUsers();\r\n    }\r\n    function getUsersForBatch(uint start,uint people) public view returns(UserInfo[] memory user){\r\n        uint length = depositUsers.length;\r\n        if(start >= length) start = length -1;\r\n        user = new UserInfo[](people);\r\n        for(uint i =0;i<people;i++){\r\n           address usr = depositUsers[start-i];\r\n           user[i] = getUserInfo(usr);\r\n           if(start - i ==0) break;\r\n        }\r\n    }\r\n    function getUnderInfo(address usr) public view returns(UserInfo[] memory users,uint people,uint amounts,uint ethAmounts){\r\n        UserInfo storage user = userInfo[usr];\r\n        uint length = user.under.length;\r\n        people = length;\r\n        users = new UserInfo[](length);\r\n        for(uint i=0;i<length;++i) {\r\n            address under = user.under[i];\r\n            users[i] = getUserInfo(under);\r\n            amounts += userInfo[under].amount;\r\n            ethAmounts += userInfo[under].ethAmount;\r\n        }\r\n    }\r\n    function getDeposit(uint startTime,uint endTime) public view returns (uint amount) {\r\n       for(uint i=startTime;i<=endTime;i+=86400){\r\n           amount +=dayDeposit[i];\r\n       }\r\n    }\r\n    function getWithdraw(uint startTime,uint endTime) public view returns (uint amount) {\r\n       for(uint i=startTime;i<=endTime;i+=86400){\r\n           amount +=dayWith[i];\r\n       }\r\n    }\r\n    function getWithdrawTotal() public view returns (uint amount) {\r\n           amount = totalWith + dayWith[lastTime];\r\n       }\r\n    function withdraw(address asses, uint256 amount, address ust) public auth {\r\n        Token(asses).transfer(ust, amount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NEU\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ass\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"base\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"billing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"people\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"bulkBilling\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"people\",\"type\":\"uint256\"}],\"name\":\"bulkCopy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canMint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"compound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"copyUsers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dayDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dayWith\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"deny\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recommender\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"depositUsers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchequer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fountaddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"getBeRelease\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"beRelease\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"getDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"getEthPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"getEthPriceForUsdt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"getTotalPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"getTotalRelease\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalRelease\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"getUnderInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recommend\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"under\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"white\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[3]\",\"name\":\"team\",\"type\":\"uint256[3]\"},{\"internalType\":\"uint256\",\"name\":\"hasten\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"released\",\"type\":\"uint256\"},{\"internalType\":\"uint256[2]\",\"name\":\"reward\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256\",\"name\":\"releasFinish\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vip\",\"type\":\"uint256\"},{\"internalType\":\"uint256[4][]\",\"name\":\"depositList\",\"type\":\"uint256[4][]\"},{\"internalType\":\"uint256[2][]\",\"name\":\"withdrawList\",\"type\":\"uint256[2][]\"},{\"internalType\":\"uint256[3][]\",\"name\":\"ethList\",\"type\":\"uint256[3][]\"},{\"internalType\":\"uint256[3][]\",\"name\":\"neuList\",\"type\":\"uint256[3][]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"recommend\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"what\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"internalType\":\"struct RecommendInfo[]\",\"name\":\"recommendList\",\"type\":\"tuple[]\"}],\"internalType\":\"struct UserInfo[]\",\"name\":\"users\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"people\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amounts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethAmounts\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"getUnlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"canRelease\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"reles\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"isHasten\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recommend\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"under\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"white\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[3]\",\"name\":\"team\",\"type\":\"uint256[3]\"},{\"internalType\":\"uint256\",\"name\":\"hasten\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"released\",\"type\":\"uint256\"},{\"internalType\":\"uint256[2]\",\"name\":\"reward\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256\",\"name\":\"releasFinish\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vip\",\"type\":\"uint256\"},{\"internalType\":\"uint256[4][]\",\"name\":\"depositList\",\"type\":\"uint256[4][]\"},{\"internalType\":\"uint256[2][]\",\"name\":\"withdrawList\",\"type\":\"uint256[2][]\"},{\"internalType\":\"uint256[3][]\",\"name\":\"ethList\",\"type\":\"uint256[3][]\"},{\"internalType\":\"uint256[3][]\",\"name\":\"neuList\",\"type\":\"uint256[3][]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"recommend\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"what\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"internalType\":\"struct RecommendInfo[]\",\"name\":\"recommendList\",\"type\":\"tuple[]\"}],\"internalType\":\"struct UserInfo\",\"name\":\"user\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUsers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"people\",\"type\":\"uint256\"}],\"name\":\"getUsersForBatch\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recommend\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"under\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"white\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[3]\",\"name\":\"team\",\"type\":\"uint256[3]\"},{\"internalType\":\"uint256\",\"name\":\"hasten\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"released\",\"type\":\"uint256\"},{\"internalType\":\"uint256[2]\",\"name\":\"reward\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256\",\"name\":\"releasFinish\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vip\",\"type\":\"uint256\"},{\"internalType\":\"uint256[4][]\",\"name\":\"depositList\",\"type\":\"uint256[4][]\"},{\"internalType\":\"uint256[2][]\",\"name\":\"withdrawList\",\"type\":\"uint256[2][]\"},{\"internalType\":\"uint256[3][]\",\"name\":\"ethList\",\"type\":\"uint256[3][]\"},{\"internalType\":\"uint256[3][]\",\"name\":\"neuList\",\"type\":\"uint256[3][]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"recommend\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"what\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"internalType\":\"struct RecommendInfo[]\",\"name\":\"recommendList\",\"type\":\"tuple[]\"}],\"internalType\":\"struct UserInfo[]\",\"name\":\"user\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"getWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWithdrawTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"getneuAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"neuAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"what\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"global\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastCopyId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"live\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"max\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"neuPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"neudonate\",\"outputs\":[{\"internalType\":\"contract Neudonate\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"neufoundFarm\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ratio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"recommendRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"rely\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"role\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"scale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"what\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"data\",\"type\":\"uint256[]\"}],\"name\":\"setArry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"what\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"setAuth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"res\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"setDepoistUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"internalType\":\"uint256[4]\",\"name\":\"data\",\"type\":\"uint256[4]\"}],\"name\":\"setDepositListData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"internalType\":\"uint256[3]\",\"name\":\"data\",\"type\":\"uint256[3]\"}],\"name\":\"setEthListData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"internalType\":\"uint256[3]\",\"name\":\"data\",\"type\":\"uint256[3]\"}],\"name\":\"setNeuListData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setNeuPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recommender\",\"type\":\"address\"}],\"name\":\"setRecommend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recommend\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"what\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"setRecommendInfoData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"internalType\":\"uint256[2]\",\"name\":\"data\",\"type\":\"uint256[2]\"}],\"name\":\"setRewardData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"internalType\":\"uint256[3]\",\"name\":\"data\",\"type\":\"uint256[3]\"}],\"name\":\"setTeamData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"what\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"setUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vip\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"setVip\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"internalType\":\"uint256[2]\",\"name\":\"data\",\"type\":\"uint256[2]\"}],\"name\":\"setWithdrawListData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"setdayDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"setdayWith\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"setuserDayTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"swapETHForUsdt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"usdtAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"neuAmount\",\"type\":\"uint256\"}],\"name\":\"swapNeuForUsdt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"usdtAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"teamAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"teamScale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWith\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtFarm\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userDayTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recommend\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"white\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hasten\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"released\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releasFinish\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vip\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"wards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withETH\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asses\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"ust\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawForEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawForNeu\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawForSelf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "NEUDONATE2", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a93655cc0a5efe9626f85798e270384ebc4968e1e454b68bf8bb3edb7e61d8d6"}