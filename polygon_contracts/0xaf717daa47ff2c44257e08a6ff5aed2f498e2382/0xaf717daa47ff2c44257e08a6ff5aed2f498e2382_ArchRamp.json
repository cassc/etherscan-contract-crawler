{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/ArchRamp.sol\": {\r\n      \"content\": \"/**\\n *     SPDX-License-Identifier: Apache License 2.0\\n *\\n *     Copyright 2023 Smash Works Inc.\\n *\\n *     Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n *     you may not use this file except in compliance with the License.\\n *     You may obtain a copy of the License at\\n *\\n *     http://www.apache.org/licenses/LICENSE-2.0\\n *\\n *     Unless required by applicable law or agreed to in writing, software\\n *     distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *     See the License for the specific language governing permissions and\\n *     limitations under the License.\\n *\\n *             %@@@@@\\n *          @@@@@@@@@@@\\n *        #@@@@@     @@@           @@                   @@\\n *       @@@@@@       @@@         @@@@                  @@\\n *      @@@@@@         @@        @@  @@    @@@@@ @@@@@  @@@*@@\\n *     .@@@@@          @@@      @@@@@@@@   @@    @@     @@  @@\\n *     @@@@@(       (((((      @@@    @@@  @@    @@@@@  @@  @@\\n *    @@@@@@   (((((((\\n *    @@@@@#(((((((\\n *    @@@@@(((((\\n *      @@@((\\n */\\npragma solidity ^0.8.17.0;\\n\\nimport { Owned } from \\\"solmate/src/auth/Owned.sol\\\";\\nimport { ERC20 } from \\\"solmate/src/tokens/ERC20.sol\\\";\\nimport { ISetToken } from \\\"./interfaces/ISetToken.sol\\\";\\nimport { IExchangeIssuanceZeroEx } from \\\"./interfaces/IExchangeIssuanceZeroEx.sol\\\";\\nimport { SafeERC20 } from \\\"openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { SafeTransferLib } from \\\"solmate/src/utils/SafeTransferLib.sol\\\";\\nimport { IWMATIC } from \\\"./interfaces/IWMATIC.sol\\\";\\nimport { IERC20 } from \\\"openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\nimport { ITradeIssuerV2 } from \\\"chambers-peripherals/src/interfaces/ITradeIssuerV2.sol\\\";\\nimport { IChamber } from \\\"chambers/interfaces/IChamber.sol\\\";\\nimport { IIssuerWizard } from \\\"chambers/interfaces/IIssuerWizard.sol\\\";\\nimport { IArchRamp } from \\\"./interfaces/IArchRamp.sol\\\";\\n\\ncontract ArchRamp is IArchRamp, Owned {\\n    using SafeERC20 for IERC20;\\n    using SafeERC20 for ISetToken;\\n\\n    IExchangeIssuanceZeroEx private immutable exchangeIssuance;\\n    ITradeIssuerV2 private immutable tradeIssuer;\\n\\n    mapping(address => bool) public tokens;\\n    mapping(address => bool) public managers;\\n    address private constant USDC = 0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174;\\n    IWMATIC private constant WMATIC = IWMATIC(0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270);\\n\\n    constructor() Owned(msg.sender) {\\n        exchangeIssuance =\\n            IExchangeIssuanceZeroEx(payable(0x1c0c05a2aA31692e5dc9511b04F651db9E4d8320));\\n        tradeIssuer = ITradeIssuerV2(0x2B13D2b9407D5776B0BB63c8cd144978B6B7cE58);\\n        setToken(0x6cA9C8914a14D63a6700556127D09e7721ff7D3b); // AP60\\n        setToken(0xAb1B1680f6037006e337764547fb82d17606c187); // ADDY\\n        setToken(0x9a41E03fEF7f16f552C6FbA37fFA7590fb1Ec0c4); // CHAIN\\n        setToken(0xBcD2C5C78000504EFBC1cE6489dfcaC71835406A); // WEB3\\n        setToken(0x8F0d5660929cA6ac394c5c41f59497629b1dbc23); // AMOD\\n        setToken(0xF401E2c1ce8F252947b60BFB92578f84217A1545); // ABAL\\n        setToken(0xAfb6E8331355faE99C8E8953bB4c6Dc5d11E9F3c); // AAGG\\n        setToken(0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174); // USDC\\n        setToken(0x027aF1E12a5869eD329bE4c05617AD528E997D5A); // AEDY\\n        setToken(0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270); // WMATIC\\n        setToken(0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619); // WETH\\n        addManager(msg.sender);\\n    }\\n\\n    modifier onlyArch() {\\n        require(isManager(msg.sender) || msg.sender == owner, \\\"Wallet not allowed\\\");\\n        _;\\n    }\\n\\n    receive() external payable {\\n        emit Received(msg.sender, address(0), msg.value);\\n    }\\n\\n    function setToken(address _token) public onlyArch {\\n        tokens[_token] = true;\\n    }\\n\\n    function addManager(address _manager) public onlyArch {\\n        managers[_manager] = true;\\n    }\\n\\n    function removeManager(address _manager) public onlyArch {\\n        managers[_manager] = false;\\n    }\\n\\n    function isManager(address _manager) public view returns (bool) {\\n        return managers[_manager];\\n    }\\n\\n    function isPermitted(address _token) public view returns (bool) {\\n        return tokens[_token];\\n    }\\n\\n    /**\\n     * Swaps an exact amount of Arch Tokens in 0x for a given amount of USDC.\\n     * The amount of USDC received is then sent to a destination address.\\n     * Method must be called by Owner\\n     *\\n     * @param swapData            Data of the swap to perform\\n     */\\n    function swapAndTransfer(SwapData calldata swapData, address destination) external onlyArch {\\n        require(isPermitted(swapData.sellToken), \\\"Sell token not allowed\\\");\\n        require(isPermitted(swapData.buyToken), \\\"Buy token not allowed\\\");\\n\\n        IERC20 token = IERC20(swapData.sellToken);\\n\\n        if (swapData.buyToken == USDC) {\\n            token.safeTransferFrom(msg.sender, address(this), swapData.sellAmount);\\n            emit Received(msg.sender, swapData.sellToken, swapData.sellAmount);\\n            token.safeTransfer(destination, swapData.sellAmount);\\n            emit Sent(destination, USDC, swapData.sellAmount);\\n        } else {\\n            token.safeTransferFrom(msg.sender, address(this), swapData.sellAmount);\\n            emit Received(msg.sender, swapData.sellToken, swapData.sellAmount);\\n            _fillQuoteInternal(swapData, destination);\\n        }\\n    }\\n\\n    /**\\n     * Issues an exact amount of SetTokens for given amount of input USDC tokens.\\n     * The amount of SetTokens issued is then sent to a destination address.\\n     * The excess amount of tokens is returned in an equivalent amount of ether.\\n     * Method must be called by Owner of contract\\n     *\\n     * @param mintData            Data of the issuance to perform\\n     */\\n    function mintAndTransfer(MintData calldata mintData, address destination) external onlyArch {\\n        require(isPermitted(mintData._inputToken), \\\"Sell token not allowed\\\");\\n        require(isPermitted(address(mintData._setToken)), \\\"Mint token not allowed\\\");\\n\\n        IERC20 inputToken = IERC20(mintData._inputToken);\\n\\n        inputToken.safeTransferFrom(msg.sender, address(this), mintData._maxAmountInputToken);\\n\\n        emit Received(msg.sender, mintData._inputToken, mintData._maxAmountInputToken);\\n\\n        safeApprove(mintData._inputToken, address(exchangeIssuance));\\n\\n        uint256 totalInputTokenSold = exchangeIssuance.issueExactSetFromToken(\\n            mintData._setToken,\\n            inputToken,\\n            mintData._amountSetToken,\\n            mintData._maxAmountInputToken,\\n            mintData._componentQuotes,\\n            mintData._issuanceModule,\\n            mintData._isDebtIssuance\\n        );\\n\\n        require(totalInputTokenSold <= mintData._maxAmountInputToken, \\\"Input Token oversold\\\");\\n\\n        mintData._setToken.safeTransfer(destination, mintData._amountSetToken);\\n        inputToken.safeTransfer(msg.sender, inputToken.balanceOf(address(this)));\\n\\n        emit Sent(destination, address(mintData._setToken), mintData._amountSetToken);\\n    }\\n\\n    /**\\n     * Issues an exact amount of Chamber tokens for given amount of input ERC20 tokens.\\n     * The amount of Chamber tokens issued is then sent to a destination address.\\n     * The excess amount of tokens is returned\\n     * Method must be called by Owner of contract\\n     *\\n     * @param mintChamberData               Data of the issuance to perform\\n     * @param contractCallInstructions      Calls required to get all chamber components\\n     * @param destination                   Address to send the minted Chamber tokens to\\n     */\\n    function mintChamberAndTransfer(\\n        MintChamberData calldata mintChamberData,\\n        ITradeIssuerV2.ContractCallInstruction[] memory contractCallInstructions,\\n        address destination\\n    ) external onlyArch {\\n        require(isPermitted(address(mintChamberData._baseToken)), \\\"Sell token not allowed\\\");\\n        require(isPermitted(address(mintChamberData._chamber)), \\\"Chamber token not allowed\\\");\\n\\n        IERC20 token = IERC20(address(mintChamberData._baseToken));\\n        token.safeTransferFrom(msg.sender, address(this), mintChamberData._maxPayAmount);\\n\\n        emit Received(\\n            msg.sender, address(mintChamberData._baseToken), mintChamberData._maxPayAmount\\n        );\\n\\n        token.safeApprove(address(tradeIssuer), mintChamberData._maxPayAmount);\\n\\n        tradeIssuer.mintChamberFromToken(\\n            contractCallInstructions,\\n            mintChamberData._chamber,\\n            mintChamberData._issuerWizard,\\n            mintChamberData._baseToken,\\n            mintChamberData._maxPayAmount,\\n            mintChamberData._mintAmount\\n        );\\n\\n        token.safeTransfer(msg.sender, token.balanceOf(address(this)));\\n        IERC20(address(mintChamberData._chamber)).safeTransfer(\\n            destination, mintChamberData._mintAmount\\n        );\\n    }\\n\\n    function withdrawTokenBalance(address _token) external onlyArch {\\n        IERC20 token = IERC20(_token);\\n        uint256 balance = token.balanceOf(address(this));\\n        require(balance > 0, \\\"ZERO_BALANCE\\\");\\n        token.safeTransfer(owner, balance);\\n    }\\n\\n    function safeApprove(address token, address spender) internal {\\n        uint256 currentAllowance = IERC20(token).allowance(address(this), spender);\\n        if (currentAllowance == 0) {\\n            IERC20(token).safeIncreaseAllowance(spender, type(uint256).max);\\n        }\\n    }\\n\\n    function _fillQuoteInternal(SwapData calldata swap, address destination) internal {\\n        IERC20 sellToken = IERC20(swap.sellToken);\\n        IERC20 buyToken = IERC20(swap.buyToken);\\n        uint256 beforeBalance = buyToken.balanceOf(address(this));\\n\\n        safeApprove(swap.sellToken, swap.spender);\\n\\n        (bool success,) = swap.swapTarget.call{ value: swap.swapValue }(swap.swapCallData);\\n        require(success, \\\"SWAP_CALL_FAILED\\\");\\n\\n        uint256 swapBalance = buyToken.balanceOf(address(this)) - beforeBalance;\\n\\n        require(swapBalance >= swap.minBuyAmount, \\\"UNDERBOUGHT\\\");\\n        emit Swap(swap.buyToken, swapBalance, swap.sellToken, swap.sellAmount);\\n\\n        if (swap.buyToken == address(WMATIC)) {\\n            WMATIC.withdraw(swapBalance);\\n            (success,) = destination.call{ value: (swapBalance) }(\\\"\\\");\\n            require(success, \\\"TRANSFER_FAILED\\\");\\n        } else {\\n            buyToken.safeTransfer(destination, swapBalance);\\n        }\\n\\n        if (sellToken.balanceOf(address(this)) > 0) {\\n            sellToken.safeTransfer(owner, sellToken.balanceOf(address(this)));\\n        }\\n\\n        emit Sent(destination, swap.buyToken, swapBalance);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/solmate/src/auth/Owned.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Simple single owner authorization mixin.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/auth/Owned.sol)\\nabstract contract Owned {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event OwnershipTransferred(address indexed user, address indexed newOwner);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            OWNERSHIP STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    address public owner;\\n\\n    modifier onlyOwner() virtual {\\n        require(msg.sender == owner, \\\"UNAUTHORIZED\\\");\\n\\n        _;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(address _owner) {\\n        owner = _owner;\\n\\n        emit OwnershipTransferred(address(0), _owner);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             OWNERSHIP LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        owner = newOwner;\\n\\n        emit OwnershipTransferred(msg.sender, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/solmate/src/tokens/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC20.sol)\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\\nabstract contract ERC20 {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    uint8 public immutable decimals;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            EIP-2612 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal immutable INITIAL_CHAIN_ID;\\n\\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n\\n        INITIAL_CHAIN_ID = block.chainid;\\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\\n        balanceOf[msg.sender] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\\n\\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\\n\\n        balanceOf[from] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             EIP-2612 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        // Unchecked because the only math done is incrementing\\n        // the owner's nonce which cannot realistically overflow.\\n        unchecked {\\n            address recoveredAddress = ecrecover(\\n                keccak256(\\n                    abi.encodePacked(\\n                        \\\"\\\\x19\\\\x01\\\",\\n                        DOMAIN_SEPARATOR(),\\n                        keccak256(\\n                            abi.encode(\\n                                keccak256(\\n                                    \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\n                                ),\\n                                owner,\\n                                spender,\\n                                value,\\n                                nonces[owner]++,\\n                                deadline\\n                            )\\n                        )\\n                    )\\n                ),\\n                v,\\n                r,\\n                s\\n            );\\n\\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_SIGNER\\\");\\n\\n            allowance[recoveredAddress][spender] = value;\\n        }\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\\n    }\\n\\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                    keccak256(bytes(name)),\\n                    keccak256(\\\"1\\\"),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 amount) internal virtual {\\n        totalSupply += amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal virtual {\\n        balanceOf[from] -= amount;\\n\\n        // Cannot underflow because a user's balance\\n        // will never be larger than the total supply.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/ISetToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicensed\\npragma solidity ^0.8.17.0;\\n\\nimport { IERC20 } from \\\"openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title ISetToken\\n * @author Set Protocol\\n *\\n * Interface for operating with SetTokens.\\n */\\ninterface ISetToken is IERC20 {\\n    /* ============ Enums ============ */\\n\\n    enum ModuleState {\\n        NONE,\\n        PENDING,\\n        INITIALIZED\\n    }\\n\\n    /* ============ Structs ============ */\\n    /**\\n     * The base definition of a SetToken Position\\n     *\\n     * @param component           Address of token in the Position\\n     * @param module              If not in default state, the address of associated module\\n     * @param unit                Each unit is the # of components per 10^18 of a SetToken\\n     * @param positionState       Position ENUM. Default is 0; External is 1\\n     * @param data                Arbitrary data\\n     */\\n    struct Position {\\n        address component;\\n        address module;\\n        int256 unit;\\n        uint8 positionState;\\n        bytes data;\\n    }\\n\\n    /**\\n     * A struct that stores a component's cash position details and external positions\\n     * This data structure allows O(1) access to a component's cash position units and\\n     * virtual units.\\n     *\\n     * @param virtualUnit               Virtual value of a component's DEFAULT position. Stored as virtual for efficiency\\n     * updating all units at once via the position multiplier. Virtual units are achieved\\n     * by dividing a \\\"real\\\" value by the \\\"positionMultiplier\\\"\\n     * @param componentIndex\\n     * @param externalPositionModules   List of external modules attached to each external position. Each module\\n     * maps to an external position\\n     * @param externalPositions         Mapping of module => ExternalPosition struct for a given component\\n     */\\n    struct ComponentPosition {\\n        int256 virtualUnit;\\n        address[] externalPositionModules;\\n        mapping(address => ExternalPosition) externalPositions;\\n    }\\n\\n    /**\\n     * A struct that stores a component's external position details including virtual unit and any\\n     * auxiliary data.\\n     *\\n     * @param virtualUnit       Virtual value of a component's EXTERNAL position.\\n     * @param data              Arbitrary data\\n     */\\n    struct ExternalPosition {\\n        int256 virtualUnit;\\n        bytes data;\\n    }\\n\\n    /* ============ Functions ============ */\\n\\n    function addComponent(address _component) external;\\n    function removeComponent(address _component) external;\\n    function editDefaultPositionUnit(address _component, int256 _realUnit) external;\\n    function addExternalPositionModule(address _component, address _positionModule) external;\\n    function removeExternalPositionModule(address _component, address _positionModule) external;\\n    function editExternalPositionUnit(address _component, address _positionModule, int256 _realUnit)\\n        external;\\n    function editExternalPositionData(\\n        address _component,\\n        address _positionModule,\\n        bytes calldata _data\\n    ) external;\\n\\n    function invoke(address _target, uint256 _value, bytes calldata _data)\\n        external\\n        returns (bytes memory);\\n\\n    function editPositionMultiplier(int256 _newMultiplier) external;\\n\\n    function mint(address _account, uint256 _quantity) external;\\n    function burn(address _account, uint256 _quantity) external;\\n\\n    function lock() external;\\n    function unlock() external;\\n\\n    function addModule(address _module) external;\\n    function removeModule(address _module) external;\\n    function initializeModule() external;\\n\\n    function setManager(address _manager) external;\\n\\n    function manager() external view returns (address);\\n    function moduleStates(address _module) external view returns (ModuleState);\\n    function getModules() external view returns (address[] memory);\\n\\n    function getDefaultPositionRealUnit(address _component) external view returns (int256);\\n    function getExternalPositionRealUnit(address _component, address _positionModule)\\n        external\\n        view\\n        returns (int256);\\n    function getComponents() external view returns (address[] memory);\\n    function getExternalPositionModules(address _component)\\n        external\\n        view\\n        returns (address[] memory);\\n    function getExternalPositionData(address _component, address _positionModule)\\n        external\\n        view\\n        returns (bytes memory);\\n    function isExternalPositionModule(address _component, address _module)\\n        external\\n        view\\n        returns (bool);\\n    function isComponent(address _component) external view returns (bool);\\n\\n    function positionMultiplier() external view returns (int256);\\n    function getPositions() external view returns (Position[] memory);\\n    function getTotalComponentRealUnits(address _component) external view returns (int256);\\n\\n    function isInitializedModule(address _module) external view returns (bool);\\n    function isPendingModule(address _module) external view returns (bool);\\n    function isLocked() external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IExchangeIssuanceZeroEx.sol\": {\r\n      \"content\": \"//    SPDX-License-Identifier: Unlicensed\\n\\npragma solidity ^0.8.17.0;\\n\\nimport { IERC20 } from \\\"openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\nimport { ISetToken } from \\\"./ISetToken.sol\\\";\\n\\ninterface IExchangeIssuanceZeroEx {\\n    struct IssuanceModuleData {\\n        bool isAllowed;\\n        bool isDebtIssuanceModule;\\n    }\\n\\n    // The issued SetToken\\n    // The address of the input asset(ERC20/ETH) used to issue the SetTokens\\n    // The amount of input tokens used for issuance\\n    // The amount of SetTokens received by the recipient\\n    event ExchangeIssue( // The recipient address of the issued SetTokens\\n        address indexed _recipient,\\n        ISetToken indexed _setToken,\\n        IERC20 indexed _inputToken,\\n        uint256 _amountInputToken,\\n        uint256 _amountSetIssued\\n    );\\n\\n    // The redeemed SetToken\\n    // The address of output asset(ERC20/ETH) received by the recipient\\n    // The amount of SetTokens redeemed for output tokens\\n    // The amount of output tokens received by the recipient\\n    event ExchangeRedeem( // The recipient adress of the output tokens obtained for redemption\\n        address indexed _recipient,\\n        ISetToken indexed _setToken,\\n        IERC20 indexed _outputToken,\\n        uint256 _amountSetRedeemed,\\n        uint256 _amountOutputToken\\n    );\\n\\n    function withdrawTokens(IERC20[] calldata _tokens, address payable _to) external payable;\\n\\n    receive() external payable;\\n\\n    /* ============ Public Functions ============ */\\n\\n    /**\\n     * Runs all the necessary approval functions required for a given ERC20 token.\\n     * This function can be called when a new token is added to a SetToken during a\\n     * rebalance.\\n     *\\n     * @param _token    Address of the token which needs approval\\n     * @param _spender  Address of the spender which will be approved to spend token. (Must be a whitlisted issuance module)\\n     */\\n    function approveToken(IERC20 _token, address _spender) external;\\n\\n    /**\\n     * Runs all the necessary approval functions required for a list of ERC20 tokens.\\n     *\\n     * @param _tokens    Addresses of the tokens which need approval\\n     * @param _spender   Address of the spender which will be approved to spend token. (Must be a whitlisted issuance module)\\n     */\\n    function approveTokens(IERC20[] calldata _tokens, address _spender) external;\\n\\n    /**\\n     * Runs all the necessary approval functions required before issuing\\n     * or redeeming a SetToken. This function need to be called only once before the first time\\n     * this smart contract is used on any particular SetToken.\\n     *\\n     * @param _setToken          Address of the SetToken being initialized\\n     * @param _issuanceModule    Address of the issuance module which will be approved to spend component tokens.\\n     */\\n    function approveSetToken(ISetToken _setToken, address _issuanceModule) external;\\n\\n    /**\\n     * Issues an exact amount of SetTokens for given amount of input ERC20 tokens.\\n     * The excess amount of tokens is returned in an equivalent amount of ether.\\n     *\\n     * @param _setToken              Address of the SetToken to be issued\\n     * @param _inputToken            Address of the input token\\n     * @param _amountSetToken        Amount of SetTokens to issue\\n     * @param _maxAmountInputToken   Maximum amount of input tokens to be used to issue SetTokens.\\n     * @param _componentQuotes       The encoded 0x transactions to execute\\n     *\\n     * @return totalInputTokenSold   Amount of input token spent for issuance\\n     */\\n    function issueExactSetFromToken(\\n        ISetToken _setToken,\\n        IERC20 _inputToken,\\n        uint256 _amountSetToken,\\n        uint256 _maxAmountInputToken,\\n        bytes[] memory _componentQuotes,\\n        address _issuanceModule,\\n        bool _isDebtIssuance\\n    ) external returns (uint256);\\n\\n    /**\\n     * Issues an exact amount of SetTokens for given amount of ETH.\\n     * The excess amount of tokens is returned in an equivalent amount of ether.\\n     *\\n     * @param _setToken              Address of the SetToken to be issued\\n     * @param _amountSetToken        Amount of SetTokens to issue\\n     * @param _componentQuotes       The encoded 0x transactions to execute\\n     *\\n     * @return amountEthReturn       Amount of ether returned to the caller\\n     */\\n    function issueExactSetFromETH(\\n        ISetToken _setToken,\\n        uint256 _amountSetToken,\\n        bytes[] memory _componentQuotes,\\n        address _issuanceModule,\\n        bool _isDebtIssuance\\n    ) external payable returns (uint256);\\n\\n    /**\\n     * Redeems an exact amount of SetTokens for an ERC20 token.\\n     * The SetToken must be approved by the sender to this contract.\\n     *\\n     * @param _setToken             Address of the SetToken being redeemed\\n     * @param _outputToken          Address of output token\\n     * @param _amountSetToken       Amount SetTokens to redeem\\n     * @param _minOutputReceive     Minimum amount of output token to receive\\n     * @param _componentQuotes      The encoded 0x transactions execute (components -> WETH).\\n     * @param _issuanceModule       Address of issuance Module to use\\n     * @param _isDebtIssuance       Flag indicating wether given issuance module is a debt issuance module\\n     *\\n     * @return outputAmount         Amount of output tokens sent to the caller\\n     */\\n    function redeemExactSetForToken(\\n        ISetToken _setToken,\\n        IERC20 _outputToken,\\n        uint256 _amountSetToken,\\n        uint256 _minOutputReceive,\\n        bytes[] memory _componentQuotes,\\n        address _issuanceModule,\\n        bool _isDebtIssuance\\n    ) external returns (uint256);\\n\\n    /**\\n     * Redeems an exact amount of SetTokens for ETH.\\n     * The SetToken must be approved by the sender to this contract.\\n     *\\n     * @param _setToken             Address of the SetToken being redeemed\\n     * @param _amountSetToken       Amount SetTokens to redeem\\n     * @param _minEthReceive        Minimum amount of Eth to receive\\n     * @param _componentQuotes      The encoded 0x transactions execute\\n     * @param _issuanceModule       Address of issuance Module to use\\n     * @param _isDebtIssuance       Flag indicating wether given issuance module is a debt issuance module\\n     *\\n     * @return outputAmount         Amount of output tokens sent to the caller\\n     */\\n    function redeemExactSetForETH(\\n        ISetToken _setToken,\\n        uint256 _amountSetToken,\\n        uint256 _minEthReceive,\\n        bytes[] memory _componentQuotes,\\n        address _issuanceModule,\\n        bool _isDebtIssuance\\n    ) external returns (uint256);\\n\\n    /**\\n     * Returns component positions required for issuance\\n     *\\n     * @param _issuanceModule    Address of issuance Module to use\\n     * @param _isDebtIssuance    Flag indicating wether given issuance module is a debt issuance module\\n     * @param _setToken          Set token to issue\\n     * @param _amountSetToken    Amount of set token to issue\\n     */\\n    function getRequiredIssuanceComponents(\\n        address _issuanceModule,\\n        bool _isDebtIssuance,\\n        ISetToken _setToken,\\n        uint256 _amountSetToken\\n    ) external view returns (address[] memory components, uint256[] memory positions);\\n\\n    /**\\n     * Returns component positions required for Redemption\\n     *\\n     * @param _issuanceModule    Address of issuance Module to use\\n     * @param _isDebtIssuance    Flag indicating wether given issuance module is a debt issuance module\\n     * @param _setToken          Set token to issue\\n     * @param _amountSetToken    Amount of set token to issue\\n     */\\n    function getRequiredRedemptionComponents(\\n        address _issuanceModule,\\n        bool _isDebtIssuance,\\n        ISetToken _setToken,\\n        uint256 _amountSetToken\\n    ) external view returns (address[] memory components, uint256[] memory positions);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/solmate/src/utils/SafeTransferLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport {ERC20} from \\\"../tokens/ERC20.sol\\\";\\n\\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/SafeTransferLib.sol)\\n/// @dev Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.\\n/// @dev Note that none of the functions in this library check that a token has code at all! That responsibility is delegated to the caller.\\nlibrary SafeTransferLib {\\n    /*//////////////////////////////////////////////////////////////\\n                             ETH OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        bool success;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Transfer the ETH and store if it succeeded or not.\\n            success := call(gas(), to, amount, 0, 0, 0, 0)\\n        }\\n\\n        require(success, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            ERC20 OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferFrom(\\n        ERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), from) // Append the \\\"from\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 68), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 100 because the length of our calldata totals up like so: 4 + 32 * 3.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 100, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeApprove(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0x095ea7b300000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"APPROVE_FAILED\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IWMATIC.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.17.0;\\n\\ninterface IWMATIC {\\n    event Approval(address indexed src, address indexed guy, uint256 wad);\\n    event Transfer(address indexed src, address indexed dst, uint256 wad);\\n    event Deposit(address indexed dst, uint256 wad);\\n    event Withdrawal(address indexed src, uint256 wad);\\n\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 wad) external;\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function approve(address guy, uint256 wad) external returns (bool);\\n\\n    function transfer(address dst, uint256 wad) external returns (bool);\\n\\n    function transferFrom(address src, address dst, uint256 wad) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/chambers-peripherals/src/interfaces/ITradeIssuerV2.sol\": {\r\n      \"content\": \"/**\\n *     SPDX-License-Identifier: Apache License 2.0\\n *\\n *     Copyright 2021 Index Cooperative\\n *     Copyright 2023 Smash Works Inc.\\n *\\n *     Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n *     you may not use this file except in compliance with the License.\\n *     You may obtain a copy of the License at\\n *\\n *     http://www.apache.org/licenses/LICENSE-2.0\\n *\\n *     Unless required by applicable law or agreed to in writing, software\\n *     distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *     See the License for the specific language governing permissions and\\n *     limitations under the License.\\n *\\n *     NOTICE\\n *\\n *     This is a modified code from Index Cooperative found at\\n *\\n *     https://github.com/IndexCoop/index-coop-smart-contracts\\n *\\n *     All changes made by Smash Works Inc. are described and documented at\\n *\\n *     https://docs.arch.finance/chambers\\n *\\n *\\n *             %@@@@@\\n *          @@@@@@@@@@@\\n *        #@@@@@     @@@           @@                   @@\\n *       @@@@@@       @@@         @@@@                  @@\\n *      @@@@@@         @@        @@  @@    @@@@@ @@@@@  @@@*@@\\n *     .@@@@@          @@@      @@@@@@@@   @@    @@     @@  @@\\n *     @@@@@(       (((((      @@@    @@@  @@    @@@@@  @@  @@\\n *    @@@@@@   (((((((\\n *    @@@@@#(((((((\\n *    @@@@@(((((\\n *      @@@((\\n */\\n\\npragma solidity ^0.8.17.0;\\n\\nimport {IChamber} from \\\"chambers/interfaces/IChamber.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IIssuerWizard} from \\\"chambers/interfaces/IIssuerWizard.sol\\\";\\n\\ninterface ITradeIssuerV2 {\\n    /*//////////////////////////////////////////////////////////////\\n                               STRUCTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    struct ContractCallInstruction {\\n        address payable _target;\\n        address _allowanceTarget;\\n        IERC20 _sellToken;\\n        uint256 _sellAmount;\\n        IERC20 _buyToken;\\n        uint256 _minBuyAmount;\\n        bytes _callData;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event AllowedTargetAdded(address indexed _target);\\n\\n    event AllowedTargetRemoved(address indexed _targer);\\n\\n    event TradeIssuerTokenMinted(\\n        address indexed chamber,\\n        address indexed recipient,\\n        address indexed inputToken,\\n        uint256 totalTokensUsed,\\n        uint256 mintAmount\\n    );\\n\\n    event TradeIssuerTokenRedeemed(\\n        address indexed chamber,\\n        address indexed recipient,\\n        address indexed outputToken,\\n        uint256 totalTokensReturned,\\n        uint256 redeemAmount\\n    );\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                ERRORS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    error CannotAllowTarget();\\n\\n    error CannotRemoveTarget();\\n\\n    error InvalidTarget(address target);\\n\\n    error LowLevelFunctionCallFailed();\\n\\n    error OversoldBaseToken();\\n\\n    error RedeemedForLessTokens();\\n\\n    error TargetAlreadyAllowed();\\n\\n    error UnderboughtAsset(IERC20 asset, uint256 buyAmount);\\n\\n    error UnderboughtConstituent(IERC20 asset, uint256 buyAmount);\\n\\n    error ZeroChamberAmount();\\n\\n    error ZeroBalanceAsset();\\n\\n    error ZeroNativeTokenSent();\\n\\n    error ZeroRequiredAmount();\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                FUNCTIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function getAllowedTargets() external returns (address[] memory);\\n\\n    function isAllowedTarget(address _target) external returns (bool);\\n\\n    function addTarget(address _target) external;\\n\\n    function removeTarget(address _target) external;\\n\\n    function transferERC20ToOwner(address _tokenToWithdraw) external;\\n\\n    function transferEthToOwner() external;\\n\\n    function mintChamberFromToken(\\n        ContractCallInstruction[] memory _contractCallInstructions,\\n        IChamber _chamber,\\n        IIssuerWizard _issuerWizard,\\n        IERC20 _baseToken,\\n        uint256 _maxPayAmount,\\n        uint256 _chamberAmount\\n    ) external returns (uint256 baseTokenUsed);\\n\\n    function mintChamberFromNativeToken(\\n        ContractCallInstruction[] memory _contractCallInstructions,\\n        IChamber _chamber,\\n        IIssuerWizard _issuerWizard,\\n        uint256 _chamberAmount\\n    ) external payable returns (uint256 wrappedNativeTokenUsed);\\n\\n    function redeemChamberToToken(\\n        ContractCallInstruction[] memory _contractCallInstructions,\\n        IChamber _chamber,\\n        IIssuerWizard _issuerWizard,\\n        IERC20 _baseToken,\\n        uint256 _minReceiveAmount,\\n        uint256 _chamberAmount\\n    ) external returns (uint256 baseTokenReturned);\\n\\n    function redeemChamberToNativeToken(\\n        ContractCallInstruction[] memory _contractCallInstructions,\\n        IChamber _chamber,\\n        IIssuerWizard _issuerWizard,\\n        uint256 _minReceiveAmount,\\n        uint256 _chamberAmount\\n    ) external returns (uint256 wrappedNativeTokenReturned);\\n}\\n\"\r\n    },\r\n    \"lib/chambers/src/interfaces/IChamber.sol\": {\r\n      \"content\": \"/**\\n *     SPDX-License-Identifier: Apache License 2.0\\n *\\n *     Copyright 2018 Set Labs Inc.\\n *     Copyright 2022 Smash Works Inc.\\n *\\n *     Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n *     you may not use this file except in compliance with the License.\\n *     You may obtain a copy of the License at\\n *\\n *     http://www.apache.org/licenses/LICENSE-2.0\\n *\\n *     Unless required by applicable law or agreed to in writing, software\\n *     distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *     See the License for the specific language governing permissions and\\n *     limitations under the License.\\n *\\n *     NOTICE\\n *\\n *     This is a modified code from Set Labs Inc. found at\\n *\\n *     https://github.com/SetProtocol/set-protocol-contracts\\n *\\n *     All changes made by Smash Works Inc. are described and documented at\\n *\\n *     https://docs.arch.finance/chambers\\n *\\n *\\n *             %@@@@@\\n *          @@@@@@@@@@@\\n *        #@@@@@     @@@           @@                   @@\\n *       @@@@@@       @@@         @@@@                  @@\\n *      @@@@@@         @@        @@  @@    @@@@@ @@@@@  @@@*@@\\n *     .@@@@@          @@@      @@@@@@@@   @@    @@     @@  @@\\n *     @@@@@(       (((((      @@@    @@@  @@    @@@@@  @@  @@\\n *    @@@@@@   (((((((\\n *    @@@@@#(((((((\\n *    @@@@@(((((\\n *      @@@((\\n */\\npragma solidity ^0.8.17.0;\\n\\ninterface IChamber {\\n    /*//////////////////////////////////////////////////////////////\\n                                 ENUMS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    enum ChamberState {\\n        LOCKED,\\n        UNLOCKED\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event ManagerAdded(address indexed _manager);\\n\\n    event ManagerRemoved(address indexed _manager);\\n\\n    event ConstituentAdded(address indexed _constituent);\\n\\n    event ConstituentRemoved(address indexed _constituent);\\n\\n    event WizardAdded(address indexed _wizard);\\n\\n    event WizardRemoved(address indexed _wizard);\\n\\n    event AllowedContractAdded(address indexed _allowedContract);\\n\\n    event AllowedContractRemoved(address indexed _allowedContract);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CHAMBER MANAGEMENT\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function addConstituent(address _constituent) external;\\n\\n    function removeConstituent(address _constituent) external;\\n\\n    function isManager(address _manager) external view returns (bool);\\n\\n    function isWizard(address _wizard) external view returns (bool);\\n\\n    function isConstituent(address _constituent) external view returns (bool);\\n\\n    function addManager(address _manager) external;\\n\\n    function removeManager(address _manager) external;\\n\\n    function addWizard(address _wizard) external;\\n\\n    function removeWizard(address _wizard) external;\\n\\n    function getConstituentsAddresses() external view returns (address[] memory);\\n\\n    function getQuantities() external view returns (uint256[] memory);\\n\\n    function getConstituentQuantity(address _constituent) external view returns (uint256);\\n\\n    function getWizards() external view returns (address[] memory);\\n\\n    function getManagers() external view returns (address[] memory);\\n\\n    function getAllowedContracts() external view returns (address[] memory);\\n\\n    function mint(address _recipient, uint256 _quantity) external;\\n\\n    function burn(address _from, uint256 _quantity) external;\\n\\n    function withdrawTo(address _constituent, address _recipient, uint256 _quantity) external;\\n\\n    function updateQuantities() external;\\n\\n    function lockChamber() external;\\n\\n    function unlockChamber() external;\\n\\n    function addAllowedContract(address target) external;\\n\\n    function removeAllowedContract(address target) external;\\n\\n    function isAllowedContract(address _target) external returns (bool);\\n\\n    function executeTrade(\\n        address _sellToken,\\n        uint256 _sellQuantity,\\n        address _buyToken,\\n        uint256 _minBuyQuantity,\\n        bytes memory _data,\\n        address payable _target,\\n        address _allowanceTarget\\n    ) external returns (uint256 tokenAmountBought);\\n}\\n\"\r\n    },\r\n    \"lib/chambers/src/interfaces/IIssuerWizard.sol\": {\r\n      \"content\": \"/**\\n *     SPDX-License-Identifier: Apache License 2.0\\n *\\n *     Copyright 2018 Set Labs Inc.\\n *     Copyright 2022 Smash Works Inc.\\n *\\n *     Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n *     you may not use this file except in compliance with the License.\\n *     You may obtain a copy of the License at\\n *\\n *     http://www.apache.org/licenses/LICENSE-2.0\\n *\\n *     Unless required by applicable law or agreed to in writing, software\\n *     distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *     See the License for the specific language governing permissions and\\n *     limitations under the License.\\n *\\n *     NOTICE\\n *\\n *     This is a modified code from Set Labs Inc. found at\\n *\\n *     https://github.com/SetProtocol/set-protocol-contracts\\n *\\n *     All changes made by Smash Works Inc. are described and documented at\\n *\\n *     https://docs.arch.finance/chambers\\n *\\n *\\n *             %@@@@@\\n *          @@@@@@@@@@@\\n *        #@@@@@     @@@           @@                   @@\\n *       @@@@@@       @@@         @@@@                  @@\\n *      @@@@@@         @@        @@  @@    @@@@@ @@@@@  @@@*@@\\n *     .@@@@@          @@@      @@@@@@@@   @@    @@     @@  @@\\n *     @@@@@(       (((((      @@@    @@@  @@    @@@@@  @@  @@\\n *    @@@@@@   (((((((\\n *    @@@@@#(((((((\\n *    @@@@@(((((\\n *      @@@((\\n */\\npragma solidity ^0.8.17.0;\\n\\nimport {IChamber} from \\\"./IChamber.sol\\\";\\n\\ninterface IIssuerWizard {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event ChamberTokenIssued(address indexed chamber, address indexed recipient, uint256 quantity);\\n\\n    event ChamberTokenRedeemed(\\n        address indexed chamber, address indexed recipient, uint256 quantity\\n    );\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                FUNCTIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function getConstituentsQuantitiesForIssuance(IChamber chamber, uint256 mintQuantity)\\n        external\\n        view\\n        returns (address[] memory, uint256[] memory);\\n\\n    function getConstituentsQuantitiesForRedeem(IChamber chamber, uint256 redeemQuantity)\\n        external\\n        view\\n        returns (address[] memory, uint256[] memory);\\n\\n    function issue(IChamber chamber, uint256 quantity) external;\\n\\n    function redeem(IChamber _chamber, uint256 _quantity) external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IArchRamp.sol\": {\r\n      \"content\": \"/**\\n *     SPDX-License-Identifier: Apache License 2.0\\n *\\n *     Copyright 2023 Smash Works Inc.\\n *\\n *     Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n *     you may not use this file except in compliance with the License.\\n *     You may obtain a copy of the License at\\n *\\n *     http://www.apache.org/licenses/LICENSE-2.0\\n *\\n *     Unless required by applicable law or agreed to in writing, software\\n *     distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *     See the License for the specific language governing permissions and\\n *     limitations under the License.\\n *\\n *             %@@@@@\\n *          @@@@@@@@@@@\\n *        #@@@@@     @@@           @@                   @@\\n *       @@@@@@       @@@         @@@@                  @@\\n *      @@@@@@         @@        @@  @@    @@@@@ @@@@@  @@@*@@\\n *     .@@@@@          @@@      @@@@@@@@   @@    @@     @@  @@\\n *     @@@@@(       (((((      @@@    @@@  @@    @@@@@  @@  @@\\n *    @@@@@@   (((((((\\n *    @@@@@#(((((((\\n *    @@@@@(((((\\n *      @@@((\\n */\\n\\npragma solidity ^0.8.17.0;\\n\\nimport { ERC20 } from \\\"solmate/src/tokens/ERC20.sol\\\";\\nimport { ISetToken } from \\\"./ISetToken.sol\\\";\\nimport { ITradeIssuerV2, IERC20 } from \\\"chambers-peripherals/src/interfaces/ITradeIssuerV2.sol\\\";\\nimport { IChamber } from \\\"chambers/interfaces/IChamber.sol\\\";\\nimport { IIssuerWizard } from \\\"chambers/interfaces/IIssuerWizard.sol\\\";\\n\\ninterface IArchRamp {\\n    event Received(address sender, address tokenContract, uint256 amount);\\n    event Swap(address buyToken, uint256 buyAmount, address sellToken, uint256 sellAmount);\\n    event Sent(address receiver, address tokenContract, uint256 amount);\\n\\n    struct SwapData {\\n        // The `buyTokenAddress` field from the API response.\\n        address buyToken;\\n        // The `sellTokenAddress` field from the API response.\\n        address sellToken;\\n        // The `allowanceTarget` field from the API response.\\n        address spender;\\n        // The `to` field from the API response.\\n        address payable swapTarget;\\n        // The `data` field from the API response.\\n        bytes swapCallData;\\n        // The `value` field from the API response.\\n        uint256 swapValue;\\n        // The `minBuyAmount` calculated from the backend (buyAmount * slippage)\\n        uint256 minBuyAmount;\\n        // The `sellAmount` field from the API response.\\n        uint256 sellAmount;\\n    }\\n\\n    struct MintData {\\n        // Address of the SetToken to be issued\\n        ISetToken _setToken;\\n        // Amount of SetTokens to issue\\n        uint256 _amountSetToken;\\n        // Address of the input token\\n        address _inputToken;\\n        // Maximum amount of input tokens to be used to issue SetTokens.\\n        uint256 _maxAmountInputToken;\\n        // The encoded 0x transactions to execute\\n        bytes[] _componentQuotes;\\n        // The address of the issuance module for the SetToken\\n        address _issuanceModule;\\n        // Is the SetToken using debt issuance?\\n        bool _isDebtIssuance;\\n    }\\n\\n    struct MintChamberData {\\n        // The address of the chamber to mint\\n        IChamber _chamber;\\n        // The address of the issuer wizard that will mint the Chamber\\n        IIssuerWizard _issuerWizard;\\n        // The address of the token used to mint\\n        IERC20 _baseToken;\\n        // Maximum amount of baseToken to use to mint\\n        uint256 _maxPayAmount;\\n        // The amount of Chamber to mint\\n        uint256 _mintAmount;\\n    }\\n\\n    function setToken(address _token) external;\\n\\n    function isPermitted(address _token) external view returns (bool);\\n\\n    function swapAndTransfer(SwapData calldata swapData, address destination) external;\\n\\n    function mintAndTransfer(MintData calldata mintData, address destination) external;\\n\\n    function mintChamberAndTransfer(\\n        MintChamberData calldata mintChamberData,\\n        ITradeIssuerV2.ContractCallInstruction[] memory contractCallInstructions,\\n        address destination\\n    ) external;\\n\\n    function withdrawTokenBalance(address _token) external;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/chambers-peripherals/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@openzeppelin/=lib/chambers-peripherals/lib/openzeppelin-contracts/\",\r\n      \"chambers-peripherals/=lib/chambers-peripherals/\",\r\n      \"chambers/=lib/chambers/src/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"solmate/=lib/solmate/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Received\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Sent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sellToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellAmount\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"addManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"isManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"isPermitted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"managers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract ISetToken\",\"name\":\"_setToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountSetToken\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_inputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxAmountInputToken\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"_componentQuotes\",\"type\":\"bytes[]\"},{\"internalType\":\"address\",\"name\":\"_issuanceModule\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isDebtIssuance\",\"type\":\"bool\"}],\"internalType\":\"struct IArchRamp.MintData\",\"name\":\"mintData\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"mintAndTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IChamber\",\"name\":\"_chamber\",\"type\":\"address\"},{\"internalType\":\"contract IIssuerWizard\",\"name\":\"_issuerWizard\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_baseToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxPayAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_mintAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct IArchRamp.MintChamberData\",\"name\":\"mintChamberData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_allowanceTarget\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_sellToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_sellAmount\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_buyToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minBuyAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_callData\",\"type\":\"bytes\"}],\"internalType\":\"struct ITradeIssuerV2.ContractCallInstruction[]\",\"name\":\"contractCallInstructions\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"mintChamberAndTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"removeManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"swapTarget\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"swapCallData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"swapValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBuyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct IArchRamp.SwapData\",\"name\":\"swapData\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"swapAndTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdrawTokenBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ArchRamp", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}