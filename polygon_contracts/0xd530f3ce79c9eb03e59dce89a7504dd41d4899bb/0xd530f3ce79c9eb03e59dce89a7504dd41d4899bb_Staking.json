{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"./contracts/Staking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./StakingGov.sol\\\";\\n\\ncontract Staking is StakingGov, Pausable, ReentrancyGuard, Ownable {\\n\\n    using SafeERC20 for IERC20;\\n\\n    /* ========== VIEWS ========== */\\n\\n    /**\\n     * @notice Gets the total deposited amount in the pool `pid`\\n     * @param pid The pool id to get the deposited amount from\\n     * @return Deposited amount in the pool\\n     */\\n    function depositedAmount(uint256 pid) external view returns (uint256) {\\n        PoolInfo storage pool = poolInfo[pid];\\n        return pool.depositedAmount;\\n    }\\n\\n    /**\\n     * @notice Gets how much rewards will be distributed through the pool `pid` during the whole distribution period\\n     * @param pid The pool id to get the rewards from\\n     * @return The amount that the pool `pid` will distribute\\n     */\\n    function getRewardForDuration(uint256 pid) external view returns (uint256) {\\n        PoolInfo storage pool = poolInfo[pid];\\n        return pool.rewardRate * pool.rewardsDuration;\\n    }\\n\\n    /**\\n     * @notice Gets the balance of the address `account` in the pool `pid`\\n     * @param pid The pool id to get the balance from\\n     * @param account The address to get the balance\\n     * @return Deposited amount in the pool `pid` by `account`\\n     */\\n    function balanceOf(uint256 pid, address account) public view returns (uint256) {\\n        return userInfo[pid][account].amount;\\n    }\\n\\n    /**\\n     * @notice Gets the last time that the pool `pid` was giving rewards\\n     * @dev Stops increasing when `pool.rewardsDuration` ends\\n     * @param pid The pool id to get the time from\\n     * @return The timestamp of whether the pool was last updated\\n     */\\n    function lastTimeRewardApplicable(uint pid) public view returns (uint256) {\\n        PoolInfo storage pool = poolInfo[pid];\\n        return _min(block.timestamp, pool.periodFinish);\\n    }\\n\\n    /**\\n     * @notice Gets the reward rate per token deposited in the pool `pid`\\n     * @param pid The pool id to get the reward per token from\\n     * @return The reward rate per token for the pool `pid`\\n     */\\n    function rewardPerToken(uint pid) public view returns (uint256) {\\n        PoolInfo storage pool = poolInfo[pid];\\n        if (pool.depositedAmount == 0) {\\n            return pool.rewardPerTokenStored;\\n        } else if (pool.lastUpdateTime > lastTimeRewardApplicable(pid)) {\\n            return 0;\\n        }\\n        return\\n            pool.rewardPerTokenStored + (\\n                (lastTimeRewardApplicable(pid) - pool.lastUpdateTime) * pool.rewardRate * (1e18) / pool.depositedAmount\\n            );\\n    }\\n\\n    /**\\n     * @notice Gets the claimable rewards for `account` in the pool `pid`\\n     * @dev Unstaking stops rewards\\n     * @param pid The pool id to get the rewards earned from\\n     * @param account The address to get the rewards earned from\\n     * @return The claimable rewards for `account` in the pool `pid`\\n     */\\n    function earned(uint256 pid, address account) public view returns (uint256) {\\n        UserInfo storage user = userInfo[pid][account];\\n        if (user.unstakeRequestTime != 0) {\\n            return user.pendingRewards;\\n        } else {\\n            return user.amount * (rewardPerToken(pid) - user.rewardPerTokenPaid) / 1e18  + user.pendingRewards;\\n        }\\n    }\\n\\n    /**\\n     * @notice Gets the timestamp that the tokens will be locked until\\n     * @dev This doesnt take withdrawal delay into account\\n     * @param pid The pool id to get the timestamp from\\n     * @param account The address to get the timestamp from\\n     * @return The lock timestamp of `account` in the pool `pid`\\n     */\\n    function lockUntil(uint256 pid, address account) public view returns (uint256) {\\n        PoolInfo storage pool = poolInfo[pid];\\n        UserInfo storage user = userInfo[pid][account];\\n        return user.depositTime + pool.lockPeriod;\\n    }\\n\\n    /**\\n     * @notice Gets wether the `account` is locked by the pool locking period\\n     * @dev This doesnt take withdrawal delay into account\\n     * @param pid The pool id to check\\n     * @param account The address to check\\n     * @return A boolean of wheter the `account` is locked or not in pool `pid`\\n     */\\n    function locked(uint256 pid, address account) public view returns (bool) {\\n        return (block.timestamp < lockUntil(pid, account));\\n    }\\n\\n    /**\\n     * @notice Gets the timestamp that the withdrawal delay ends\\n     * @dev For pools with withdrawal delay the returned value keep incresing until unstake requested\\n     * @param pid The pool id to check\\n     * @param account The address to check\\n     * @return The staked timestamp of `account` in the pool `pid`\\n     */\\n    function stakedUntil(uint256 pid, address account) public view returns (uint256) {\\n        PoolInfo storage pool = poolInfo[pid];\\n        UserInfo storage user = userInfo[pid][account];\\n        uint256 delayedTime; \\n        if (pool.withdrawDelay == 0) {\\n            // If no withdrawDelay\\n            delayedTime = 0;\\n        } else if (user.unstakeRequestTime == 0) {\\n            // If withdrawDelay and no withdraw request\\n            delayedTime = block.timestamp + pool.withdrawDelay;\\n        } else {\\n            // If withdrawDelay and already requested withdraw a previous time\\n            delayedTime = user.unstakeRequestTime + pool.withdrawDelay;\\n        }\\n        return delayedTime;\\n    }\\n\\n    /**\\n     * @notice Gets wether the `account` needs to be unstacked to be withdrawable\\n     * @dev Checks if the pool has withdrawal delay and unstake hasnt been requested yet\\n     * @param pid The pool id to check\\n     * @param account The address to check\\n     * @return A boolean of wheter unstake needs to be called\\n     */\\n    function needUnstake(uint256 pid, address account) public view returns (bool) {\\n        PoolInfo storage pool = poolInfo[pid];\\n        UserInfo storage user = userInfo[pid][account];\\n        return (pool.withdrawDelay != 0 && user.unstakeRequestTime == 0);\\n    }\\n\\n    /**\\n     * @notice Gets when the `account` has a running withdrawal delay\\n     * @dev Returns false for pools that withdrawal delay has ended\\n     * @param pid The pool id to check\\n     * @param account The address to check\\n     * @return A boolean of wheter the `account` is unstaking `pid`\\n     */\\n    function unstaking(uint256 pid, address account) public view returns (bool) {\\n        PoolInfo storage pool = poolInfo[pid];\\n        if (pool.withdrawDelay == 0) {\\n            return false;\\n        } else if (needUnstake(pid, account)) {\\n            return false;\\n        } else {\\n            return (block.timestamp < stakedUntil(pid, account));\\n        }\\n    }\\n\\n    /**\\n     * @notice Gets whether the `account` can withdraw from pool `pid`\\n     * @dev If pool have withdraw delay, then ensure it has been runned and finished, else calls `lockUntil`\\n     * @param pid The pool id to check\\n     * @param account The address to check\\n     * @return A boolean of wheter the `account` can withdraw from pool `pid`\\n     */\\n    function withdrawable(uint256 pid, address account) public view returns (bool) {\\n        PoolInfo storage pool = poolInfo[pid];\\n        if (pool.withdrawDelay == 0 && pool.lockPeriod == 0) {\\n            return true;\\n        } else if (needUnstake(pid, account)) {\\n            return false;\\n        } else {\\n            return (!locked(pid, account) && !unstaking(pid, account));\\n        }\\n    }\\n\\n    /**\\n     * @notice Gets the available withdrawable amount for `account` in the pool `pid`\\n     * @dev If not withdawable return 0, if lock and vesting period ended return the full amount,\\n     * else linear release by the vesting period\\n     * @param pid The pool id to get the timestamp from\\n     * @param account The address to get the timestamp from\\n     * @return The available withdrawable amount for `account` in the pool `pid`\\n     */\\n    function availableWithdraw(uint256 pid, address account) public view returns (uint256) {\\n        PoolInfo storage pool = poolInfo[pid];\\n        UserInfo storage user = userInfo[pid][account];\\n        if (!withdrawable(pid, account)) {\\n            return 0;\\n        } else if (block.timestamp >= user.depositTime + pool.lockPeriod + pool.vestingPeriod) {\\n            return user.amount;\\n        } else {\\n            return (user.amount + user.withdrawn) * (\\n                block.timestamp - user.depositTime - pool.lockPeriod )/(pool.vestingPeriod\\n            ) - user.withdrawn;\\n        }\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n    /**\\n     * @notice Stake tokens to the pool `pid`\\n     * @dev `StakeFor` and `delegatee` can be passed as `address(0)` and the `stake` will work in a sensible way\\n     * @param pid Pool id to be staked in\\n     * @param amount The amount of tokens to stake\\n     * @param stakeFor The address to stake the tokens for or 0x0 if staking for oneself\\n     * @param delegatee The address of the delegatee or 0x0 if there is none\\n     */\\n    function stake(\\n        uint256 pid,\\n        uint256 amount,\\n        address stakeFor,\\n        address delegatee\\n        ) external nonReentrant whenNotPaused updateReward(pid, msg.sender)\\n    {\\n        require(amount > 0, \\\"ERR_CAN_NOT_STAKE_ZERO\\\");\\n\\n        // Stake for the sender if not specified otherwise.\\n        if (stakeFor == address(0)) {\\n            stakeFor = msg.sender;\\n        }\\n\\n        // Delegate for stakeFor if not specified otherwise.\\n        if (delegatee == address(0)) {\\n            delegatee = stakeFor;\\n        }\\n\\n        PoolInfo storage pool = poolInfo[pid];\\n        UserInfo storage user = userInfo[pid][stakeFor];\\n        IERC20 stakingToken = IERC20(pool.stakingToken);\\n\\n        if (stakeFor != msg.sender) {\\n            // Avoid third parties to reset stake vestings\\n            require(user.amount == 0, \\\"ERR_STAKE_FOR_LIVE_USER\\\");\\n        }\\n\\n        //  Reset withdrawDelay due to new stake\\n        if (pool.withdrawDelay != 0 && user.unstakeRequestTime != 0){\\n            user.unstakeRequestTime = 0;\\n            _boostVotingPower(pid, stakeFor);\\n        }\\n\\n        // Update voting power if there is a new delegatee\\n        address previousDelegatee = user.delegatee;\\n        if (previousDelegatee != delegatee) {\\n            uint256 previousVotingPower = user.amount * pool.votingMultiplier;\\n            _decreaseVotingPower(previousDelegatee, previousVotingPower);\\n            _increaseVotingPower(delegatee, previousVotingPower);\\n            // Update delegatee.\\n            user.delegatee = delegatee;\\n\\n        }\\n\\n        // Update stake parms\\n        pool.depositedAmount = pool.depositedAmount + amount;\\n        user.amount = user.amount + amount;\\n        // Beware, depositing in a pool with running vesting resets it\\n        user.depositTime = block.timestamp;\\n        user.withdrawn = 0;\\n        stakingToken.safeTransferFrom(msg.sender, address(this), amount);\\n\\n        // Increase voting power due to new stake\\n        uint256 newVotingPower = amount * pool.votingMultiplier;\\n        _increaseVotingPower(delegatee, newVotingPower);\\n\\n        emit Staked(pid, stakeFor, amount);\\n    }\\n\\n    /**\\n     * @notice Unstake tokens to start the withdrawal delay\\n     * @dev Only needed for pools with withdrawal delay\\n     * @param pid Pool id to be withdrawn from\\n     */\\n    function unstake(uint256 pid) external nonReentrant updateReward(pid, msg.sender) {\\n        require(needUnstake(pid, msg.sender), \\\"ERR_ALREADY_UNSTAKED\\\");\\n        require(!locked(pid, msg.sender), \\\"ERR_TOKENS_LOCKED\\\");\\n\\n        UserInfo storage user = userInfo[pid][msg.sender];\\n\\n        _unboostVotingPower(pid, msg.sender);\\n        user.unstakeRequestTime = block.timestamp;\\n        emit Unstaking(pid, msg.sender, stakedUntil(pid, msg.sender));\\n    }\\n\\n    /**\\n     * @notice Cancel unstaking to boost voting power and get rewards\\n     * @param pid Pool id to cancel unstake from\\n     */\\n    function cancelUnstake(uint256 pid) external nonReentrant updateReward(pid, msg.sender) {\\n        require(unstaking(pid, msg.sender), \\\"ERR_ALREADY_UNSTAKED\\\");\\n\\n        UserInfo storage user = userInfo[pid][msg.sender];\\n\\n        user.unstakeRequestTime = 0;\\n        _boostVotingPower(pid, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Withdraw tokens from pool according to the delay, lock and vesting schedules\\n     * @param pid Pool id to be withdrawn from\\n     * @param amount The amount of tokens to be withdrawn\\n     */\\n    function withdraw(uint256 pid, uint256 amount) public nonReentrant updateReward(pid, msg.sender) {\\n        require(amount > 0, \\\"ERR_CAN_NOT_WTIHDRAW_ZERO\\\");\\n        require(amount <= availableWithdraw(pid, msg.sender), \\\"ERR_WITHDRAW_MORE_THAN_AVAILABLE\\\");\\n \\n        PoolInfo storage pool = poolInfo[pid];\\n        UserInfo storage user = userInfo[pid][msg.sender];\\n\\n        // Remove voting power\\n        uint256 votingPower = user.unstakeRequestTime == 0 ? amount * pool.votingMultiplier : amount;\\n        _decreaseVotingPower(user.delegatee, votingPower);\\n        IERC20 stakingToken = IERC20(pool.stakingToken);\\n\\n        // Update stake parms\\n        pool.depositedAmount = pool.depositedAmount - amount;\\n        user.amount = user.amount - amount;\\n        user.withdrawn = user.withdrawn + amount;\\n        stakingToken.safeTransfer(msg.sender, amount);\\n        emit Withdrawn(pid, msg.sender, amount);\\n    }\\n\\n    /**\\n     * @notice Claim the earned rewards for the transaction sender in the pool `pid`\\n     * @param pid Pool id to get the rewards from\\n     */\\n    function getReward(uint256 pid) public nonReentrant updateReward(pid, msg.sender) {\\n        UserInfo storage user = userInfo[pid][msg.sender];\\n        uint256 reward = user.pendingRewards;\\n        if (reward > 0) {\\n            user.pendingRewards = 0;\\n            kacy.safeTransfer(msg.sender, reward);\\n            emit RewardPaid(pid, msg.sender, reward);\\n        }\\n    }\\n\\n    /**\\n     * @notice Withdraw fund and claim the earned rewards for the transaction sender in the pool `pid`\\n     * @param pid Pool id to get the rewards from\\n     */\\n    function exit(uint256 pid) external {\\n        UserInfo storage user = userInfo[pid][msg.sender];\\n        withdraw(pid, user.amount);\\n        getReward(pid);\\n    }\\n\\n    /**\\n     * @notice Delegate all votes from `msg.sender` to `delegatee`\\n     * @dev This is a governance function, but it is defined here because it depends on `balanceOf`\\n     * @param delegatee The address to delegate votes to\\n     */\\n    function delegateAll(address delegatee) external {\\n        for (uint256 pid; pid <= poolInfo.length; pid++){\\n            if (balanceOf(pid, msg.sender) > 0){\\n                UserInfo storage user = userInfo[pid][msg.sender];\\n                if(user.delegatee != delegatee) {\\n                    _delegate(pid, msg.sender, delegatee);\\n                }\\n            }\\n        }\\n    }\\n\\n    /* ========== RESTRICTED FUNCTIONS ========== */\\n\\n    /// @dev Add new staking pool\\n    function addPool(\\n        address _stakingToken,\\n        uint256 _rewardsDuration,\\n        uint256 _lockPeriod,\\n        uint256 _withdrawDelay,\\n        uint256 _vestingPeriod,\\n        uint256 _votingMultiplier\\n        ) external onlyOwner\\n    {\\n        require(kacyAddress != address(0), \\\"ERR_KACY_NOT_SET\\\");\\n\\n        // Pools that gives voting power must have kacy as staking token\\n        // and must have a volting multiplier higher than the base 1\\n        if (_votingMultiplier != 0) {\\n            require(_stakingToken == kacyAddress, \\\"ERR_NOT_VOTING_STAKING_TOKEN\\\");\\n            require(_votingMultiplier >= 1, \\\"ERR_LOW_VOTING_MULTIPLIER\\\");\\n        }\\n\\n        poolInfo.push(\\n            PoolInfo({\\n                stakingToken: _stakingToken,\\n                depositedAmount: 0,\\n                lastUpdateTime: 0,\\n                rewardPerTokenStored: 0,\\n                rewardsDuration: _rewardsDuration,\\n                rewardRate: 0,\\n                periodFinish: 0,\\n                lockPeriod: _lockPeriod,\\n                withdrawDelay: _withdrawDelay,\\n                vestingPeriod: _vestingPeriod,\\n                votingMultiplier: _votingMultiplier\\n            })\\n        );\\n        emit NewPool(poolInfo.length - 1);\\n    }\\n\\n    /// @dev Add rewards to the pool\\n    function addReward(uint256 pid, uint256 reward) external onlyOwner updateReward(pid, address(0)) {\\n        PoolInfo storage pool = poolInfo[pid];\\n        require(pool.rewardsDuration > 0, \\\"ERR_REWARD_DURATION_ZERO\\\");\\n\\n        kacy.safeTransferFrom(msg.sender, address(this), reward);\\n\\n        if (block.timestamp >= pool.periodFinish) {\\n            pool.rewardRate = reward / pool.rewardsDuration;\\n        } else {\\n            uint256 remaining = pool.periodFinish - block.timestamp;\\n            uint256 leftover = remaining * pool.rewardRate;\\n            pool.rewardRate = (reward + leftover) / pool.rewardsDuration;\\n        }\\n\\n        pool.lastUpdateTime = block.timestamp;\\n        pool.periodFinish = (block.timestamp + pool.rewardsDuration);\\n        emit RewardAdded(pid, reward);\\n    }\\n\\n    /// @dev End rewards emission earlier\\n    function updatePeriodFinish(uint256 pid, uint256 timestamp) external onlyOwner updateReward(pid, address(0)) {\\n        PoolInfo storage pool = poolInfo[pid];\\n        pool.periodFinish = timestamp;\\n    }\\n\\n    /// @dev Recover tokens from pool\\n    function recoverERC20(uint256 pid, address tokenAddress, uint256 tokenAmount) external onlyOwner {\\n        PoolInfo storage pool = poolInfo[pid];\\n        require(tokenAddress != address(pool.stakingToken), \\\"ERR_RECOVER_STAKING_TOKEN\\\");\\n        address owner = owner();\\n        IERC20(tokenAddress).safeTransfer(owner, tokenAmount);\\n        emit Recovered(pid, tokenAddress, tokenAmount);\\n    }\\n\\n    /// @dev Set new rewards distribution duration\\n    function setRewardsDuration(uint256 pid, uint256 _rewardsDuration) external onlyOwner {\\n        PoolInfo storage pool = poolInfo[pid];\\n        require(block.timestamp > pool.periodFinish, \\\"ERR_RUNNING_REWARDS\\\");\\n        pool.rewardsDuration = _rewardsDuration;\\n        emit RewardsDurationUpdated(pid, pool.rewardsDuration);\\n    }\\n    \\n    /// @dev Set the governance and reward token\\n    function setKacy(address _kacy) external onlyOwner {\\n        require(_kacy != address(0), \\\"ERR_ZERO_ADDRESS\\\");\\n        require(kacyAddress == address(0), \\\"ERR_KACY_ALREADY_SET\\\");\\n        bool returnValue = IERC20(_kacy).transfer(msg.sender, 0);\\n        require(returnValue, \\\"ERR_NONCONFORMING_TOKEN\\\");\\n        kacy = IERC20(_kacy);\\n        kacyAddress = _kacy;\\n    }\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    /// @dev Modifier that is called to update pool and user rewards stats everytime a user interact with a pool\\n    modifier updateReward(uint pid, address account) {\\n        PoolInfo storage pool = poolInfo[pid];\\n        UserInfo storage user = userInfo[pid][account];\\n        \\n        if (poolInfo[pid].lastUpdateTime == 0) {\\n            pool.lastUpdateTime = block.timestamp;\\n        } else {\\n            pool.rewardPerTokenStored = rewardPerToken(pid);\\n            pool.lastUpdateTime = lastTimeRewardApplicable(pid);\\n        }\\n\\n\\n        if (account != address(0)) {\\n            user.pendingRewards = earned(pid, account);\\n            user.rewardPerTokenPaid = pool.rewardPerTokenStored;\\n        }\\n        _;\\n    }\\n\\n    /* ========== PURE FUNCTIONS ========== */\\n\\n    function _max(uint a, uint b) private pure returns (uint) {\\n        return a > b ? a : b;\\n    }\\n\\n    function _min(uint a, uint b) private pure returns (uint) {\\n        return a < b ? a : b;\\n    }\\n\\n    /* ========== EVENTS ========== */\\n\\n    event NewPool(uint256 indexed pid);\\n    event RewardAdded(uint256 indexed pid, uint256 indexed reward);\\n    event Staked(uint256 indexed pid, address indexed user, uint256 amount);\\n    event Unstaking(uint256 indexed pid, address indexed user,uint256 availableAt);\\n    event Withdrawn(uint256 indexed pid, address indexed user, uint256 amount);\\n    event RewardPaid(uint256 indexed pid, address indexed user, uint256 reward);\\n    event RewardsDurationUpdated(uint256 indexed pid, uint256 duration);\\n    event Recovered(uint256 indexed pid, address indexed token, uint256 indexed amount);\\n\\n}\\n\"\r\n    },\r\n    \"./contracts/StakingGov.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport \\\"./StakingStorage.sol\\\";\\n\\ncontract StakingGov is StakingStorage {\\n\\n    /* ========== VIEWS ========== */\\n\\n    /**\\n     * @notice Gets the current sum of votes balance all accounts in all pools\\n     * @return The number of current total votes\\n     */\\n    function getTotalVotes() external view returns (uint256) {\\n        return totalVotes;\\n    }\\n\\n    /**\\n     * @notice Gets the current votes balance for `account`\\n     * @param account The address to get votes balance\\n     * @return The number of current votes for `account`\\n     */\\n    function getCurrentVotes(address account) external view returns (uint256) {\\n        uint32 nCheckpoints = numCheckpoints[account];\\n        return nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\\n    }\\n\\n    /**\\n     * @notice Determine the prior number of votes for an account as of a block number\\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\\n     * @param account The address of the account to check\\n     * @param blockNumber The block number to get the vote balance at\\n     * @return The number of votes the account had as of the given block\\n     */\\n    function getPriorVotes(address account, uint blockNumber) public view returns (uint256) {\\n        require(blockNumber < block.number, \\\"ERR_VOTES_NOT_YET_DETERMINED\\\");\\n\\n        uint32 nCheckpoints = numCheckpoints[account];\\n        if (nCheckpoints == 0) {\\n            return 0;\\n        }\\n\\n        // First check most recent balance\\n        if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\\n            return checkpoints[account][nCheckpoints - 1].votes;\\n        }\\n\\n        // Next check implicit zero balance\\n        if (checkpoints[account][0].fromBlock > blockNumber) {\\n            return 0;\\n        }\\n\\n        uint32 lower = 0;\\n        uint32 upper = nCheckpoints - 1;\\n        while (upper > lower) {\\n            uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\n            Checkpoint memory cp = checkpoints[account][center];\\n            if (cp.fromBlock == blockNumber) {\\n                return cp.votes;\\n            } else if (cp.fromBlock < blockNumber) {\\n                lower = center;\\n            } else {\\n                upper = center - 1;\\n            }\\n        }\\n        return checkpoints[account][lower].votes;\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n    /**\\n     * @notice Delegate votes from `msg.sender` in `pid` to `delegatee`\\n     * @param pid Pool id to be staked in\\n     * @param delegatee The address to delegate votes to\\n     */\\n    function delegate(uint256 pid, address delegatee) public {\\n        return _delegate(pid, msg.sender, delegatee);\\n    }\\n\\n    /**\\n     * @notice Delegates votes from signatory to `delegatee`\\n     * @param delegatee The address to delegate votes to\\n     * @param nonce The contract state required to match the signature\\n     * @param expiry The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function delegateBySig(uint256 pid, address delegatee, uint nonce, uint expiry, uint8 v, bytes32 r, bytes32 s) public {\\n        bytes32 domainSeparator = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), _getChainId(), address(this)));\\n        bytes32 structHash = keccak256(abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry, pid));\\n        bytes32 digest = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n        address signatory = ecrecover(digest, v, r, s);\\n        require(signatory != address(0), \\\"ERR_INVALID_SIGNATURE\\\");\\n        require(nonce == nonces[signatory]++, \\\"ERR_INVALID_NONCE\\\");\\n        require(block.timestamp <= expiry, \\\"ERR_SIGNATURE_EXPIRED\\\");\\n        return _delegate(pid, signatory, delegatee);\\n    }\\n\\n\\n    function _delegate(uint256 pid, address delegator, address delegatee) internal {\\n        UserInfo storage user = userInfo[pid][delegator];\\n        address currentDelegate = user.delegatee;\\n        uint256 delegatorVotes = _getPoolDelegatorVotes(pid, delegator);\\n        user.delegatee = delegatee;\\n\\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\\n\\n        _moveDelegates(currentDelegate, delegatee, delegatorVotes);\\n    }\\n\\n    function _moveDelegates(address srcRep, address dstRep, uint256 votes) internal {\\n        if (srcRep != dstRep && votes > 0) {\\n            if (srcRep != address(0)) {\\n                _decreaseVotingPower(srcRep, votes);\\n            }\\n            if (dstRep != address(0)) {\\n                _increaseVotingPower(dstRep, votes);\\n            }\\n        }\\n    }\\n\\n    function _decreaseVotingPower(address delegatee, uint256 votes) internal {\\n            uint32 nCheckpoints = numCheckpoints[delegatee];\\n            uint256 oldVotingPower = nCheckpoints > 0 ? checkpoints[delegatee][nCheckpoints - 1].votes : 0;\\n            uint256 newVotingPower = oldVotingPower - votes;\\n            totalVotes -= votes;\\n            _writeCheckpoint(delegatee, nCheckpoints, oldVotingPower, newVotingPower);\\n    }\\n\\n    function _increaseVotingPower(address delegatee, uint256 votes) internal {\\n            uint32 nCheckpoints = numCheckpoints[delegatee];\\n            uint256 oldVotingPower = nCheckpoints > 0 ? checkpoints[delegatee][nCheckpoints - 1].votes : 0;\\n            uint256 newVotingPower = oldVotingPower + votes;\\n            totalVotes += votes;\\n            _writeCheckpoint(delegatee, nCheckpoints, oldVotingPower, newVotingPower);\\n    }\\n\\n    function _getPoolDelegatorVotes(uint256 pid, address delegator) internal view returns(uint256) {\\n        PoolInfo storage pool = poolInfo[pid];\\n        UserInfo storage user = userInfo[pid][delegator];\\n\\n        uint256 delegatorVotes;\\n\\n        if (user.unstakeRequestTime == 0) {\\n            delegatorVotes = user.amount * pool.votingMultiplier;\\n        } else {\\n            delegatorVotes = user.amount;\\n        }\\n\\n        return delegatorVotes;\\n    }\\n\\n    function _unboostVotingPower(uint256 pid, address delegator) internal {\\n        PoolInfo storage pool = poolInfo[pid];\\n        UserInfo storage user = userInfo[pid][delegator];\\n        address delegatee = user.delegatee;\\n        uint256 lostVotingPower = user.amount * (pool.votingMultiplier - 1);\\n        _decreaseVotingPower(delegatee, lostVotingPower);\\n    }\\n\\n    function _boostVotingPower(uint256 pid, address delegator) internal {\\n        PoolInfo storage pool = poolInfo[pid];\\n        UserInfo storage user = userInfo[pid][delegator];\\n        address delegatee = user.delegatee;\\n        uint256 recoveredVotingPower = user.amount * (pool.votingMultiplier - 1);\\n        _increaseVotingPower(delegatee, recoveredVotingPower);\\n    }\\n\\n    function _writeCheckpoint(address delegatee, uint32 nCheckpoints, uint256 oldVotes, uint256 newVotes) internal {\\n      uint32 blockNumber = _safe32(block.number, \\\"StakingGov::_writeCheckpoint: block number exceeds 32 bits\\\");\\n\\n      if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {\\n          checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\\n      } else {\\n          checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);\\n          numCheckpoints[delegatee] = nCheckpoints + 1;\\n      }\\n\\n      emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\\n    }\\n\\n    /* ========== PURES ========== */\\n\\n    function _safe32(uint n, string memory errorMessage) internal pure returns (uint32) {\\n        require(n < 2**32, errorMessage);\\n        return uint32(n);\\n    }\\n\\n    function _getChainId() internal view returns (uint) {\\n        uint256 chainId;\\n        assembly { chainId := chainid() }\\n        return chainId;\\n    }\\n\\n    /* ========== EVENTS ========== */\\n\\n    /// @notice An event thats emitted when the minter address is changed\\n    event MinterChanged(address minter, address newMinter);\\n\\n    /// @notice An event thats emitted when an account changes its delegate\\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\\n\\n    /// @notice An event thats emitted when a delegate account's vote balance changes\\n    event DelegateVotesChanged(address indexed delegate, uint previousBalance, uint newBalance);\\n\\n    /// @notice The standard EIP-20 transfer event\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    /// @notice The standard EIP-20 approval event\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n}\"\r\n    },\r\n    \"./contracts/StakingStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract StakingStorage {\\n\\n    /**\\n     * @dev Struct to store user data for each pool\\n     * @dev `unstakeRequestTime` only with be set to different than zero during withdrawal delays (if the pool have one)\\n     */\\n    struct UserInfo {\\n        uint256 amount;\\n        uint256 depositTime;\\n        uint256 pendingRewards;\\n        uint256 rewardPerTokenPaid;\\n        uint256 unstakeRequestTime;\\n        uint256 withdrawn;\\n        address delegatee;\\n    }\\n\\n    /**\\n     * @dev Struct to store pool params\\n     * @dev `lockPeriod` is a fixed timestamp that need to be achieved to user deposit amount be withdrawable\\n     * @dev `withdrawDelay` is a time locking period that starts after the user makes a withdraw request, after it finish a new withdraw request will fullfil the withdraw\\n     * @dev `vestingPeriod` is a time period that starts after the `lockPeriod` that will linear release the withdrawable amount\\n     */\\n    struct PoolInfo {\\n        // General data\\n        address stakingToken;\\n        uint256 depositedAmount;\\n        // Rewards data and params\\n        uint256 lastUpdateTime;\\n        uint256 rewardPerTokenStored;\\n        uint256 rewardsDuration;\\n        uint256 rewardRate;\\n        uint256 periodFinish;\\n        // Vesting params\\n        uint256 lockPeriod;\\n        uint256 withdrawDelay;\\n        uint256 vestingPeriod;\\n        // Gov params\\n        uint256 votingMultiplier;\\n    }\\n\\n    string public constant name = \\\"Kassandra Staking\\\";\\n\\n    address public kacyAddress;\\n    IERC20 public kacy;\\n\\n    /// @dev Array of pool infos\\n    PoolInfo[] public poolInfo;\\n\\n    /// @dev A map to access the user info for each account: PoolId => Address => UserInfo\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n\\n    /************************** Checkpoints ******************************/\\n\\n    /// @dev A checkpoint for marking the voting power from a given block\\n    struct Checkpoint {\\n        uint32 fromBlock;\\n        uint256 votes;\\n    }\\n\\n    /// @dev A aggregated record of the total voting power of all accounts\\n    uint256 public totalVotes;\\n\\n    /// @dev A record of votes checkpoints for each account, by index\\n    mapping (address => mapping (uint32 => Checkpoint)) public checkpoints;\\n\\n    /// @dev The number of checkpoints for each account\\n    mapping (address => uint32) public numCheckpoints;\\n\\n    /// @notice The EIP-712 typehash for the contract's domain\\n    bytes32 public constant DOMAIN_TYPEHASH = keccak256(\\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\");\\n\\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract\\n    bytes32 public constant DELEGATION_TYPEHASH = keccak256(\\\"Delegation(address delegatee,uint256 nonce,uint256 expiry,uint256 pid)\\\");\\n\\n    /// @notice The EIP-712 typehash for the permit struct used by the contract\\n    bytes32 public constant PERMIT_TYPEHASH = keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n    /// @notice A record of states for signing / validating signatures\\n    mapping (address => uint) public nonces;\\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromDelegate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toDelegate\",\"type\":\"address\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"DelegateVotesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newMinter\",\"type\":\"address\"}],\"name\":\"MinterChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"NewPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"RewardsDurationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"availableAt\",\"type\":\"uint256\"}],\"name\":\"Unstaking\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DELEGATION_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardsDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawDelay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vestingPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_votingMultiplier\",\"type\":\"uint256\"}],\"name\":\"addPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"addReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"availableWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"cancelUnstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"checkpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"fromBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"votes\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"delegateAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"delegateBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"depositedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getCurrentVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getPriorVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"getRewardForDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kacy\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kacyAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"lockUntil\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"locked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"needUnstake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"numCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"stakingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerTokenStored\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardsDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"periodFinish\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawDelay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votingMultiplier\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_kacy\",\"type\":\"address\"}],\"name\":\"setKacy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardsDuration\",\"type\":\"uint256\"}],\"name\":\"setRewardsDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"stakeFor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"stakedUntil\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"unstaking\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"updatePeriodFinish\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerTokenPaid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeRequestTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"withdrawable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Staking", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://38cacd67666cbcdd591359e47960f7e74b32e951169c171696fa430cdefe0bdf"}