{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\n\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n\r\ncontract PresailDroplet {\r\n    using SafeMath for uint256;\r\n    using Address for address payable;\r\n\r\n    function presailDistribute(address payable[] calldata recipients, uint256[] calldata values) external payable {\r\n        require(recipients.length == values.length, \"Recipients and values must have the same length\");\r\n        for (uint256 i = 0; i < recipients.length; i = i.add(1)) {\r\n            require(recipients[i] != address(0), \"Recipient cannot be zero address\");\r\n            recipients[i].sendValue(values[i]);\r\n        }\r\n        uint256 balance = address(this).balance;\r\n        if (balance > 0)\r\n            msg.sender.sendValue(balance);\r\n    }\r\n\r\n    function presailDistributeToken(IERC20 token, address[] calldata recipients, uint256[] calldata values) external {\r\n        require(recipients.length == values.length, \"Recipients and values must have the same length\");\r\n        uint256 total = 0;\r\n        for (uint256 i = 0; i < recipients.length; i = i.add(1))\r\n            total = total.add(values[i]);\r\n        require(token.transferFrom(msg.sender, address(this), total), \"Token transferFrom failed\");\r\n        for (uint256 i = 0; i < recipients.length; i = i.add(1)) {\r\n            require(recipients[i] != address(0), \"Recipient cannot be zero address\");\r\n            require(token.transfer(recipients[i], values[i]), \"Token transfer failed\");\r\n        }\r\n    }\r\n\r\n    function presailDistributeTokenSimple(IERC20 token, address[] calldata recipients, uint256[] calldata values) external {\r\n        require(recipients.length == values.length, \"Recipients and values must have the same length\");\r\n        for (uint256 i = 0; i < recipients.length; i = i.add(1)) {\r\n            require(recipients[i] != address(0), \"Recipient cannot be zero address\");\r\n            require(token.transferFrom(msg.sender, recipients[i], values[i]), \"Token transfer failed\");\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"presailDistribute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"presailDistributeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"presailDistributeTokenSimple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PresailDroplet", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://842e16cff7659094740f96f332fdf25248b718ec37b63c041c2ec00ce59daf12"}