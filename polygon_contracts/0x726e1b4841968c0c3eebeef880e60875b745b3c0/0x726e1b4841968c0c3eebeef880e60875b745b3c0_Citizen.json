{"SourceCode": "pragma solidity 0.5.9;\r\n\r\nlibrary Strings {\r\n    function strConcat(string memory _a, string memory _b, string memory _c, string memory _d, string memory _e) internal pure returns (string memory) {\r\n        bytes memory _ba = bytes(_a);\r\n        bytes memory _bb = bytes(_b);\r\n        bytes memory _bc = bytes(_c);\r\n        bytes memory _bd = bytes(_d);\r\n        bytes memory _be = bytes(_e);\r\n        string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\r\n        bytes memory babcde = bytes(abcde);\r\n        uint k = 0;\r\n        for (uint i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];\r\n        for (uint i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];\r\n        for (uint i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];\r\n        for (uint i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];\r\n        for (uint i = 0; i < _be.length; i++) babcde[k++] = _be[i];\r\n        return string(babcde);\r\n    }\r\n\r\n    function strConcat(string memory _a, string memory _b, string memory _c, string memory _d) internal pure returns (string memory) {\r\n        return strConcat(_a, _b, _c, _d, \"\");\r\n    }\r\n\r\n    function strConcat(string memory _a, string memory _b, string memory _c) internal pure returns (string memory) {\r\n        return strConcat(_a, _b, _c, \"\", \"\");\r\n    }\r\n\r\n    function strConcat(string memory _a, string memory _b) internal pure returns (string memory) {\r\n        return strConcat(_a, _b, \"\", \"\", \"\");\r\n    }\r\n\r\n    function uint2str(uint i) internal pure returns (string memory) {\r\n        if (i == 0) return \"0\";\r\n        uint j = i;\r\n        uint len;\r\n        while (j != 0) {\r\n            len++;\r\n            j /= 10;\r\n        }\r\n        bytes memory bstr = new bytes(len);\r\n        uint k = len - 1;\r\n        while (i != 0) {\r\n            bstr[k--] = byte(uint8(48 + i % 10));\r\n            i /= 10;\r\n        }\r\n        return string(bstr);\r\n    }\r\n\r\n    function bytes32ToString(bytes32 x) internal pure returns (string memory) {\r\n        bytes memory bytesString = new bytes(32);\r\n        uint charCount = 0;\r\n        for (uint j = 0; j < 32; j++) {\r\n            byte char = byte(bytes32(uint(x) * 2 ** (8 * j)));\r\n            if (char != 0) {\r\n                bytesString[charCount] = char;\r\n                charCount++;\r\n            }\r\n        }\r\n        bytes memory bytesStringTrimmed = new bytes(charCount);\r\n        for (uint j = 0; j < charCount; j++) {\r\n            bytesStringTrimmed[j] = bytesString[j];\r\n        }\r\n        return string(bytesStringTrimmed);\r\n    }\r\n\r\n    function bytesToUInt(bytes32 b) internal pure returns (uint256){\r\n        uint256 number;\r\n        for (uint i = 0; i < b.length; i++) {\r\n            number = number + uint256(uint8(b[i])) * (2 ** (8 * (b.length - (i + 1))));\r\n        }\r\n        return number;\r\n    }\r\n\r\n}\r\n\r\ninterface IERC165 {\r\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\r\n}\r\n\r\n\r\ninterface IERC721Receiver {\r\n    function onERC721Received(address _operator, address _from, uint256 _tokenId, bytes calldata _data) external returns (bytes4);\r\n}\r\n\r\ninterface IERC721 {\r\n    function name() external view returns (string memory _name);\r\n\r\n    function symbol() external view returns (string memory _symbol);\r\n\r\n    function ownerOf(uint256 _tokenId) external view returns (address);\r\n\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) external;\r\n\r\n    function approve(address _approved, uint256 _tokenId) external;\r\n\r\n    function setApprovalForAll(address _operator, bool _approved) external;\r\n\r\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\r\n\r\n    function getApproved(uint256 _tokenId) external view returns (address);\r\n\r\n    function balanceOf(address _owner) external view returns (uint256);\r\n\r\n    function tokenURI(uint256 _tokenId) external view returns (string memory);\r\n\r\n    function baseTokenURI() external view returns (string memory);\r\n\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes calldata data) external payable;\r\n\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external payable;\r\n\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\r\n    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\r\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\r\n\r\n\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only owner\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"Transfer to null address is not allowed\");\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n}\r\n\r\ncontract Beneficiary is Ownable {\r\n\r\n    address payable public beneficiary;\r\n\r\n    constructor() public  {\r\n        beneficiary = msg.sender;\r\n    }\r\n\r\n    function setBeneficiary(address payable _beneficiary) public onlyOwner {\r\n        beneficiary = _beneficiary;\r\n    }\r\n\r\n    function withdrawal(uint256 value) public onlyOwner {\r\n        if (value > address(this).balance) {\r\n            revert(\"Insufficient balance\");\r\n        }\r\n\r\n        beneficiaryPayout(value);\r\n    }\r\n\r\n    function withdrawalAll() public onlyOwner {\r\n        beneficiaryPayout(address(this).balance);\r\n    }\r\n\r\n    function beneficiaryPayout(uint256 value) internal {\r\n        beneficiary.transfer(value);\r\n        emit BeneficiaryPayout(value);\r\n    }\r\n\r\n    event BeneficiaryPayout(uint256 value);\r\n}\r\n\r\n\r\ncontract Manageable is Beneficiary {\r\n    uint DEFAULT_GAME_PERIOD = 1 days;\r\n\r\n    uint256 DECIMALS = 10e8;\r\n\r\n    bool maintenance = false;\r\n\r\n    mapping(address => bool) public managers;\r\n\r\n    modifier onlyManager() {\r\n\r\n        require(managers[msg.sender] || msg.sender == address(this), \"Only managers allowed\");\r\n        _;\r\n    }\r\n\r\n    modifier notOnMaintenance() {\r\n        require(!maintenance);\r\n        _;\r\n    }\r\n\r\n    bool saleOpen = false;\r\n\r\n    modifier onlyOnSale() {\r\n        require(saleOpen);\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        managers[msg.sender] = true;\r\n    }\r\n\r\n    function setMaintenanceStatus(bool _status) public onlyManager {\r\n        maintenance = _status;\r\n        emit Maintenance(_status);\r\n    }\r\n\r\n    function setManager(address _manager) public onlyOwner {\r\n        managers[_manager] = true;\r\n    }\r\n\r\n    function deleteManager(address _manager) public onlyOwner {\r\n        delete managers[_manager];\r\n    }\r\n\r\n    function _addressToPayable(address _address) internal pure returns (address payable) {\r\n        return address(uint160(_address));\r\n    }\r\n\r\n    function setGameDefaultPeriod(uint _period) public onlyManager {\r\n        DEFAULT_GAME_PERIOD = _period;\r\n    }\r\n\r\n    event Maintenance(bool status);\r\n    event FailedPayout(address to, uint256 value);\r\n\r\n}\r\n\r\n\r\ncontract LockableToken is Manageable {\r\n    mapping(uint256 => bool) public locks;\r\n\r\n    modifier onlyNotLocked(uint256 _tokenId) {\r\n        require(!locks[_tokenId]);\r\n        _;\r\n    }\r\n\r\n    function isLocked(uint256 _tokenId) public view returns (bool) {\r\n        return locks[_tokenId];\r\n    }\r\n\r\n    function lockToken(uint256 _tokenId) public onlyManager {\r\n        locks[_tokenId] = true;\r\n    }\r\n\r\n    function unlockToken(uint256 _tokenId) public onlyManager {\r\n        locks[_tokenId] = false;\r\n    }\r\n\r\n    function _lockToken(uint256 _tokenId) internal {\r\n        locks[_tokenId] = true;\r\n    }\r\n\r\n    function _unlockToken(uint256 _tokenId) internal {\r\n        locks[_tokenId] = false;\r\n    }\r\n\r\n}\r\n\r\ncontract ERC721 is Manageable, LockableToken, IERC721, IERC165 {\r\n    using Strings for string;\r\n    address public market;\r\n\r\n\r\n    mapping(address => uint256) public balances;\r\n    mapping(uint256 => address) public approved;\r\n    mapping(address => mapping(address => bool)) private operators;\r\n    mapping(uint256 => address) private tokenOwner;\r\n\r\n    uint256 public totalSupply = 0;\r\n\r\n    string private _tokenURI = \"\";\r\n\r\n    string private tokenName = '';\r\n    string private tokenSymbol = '';\r\n\r\n    modifier onlyTokenOwner(uint256 _tokenId) {\r\n        require(msg.sender == tokenOwner[_tokenId]);\r\n        _;\r\n    }\r\n\r\n    function setName(string memory _name) public onlyManager {\r\n        tokenName = _name;\r\n    }\r\n\r\n    function setSymbol(string memory _symbol) public onlyManager {\r\n        tokenSymbol = _symbol;\r\n    }\r\n\r\n    function name() external view returns (string memory _name) {\r\n        return tokenName;\r\n    }\r\n\r\n    function symbol() external view returns (string memory _symbol) {\r\n        return tokenSymbol;\r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceID) external view returns (bool) {\r\n        return interfaceID == 0x5b5e139f || interfaceID == 0x80ac58cd;\r\n    }\r\n\r\n    function setBaseTokenURI(string memory _newTokenURI) public onlyManager {\r\n        _tokenURI = _newTokenURI;\r\n    }\r\n\r\n    function setMarketContract(address _market) public onlyManager {\r\n        market = _market;\r\n    }\r\n\r\n    function ownerOf(uint256 _tokenId) public view returns (address) {\r\n        return tokenOwner[_tokenId];\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) public onlyNotLocked(_tokenId) {\r\n        require(_to != address(0));\r\n        require(_isApprovedOrOwner(msg.sender, _tokenId));\r\n\r\n        _transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    function approve(address _approved, uint256 _tokenId) public onlyNotLocked(_tokenId) {\r\n        address owner = ownerOf(_tokenId);\r\n        require(_approved != owner);\r\n        require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\r\n\r\n        approved[_tokenId] = _approved;\r\n\r\n        emit Approval(owner, _approved, _tokenId);\r\n    }\r\n\r\n    function setApprovalForAll(address _operator, bool _approved) public {\r\n        require(_operator != msg.sender);\r\n\r\n        operators[msg.sender][_operator] = _approved;\r\n        emit ApprovalForAll(msg.sender, _operator, _approved);\r\n    }\r\n\r\n    function setApprovalForAllSender(address payable _sender, address _operator, bool _approved) public onlyManager {\r\n        require(_operator != _sender);\r\n\r\n        operators[_sender][_operator] = _approved;\r\n        emit ApprovalForAll(_sender, _operator, _approved);\r\n    }\r\n\r\n    function isApprovedForAll(address _owner, address _operator) public view returns (bool) {\r\n        return operators[_owner][_operator] || _operator == market;\r\n    }\r\n\r\n    function getApproved(uint256 _tokenId) public view returns (address) {\r\n        return approved[_tokenId];\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n        return balances[_owner];\r\n    }\r\n\r\n\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {\r\n        address owner = ownerOf(tokenId);\r\n        return (\r\n        spender == owner\r\n        || getApproved(tokenId) == spender\r\n        || isApprovedForAll(owner, spender)\r\n        );\r\n    }\r\n\r\n    function transfer(address _from, address _to, uint256 _tokenId) public onlyTokenOwner(_tokenId) onlyNotLocked(_tokenId) {\r\n        require(_to != address(0));\r\n        _transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    function transferSender(address payable _sender, address _from, address _to, uint256 _tokenId) public onlyManager onlyNotLocked(_tokenId) {\r\n        require(_to != address(0));\r\n        require(_sender == _from);\r\n        _transfer(_sender, _to, _tokenId);\r\n    }\r\n\r\n    function _transfer(address _from, address _to, uint256 _tokenId) internal {\r\n        require(ownerOf(_tokenId) == _from);\r\n\r\n        delete approved[_tokenId];\r\n\r\n        if (_from != address(0)) {\r\n            balances[_from]--;\r\n        } else {\r\n            totalSupply++;\r\n        }\r\n\r\n        if (_to != address(0)) {\r\n            balances[_to]++;\r\n        }\r\n\r\n        tokenOwner[_tokenId] = _to;\r\n\r\n        emit Transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    function _mint(uint256 _tokenId, address _owner) internal {\r\n        _transfer(address(0), _owner, _tokenId);\r\n    }\r\n\r\n    function _burn(uint256 _tokenId) internal {\r\n        _transfer(ownerOf(_tokenId), address(0), _tokenId);\r\n    }\r\n\r\n\r\n    function baseTokenURI() public view returns (string memory) {\r\n        return _tokenURI;\r\n    }\r\n\r\n    function tokenURI(uint256 _tokenId) external view returns (string memory) {\r\n        return Strings.strConcat(\r\n            baseTokenURI(),\r\n            Strings.uint2str(_tokenId)\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes calldata data) external payable {\r\n        require(_isApprovedOrOwner(msg.sender, _tokenId));\r\n        require(_to != address(0));\r\n\r\n        IERC721Receiver receiver = IERC721Receiver(_to);\r\n\r\n        _transfer(_from, _to, _tokenId);\r\n\r\n        require(receiver.onERC721Received(msg.sender, _from, _tokenId, data) == bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\")));\r\n    }\r\n\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external payable {\r\n        require(_isApprovedOrOwner(msg.sender, _tokenId));\r\n        require(_to != address(0));\r\n\r\n        IERC721Receiver receiver = IERC721Receiver(_to);\r\n\r\n        _transfer(_from, _to, _tokenId);\r\n\r\n        require(receiver.onERC721Received(msg.sender, _from, _tokenId, \"\") == bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\")));\r\n    }\r\n\r\n    function burn(uint256 _tokenId) public onlyManager {\r\n        _burn(_tokenId);\r\n    }\r\n\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\r\n    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\r\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\r\n}\r\n\r\ncontract Citizen is Manageable, ERC721 {\r\n\r\n    struct Token {\r\n        uint8[7] special;\r\n        uint8 generation;\r\n        bytes32 look;\r\n    }\r\n\r\n    mapping(uint => Token) public tokens;\r\n\r\n    constructor() public {\r\n        setSymbol(\"MCPC\");\r\n        setName(\"MCP Citizen\");\r\n        setBaseTokenURI(\"https://mcp.town/api/citizen/\");\r\n    }\r\n\r\n    function mint(address _owner, uint8[7] memory _special, uint8 _generation, bytes32 _look) public onlyManager returns (uint256){\r\n        uint _tokenId = totalSupply;\r\n        tokens[_tokenId] = Token(_special, _generation, _look);\r\n        _mint(_tokenId, _owner);\r\n        return _tokenId;\r\n    }\r\n\r\n    function mintWithTokenId(uint256 _tokenId, address _owner, uint8[7] memory _special, uint8 _generation, bytes32 _look) public onlyManager returns (uint256){\r\n        require(ownerOf(_tokenId) == address(0));\r\n\r\n        tokens[_tokenId] = Token(_special, _generation, _look);\r\n        _mint(_tokenId, _owner);\r\n        return _tokenId;\r\n    }\r\n\r\n    function batchMintWithTokenId(uint256[] memory _tokenId, address[] memory _owner, uint8[7][] memory _special, uint8[] memory _generation, bytes32[] memory _look) public onlyManager {\r\n        for (uint i = 0; i < _tokenId.length; i++) {\r\n            if (ownerOf(_tokenId[i]) != address(0)) {\r\n                continue;\r\n            }\r\n\r\n            tokens[_tokenId[i]] = Token(_special[i], _generation[i], _look[i]);\r\n            _mint(_tokenId[i], _owner[i]);\r\n        }\r\n    }\r\n\r\n    function incSpecial(uint256 _tokenId, uint8 _specId) public onlyManager {\r\n        require(_specId < 8 && tokens[_tokenId].special[_specId] < 12);\r\n\r\n        emit SpecChanged(_tokenId, _specId, tokens[_tokenId].special[_specId]);\r\n    }\r\n\r\n    function decSpecial(uint256 _tokenId, uint8 _specId) public onlyManager {\r\n        require(_specId < 8 && tokens[_tokenId].special[_specId] > 0);\r\n\r\n        tokens[_tokenId].special[_specId]--;\r\n        emit SpecChanged(_tokenId, _specId, tokens[_tokenId].special[_specId]);\r\n    }\r\n\r\n    function getSpecial(uint256 _tokenId) public view returns (uint8[7] memory) {\r\n        return tokens[_tokenId].special;\r\n    }\r\n\r\n    function setLook(uint256 _tokenId, bytes32 _look) public onlyManager {\r\n        tokens[_tokenId].look = _look;\r\n    }\r\n\r\n    function setLookBytes(uint256 _tokenId, byte[] memory value, uint8[] memory position) public onlyManager {\r\n        for (uint256 i = 0; i < value.length; i++) {\r\n            tokens[_tokenId].look = _setByte(tokens[_tokenId].look, position[i], value[i]);\r\n        }\r\n\r\n        emit LookChanged(_tokenId, tokens[_tokenId].look);\r\n    }\r\n\r\n    function setLookByte(uint256 _tokenId, byte value, uint8 position) public onlyManager {\r\n        tokens[_tokenId].look = _setByte(tokens[_tokenId].look, position, value);\r\n        emit LookChanged(_tokenId, tokens[_tokenId].look);\r\n    }\r\n\r\n    function _setByte(bytes32 _bt, uint8 position, byte value) internal pure returns (bytes32) {\r\n        uint256 _c = uint256(_bt);\r\n\r\n        return bytes32((_c & ~(0xFF * (uint256(2) ** position))) | (uint8(value) * (uint256(2) ** position)));\r\n    }\r\n\r\n    event LookChanged(uint256 _tokenId, bytes32 _look);\r\n    event SpecChanged(uint256 _tokenId, uint8 _specId, uint8 _value);\r\n    event ToTicket(uint256 _tokenId);\r\n}\r\n", "ABI": "[{\"constant\":true,\"inputs\":[{\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_approved\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_special\",\"type\":\"uint8[7]\"},{\"name\":\"_generation\",\"type\":\"uint8\"},{\"name\":\"_look\",\"type\":\"bytes32\"}],\"name\":\"mintWithTokenId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"value\",\"type\":\"bytes1[]\"},{\"name\":\"position\",\"type\":\"uint8[]\"}],\"name\":\"setLookBytes\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"setBeneficiary\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newTokenURI\",\"type\":\"string\"}],\"name\":\"setBaseTokenURI\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_specId\",\"type\":\"uint8\"}],\"name\":\"decSpecial\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"setGameDefaultPeriod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"name\":\"generation\",\"type\":\"uint8\"},{\"name\":\"look\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"value\",\"type\":\"bytes1\"},{\"name\":\"position\",\"type\":\"uint8\"}],\"name\":\"setLookByte\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_look\",\"type\":\"bytes32\"}],\"name\":\"setLook\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_operator\",\"type\":\"address\"},{\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAllSender\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"approved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"lockToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"market\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"deleteManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"},{\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"setSymbol\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_special\",\"type\":\"uint8[7]\"},{\"name\":\"_generation\",\"type\":\"uint8\"},{\"name\":\"_look\",\"type\":\"bytes32\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"baseTokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferSender\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"unlockToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getSpecial\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8[7]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_specId\",\"type\":\"uint8\"}],\"name\":\"incSpecial\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256[]\"},{\"name\":\"_owner\",\"type\":\"address[]\"},{\"name\":\"_special\",\"type\":\"uint8[7][]\"},{\"name\":\"_generation\",\"type\":\"uint8[]\"},{\"name\":\"_look\",\"type\":\"bytes32[]\"}],\"name\":\"batchMintWithTokenId\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawalAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"locks\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"isLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setMaintenanceStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_market\",\"type\":\"address\"}],\"name\":\"setMarketContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"managers\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_look\",\"type\":\"bytes32\"}],\"name\":\"LookChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_specId\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint8\"}],\"name\":\"SpecChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ToTicket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"Maintenance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"FailedPayout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"BeneficiaryPayout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]", "ContractName": "Citizen", "CompilerVersion": "v0.5.9+commit.e560f70d", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": ""}