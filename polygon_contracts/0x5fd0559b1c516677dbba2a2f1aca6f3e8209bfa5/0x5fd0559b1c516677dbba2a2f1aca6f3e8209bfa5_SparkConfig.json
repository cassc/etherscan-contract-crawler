{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISparkConfig.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ISparkConfig {\\n    event ServiceFeeRateChanged(OrderType orderType, address indexed merchantAddress, uint96 previousRate, uint96 newRate);\\n    event MinServiceFeeChanged(OrderType orderType, address indexed token, uint256 previousServiceFee, uint256 newServiceFee);\\n    event MaxServiceFeeChanged(OrderType orderType, address indexed token, uint256 previousServiceFee, uint256 newServiceFee);\\n    event DefaultMinServiceFeeChanged(OrderType orderType, uint256 previousServiceFee, uint256 newServiceFee);\\n    event PlatformAddressTransferred(address indexed previous, address indexed to);\\n\\n\\n    enum OrderType {\\n        Payment,\\n        MultiPayment\\n    }\\n\\n    /**\\n    * @param rate        - The merchant's rate.\\n    * @param setRated    - True if this merchant is setRated.\\n    */\\n    struct RateInfo {\\n        uint96 rate;\\n        bool setRated;\\n    }\\n\\n    struct ServiceFeeInfo {\\n        uint256 paymentServiceFee;\\n        uint256 multiPaymentServiceFee;\\n        bool setPaymentServiceFee;\\n        bool setMultiPaymentServiceFee;\\n    }\\n\\n    struct ServiceFee {\\n        uint256 paymentServiceFee;\\n        uint256 multiPaymentServiceFee;\\n    }\\n\\n    function setPlatformAddress(address platformAddress) external;\\n\\n    function getPlatformAddress() external view returns (address);\\n\\n    function setServiceFeeRate(OrderType orderType, address merchantAddress, uint96 rate) external;\\n\\n    function getServiceFeeRate(OrderType orderType, address merchantAddress) external view returns (uint96);\\n\\n    function setDefaultServiceFeeRate(OrderType orderType, uint96 rate) external;\\n\\n    function getDefaultServiceFeeRate(OrderType orderType) external view returns (uint96);\\n\\n    function setMinServiceFee(OrderType orderType, address token, uint256 serviceFee) external;\\n\\n    function getMinServiceFee(OrderType orderType, address token) external view returns (uint256);\\n\\n    function setMaxServiceFee(OrderType orderType, address token, uint256 serviceFee) external;\\n\\n    function getMaxServiceFee(OrderType orderType, address token) external view returns (uint256);\\n\\n    function setDefaultMinServiceFee(OrderType orderType, uint256 serviceFee) external;\\n\\n    function getDefaultMinServiceFee(OrderType orderType) external view returns (uint256);\\n\\n    function checkPause() external view;\\n\\n    function maxRate() external pure returns (uint96);\\n\\n    function minRate() external pure returns (uint96);\\n}\\n\"\r\n    },\r\n    \"contracts/pay/SparkConfig.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\n\\nimport \\\"../interfaces/ISparkConfig.sol\\\";\\n\\ncontract SparkConfig is ISparkConfig, Pausable, Ownable {\\n    address private _platformAddress;\\n    uint96 private _defaultPaymentServiceFeeRate;\\n    uint96 private _defaultMultiPaymentServiceFeeRate;\\n    uint96 private constant MIN_RATE = 0;\\n    uint96 private constant MAX_RATE = 1000;\\n    mapping(address => RateInfo) public paymentServiceFeeRateInfo;\\n    mapping(address => RateInfo) public multiPaymentServiceFeeRateInfo;\\n\\n    ServiceFee public defaultMinServiceFee;\\n    mapping(address => ServiceFeeInfo) public minServiceFeeInfo;\\n    mapping(address => ServiceFeeInfo) public maxServiceFeeInfo;\\n\\n    constructor(address platformAddress, uint96 defaultPaymentServiceFeeRate, uint96 defaultMultiPaymentServiceFeeRate, uint256 defaultMinPaymentServiceFee, uint256 defaultMinMultiPaymentServiceFee, address newOwner)  {\\n        setPlatformAddress(platformAddress);\\n        setDefaultServiceFeeRate(OrderType.Payment, defaultPaymentServiceFeeRate);\\n        setDefaultServiceFeeRate(OrderType.MultiPayment, defaultMultiPaymentServiceFeeRate);\\n        setDefaultMinServiceFee(OrderType.Payment, defaultMinPaymentServiceFee);\\n        setDefaultMinServiceFee(OrderType.MultiPayment, defaultMinMultiPaymentServiceFee);\\n        transferOwnership(newOwner);\\n    }\\n\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    function checkPause() external view whenNotPaused {\\n    }\\n\\n    function setPlatformAddress(address platformAddress) public onlyOwner {\\n        require(platformAddress != address(0), \\\"invalid platform address\\\");\\n        emit PlatformAddressTransferred(_platformAddress, platformAddress);\\n        _platformAddress = platformAddress;\\n    }\\n\\n    function getPlatformAddress() external view returns (address)  {\\n        return _platformAddress;\\n    }\\n\\n    function setServiceFeeRate(OrderType orderType, address merchantAddress, uint96 rate) external onlyOwner {\\n        _checkRate(rate);\\n        if (orderType == OrderType.Payment) {\\n            RateInfo storage info = paymentServiceFeeRateInfo[merchantAddress];\\n            emit ServiceFeeRateChanged(orderType, merchantAddress, info.rate, rate);\\n            info.rate = rate;\\n            info.setRated = true;\\n        } else {\\n            RateInfo storage info = multiPaymentServiceFeeRateInfo[merchantAddress];\\n            emit ServiceFeeRateChanged(orderType, merchantAddress, info.rate, rate);\\n            info.rate = rate;\\n            info.setRated = true;\\n        }\\n    }\\n\\n    function getServiceFeeRate(OrderType orderType, address merchantAddress) external view returns (uint96) {\\n        if (orderType == OrderType.Payment) {\\n            RateInfo memory info = paymentServiceFeeRateInfo[merchantAddress];\\n            return info.setRated ? info.rate : getDefaultServiceFeeRate(orderType);\\n        } else {\\n            RateInfo memory info = multiPaymentServiceFeeRateInfo[merchantAddress];\\n            return info.setRated ? info.rate : getDefaultServiceFeeRate(orderType);\\n        }\\n    }\\n\\n    function setDefaultServiceFeeRate(OrderType orderType, uint96 rate) public onlyOwner {\\n        _checkRate(rate);\\n        uint96 previousRate;\\n        if (orderType == OrderType.Payment) {\\n            previousRate = _defaultPaymentServiceFeeRate;\\n            _defaultPaymentServiceFeeRate = rate;\\n        } else {\\n            previousRate = _defaultMultiPaymentServiceFeeRate;\\n            _defaultMultiPaymentServiceFeeRate = rate;\\n        }\\n        emit ServiceFeeRateChanged(orderType, address(0), previousRate, rate);\\n    }\\n\\n    function getDefaultServiceFeeRate(OrderType orderType) public view returns (uint96) {\\n        if (orderType == OrderType.Payment) {\\n            return _defaultPaymentServiceFeeRate;\\n        } else {\\n            return _defaultMultiPaymentServiceFeeRate;\\n        }\\n    }\\n\\n    function setMinServiceFee(OrderType orderType, address token, uint256 serviceFee) public onlyOwner {\\n        ServiceFeeInfo storage info = minServiceFeeInfo[token];\\n        uint256 previousServiceFee;\\n        if (orderType == OrderType.Payment) {\\n            previousServiceFee = info.paymentServiceFee;\\n            info.paymentServiceFee = serviceFee;\\n            info.setPaymentServiceFee = true;\\n        } else {\\n            previousServiceFee = info.multiPaymentServiceFee;\\n            info.multiPaymentServiceFee = serviceFee;\\n            info.setMultiPaymentServiceFee = true;\\n        }\\n        emit MinServiceFeeChanged(orderType, token, previousServiceFee, serviceFee);\\n    }\\n\\n    function getMinServiceFee(OrderType orderType, address token) public view returns (uint256) {\\n        ServiceFeeInfo memory info = minServiceFeeInfo[token];\\n        if (orderType == OrderType.Payment) {\\n            return info.setPaymentServiceFee ? info.paymentServiceFee : getDefaultMinServiceFee(orderType);\\n        } else {\\n            return info.setMultiPaymentServiceFee ? info.multiPaymentServiceFee : getDefaultMinServiceFee(orderType);\\n        }\\n    }\\n\\n    function setMaxServiceFee(OrderType orderType, address token, uint256 serviceFee) public onlyOwner {\\n        ServiceFeeInfo storage info = maxServiceFeeInfo[token];\\n        uint256 previousServiceFee;\\n        if (orderType == OrderType.Payment) {\\n            previousServiceFee = info.paymentServiceFee;\\n            info.paymentServiceFee = serviceFee;\\n            info.setPaymentServiceFee = true;\\n        } else {\\n            previousServiceFee = info.multiPaymentServiceFee;\\n            info.multiPaymentServiceFee = serviceFee;\\n            info.setMultiPaymentServiceFee = true;\\n        }\\n        emit MaxServiceFeeChanged(orderType, token, previousServiceFee, serviceFee);\\n    }\\n\\n    function getMaxServiceFee(OrderType orderType, address token) public view returns (uint256) {\\n        ServiceFeeInfo memory info = maxServiceFeeInfo[token];\\n        if (orderType == OrderType.Payment) {\\n            return info.setPaymentServiceFee ? info.paymentServiceFee : 0;\\n        } else {\\n            return info.setMultiPaymentServiceFee ? info.multiPaymentServiceFee : 0;\\n        }\\n    }\\n\\n    function setDefaultMinServiceFee(OrderType orderType, uint256 serviceFee) public onlyOwner {\\n        uint256 previousServiceFee;\\n        if (orderType == OrderType.Payment) {\\n            previousServiceFee = defaultMinServiceFee.paymentServiceFee;\\n            defaultMinServiceFee.paymentServiceFee = serviceFee;\\n        } else {\\n            previousServiceFee = defaultMinServiceFee.multiPaymentServiceFee;\\n            defaultMinServiceFee.multiPaymentServiceFee = serviceFee;\\n        }\\n        emit DefaultMinServiceFeeChanged(orderType, previousServiceFee, serviceFee);\\n    }\\n\\n    function getDefaultMinServiceFee(OrderType orderType) public view returns (uint256) {\\n        if (orderType == OrderType.Payment) {\\n            return defaultMinServiceFee.paymentServiceFee;\\n        } else {\\n            return defaultMinServiceFee.multiPaymentServiceFee;\\n        }\\n    }\\n\\n    function _checkRate(uint96 rate) internal view virtual {\\n        require(rate >= MIN_RATE, \\\"rate must be greater than or equal to 0\\\");\\n        require(rate < MAX_RATE, \\\"rate must be less than 1000\\\");\\n    }\\n\\n    function maxRate() external pure returns (uint96) {\\n        return MAX_RATE;\\n    }\\n\\n    function minRate() external pure returns (uint96) {\\n        return MIN_RATE;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"paris\",\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"platformAddress\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"defaultPaymentServiceFeeRate\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"defaultMultiPaymentServiceFeeRate\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"defaultMinPaymentServiceFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"defaultMinMultiPaymentServiceFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum ISparkConfig.OrderType\",\"name\":\"orderType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousServiceFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newServiceFee\",\"type\":\"uint256\"}],\"name\":\"DefaultMinServiceFeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum ISparkConfig.OrderType\",\"name\":\"orderType\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousServiceFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newServiceFee\",\"type\":\"uint256\"}],\"name\":\"MaxServiceFeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum ISparkConfig.OrderType\",\"name\":\"orderType\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousServiceFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newServiceFee\",\"type\":\"uint256\"}],\"name\":\"MinServiceFeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previous\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"PlatformAddressTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum ISparkConfig.OrderType\",\"name\":\"orderType\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"merchantAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"previousRate\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"newRate\",\"type\":\"uint96\"}],\"name\":\"ServiceFeeRateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"checkPause\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultMinServiceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"paymentServiceFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"multiPaymentServiceFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ISparkConfig.OrderType\",\"name\":\"orderType\",\"type\":\"uint8\"}],\"name\":\"getDefaultMinServiceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ISparkConfig.OrderType\",\"name\":\"orderType\",\"type\":\"uint8\"}],\"name\":\"getDefaultServiceFeeRate\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ISparkConfig.OrderType\",\"name\":\"orderType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getMaxServiceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ISparkConfig.OrderType\",\"name\":\"orderType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getMinServiceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPlatformAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ISparkConfig.OrderType\",\"name\":\"orderType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"merchantAddress\",\"type\":\"address\"}],\"name\":\"getServiceFeeRate\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxRate\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxServiceFeeInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"paymentServiceFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"multiPaymentServiceFee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"setPaymentServiceFee\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"setMultiPaymentServiceFee\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minRate\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minServiceFeeInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"paymentServiceFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"multiPaymentServiceFee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"setPaymentServiceFee\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"setMultiPaymentServiceFee\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"multiPaymentServiceFeeRateInfo\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"rate\",\"type\":\"uint96\"},{\"internalType\":\"bool\",\"name\":\"setRated\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"paymentServiceFeeRateInfo\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"rate\",\"type\":\"uint96\"},{\"internalType\":\"bool\",\"name\":\"setRated\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ISparkConfig.OrderType\",\"name\":\"orderType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"serviceFee\",\"type\":\"uint256\"}],\"name\":\"setDefaultMinServiceFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ISparkConfig.OrderType\",\"name\":\"orderType\",\"type\":\"uint8\"},{\"internalType\":\"uint96\",\"name\":\"rate\",\"type\":\"uint96\"}],\"name\":\"setDefaultServiceFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ISparkConfig.OrderType\",\"name\":\"orderType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"serviceFee\",\"type\":\"uint256\"}],\"name\":\"setMaxServiceFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ISparkConfig.OrderType\",\"name\":\"orderType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"serviceFee\",\"type\":\"uint256\"}],\"name\":\"setMinServiceFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"platformAddress\",\"type\":\"address\"}],\"name\":\"setPlatformAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ISparkConfig.OrderType\",\"name\":\"orderType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"merchantAddress\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"rate\",\"type\":\"uint96\"}],\"name\":\"setServiceFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SparkConfig", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000009849f05313781b0a4ae21747f78bcaa73469b8af0000000000000000000000000000000000000000000000000000000000000009000000000000000000000000000000000000000000000000000000000000000900000000000000000000000000000000000000000000000000000000000027100000000000000000000000000000000000000000000000000000000000002710000000000000000000000000df992e187812775fa9c00b4a157fa6f50aee41f7", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}