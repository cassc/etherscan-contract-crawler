{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/GhostFaucet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/IGhostFaucet.sol\\\";\\nimport \\\"./interfaces/IERC721Envious.sol\\\";\\nimport \\\"./interfaces/IERC721EnviousDynamic.sol\\\";\\nimport \\\"./libraries/Sigmoid.sol\\\";\\nimport \\\"./openzeppelin/token/ERC20/IERC20.sol\\\";\\nimport \\\"./openzeppelin/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./openzeppelin/token/ERC721/IERC721.sol\\\";\\nimport \\\"./openzeppelin/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\\ncontract GhostFaucet is IGhostFaucet {\\n\\n\\tusing SafeERC20 for IERC20;\\n\\tusing Sigmoid for Sigmoid.SigmoidParams;\\n\\n\\tuint256 public immutable override baseDisperse;\\n\\tuint256 public immutable override baseAmount;\\n\\taddress public immutable override nftAddress;\\n\\taddress public immutable override tokenAddress;\\n\\n\\tuint256 public override totalTokensMinted;\\n\\tmapping(address => uint256) public override nftsMinted;\\n\\tmapping(address => uint256) public override tokensMinted;\\n\\tmapping(address => uint256) public override referralsNumber;\\n\\n\\tSigmoid.SigmoidParams private _sigmoid;\\n\\n\\tconstructor (\\n\\t\\taddress collection, \\n\\t\\taddress token, \\n\\t\\tuint256 disperse, \\n\\t\\tuint256 amount,\\n\\t\\tint256[3] memory sigmoidParams\\n\\t) {\\n\\t\\trequire(\\n\\t\\t\\tIERC721(collection).supportsInterface(type(IERC721EnviousDynamic).interfaceId) &&\\n\\t\\t\\tIERC721(collection).supportsInterface(type(IERC721Enumerable).interfaceId), \\n\\t\\t\\t\\\"Not a dynamic collection\\\"\\n\\t\\t);\\n\\t\\trequire(token != address(0), \\\"Bad constructor addresses\\\");\\n\\t\\t\\n\\t\\tnftAddress = collection;\\n\\t\\ttokenAddress = token;\\n\\t\\tbaseDisperse = disperse;\\n\\t\\tbaseAmount = amount;\\n\\n\\t\\t_sigmoid = Sigmoid.SigmoidParams(sigmoidParams[0], sigmoidParams[1], sigmoidParams[2]);\\n\\n\\t\\tIERC20(token).approve(collection, type(uint256).max);\\n\\t}\\n\\n\\tfunction sendMeGhostNft(address friend) external payable override {\\n\\t\\t// NOTE: function `tokenOfOwnerByIndex` should revert if zero balance of address `friend`\\n\\t\\tuint256 tokenId = IERC721Enumerable(nftAddress).tokenOfOwnerByIndex(friend, 0);\\n\\t\\tuint256 ownedNfts = nftsMinted[msg.sender];\\n\\t\\tuint256 amount = baseAmount + baseAmount * sigmoidValue(referralsNumber[friend]);\\n\\n\\t\\treferralsNumber[friend] += 1;\\n\\t\\tnftsMinted[msg.sender] += 1;\\n\\n\\t\\ttokensMinted[friend] += amount;\\n\\t\\ttotalTokensMinted += amount;\\n\\n\\t\\tif (ownedNfts > 0) {\\n\\t\\t\\tuint256 disperseAmount = baseDisperse + baseDisperse * sigmoidValue(ownedNfts);\\n\\t\\t\\t(uint256[] memory values, address[] memory etherAddresses) = _prepareValues(disperseAmount, address(0));\\n\\t\\t\\t// NOTE: function `disperse` should revert if `disperseAmount` less then msg.value\\n\\t\\t\\tIERC721Envious(nftAddress).disperse{value: disperseAmount}(values, etherAddresses);\\n\\t\\t}\\n\\n\\t\\t(uint256[] memory amounts, address[] memory tokenAddresses) = _prepareValues(amount, tokenAddress);\\n\\t\\tIERC721EnviousDynamic(nftAddress).mint(msg.sender);\\n\\t\\tIERC721Envious(nftAddress).collateralize(tokenId, amounts, tokenAddresses);\\n\\n\\t\\t// solhint-disable-next-line\\n\\t\\temit AssetAirdropped(msg.sender, friend, amount, block.timestamp);\\n\\t}\\n\\n\\tfunction sigmoidValue(uint256 x) public override view returns (uint256) {\\n\\t\\treturn _sigmoid.sigmoid(x);\\n\\t}\\n\\n\\tfunction _prepareValues(\\n\\t\\tuint256 amount,\\n\\t\\taddress collateralAddress\\n\\t) private pure returns (uint256[] memory, address[] memory) {\\n\\t\\tuint256[] memory amounts = new uint256[](1);\\n\\t\\taddress[] memory tokenAddresses = new address[](1);\\n\\t\\t\\n\\t\\tamounts[0] = amount;\\n\\t\\ttokenAddresses[0] = collateralAddress;\\n\\n\\t\\treturn (amounts, tokenAddresses);\\n\\t}\\n}\\n\"\r\n    },\r\n    \"/contracts/openzeppelin/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"/contracts/openzeppelin/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/openzeppelin/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"/contracts/openzeppelin/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"/contracts/openzeppelin/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/openzeppelin/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"/contracts/openzeppelin/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"/contracts/libraries/Sigmoid.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Sigmoid {\\n\\tstruct SigmoidParams {\\n\\t\\tint256 a;\\n\\t\\tint256 b;\\n\\t\\tint256 c;\\n\\t}\\n\\t\\n\\tfunction sigmoid(SigmoidParams storage params, uint256 x) internal view returns (uint256) {\\n\\t\\tint256 numerator = int256(x) - params.b;\\n\\t\\tuint256 toDenominator = uint256(numerator * numerator + params.c);\\n\\t\\tint256 denominator = _sqrt(toDenominator);\\n\\t\\t\\n\\t\\treturn uint256(params.a + (params.a * numerator / denominator));\\n\\t}\\n\\t\\n\\tfunction _sqrt(uint256 x) private pure returns (int256) {\\n\\t\\tif (x == 0) return 0;\\n\\t\\t\\n\\t\\tuint256 xx = x;\\n\\t\\tuint256 r = 1;\\n\\t\\t\\n\\t\\tif (xx >= 0x100000000000000000000000000000000) {\\n\\t\\t\\txx >>= 128;\\n\\t\\t\\tr <<= 64;\\n\\t\\t}\\n\\t\\t\\n\\t\\tif (xx >= 0x10000000000000000) {\\n\\t\\t\\txx >>= 64;\\n\\t\\t\\tr <<= 32;\\n\\t\\t}\\n\\t\\t\\n\\t\\tif (xx >= 0x100000000) {\\n\\t\\t\\txx >>= 32;\\n\\t\\t\\tr <<= 16;\\n\\t\\t}\\n\\t\\t\\n\\t\\tif (xx >= 0x10000) {\\n\\t\\t\\txx >>= 16;\\n\\t\\t\\tr <<= 8;\\n\\t\\t}\\n\\t\\t\\n\\t\\tif (xx >= 0x100) {\\n\\t\\t\\txx >>= 8;\\n\\t\\t\\tr <<= 4;\\n\\t\\t}\\n\\t\\t\\n\\t\\tif (xx >= 0x10) {\\n\\t\\t\\txx >>= 4;\\n\\t\\t\\tr <<= 2;\\n\\t\\t}\\n\\t\\t\\n\\t\\tif (xx >= 0x8) {\\n\\t\\t\\tr <<= 1;\\n\\t\\t}\\n\\t\\t\\n\\t\\tr = (r + x / r) >> 1;\\n\\t\\tr = (r + x / r) >> 1;\\n\\t\\tr = (r + x / r) >> 1;\\n\\t\\tr = (r + x / r) >> 1;\\n\\t\\tr = (r + x / r) >> 1;\\n\\t\\tr = (r + x / r) >> 1;\\n\\t\\tr = (r + x / r) >> 1; // Seven iterations should be enough\\n\\t\\t\\n\\t\\tuint256 r1 = x / r;\\n\\t\\treturn int256(r < r1 ? r : r1);\\n\\t}\\n}\\n\"\r\n    },\r\n    \"/contracts/interfaces/IGhostFaucet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n  \\npragma solidity ^0.8.0;\\n\\ninterface IGhostFaucet {\\n\\tevent AssetAirdropped(\\n\\t\\taddress indexed sender, \\n\\t\\taddress indexed friend, \\n\\t\\tuint256 amount, \\n\\t\\tuint256 timestamp\\n\\t);\\n\\n\\t/**\\n\\t * @dev Minimal amount to be dispersed. Used only for addresses with\\n\\t * multiple NFTs.\\n\\t */\\n\\tfunction baseDisperse() external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Minimal reward amount.\\n\\t */\\n\\tfunction baseAmount() external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Dynamic collection address.\\n\\t */\\n\\tfunction nftAddress() external view returns (address);\\n\\n\\t/**\\n\\t * @dev ERC20 token address, which will be distributed as a collateral.\\n\\t */\\n\\tfunction tokenAddress() external view returns (address);\\n\\n\\t/**\\n\\t * @dev Amount of tokens minted by faucet smart contract.\\n\\t */\\n\\tfunction totalTokensMinted() external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Number of NFTs minted to address.\\n\\t */\\n\\tfunction nftsMinted(address who) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Amount of collateral tokens minted to address.\\n\\t */\\n\\tfunction tokensMinted(address who) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Number of invited referrals.\\n\\t */\\n\\tfunction referralsNumber(address who) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Used formula:\\n\\t * y = a + (a * (x - B)) / sqrt((x - B)^2 + C)\\n\\t */\\n\\tfunction sigmoidValue(uint256 x) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Mints new NFT and collateralize NFT of a friend.\\n\\t */\\n\\tfunction sendMeGhostNft(address friend) external payable;\\n}\\n\"\r\n    },\r\n    \"/contracts/interfaces/IERC721EnviousDynamic.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Envious.sol\\\";\\n\\n/**\\n * @title Additional extension for IERC721Envious, in order to make \\n * `tokenURI` dynamic, based on actual collateral.\\n * @author 571nkY @ghostchain\\n * @dev Ability to get royalty payments from collateral NFTs.\\n */\\ninterface IERC721EnviousDynamic is IERC721Envious {\\n\\tstruct Edge {\\n\\t\\tuint256 value;\\n\\t\\tuint256 offset;\\n\\t\\tuint256 range;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Get `tokenURI` for specific token based on edges. Where actual \\n\\t * collateral should define which edge should be used, range shows\\n\\t * maximum value in current edge, offset shows minimal value in current\\n\\t * edge.\\n\\t *\\n\\t * @param tokenId unique identifier for token\\n\\t */\\n\\tfunction getTokenPointer(uint256 tokenId) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"/contracts/interfaces/IERC721Envious.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../openzeppelin/token/ERC721/IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional Envious extension.\\n * @author F4T50 @ghostchain\\n * @author 571nkY @ghostchain\\n * @author 5Tr3TcH @ghostchain\\n * @dev Ability to collateralize each NFT in collection.\\n */\\ninterface IERC721Envious is IERC721 {\\n\\tevent Collateralized(uint256 indexed tokenId, uint256 amount, address tokenAddress);\\n\\tevent Uncollateralized(uint256 indexed tokenId, uint256 amount, address tokenAddress);\\n\\tevent Dispersed(address indexed tokenAddress, uint256 amount);\\n\\tevent Harvested(address indexed tokenAddress, uint256 amount, uint256 scaledAmount);\\n\\n\\t/**\\n\\t * @dev An array with two elements. Each of them represents percentage from collateral\\n\\t * to be taken as a commission. First element represents collateralization commission.\\n\\t * Second element represents uncollateralization commission. There should be 3 \\n\\t * decimal buffer for each of them, e.g. 1000 = 1%.\\n\\t *\\n\\t * @param index of value in array.\\n\\t */\\n\\tfunction commissions(uint256 index) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Address of token that will be paid on bonds.\\n\\t *\\n\\t * @return address address of token.\\n\\t */\\n\\tfunction ghostAddress() external view returns (address);\\n\\n\\t/**\\n\\t * @dev Address of smart contract, that provides purchasing of DeFi 2.0 bonds.\\n\\t *\\n\\t * @return address address of bonding smart.\\n\\t */\\n\\tfunction ghostBondingAddress() external view returns (address);\\n\\n\\t/**\\n\\t * @dev 'Black hole' is any address that guarantee tokens sent to it will not be \\n\\t * retrieved from there. Note: some tokens revert on transfer to zero address.\\n\\t *\\n\\t * @return address address of black hole.\\n\\t */\\n\\tfunction blackHole() external view returns (address);\\n\\n\\t/**\\n\\t * @dev Token that will be used to harvest collected commissions.\\n\\t *\\n\\t * @return address address of token.\\n\\t */\\n\\tfunction communityToken() external view returns (address);\\n\\n\\t/**\\n\\t * @dev Pool of available tokens for harvesting.\\n\\t *\\n\\t * @param index in array.\\n\\t * @return address of token.\\n\\t */\\n\\tfunction communityPool(uint256 index) external view returns (address);\\n\\n\\t/**\\n\\t * @dev Token balance available for harvesting.\\n\\t *\\n\\t * @param tokenAddress addres of token.\\n\\t * @return uint256 token balance.\\n\\t */\\n\\tfunction communityBalance(address tokenAddress) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Array of tokens that were dispersed.\\n\\t *\\n\\t * @param index in array.\\n\\t * @return address address of dispersed token.\\n\\t */\\n\\tfunction disperseTokens(uint256 index) external view returns (address);\\n\\n\\t/**\\n\\t * @dev Amount of tokens that was dispersed.\\n\\t *\\n\\t * @param tokenAddress address of token.\\n\\t * @return uint256 token balance.\\n\\t */\\n\\tfunction disperseBalance(address tokenAddress) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Amount of tokens that was already taken from the disperse.\\n\\t *\\n\\t * @param tokenAddress address of token.\\n\\t * @return uint256 total amount of tokens already taken.\\n\\t */\\n\\tfunction disperseTotalTaken(address tokenAddress) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Amount of disperse already taken by each tokenId.\\n\\t *\\n\\t * @param tokenId unique identifier of unit.\\n\\t * @param tokenAddress address of token.\\n\\t * @return uint256 amount of tokens already taken.\\n\\t */\\n\\tfunction disperseTaken(uint256 tokenId, address tokenAddress) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Available payouts.\\n\\t *\\n\\t * @param bondId bond unique identifier.\\n\\t * @return uint256 potential payout.\\n\\t */\\n\\tfunction bondPayouts(uint256 bondId) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Mapping of `tokenId`s to array of bonds.\\n\\t *\\n\\t * @param tokenId unique identifier of unit.\\n\\t * @param index in array.\\n\\t * @return uint256 index of bond.\\n\\t */\\n\\tfunction bondIndexes(uint256 tokenId, uint256 index) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Mapping of `tokenId`s to token addresses who have collateralized before.\\n\\t *\\n\\t * @param tokenId unique identifier of unit.\\n\\t * @param index in array.\\n\\t * @return address address of token.\\n\\t */\\n\\tfunction collateralTokens(uint256 tokenId, uint256 index) external view returns (address);\\n\\n\\t/**\\n\\t * @dev Token balances that are stored under `tokenId`.\\n\\t *\\n\\t * @param tokenId unique identifier of unit.\\n\\t * @param tokenAddress address of token.\\n\\t * @return uint256 token balance.\\n\\t */\\n\\tfunction collateralBalances(uint256 tokenId, address tokenAddress) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Calculator function for harvesting.\\n\\t *\\n\\t * @param amount of `communityToken`s to spend\\n\\t * @param tokenAddress of token to be harvested\\n\\t * @return amount to harvest based on inputs\\n\\t */\\n\\tfunction getAmount(uint256 amount, address tokenAddress) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Collect commission fees gathered in exchange for `communityToken`.\\n\\t *\\n\\t * @param amounts array of amounts to collateralize\\n\\t * @param tokenAddresses array of token addresses\\n\\t */\\n\\tfunction harvest(uint256[] memory amounts, address[] memory tokenAddresses) external;\\n\\n\\t/**\\n\\t * @dev Collateralize NFT with different tokens and amounts.\\n\\t *\\n\\t * @param tokenId unique identifier for specific NFT\\n\\t * @param amounts array of amounts to collateralize\\n\\t * @param tokenAddresses array of token addresses\\n\\t */\\n\\tfunction collateralize(\\n\\t\\tuint256 tokenId,\\n\\t\\tuint256[] memory amounts,\\n\\t\\taddress[] memory tokenAddresses\\n\\t) external payable;\\n\\n\\t/**\\n\\t * @dev Withdraw underlying collateral.\\n\\t *\\n\\t * Requirements:\\n\\t * - only owner of NFT\\n\\t *\\n\\t * @param tokenId unique identifier for specific NFT\\n\\t * @param amounts array of amounts to collateralize\\n\\t * @param tokenAddresses array of token addresses\\n\\t */\\n\\tfunction uncollateralize(\\n\\t\\tuint256 tokenId, \\n\\t\\tuint256[] memory amounts, \\n\\t\\taddress[] memory tokenAddresses\\n\\t) external;\\n\\n\\t/**\\n\\t * @dev Collateralize NFT with discount, based on available bonds. While\\n\\t * purchased bond will have delay the owner will be current smart contract\\n\\t *\\n\\t * @param bondId the ID of the market\\n\\t * @param tokenId unique identifier of NFT inside current smart contract\\n\\t * @param amount the amount of quote token to spend\\n\\t * @param maxPrice the maximum price at which to buy bond\\n\\t */\\n\\tfunction getDiscountedCollateral(\\n\\t\\tuint256 bondId,\\n\\t\\taddress quoteToken,\\n\\t\\tuint256 tokenId,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 maxPrice\\n\\t) external;\\n\\n\\t/**\\n\\t * @dev Claim collateral inside this smart contract and extending underlying\\n\\t * data mappings.\\n\\t *\\n\\t * @param tokenId unique identifier of NFT inside current smart contract\\n\\t * @param indexes array of note indexes to redeem\\n\\t */\\n\\tfunction claimDiscountedCollateral(uint256 tokenId, uint256[] memory indexes) external;\\n\\n\\t/**\\n\\t * @dev Split collateral among all existent tokens.\\n\\t *\\n\\t * @param amounts to be dispersed among all NFT owners\\n\\t * @param tokenAddresses of token to be dispersed\\n\\t */\\n\\tfunction disperse(uint256[] memory amounts, address[] memory tokenAddresses) external payable;\\n\\n\\t/**\\n\\t * @dev See {IERC721-_mint}\\n\\t */\\n\\tfunction mint(address who) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1337\r\n    },\r\n    \"evmVersion\": \"berlin\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"disperse\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"int256[3]\",\"name\":\"sigmoidParams\",\"type\":\"int256[3]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"friend\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"AssetAirdropped\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"baseAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseDisperse\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nftsMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referralsNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"friend\",\"type\":\"address\"}],\"name\":\"sendMeGhostNft\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"}],\"name\":\"sigmoidValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokensMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokensMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "GhostFaucet", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "1337", "ConstructorArguments": "00000000000000000000000091ba8a14d2cc851abb69212c09f59e06e1e7f0a50000000000000000000000007ef911f8ef130f73d166468c0068753932357b17000000000000000000000000000000000000000000000001f399b1438a1000000000000000000000000000000000000000000000000000001bc16d674ec800000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000c8", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}