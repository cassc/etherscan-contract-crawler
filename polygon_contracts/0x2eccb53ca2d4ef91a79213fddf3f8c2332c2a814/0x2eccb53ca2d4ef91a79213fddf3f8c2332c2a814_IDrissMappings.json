{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.1; \r\n\r\ninterface ERC20 {\r\n    function balanceOf(address _tokenOwner) external view returns (uint balance);\r\n    function transfer(address _to, uint _tokens) external returns (bool success);\r\n    function approve(address _spender, uint256 _value) external returns (bool success);\r\n    function allowance(address _contract, address _spender) external view returns (uint256 remaining);\r\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\r\n}\r\n\r\ncontract IDrissMappings {\r\n    uint public countAdding = 0; \r\n    uint public countDeleting = 0; \r\n    uint public price = 0;      \r\n    uint public creationTime = block.timestamp;\r\n    address public contractOwner = msg.sender; \r\n    mapping(string => string) private IDriss;\r\n    mapping(string => string) private IDrissHash;\r\n    mapping(string => address) public IDrissOwners; \r\n    mapping(string => uint) public payDates;    \r\n    mapping(address => bool) private admins;\r\n    \r\n    event Increment(uint value);\r\n    event Decrement(uint value);\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    event IDrissOwnershipTransferred(address indexed previousIDrissOwner, address indexed newIDrissOwner);\r\n    event IDrissAdded(string indexed hash);\r\n    event IDrissDeleted(string indexed hash);\r\n    event NewPrice(uint price);\r\n    event AdminAdded(address indexed admin);\r\n    event AdminDeleted(address indexed admin);\r\n\r\n\r\n    function addAdmin(address adminAddress) external {\r\n        require(msg.sender == contractOwner, \"Only contractOwner can add admins.\");\r\n        admins[adminAddress] = true;\r\n        emit AdminAdded(adminAddress);\r\n    }\r\n\r\n    function deleteAdmin(address adminAddress) external {\r\n        require(msg.sender == contractOwner, \"Only contractOwner can delete admins.\");\r\n        admins[adminAddress] = false;\r\n        emit AdminDeleted(adminAddress);\r\n    }\r\n\r\n    function setPrice(uint newPrice) external {\r\n        require(msg.sender == contractOwner, \"Only contractOwner can set price.\");\r\n        price = newPrice;\r\n        emit NewPrice(price);\r\n    }\r\n    \r\n    function withdraw() external returns (bytes memory) {\r\n        require(admins[msg.sender] == true, \"Only trusted admin can withdraw.\");\r\n        (bool sent, bytes memory data) = msg.sender.call{value: address(this).balance, gas: 40000}(\"\");\r\n        require(sent, \"Failed to  withdraw.\");\r\n        return data;\r\n    }\r\n\r\n    function withdrawTokens(address tokenContract) external {\r\n        require(admins[msg.sender] == true, \"Only trusted admin can withdraw.\");\r\n        ERC20 tc = ERC20(tokenContract);\r\n        tc.transfer(msg.sender, tc.balanceOf(address(this)));\r\n    }\r\n    \r\n\r\n    function increment() private {\r\n        countAdding += 1;\r\n        emit Increment(countAdding);\r\n    }\r\n    \r\n    function decrement() private {\r\n        countDeleting += 1;\r\n        emit Decrement(countDeleting);\r\n    }\r\n\r\n    function addIDriss(string memory hashPub, string memory hashID, string memory address_, address ownerAddress) external payable {\r\n        require(admins[msg.sender] == true, \"Only trusted admin can add IDriss.\");\r\n        require(keccak256(bytes(IDrissHash[hashPub])) == keccak256(bytes(\"\")), \"Cannot change existing binding.\");\r\n        require(msg.value >= price, \"Not enough MATIC.\");\r\n        IDriss[hashID] = address_;\r\n        IDrissHash[hashPub] = hashID;\r\n        IDrissOwners[hashPub] = ownerAddress;\r\n        payDates[hashPub] = block.timestamp;\r\n        increment();\r\n        emit IDrissAdded(hashPub);\r\n    }\r\n    \r\n    function addIDrissToken(string memory hashPub, string memory hashID, string memory address_, address token, uint amount, address ownerAddress) external payable{\r\n        require(admins[msg.sender] == true, \"Only trusted admin can add IDriss.\");\r\n        require(keccak256(bytes(IDrissHash[hashPub])) == keccak256(bytes(\"\")), \"Binding already created.\");\r\n        ERC20 paymentTc = ERC20(token);\r\n        require(paymentTc.allowance(msg.sender, address(this)) >= amount,\"Insuficient Allowance.\");\r\n        require(paymentTc.transferFrom(msg.sender, address(this), amount),\"Transfer Failed.\");\r\n        IDriss[hashID] = address_;\r\n        IDrissHash[hashPub] = hashID;\r\n        IDrissOwners[hashPub] = ownerAddress;\r\n        payDates[hashPub] = block.timestamp;\r\n        increment();\r\n        emit IDrissAdded(hashPub);\r\n    }\r\n    \r\n    function deleteIDriss(string memory hashPub) external payable {\r\n        require(IDrissOwners[hashPub] == msg.sender, \"Only IDrissOwner can delete binding.\");\r\n        require(keccak256(bytes(IDrissHash[hashPub])) != keccak256(bytes(\"\")), \"Binding does not exist.\");\r\n        delete IDriss[IDrissHash[hashPub]];\r\n        delete IDrissHash[hashPub];\r\n        delete IDrissOwners[hashPub];\r\n        delete payDates[hashPub];\r\n        decrement();\r\n        emit IDrissDeleted(hashPub);\r\n    }\r\n\r\n    function getIDriss(string memory hashPub) public view returns (string memory){\r\n        require(keccak256(bytes(IDrissHash[hashPub])) != keccak256(bytes(\"\")), \"Binding does not exist.\");\r\n        return IDriss[IDrissHash[hashPub]];\r\n    }\r\n\r\n    function transferIDrissOwnership(string memory hashPub, address newOwner) external payable {\r\n        require(IDrissOwners[hashPub] == msg.sender, \"Only IDrissOwner can change ownership.\");\r\n        IDrissOwners[hashPub] = newOwner;\r\n        emit IDrissOwnershipTransferred(msg.sender, newOwner);\r\n    }\r\n\r\n    function transferContractOwnership(address newOwner) public payable {\r\n        require(msg.sender == contractOwner, \"Only contractOwner can change ownership of contract.\");\r\n        require(newOwner != address(0), \"Ownable: new contractOwner is the zero address.\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = contractOwner;\r\n        contractOwner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"AdminAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"AdminDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Decrement\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"hash\",\"type\":\"string\"}],\"name\":\"IDrissAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"hash\",\"type\":\"string\"}],\"name\":\"IDrissDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousIDrissOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newIDrissOwner\",\"type\":\"address\"}],\"name\":\"IDrissOwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Increment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"NewPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"IDrissOwners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adminAddress\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"hashPub\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"hashID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"address_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"}],\"name\":\"addIDriss\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"hashPub\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"hashID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"address_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"}],\"name\":\"addIDrissToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"countAdding\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"countDeleting\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creationTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adminAddress\",\"type\":\"address\"}],\"name\":\"deleteAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"hashPub\",\"type\":\"string\"}],\"name\":\"deleteIDriss\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"hashPub\",\"type\":\"string\"}],\"name\":\"getIDriss\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"payDates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferContractOwnership\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"hashPub\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferIDrissOwnership\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "IDrissMappings", "CompilerVersion": "v0.8.1+commit.df193b15", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://65342377a4dfc75489a7485ed573ae3b327494683658a8f16dc23eb8dc3a7ba6"}