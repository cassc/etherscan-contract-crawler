{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/GamiumVesting/SHO.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\ncontract SHO is Ownable, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    uint32 constant HUNDRED_PERCENT = 1e6;\\n\\n    struct User1 {\\n        uint16 claimedUnlocksCount;\\n        uint16 eliminatedAfterUnlock;\\n        uint120 allocation;\\n    }\\n\\n    struct User2 {\\n        uint120 allocation;\\n        uint120 debt;\\n        uint16 claimedUnlocksCount;\\n        uint120 currentUnlocked;\\n        uint120 currentClaimed;\\n        uint120 totalUnlocked;\\n        uint120 totalClaimed;\\n    }\\n\\n    mapping(address => User1) public users1;\\n    mapping(address => User2) public users2;\\n\\n    IERC20 public immutable shoToken;\\n    uint64 public immutable startTime;\\n    address public immutable feeCollector;\\n    uint32 public immutable baseFeePercentage1;\\n    uint32 public immutable baseFeePercentage2;\\n    uint32 public immutable freeClaimablePercentage;\\n    address public immutable burnValley;\\n    uint32 public immutable burnPercentage;\\n\\n    uint32[] public unlockPercentages;\\n    uint32[] public unlockPeriods;\\n    uint120[] public extraFees2;\\n    bool public whitelistingAllowed = true;\\n\\n    uint16 passedUnlocksCount;\\n    uint120 public globalTotalAllocation1;\\n    uint120 public globalTotalAllocation2;\\n\\n    uint16 public collectedFeesUnlocksCount;\\n    uint120 public extraFees1Allocation;\\n    uint120 public extraFees1AllocationUncollectable;\\n\\n    event Whitelist(address user, uint120 allocation, uint8 option);\\n\\n    event Claim1(\\n        address indexed user,\\n        uint16 currentUnlock,\\n        uint120 claimedTokens\\n    );\\n\\n    event Claim2(\\n        address indexed user,\\n        uint16 currentUnlock,\\n        uint120 claimedTokens,\\n        uint120 baseClaimed,\\n        uint120 chargedfee\\n    );\\n\\n    event FeeCollection(\\n        uint16 currentUnlock,\\n        uint120 totalFee,\\n        uint120 extraFee,\\n        uint120 burned\\n    );\\n\\n    event UserElimination(address user, uint16 currentUnlock);\\n\\n    event Update(uint16 passedUnlocksCount);\\n\\n    modifier onlyWhitelistedUser1() {\\n        require(\\n            users1[msg.sender].allocation > 0,\\n            \\\"SHO: caller is not whitelisted or does not have the correct option\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyWhitelistedUser2() {\\n        require(\\n            users2[msg.sender].allocation > 0,\\n            \\\"SHO: caller is not whitelisted or does not have the correct option\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n        @param _shoToken token that whitelisted users claim\\n        @param _unlockPercentagesDiff array of unlock percentages as differentials\\n            (how much of total user's whitelisted allocation can a user claim per unlock) \\n        @param _unlockPeriodsDiff array of unlock periods as differentials\\n            (when unlocks happen from startTime)\\n        @param _baseFeePercentage1 base fee in percentage for option 1 users\\n        @param _baseFeePercentage2 base fee in percentage for option 2 users\\n        @param _feeCollector EOA that receives fees\\n        @param _startTime when users can start claiming\\n        @param _burnValley burned tokens are sent to this address if the SHO token is not burnable\\n        @param _burnPercentage burn percentage of extra fees\\n        @param _freeClaimablePercentage how much can users of type 2 claim in the current unlock without a fee\\n     */\\n    constructor(\\n        IERC20 _shoToken,\\n        uint32[] memory _unlockPercentagesDiff,\\n        uint32[] memory _unlockPeriodsDiff,\\n        uint32 _baseFeePercentage1,\\n        uint32 _baseFeePercentage2,\\n        address _feeCollector,\\n        uint64 _startTime,\\n        address _burnValley,\\n        uint32 _burnPercentage,\\n        uint32 _freeClaimablePercentage\\n    ) {\\n        require(\\n            address(_shoToken) != address(0),\\n            \\\"SHO: sho token zero address\\\"\\n        );\\n        require(_unlockPercentagesDiff.length > 0, \\\"SHO: 0 unlock percentages\\\");\\n        require(\\n            _unlockPercentagesDiff.length <= 800,\\n            \\\"SHO: too many unlock percentages\\\"\\n        );\\n        require(\\n            _unlockPeriodsDiff.length == _unlockPercentagesDiff.length,\\n            \\\"SHO: different array lengths\\\"\\n        );\\n        require(\\n            _baseFeePercentage1 <= HUNDRED_PERCENT,\\n            \\\"SHO: base fee percentage 1 higher than 100%\\\"\\n        );\\n        require(\\n            _baseFeePercentage2 <= HUNDRED_PERCENT,\\n            \\\"SHO: base fee percentage 2 higher than 100%\\\"\\n        );\\n        require(_feeCollector != address(0), \\\"SHO: fee collector zero address\\\");\\n        require(\\n            _startTime > block.timestamp,\\n            \\\"SHO: start time must be in future\\\"\\n        );\\n        require(_burnValley != address(0), \\\"SHO: burn valley zero address\\\");\\n        require(\\n            _burnPercentage <= HUNDRED_PERCENT,\\n            \\\"SHO: burn percentage higher than 100%\\\"\\n        );\\n        require(\\n            _freeClaimablePercentage <= HUNDRED_PERCENT,\\n            \\\"SHO: free claimable percentage higher than 100%\\\"\\n        );\\n\\n        // build arrays of sums for easier calculations\\n        uint32[] memory _unlockPercentages = _buildArraySum(\\n            _unlockPercentagesDiff\\n        );\\n        uint32[] memory _unlockPeriods = _buildArraySum(_unlockPeriodsDiff);\\n        require(\\n            _unlockPercentages[_unlockPercentages.length - 1] ==\\n                HUNDRED_PERCENT,\\n            \\\"SHO: invalid unlock percentages\\\"\\n        );\\n\\n        shoToken = _shoToken;\\n        unlockPercentages = _unlockPercentages;\\n        unlockPeriods = _unlockPeriods;\\n        baseFeePercentage1 = _baseFeePercentage1;\\n        baseFeePercentage2 = _baseFeePercentage2;\\n        feeCollector = _feeCollector;\\n        startTime = _startTime;\\n        burnValley = _burnValley;\\n        burnPercentage = _burnPercentage;\\n        freeClaimablePercentage = _freeClaimablePercentage;\\n        extraFees2 = new uint120[](_unlockPercentagesDiff.length);\\n    }\\n\\n    /** \\n        @param userAddresses addresses to whitelist\\n        @param allocations users total allocation\\n        @param options user types\\n    */\\n    function whitelistUsers(\\n        address[] calldata userAddresses,\\n        uint120[] calldata allocations,\\n        uint8[] calldata options,\\n        bool last\\n    ) external onlyOwner {\\n        require(whitelistingAllowed, \\\"SHO: whitelisting not allowed anymore\\\");\\n        require(userAddresses.length != 0, \\\"SHO: zero length array\\\");\\n        require(\\n            userAddresses.length == allocations.length,\\n            \\\"SHO: different array lengths\\\"\\n        );\\n        require(\\n            userAddresses.length == options.length,\\n            \\\"SHO: different array lengths\\\"\\n        );\\n\\n        uint120 _globalTotalAllocation1;\\n        uint120 _globalTotalAllocation2;\\n        for (uint256 i = 0; i < userAddresses.length; i++) {\\n            address userAddress = userAddresses[i];\\n            if (userAddress == feeCollector) {\\n                require(burnPercentage == 0);\\n                globalTotalAllocation1 += allocations[i];\\n                extraFees1Allocation += _applyBaseFee(allocations[i], 1);\\n                continue;\\n            }\\n\\n            require(\\n                options[i] == 1 || options[i] == 2,\\n                \\\"SHO: invalid user option\\\"\\n            );\\n            require(\\n                users1[userAddress].allocation == 0,\\n                \\\"SHO: some users are already whitelisted\\\"\\n            );\\n            require(\\n                users2[userAddress].allocation == 0,\\n                \\\"SHO: some users are already whitelisted\\\"\\n            );\\n\\n            if (options[i] == 1) {\\n                users1[userAddress].allocation = allocations[i];\\n                _globalTotalAllocation1 += allocations[i];\\n            } else if (options[i] == 2) {\\n                users2[userAddress].allocation = allocations[i];\\n                _globalTotalAllocation2 += allocations[i];\\n            }\\n\\n            emit Whitelist(userAddresses[i], allocations[i], options[i]);\\n        }\\n\\n        globalTotalAllocation1 += _globalTotalAllocation1;\\n        globalTotalAllocation2 += _globalTotalAllocation2;\\n\\n        if (last) {\\n            whitelistingAllowed = false;\\n        }\\n    }\\n\\n    /**\\n        Users type 1 claims all the available amount without increasing the fee.\\n        (there's still the baseFee deducted from their allocation).\\n    */\\n    function claimUser1()\\n        external\\n        onlyWhitelistedUser1\\n        nonReentrant\\n        returns (uint120 amountToClaim)\\n    {\\n        update();\\n        User1 memory user = users1[msg.sender];\\n        require(passedUnlocksCount > 0, \\\"SHO: no unlocks passed\\\");\\n        require(\\n            user.claimedUnlocksCount < passedUnlocksCount,\\n            \\\"SHO: nothing to claim\\\"\\n        );\\n\\n        uint16 currentUnlock = passedUnlocksCount - 1;\\n        if (user.eliminatedAfterUnlock > 0) {\\n            require(\\n                user.claimedUnlocksCount < user.eliminatedAfterUnlock,\\n                \\\"SHO: nothing to claim\\\"\\n            );\\n            currentUnlock = user.eliminatedAfterUnlock - 1;\\n        }\\n\\n        uint32 lastUnlockPercentage = user.claimedUnlocksCount > 0\\n            ? unlockPercentages[user.claimedUnlocksCount - 1]\\n            : 0;\\n        amountToClaim = _applyPercentage(\\n            user.allocation,\\n            unlockPercentages[currentUnlock] - lastUnlockPercentage\\n        );\\n        amountToClaim = _applyBaseFee(amountToClaim, 1);\\n\\n        user.claimedUnlocksCount = currentUnlock + 1;\\n        users1[msg.sender] = user;\\n        shoToken.safeTransfer(msg.sender, amountToClaim);\\n        emit Claim1(msg.sender, currentUnlock, amountToClaim);\\n    }\\n\\n    /**\\n        Removes all the future allocation of passed user type 1 addresses.\\n        They can still claim the unlock they were eliminated in.\\n        @param userAddresses whitelisted user addresses to eliminate\\n     */\\n    function eliminateUsers1(\\n        address[] calldata userAddresses\\n    ) external onlyOwner {\\n        update();\\n        require(passedUnlocksCount > 0, \\\"SHO: no unlocks passed\\\");\\n        uint16 currentUnlock = passedUnlocksCount - 1;\\n        require(\\n            currentUnlock < unlockPeriods.length - 1,\\n            \\\"SHO: eliminating in the last unlock\\\"\\n        );\\n\\n        for (uint256 i = 0; i < userAddresses.length; i++) {\\n            address userAddress = userAddresses[i];\\n            User1 memory user = users1[userAddress];\\n            require(user.allocation > 0, \\\"SHO: some user not option 1\\\");\\n            require(\\n                user.eliminatedAfterUnlock == 0,\\n                \\\"SHO: some user already eliminated\\\"\\n            );\\n\\n            uint120 userAllocation = _applyBaseFee(user.allocation, 1);\\n            uint120 uncollectable = _applyPercentage(\\n                userAllocation,\\n                unlockPercentages[currentUnlock]\\n            );\\n\\n            extraFees1Allocation += userAllocation;\\n            extraFees1AllocationUncollectable += uncollectable;\\n\\n            users1[userAddress].eliminatedAfterUnlock = currentUnlock + 1;\\n            emit UserElimination(userAddress, currentUnlock);\\n        }\\n    }\\n\\n    /**\\n        User type 2 claims all the remaining amount of previous unlocks and can claim up to baseFeePercentage of the current unlock tokens without causing a fee.\\n        @param extraAmountToClaim the extra amount is also equal to the charged fee (user claims 100 more the first unlock, can claim 200 less the second unlock)\\n    */\\n    function claimUser2(\\n        uint120 extraAmountToClaim\\n    )\\n        external\\n        nonReentrant\\n        onlyWhitelistedUser2\\n        returns (\\n            uint120 amountToClaim,\\n            uint120 baseClaimAmount,\\n            uint120 currentUnlocked\\n        )\\n    {\\n        update();\\n        User2 memory user = users2[msg.sender];\\n        require(passedUnlocksCount > 0, \\\"SHO: no unlocks passed\\\");\\n        uint16 currentUnlock = passedUnlocksCount - 1;\\n\\n        if (user.claimedUnlocksCount < passedUnlocksCount) {\\n            amountToClaim = _updateUserCurrent(user, currentUnlock);\\n            baseClaimAmount = _getCurrentBaseClaimAmount(user, currentUnlock);\\n            amountToClaim += baseClaimAmount;\\n            user.currentClaimed += baseClaimAmount;\\n        } else {\\n            require(extraAmountToClaim > 0, \\\"SHO: nothing to claim\\\");\\n        }\\n\\n        currentUnlocked = user.currentUnlocked;\\n\\n        if (extraAmountToClaim > 0) {\\n            require(\\n                extraAmountToClaim <=\\n                    user.currentUnlocked - user.currentClaimed,\\n                \\\"SHO: passed extra amount too high\\\"\\n            );\\n            amountToClaim += extraAmountToClaim;\\n            user.currentClaimed += extraAmountToClaim;\\n            _chargeFee(user, extraAmountToClaim, currentUnlock);\\n        }\\n\\n        require(amountToClaim > 0, \\\"SHO: nothing to claim\\\");\\n\\n        user.totalClaimed += amountToClaim;\\n        users2[msg.sender] = user;\\n        shoToken.safeTransfer(msg.sender, amountToClaim);\\n        emit Claim2(\\n            msg.sender,\\n            currentUnlock,\\n            amountToClaim,\\n            baseClaimAmount,\\n            extraAmountToClaim\\n        );\\n    }\\n\\n    /**\\n        It's important that the fees are collectable not depedning on if users are claiming.\\n        Anybody can call this but the fees go to the fee collector.\\n     */\\n    function collectFees()\\n        external\\n        nonReentrant\\n        returns (uint120 baseFee, uint120 extraFee, uint120 burned)\\n    {\\n        update();\\n        require(\\n            collectedFeesUnlocksCount < passedUnlocksCount,\\n            \\\"SHO: no fees to collect\\\"\\n        );\\n        uint16 currentUnlock = passedUnlocksCount - 1;\\n\\n        // base fee from users type 1 and 2\\n        uint32 lastUnlockPercentage = collectedFeesUnlocksCount > 0\\n            ? unlockPercentages[collectedFeesUnlocksCount - 1]\\n            : 0;\\n        uint120 globalAllocation1 = _applyPercentage(\\n            globalTotalAllocation1,\\n            unlockPercentages[currentUnlock] - lastUnlockPercentage\\n        );\\n        uint120 globalAllocation2 = _applyPercentage(\\n            globalTotalAllocation2,\\n            unlockPercentages[currentUnlock] - lastUnlockPercentage\\n        );\\n        baseFee = _applyPercentage(globalAllocation1, baseFeePercentage1);\\n        baseFee += _applyPercentage(globalAllocation2, baseFeePercentage2);\\n\\n        // extra fees from users type 2\\n        uint120 extraFee2;\\n        for (uint16 i = collectedFeesUnlocksCount; i <= currentUnlock; i++) {\\n            extraFee2 += extraFees2[i];\\n        }\\n\\n        // extra fees from users type 1\\n        uint120 extraFees1AllocationTillNow = _applyPercentage(\\n            extraFees1Allocation,\\n            unlockPercentages[currentUnlock]\\n        );\\n        uint120 extraFee1 = extraFees1AllocationTillNow -\\n            extraFees1AllocationUncollectable;\\n        extraFees1AllocationUncollectable = extraFees1AllocationTillNow;\\n\\n        extraFee = extraFee1 + extraFee2;\\n        uint120 totalFee = baseFee + extraFee;\\n        burned = _burn(extraFee);\\n        collectedFeesUnlocksCount = currentUnlock + 1;\\n        shoToken.safeTransfer(feeCollector, totalFee - burned);\\n        emit FeeCollection(currentUnlock, totalFee, extraFee, burned);\\n    }\\n\\n    /**  \\n        Updates passedUnlocksCount.\\n    */\\n    function update() public {\\n        uint16 _passedUnlocksCount = getPassedUnlocksCount();\\n        if (_passedUnlocksCount > passedUnlocksCount) {\\n            passedUnlocksCount = _passedUnlocksCount;\\n            emit Update(_passedUnlocksCount);\\n        }\\n    }\\n\\n    // PUBLIC VIEW FUNCTIONS\\n\\n    function getPassedUnlocksCount()\\n        public\\n        view\\n        returns (uint16 _passedUnlocksCount)\\n    {\\n        require(block.timestamp >= startTime, \\\"SHO: before startTime\\\");\\n        uint256 timeSinceStart = block.timestamp - startTime;\\n        uint256 maxReleases = unlockPeriods.length;\\n        _passedUnlocksCount = passedUnlocksCount;\\n\\n        while (\\n            _passedUnlocksCount < maxReleases &&\\n            timeSinceStart >= unlockPeriods[_passedUnlocksCount]\\n        ) {\\n            _passedUnlocksCount++;\\n        }\\n    }\\n\\n    function getTotalUnlocksCount()\\n        public\\n        view\\n        returns (uint16 totalUnlocksCount)\\n    {\\n        return uint16(unlockPercentages.length);\\n    }\\n\\n    // PRIVATE FUNCTIONS\\n\\n    function _burn(uint120 amount) private returns (uint120 burned) {\\n        burned = _applyPercentage(amount, burnPercentage);\\n        if (burned == 0) return 0;\\n\\n        uint256 balanceBefore = shoToken.balanceOf(address(this));\\n        // address(shoToken).call(\\n        //     abi.encodeWithSignature(\\\"burn(uint256)\\\", burned)\\n        // );\\n        uint256 balanceAfter = shoToken.balanceOf(address(this));\\n\\n        if (balanceBefore == balanceAfter) {\\n            shoToken.safeTransfer(burnValley, burned);\\n        }\\n    }\\n\\n    function _updateUserCurrent(\\n        User2 memory user,\\n        uint16 currentUnlock\\n    ) private view returns (uint120 claimableFromPreviousUnlocks) {\\n        claimableFromPreviousUnlocks = _getClaimableFromPreviousUnlocks(\\n            user,\\n            currentUnlock\\n        );\\n\\n        uint120 newUnlocked = claimableFromPreviousUnlocks -\\n            (user.currentUnlocked - user.currentClaimed);\\n\\n        uint32 unlockPercentageDiffCurrent = currentUnlock > 0\\n            ? unlockPercentages[currentUnlock] -\\n                unlockPercentages[currentUnlock - 1]\\n            : unlockPercentages[currentUnlock];\\n\\n        uint120 currentUnlocked = _applyPercentage(\\n            user.allocation,\\n            unlockPercentageDiffCurrent\\n        );\\n        currentUnlocked = _applyBaseFee(currentUnlocked, 2);\\n\\n        newUnlocked += currentUnlocked;\\n        if (newUnlocked >= user.debt) {\\n            newUnlocked -= user.debt;\\n        } else {\\n            newUnlocked = 0;\\n        }\\n\\n        if (claimableFromPreviousUnlocks >= user.debt) {\\n            claimableFromPreviousUnlocks -= user.debt;\\n            user.debt = 0;\\n        } else {\\n            user.debt -= claimableFromPreviousUnlocks;\\n            claimableFromPreviousUnlocks = 0;\\n        }\\n\\n        if (currentUnlocked >= user.debt) {\\n            currentUnlocked -= user.debt;\\n            user.debt = 0;\\n        } else {\\n            user.debt -= currentUnlocked;\\n            currentUnlocked = 0;\\n        }\\n\\n        user.totalUnlocked += newUnlocked;\\n        user.currentUnlocked = currentUnlocked;\\n        user.currentClaimed = 0;\\n        user.claimedUnlocksCount = passedUnlocksCount;\\n    }\\n\\n    function _getClaimableFromPreviousUnlocks(\\n        User2 memory user,\\n        uint16 currentUnlock\\n    ) private view returns (uint120 claimableFromPreviousUnlocks) {\\n        uint32 lastUnlockPercentage = user.claimedUnlocksCount > 0\\n            ? unlockPercentages[user.claimedUnlocksCount - 1]\\n            : 0;\\n        uint32 previousUnlockPercentage = currentUnlock > 0\\n            ? unlockPercentages[currentUnlock - 1]\\n            : 0;\\n        uint120 claimableFromMissedUnlocks = _applyPercentage(\\n            user.allocation,\\n            previousUnlockPercentage - lastUnlockPercentage\\n        );\\n        claimableFromMissedUnlocks = _applyBaseFee(\\n            claimableFromMissedUnlocks,\\n            2\\n        );\\n\\n        claimableFromPreviousUnlocks =\\n            user.currentUnlocked -\\n            user.currentClaimed;\\n        claimableFromPreviousUnlocks += claimableFromMissedUnlocks;\\n    }\\n\\n    function _getCurrentBaseClaimAmount(\\n        User2 memory user,\\n        uint16 currentUnlock\\n    ) private view returns (uint120 baseClaimAmount) {\\n        if (currentUnlock < unlockPeriods.length - 1) {\\n            baseClaimAmount = _applyPercentage(\\n                user.currentUnlocked,\\n                freeClaimablePercentage\\n            );\\n        } else {\\n            baseClaimAmount = user.currentUnlocked;\\n        }\\n    }\\n\\n    function _chargeFee(\\n        User2 memory user,\\n        uint120 fee,\\n        uint16 currentUnlock\\n    ) private {\\n        user.debt += fee;\\n\\n        while (fee > 0 && currentUnlock < unlockPeriods.length - 1) {\\n            uint16 nextUnlock = currentUnlock + 1;\\n            uint120 nextUserAvailable = _applyPercentage(\\n                user.allocation,\\n                unlockPercentages[nextUnlock] - unlockPercentages[currentUnlock]\\n            );\\n            nextUserAvailable = _applyBaseFee(nextUserAvailable, 2);\\n\\n            uint120 currentUnlockFee = fee <= nextUserAvailable\\n                ? fee\\n                : nextUserAvailable;\\n            extraFees2[nextUnlock] += currentUnlockFee;\\n            fee -= currentUnlockFee;\\n            currentUnlock++;\\n        }\\n    }\\n\\n    function _applyPercentage(\\n        uint120 value,\\n        uint32 percentage\\n    ) private pure returns (uint120) {\\n        return uint120((uint256(value) * percentage) / HUNDRED_PERCENT);\\n    }\\n\\n    function _applyBaseFee(\\n        uint120 value,\\n        uint8 option\\n    ) private view returns (uint120) {\\n        return\\n            value -\\n            _applyPercentage(\\n                value,\\n                option == 1 ? baseFeePercentage1 : baseFeePercentage2\\n            );\\n    }\\n\\n    function _buildArraySum(\\n        uint32[] memory diffArray\\n    ) internal pure returns (uint32[] memory) {\\n        uint256 len = diffArray.length;\\n        uint32[] memory sumArray = new uint32[](len);\\n        uint32 lastSum = 0;\\n        for (uint256 i = 0; i < len; i++) {\\n            if (i > 0) {\\n                lastSum = sumArray[i - 1];\\n            }\\n            sumArray[i] = lastSum + diffArray[i];\\n        }\\n        return sumArray;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_shoToken\",\"type\":\"address\"},{\"internalType\":\"uint32[]\",\"name\":\"_unlockPercentagesDiff\",\"type\":\"uint32[]\"},{\"internalType\":\"uint32[]\",\"name\":\"_unlockPeriodsDiff\",\"type\":\"uint32[]\"},{\"internalType\":\"uint32\",\"name\":\"_baseFeePercentage1\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_baseFeePercentage2\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_feeCollector\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_startTime\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_burnValley\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_burnPercentage\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_freeClaimablePercentage\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"currentUnlock\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint120\",\"name\":\"claimedTokens\",\"type\":\"uint120\"}],\"name\":\"Claim1\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"currentUnlock\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint120\",\"name\":\"claimedTokens\",\"type\":\"uint120\"},{\"indexed\":false,\"internalType\":\"uint120\",\"name\":\"baseClaimed\",\"type\":\"uint120\"},{\"indexed\":false,\"internalType\":\"uint120\",\"name\":\"chargedfee\",\"type\":\"uint120\"}],\"name\":\"Claim2\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"currentUnlock\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint120\",\"name\":\"totalFee\",\"type\":\"uint120\"},{\"indexed\":false,\"internalType\":\"uint120\",\"name\":\"extraFee\",\"type\":\"uint120\"},{\"indexed\":false,\"internalType\":\"uint120\",\"name\":\"burned\",\"type\":\"uint120\"}],\"name\":\"FeeCollection\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"passedUnlocksCount\",\"type\":\"uint16\"}],\"name\":\"Update\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"currentUnlock\",\"type\":\"uint16\"}],\"name\":\"UserElimination\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint120\",\"name\":\"allocation\",\"type\":\"uint120\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"option\",\"type\":\"uint8\"}],\"name\":\"Whitelist\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"baseFeePercentage1\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseFeePercentage2\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnPercentage\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnValley\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimUser1\",\"outputs\":[{\"internalType\":\"uint120\",\"name\":\"amountToClaim\",\"type\":\"uint120\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint120\",\"name\":\"extraAmountToClaim\",\"type\":\"uint120\"}],\"name\":\"claimUser2\",\"outputs\":[{\"internalType\":\"uint120\",\"name\":\"amountToClaim\",\"type\":\"uint120\"},{\"internalType\":\"uint120\",\"name\":\"baseClaimAmount\",\"type\":\"uint120\"},{\"internalType\":\"uint120\",\"name\":\"currentUnlocked\",\"type\":\"uint120\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectFees\",\"outputs\":[{\"internalType\":\"uint120\",\"name\":\"baseFee\",\"type\":\"uint120\"},{\"internalType\":\"uint120\",\"name\":\"extraFee\",\"type\":\"uint120\"},{\"internalType\":\"uint120\",\"name\":\"burned\",\"type\":\"uint120\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectedFeesUnlocksCount\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"userAddresses\",\"type\":\"address[]\"}],\"name\":\"eliminateUsers1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extraFees1Allocation\",\"outputs\":[{\"internalType\":\"uint120\",\"name\":\"\",\"type\":\"uint120\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extraFees1AllocationUncollectable\",\"outputs\":[{\"internalType\":\"uint120\",\"name\":\"\",\"type\":\"uint120\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"extraFees2\",\"outputs\":[{\"internalType\":\"uint120\",\"name\":\"\",\"type\":\"uint120\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freeClaimablePercentage\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPassedUnlocksCount\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"_passedUnlocksCount\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalUnlocksCount\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"totalUnlocksCount\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalTotalAllocation1\",\"outputs\":[{\"internalType\":\"uint120\",\"name\":\"\",\"type\":\"uint120\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalTotalAllocation2\",\"outputs\":[{\"internalType\":\"uint120\",\"name\":\"\",\"type\":\"uint120\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shoToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"unlockPercentages\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"unlockPeriods\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users1\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"claimedUnlocksCount\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"eliminatedAfterUnlock\",\"type\":\"uint16\"},{\"internalType\":\"uint120\",\"name\":\"allocation\",\"type\":\"uint120\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users2\",\"outputs\":[{\"internalType\":\"uint120\",\"name\":\"allocation\",\"type\":\"uint120\"},{\"internalType\":\"uint120\",\"name\":\"debt\",\"type\":\"uint120\"},{\"internalType\":\"uint16\",\"name\":\"claimedUnlocksCount\",\"type\":\"uint16\"},{\"internalType\":\"uint120\",\"name\":\"currentUnlocked\",\"type\":\"uint120\"},{\"internalType\":\"uint120\",\"name\":\"currentClaimed\",\"type\":\"uint120\"},{\"internalType\":\"uint120\",\"name\":\"totalUnlocked\",\"type\":\"uint120\"},{\"internalType\":\"uint120\",\"name\":\"totalClaimed\",\"type\":\"uint120\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"userAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint120[]\",\"name\":\"allocations\",\"type\":\"uint120[]\"},{\"internalType\":\"uint8[]\",\"name\":\"options\",\"type\":\"uint8[]\"},{\"internalType\":\"bool\",\"name\":\"last\",\"type\":\"bool\"}],\"name\":\"whitelistUsers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistingAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "SHO", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}