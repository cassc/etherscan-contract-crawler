{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/core/LosslessV2Pool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.6.12;\\n\\nimport \\\"../interfaces/ILosslessV2Pool.sol\\\";\\nimport \\\"../interfaces/ILosslessV2Factory.sol\\\";\\nimport \\\"../interfaces/ILosslessV2Token.sol\\\";\\n\\nimport \\\"../interfaces/IPriceOracleGetter.sol\\\";\\nimport \\\"../interfaces/ILendingPoolAddressesProvider.sol\\\";\\nimport \\\"../interfaces/ILendingPool.sol\\\";\\nimport \\\"../interfaces/IProtocolDataProvider.sol\\\";\\nimport \\\"../interfaces/IStakedToken.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nimport \\\"@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.6/interfaces/KeeperCompatibleInterface.sol\\\";\\n\\ncontract LosslessV2Pool is ILosslessV2Pool, KeeperCompatibleInterface{\\n\\tusing SafeMath for uint256;\\n\\n\\t// basic info for initializing a pool\\n\\taddress public override factory;\\n\\taddress public override bidToken;\\n\\taddress public override principalToken;\\n\\taddress public override aToken;\\n\\taddress public override addressProvider;\\n\\n\\tAggregatorV3Interface private priceFeed;\\n\\n\\t// used for calculating share price, define the precision is 0.0001\\n\\tuint256 public constant PRECISION = 10**4;\\n\\n\\t///@dev the actual share value is valuePerShortToken /  PRECISION (constant = 10000)\\n\\tuint256 public valuePerShortToken = PRECISION; // the value of a single share - short\\n\\tuint256 public valuePerLongToken = PRECISION; // the value of a single share - long\\n\\tuint256 public constant valuePerSponsorToken = PRECISION; // the value of sponsor share should be fixed to PRECISION\\n\\n\\tuint256 private totalInterest;\\n\\n\\tGameStatus public status;\\n\\tPoolTokensInfo public poolTokensInfo;\\n\\tmapping(address => uint256) public override inPoolTimestamp;\\n\\n\\tILosslessV2Token private _shortToken;\\n\\tILosslessV2Token private _longToken;\\n\\tILosslessV2Token private _sponsorToken;\\n\\n\\t// lock modifier\\n\\tbool private accepting = true;\\n\\tmodifier lock() {\\n\\t\\trequire(accepting == true, \\\"LosslessV2Pool: LOCKED\\\");\\n\\t\\taccepting = false;\\n\\t\\t_;\\n\\t\\taccepting = true;\\n\\t}\\n\\n\\tmodifier onlyFactory() {\\n\\t\\trequire(msg.sender == factory, \\\"LosslessV2Factory: FACTORY ONLY\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier onlyAfter(uint256 _time) {\\n\\t\\trequire(block.timestamp > _time, \\\"LosslessV2Pool: INVALID TIMESTAMP AFTER\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tconstructor(\\n\\t\\taddress _bidToken,\\n\\t\\taddress _principalToken,\\n\\t\\taddress _addressProvider,\\n\\t\\taddress _aggregator,\\n\\t\\tuint256 _biddingDuration,\\n\\t\\tuint256 _gamingDuration\\n\\t) public {\\n\\t\\tfactory = msg.sender;\\n\\t\\tbidToken = _bidToken;\\n\\t\\tprincipalToken = _principalToken;\\n\\n\\t\\taddressProvider = _addressProvider;\\n\\t\\taToken = _getATokenAddress(principalToken);\\n\\n\\t\\tpriceFeed = AggregatorV3Interface(_aggregator);\\n\\n\\t\\t// modify status variable\\n\\t\\tstatus.gameRound = 1;\\n\\t\\tstatus.durationOfBidding = _biddingDuration;\\n\\t\\tstatus.durationOfGame = _gamingDuration;\\n\\t\\tstatus.lastUpdateTimestamp = block.timestamp;\\n\\t\\t// status.initialPrice - unchange for now\\n\\t\\t// status.endPrice - unchange for now\\n\\t\\t// status.isShortLastRoundWinner - default to false\\n\\t\\tstatus.isFirstRound = true;\\n\\t\\tstatus.isFirstUser = true;\\n\\t\\tstatus.currState = PoolStatus.FirstGame;\\n\\t}\\n\\n\\t/**\\n\\t * @dev initialize pool\\n\\t **/\\n\\tfunction initialize(\\n\\t\\taddress shortToken_,\\n\\t\\taddress longToken_,\\n\\t\\taddress sponsorToken_\\n\\t) external override onlyFactory {\\n\\t\\tpoolTokensInfo.shortToken = shortToken_;\\n\\t\\tpoolTokensInfo.longToken = longToken_;\\n\\t\\tpoolTokensInfo.sponsorToken = sponsorToken_;\\n\\n\\t\\t_shortToken = ILosslessV2Token(shortToken_);\\n\\t\\t_longToken = ILosslessV2Token(longToken_);\\n\\t\\t_sponsorToken = ILosslessV2Token(sponsorToken_);\\n\\t}\\n\\n\\t/**\\n\\t * @dev only be called once, after initalize\\n\\t **/\\n\\tfunction startFirstRound() external override {\\n\\t\\trequire(status.isFirstRound == true, \\\"LosslessV2Pool: NOT FIRST ROUND!\\\");\\n\\t\\trequire(status.currState == PoolStatus.FirstGame, \\\"LosslessV2Pool: WRONG STATUS\\\");\\n\\t\\t// modify status variable\\n\\t\\t// status.gameRound = 1;\\n\\t\\tstatus.lastUpdateTimestamp = block.timestamp;\\n\\t\\t// status.initialPrice - unchange for now\\n\\t\\t// status.endPrice - unchange for now\\n\\t\\t// status.isShortLastRoundWinner - unchange for now\\n\\t\\tstatus.isFirstRound = false;\\n\\t\\t// status.isFirstUser = true;\\n\\t\\tstatus.currState = PoolStatus.Accepting;\\n\\t}\\n\\n\\t/**\\n\\t * @dev start the gaming, lock pool and transfer asset to defi lending\\n\\t **/\\n\\tfunction startGame() public override lock onlyAfter(status.lastUpdateTimestamp.add(status.durationOfBidding)) {\\n\\t\\trequire(status.currState == PoolStatus.Accepting, \\\"LosslessV2Pool: WRONG STATUS\\\");\\n\\t\\trequire(_shortToken.totalSupply() != 0 && _longToken.totalSupply() != 0, \\\"LosslessV2Pool: NO FUND IN POOL\\\");\\n\\t\\t// modify status variable\\n\\t\\t// status.gameRound = 1;\\n\\t\\tstatus.lastUpdateTimestamp = block.timestamp;\\n\\t\\t// fisrt user can set the inital price\\n\\t\\tif (status.isFirstUser == true) {\\n\\t\\t\\tstatus.initialPrice = _getPrice();\\n\\t\\t\\tstatus.isFirstUser = false;\\n\\t\\t}\\n\\t\\t// status.endPrice - unchange for now\\n\\t\\t// status.isShortLastRoundWinner - unchange for now\\n\\t\\t// status.isFirstRound = false;\\n\\t\\t// status.isFirstUser = true;\\n\\t\\tstatus.currState = PoolStatus.Locked;\\n\\n\\t\\t// transfer to aave\\n\\t\\t_supplyToAAVE(principalToken, IERC20(principalToken).balanceOf(address(this)));\\n\\t}\\n\\n\\t/**\\n\\t * @dev end the gaming, redeem assets from aave and get end price\\n\\t **/\\n\\tfunction endGame() public override lock onlyAfter(status.lastUpdateTimestamp.add(status.durationOfGame)) {\\n\\t\\trequire(status.currState == PoolStatus.Locked, \\\"LosslessV2Pool: WRONG STATUS\\\");\\n\\n\\t\\t// modify status variable\\n\\t\\tstatus.gameRound = status.gameRound.add(1);\\n\\t\\tstatus.lastUpdateTimestamp = block.timestamp;\\n\\t\\t// status.initialPrice - unchange for now\\n\\t\\t// status.endPrice - unchange for now\\n\\t\\t// status.isShortLastRoundWinner - unchange for now\\n\\t\\t// status.isFirstRound = false;\\n\\t\\tstatus.isFirstUser = true;\\n\\t\\tstatus.currState = PoolStatus.Accepting;\\n\\n\\t\\t// redeem from AAVE\\n\\t\\t_redeemFromAAVE(principalToken, 0); // redeem all\\n\\t\\t// get end price\\n\\t\\tstatus.endPrice = _getPrice();\\n\\n\\t\\t// if end price higher than inital price -> long users win !\\n\\t\\tif (status.endPrice >= status.initialPrice) {\\n\\t\\t\\tstatus.isShortLastRoundWinner = false;\\n\\t\\t} else {\\n\\t\\t\\tstatus.isShortLastRoundWinner = true;\\n\\t\\t}\\n\\n\\t\\t// update interest and principal amount\\n\\t\\tuint256 totalShortPrincipal = _shortToken.totalSupply().mul(valuePerShortToken).div(PRECISION);\\n\\t\\tuint256 totalLongPrincipal = _longToken.totalSupply().mul(valuePerLongToken).div(PRECISION);\\n\\t\\tuint256 totalSponsorPrincipal = _sponsorToken.totalSupply().mul(valuePerSponsorToken).div(PRECISION);\\n\\t\\tuint256 totalPrincipal = totalShortPrincipal.add(totalLongPrincipal.add(totalSponsorPrincipal));\\n\\t\\tif (IERC20(principalToken).balanceOf(address(this)) < totalPrincipal) {\\n\\t\\t\\ttotalInterest = 0; // in case kovan testnet give us aToken slightly less than deposit amount\\n\\t\\t} else {\\n\\t\\t\\ttotalInterest = IERC20(principalToken).balanceOf(address(this)).sub(totalPrincipal);\\n\\t\\t}\\n\\n\\t\\t// update share value\\n\\t\\t_updateTokenValue(totalShortPrincipal, totalLongPrincipal);\\n\\n\\t\\temit AnnounceWinner(status.isShortLastRoundWinner, status.initialPrice, status.endPrice);\\n\\t}\\n\\n\\t/**\\n\\t * @dev chainlink keeper checkUpkeep function to constantly check whether we need function call\\n\\t **/\\n\\tfunction checkUpkeep(bytes calldata checkData) external override returns (bool upkeepNeeded, bytes memory performData) {\\n\\t\\tPoolStatus currState = status.currState;\\n\\t\\tuint256 lastUpdateTimestamp = status.lastUpdateTimestamp;\\n\\t\\tuint256 durationOfGame = status.durationOfGame;\\n\\t\\tuint256 durationOfBidding = status.durationOfBidding;\\n\\n\\t\\tif (currState == PoolStatus.Accepting && block.timestamp > lastUpdateTimestamp.add(durationOfBidding)) {\\n\\t\\t\\tupkeepNeeded = true;\\n\\t\\t} else if (currState == PoolStatus.Locked && block.timestamp > lastUpdateTimestamp.add(durationOfGame)) {\\n\\t\\t\\tupkeepNeeded = true;\\n\\t\\t} else {\\n\\t\\t\\tupkeepNeeded = false;\\n\\t\\t}\\n\\t\\tperformData = checkData;\\n\\t}\\n\\n\\t/**\\n\\t * @dev once checkUpKeep been trigered, keeper will call performUpKeep\\n\\t **/\\n\\tfunction performUpkeep(bytes calldata performData) external override {\\n\\t\\tPoolStatus currState = status.currState;\\n\\t\\tuint256 lastUpdateTimestamp = status.lastUpdateTimestamp;\\n\\t\\tuint256 durationOfGame = status.durationOfGame;\\n\\t\\tuint256 durationOfBidding = status.durationOfBidding;\\n\\n\\t\\tif (currState == PoolStatus.Accepting && block.timestamp > lastUpdateTimestamp.add(durationOfBidding)) {\\n\\t\\t\\tstartGame();\\n\\t\\t}\\n\\t\\tif (currState == PoolStatus.Locked && block.timestamp > lastUpdateTimestamp.add(durationOfGame)) {\\n\\t\\t\\tendGame();\\n\\t\\t}\\n\\t\\tperformData;\\n\\t}\\n\\n\\t/**\\n\\t * @dev termination function, use this to terminate the game\\n\\t **/\\n\\tfunction poolTermination() external override onlyFactory {\\n\\t\\t// only when pool status is at Accepting\\n\\t\\trequire(status.currState == PoolStatus.Accepting, \\\"LosslessV2Pool: WRONG STATUS\\\");\\n\\n\\t\\t// modify status variable\\n\\t\\t// status.gameRound = status.gameRound.add(1);\\n\\t\\t// status.durationOfGame = 6 days;\\n\\t\\t// status.durationOfBidding = 1 days;\\n\\t\\t// status.lastUpdateTimestamp = block.timestamp;\\n\\t\\t// status.initialPrice - unchange for now\\n\\t\\t// status.endPrice - unchange for now\\n\\t\\t// status.isShortLastRoundWinner - unchange for now\\n\\t\\t// status.isFirstRound = false;\\n\\t\\t// status.isFirstUser = true;\\n\\t\\tstatus.currState = PoolStatus.Terminated;\\n\\t}\\n\\n\\t/**\\n\\t * @dev users can add principal as long as the status is accpeting\\n\\t * @param shortPrincipalAmount how many principal in short pool does user want to deposit\\n\\t * @param longPrincipalAmount how many principal in long pool does user want to deposit\\n\\t **/\\n\\tfunction deposit(uint256 shortPrincipalAmount, uint256 longPrincipalAmount) external override lock {\\n\\t\\trequire(status.currState == PoolStatus.Accepting, \\\"LosslessV2Pool: WRONG STATUS\\\");\\n\\t\\trequire(shortPrincipalAmount > 0 || longPrincipalAmount > 0, \\\"LosslessV2Pool: INVALID AMOUNT\\\");\\n\\n\\t\\t// fisrt user can set the inital price\\n\\t\\tif (status.isFirstUser == true) {\\n\\t\\t\\tstatus.initialPrice = _getPrice();\\n\\t\\t\\tstatus.isFirstUser = false;\\n\\t\\t}\\n\\t\\t// // if user's balance is zero record user's join timestamp for reward\\n\\t\\tif (_shortToken.balanceOf(msg.sender) == 0 && _longToken.balanceOf(msg.sender) == 0) {\\n\\t\\t\\tinPoolTimestamp[msg.sender] = block.timestamp;\\n\\t\\t}\\n\\t\\t// transfer principal to pool contract\\n\\t\\tSafeERC20.safeTransferFrom(IERC20(principalToken), msg.sender, address(this), shortPrincipalAmount.add(longPrincipalAmount));\\n\\t\\t_mintTokens(true, msg.sender, shortPrincipalAmount, longPrincipalAmount);\\n\\n\\t\\temit Deposit(shortPrincipalAmount, longPrincipalAmount);\\n\\t}\\n\\n\\t/**\\n\\t * @dev user can call it to redeem pool tokens to principal tokens\\n\\t * @param shortTokenAmount \\thow many short token in short pool does user want to redeem\\n\\t * @param longTokenAmount \\thow many long token in long pool does user want to redeem\\n\\t **/\\n\\tfunction withdraw(\\n\\t\\tbool isAToken,\\n\\t\\tuint256 shortTokenAmount,\\n\\t\\tuint256 longTokenAmount\\n\\t) external override lock {\\n\\t\\t// withdraw should have no limitation in pool status\\n\\t\\trequire(shortTokenAmount > 0 || longTokenAmount > 0, \\\"LosslessV2Pool: INVALID AMOUNT\\\");\\n\\n\\t\\t// check user token balance\\n\\t\\tuint256 userShortTokenBalance = _shortToken.balanceOf(msg.sender);\\n\\t\\tuint256 userLongTokenBalance = _longToken.balanceOf(msg.sender);\\n\\t\\trequire(userShortTokenBalance >= shortTokenAmount && userLongTokenBalance >= longTokenAmount, \\\"LosslessV2Pool: INSUFFICIENT BALANCE\\\");\\n\\n\\t\\t// calculate withdraw principal amount\\n\\t\\tuint256 shortPrincipalAmount = shortTokenAmount.mul(valuePerShortToken).div(PRECISION);\\n\\t\\tuint256 longPrincipalAmount = longTokenAmount.mul(valuePerLongToken).div(PRECISION);\\n\\n\\t\\t// user withdraw will cause timestamp update -> reduce their goverance reward\\n\\t\\tinPoolTimestamp[msg.sender] = block.timestamp;\\n\\n\\t\\t// burn user withdraw token\\n\\t\\t_burnTokens(false, msg.sender, shortTokenAmount, longTokenAmount);\\n\\n\\t\\t/*  pool status | isAToken | Operation\\n\\t\\t\\t\\tlock\\t     T       transfer aToken\\n\\t\\t\\t\\tlock \\t\\t F\\t\\t redeem then transfer principal Token\\n\\t\\t\\t  unlock  \\t\\t T \\t\\t supply to aave then transfer aToken\\n\\t\\t\\t  unlock         F       transfer principal token\\n\\t\\t */\\n\\t\\tif (isAToken == false) {\\n\\t\\t\\tif (status.currState == PoolStatus.Locked) {\\n\\t\\t\\t\\t_redeemFromAAVE(principalToken, shortPrincipalAmount.add(longPrincipalAmount));\\n\\t\\t\\t}\\n\\t\\t\\tSafeERC20.safeTransfer(IERC20(principalToken), msg.sender, shortPrincipalAmount.add(longPrincipalAmount));\\n\\t\\t} else {\\n\\t\\t\\tif (status.currState == PoolStatus.Accepting) {\\n\\t\\t\\t\\t_supplyToAAVE(principalToken, shortPrincipalAmount.add(longPrincipalAmount));\\n\\t\\t\\t}\\n\\t\\t\\tSafeERC20.safeTransfer(IERC20(aToken), msg.sender, shortPrincipalAmount.add(longPrincipalAmount));\\n\\t\\t}\\n\\n\\t\\temit Withdraw(isAToken, shortTokenAmount, longTokenAmount);\\n\\t}\\n\\n\\t/**\\n\\t * @dev user can call this to shift share from long -> short, short -> long without withdrawing assets\\n\\t * @param fromLongToShort is user choosing to shift from long to short\\n\\t * @param swapTokenAmount the amount of token that user wishes to swap\\n\\t **/\\n\\tfunction swap(bool fromLongToShort, uint256 swapTokenAmount) external override lock {\\n\\t\\trequire(status.currState == PoolStatus.Accepting, \\\"LosslessV2Pool: WRONG STATUS\\\");\\n\\t\\tuint256 shortTokenBalance = _shortToken.balanceOf(msg.sender);\\n\\t\\tuint256 longTokenBalance = _longToken.balanceOf(msg.sender);\\n\\t\\tuint256 tokenBalanceOfTargetPosition = fromLongToShort ? longTokenBalance : shortTokenBalance;\\n\\t\\t// check user balance\\n\\t\\trequire(swapTokenAmount > 0 && swapTokenAmount <= tokenBalanceOfTargetPosition, \\\"LosslessV2Pool: INSUFFICIENT BALANCE\\\");\\n\\n\\t\\t// reallocate user's share balance\\n\\t\\tif (fromLongToShort == true) {\\n\\t\\t\\t// user wants to shift from long to short, so burn long share and increase short share\\n\\t\\t\\t_burnTokens(false, msg.sender, 0, swapTokenAmount);\\n\\t\\t\\t_mintTokens(false, msg.sender, swapTokenAmount.mul(valuePerLongToken).div(valuePerShortToken), 0);\\n\\t\\t} else {\\n\\t\\t\\t// user wants to shift from short to long, so burn short share and increase long share\\n\\t\\t\\t_burnTokens(false, msg.sender, swapTokenAmount, 0);\\n\\t\\t\\t_mintTokens(false, msg.sender, 0, swapTokenAmount.mul(valuePerShortToken).div(valuePerLongToken));\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev sponsr can deposit and withdraw principals to the game\\n\\t * @param principalAmount amount of principal token\\n\\t **/\\n\\tfunction sponsorDeposit(uint256 principalAmount) external override lock {\\n\\t\\trequire(status.currState != PoolStatus.Terminated, \\\"LosslessV2Pool: POOL TERMINATED\\\");\\n\\t\\trequire(principalAmount > 0, \\\"LosslessV2Pool: INVALID AMOUNT\\\");\\n\\t\\trequire(IERC20(principalToken).balanceOf(msg.sender) >= principalAmount, \\\"LosslessV2Pool: INSUFFICIENT BALANCE\\\");\\n\\n\\t\\t// transfer asset first\\n\\t\\tSafeERC20.safeTransferFrom(IERC20(principalToken), msg.sender, address(this), principalAmount);\\n\\n\\t\\t// check current game state\\n\\t\\tif (status.currState == PoolStatus.Locked) {\\n\\t\\t\\t// if during the lock time\\n\\t\\t\\t// interact with AAVE to get the principal back\\n\\t\\t\\t_supplyToAAVE(principalToken, principalAmount);\\n\\t\\t}\\n\\n\\t\\t// mint sponsor token\\n\\t\\t_sponsorToken.mint(msg.sender, principalAmount);\\n\\n\\t\\temit SponsorDeposit(principalAmount);\\n\\t}\\n\\n\\t/**\\n\\t * @dev sponsr can deposit and withdraw principals to the game\\n\\t * @param sponsorTokenAmount amount of zero token\\n\\t **/\\n\\tfunction sponsorWithdraw(uint256 sponsorTokenAmount) external override lock {\\n\\t\\trequire(sponsorTokenAmount > 0, \\\"LosslessV2Pool: INVALID AMOUNT\\\");\\n\\t\\t// burn user sponsor token\\n\\t\\t_sponsorToken.burn(msg.sender, sponsorTokenAmount);\\n\\n\\t\\t// check current game state\\n\\t\\tif (status.currState == PoolStatus.Locked) {\\n\\t\\t\\t// if during the lock time\\n\\t\\t\\t// interact with AAVE to get the principal back\\n\\t\\t\\t_redeemFromAAVE(principalToken, sponsorTokenAmount);\\n\\t\\t}\\n\\n\\t\\t// transfer principal token\\n\\t\\tSafeERC20.safeTransfer(IERC20(principalToken), msg.sender, sponsorTokenAmount);\\n\\n\\t\\temit SponsorWithdraw(sponsorTokenAmount);\\n\\t}\\n\\n\\t/**\\n\\t * @dev calculate each token's value\\n\\t * @param _totalShortPrincipal \\tthe total amount of short principal\\n\\t * @param _totalLongPrincipal\\tthe total amount of long principal\\n\\t **/\\n\\tfunction _updateTokenValue(uint256 _totalShortPrincipal, uint256 _totalLongPrincipal) private {\\n\\t\\taddress feeTo = ILosslessV2Factory(factory).feeTo();\\n\\t\\tuint256 feePercent = ILosslessV2Factory(factory).feePercent();\\n\\t\\tuint256 fee = totalInterest.mul(feePercent).div(PRECISION);\\n\\n\\t\\t// if fee is on and feeTo been set\\n\\t\\tif (feePercent != 0 && feeTo != address(0)) {\\n\\t\\t\\ttotalInterest = totalInterest.sub(fee);\\n\\t\\t\\tSafeERC20.safeTransfer(IERC20(principalToken), feeTo, fee);\\n\\t\\t}\\n\\n\\t\\t// update short/long token value\\n\\t\\tif (status.isShortLastRoundWinner == true) {\\n\\t\\t\\t// short win\\n\\t\\t\\t_totalShortPrincipal = _totalShortPrincipal.add(totalInterest);\\n\\t\\t\\tvaluePerShortToken = _totalShortPrincipal.mul(PRECISION).div(_shortToken.totalSupply());\\n\\t\\t} else if (status.isShortLastRoundWinner == false) {\\n\\t\\t\\t// long win\\n\\t\\t\\t_totalLongPrincipal = _totalLongPrincipal.add(totalInterest);\\n\\t\\t\\tvaluePerLongToken = _totalLongPrincipal.mul(PRECISION).div(_longToken.totalSupply());\\n\\t\\t}\\n\\n\\t\\temit UpdateTokenValue(valuePerShortToken, valuePerLongToken);\\n\\t}\\n\\n\\t/**\\n\\t * @dev supply to aave protocol\\n\\t * @param _asset \\tthe address of the principal token\\n\\t * @param _amount\\tthe amount of the principal token wish to supply to AAVE\\n\\t **/\\n\\tfunction _supplyToAAVE(address _asset, uint256 _amount) private {\\n\\t\\taddress lendingPoolAddress = ILendingPoolAddressesProvider(addressProvider).getLendingPool();\\n\\t\\tILendingPool lendingPool = ILendingPool(lendingPoolAddress);\\n\\t\\tSafeERC20.safeApprove(IERC20(_asset), address(lendingPool), _amount);\\n\\t\\tlendingPool.deposit(_asset, _amount, address(this), 0);\\n\\t}\\n\\n\\t/**\\n\\t * @dev redeem from aave protocol\\n\\t * @param _asset \\tthe address of the principal token\\n\\t * @param _amount\\tthe amount of the principal token wish to withdraw from AAVE\\n\\t **/\\n\\tfunction _redeemFromAAVE(address _asset, uint256 _amount) private {\\n\\t\\t// lendingPool\\n\\t\\taddress lendingPoolAddress = ILendingPoolAddressesProvider(addressProvider).getLendingPool();\\n\\t\\tILendingPool lendingPool = ILendingPool(lendingPoolAddress);\\n\\t\\t// protocol data provider\\n\\t\\taToken = _getATokenAddress(_asset);\\n\\t\\tif (_amount == 0) {\\n\\t\\t\\t_amount = IERC20(aToken).balanceOf(address(this));\\n\\t\\t}\\n\\t\\tlendingPool.withdraw(_asset, _amount, address(this));\\n\\t}\\n\\n\\t/**\\n\\t * @dev get atoken address\\n\\t * @param _asset \\tthe address of the principal token\\n\\t **/\\n\\tfunction _getATokenAddress(address _asset) private view returns (address _aToken) {\\n\\t\\t// protocol data provider\\n\\t\\tuint8 number = 1;\\n\\t\\tbytes32 id = bytes32(bytes1(number));\\n\\t\\taddress dataProviderAddress = ILendingPoolAddressesProvider(addressProvider).getAddress(id);\\n\\t\\tIProtocolDataProvider protocolDataProvider = IProtocolDataProvider(dataProviderAddress);\\n\\t\\t(_aToken, , ) = protocolDataProvider.getReserveTokensAddresses(_asset);\\n\\t}\\n\\n\\t/**\\n\\t * @dev mint token function to mint long and short token\\n\\t * @param _isPrincipal \\ttrue: principal, false:long/short token amount\\n\\t * @param _to\\t\\t\\tthe destination account token got burned\\n\\t * @param _shortAmount \\tthe amount of the token to short\\n\\t * @param _longAmount \\tthe amount of the token to long\\n\\t **/\\n\\tfunction _mintTokens(\\n\\t\\tbool _isPrincipal,\\n\\t\\taddress _to,\\n\\t\\tuint256 _shortAmount,\\n\\t\\tuint256 _longAmount\\n\\t) private {\\n\\t\\tif (_isPrincipal == true) {\\n\\t\\t\\t// convert principal token amount to long/short token amount\\n\\t\\t\\t_shortAmount = _shortAmount.mul(PRECISION).div(valuePerShortToken);\\n\\t\\t\\t_longAmount = _longAmount.mul(PRECISION).div(valuePerLongToken);\\n\\t\\t}\\n\\t\\tif (_shortAmount != 0) {\\n\\t\\t\\t_shortToken.mint(_to, _shortAmount);\\n\\t\\t}\\n\\t\\tif (_longAmount != 0) {\\n\\t\\t\\t_longToken.mint(_to, _longAmount);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev burn token function to burn long and short token\\n\\t * @param _isPrincipal \\ttrue: principal, false:long/short token amount\\n\\t * @param _from\\t\\t\\tthe destination account token got burned\\n\\t * @param _shortAmount \\tthe amount of the token to short\\n\\t * @param _longAmount \\tthe amount of the token to long\\n\\t **/\\n\\tfunction _burnTokens(\\n\\t\\tbool _isPrincipal,\\n\\t\\taddress _from,\\n\\t\\tuint256 _shortAmount,\\n\\t\\tuint256 _longAmount\\n\\t) private {\\n\\t\\tif (_isPrincipal == true) {\\n\\t\\t\\t// convert principal token amount to long/short token amount\\n\\t\\t\\t_shortAmount = _shortAmount.mul(PRECISION).div(valuePerShortToken);\\n\\t\\t\\t_longAmount = _longAmount.mul(PRECISION).div(valuePerLongToken);\\n\\t\\t}\\n\\t\\tif (_shortAmount != 0) {\\n\\t\\t\\t_shortToken.burn(_from, _shortAmount);\\n\\t\\t}\\n\\t\\tif (_longAmount != 0) {\\n\\t\\t\\t_longToken.burn(_from, _longAmount);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev communicate with oracle to get current trusted price\\n\\t * @return price ratio of bidToken * PRECISION / principalToken -> the result comes with precision\\n\\t **/\\n\\tfunction _getPrice() private view returns (int256) {\\n\\t\\t(uint80 roundID, int256 price, uint256 startedAt, uint256 timeStamp, uint80 answeredInRound) = priceFeed.latestRoundData();\\n\\t\\treturn price;\\n\\t}\\n\\n\\t/**\\n\\t * @dev return user's long token equivalent principal token amount\\n\\t **/\\n\\tfunction userLongPrincipalBalance(address userAddress) external view override returns (uint256 userLongAmount) {\\n\\t\\tuserLongAmount = _longToken.balanceOf(userAddress).mul(valuePerLongToken).div(PRECISION);\\n\\t}\\n\\n\\t/**\\n\\t * @dev return user's short token equivalent principal token amount\\n\\t **/\\n\\tfunction userShortPrincipalBalance(address userAddress) external view override returns (uint256 userShortAmount) {\\n\\t\\tuserShortAmount = _shortToken.balanceOf(userAddress).mul(valuePerShortToken).div(PRECISION);\\n\\t}\\n\\n\\t/**\\n\\t * @dev claim AAVE token rewards\\n\\t * @param stakedAAVEAddress_ stakedAAVE contract address\\n\\t * @param amount_  The amount of AAVE to be claimed. Use type(uint).max to claim all outstanding rewards for the user.\\n\\t */\\n\\tfunction claimAAVE(address stakedAAVEAddress_, uint256 amount_ ) external override {\\n\\t\\trequire(stakedAAVEAddress_ != address(0), \\\"LosslessV2Pool: stakedAAVEAddress_ ZERO ADDRESS\\\");\\n\\t\\taddress feeTo = ILosslessV2Factory(factory).feeTo();\\n\\t\\trequire(feeTo != address(0), \\\"LosslessV2Pool: feeTo ZERO ADDRESS\\\");\\n\\n\\t\\tIStakedToken stakedAAVE = IStakedToken(stakedAAVEAddress_);\\n\\t\\tstakedAAVE.claimRewards(feeTo, amount_);\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILosslessV2Pool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.6.12;\\n\\ninterface ILosslessV2Pool {\\n\\t// defined and controls all game logic related variables\\n\\tstruct GameStatus {\\n\\t\\tbool isShortLastRoundWinner; // record whether last round winner\\n\\t\\tbool isFirstUser; // check if the user is the first one to enter the game or not\\n\\t\\tbool isFirstRound; // is this game the first round of the entire pool?\\n\\t\\tuint256 gameRound; // count for showing current game round\\n\\t\\tuint256 durationOfGame; // which should be 6 days in default\\n\\t\\tuint256 durationOfBidding; // which should be 1 days in default\\n\\t\\tuint256 lastUpdateTimestamp; // the timestamp when last game logic function been called\\n\\t\\tint256 initialPrice; // game initial price\\n\\t\\tint256 endPrice; // game end price\\n\\t\\tPoolStatus currState; // current pool status\\n\\t}\\n\\n\\t// token info for current pool\\n\\tstruct PoolTokensInfo {\\n\\t\\taddress longToken;\\n\\t\\taddress shortToken;\\n\\t\\taddress sponsorToken;\\n\\t}\\n\\n\\t// # ENUM FOR POOL STATUS\\n\\t/*  \\n      PoolStatus Explaination\\n      *****\\n        Locked ------ game period. interacting with compound\\n        Accepting --- users can adding or reducing the bet\\n        FirstGame --- only been used for the first round\\n\\t\\tTerminated -- only when special cases admin decided to close the pool\\n\\n      Notation\\n      ******\\n        /name/ - status name\\n        [name] - function call name\\n\\n      Workflow\\n      *******  \\n\\n                                    \\n                     /Accepting/            /Locked/         /Accepting/\\t\\t\\t\\t/Terminated/\\n                          |                     |                | \\t\\t\\t\\t\\t\\t\\t |\\n    [startFirstRound] ---------> [startGame] -------> [endGame] ---> [poolTermination] --------------->\\n                                      ^                    | |\\n                                      |                    | record time\\n                                       --------------------\\n                                                 |\\n                                            /Accepting/\\n    */\\n\\tenum PoolStatus {\\n\\t\\tFirstGame,\\n\\t\\tLocked,\\n\\t\\tAccepting,\\n\\t\\tTerminated\\n\\t}\\n\\n\\t// ## DEFINE USER OPERATION EVENTS\\n\\tevent Deposit(uint256 shortPrincipalAmount, uint256 longPrincipalAmount);\\n\\tevent Withdraw(bool isAToken, uint256 shortTokenAmount, uint256 longTokenAmount);\\n\\tevent SponsorDeposit(uint256 principalAmount);\\n\\tevent SponsorWithdraw(uint256 sponsorTokenAmount);\\n\\t// ## DEFINE GAME OPERATION EVENTS\\n\\tevent UpdateTokenValue(uint256 valuePerShortToken, uint256 valuePerLongToken);\\n\\tevent AnnounceWinner(bool isShortLastRoundWinner, int256 initialPrice, int256 endPrice);\\n\\n\\t// ## PUBLIC VARIABLES\\n\\tfunction factory() external view returns (address);\\n\\n\\tfunction bidToken() external view returns (address);\\n\\n\\tfunction principalToken() external view returns (address);\\n\\n\\tfunction aToken() external view returns (address);\\n\\n\\tfunction addressProvider() external view returns (address);\\n\\n\\t// ### GAME SETTING VARIABLES\\n\\tfunction inPoolTimestamp(address userAddress) external view returns (uint256);\\n\\n\\t// ## STATE-CHANGING FUNCTION\\n\\t/* \\n\\t\\tinitialize: \\t\\tinitialize the game\\n\\t\\tstartFirstRound: \\tstart the frist round logic\\n\\t\\tstartGame: \\t\\t\\tstart game -> pool lock supply principal to AAVE, get start game price\\n\\t\\tendGame: \\t\\t\\tend game -> pool unlock redeem fund to AAVE, get end game price\\n\\t\\tpoolTermination:\\tterminate the pool, no more game, but user can still withdraw fund\\n    */\\n\\tfunction initialize(\\n\\t\\taddress shortToken_,\\n\\t\\taddress longToken_,\\n\\t\\taddress sponsorToken_\\n\\t) external;\\n\\n\\tfunction startFirstRound() external; // only be called to start the first Round\\n\\n\\tfunction startGame() external; // called after bidding duration\\n\\n\\tfunction endGame() external; // called after game duraion\\n\\n\\t///@dev admin only\\n\\tfunction poolTermination() external; // called after selectWinner only by admin\\n\\n\\t// user actions in below, join game, add, reduce or withDraw all fund\\n\\t/* \\n\\t\\tdeposit: \\t\\t\\tadding funds can be either just long or short or both\\n\\t\\twithdraw: \\t\\t\\treduce funds can be either just long or short or both\\n\\t\\tswap: \\t\\t\\t\\tchange amount of tokens from long -> short / short -> long\\n\\t\\tsponsorDeposit:\\t\\tdeposit principal to the pool as interest sponsor\\n\\t\\tsponsorWithdraw:\\twithdraw sponsor donation from the pool\\n    */\\n\\tfunction deposit(uint256 shortPrincipalAmount, uint256 longPrincipalAmount) external;\\n\\n\\tfunction withdraw(\\n\\t\\tbool isAToken,\\n\\t\\tuint256 shortTokenAmount,\\n\\t\\tuint256 longTokenAmount\\n\\t) external;\\n\\n\\tfunction swap(bool fromLongToShort, uint256 swapTokenAmount) external;\\n\\n\\tfunction sponsorDeposit(uint256 principalAmount) external;\\n\\n\\tfunction sponsorWithdraw(uint256 sponsorTokenAmount) external;\\n\\t\\n\\tfunction claimAAVE(address stakedAAVEAddress_, uint256 amount_ ) external;\\n\\n\\t// view functions to return user balance\\n\\tfunction userLongPrincipalBalance(address userAddress) external view returns (uint256);\\n\\n\\tfunction userShortPrincipalBalance(address userAddress) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILosslessV2Factory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.6.12;\\n\\ninterface ILosslessV2Factory {\\n\\t// event related\\n\\tevent PoolCreated(address indexed bidToken, address indexed principalToken, address pool, uint256 allPoolLength);\\n\\tevent PoolTerminated(address pool);\\n\\tevent FeeToChanged(address feeTo);\\n\\tevent FeePercentChanged(uint256 feePercent);\\n\\tevent proposeDAOChange(address pendingDAO);\\n\\tevent DAOChanged(address DAO);\\n\\n\\tfunction allPools(uint256) external view returns (address pool);\\n\\n\\tfunction allPoolsLength() external view returns (uint256);\\n\\n\\tfunction getPool(address bidToken, address principalToken) external view returns (address pool);\\n\\n\\tfunction isPoolActive(address) external view returns (bool);\\n\\n\\tfunction getPoolShortToken(address) external view returns (address);\\n\\n\\tfunction getPoolLongToken(address) external view returns (address);\\n\\n\\tfunction getPoolSponsorToken(address) external view returns (address);\\n\\n\\tfunction createPool(\\n\\t\\taddress bidToken,\\n\\t\\taddress principalToken,\\n\\t\\taddress addressProvider,\\n\\t\\taddress aggregator,\\n\\t\\tuint256 biddingDuration,\\n\\t\\tuint256 gamingDuration,\\n\\t\\tstring memory tokenName,\\n\\t\\tstring memory tokenSymbol\\n\\t) external;\\n\\n\\t// all fee related getter functions\\n\\tfunction feeTo() external view returns (address);\\n\\n\\tfunction DAO() external view returns (address);\\n\\n\\tfunction pendingDAO() external view returns (address);\\n\\n\\tfunction feePercent() external view returns (uint256);\\n\\n\\t// only admin functions\\n\\t// The default DAO is admin but admin can assign this role to others by calling `setDAO`\\n\\tfunction setFeeTo(address) external;\\n\\n\\tfunction setFeePercent(uint256 _feePercent) external;\\n\\n\\tfunction setPendingDAO(address _pendingDAO) external;\\n\\n\\tfunction setDAO() external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILosslessV2Token.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.6.12;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ILosslessV2Token is IERC20 {\\n\\tfunction mint(address to, uint256 amount) external returns (bool);\\n\\n\\tfunction burn(address from, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPriceOracleGetter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.6.12;\\n\\ninterface IPriceOracleGetter {\\n\\tfunction getAssetPrice(address _asset) external view returns (uint256);\\n\\n\\tfunction getAssetsPrices(address[] calldata _assets) external view returns (uint256[] memory);\\n\\n\\tfunction getSourceOfAsset(address _asset) external view returns (address);\\n\\n\\tfunction getFallbackOracle() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILendingPoolAddressesProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.6.12;\\n\\n/**\\n * @title LendingPoolAddressesProvider contract\\n * @dev Main registry of addresses part of or connected to the protocol, including permissioned roles\\n * - Acting also as factory of proxies and admin of those, so with right to change its implementations\\n * - Owned by the Aave Governance\\n * @author Aave\\n **/\\ninterface ILendingPoolAddressesProvider {\\n\\tevent MarketIdSet(string newMarketId);\\n\\tevent LendingPoolUpdated(address indexed newAddress);\\n\\tevent ConfigurationAdminUpdated(address indexed newAddress);\\n\\tevent EmergencyAdminUpdated(address indexed newAddress);\\n\\tevent LendingPoolConfiguratorUpdated(address indexed newAddress);\\n\\tevent LendingPoolCollateralManagerUpdated(address indexed newAddress);\\n\\tevent PriceOracleUpdated(address indexed newAddress);\\n\\tevent LendingRateOracleUpdated(address indexed newAddress);\\n\\tevent ProxyCreated(bytes32 id, address indexed newAddress);\\n\\tevent AddressSet(bytes32 id, address indexed newAddress, bool hasProxy);\\n\\n\\tfunction getMarketId() external view returns (string memory);\\n\\n\\tfunction setMarketId(string calldata marketId) external;\\n\\n\\tfunction setAddress(bytes32 id, address newAddress) external;\\n\\n\\tfunction setAddressAsProxy(bytes32 id, address impl) external;\\n\\n\\tfunction getAddress(bytes32 id) external view returns (address);\\n\\n\\tfunction getLendingPool() external view returns (address);\\n\\n\\tfunction setLendingPoolImpl(address pool) external;\\n\\n\\tfunction getLendingPoolConfigurator() external view returns (address);\\n\\n\\tfunction setLendingPoolConfiguratorImpl(address configurator) external;\\n\\n\\tfunction getLendingPoolCollateralManager() external view returns (address);\\n\\n\\tfunction setLendingPoolCollateralManager(address manager) external;\\n\\n\\tfunction getPoolAdmin() external view returns (address);\\n\\n\\tfunction setPoolAdmin(address admin) external;\\n\\n\\tfunction getEmergencyAdmin() external view returns (address);\\n\\n\\tfunction setEmergencyAdmin(address admin) external;\\n\\n\\tfunction getPriceOracle() external view returns (address);\\n\\n\\tfunction setPriceOracle(address priceOracle) external;\\n\\n\\tfunction getLendingRateOracle() external view returns (address);\\n\\n\\tfunction setLendingRateOracle(address lendingRateOracle) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILendingPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport { ILendingPoolAddressesProvider } from \\\"./ILendingPoolAddressesProvider.sol\\\";\\nimport { DataTypes } from \\\"../core/libraries/DataTypes.sol\\\";\\n\\ninterface ILendingPool {\\n\\t/**\\n\\t * @dev Emitted on deposit()\\n\\t * @param reserve The address of the underlying asset of the reserve\\n\\t * @param user The address initiating the deposit\\n\\t * @param onBehalfOf The beneficiary of the deposit, receiving the aTokens\\n\\t * @param amount The amount deposited\\n\\t * @param referral The referral code used\\n\\t **/\\n\\tevent Deposit(address indexed reserve, address user, address indexed onBehalfOf, uint256 amount, uint16 indexed referral);\\n\\n\\t/**\\n\\t * @dev Emitted on withdraw()\\n\\t * @param reserve The address of the underlyng asset being withdrawn\\n\\t * @param user The address initiating the withdrawal, owner of aTokens\\n\\t * @param to Address that will receive the underlying\\n\\t * @param amount The amount to be withdrawn\\n\\t **/\\n\\tevent Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\\n\\n\\t/**\\n\\t * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\\n\\t * @param reserve The address of the underlying asset being borrowed\\n\\t * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\\n\\t * initiator of the transaction on flashLoan()\\n\\t * @param onBehalfOf The address that will be getting the debt\\n\\t * @param amount The amount borrowed out\\n\\t * @param borrowRateMode The rate mode: 1 for Stable, 2 for Variable\\n\\t * @param borrowRate The numeric rate at which the user has borrowed\\n\\t * @param referral The referral code used\\n\\t **/\\n\\tevent Borrow(\\n\\t\\taddress indexed reserve,\\n\\t\\taddress user,\\n\\t\\taddress indexed onBehalfOf,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 borrowRateMode,\\n\\t\\tuint256 borrowRate,\\n\\t\\tuint16 indexed referral\\n\\t);\\n\\n\\t/**\\n\\t * @dev Emitted on repay()\\n\\t * @param reserve The address of the underlying asset of the reserve\\n\\t * @param user The beneficiary of the repayment, getting his debt reduced\\n\\t * @param repayer The address of the user initiating the repay(), providing the funds\\n\\t * @param amount The amount repaid\\n\\t **/\\n\\tevent Repay(address indexed reserve, address indexed user, address indexed repayer, uint256 amount);\\n\\n\\t/**\\n\\t * @dev Emitted on swapBorrowRateMode()\\n\\t * @param reserve The address of the underlying asset of the reserve\\n\\t * @param user The address of the user swapping his rate mode\\n\\t * @param rateMode The rate mode that the user wants to swap to\\n\\t **/\\n\\tevent Swap(address indexed reserve, address indexed user, uint256 rateMode);\\n\\n\\t/**\\n\\t * @dev Emitted on setUserUseReserveAsCollateral()\\n\\t * @param reserve The address of the underlying asset of the reserve\\n\\t * @param user The address of the user enabling the usage as collateral\\n\\t **/\\n\\tevent ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\\n\\n\\t/**\\n\\t * @dev Emitted on setUserUseReserveAsCollateral()\\n\\t * @param reserve The address of the underlying asset of the reserve\\n\\t * @param user The address of the user enabling the usage as collateral\\n\\t **/\\n\\tevent ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\\n\\n\\t/**\\n\\t * @dev Emitted on rebalanceStableBorrowRate()\\n\\t * @param reserve The address of the underlying asset of the reserve\\n\\t * @param user The address of the user for which the rebalance has been executed\\n\\t **/\\n\\tevent RebalanceStableBorrowRate(address indexed reserve, address indexed user);\\n\\n\\t/**\\n\\t * @dev Emitted on flashLoan()\\n\\t * @param target The address of the flash loan receiver contract\\n\\t * @param initiator The address initiating the flash loan\\n\\t * @param asset The address of the asset being flash borrowed\\n\\t * @param amount The amount flash borrowed\\n\\t * @param premium The fee flash borrowed\\n\\t * @param referralCode The referral code used\\n\\t **/\\n\\tevent FlashLoan(address indexed target, address indexed initiator, address indexed asset, uint256 amount, uint256 premium, uint16 referralCode);\\n\\n\\t/**\\n\\t * @dev Emitted when the pause is triggered.\\n\\t */\\n\\tevent Paused();\\n\\n\\t/**\\n\\t * @dev Emitted when the pause is lifted.\\n\\t */\\n\\tevent Unpaused();\\n\\n\\t/**\\n\\t * @dev Emitted when a borrower is liquidated. This event is emitted by the LendingPool via\\n\\t * LendingPoolCollateral manager using a DELEGATECALL\\n\\t * This allows to have the events in the generated ABI for LendingPool.\\n\\t * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n\\t * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n\\t * @param user The address of the borrower getting liquidated\\n\\t * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n\\t * @param liquidatedCollateralAmount The amount of collateral received by the liiquidator\\n\\t * @param liquidator The address of the liquidator\\n\\t * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n\\t * to receive the underlying collateral asset directly\\n\\t **/\\n\\tevent LiquidationCall(\\n\\t\\taddress indexed collateralAsset,\\n\\t\\taddress indexed debtAsset,\\n\\t\\taddress indexed user,\\n\\t\\tuint256 debtToCover,\\n\\t\\tuint256 liquidatedCollateralAmount,\\n\\t\\taddress liquidator,\\n\\t\\tbool receiveAToken\\n\\t);\\n\\n\\t/**\\n\\t * @dev Emitted when the state of a reserve is updated. NOTE: This event is actually declared\\n\\t * in the ReserveLogic library and emitted in the updateInterestRates() function. Since the function is internal,\\n\\t * the event will actually be fired by the LendingPool contract. The event is therefore replicated here so it\\n\\t * gets added to the LendingPool ABI\\n\\t * @param reserve The address of the underlying asset of the reserve\\n\\t * @param liquidityRate The new liquidity rate\\n\\t * @param stableBorrowRate The new stable borrow rate\\n\\t * @param variableBorrowRate The new variable borrow rate\\n\\t * @param liquidityIndex The new liquidity index\\n\\t * @param variableBorrowIndex The new variable borrow index\\n\\t **/\\n\\tevent ReserveDataUpdated(\\n\\t\\taddress indexed reserve,\\n\\t\\tuint256 liquidityRate,\\n\\t\\tuint256 stableBorrowRate,\\n\\t\\tuint256 variableBorrowRate,\\n\\t\\tuint256 liquidityIndex,\\n\\t\\tuint256 variableBorrowIndex\\n\\t);\\n\\n\\t/**\\n\\t * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n\\t * - E.g. User deposits 100 USDC and gets in return 100 aUSDC\\n\\t * @param asset The address of the underlying asset to deposit\\n\\t * @param amount The amount to be deposited\\n\\t * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n\\t *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n\\t *   is a different wallet\\n\\t * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n\\t *   0 if the action is executed directly by the user, without any middle-man\\n\\t **/\\n\\tfunction deposit(\\n\\t\\taddress asset,\\n\\t\\tuint256 amount,\\n\\t\\taddress onBehalfOf,\\n\\t\\tuint16 referralCode\\n\\t) external;\\n\\n\\t/**\\n\\t * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n\\t * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n\\t * @param asset The address of the underlying asset to withdraw\\n\\t * @param amount The underlying amount to be withdrawn\\n\\t *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n\\t * @param to Address that will receive the underlying, same as msg.sender if the user\\n\\t *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n\\t *   different wallet\\n\\t * @return The final amount withdrawn\\n\\t **/\\n\\tfunction withdraw(\\n\\t\\taddress asset,\\n\\t\\tuint256 amount,\\n\\t\\taddress to\\n\\t) external returns (uint256);\\n\\n\\t/**\\n\\t * @dev Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\n\\t * already deposited enough collateral, or he was given enough allowance by a credit delegator on the\\n\\t * corresponding debt token (StableDebtToken or VariableDebtToken)\\n\\t * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\n\\t *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\n\\t * @param asset The address of the underlying asset to borrow\\n\\t * @param amount The amount to be borrowed\\n\\t * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\n\\t * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n\\t *   0 if the action is executed directly by the user, without any middle-man\\n\\t * @param onBehalfOf Address of the user who will receive the debt. Should be the address of the borrower itself\\n\\t * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\n\\t * if he has been given credit delegation allowance\\n\\t **/\\n\\tfunction borrow(\\n\\t\\taddress asset,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 interestRateMode,\\n\\t\\tuint16 referralCode,\\n\\t\\taddress onBehalfOf\\n\\t) external;\\n\\n\\t/**\\n\\t * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\n\\t * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\n\\t * @param asset The address of the borrowed underlying asset previously borrowed\\n\\t * @param amount The amount to repay\\n\\t * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n\\t * @param rateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n\\t * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\\n\\t * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n\\t * other borrower whose debt should be removed\\n\\t * @return The final amount repaid\\n\\t **/\\n\\tfunction repay(\\n\\t\\taddress asset,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 rateMode,\\n\\t\\taddress onBehalfOf\\n\\t) external returns (uint256);\\n\\n\\t/**\\n\\t * @dev Allows a borrower to swap his debt between stable and variable mode, or viceversa\\n\\t * @param asset The address of the underlying asset borrowed\\n\\t * @param rateMode The rate mode that the user wants to swap to\\n\\t **/\\n\\tfunction swapBorrowRateMode(address asset, uint256 rateMode) external;\\n\\n\\t/**\\n\\t * @dev Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\\n\\t * - Users can be rebalanced if the following conditions are satisfied:\\n\\t *     1. Usage ratio is above 95%\\n\\t *     2. the current deposit APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too much has been\\n\\t *        borrowed at a stable rate and depositors are not earning enough\\n\\t * @param asset The address of the underlying asset borrowed\\n\\t * @param user The address of the user to be rebalanced\\n\\t **/\\n\\tfunction rebalanceStableBorrowRate(address asset, address user) external;\\n\\n\\t/**\\n\\t * @dev Allows depositors to enable/disable a specific deposited asset as collateral\\n\\t * @param asset The address of the underlying asset deposited\\n\\t * @param useAsCollateral `true` if the user wants to use the deposit as collateral, `false` otherwise\\n\\t **/\\n\\tfunction setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\\n\\n\\t/**\\n\\t * @dev Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\n\\t * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\\n\\t *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\\n\\t * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n\\t * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n\\t * @param user The address of the borrower getting liquidated\\n\\t * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n\\t * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n\\t * to receive the underlying collateral asset directly\\n\\t **/\\n\\tfunction liquidationCall(\\n\\t\\taddress collateralAsset,\\n\\t\\taddress debtAsset,\\n\\t\\taddress user,\\n\\t\\tuint256 debtToCover,\\n\\t\\tbool receiveAToken\\n\\t) external;\\n\\n\\t/**\\n\\t * @dev Allows smartcontracts to access the liquidity of the pool within one transaction,\\n\\t * as long as the amount taken plus a fee is returned.\\n\\t * IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept into consideration.\\n\\t * For further details please visit https://developers.aave.com\\n\\t * @param receiverAddress The address of the contract receiving the funds, implementing the IFlashLoanReceiver interface\\n\\t * @param assets The addresses of the assets being flash-borrowed\\n\\t * @param amounts The amounts amounts being flash-borrowed\\n\\t * @param modes Types of the debt to open if the flash loan is not returned:\\n\\t *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\\n\\t *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n\\t *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n\\t * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\\n\\t * @param params Variadic packed params to pass to the receiver as extra information\\n\\t * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n\\t *   0 if the action is executed directly by the user, without any middle-man\\n\\t **/\\n\\tfunction flashLoan(\\n\\t\\taddress receiverAddress,\\n\\t\\taddress[] calldata assets,\\n\\t\\tuint256[] calldata amounts,\\n\\t\\tuint256[] calldata modes,\\n\\t\\taddress onBehalfOf,\\n\\t\\tbytes calldata params,\\n\\t\\tuint16 referralCode\\n\\t) external;\\n\\n\\t/**\\n\\t * @dev Returns the user account data across all the reserves\\n\\t * @param user The address of the user\\n\\t * @return totalCollateralETH the total collateral in ETH of the user\\n\\t * @return totalDebtETH the total debt in ETH of the user\\n\\t * @return availableBorrowsETH the borrowing power left of the user\\n\\t * @return currentLiquidationThreshold the liquidation threshold of the user\\n\\t * @return ltv the loan to value of the user\\n\\t * @return healthFactor the current health factor of the user\\n\\t **/\\n\\tfunction getUserAccountData(address user)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tuint256 totalCollateralETH,\\n\\t\\t\\tuint256 totalDebtETH,\\n\\t\\t\\tuint256 availableBorrowsETH,\\n\\t\\t\\tuint256 currentLiquidationThreshold,\\n\\t\\t\\tuint256 ltv,\\n\\t\\t\\tuint256 healthFactor\\n\\t\\t);\\n\\n\\tfunction initReserve(\\n\\t\\taddress reserve,\\n\\t\\taddress aTokenAddress,\\n\\t\\taddress stableDebtAddress,\\n\\t\\taddress variableDebtAddress,\\n\\t\\taddress interestRateStrategyAddress\\n\\t) external;\\n\\n\\tfunction setReserveInterestRateStrategyAddress(address reserve, address rateStrategyAddress) external;\\n\\n\\tfunction setConfiguration(address reserve, uint256 configuration) external;\\n\\n\\t/**\\n\\t * @dev Returns the configuration of the reserve\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @return The configuration of the reserve\\n\\t **/\\n\\tfunction getConfiguration(address asset) external view returns (DataTypes.ReserveConfigurationMap memory);\\n\\n\\t/**\\n\\t * @dev Returns the configuration of the user across all the reserves\\n\\t * @param user The user address\\n\\t * @return The configuration of the user\\n\\t **/\\n\\tfunction getUserConfiguration(address user) external view returns (DataTypes.UserConfigurationMap memory);\\n\\n\\t/**\\n\\t * @dev Returns the normalized income normalized income of the reserve\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @return The reserve's normalized income\\n\\t */\\n\\tfunction getReserveNormalizedIncome(address asset) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Returns the normalized variable debt per unit of asset\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @return The reserve normalized variable debt\\n\\t */\\n\\tfunction getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Returns the state and configuration of the reserve\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @return The state of the reserve\\n\\t **/\\n\\tfunction getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\\n\\n\\tfunction finalizeTransfer(\\n\\t\\taddress asset,\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 balanceFromAfter,\\n\\t\\tuint256 balanceToBefore\\n\\t) external;\\n\\n\\tfunction getReservesList() external view returns (address[] memory);\\n\\n\\tfunction getAddressesProvider() external view returns (ILendingPoolAddressesProvider);\\n\\n\\tfunction setPause(bool val) external;\\n\\n\\tfunction paused() external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IProtocolDataProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport { ILendingPoolAddressesProvider } from \\\"./ILendingPoolAddressesProvider.sol\\\";\\n\\ninterface IProtocolDataProvider {\\n\\tstruct TokenData {\\n\\t\\tstring symbol;\\n\\t\\taddress tokenAddress;\\n\\t}\\n\\n\\tfunction ADDRESSES_PROVIDER() external view returns (ILendingPoolAddressesProvider);\\n\\n\\tfunction getAllReservesTokens() external view returns (TokenData[] memory);\\n\\n\\tfunction getAllATokens() external view returns (TokenData[] memory);\\n\\n\\tfunction getReserveConfigurationData(address asset)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tuint256 decimals,\\n\\t\\t\\tuint256 ltv,\\n\\t\\t\\tuint256 liquidationThreshold,\\n\\t\\t\\tuint256 liquidationBonus,\\n\\t\\t\\tuint256 reserveFactor,\\n\\t\\t\\tbool usageAsCollateralEnabled,\\n\\t\\t\\tbool borrowingEnabled,\\n\\t\\t\\tbool stableBorrowRateEnabled,\\n\\t\\t\\tbool isActive,\\n\\t\\t\\tbool isFrozen\\n\\t\\t);\\n\\n\\tfunction getReserveData(address asset)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tuint256 availableLiquidity,\\n\\t\\t\\tuint256 totalStableDebt,\\n\\t\\t\\tuint256 totalVariableDebt,\\n\\t\\t\\tuint256 liquidityRate,\\n\\t\\t\\tuint256 variableBorrowRate,\\n\\t\\t\\tuint256 stableBorrowRate,\\n\\t\\t\\tuint256 averageStableBorrowRate,\\n\\t\\t\\tuint256 liquidityIndex,\\n\\t\\t\\tuint256 variableBorrowIndex,\\n\\t\\t\\tuint40 lastUpdateTimestamp\\n\\t\\t);\\n\\n\\tfunction getUserReserveData(address asset, address user)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tuint256 currentATokenBalance,\\n\\t\\t\\tuint256 currentStableDebt,\\n\\t\\t\\tuint256 currentVariableDebt,\\n\\t\\t\\tuint256 principalStableDebt,\\n\\t\\t\\tuint256 scaledVariableDebt,\\n\\t\\t\\tuint256 stableBorrowRate,\\n\\t\\t\\tuint256 liquidityRate,\\n\\t\\t\\tuint40 stableRateLastUpdated,\\n\\t\\t\\tbool usageAsCollateralEnabled\\n\\t\\t);\\n\\n\\tfunction getReserveTokensAddresses(address asset)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\taddress aTokenAddress,\\n\\t\\t\\taddress stableDebtTokenAddress,\\n\\t\\t\\taddress variableDebtTokenAddress\\n\\t\\t);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IStakedToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.6.12;\\n\\ninterface IStakedToken {\\n  \\n  function stake(address to, uint256 amount) external;\\n\\n  function redeem(address to, uint256 amount) external;\\n\\n  function cooldown() external;\\n\\n  function claimRewards(address to, uint256 amount) external;\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals()\\n    external\\n    view\\n    returns (\\n      uint8\\n    );\\n\\n  function description()\\n    external\\n    view\\n    returns (\\n      string memory\\n    );\\n\\n  function version()\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(\\n    uint80 _roundId\\n  )\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.6/interfaces/KeeperCompatibleInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\ninterface KeeperCompatibleInterface {\\n\\n  /**\\n   * @notice checks if the contract requires work to be done.\\n   * @param checkData data passed to the contract when checking for upkeep.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with,\\n   * if upkeep is needed.\\n   */\\n  function checkUpkeep(\\n    bytes calldata checkData\\n  )\\n    external\\n    returns (\\n      bool upkeepNeeded,\\n      bytes memory performData\\n    );\\n\\n  /**\\n   * @notice Performs work on the contract. Executed by the keepers, via the registry.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation.\\n   */\\n  function performUpkeep(\\n    bytes calldata performData\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/core/libraries/DataTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.6.12;\\n\\nlibrary DataTypes {\\n\\t// refer to the whitepaper, section 1.1 basic concepts for a formal description of these properties.\\n\\tstruct ReserveData {\\n\\t\\t//stores the reserve configuration\\n\\t\\tReserveConfigurationMap configuration;\\n\\t\\t//the liquidity index. Expressed in ray\\n\\t\\tuint128 liquidityIndex;\\n\\t\\t//variable borrow index. Expressed in ray\\n\\t\\tuint128 variableBorrowIndex;\\n\\t\\t//the current supply rate. Expressed in ray\\n\\t\\tuint128 currentLiquidityRate;\\n\\t\\t//the current variable borrow rate. Expressed in ray\\n\\t\\tuint128 currentVariableBorrowRate;\\n\\t\\t//the current stable borrow rate. Expressed in ray\\n\\t\\tuint128 currentStableBorrowRate;\\n\\t\\tuint40 lastUpdateTimestamp;\\n\\t\\t//tokens addresses\\n\\t\\taddress aTokenAddress;\\n\\t\\taddress stableDebtTokenAddress;\\n\\t\\taddress variableDebtTokenAddress;\\n\\t\\t//address of the interest rate strategy\\n\\t\\taddress interestRateStrategyAddress;\\n\\t\\t//the id of the reserve. Represents the position in the list of the active reserves\\n\\t\\tuint8 id;\\n\\t}\\n\\n\\tstruct ReserveConfigurationMap {\\n\\t\\t//bit 0-15: LTV\\n\\t\\t//bit 16-31: Liq. threshold\\n\\t\\t//bit 32-47: Liq. bonus\\n\\t\\t//bit 48-55: Decimals\\n\\t\\t//bit 56: Reserve is active\\n\\t\\t//bit 57: reserve is frozen\\n\\t\\t//bit 58: borrowing is enabled\\n\\t\\t//bit 59: stable rate borrowing enabled\\n\\t\\t//bit 60-63: reserved\\n\\t\\t//bit 64-79: reserve factor\\n\\t\\tuint256 data;\\n\\t}\\n\\n\\tstruct UserConfigurationMap {\\n\\t\\tuint256 data;\\n\\t}\\n\\n\\tenum InterestRateMode {\\n\\t\\tNONE,\\n\\t\\tSTABLE,\\n\\t\\tVARIABLE\\n\\t}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bidToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_principalToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_addressProvider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_aggregator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_biddingDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gamingDuration\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isShortLastRoundWinner\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"initialPrice\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"endPrice\",\"type\":\"int256\"}],\"name\":\"AnnounceWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shortPrincipalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"longPrincipalAmount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"principalAmount\",\"type\":\"uint256\"}],\"name\":\"SponsorDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sponsorTokenAmount\",\"type\":\"uint256\"}],\"name\":\"SponsorWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"valuePerShortToken\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"valuePerLongToken\",\"type\":\"uint256\"}],\"name\":\"UpdateTokenValue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isAToken\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shortTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"longTokenAmount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addressProvider\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bidToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"checkData\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakedAAVEAddress_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"claimAAVE\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shortPrincipalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"longPrincipalAmount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"inPoolTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shortToken_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"longToken_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sponsorToken_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolTermination\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolTokensInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"longToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"shortToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sponsorToken\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"principalToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"principalAmount\",\"type\":\"uint256\"}],\"name\":\"sponsorDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sponsorTokenAmount\",\"type\":\"uint256\"}],\"name\":\"sponsorWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startFirstRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"status\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isShortLastRoundWinner\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isFirstUser\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isFirstRound\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"gameRound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"durationOfGame\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"durationOfBidding\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"initialPrice\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"endPrice\",\"type\":\"int256\"},{\"internalType\":\"enum ILosslessV2Pool.PoolStatus\",\"name\":\"currState\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"fromLongToShort\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"swapTokenAmount\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"userLongPrincipalBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"userLongAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"userShortPrincipalBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"userShortAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"valuePerLongToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"valuePerShortToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"valuePerSponsorToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isAToken\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"shortTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"longTokenAmount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "LosslessV2Pool", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000001bfd67037b42cf73acf2047067bd4f2c47d9bfd6000000000000000000000000c2132d05d31c914a87c6611c10748aeb04b58e8f000000000000000000000000d05e3e715d945b59290df0ae8ef85c1bdb684744000000000000000000000000c907e116054ad103354f2d350fd2514433d57f6f00000000000000000000000000000000000000000000000000000000000002580000000000000000000000000000000000000000000000000000000000000258", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}