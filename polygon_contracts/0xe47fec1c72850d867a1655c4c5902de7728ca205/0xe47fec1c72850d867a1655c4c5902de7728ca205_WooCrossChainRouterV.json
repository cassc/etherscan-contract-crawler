{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title Wrapped ETH.\\ninterface IWETH {\\n    /// @dev Deposit ETH into WETH\\n    function deposit() external payable;\\n\\n    /// @dev Transfer WETH to receiver\\n    /// @param to address of WETH receiver\\n    /// @param value amount of WETH to transfer\\n    /// @return get true when succeed, else false\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /// @dev Withdraw WETH to ETH\\n    function withdraw(uint256) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IWooCrossChainRouterV3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.14;\\n\\n/*\\n\\n\u2591\u2588\u2588\u2557\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2557\\n\u2591\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2551\\n\u2591\u255a\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2551\\n\u2591\u2591\u2588\u2588\u2588\u2588\u2554\u2550\u2588\u2588\u2588\u2588\u2551\u2591\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u255a\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u255d\u2591\u2591\u2588\u2588\u2551\\n\u2591\u2591\u255a\u2588\u2588\u2554\u255d\u2591\u255a\u2588\u2588\u2554\u255d\u2591\u255a\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2551\\n\u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u255a\u2550\u2550\u2550\u2550\u255d\u2591\u2591\u255a\u2550\u2550\u2550\u2550\u255d\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u2591\u2591\u255a\u2550\u255d\\n\\n*\\n* MIT License\\n* ===========\\n*\\n* Copyright (c) 2020 WooTrade\\n*\\n* Permission is hereby granted, free of charge, to any person obtaining a copy\\n* of this software and associated documentation files (the \\\"Software\\\"), to deal\\n* in the Software without restriction, including without limitation the rights\\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n* copies of the Software, and to permit persons to whom the Software is\\n* furnished to do so, subject to the following conditions:\\n*\\n* The above copyright notice and this permission notice shall be included in all\\n* copies or substantial portions of the Software.\\n*\\n* THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\\n*/\\n\\n/// @title WOOFi cross chain router interface (version 3, supporting WOOFi and 1inch).\\n/// @notice functions to interface with WOOFi cross chain swap, and 1inch for local swap\\ninterface IWooCrossChainRouterV3 {\\n    /* ----- Structs ----- */\\n\\n    struct SrcInfos {\\n        address fromToken;\\n        address bridgeToken;\\n        uint256 fromAmount;\\n        uint256 minBridgeAmount;\\n    }\\n\\n    struct Src1inch {\\n        address swapRouter;\\n        bytes data;\\n    }\\n\\n    struct DstInfos {\\n        uint16 chainId;\\n        address toToken;\\n        address bridgeToken;\\n        uint256 minToAmount;\\n        uint256 airdropNativeAmount;\\n    }\\n\\n    struct Dst1inch {\\n        address swapRouter;\\n        bytes data;\\n    }\\n\\n    /* ----- Events ----- */\\n\\n    event WooCrossSwapOnSrcChain(\\n        uint256 indexed refId,\\n        address indexed sender,\\n        address indexed to,\\n        address fromToken,\\n        uint256 fromAmount,\\n        address bridgeToken,\\n        uint256 minBridgeAmount,\\n        uint256 realBridgeAmount,\\n        uint8 swapType,\\n        uint256 fee\\n    );\\n\\n    event WooCrossSwapOnDstChain(\\n        uint256 indexed refId,\\n        address indexed sender,\\n        address indexed to,\\n        address bridgedToken,\\n        uint256 bridgedAmount,\\n        address toToken,\\n        address realToToken,\\n        uint256 minToAmount,\\n        uint256 realToAmount,\\n        uint8 swapType,\\n        uint256 fee\\n    );\\n\\n    /* ----- State Variables ----- */\\n\\n    function bridgeSlippage() external view returns (uint256);\\n\\n    function dstGasForSwapCall() external view returns (uint256);\\n\\n    function dstGasForNoSwapCall() external view returns (uint256);\\n\\n    function wooCrossRouters(uint16 chainId) external view returns (address wooCrossRouter);\\n\\n    /* ----- Functions ----- */\\n\\n    function crossSwap(\\n        uint256 refId,\\n        address payable to,\\n        SrcInfos memory srcInfos,\\n        DstInfos calldata dstInfos,\\n        Src1inch calldata src1inch,\\n        Dst1inch calldata dst1inch\\n    ) external payable;\\n\\n    function sgReceive(\\n        uint16 srcChainId,\\n        bytes memory srcAddress,\\n        uint256 nonce,\\n        address bridgedToken,\\n        uint256 amountLD,\\n        bytes memory payload\\n    ) external;\\n\\n    function quoteLayerZeroFee(\\n        uint256 refId,\\n        address to,\\n        DstInfos calldata dstInfos,\\n        Dst1inch calldata dst1inch\\n    ) external view returns (uint256 nativeAmount, uint256 zroAmount);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IWooPPV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.14;\\n\\n/*\\n\\n\u2591\u2588\u2588\u2557\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2557\\n\u2591\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2551\\n\u2591\u255a\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2551\\n\u2591\u2591\u2588\u2588\u2588\u2588\u2554\u2550\u2588\u2588\u2588\u2588\u2551\u2591\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u255a\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u255d\u2591\u2591\u2588\u2588\u2551\\n\u2591\u2591\u255a\u2588\u2588\u2554\u255d\u2591\u255a\u2588\u2588\u2554\u255d\u2591\u255a\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2551\\n\u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u255a\u2550\u2550\u2550\u2550\u255d\u2591\u2591\u255a\u2550\u2550\u2550\u2550\u255d\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u2591\u2591\u255a\u2550\u255d\\n\\n*\\n* MIT License\\n* ===========\\n*\\n* Copyright (c) 2020 WooTrade\\n*\\n* Permission is hereby granted, free of charge, to any person obtaining a copy\\n* of this software and associated documentation files (the \\\"Software\\\"), to deal\\n* in the Software without restriction, including without limitation the rights\\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n* copies of the Software, and to permit persons to whom the Software is\\n* furnished to do so, subject to the following conditions:\\n*\\n* The above copyright notice and this permission notice shall be included in all\\n* copies or substantial portions of the Software.\\n*\\n* THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\\n*/\\n\\n/// @title Woo private pool for swap.\\n/// @notice Use this contract to directly interfact with woo's synthetic proactive\\n///         marketing making pool.\\n/// @author woo.network\\ninterface IWooPPV2 {\\n    /* ----- Events ----- */\\n\\n    event Deposit(address indexed token, address indexed sender, uint256 amount);\\n    event Withdraw(address indexed token, address indexed receiver, uint256 amount);\\n    event Migrate(address indexed token, address indexed receiver, uint256 amount);\\n    event AdminUpdated(address indexed addr, bool flag);\\n    event FeeAddrUpdated(address indexed newFeeAddr);\\n    event WooracleUpdated(address indexed newWooracle);\\n    event WooSwap(\\n        address indexed fromToken,\\n        address indexed toToken,\\n        uint256 fromAmount,\\n        uint256 toAmount,\\n        address from,\\n        address indexed to,\\n        address rebateTo,\\n        uint256 swapVol,\\n        uint256 swapFee\\n    );\\n\\n    /* ----- External Functions ----- */\\n\\n    /// @notice The quote token address (immutable).\\n    /// @return address of quote token\\n    function quoteToken() external view returns (address);\\n\\n    /// @notice Gets the pool size of the specified token (swap liquidity).\\n    /// @param token the token address\\n    /// @return the pool size\\n    function poolSize(address token) external view returns (uint256);\\n\\n    /// @notice Query the amount to swap `fromToken` to `toToken`, without checking the pool reserve balance.\\n    /// @param fromToken the from token\\n    /// @param toToken the to token\\n    /// @param fromAmount the amount of `fromToken` to swap\\n    /// @return toAmount the swapped amount of `toToken`\\n    function tryQuery(\\n        address fromToken,\\n        address toToken,\\n        uint256 fromAmount\\n    ) external view returns (uint256 toAmount);\\n\\n    /// @notice Query the amount to swap `fromToken` to `toToken`, with checking the pool reserve balance.\\n    /// @dev tx reverts when 'toToken' balance is insufficient.\\n    /// @param fromToken the from token\\n    /// @param toToken the to token\\n    /// @param fromAmount the amount of `fromToken` to swap\\n    /// @return toAmount the swapped amount of `toToken`\\n    function query(\\n        address fromToken,\\n        address toToken,\\n        uint256 fromAmount\\n    ) external view returns (uint256 toAmount);\\n\\n    /// @notice Swap `fromToken` to `toToken`.\\n    /// @param fromToken the from token\\n    /// @param toToken the to token\\n    /// @param fromAmount the amount of `fromToken` to swap\\n    /// @param minToAmount the minimum amount of `toToken` to receive\\n    /// @param to the destination address\\n    /// @param rebateTo the rebate address (optional, can be address ZERO)\\n    /// @return realToAmount the amount of toToken to receive\\n    function swap(\\n        address fromToken,\\n        address toToken,\\n        uint256 fromAmount,\\n        uint256 minToAmount,\\n        address to,\\n        address rebateTo\\n    ) external returns (uint256 realToAmount);\\n\\n    /// @notice Deposit the specified token into the liquidity pool of WooPPV2.\\n    /// @param token the token to deposit\\n    /// @param amount the deposit amount\\n    function deposit(address token, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IWooRouterV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.14;\\n\\n/*\\n\\n\u2591\u2588\u2588\u2557\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2557\\n\u2591\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2551\\n\u2591\u255a\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2551\\n\u2591\u2591\u2588\u2588\u2588\u2588\u2554\u2550\u2588\u2588\u2588\u2588\u2551\u2591\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u255a\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u255d\u2591\u2591\u2588\u2588\u2551\\n\u2591\u2591\u255a\u2588\u2588\u2554\u255d\u2591\u255a\u2588\u2588\u2554\u255d\u2591\u255a\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2551\\n\u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u255a\u2550\u2550\u2550\u2550\u255d\u2591\u2591\u255a\u2550\u2550\u2550\u2550\u255d\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u2591\u2591\u255a\u2550\u255d\\n\\n*\\n* MIT License\\n* ===========\\n*\\n* Copyright (c) 2020 WooTrade\\n*\\n* Permission is hereby granted, free of charge, to any person obtaining a copy\\n* of this software and associated documentation files (the \\\"Software\\\"), to deal\\n* in the Software without restriction, including without limitation the rights\\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n* copies of the Software, and to permit persons to whom the Software is\\n* furnished to do so, subject to the following conditions:\\n*\\n* The above copyright notice and this permission notice shall be included in all\\n* copies or substantial portions of the Software.\\n*\\n* THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\\n*/\\n\\nimport \\\"../interfaces/IWooPPV2.sol\\\";\\n\\n/// @title Woo router interface (version 2)\\n/// @notice functions to interface with WooFi swap\\ninterface IWooRouterV2 {\\n    /* ----- Type declarations ----- */\\n\\n    enum SwapType {\\n        WooSwap,\\n        DodoSwap\\n    }\\n\\n    /* ----- Events ----- */\\n\\n    event WooRouterSwap(\\n        SwapType swapType,\\n        address indexed fromToken,\\n        address indexed toToken,\\n        uint256 fromAmount,\\n        uint256 toAmount,\\n        address from,\\n        address indexed to,\\n        address rebateTo\\n    );\\n\\n    event WooPoolChanged(address newPool);\\n\\n    /* ----- Router properties ----- */\\n\\n    function WETH() external view returns (address);\\n\\n    function wooPool() external view returns (IWooPPV2);\\n\\n    /* ----- Main query & swap APIs ----- */\\n\\n    /// @notice query the amount to swap fromToken -> toToken\\n    /// @param fromToken the from token\\n    /// @param toToken the to token\\n    /// @param fromAmount the amount of fromToken to swap\\n    /// @return toAmount the predicted amount to receive\\n    function querySwap(\\n        address fromToken,\\n        address toToken,\\n        uint256 fromAmount\\n    ) external view returns (uint256 toAmount);\\n\\n    /// @notice query the amount to swap fromToken -> toToken,\\n    ///     WITHOUT checking the reserve balance; so it\\n    ///     always returns the quoted amount (for reference).\\n    /// @param fromToken the from token\\n    /// @param toToken the to token\\n    /// @param fromAmount the amount of fromToken to swap\\n    /// @return toAmount the predicted amount to receive\\n    function tryQuerySwap(\\n        address fromToken,\\n        address toToken,\\n        uint256 fromAmount\\n    ) external view returns (uint256 toAmount);\\n\\n    /// @notice Swap `fromToken` to `toToken`.\\n    /// @param fromToken the from token\\n    /// @param toToken the to token\\n    /// @param fromAmount the amount of `fromToken` to swap\\n    /// @param minToAmount the minimum amount of `toToken` to receive\\n    /// @param to the destination address\\n    /// @param rebateTo the rebate address (optional, can be 0)\\n    /// @return realToAmount the amount of toToken to receive\\n    function swap(\\n        address fromToken,\\n        address toToken,\\n        uint256 fromAmount,\\n        uint256 minToAmount,\\n        address payable to,\\n        address rebateTo\\n    ) external payable returns (uint256 realToAmount);\\n\\n    /* ----- 3rd party DEX swap ----- */\\n\\n    /// @notice swap fromToken -> toToken via an external 3rd swap\\n    /// @param approveTarget the contract address for token transfer approval\\n    /// @param swapTarget the contract address for swap\\n    /// @param fromToken the from token\\n    /// @param toToken the to token\\n    /// @param fromAmount the amount of fromToken to swap\\n    /// @param minToAmount the min amount of swapped toToken\\n    /// @param to the destination address\\n    /// @param data call data for external call\\n    function externalSwap(\\n        address approveTarget,\\n        address swapTarget,\\n        address fromToken,\\n        address toToken,\\n        uint256 fromAmount,\\n        uint256 minToAmount,\\n        address payable to,\\n        bytes calldata data\\n    ) external payable returns (uint256 realToAmount);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/LayerZero/ILzApp.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the LzApp that functions not exist in the @layerzerolabs package\\n */\\ninterface ILzApp {\\n    function minDstGasLookup(uint16 _dstChainId, uint16 _type) external view returns (uint256 _minGasLimit);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/Stargate/IStargateEthVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IStargateEthVault {\\n    function deposit() external payable;\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function withdraw(uint256) external;\\n\\n    function approve(address guy, uint256 wad) external returns (bool);\\n\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 wad\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/Stargate/IStargateRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IStargateRouter {\\n    struct lzTxObj {\\n        uint256 dstGasForCall;\\n        uint256 dstNativeAmount;\\n        bytes dstNativeAddr;\\n    }\\n\\n    function addLiquidity(\\n        uint256 _poolId,\\n        uint256 _amountLD,\\n        address _to\\n    ) external;\\n\\n    function swap(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress,\\n        uint256 _amountLD,\\n        uint256 _minAmountLD,\\n        lzTxObj memory _lzTxParams,\\n        bytes calldata _to,\\n        bytes calldata _payload\\n    ) external payable;\\n\\n    function redeemRemote(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress,\\n        uint256 _amountLP,\\n        uint256 _minAmountLD,\\n        bytes calldata _to,\\n        lzTxObj memory _lzTxParams\\n    ) external payable;\\n\\n    function instantRedeemLocal(\\n        uint16 _srcPoolId,\\n        uint256 _amountLP,\\n        address _to\\n    ) external returns (uint256);\\n\\n    function redeemLocal(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress,\\n        uint256 _amountLP,\\n        bytes calldata _to,\\n        lzTxObj memory _lzTxParams\\n    ) external payable;\\n\\n    function sendCredits(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress\\n    ) external payable;\\n\\n    function quoteLayerZeroFee(\\n        uint16 _dstChainId,\\n        uint8 _functionType,\\n        bytes calldata _toAddress,\\n        bytes calldata _transferAndCallPayload,\\n        lzTxObj memory _lzTxParams\\n    ) external view returns (uint256, uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/TransferHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper::safeApprove: approve failed\\\"\\n        );\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper::safeTransfer: transfer failed\\\"\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper::transferFrom: transferFrom failed\\\"\\n        );\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, \\\"TransferHelper::safeTransferETH: ETH transfer failed\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/WooCrossChainRouterV3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.14;\\n\\n// OpenZeppelin Contracts\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {Pausable} from \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\n// Local Contracts\\nimport {IWETH} from \\\"./interfaces/IWETH.sol\\\";\\nimport {IWooCrossChainRouterV3} from \\\"./interfaces/IWooCrossChainRouterV3.sol\\\";\\nimport {IWooRouterV2} from \\\"./interfaces/IWooRouterV2.sol\\\";\\nimport {IStargateEthVault} from \\\"./interfaces/Stargate/IStargateEthVault.sol\\\";\\nimport {IStargateRouter} from \\\"./interfaces/Stargate/IStargateRouter.sol\\\";\\nimport {ILzApp} from \\\"./interfaces/LayerZero/ILzApp.sol\\\";\\n\\nimport {TransferHelper} from \\\"./libraries/TransferHelper.sol\\\";\\n\\n/// @title cross chain router implementation, version 3.\\n/// @notice Router for stateless execution of cross chain swap against WOOFi or 1inch swap.\\n/// @custom:stargate-contracts https://stargateprotocol.gitbook.io/stargate/developers/contract-addresses/mainnet\\ncontract WooCrossChainRouterV3 is IWooCrossChainRouterV3, Ownable, Pausable, ReentrancyGuard {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    /* ----- Constants ----- */\\n\\n    address public constant ETH_PLACEHOLDER_ADDR = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    /* ----- Variables ----- */\\n\\n    IWooRouterV2 public wooRouter;\\n    IStargateRouter public stargateRouter;\\n\\n    address public immutable weth;\\n    address public feeAddr;\\n    uint256 public bridgeSlippage; // 1 in 10000th: default 1%\\n    uint256 public dstGasForSwapCall;\\n    uint256 public dstGasForNoSwapCall;\\n\\n    uint16 public sgChainIdLocal; // Stargate chainId on local chain\\n    uint16 public srcExternalFeeRate; // unit: 0.1 bps (1e6 = 100%, 25 = 2.5 bps)\\n    uint16 public dstExternalFeeRate; // unit: 0.1 bps (1e6 = 100%, 25 = 2.5 bps)\\n    uint256 public constant FEE_BASE = 1e5;\\n\\n    mapping(uint16 => address) public wooCrossRouters; // chainId => WooCrossChainRouterV3 address\\n    mapping(uint16 => address) public sgETHs; // chainId => SGETH token address\\n    mapping(uint16 => mapping(address => uint256)) public sgPoolIds; // chainId => token address => Stargate poolId\\n\\n    receive() external payable {}\\n\\n    constructor(\\n        address _weth,\\n        address _wooRouter,\\n        address _stargateRouter,\\n        uint16 _sgChainIdLocal\\n    ) {\\n        weth = _weth;\\n        wooRouter = IWooRouterV2(_wooRouter);\\n        stargateRouter = IStargateRouter(_stargateRouter);\\n        sgChainIdLocal = _sgChainIdLocal;\\n\\n        bridgeSlippage = 100;\\n        dstGasForSwapCall = 660000;\\n        dstGasForNoSwapCall = 80000;\\n\\n        srcExternalFeeRate = 25;\\n        dstExternalFeeRate = 25;\\n\\n        _initSgETHs();\\n        _initSgPoolIds();\\n    }\\n\\n    function _initSgETHs() internal {\\n        // Ethereum\\n        sgETHs[101] = 0x72E2F4830b9E45d52F80aC08CB2bEC0FeF72eD9c;\\n        // Arbitrum\\n        sgETHs[110] = 0x82CbeCF39bEe528B5476FE6d1550af59a9dB6Fc0;\\n        // Optimism\\n        sgETHs[111] = 0xb69c8CBCD90A39D8D3d3ccf0a3E968511C3856A0;\\n        // Linea\\n        sgETHs[183] = 0x224D8Fd7aB6AD4c6eb4611Ce56EF35Dec2277F03;\\n        // Base\\n        sgETHs[184] = 0x224D8Fd7aB6AD4c6eb4611Ce56EF35Dec2277F03;\\n    }\\n\\n    function _initSgPoolIds() internal {\\n        // poolId > 0 means able to be bridge token\\n        // Ethereum\\n        sgPoolIds[101][0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48] = 1; // USDC\\n        sgPoolIds[101][0xdAC17F958D2ee523a2206206994597C13D831ec7] = 2; // USDT\\n        sgPoolIds[101][0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2] = 13; // WETH\\n        sgPoolIds[101][0x4691937a7508860F876c9c0a2a617E7d9E945D4B] = 20; // WOO\\n        // BNB Chain\\n        sgPoolIds[102][0x55d398326f99059fF775485246999027B3197955] = 2; // USDT\\n        sgPoolIds[102][0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56] = 5; // BUSD\\n        sgPoolIds[102][0x4691937a7508860F876c9c0a2a617E7d9E945D4B] = 20; // WOO\\n        // Avalanche\\n        sgPoolIds[106][0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E] = 1; // USDC\\n        sgPoolIds[106][0x9702230A8Ea53601f5cD2dc00fDBc13d4dF4A8c7] = 2; // USDT\\n        sgPoolIds[106][0xaBC9547B534519fF73921b1FBA6E672b5f58D083] = 20; // WOO\\n        // Polygon\\n        sgPoolIds[109][0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174] = 1; // USDC\\n        sgPoolIds[109][0xc2132D05D31c914a87C6611C10748AEb04B58e8F] = 2; // USDT\\n        sgPoolIds[109][0x1B815d120B3eF02039Ee11dC2d33DE7aA4a8C603] = 20; // WOO\\n        // Arbitrum\\n        sgPoolIds[110][0xFF970A61A04b1cA14834A43f5dE4533eBDDB5CC8] = 1; // USDC\\n        sgPoolIds[110][0xFd086bC7CD5C481DCC9C85ebE478A1C0b69FCbb9] = 2; // USDT\\n        sgPoolIds[110][0x82aF49447D8a07e3bd95BD0d56f35241523fBab1] = 13; // WETH\\n        sgPoolIds[110][0xcAFcD85D8ca7Ad1e1C6F82F651fA15E33AEfD07b] = 20; // WOO\\n        // Optimism\\n        sgPoolIds[111][0x7F5c764cBc14f9669B88837ca1490cCa17c31607] = 1; // USDC\\n        sgPoolIds[111][0x4200000000000000000000000000000000000006] = 13; // WETH\\n        sgPoolIds[111][0x871f2F2ff935FD1eD867842FF2a7bfD051A5E527] = 20; // WOO\\n        // Fantom\\n        sgPoolIds[112][0x04068DA6C83AFCFA0e13ba15A6696662335D5B75] = 1; // USDC\\n        sgPoolIds[112][0x6626c47c00F1D87902fc13EECfaC3ed06D5E8D8a] = 20; // WOO\\n        // Linea\\n        sgPoolIds[183][0xe5D7C2a44FfDDf6b295A15c148167daaAf5Cf34f] = 13; // WETH\\n        // Base\\n        sgPoolIds[184][0xd9aAEc86B65D86f6A7B5B1b0c42FFA531710b6CA] = 1; // USDC\\n        sgPoolIds[184][0x4200000000000000000000000000000000000006] = 13; // WETH\\n    }\\n\\n    /* ----- Functions ----- */\\n\\n    function crossSwap(\\n        uint256 refId,\\n        address payable to,\\n        SrcInfos memory srcInfos,\\n        DstInfos calldata dstInfos,\\n        Src1inch calldata src1inch,\\n        Dst1inch calldata dst1inch\\n    ) external payable whenNotPaused nonReentrant {\\n        require(srcInfos.fromToken != address(0), \\\"WooCrossChainRouterV3: !srcInfos.fromToken\\\");\\n        require(\\n            dstInfos.toToken != address(0) && dstInfos.toToken != sgETHs[dstInfos.chainId],\\n            \\\"WooCrossChainRouterV3: !dstInfos.toToken\\\"\\n        );\\n        require(to != address(0), \\\"WooCrossChainRouterV3: !to\\\");\\n\\n        uint256 msgValue = msg.value;\\n        uint256 bridgeAmount;\\n        uint256 fee = 0;\\n\\n        {\\n            // Step 1: transfer\\n            if (srcInfos.fromToken == ETH_PLACEHOLDER_ADDR) {\\n                require(srcInfos.fromAmount <= msgValue, \\\"WooCrossChainRouterV3: !srcInfos.fromAmount\\\");\\n                srcInfos.fromToken = weth;\\n                IWETH(weth).deposit{value: srcInfos.fromAmount}();\\n                msgValue -= srcInfos.fromAmount;\\n            } else {\\n                TransferHelper.safeTransferFrom(srcInfos.fromToken, msg.sender, address(this), srcInfos.fromAmount);\\n            }\\n\\n            // Step 2: local swap by 1inch router\\n            if (srcInfos.fromToken != srcInfos.bridgeToken) {\\n                TransferHelper.safeApprove(srcInfos.fromToken, address(wooRouter), srcInfos.fromAmount);\\n                if (src1inch.swapRouter != address(0)) {\\n                    // external swap via 1inch\\n                    bridgeAmount = wooRouter.externalSwap(\\n                        src1inch.swapRouter,\\n                        src1inch.swapRouter,\\n                        srcInfos.fromToken,\\n                        srcInfos.bridgeToken,\\n                        srcInfos.fromAmount,\\n                        srcInfos.minBridgeAmount,\\n                        payable(address(this)),\\n                        src1inch.data\\n                    );\\n                    fee = (bridgeAmount * srcExternalFeeRate) / FEE_BASE;\\n                } else {\\n                    // swap via WOOFi\\n                    bridgeAmount = wooRouter.swap(\\n                        srcInfos.fromToken,\\n                        srcInfos.bridgeToken,\\n                        srcInfos.fromAmount,\\n                        srcInfos.minBridgeAmount,\\n                        payable(address(this)),\\n                        to\\n                    );\\n                }\\n            } else {\\n                require(\\n                    srcInfos.fromAmount == srcInfos.minBridgeAmount,\\n                    \\\"WooCrossChainRouterV3: !srcInfos.minBridgeAmount\\\"\\n                );\\n                bridgeAmount = srcInfos.fromAmount;\\n            }\\n\\n            require(\\n                bridgeAmount <= IERC20(srcInfos.bridgeToken).balanceOf(address(this)),\\n                \\\"WooCrossChainRouterV3: !bridgeAmount\\\"\\n            );\\n        }\\n\\n        // Step 3: deduct the swap fee\\n        bridgeAmount -= fee;\\n\\n        // Step 4: cross chain swap by StargateRouter\\n        _bridgeByStargate(refId, to, msgValue, bridgeAmount, srcInfos, dstInfos, dst1inch);\\n\\n        emit WooCrossSwapOnSrcChain(\\n            refId,\\n            _msgSender(),\\n            to,\\n            srcInfos.fromToken,\\n            srcInfos.fromAmount,\\n            srcInfos.bridgeToken,\\n            srcInfos.minBridgeAmount,\\n            bridgeAmount,\\n            src1inch.swapRouter == address(0) ? 0 : 1,\\n            fee\\n        );\\n    }\\n\\n    function sgReceive(\\n        uint16, // srcChainId\\n        bytes memory, // srcAddress\\n        uint256, // nonce\\n        address bridgedToken,\\n        uint256 amountLD,\\n        bytes memory payload\\n    ) external {\\n        require(msg.sender == address(stargateRouter), \\\"WooCrossChainRouterV3: INVALID_CALLER\\\");\\n\\n        // make sure the same order to abi.encode when decode payload\\n        (uint256 refId, address to, address toToken, uint256 minToAmount, Dst1inch memory dst1inch) = abi.decode(\\n            payload,\\n            (uint256, address, address, uint256, Dst1inch)\\n        );\\n\\n        // toToken won't be SGETH, and bridgedToken won't be ETH_PLACEHOLDER_ADDR\\n        if (bridgedToken == sgETHs[sgChainIdLocal]) {\\n            // bridgedToken is SGETH, received native token\\n            _handleNativeReceived(refId, to, toToken, amountLD, minToAmount, dst1inch);\\n        } else {\\n            // bridgedToken is not SGETH, received ERC20 token\\n            _handleERC20Received(refId, to, toToken, bridgedToken, amountLD, minToAmount, dst1inch);\\n        }\\n    }\\n\\n    function quoteLayerZeroFee(\\n        uint256 refId,\\n        address to,\\n        DstInfos calldata dstInfos,\\n        Dst1inch calldata dst1inch\\n    ) external view returns (uint256, uint256) {\\n        bytes memory payload = abi.encode(refId, to, dstInfos.toToken, dstInfos.minToAmount, dst1inch);\\n        IStargateRouter.lzTxObj memory obj = _getLzTxObj(to, dstInfos);\\n        return\\n            stargateRouter.quoteLayerZeroFee(\\n                dstInfos.chainId,\\n                1, // https://stargateprotocol.gitbook.io/stargate/developers/function-types\\n                obj.dstNativeAddr,\\n                payload,\\n                obj\\n            );\\n    }\\n\\n    /// @dev OKAY to be public method\\n    function claimFee(address token) external nonReentrant {\\n        require(feeAddr != address(0), \\\"WooCrossChainRouterV3: !feeAddr\\\");\\n        uint256 amount = _generalBalanceOf(token, address(this));\\n        if (amount > 0) {\\n            if (token == ETH_PLACEHOLDER_ADDR) {\\n                TransferHelper.safeTransferETH(feeAddr, amount);\\n            } else {\\n                TransferHelper.safeTransfer(token, feeAddr, amount);\\n            }\\n        }\\n    }\\n\\n    function _getDstGasForCall(DstInfos memory dstInfos) internal view returns (uint256) {\\n        return (dstInfos.toToken == dstInfos.bridgeToken) ? dstGasForNoSwapCall : dstGasForSwapCall;\\n    }\\n\\n    function _getAdapterParams(\\n        address to,\\n        address oft,\\n        uint256 dstGasForCall,\\n        DstInfos memory dstInfos\\n    ) internal view returns (bytes memory) {\\n        // OFT src logic: require(providedGasLimit >= minGasLimit)\\n        // uint256 minGasLimit = minDstGasLookup[_dstChainId][_type] + dstGasForCall;\\n        // _type: 0(send), 1(send_and_call)\\n        uint256 providedGasLimit = ILzApp(oft).minDstGasLookup(dstInfos.chainId, 1) + dstGasForCall;\\n\\n        // https://layerzero.gitbook.io/docs/evm-guides/advanced/relayer-adapter-parameters#airdrop\\n        return\\n            abi.encodePacked(\\n                uint16(2), // version: 2 is able to airdrop native token on destination but 1 is not\\n                providedGasLimit, // gasAmount: destination transaction gas for LayerZero to delivers\\n                dstInfos.airdropNativeAmount, // nativeForDst: airdrop native token amount\\n                to // addressOnDst: address to receive airdrop native token on destination\\n            );\\n    }\\n\\n    function _getLzTxObj(address to, DstInfos memory dstInfos) internal view returns (IStargateRouter.lzTxObj memory) {\\n        uint256 dstGasForCall = _getDstGasForCall(dstInfos);\\n\\n        return IStargateRouter.lzTxObj(dstGasForCall, dstInfos.airdropNativeAmount, abi.encodePacked(to));\\n    }\\n\\n    function _bridgeByStargate(\\n        uint256 refId,\\n        address payable to,\\n        uint256 msgValue,\\n        uint256 bridgeAmount,\\n        SrcInfos memory srcInfos,\\n        DstInfos calldata dstInfos,\\n        Dst1inch calldata dst1inch\\n    ) internal {\\n        require(sgPoolIds[sgChainIdLocal][srcInfos.bridgeToken] > 0, \\\"WooCrossChainRouterV3: !srcInfos.bridgeToken\\\");\\n        require(sgPoolIds[dstInfos.chainId][dstInfos.bridgeToken] > 0, \\\"WooCrossChainRouterV3: !dstInfos.bridgeToken\\\");\\n\\n        bytes memory payload = abi.encode(refId, to, dstInfos.toToken, dstInfos.minToAmount, dst1inch);\\n\\n        uint256 dstMinBridgeAmount = (bridgeAmount * (10000 - bridgeSlippage)) / 10000;\\n        bytes memory dstWooCrossChainRouter = abi.encodePacked(wooCrossRouters[dstInfos.chainId]);\\n\\n        IStargateRouter.lzTxObj memory obj = _getLzTxObj(to, dstInfos);\\n\\n        if (srcInfos.bridgeToken == weth) {\\n            IWETH(weth).withdraw(bridgeAmount);\\n            msgValue += bridgeAmount;\\n        } else {\\n            TransferHelper.safeApprove(srcInfos.bridgeToken, address(stargateRouter), bridgeAmount);\\n        }\\n\\n        stargateRouter.swap{value: msgValue}(\\n            dstInfos.chainId, // dst chain id\\n            sgPoolIds[sgChainIdLocal][srcInfos.bridgeToken], // bridge token's pool id on src chain\\n            sgPoolIds[dstInfos.chainId][dstInfos.bridgeToken], // bridge token's pool id on dst chain\\n            payable(_msgSender()), // rebate address\\n            bridgeAmount, // swap amount on src chain\\n            dstMinBridgeAmount, // min received amount on dst chain\\n            obj, // config: dstGasForCall, dstAirdropNativeAmount, dstReceiveAirdropNativeTokenAddr\\n            dstWooCrossChainRouter, // smart contract to call on dst chain\\n            payload // payload to piggyback\\n        );\\n    }\\n\\n    function _handleNativeReceived(\\n        uint256 refId,\\n        address to,\\n        address toToken,\\n        uint256 bridgedAmount,\\n        uint256 minToAmount,\\n        Dst1inch memory dst1inch\\n    ) internal {\\n        address msgSender = _msgSender();\\n\\n        if (toToken == ETH_PLACEHOLDER_ADDR) {\\n            // Directly transfer ETH\\n            TransferHelper.safeTransferETH(to, bridgedAmount);\\n            emit WooCrossSwapOnDstChain(\\n                refId,\\n                msgSender,\\n                to,\\n                weth,\\n                bridgedAmount,\\n                toToken,\\n                ETH_PLACEHOLDER_ADDR,\\n                minToAmount,\\n                bridgedAmount,\\n                dst1inch.swapRouter == address(0) ? 0 : 1,\\n                0\\n            );\\n            return;\\n        }\\n\\n        // Swap required!\\n        IWETH(weth).deposit{value: bridgedAmount}();\\n\\n        if (dst1inch.swapRouter != address(0)) {\\n            uint256 fee = (bridgedAmount * dstExternalFeeRate) / FEE_BASE;\\n            uint256 swapAmount = bridgedAmount - fee;\\n            TransferHelper.safeApprove(weth, address(wooRouter), swapAmount);\\n            try\\n                wooRouter.externalSwap(\\n                    dst1inch.swapRouter,\\n                    dst1inch.swapRouter,\\n                    weth,\\n                    toToken,\\n                    swapAmount,\\n                    minToAmount,\\n                    payable(to),\\n                    dst1inch.data\\n                )\\n            returns (uint256 realToAmount) {\\n                emit WooCrossSwapOnDstChain(\\n                    refId,\\n                    msgSender,\\n                    to,\\n                    weth,\\n                    swapAmount,\\n                    toToken,\\n                    toToken,\\n                    minToAmount,\\n                    realToAmount,\\n                    dst1inch.swapRouter == address(0) ? 0 : 1,\\n                    fee\\n                );\\n            } catch {\\n                TransferHelper.safeApprove(weth, address(wooRouter), 0);\\n                TransferHelper.safeTransfer(weth, to, bridgedAmount);\\n                emit WooCrossSwapOnDstChain(\\n                    refId,\\n                    msgSender,\\n                    to,\\n                    weth,\\n                    bridgedAmount,\\n                    toToken,\\n                    weth,\\n                    minToAmount,\\n                    bridgedAmount,\\n                    dst1inch.swapRouter == address(0) ? 0 : 1,\\n                    0\\n                );\\n            }\\n        } else {\\n            TransferHelper.safeApprove(weth, address(wooRouter), bridgedAmount);\\n            try\\n                wooRouter.swap(\\n                    weth,\\n                    toToken,\\n                    bridgedAmount,\\n                    minToAmount,\\n                    payable(to),\\n                    to\\n                )\\n            returns (uint256 realToAmount) {\\n                emit WooCrossSwapOnDstChain(\\n                    refId,\\n                    msgSender,\\n                    to,\\n                    weth,\\n                    bridgedAmount,\\n                    toToken,\\n                    toToken,\\n                    minToAmount,\\n                    realToAmount,\\n                    dst1inch.swapRouter == address(0) ? 0 : 1,\\n                    0\\n                );\\n            } catch {\\n                TransferHelper.safeApprove(weth, address(wooRouter), 0);\\n                TransferHelper.safeTransfer(weth, to, bridgedAmount);\\n                emit WooCrossSwapOnDstChain(\\n                    refId,\\n                    msgSender,\\n                    to,\\n                    weth,\\n                    bridgedAmount,\\n                    toToken,\\n                    weth,\\n                    minToAmount,\\n                    bridgedAmount,\\n                    dst1inch.swapRouter == address(0) ? 0 : 1,\\n                    0\\n                );\\n            }\\n        }\\n    }\\n\\n    function _handleERC20Received(\\n        uint256 refId,\\n        address to,\\n        address toToken,\\n        address bridgedToken,\\n        uint256 bridgedAmount,\\n        uint256 minToAmount,\\n        Dst1inch memory dst1inch\\n    ) internal {\\n        address msgSender = _msgSender();\\n\\n        if (toToken == bridgedToken) {\\n            TransferHelper.safeTransfer(bridgedToken, to, bridgedAmount);\\n            emit WooCrossSwapOnDstChain(\\n                refId,\\n                msgSender,\\n                to,\\n                bridgedToken,\\n                bridgedAmount,\\n                toToken,\\n                toToken,\\n                minToAmount,\\n                bridgedAmount,\\n                dst1inch.swapRouter == address(0) ? 0 : 1,\\n                0\\n            );\\n        } else {\\n            // Deduct the external swap fee\\n            uint256 fee = (bridgedAmount * dstExternalFeeRate) / FEE_BASE;\\n            bridgedAmount -= fee;\\n\\n            TransferHelper.safeApprove(bridgedToken, address(wooRouter), bridgedAmount);\\n            if (dst1inch.swapRouter != address(0)) {\\n                try\\n                    wooRouter.externalSwap(\\n                        dst1inch.swapRouter,\\n                        dst1inch.swapRouter,\\n                        bridgedToken,\\n                        toToken,\\n                        bridgedAmount,\\n                        minToAmount,\\n                        payable(to),\\n                        dst1inch.data\\n                    )\\n                returns (uint256 realToAmount) {\\n                    emit WooCrossSwapOnDstChain(\\n                        refId,\\n                        msgSender,\\n                        to,\\n                        bridgedToken,\\n                        bridgedAmount,\\n                        toToken,\\n                        toToken,\\n                        minToAmount,\\n                        realToAmount,\\n                        dst1inch.swapRouter == address(0) ? 0 : 1,\\n                        fee\\n                    );\\n                } catch {\\n                    bridgedAmount += fee;\\n                    TransferHelper.safeTransfer(bridgedToken, to, bridgedAmount);\\n                    emit WooCrossSwapOnDstChain(\\n                        refId,\\n                        msgSender,\\n                        to,\\n                        bridgedToken,\\n                        bridgedAmount,\\n                        toToken,\\n                        bridgedToken,\\n                        minToAmount,\\n                        bridgedAmount,\\n                        dst1inch.swapRouter == address(0) ? 0 : 1,\\n                        0\\n                    );\\n                }\\n            } else {\\n                try wooRouter.swap(bridgedToken, toToken, bridgedAmount, minToAmount, payable(to), to) returns (\\n                    uint256 realToAmount\\n                ) {\\n                    emit WooCrossSwapOnDstChain(\\n                        refId,\\n                        msgSender,\\n                        to,\\n                        bridgedToken,\\n                        bridgedAmount,\\n                        toToken,\\n                        toToken,\\n                        minToAmount,\\n                        realToAmount,\\n                        dst1inch.swapRouter == address(0) ? 0 : 1,\\n                        0\\n                    );\\n                } catch {\\n                    TransferHelper.safeTransfer(bridgedToken, to, bridgedAmount);\\n                    emit WooCrossSwapOnDstChain(\\n                        refId,\\n                        msgSender,\\n                        to,\\n                        bridgedToken,\\n                        bridgedAmount,\\n                        toToken,\\n                        bridgedToken,\\n                        minToAmount,\\n                        bridgedAmount,\\n                        dst1inch.swapRouter == address(0) ? 0 : 1,\\n                        0\\n                    );\\n                }\\n            }\\n        }\\n    }\\n\\n    function _generalBalanceOf(address token, address who) internal view returns (uint256) {\\n        return token == ETH_PLACEHOLDER_ADDR ? who.balance : IERC20(token).balanceOf(who);\\n    }\\n\\n    /* ----- Owner & Admin Functions ----- */\\n\\n    function setFeeAddr(address _feeAddr) external onlyOwner {\\n        feeAddr = _feeAddr;\\n    }\\n\\n    function setWooRouter(address _wooRouter) external onlyOwner {\\n        require(_wooRouter != address(0), \\\"WooCrossChainRouterV3: !_wooRouter\\\");\\n        wooRouter = IWooRouterV2(_wooRouter);\\n    }\\n\\n    function setStargateRouter(address _stargateRouter) external onlyOwner {\\n        require(_stargateRouter != address(0), \\\"WooCrossChainRouterV3: !_stargateRouter\\\");\\n        stargateRouter = IStargateRouter(_stargateRouter);\\n    }\\n\\n    function setBridgeSlippage(uint256 _bridgeSlippage) external onlyOwner {\\n        require(_bridgeSlippage <= 10000, \\\"WooCrossChainRouterV3: !_bridgeSlippage\\\");\\n        bridgeSlippage = _bridgeSlippage;\\n    }\\n\\n    function setDstGasForSwapCall(uint256 _dstGasForSwapCall) external onlyOwner {\\n        dstGasForSwapCall = _dstGasForSwapCall;\\n    }\\n\\n    function setDstGasForNoSwapCall(uint256 _dstGasForNoSwapCall) external onlyOwner {\\n        dstGasForNoSwapCall = _dstGasForNoSwapCall;\\n    }\\n\\n    function setSgChainIdLocal(uint16 _sgChainIdLocal) external onlyOwner {\\n        sgChainIdLocal = _sgChainIdLocal;\\n    }\\n\\n    function setWooCrossRouter(uint16 _chainId, address _crossRouter) external onlyOwner {\\n        require(_crossRouter != address(0), \\\"WooCrossChainRouterV3: !_crossRouter\\\");\\n        wooCrossRouters[_chainId] = _crossRouter;\\n    }\\n\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    function inCaseTokenGotStuck(address stuckToken) external onlyOwner {\\n        if (stuckToken == ETH_PLACEHOLDER_ADDR) {\\n            TransferHelper.safeTransferETH(msg.sender, address(this).balance);\\n        } else {\\n            uint256 amount = IERC20(stuckToken).balanceOf(address(this));\\n            TransferHelper.safeTransfer(stuckToken, msg.sender, amount);\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 20000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wooRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stargateRouter\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_sgChainIdLocal\",\"type\":\"uint16\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"refId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bridgedToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bridgedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"realToToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minToAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"realToAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"swapType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"WooCrossSwapOnDstChain\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"refId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bridgeToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minBridgeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"realBridgeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"swapType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"WooCrossSwapOnSrcChain\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ETH_PLACEHOLDER_ADDR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_BASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridgeSlippage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"claimFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"refId\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bridgeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBridgeAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct IWooCrossChainRouterV3.SrcInfos\",\"name\":\"srcInfos\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bridgeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minToAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"airdropNativeAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct IWooCrossChainRouterV3.DstInfos\",\"name\":\"dstInfos\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"swapRouter\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IWooCrossChainRouterV3.Src1inch\",\"name\":\"src1inch\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"swapRouter\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IWooCrossChainRouterV3.Dst1inch\",\"name\":\"dst1inch\",\"type\":\"tuple\"}],\"name\":\"crossSwap\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dstExternalFeeRate\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dstGasForNoSwapCall\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dstGasForSwapCall\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stuckToken\",\"type\":\"address\"}],\"name\":\"inCaseTokenGotStuck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"refId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bridgeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minToAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"airdropNativeAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct IWooCrossChainRouterV3.DstInfos\",\"name\":\"dstInfos\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"swapRouter\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IWooCrossChainRouterV3.Dst1inch\",\"name\":\"dst1inch\",\"type\":\"tuple\"}],\"name\":\"quoteLayerZeroFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bridgeSlippage\",\"type\":\"uint256\"}],\"name\":\"setBridgeSlippage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dstGasForNoSwapCall\",\"type\":\"uint256\"}],\"name\":\"setDstGasForNoSwapCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dstGasForSwapCall\",\"type\":\"uint256\"}],\"name\":\"setDstGasForSwapCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeAddr\",\"type\":\"address\"}],\"name\":\"setFeeAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_sgChainIdLocal\",\"type\":\"uint16\"}],\"name\":\"setSgChainIdLocal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stargateRouter\",\"type\":\"address\"}],\"name\":\"setStargateRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_crossRouter\",\"type\":\"address\"}],\"name\":\"setWooCrossRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wooRouter\",\"type\":\"address\"}],\"name\":\"setWooRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sgChainIdLocal\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"sgETHs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sgPoolIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bridgedToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountLD\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"sgReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"srcExternalFeeRate\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stargateRouter\",\"outputs\":[{\"internalType\":\"contract IStargateRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"wooCrossRouters\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wooRouter\",\"outputs\":[{\"internalType\":\"contract IWooRouterV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "WooCrossChainRouterV3", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "1", "Runs": "20000", "ConstructorArguments": "0000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf1270000000000000000000000000817eb46d60762442da3d931ff51a30334ca39b740000000000000000000000003b83d454a50abe06d94cb0d5d367825e190bda8f000000000000000000000000000000000000000000000000000000000000006d", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}