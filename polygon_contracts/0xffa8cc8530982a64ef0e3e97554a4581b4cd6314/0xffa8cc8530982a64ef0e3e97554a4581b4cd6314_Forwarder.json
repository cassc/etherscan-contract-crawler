{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/Forwarder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.13;\\n\\ncontract Forwarder {\\n    address public owner;\\n    mapping(address => bool) public authorizedCallers;\\n    mapping(address => bool) public authorizedTokens;\\n\\n    event Forward(address indexed caller, address indexed recipient, address indexed token, uint256 amount);\\n\\n    // Constructor\\n    constructor() {\\n        owner = msg.sender;\\n    }\\n\\n    function transferOwnership(address newOwner) public {\\n        require(msg.sender == owner, \\\"Only the owner can transfer ownership\\\");\\n        owner = newOwner;\\n    }\\n\\n    function authorizeCaller(address caller, bool authorize) public {\\n        require(msg.sender == owner, \\\"Only the owner can authorize callers\\\");\\n        authorizedCallers[caller] = authorize;\\n    }\\n\\n    function authorizeToken(address token, bool authorize) public {\\n        require(msg.sender == owner, \\\"Only the owner can authorize tokens\\\");\\n        authorizedTokens[token] = authorize;\\n    }\\n\\n    // payable function which forwards eth to address recipient\\n    function forward(address recipient) public payable {\\n        require(authorizedCallers[msg.sender], \\\"Only authorized callers can forward\\\");\\n        (bool success, ) = recipient.call{value: msg.value}(\\\"\\\");\\n        require(success, \\\"Forward failed\\\");\\n        emit Forward(msg.sender, recipient, address(0), msg.value);\\n    }\\n\\n    // function with forwards address erc20 to address recipient\\n    function forwardToken(address token, address recipient, uint256 amount) public {\\n        require(authorizedCallers[msg.sender], \\\"Only authorized callers can forward\\\");\\n        require(authorizedTokens[token], \\\"Only authorized tokens can be forwarded\\\");\\n        (bool success, ) = token.call(abi.encodeWithSignature(\\\"transferFrom(address,address,uint256)\\\", msg.sender, recipient, amount));\\n        require(success, \\\"Forward failed\\\");\\n        emit Forward(msg.sender, recipient, token, amount);\\n    }\\n\\n    // catch the erc20 token and send it to recipient (uses more gas)\\n    function bounceToken(address token, address recipient, uint256 amount) public {\\n        require(authorizedCallers[msg.sender], \\\"Only authorized callers can forward\\\");\\n        require(authorizedTokens[token], \\\"Only authorized tokens can be forwarded\\\");\\n        (bool success, ) = token.call(abi.encodeWithSignature(\\\"transferFrom(address,address,uint256)\\\", msg.sender, address(this), amount));\\n        require(success, \\\"Receive failed\\\");\\n        (success, ) = token.call(abi.encodeWithSignature(\\\"transfer(address,uint256)\\\", recipient, amount));\\n        require(success, \\\"Forward failed\\\");\\n        emit Forward(msg.sender, recipient, token, amount);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Forward\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"authorize\",\"type\":\"bool\"}],\"name\":\"authorizeCaller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"authorize\",\"type\":\"bool\"}],\"name\":\"authorizeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorizedCallers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorizedTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"bounceToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"forward\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"forwardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Forwarder", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}