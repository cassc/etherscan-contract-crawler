{"SourceCode": "// Sources flattened with hardhat v2.7.0 https://hardhat.org\r\n\r\n// File @chainlink/contracts/src/v0.7/vendor/SafeMathChainlink.sol@v0.2.2\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMathChainlink {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File @chainlink/contracts/src/v0.7/interfaces/LinkTokenInterface.sol@v0.2.2\r\n\r\npragma solidity ^0.7.0;\r\n\r\ninterface LinkTokenInterface {\r\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool success);\r\n\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    function decimals() external view returns (uint8 decimalPlaces);\r\n\r\n    function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\r\n\r\n    function increaseApproval(address spender, uint256 subtractedValue) external;\r\n\r\n    function name() external view returns (string memory tokenName);\r\n\r\n    function symbol() external view returns (string memory tokenSymbol);\r\n\r\n    function totalSupply() external view returns (uint256 totalTokensIssued);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool success);\r\n\r\n    function transferAndCall(\r\n        address to,\r\n        uint256 value,\r\n        bytes calldata data\r\n    ) external returns (bool success);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool success);\r\n}\r\n\r\n// File @chainlink/contracts/src/v0.7/VRFRequestIDBase.sol@v0.2.2\r\n\r\npragma solidity ^0.7.0;\r\n\r\ncontract VRFRequestIDBase {\r\n    /**\r\n     * @notice returns the seed which is actually input to the VRF coordinator\r\n     *\r\n     * @dev To prevent repetition of VRF output due to repetition of the\r\n     * @dev user-supplied seed, that seed is combined in a hash with the\r\n     * @dev user-specific nonce, and the address of the consuming contract. The\r\n     * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in\r\n     * @dev the final seed, but the nonce does protect against repetition in\r\n     * @dev requests which are included in a single block.\r\n     *\r\n     * @param _userSeed VRF seed input provided by user\r\n     * @param _requester Address of the requesting contract\r\n     * @param _nonce User-specific nonce at the time of the request\r\n     */\r\n    function makeVRFInputSeed(\r\n        bytes32 _keyHash,\r\n        uint256 _userSeed,\r\n        address _requester,\r\n        uint256 _nonce\r\n    ) internal pure returns (uint256) {\r\n        return uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the id for this request\r\n     * @param _keyHash The serviceAgreement ID to be used for this request\r\n     * @param _vRFInputSeed The seed to be passed directly to the VRF\r\n     * @return The id for this request\r\n     *\r\n     * @dev Note that _vRFInputSeed is not the seed passed by the consuming\r\n     * @dev contract, but the one generated by makeVRFInputSeed\r\n     */\r\n    function makeRequestId(bytes32 _keyHash, uint256 _vRFInputSeed) internal pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));\r\n    }\r\n}\r\n\r\n// File @chainlink/contracts/src/v0.7/VRFConsumerBase.sol@v0.2.2\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/** ****************************************************************************\r\n * @notice Interface for contracts using VRF randomness\r\n * *****************************************************************************\r\n * @dev PURPOSE\r\n *\r\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\r\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\r\n * @dev making his output up to suit himself. Reggie provides Vera a public key\r\n * @dev to which he knows the secret key. Each time Vera provides a seed to\r\n * @dev Reggie, he gives back a value which is computed completely\r\n * @dev deterministically from the seed and the secret key.\r\n *\r\n * @dev Reggie provides a proof by which Vera can verify that the output was\r\n * @dev correctly computed once Reggie tells it to her, but without that proof,\r\n * @dev the output is indistinguishable to her from a uniform random sample\r\n * @dev from the output space.\r\n *\r\n * @dev The purpose of this contract is to make it easy for unrelated contracts\r\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\r\n * @dev simple access to a verifiable source of randomness.\r\n * *****************************************************************************\r\n * @dev USAGE\r\n *\r\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\r\n * @dev initialize VRFConsumerBase's attributes in their constructor as\r\n * @dev shown:\r\n *\r\n * @dev   contract VRFConsumer {\r\n * @dev     constuctor(<other arguments>, address _vrfCoordinator, address _link)\r\n * @dev       VRFConsumerBase(_vrfCoordinator, _link) public {\r\n * @dev         <initialization with other arguments goes here>\r\n * @dev       }\r\n * @dev   }\r\n *\r\n * @dev The oracle will have given you an ID for the VRF keypair they have\r\n * @dev committed to (let's call it keyHash), and have told you the minimum LINK\r\n * @dev price for VRF service. Make sure your contract has sufficient LINK, and\r\n * @dev call requestRandomness(keyHash, fee, seed), where seed is the input you\r\n * @dev want to generate randomness from.\r\n *\r\n * @dev Once the VRFCoordinator has received and validated the oracle's response\r\n * @dev to your request, it will call your contract's fulfillRandomness method.\r\n *\r\n * @dev The randomness argument to fulfillRandomness is the actual random value\r\n * @dev generated from your seed.\r\n *\r\n * @dev The requestId argument is generated from the keyHash and the seed by\r\n * @dev makeRequestId(keyHash, seed). If your contract could have concurrent\r\n * @dev requests open, you can use the requestId to track which seed is\r\n * @dev associated with which randomness. See VRFRequestIDBase.sol for more\r\n * @dev details. (See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\r\n * @dev if your contract could have multiple requests in flight simultaneously.)\r\n *\r\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\r\n * @dev differ. (Which is critical to making unpredictable randomness! See the\r\n * @dev next section.)\r\n *\r\n * *****************************************************************************\r\n * @dev SECURITY CONSIDERATIONS\r\n *\r\n * @dev A method with the ability to call your fulfillRandomness method directly\r\n * @dev could spoof a VRF response with any random value, so it's critical that\r\n * @dev it cannot be directly called by anything other than this base contract\r\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\r\n *\r\n * @dev For your users to trust that your contract's random behavior is free\r\n * @dev from malicious interference, it's best if you can write it so that all\r\n * @dev behaviors implied by a VRF response are executed *during* your\r\n * @dev fulfillRandomness method. If your contract must store the response (or\r\n * @dev anything derived from it) and use it later, you must ensure that any\r\n * @dev user-significant behavior which depends on that stored value cannot be\r\n * @dev manipulated by a subsequent VRF request.\r\n *\r\n * @dev Similarly, both miners and the VRF oracle itself have some influence\r\n * @dev over the order in which VRF responses appear on the blockchain, so if\r\n * @dev your contract could have multiple VRF requests in flight simultaneously,\r\n * @dev you must ensure that the order in which the VRF responses arrive cannot\r\n * @dev be used to manipulate your contract's user-significant behavior.\r\n *\r\n * @dev Since the ultimate input to the VRF is mixed with the block hash of the\r\n * @dev block in which the request is made, user-provided seeds have no impact\r\n * @dev on its economic security properties. They are only included for API\r\n * @dev compatability with previous versions of this contract.\r\n *\r\n * @dev Since the block hash of the block which contains the requestRandomness\r\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\r\n * @dev miner could, in principle, fork the blockchain to evict the block\r\n * @dev containing the request, forcing the request to be included in a\r\n * @dev different block with a different hash, and therefore a different input\r\n * @dev to the VRF. However, such an attack would incur a substantial economic\r\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\r\n * @dev until it calls responds to a request.\r\n */\r\nabstract contract VRFConsumerBase is VRFRequestIDBase {\r\n    using SafeMathChainlink for uint256;\r\n\r\n    /**\r\n     * @notice fulfillRandomness handles the VRF response. Your contract must\r\n     * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\r\n     * @notice principles to keep in mind when implementing your fulfillRandomness\r\n     * @notice method.\r\n     *\r\n     * @dev VRFConsumerBase expects its subcontracts to have a method with this\r\n     * @dev signature, and will call it once it has verified the proof\r\n     * @dev associated with the randomness. (It is triggered via a call to\r\n     * @dev rawFulfillRandomness, below.)\r\n     *\r\n     * @param requestId The Id initially returned by requestRandomness\r\n     * @param randomness the VRF output\r\n     */\r\n    function fulfillRandomness(bytes32 requestId, uint256 randomness) internal virtual;\r\n\r\n    /**\r\n     * @dev In order to keep backwards compatibility we have kept the user\r\n     * seed field around. We remove the use of it because given that the blockhash\r\n     * enters later, it overrides whatever randomness the used seed provides.\r\n     * Given that it adds no security, and can easily lead to misunderstandings,\r\n     * we have removed it from usage and can now provide a simpler API.\r\n     */\r\n    uint256 private constant USER_SEED_PLACEHOLDER = 0;\r\n\r\n    /**\r\n     * @notice requestRandomness initiates a request for VRF output given _seed\r\n     *\r\n     * @dev The fulfillRandomness method receives the output, once it's provided\r\n     * @dev by the Oracle, and verified by the vrfCoordinator.\r\n     *\r\n     * @dev The _keyHash must already be registered with the VRFCoordinator, and\r\n     * @dev the _fee must exceed the fee specified during registration of the\r\n     * @dev _keyHash.\r\n     *\r\n     * @dev The _seed parameter is vestigial, and is kept only for API\r\n     * @dev compatibility with older versions. It can't *hurt* to mix in some of\r\n     * @dev your own randomness, here, but it's not necessary because the VRF\r\n     * @dev oracle will mix the hash of the block containing your request into the\r\n     * @dev VRF seed it ultimately uses.\r\n     *\r\n     * @param _keyHash ID of public key against which randomness is generated\r\n     * @param _fee The amount of LINK to send with the request\r\n     *\r\n     * @return requestId unique ID for this request\r\n     *\r\n     * @dev The returned requestId can be used to distinguish responses to\r\n     * @dev concurrent requests. It is passed as the first argument to\r\n     * @dev fulfillRandomness.\r\n     */\r\n    function requestRandomness(bytes32 _keyHash, uint256 _fee) internal returns (bytes32 requestId) {\r\n        LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, USER_SEED_PLACEHOLDER));\r\n        // This is the seed passed to VRFCoordinator. The oracle will mix this with\r\n        // the hash of the block containing this request to obtain the seed/input\r\n        // which is finally passed to the VRF cryptographic machinery.\r\n        uint256 vRFSeed = makeVRFInputSeed(_keyHash, USER_SEED_PLACEHOLDER, address(this), nonces[_keyHash]);\r\n        // nonces[_keyHash] must stay in sync with\r\n        // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above\r\n        // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).\r\n        // This provides protection against the user repeating their input seed,\r\n        // which would result in a predictable/duplicate output, if multiple such\r\n        // requests appeared in the same block.\r\n        nonces[_keyHash] = nonces[_keyHash].add(1);\r\n        return makeRequestId(_keyHash, vRFSeed);\r\n    }\r\n\r\n    LinkTokenInterface internal immutable LINK;\r\n    address private immutable vrfCoordinator;\r\n\r\n    // Nonces for each VRF key from which randomness has been requested.\r\n    //\r\n    // Must stay in sync with VRFCoordinator[_keyHash][this]\r\n    mapping(bytes32 => uint256) /* keyHash */ /* nonce */\r\n        private nonces;\r\n\r\n    /**\r\n     * @param _vrfCoordinator address of VRFCoordinator contract\r\n     * @param _link address of LINK token contract\r\n     *\r\n     * @dev https://docs.chain.link/docs/link-token-contracts\r\n     */\r\n    constructor(address _vrfCoordinator, address _link) {\r\n        vrfCoordinator = _vrfCoordinator;\r\n        LINK = LinkTokenInterface(_link);\r\n    }\r\n\r\n    // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\r\n    // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\r\n    // the origin of the call\r\n    function rawFulfillRandomness(bytes32 requestId, uint256 randomness) external {\r\n        require(msg.sender == vrfCoordinator, \"Only VRFCoordinator can fulfill\");\r\n        fulfillRandomness(requestId, randomness);\r\n    }\r\n}\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v3.4.2\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File @openzeppelin/contracts/access/Ownable.sol@v3.4.2\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File @openzeppelin/contracts/math/SafeMath.sol@v3.4.2\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v3.4.2\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File @openzeppelin/contracts/utils/Address.sol@v3.4.2\r\n\r\npragma solidity >=0.6.2 <0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) private pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File @openzeppelin/contracts/token/ERC20/SafeERC20.sol@v3.4.2\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(\r\n            value,\r\n            \"SafeERC20: decreased allowance below zero\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File @openzeppelin/contracts/utils/ReentrancyGuard.sol@v3.4.2\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File contracts/MetaDiceV1.sol\r\n\r\npragma solidity 0.7.6;\r\npragma abicoder v2;\r\n\r\n// MetaDiceV1 is the provider of random number games at MetaDice.org: Coin Flip, Dice Roll, Roulette, Crash and Slots.\r\ncontract MetaDiceV1 is VRFConsumerBase, Ownable, ReentrancyGuard {\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n\r\n    // Chainlink VRF related parameters\r\n    address public constant LINK_TOKEN = 0xb0897686c545045aFc77CF20eC7A532E3120E0F1;\r\n    address public constant VRF_COORDINATOR = 0x3d2341ADb2D31f1c5530cDC622016af293177AE0;\r\n    bytes32 public constant keyHash = 0xf86195cf7690c55907b2b611ebb7343a6f649bff128701cc542f0569e2c549da;\r\n    uint256 public constant chainlinkFee = 0.0001 ether;\r\n\r\n    // Modulo based games\r\n    // Masks are checked against a bit mask, allowing betting on specific outcomes.\r\n    // For example in a dice roll (modulo = 6),\r\n    // 000001 mask means betting on 1. 000001 converted from binary to decimal becomes 1.\r\n    // 101000 mask means betting on 4 and 6. 101000 converted from binary to decimal becomes 40.\r\n    // The specific value is dictated by the fact that 256-bit intermediate\r\n    // multiplication result allows implementing population count efficiently\r\n    // for numbers that are up to 42 bits, and 40 is the highest multiple of eight below 42.\r\n    uint256 constant MAX_MASK_MODULO = 40;\r\n\r\n    // These are constants that make O(1) population count in placeBet possible.\r\n    uint256 constant POPCNT_MULT = 0x0000000000002000000000100000000008000000000400000000020000000001;\r\n    uint256 constant POPCNT_MASK = 0x0001041041041041041041041041041041041041041041041041041041041041;\r\n    uint256 constant POPCNT_MODULO = 0x3F;\r\n\r\n    // Crash values\r\n    uint256 public constant MULTIPLIER_LIMIT = 2**64;\r\n\r\n    // Slots values\r\n    uint256[] private wheel1;\r\n    uint256[] private wheel2;\r\n    uint256[] private wheel3;\r\n\r\n    uint256 private immutable wheelsLength;\r\n\r\n    uint256 public immutable maxSlotsPayout;\r\n\r\n    mapping(uint256 => mapping(uint256 => mapping(uint256 => uint256))) public slotsPayouts; // Sorted by symbol id ascending\r\n\r\n    // House edge fee applied to each bet.\r\n    uint256 public houseEdgeBP = 100;\r\n\r\n    // Minimum and maximum bet amounts.\r\n    uint256 public minBetAmount = 0.5 ether;\r\n    uint256 public maxBetAmount = 5000 ether;\r\n\r\n    // Balance-to-maxProfit ratio. Used to dynamically adjusts maxProfit based on balance.\r\n    uint256 public balanceMaxProfitRatio = 32;\r\n\r\n    // Funds that are locked in potentially winning bets. Prevents contract from committing to new bets that it cannot pay out.\r\n    uint256 public lockedInBets;\r\n\r\n    // Possible bet status.\r\n    enum Status {\r\n        NONE,\r\n        CREATED,\r\n        REFUNDED,\r\n        SETTLED\r\n    }\r\n\r\n    // Info of each bet.\r\n    struct Bet {\r\n        // Wager amount in wei.\r\n        uint256 amount;\r\n        // Modulo of a game.\r\n        uint8 modulo;\r\n        // Number of winning outcomes for when modulo < MAX_MASK_MODULO.\r\n        // Used to compute winning payment (* modulo/rollUnder).\r\n        uint8 rollUnder;\r\n        // Bit mask representing the user bet.\r\n        uint256 mask;\r\n        // Block number of placeBet tx.\r\n        uint256 placeBlockNumber;\r\n        // Address of a gambler, used to pay out winning bets.\r\n        address payable gambler;\r\n        // Status of bet.\r\n        Status status;\r\n        // Outcome of bet.\r\n        uint256 outcome;\r\n        // Win amount.\r\n        uint256 winAmount;\r\n    }\r\n\r\n    // All bets\r\n    mapping(uint256 => Bet) public bets;\r\n    uint256 public betsLength = 0;\r\n\r\n    // Mapping requestId returned by Chainlink VRF to bet Id.\r\n    mapping(bytes32 => uint256) public betMap;\r\n\r\n    // Constructor. Using Chainlink VRFConsumerBase constructor.\r\n    event SlotPayoutLog(uint256 symbol1, uint256 symbol2, uint256 symbol3, uint256 payout);\r\n\r\n    constructor(\r\n        uint256[] memory _wheel1,\r\n        uint256[] memory _wheel2,\r\n        uint256[] memory _wheel3,\r\n        uint256[3][] memory _payoutLabels,\r\n        uint256[] memory _payoutAmounts\r\n    ) VRFConsumerBase(VRF_COORDINATOR, LINK_TOKEN) {\r\n        require(wheel1.length == wheel2.length && wheel2.length == wheel3.length, \"Wheels length mismatch\");\r\n        require(_payoutLabels.length > 0, \"No payouts\");\r\n        require(_payoutLabels.length == _payoutAmounts.length, \"Payouts length mismatch\");\r\n\r\n        wheel1 = _wheel1;\r\n        wheel2 = _wheel2;\r\n        wheel3 = _wheel3;\r\n\r\n        wheelsLength = _wheel1.length;\r\n\r\n        uint256 maxPayoutAmount = 0;\r\n        for (uint256 i = 0; i < _payoutLabels.length; i++) {\r\n            uint256[3] memory pl = _payoutLabels[i];\r\n            require(pl[0] <= pl[1] && pl[1] <= pl[2], \"Invalid payout labels order\");\r\n\r\n            slotsPayouts[pl[0]][pl[1]][pl[2]] = _payoutAmounts[i];\r\n            if (_payoutAmounts[i] > maxPayoutAmount) {\r\n                maxPayoutAmount = _payoutAmounts[i];\r\n            }\r\n\r\n            emit SlotPayoutLog(pl[0], pl[1], pl[2], _payoutAmounts[i]);\r\n        }\r\n        maxSlotsPayout = maxPayoutAmount;\r\n    }\r\n\r\n    // Receive payable function used to send funds to the contract.\r\n    receive() external payable {}\r\n\r\n    /**\r\n     ** OWNER\r\n     */\r\n\r\n    // Modifier to ensure that there are no pending bets.\r\n    modifier noPendingBets() {\r\n        require(lockedInBets == 0, \"There are pending bets\");\r\n        _;\r\n    }\r\n\r\n    // Set house edge.\r\n    event SetHouseEdgeBPLog(uint256 basisPoints);\r\n\r\n    function setHouseEdgeBP(uint256 _houseEdgeBP) external onlyOwner noPendingBets {\r\n        require(_houseEdgeBP < 500, \"Maximum 5%\");\r\n\r\n        houseEdgeBP = _houseEdgeBP;\r\n\r\n        emit SetHouseEdgeBPLog(_houseEdgeBP);\r\n    }\r\n\r\n    // Set balance-to-maxProfit ratio.\r\n    event SetBalanceMaxProfitRatioLog(uint256 ratio);\r\n\r\n    function setBalanceMaxProfitRatio(uint256 _balanceMaxProfitRatio) external onlyOwner {\r\n        require(_balanceMaxProfitRatio > 0, \"Zero value\");\r\n\r\n        balanceMaxProfitRatio = _balanceMaxProfitRatio;\r\n\r\n        emit SetBalanceMaxProfitRatioLog(_balanceMaxProfitRatio);\r\n    }\r\n\r\n    // Set minimum bet amount and maximum bet amount. minBetAmount should be large enough such that\r\n    // its house edge fee can cover the Chainlink oracle fee. Additionally, setting them to zero\r\n    // effectively disables betting.\r\n    event SetBetAmountsLog(uint256 minAmount, uint256 maxAmount);\r\n\r\n    function setBetAmounts(uint256 _minBetAmount, uint256 _maxBetAmount) external onlyOwner {\r\n        require(_minBetAmount <= _maxBetAmount, \"Invalid values\");\r\n\r\n        minBetAmount = _minBetAmount;\r\n        maxBetAmount = _maxBetAmount;\r\n\r\n        emit SetBetAmountsLog(_minBetAmount, _maxBetAmount);\r\n    }\r\n\r\n    // Owner can withdraw native funds not exceeding balance minus potential win amounts by open bets\r\n    // and any non-native tokens sent to the contract.\r\n    event WithdrawTokenLog(address tokenAddress, uint256 amount);\r\n\r\n    function withdrawToken(address payable _tokenAddress, uint256 _amount) external onlyOwner {\r\n        require(_amount > 0, \"Nothing to withdraw\");\r\n\r\n        if (_tokenAddress == address(0)) {\r\n            require(_amount <= balance() - lockedInBets, \"Withdrawal exceeds limit\");\r\n\r\n            msg.sender.transfer(_amount);\r\n        } else {\r\n            uint256 tokenBalance = IERC20(_tokenAddress).balanceOf(address(this));\r\n            require(_amount <= tokenBalance, \"Not enough to withdraw\");\r\n\r\n            IERC20(_tokenAddress).safeTransfer(msg.sender, _amount);\r\n        }\r\n\r\n        emit WithdrawTokenLog(_tokenAddress, _amount);\r\n    }\r\n\r\n    /**\r\n     ** HELPERS\r\n     */\r\n\r\n    // Returns game token balance.\r\n    function balance() public view returns (uint256) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    // Returns maximum profit allowed per bet. Prevents contract from accepting any bets with potential profit exceeding maxProfit.\r\n    function maxProfit() public view returns (uint256) {\r\n        return balance() / balanceMaxProfitRatio;\r\n    }\r\n\r\n    // Returns the house edge fee for a given amount.\r\n    function getHouseEdgeFee(uint256 _amount) private view returns (uint256) {\r\n        return _amount.mul(houseEdgeBP) / 10000;\r\n    }\r\n\r\n    // Returns the possible win amount for a given bet.\r\n    function getPossibleWinAmount(\r\n        uint8 _modulo,\r\n        uint256 _amount,\r\n        uint256 _betMask,\r\n        uint8 _rollUnder\r\n    ) private view returns (uint256) {\r\n        uint256 amountWithoutFee = _amount - getHouseEdgeFee(_amount);\r\n        if (_modulo <= MAX_MASK_MODULO) {\r\n            return amountWithoutFee.mul(_modulo) / _rollUnder;\r\n        } else if (_modulo == 100) {\r\n            return amountWithoutFee.mul(100) / _betMask;\r\n        } else if (_modulo == 101) {\r\n            return amountWithoutFee.mul(_betMask) / 100;\r\n        } else if (_modulo == 102) {\r\n            return amountWithoutFee.mul(maxSlotsPayout);\r\n        } else {\r\n            // Impossible to reach\r\n            revert(\"Invalid modulo\");\r\n        }\r\n    }\r\n\r\n    // Get slots' wheels.\r\n    function getWheels()\r\n        external\r\n        view\r\n        returns (\r\n            uint256[] memory,\r\n            uint256[] memory,\r\n            uint256[] memory\r\n        )\r\n    {\r\n        uint256[] memory wheel1Info = new uint256[](wheelsLength);\r\n        uint256[] memory wheel2Info = new uint256[](wheelsLength);\r\n        uint256[] memory wheel3Info = new uint256[](wheelsLength);\r\n        for (uint256 i = 0; i < wheelsLength; i++) {\r\n            wheel1Info[i] = wheel1[i];\r\n            wheel2Info[i] = wheel2[i];\r\n            wheel3Info[i] = wheel3[i];\r\n        }\r\n\r\n        return (wheel1Info, wheel2Info, wheel3Info);\r\n    }\r\n\r\n    // Get more randomness from a number.\r\n    function extraRandomness(uint256 _number) private pure returns (uint256) {\r\n        return uint256(keccak256(abi.encode(_number)));\r\n    }\r\n\r\n    // Get slots' payout.\r\n    function getSlotsPayout(\r\n        uint256 _symbol1,\r\n        uint256 _symbol2,\r\n        uint256 _symbol3\r\n    ) private view returns (uint256) {\r\n        if (_symbol1 <= _symbol2) {\r\n            if (_symbol2 <= _symbol3) {\r\n                return slotsPayouts[_symbol1][_symbol2][_symbol3];\r\n            } else {\r\n                if (_symbol1 <= _symbol3) {\r\n                    return slotsPayouts[_symbol1][_symbol3][_symbol2];\r\n                } else {\r\n                    return slotsPayouts[_symbol3][_symbol1][_symbol2];\r\n                }\r\n            }\r\n        } else {\r\n            if (_symbol2 <= _symbol3) {\r\n                if (_symbol1 <= _symbol3) {\r\n                    return slotsPayouts[_symbol2][_symbol1][_symbol3];\r\n                } else {\r\n                    return slotsPayouts[_symbol2][_symbol3][_symbol1];\r\n                }\r\n            } else {\r\n                return slotsPayouts[_symbol3][_symbol2][_symbol1];\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     ** USERS\r\n     */\r\n\r\n    // Place bet\r\n    event BetPlaced(\r\n        uint256 indexed betId,\r\n        address gambler,\r\n        uint256 amount,\r\n        uint8 modulo,\r\n        uint8 rollUnder,\r\n        uint256 mask\r\n    );\r\n\r\n    function placeBet(uint256 _betMask, uint8 _modulo) external payable nonReentrant {\r\n        require(msg.sender == tx.origin, \"Contracts are disallowed\");\r\n\r\n        require(LINK.balanceOf(address(this)) >= chainlinkFee, \"Insufficient LINK token\");\r\n        require(_modulo > 1, \"Invalid modulo\");\r\n\r\n        uint256 amount = msg.value;\r\n        require(amount >= minBetAmount && amount <= maxBetAmount, \"Bet amount not within range\");\r\n\r\n        uint8 rollUnder;\r\n        if (_modulo <= MAX_MASK_MODULO) {\r\n            // Modulo games (ex: 2 for coin flip, 6 for dice roll, 37 for roulette)\r\n            // Specify the exact bet outcomes via bit mask. rollUnder is the number\r\n            // of 1 bits in this mask (bit count). This magic looking formula is an\r\n            // efficient way to compute bit count on EVM for numbers below 2**40.\r\n            require(_betMask > 0 && _betMask < 2**_modulo - 1, \"Mask not within range\");\r\n\r\n            rollUnder = uint8(((_betMask * POPCNT_MULT) & POPCNT_MASK) % POPCNT_MODULO);\r\n        } else if (_modulo == 100) {\r\n            // Custom percentage game\r\n            // Specify the right edge of half-open interval out of 100 - [0,_betMask[.\r\n            require(_betMask > 0 && _betMask < 100, \"Mask larger than modulo\");\r\n        } else if (_modulo == 101) {\r\n            // Crash\r\n            require(_betMask > 100 && _betMask <= MULTIPLIER_LIMIT * 100, \"Target not within range\");\r\n        } else if (_modulo == 102) {\r\n            // Slots\r\n            require(_betMask >= 1 && _betMask <= 7, \"Mask not within range\");\r\n        } else {\r\n            revert(\"Invalid modulo\");\r\n        }\r\n\r\n        // Possible win amount.\r\n        uint256 possibleWinAmount = getPossibleWinAmount(_modulo, amount, _betMask, rollUnder);\r\n\r\n        // Enforce max profit limit.\r\n        require(possibleWinAmount <= amount.add(maxProfit()), \"maxProfit violation\");\r\n\r\n        // Check whether contract has enough funds to accept this bet and update the locked funds.\r\n        uint256 newLockedInBets = lockedInBets.add(possibleWinAmount);\r\n        require(newLockedInBets <= balance(), \"Insufficient funds\");\r\n\r\n        lockedInBets = newLockedInBets;\r\n\r\n        // Request random number from Chainlink VRF. Store requestId for validation checks later.\r\n        bytes32 requestId = requestRandomness(keyHash, chainlinkFee);\r\n\r\n        // Store bet in all bets.\r\n        uint256 betId = betsLength;\r\n        bets[betId] = Bet({\r\n            amount: amount,\r\n            modulo: _modulo,\r\n            rollUnder: rollUnder,\r\n            mask: _betMask,\r\n            placeBlockNumber: block.number,\r\n            gambler: msg.sender,\r\n            status: Status.CREATED,\r\n            outcome: 0,\r\n            winAmount: 0\r\n        });\r\n\r\n        betsLength = betsLength + 1;\r\n\r\n        // Map requestId to bet ID.\r\n        betMap[requestId] = betId;\r\n\r\n        // Record bet in event logs.\r\n        emit BetPlaced(betId, msg.sender, amount, _modulo, rollUnder, _betMask);\r\n    }\r\n\r\n    // Callback function called by Chainlink VRF coordinator.\r\n    function fulfillRandomness(bytes32 requestId, uint256 randomness) internal override {\r\n        settleBet(requestId, randomness);\r\n    }\r\n\r\n    // Settle bet. Function can only be called by fulfillRandomness function, which in turn can only be called by Chainlink VRF.\r\n    event BetSettled(uint256 indexed betId, uint256 outcome, uint256 winAmount);\r\n\r\n    function settleBet(bytes32 _requestId, uint256 _randomNumber) private nonReentrant {\r\n        uint256 betId = betMap[_requestId];\r\n        Bet storage bet = bets[betId];\r\n\r\n        // Validation checks.\r\n        require(bet.status == Status.CREATED, \"Bet is already settled\");\r\n\r\n        // Fetch bet parameters into local variables (to save gas).\r\n        uint8 modulo = bet.modulo;\r\n        uint256 amount = bet.amount;\r\n        uint256 mask = bet.mask;\r\n\r\n        uint256 possibleWinAmount = getPossibleWinAmount(modulo, amount, mask, bet.rollUnder);\r\n\r\n        uint256 outcome;\r\n        uint256 winAmount = 0;\r\n        if (modulo <= MAX_MASK_MODULO) {\r\n            // Do a roll by taking a modulo of random number.\r\n            outcome = _randomNumber % modulo;\r\n\r\n            // Determine the winAmount by checking the outcome against a bit mask.\r\n            if ((2**outcome) & mask != 0) {\r\n                winAmount = possibleWinAmount;\r\n            }\r\n        } else if (modulo == 100) {\r\n            // Do a roll by taking a modulo of random number.\r\n            outcome = _randomNumber % 100;\r\n\r\n            // Determine the winAmount by checking inclusion into half-open interval.\r\n            if (outcome < mask) {\r\n                winAmount = possibleWinAmount;\r\n            }\r\n        } else if (modulo == 101) {\r\n            // Choose the crash multiplier (scaled by 100)\r\n            outcome = (MULTIPLIER_LIMIT * 100) / (MULTIPLIER_LIMIT - (_randomNumber % MULTIPLIER_LIMIT));\r\n\r\n            // Determine the winAmount.\r\n            if (mask <= outcome) {\r\n                winAmount = possibleWinAmount;\r\n            }\r\n        } else if (modulo == 102) {\r\n            // Generate a random position for each wheel\r\n            uint256 result1 = _randomNumber % wheelsLength;\r\n\r\n            _randomNumber = extraRandomness(_randomNumber);\r\n            uint256 result2 = _randomNumber % wheelsLength;\r\n\r\n            _randomNumber = extraRandomness(_randomNumber);\r\n            uint256 result3 = _randomNumber % wheelsLength;\r\n\r\n            outcome = (result3 << 16) | (result2 << 8) | (result1 << 0);\r\n\r\n            // Determine the winAmount.\r\n            uint256 totalPayout = 0;\r\n            uint256 winningBets = 0;\r\n            for (uint256 i = 0; i < 3; i++) {\r\n                if ((2**i) & mask != 0) {\r\n                    totalPayout =\r\n                        totalPayout +\r\n                        getSlotsPayout(\r\n                            wheel1[(result1 + i) % wheelsLength],\r\n                            wheel2[(result2 + i) % wheelsLength],\r\n                            wheel3[(result3 + i) % wheelsLength]\r\n                        );\r\n                    winningBets = winningBets + 1;\r\n                }\r\n            }\r\n\r\n            if (winningBets > 0) {\r\n                winAmount = (amount - getHouseEdgeFee(amount)).mul(totalPayout) / winningBets;\r\n            }\r\n        } else {\r\n            // Impossible to reach\r\n            revert(\"Invalid modulo\");\r\n        }\r\n\r\n        // Unlock possibleWinAmount from lockedInBets, regardless of the outcome.\r\n        lockedInBets = lockedInBets - possibleWinAmount;\r\n\r\n        // Update bet records\r\n        bet.status = Status.SETTLED;\r\n        bet.winAmount = winAmount;\r\n        bet.outcome = outcome;\r\n\r\n        // Send prize to winner and update house profit.\r\n        if (winAmount > 0) {\r\n            bet.gambler.transfer(winAmount);\r\n        }\r\n\r\n        // Record bet settlement in event log.\r\n        emit BetSettled(betId, outcome, winAmount);\r\n    }\r\n\r\n    // Return the bet in the very unlikely scenario it was not settled by Chainlink VRF.\r\n    // In case you find yourself in a situation like this, just contact Casino support.\r\n    // However, nothing prevents you from calling this method yourself.\r\n    event BetRefunded(uint256 indexed betId);\r\n\r\n    function refundBet(uint256 _betId) external nonReentrant {\r\n        Bet storage bet = bets[_betId];\r\n\r\n        // Validation checks\r\n        require(bet.status == Status.CREATED, \"Bet is already settled\");\r\n        require(block.number > bet.placeBlockNumber + 21600, \"Wait at least 6 hours\");\r\n\r\n        uint256 amount = bet.amount;\r\n\r\n        // Unlock possibleWinAmount from lockedInBets, regardless of the outcome.\r\n        uint256 possibleWinAmount = getPossibleWinAmount(bet.modulo, amount, bet.mask, bet.rollUnder);\r\n        lockedInBets = lockedInBets - possibleWinAmount;\r\n\r\n        // Update bet records\r\n        bet.status = Status.REFUNDED;\r\n\r\n        // Send the refund.\r\n        bet.gambler.transfer(amount);\r\n\r\n        // Record refund in event logs\r\n        emit BetRefunded(_betId);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_wheel1\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_wheel2\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_wheel3\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[3][]\",\"name\":\"_payoutLabels\",\"type\":\"uint256[3][]\"},{\"internalType\":\"uint256[]\",\"name\":\"_payoutAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"gambler\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"modulo\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"rollUnder\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mask\",\"type\":\"uint256\"}],\"name\":\"BetPlaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"}],\"name\":\"BetRefunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outcome\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"winAmount\",\"type\":\"uint256\"}],\"name\":\"BetSettled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"name\":\"SetBalanceMaxProfitRatioLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"}],\"name\":\"SetBetAmountsLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"basisPoints\",\"type\":\"uint256\"}],\"name\":\"SetHouseEdgeBPLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"symbol1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"symbol2\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"symbol3\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"}],\"name\":\"SlotPayoutLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawTokenLog\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LINK_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MULTIPLIER_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VRF_COORDINATOR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceMaxProfitRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"betMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"modulo\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"rollUnder\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"mask\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"placeBlockNumber\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"gambler\",\"type\":\"address\"},{\"internalType\":\"enum MetaDiceV1.Status\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"outcome\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"winAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"betsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainlinkFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWheels\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"houseEdgeBP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keyHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockedInBets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBetAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxProfit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSlotsPayout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBetAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_betMask\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_modulo\",\"type\":\"uint8\"}],\"name\":\"placeBet\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"randomness\",\"type\":\"uint256\"}],\"name\":\"rawFulfillRandomness\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_betId\",\"type\":\"uint256\"}],\"name\":\"refundBet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_balanceMaxProfitRatio\",\"type\":\"uint256\"}],\"name\":\"setBalanceMaxProfitRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minBetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxBetAmount\",\"type\":\"uint256\"}],\"name\":\"setBetAmounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_houseEdgeBP\",\"type\":\"uint256\"}],\"name\":\"setHouseEdgeBP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"slotsPayouts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "MetaDiceV1", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://66aecf79add8f6993b21481bc9f17eeea65964dc215fe917901541e9c681ac99"}