{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/smart-account/deployer/Create3.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity 0.8.17;\\n\\n/**\\n  @title A library for deploying contracts EIP-3171 style.\\n  @author Agustin Aguilar <aa@horizon.io>\\n*/\\nlibrary Create3 {\\n    error ErrorCreatingProxy();\\n    error ErrorCreatingContract();\\n    error TargetAlreadyExists();\\n\\n    /**\\n    @notice The bytecode for a contract that proxies the creation of another contract\\n    @dev If this code is deployed using CREATE2 it can be used to decouple `creationCode` from the child contract address\\n\\n  0x67363d3d37363d34f03d5260086018f3:\\n      0x00  0x67  0x67XXXXXXXXXXXXXXXX  PUSH8 bytecode  0x363d3d37363d34f0\\n      0x01  0x3d  0x3d                  RETURNDATASIZE  0 0x363d3d37363d34f0\\n      0x02  0x52  0x52                  MSTORE\\n      0x03  0x60  0x6008                PUSH1 08        8\\n      0x04  0x60  0x6018                PUSH1 18        24 8\\n      0x05  0xf3  0xf3                  RETURN\\n\\n  0x363d3d37363d34f0:\\n      0x00  0x36  0x36                  CALLDATASIZE    cds\\n      0x01  0x3d  0x3d                  RETURNDATASIZE  0 cds\\n      0x02  0x3d  0x3d                  RETURNDATASIZE  0 0 cds\\n      0x03  0x37  0x37                  CALLDATACOPY\\n      0x04  0x36  0x36                  CALLDATASIZE    cds\\n      0x05  0x3d  0x3d                  RETURNDATASIZE  0 cds\\n      0x06  0x34  0x34                  CALLVALUE       val 0 cds\\n      0x07  0xf0  0xf0                  CREATE          addr\\n  */\\n\\n    bytes internal constant PROXY_CHILD_BYTECODE =\\n        hex\\\"67_36_3d_3d_37_36_3d_34_f0_3d_52_60_08_60_18_f3\\\";\\n\\n    //                        KECCAK256_PROXY_CHILD_BYTECODE = keccak256(PROXY_CHILD_BYTECODE);\\n    bytes32 internal constant KECCAK256_PROXY_CHILD_BYTECODE =\\n        0x21c35dbe1b344a2488cf3321d6ce542f8e9f305544ff09e4993a62319a497c1f;\\n\\n    /**\\n    @notice Returns the size of the code on a given address\\n    @param _addr Address that may or may not contain code\\n    @return size of the code on the given `_addr`\\n  */\\n    function codeSize(address _addr) internal view returns (uint256 size) {\\n        assembly {\\n            size := extcodesize(_addr)\\n        }\\n    }\\n\\n    /**\\n    @notice Creates a new contract with given `_creationCode` and `_salt`\\n    @param _salt Salt of the contract creation, resulting address will be derivated from this value only\\n    @param _creationCode Creation code (constructor) of the contract to be deployed, this value doesn't affect the resulting address\\n    @return addr of the deployed contract, reverts on error\\n  */\\n    function create3(\\n        bytes32 _salt,\\n        bytes memory _creationCode\\n    ) internal returns (address addr) {\\n        return create3(_salt, _creationCode, 0);\\n    }\\n\\n    /**\\n    @notice Creates a new contract with given `_creationCode` and `_salt`\\n    @param _salt Salt of the contract creation, resulting address will be derivated from this value only\\n    @param _creationCode Creation code (constructor) of the contract to be deployed, this value doesn't affect the resulting address\\n    @param _value In WEI of ETH to be forwarded to child contract\\n    @return addr of the deployed contract, reverts on error\\n  */\\n    function create3(\\n        bytes32 _salt,\\n        bytes memory _creationCode,\\n        uint256 _value\\n    ) internal returns (address addr) {\\n        // Creation code\\n        bytes memory creationCode = PROXY_CHILD_BYTECODE;\\n\\n        // Get target final address\\n        addr = addressOf(_salt);\\n        if (codeSize(addr) != 0) revert TargetAlreadyExists();\\n\\n        // Create CREATE2 proxy\\n        address proxy;\\n        assembly {\\n            proxy := create2(\\n                0,\\n                add(creationCode, 32),\\n                mload(creationCode),\\n                _salt\\n            )\\n        }\\n        if (proxy == address(0)) revert ErrorCreatingProxy();\\n\\n        // Call proxy with final init code\\n        (bool success, ) = proxy.call{value: _value}(_creationCode);\\n        if (!success || codeSize(addr) == 0) revert ErrorCreatingContract();\\n    }\\n\\n    function addressOfProxy(bytes32 _salt) internal view returns (address) {\\n        return\\n            address(\\n                uint160(\\n                    uint256(\\n                        keccak256(\\n                            abi.encodePacked(\\n                                hex\\\"ff\\\",\\n                                address(this),\\n                                _salt,\\n                                KECCAK256_PROXY_CHILD_BYTECODE\\n                            )\\n                        )\\n                    )\\n                )\\n            );\\n    }\\n\\n    /**\\n    @notice Computes the resulting address of a contract deployed using address(this) and the given `_salt`\\n    @param _salt Salt of the contract creation, resulting address will be derivated from this value only\\n    @return addr of the deployed contract, reverts on error\\n\\n    @dev The address creation formula is: keccak256(rlp([keccak256(0xff ++ address(this) ++ _salt ++ keccak256(childBytecode))[12:], 0x01]))\\n  */\\n    function addressOf(bytes32 _salt) internal view returns (address) {\\n        address proxy = addressOfProxy(_salt);\\n        return\\n            address(\\n                uint160(\\n                    uint256(\\n                        keccak256(abi.encodePacked(hex\\\"d6_94\\\", proxy, hex\\\"01\\\"))\\n                    )\\n                )\\n            );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/smart-account/deployer/Deployer.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity 0.8.17;\\n\\nimport \\\"./Create3.sol\\\";\\n\\ncontract Deployer {\\n    event ContractDeployed(address indexed contractAddress);\\n\\n    function deploy(bytes32 _salt, bytes calldata _creationCode) external {\\n        address deployedContract = Create3.create3(_salt, _creationCode);\\n        emit ContractDeployed(deployedContract);\\n    }\\n\\n    function addressOf(bytes32 _salt) external view returns (address) {\\n        return Create3.addressOf(_salt);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 800\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"ErrorCreatingContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrorCreatingProxy\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TargetAlreadyExists\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"ContractDeployed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_salt\",\"type\":\"bytes32\"}],\"name\":\"addressOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_salt\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_creationCode\",\"type\":\"bytes\"}],\"name\":\"deploy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Deployer", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "800", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}