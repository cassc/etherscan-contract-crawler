{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/IclickSales.sol\": {\r\n      \"content\": \"/**\\n * SPDX-License-Identifier: Unlicensed\\n **/\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\n\\ncontract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    modifier isHuman() {\\n        require(tx.origin == msg.sender, \\\"sorry humans only\\\");\\n        _;\\n    }\\n}\\n\\n\\ncontract IclickSales is ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n    IERC20 internal immutable _usdToken;\\n    // IERC20 internal immutable _usdToken2;\\n    IERC20 private _wbnb;\\n    IERC20 private token;\\n    IUniswapV2Router01 public immutable uniswapV2Router;\\n\\n    struct User {\\n        uint _id;\\n        address _sponsor;\\n        uint _spent; // Total spent in USDT\\n        uint _total; // Total Token Purchased\\n        uint _commBNB; // Total commission earned\\n        uint _commUSDT; // Total commission earned\\n    }\\n\\n    struct Systemlog {\\n        uint lastUserid;\\n        uint totalUSDTVolume; // total USDT spent [includes bnb spents valued in usdt]\\n        uint totalUSDTreceived; // total usdt received\\n        uint totalBNBreceived; // total bnb received\\n        uint totalTokenSold; // total token sold\\n        uint totalCommBNB; // total Commissions earned bnb\\n        uint totalCommUSDT; // total Commissions earned usdt\\n    }\\n\\n    // Program Settings\\n    uint internal constant DECIMAL = 1e18;\\n    uint internal constant DIVIDER = 10000;\\n    uint[] internal BONUS_ROUNDS = [1500, 1000, 500, 200];\\n    uint[] public ROUND_DATES = [7 days, 15 days, 22 days, 31 days];\\n    uint public MINIMUM_USDT_PUR = 10 ether; // 10$ minimum purchase\\n\\n    uint internal immutable LISTINGPRICE = 0.00000001510 ether; // starting price\\n\\n    uint internal constant COMMISSION = 500; // 5% affiliate commissions\\n\\n    uint internal immutable DATESTARTED = 1696258800;\\n    // Global Records\\n    bool public isSalesOpen = false;\\n    // Operations\\n    address private constant systemOps = 0x1d8132d7fA0F52d2E1c2eE215162f456ba33eb75;\\n\\n    address internal immutable dev;\\n\\n    mapping(address => User) public users;\\n    Systemlog public systemlog;\\n\\n    constructor() {\\n        dev = msg.sender;\\n        _usdToken = IERC20(address(0x55d398326f99059fF775485246999027B3197955)); // testnet 0xC6Efc0f7AF6e0B3e413d8FdD339FAf4d9a6e2D8F 0xaB1a4d4f1D656d2450692D237fdD6C7f9146e814 // mainnet 0x55d398326f99059fF775485246999027B3197955\\n        // _usdToken2 = IERC20(address(0x337610d27c682E347C9cD60BD4b3b107C9d34dDd)); // testnet 0x337610d27c682E347C9cD60BD4b3b107C9d34dDd 0xaB1a4d4f1D656d2450692D237fdD6C7f9146e814 // mainnet 0x55d398326f99059fF775485246999027B3197955\\n        token = IERC20(address(0xc8C06a58E4ad7c01b9bb5Af6C76a7a1CfEBd0319)); // testnet 0x80247A78b06bac28B2086D0eb0012feCD0442B66 // mainnet 0xc8C06a58E4ad7c01b9bb5Af6C76a7a1CfEBd0319\\n        _wbnb = IERC20(address(0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c)); // testnet 0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd // mainnet 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c\\n        IUniswapV2Router01 _uniswapV2Router = IUniswapV2Router01(0x10ED43C718714eb63d5aA57B78B54704E256024E); // testnet 0xD99D1c33F9fC3444f8101754aBC46c52416550D1 // mainnet 0x10ED43C718714eb63d5aA57B78B54704E256024E\\n        uniswapV2Router = _uniswapV2Router;\\n    }\\n\\n    function registerMember(address _sponsor, address _user) private {\\n        systemlog.lastUserid++;\\n        users[_user]._id = systemlog.lastUserid;\\n        if(_sponsor == _user || _sponsor == address(0) || users[_sponsor]._id < 0) _sponsor = dev;\\n        users[_user]._sponsor = _sponsor;\\n    }\\n\\n    function getTokenPlusBonus(uint _amount) private view returns(uint){\\n        uint bonus = BONUS_ROUNDS[0];\\n        if(block.timestamp >  DATESTARTED + ROUND_DATES[0]\\n            && block.timestamp <=  DATESTARTED + ROUND_DATES[1]){\\n            bonus = BONUS_ROUNDS[1];\\n        }\\n        else if(block.timestamp >  DATESTARTED + ROUND_DATES[1]\\n                && block.timestamp <= DATESTARTED + ROUND_DATES[2]){\\n            bonus = BONUS_ROUNDS[2];\\n        }\\n        else if(block.timestamp >  DATESTARTED + ROUND_DATES[2]\\n                && block.timestamp <= DATESTARTED + ROUND_DATES[3]){\\n            bonus = BONUS_ROUNDS[3];\\n        }\\n        else if(block.timestamp >  DATESTARTED + ROUND_DATES[3]){\\n            bonus = 0;\\n        }\\n\\n        if(bonus > 0) _amount += _amount * bonus / DIVIDER;\\n        return _amount;\\n    }\\n\\n    function dispatchOrder(address _user, uint _amount, uint _usdtVal, bool _usdt) private{\\n        require(isSalesOpen, 'SalesClosed!');\\n        address _sponsor = users[_user]._sponsor;\\n        uint comm = COMMISSION * _amount / DIVIDER;\\n        systemlog.totalUSDTVolume += _usdtVal;\\n        // record the purchase\\n        uint getTokenUSDTValue = _getTokenRate(1 ether, address(token), address(_usdToken));\\n        uint tokenAmount = _usdtVal / getTokenUSDTValue;\\n\\n        if(_usdt){\\n            tokenAmount = tokenAmount * DECIMAL;\\n            // send tokens owner and to aff\\n            systemlog.totalUSDTreceived += _amount;\\n            systemlog.totalCommUSDT += comm;\\n            users[_sponsor]._commUSDT += comm;\\n            // send remaining to the ops\\n            _usdToken.safeTransfer(systemOps, (_amount - comm));\\n            // send affiliate commissions\\n            _usdToken.safeTransfer(_sponsor, comm);\\n        }\\n        else{\\n            systemlog.totalBNBreceived += _amount;\\n            systemlog.totalCommBNB += comm;\\n            users[_sponsor]._commBNB += comm;\\n            // send remaining to the ops\\n            payable(systemOps).transfer(_amount - comm);\\n            // send affiliate commissions\\n            payable(_sponsor).transfer(comm);\\n        }\\n        // credit bonus\\n        uint totalTokens = getTokenPlusBonus(tokenAmount);\\n        users[_user]._spent += _usdtVal;\\n        users[_user]._total += totalTokens;\\n        systemlog.totalTokenSold += totalTokens;\\n    }\\n\\n    function buyTokenBNB(address _sponsor) payable public {\\n        require(!address(msg.sender).isContract(), \\\"NotAllowed\\\");\\n        address _user = msg.sender;\\n        if(users[_user]._id < 1) registerMember(_sponsor, _user);\\n        // minimum purchase $10\\n        uint amount = msg.value;\\n        uint oneBNBtoUSDT = _getTokenRate(1 ether, address(_wbnb), address(_usdToken));\\n        uint _usdtvalue = amount * oneBNBtoUSDT;\\n        require(_usdtvalue >= MINIMUM_USDT_PUR, 'req10USDT');\\n        dispatchOrder(_user, amount, _usdtvalue, false);\\n    }\\n\\n    function buyTokenUSDT(address _sponsor, uint _amount) public{\\n        require(!address(msg.sender).isContract(), \\\"NotAllowed\\\");\\n        address _user = msg.sender;\\n        if(users[_user]._id < 1) registerMember(_sponsor, _user);\\n        require(_amount >= MINIMUM_USDT_PUR, 'req10USDT');\\n        require(_usdToken.transferFrom(_user, address(this), _amount));\\n        dispatchOrder(_user, _amount, _amount, true);\\n    }\\n\\n    function getTokenAmount(\\n        address _tokenA,\\n        address _tokenB,\\n        uint _amountIn\\n    ) private view returns (uint[] memory amounts) {\\n        address[] memory path = new address[](2);\\n        path[0] = _tokenA;\\n        path[1] = _tokenB;\\n        amounts = uniswapV2Router.getAmountsOut(_amountIn, path);\\n        return amounts;\\n    }\\n\\n    function _getTokenRate(\\n        uint256 _amount,\\n        address _base,\\n        address _secondary\\n    ) private view returns (uint256 _tokens) {\\n        uint[] memory _estimates = getTokenAmount(\\n            address(_base),\\n            address(_secondary),\\n            _amount\\n        );\\n        return _estimates[1];\\n    }\\n\\n    function enDisSales() public {\\n        require(msg.sender == systemOps, 'NotAllowed!');\\n        isSalesOpen = !isSalesOpen;\\n    }\\n\\n    function getIclickInuRate() public view returns(uint _value){\\n        _value = _getTokenRate(1 ether, address(token), address(_usdToken)); \\n        // fecthes from price panackageswap\\n    }\\n\\n    function getBNBRate() public view returns(uint _value){\\n        _value = _getTokenRate(1 ether, address(_wbnb), address(_usdToken)); \\n        // fecthes from price panackageswap\\n    }\\n}\\n\\nlibrary Address {\\n    function isContract(address account) internal view returns (bool) {\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        assembly {\\n            codehash := extcodehash(account)\\n        }\\n        return (codehash != 0x0 && codehash != accountHash);\\n    }\\n}\\n\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\n        );\\n    }\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transfer.selector, to, value)\\n        );\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n\\n        // A Solidity high level call has three parts:\\n        //  1. The target address is checked to verify it contains contract code\\n        //  2. The call itself is made, and success asserted\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\n        // solhint-disable-next-line max-line-length\\n        require(address(token).isContract(), \\\"SafeERC20: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(\\n                abi.decode(returndata, (bool)),\\n                \\\"SafeERC20: ERC20 operation did not succeed\\\"\\n            );\\n        }\\n    }\\n}\\n\\ninterface IERC20 {\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) external view returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n}\\n\\ninterface IUniswapV2Router01 {\\n    function WETH() external pure returns (address);\\n    function getAmountsOut(\\n        uint amountIn,\\n        address[] calldata path\\n    ) external view returns (uint[] memory amounts);\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"MINIMUM_USDT_PUR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ROUND_DATES\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sponsor\",\"type\":\"address\"}],\"name\":\"buyTokenBNB\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sponsor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"buyTokenUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enDisSales\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBNBRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getIclickInuRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSalesOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"systemlog\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lastUserid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalUSDTVolume\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalUSDTreceived\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBNBreceived\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalTokenSold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCommBNB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCommUSDT\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router01\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_sponsor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_spent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_commBNB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_commUSDT\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "IclickSales", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}