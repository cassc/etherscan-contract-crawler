{"SourceCode": "// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity ^0.8.17;\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\ncontract EngineBusd {\r\n    \r\n    uint256 public total_supply = 0;\r\n    uint256 public decimals = 10**18;\r\n    uint256 public price = 0.1 ether;\r\n    uint256 public last_price = 0 ether;\r\n    uint256 I_P = 0.00025 ether;\r\n    uint256 D_P = 0.0004 ether;\r\n    uint256 min_invest = 50 ether;\r\n    uint256 max_invest = 15000 ether;\r\n    uint256 public OverAllTvl = 0 ether;\r\n    uint256 public Trading_Fee = 6; // all these fees will be trade on centralized exchanges and deposit to the project to increase the price\r\n    uint256 public Other_Fee = 4; // marketing 3% and dev 1%\r\n    uint256 public Ref_Fee = 3;\r\n    uint256 public Compound = 1; \r\n    uint256 public Per_Day = 86400;\r\n    uint256 public timeUnit = 0;\r\n    uint256 public Transaction = 0;\r\n    bool public launch = false;\r\n    address public owner;\r\n    address public wallet1 = 0x42D33d3738E7432bEF57542e4cfC89700534Ba73; // tradingWallet\r\n    address public wallet2 = 0xc5089a16a0f41dbc3c14628f9bEbfab650D4Cf5c; // OtherFees wallet\r\n    address public TokenAddress;\r\n    IERC20 public BUSD;\r\n\r\n    constructor() {\r\n        TokenAddress = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56; // BUSD-MainNet\r\n        BUSD = IERC20(TokenAddress);\r\n        owner = msg.sender;\r\n    }\r\n\r\n    struct UserInvestment {\r\n        address user_addr;\r\n        uint256 amount;\r\n        uint256 key;\r\n    }\r\n\r\n    struct UserDepoMap {\r\n        address user_addr;\r\n        uint256 key;\r\n        uint256 amount;\r\n        uint256 reward;\r\n        uint256 startTime;\r\n        uint256 deadline;\r\n        bool init;\r\n    }\r\n\r\n    struct stakeId {\r\n        address user_addr;\r\n        uint256 stakeId;\r\n    }\r\n\r\n    struct UserCollected {\r\n        address user_addr;\r\n        uint256 amount;\r\n    }\r\n\r\n    struct UserRef {\r\n        address user_addr;\r\n        address ref_addr;\r\n    }\r\n\r\n    struct UserWithdrawTime {\r\n        address user_addr;\r\n        uint256 start_time;\r\n        uint256 deadline;\r\n    }\r\n\r\n    struct PriceHistory {\r\n        uint256 id;\r\n        uint256 price;\r\n        uint256 uTime;\r\n    }\r\n\r\n    struct UserOpenStakes {\r\n        address user_addr;\r\n        uint256 stakeslength;\r\n    }\r\n\r\n\r\n\r\n    mapping(address => UserInvestment) public UserQuery;\r\n    mapping(address => mapping(uint256 => UserDepoMap)) public DepoQuery;\r\n    mapping(address => UserCollected) public claimQuery;\r\n    mapping(address => stakeId) public stakeQuery;\r\n    mapping(address => UserRef) public refQuery;\r\n    mapping(address => UserWithdrawTime) public withdrawTime;\r\n    mapping(uint256 => PriceHistory) public priceQuery;\r\n    mapping(address => UserOpenStakes) public userStakesQuery;\r\n\r\n\r\n    \r\n\r\n    function DEPO(address _ref, uint256 _amount) public {\r\n        require(_ref!=msg.sender && _ref != address(0), \"Ref error\");\r\n        require(launch,\"Project is not yet live\");\r\n        require(_amount>=min_invest && _amount<=max_invest, \"Kindly Min Investment is 50 BUSD and Max per deposit investment is 15000 BUSD\");\r\n       uint256 totalFee = SafeMath.add(feeViewer(_amount),OtherFee(_amount)); \r\n       uint256 _amtx = SafeMath.sub(_amount,totalFee);\r\n       uint256 _price = price;\r\n       uint256 getCoins = SafeMath.div(SafeMath.mul(_amtx,decimals),_price);\r\n       \r\n\r\n       \r\n     \r\n      // Add value to over TVL\r\n       OverAllTvl = SafeMath.add(OverAllTvl,_amtx);\r\n\r\n       // get previous data of user\r\n       uint256 previousAmount = UserQuery[msg.sender].amount;\r\n       uint256 totalCoins = SafeMath.add(getCoins,previousAmount);\r\n\r\n       uint256 _point = UserQuery[msg.sender].key;\r\n\r\n\r\n       UserQuery[msg.sender] = UserInvestment(\r\n           msg.sender,\r\n           totalCoins,\r\n           _point + 1);\r\n       \r\n       BUSD.transferFrom(msg.sender,address(this),_amtx);\r\n       BUSD.transferFrom(msg.sender,wallet1,feeViewer(_amount));\r\n       BUSD.transferFrom(msg.sender,wallet2,OtherFee(_amount));\r\n\r\n       // last Price \r\n\r\n       last_price = price;\r\n\r\n       // price Calculation and setup the new price\r\n       uint256 _power = BuyPower(_amtx);\r\n       price = SafeMath.add(price,_power);\r\n\r\n     \r\n       \r\n   \r\n    \r\n        timeUnit = timeUnit + 1;\r\n\r\n        priceQuery[timeUnit] = PriceHistory(\r\n            timeUnit,\r\n            price,\r\n            block.timestamp);\r\n       \r\n\r\n       // total Supply adding\r\n       total_supply = SafeMath.add(total_supply,getCoins);\r\n\r\n       refQuery[msg.sender] = UserRef(\r\n           msg.sender,\r\n           _ref);\r\n\r\n       Transaction = Transaction + 1;\r\n    }\r\n\r\n\r\n\r\n   function Stake(uint256 _amount, uint256 noOfDays) public {\r\n       uint256 _deadline = noOfDays * Per_Day;\r\n       require(UserQuery[msg.sender].amount>=_amount);\r\n       require(_deadline>=259200,\"You cant stake less than 3 days\");\r\n\r\n       uint256 estimatedTarget = SafeMath.div(SafeMath.mul(_amount,Compound),100);\r\n       uint256 toGetCoins = SafeMath.mul(noOfDays,estimatedTarget);\r\n       uint256 totalReward = SafeMath.add(_amount,toGetCoins);\r\n       total_supply = SafeMath.add(total_supply,toGetCoins); \r\n       uint256 _time = block.timestamp + _deadline; \r\n       uint256 _stakeId = stakeQuery[msg.sender].stakeId;\r\n       if(stakeQuery[msg.sender].user_addr == address(0)) {\r\n        \r\n        uint256 userEngineBalance = UserQuery[msg.sender].amount;\r\n        uint256 userKeyPad = UserQuery[msg.sender].key;\r\n        uint256 nowEngineBalance = userEngineBalance - _amount;\r\n\r\n        UserQuery[msg.sender] = UserInvestment(\r\n            msg.sender,\r\n            nowEngineBalance,\r\n            userKeyPad); \r\n\r\n       DepoQuery[msg.sender][_stakeId] = UserDepoMap(\r\n           msg.sender,\r\n           0,\r\n           _amount,\r\n           totalReward,\r\n           block.timestamp,\r\n           _time, \r\n           false);\r\n\r\n       stakeQuery[msg.sender] = stakeId(\r\n           msg.sender,\r\n           0);\r\n\r\n       uint256 currentStakes = userStakesQuery[msg.sender].stakeslength;\r\n       userStakesQuery[msg.sender] = UserOpenStakes(\r\n           msg.sender,\r\n           currentStakes);\r\n          \r\n       }\r\n        else {\r\n        uint256 _stakeIdIncrease = _stakeId + 1;   \r\n        uint256 userEngineBalance = UserQuery[msg.sender].amount;\r\n        uint256 userKeyPad = UserQuery[msg.sender].key;\r\n        uint256 nowEngineBalance = SafeMath.sub(userEngineBalance,_amount);\r\n        \r\n        UserQuery[msg.sender] = UserInvestment(\r\n            msg.sender,\r\n            nowEngineBalance,\r\n            userKeyPad); \r\n\r\n       DepoQuery[msg.sender][_stakeIdIncrease] = UserDepoMap(\r\n           msg.sender,\r\n           _stakeId + 1,\r\n           _amount,totalReward,\r\n           block.timestamp,\r\n           _time,\r\n            false);\r\n\r\n       stakeQuery[msg.sender] = stakeId(msg.sender,_stakeId + 1);\r\n\r\n       uint256 currentStakes = userStakesQuery[msg.sender].stakeslength;\r\n       userStakesQuery[msg.sender] = UserOpenStakes(\r\n           msg.sender,\r\n           currentStakes + 1);\r\n           }\r\n\r\n    \r\n    if(withdrawTime[msg.sender].user_addr == address(0)) {\r\n        uint256 WDdeadline = block.timestamp + 3 days;\r\n\r\n        withdrawTime[msg.sender] = UserWithdrawTime(\r\n            msg.sender,\r\n            block.timestamp,\r\n            WDdeadline);\r\n    }\r\n     \r\n    \r\n   }\r\n\r\n\r\n   function Collect(uint256 _StakeId) public {\r\n       require(block.timestamp>=DepoQuery[msg.sender][_StakeId].deadline, \"Please Wait Till your Time comes for Collection\"); // TestNet Function Off\r\n       require(!DepoQuery[msg.sender][_StakeId].init,\"You have already Collected The Stake\");\r\n       uint256 _previous = claimQuery[msg.sender].amount;\r\n       uint256 _earned = DepoQuery[msg.sender][_StakeId].reward;\r\n       uint256 _value = SafeMath.add(_previous,_earned);\r\n       claimQuery[msg.sender] = UserCollected(\r\n        msg.sender,\r\n        _value);\r\n       DepoQuery[msg.sender][_StakeId].init = true;\r\n    }\r\n\r\n\r\n    function Swap(uint256 _amount) public {\r\n        require(claimQuery[msg.sender].amount>=_amount); \r\n        require(AntiWhale(msg.sender)>=_amount);\r\n        require(block.timestamp>=withdrawTime[msg.sender].deadline,\"Your next withdraw time is still left\"); // TestNet Function Off\r\n        \r\n        \r\n        uint256 total = SafeMath.mul(_amount,price);\r\n        uint256 _total = SafeMath.div(total,decimals);\r\n      \r\n       // last price \r\n        last_price = price;\r\n       // sell formula\r\n       uint256 _power = SellPower(_total);\r\n       price = SafeMath.sub(price,_power);\r\n\r\n        uint256 addPrice = priceQuery[0].price;\r\n       \r\n       if(addPrice == 0) {\r\n         priceQuery[timeUnit] = PriceHistory(\r\n             timeUnit,\r\n             price,\r\n             block.timestamp);\r\n       }\r\n       else {\r\n        timeUnit = timeUnit + 1;\r\n        priceQuery[timeUnit] = PriceHistory(\r\n            timeUnit,\r\n            price,\r\n            block.timestamp);\r\n       }\r\n\r\n       uint256 refFee = ReffeeViewer(_total);\r\n       uint256 userValue = SafeMath.sub(_total,refFee);\r\n       // total Supply Subtracting\r\n       total_supply = SafeMath.sub(total_supply,_amount);\r\n       BUSD.transfer(msg.sender,userValue);\r\n       BUSD.transfer(refQuery[msg.sender].ref_addr,refFee);\r\n\r\n        uint256 _val = SafeMath.sub(claimQuery[msg.sender].amount,_amount);\r\n        claimQuery[msg.sender].amount = _val;\r\n\r\n        uint256 deadline = block.timestamp + 1 days;\r\n\r\n        withdrawTime[msg.sender] = UserWithdrawTime(\r\n            msg.sender,\r\n            block.timestamp,\r\n            deadline);\r\n  \r\n        Transaction = Transaction + 1;\r\n\r\n\r\n    }\r\n\r\n\r\n     function AntiWhale(address _userAddr) public view returns(uint256) {\r\n        uint256 _amount = claimQuery[_userAddr].amount;\r\n         uint256 output = SafeMath.mul(_amount,price);\r\n        uint256 _output = SafeMath.div(output,decimals);\r\n        _output = SafeMath.mul(_output,10);\r\n        uint256 TVL = TVL_NOW();\r\n        \r\n\r\n        uint256 total = SafeMath.div(SafeMath.mul(TVL,2),100);\r\n\r\n        if(total>=_output) {\r\n            return _amount;\r\n        }\r\n        else {\r\n           \r\n            return SafeMath.div(SafeMath.mul(total,10**18),price);\r\n        }\r\n     }\r\n\r\n     function Launch() public {\r\n         require(msg.sender == owner && !launch,\"This Function is only for admin\");\r\n         launch = true;\r\n\r\n         priceQuery[0] = PriceHistory(\r\n             0,\r\n             price,\r\n             block.timestamp);\r\n        }\r\n\r\n   \r\n\r\n \r\n\r\n     // Supportive functions\r\n     \r\n     function feeViewer(uint256 _amount) public view returns(uint256) {\r\n         uint256 _value =  SafeMath.div(_amount,100);\r\n         return SafeMath.mul(_value,Trading_Fee);\r\n     }\r\n\r\n        function OtherFee(uint256 _amount) public view returns(uint256) {\r\n         uint256 _value =  SafeMath.div(_amount,100);\r\n         return SafeMath.mul(_value,Other_Fee);\r\n     }\r\n\r\n     function ReffeeViewer(uint256 _amount) public view returns(uint256) {\r\n         uint256 _value =  SafeMath.div(_amount,100);\r\n         return SafeMath.mul(_value,Ref_Fee);\r\n     }\r\n\r\n     function BuyPower(uint256 _amount) public view returns(uint256) {\r\n        uint256 _value =  SafeMath.mul(_amount,I_P);\r\n         uint256 _output = SafeMath.div(_value,decimals);\r\n        return SafeMath.div(_output,100);\r\n     }\r\n\r\n     function SellPower(uint256 _amount) public view returns(uint256) {\r\n         uint256 _value =  SafeMath.mul(_amount,D_P);\r\n         uint256 _output = SafeMath.div(_value,decimals);\r\n         return SafeMath.div(_output,100);\r\n     }\r\n\r\n\r\n     function TVL_NOW() public view returns(uint256) {\r\n         return BUSD.balanceOf(address(this));\r\n     }\r\n\r\n    \r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddr\",\"type\":\"address\"}],\"name\":\"AntiWhale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BUSD\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"BuyPower\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_StakeId\",\"type\":\"uint256\"}],\"name\":\"Collect\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Compound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ref\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"DEPO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"DepoQuery\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"user_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"key\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"init\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Launch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"OtherFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Other_Fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OverAllTvl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Per_Day\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Ref_Fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ReffeeViewer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"SellPower\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"noOfDays\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TVL_NOW\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Trading_Fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Transaction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"UserQuery\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"user_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"key\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimQuery\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"user_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"feeViewer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"last_price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"priceQuery\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"uTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"refQuery\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"user_addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ref_addr\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakeQuery\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"user_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeUnit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"total_supply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userStakesQuery\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"user_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeslength\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wallet1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wallet2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawTime\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"user_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"start_time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "EngineBusd", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e8797484fa379fde7b8998eaad3789b7be7837fbb15a59aff4fddca8fff0ec91"}