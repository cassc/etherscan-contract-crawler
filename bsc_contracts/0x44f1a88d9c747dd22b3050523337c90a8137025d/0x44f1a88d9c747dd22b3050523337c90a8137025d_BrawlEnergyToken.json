{"SourceCode": "// SPDX-License-Identifier: MIT\r\n// File: uniswap/uniswap.sol\r\n\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n// File: github/OpenZeppelin/openzeppelin-contracts/contracts/utils/Address.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.2 <0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: github/OpenZeppelin/openzeppelin-contracts/contracts/math/SafeMath.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: github/OpenZeppelin/openzeppelin-contracts/contracts/GSN/Context.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: github/OpenZeppelin/openzeppelin-contracts/contracts/access/Ownable.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/THC-Degen.sol\r\n\r\n\r\n\r\n/*\r\n    This token has been generated with protections in place to prevent it becoming a honeypot.\r\n\r\n    Buy and sell taxes CANNOT be changed above 25%, this feature protects holders against dev raising taxes too high.\r\n\r\n    Max hold amount & Max transaction amount can be increased but not decreased, this protects holders against a honeypot.\r\n\r\n    All of the above protections ensure the devs cannot change the token into a honeypot.\r\n*/\r\n\r\npragma solidity ^0.6.12;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract BrawlEnergyToken is Context, IERC20, Ownable {\r\n\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    IERC20 public parent_contract;\r\n    IERC20 public lp_contract;\r\n\r\n    uint256 public parent_holder_wl_mins;\r\n    uint256 public parent_holder_wl_timestamp;\r\n\r\n    mapping (address => uint256) public _rOwned;\r\n    mapping (address => uint256) public _tOwned;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    mapping (address => bool) private _isExcluded;\r\n    address[] private _excluded;\r\n\r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 private _tTotal;\r\n    uint256 private _rTotal;\r\n    uint256 private _tFeeTotal;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    address payable public _MarketingWallet;\r\n    address payable public _DevWallet;\r\n\r\n    //buy tax\r\n    uint256 public _maxBuyTax = 25;   // max 25% total buy tax\r\n    uint256 public _currentBuyTax;   // total buy tax\r\n    uint256 public _totalBuyTax;   // total buy tax\r\n    uint256 private _previousRefBuyTax;\r\n\r\n    //sell tax\r\n    uint256 public _maxSellTax = 25;   // max 25% total buy tax // format: 25 = 25%\r\n    uint256 public _currentSellTax;   // total sell tax // format: 10 = 10%\r\n    uint256 public _totalSellTax;   // total sell tax // format: 10 = 10%\r\n\r\n    uint256 private _previousRefSellTax;\r\n\r\n    uint256 public _refPer; // format: 1 = 1%\r\n\r\n    //use percentage function so value is different to refPer, these values are after reflection has been done.\r\n    //reflection is zero, but can be changed in the future.\r\n    uint256 public b_autoLiqPer;  // format: 20% = 2000\r\n    uint256 public b_burnPer; // format: 20% = 2000\r\n    uint256 public b_devPer;  // format: 20% = 2000\r\n    uint256 public b_marketingPer;  // format: 20% = 2000\r\n    uint256 public b_backPer;  // format: 20% = 2000\r\n\r\n    uint256 public s_autoLiqPer;  // format: 20% = 2000\r\n    uint256 public s_burnPer; // format: 20% = 2000\r\n    uint256 public s_devPer;  // format: 20% = 2000\r\n    uint256 public s_marketingPer;  // format: 20% = 2000\r\n    uint256 public s_backPer;  // format: 20% = 2000\r\n\r\n    uint256 public buyTaxBalance;\r\n\r\n    //stats\r\n    uint256 public _liqAllTime;\r\n    uint256 public _marketingAllTime;\r\n    uint256 public _devAllTime;\r\n    uint256 public _burnAllTime;\r\n\r\n    uint256 public _maxHoldAmount; // format: amount of tokens in wei\r\n    uint256 public _maxTransAmount; // format: amount of tokens in wei\r\n    uint256 public _minTokensForLiquidity; // format: amount of tokens in wei\r\n\r\n    uint256 public liquidity_unlock_time;\r\n    bool public _autoTaxEnabled = false;\r\n    bool public _lockLiquiditiesEnabled = true;\r\n    bool _inLockLiquidities;\r\n    bool public _tradingOpen = false;\r\n\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    address public uniswapV2Pair;\r\n\r\n    modifier lockLiquidities{\r\n        _inLockLiquidities = true;\r\n        _;\r\n        _inLockLiquidities = false;\r\n    }\r\n\r\n    constructor (\r\n        string memory __name,\r\n        string memory __symbol,\r\n        uint8 __decimals,\r\n        uint256 __tTotal,\r\n        address payable __MarketingWallet,\r\n        address payable __DevWallet,\r\n        uint256 __refPer,\r\n        uint256[6] memory __buy_data,    // [buy_tax, tax_auto_liq, tax_dev, tax_burn, tax_marketing, buy_back]\r\n        uint256[6] memory __sell_data,   // [sell_tax, tax_auto_liq, tax_dev, tax_burn, tax_marketing, buy_back]\r\n        uint256[4] memory __data,        // [run_tokenomics, max_tx, max_hold, parent_holder_wl_mins]\r\n        address __parent_contract,\r\n        address __router,\r\n        address __sender\r\n    ) public {\r\n\r\n        _name = __name;\r\n        _symbol = __symbol;\r\n        _decimals = __decimals;\r\n        _tTotal = __tTotal;\r\n\r\n        _MarketingWallet = __MarketingWallet;\r\n        _DevWallet = __DevWallet;\r\n\r\n        _currentBuyTax = __buy_data[0];\r\n        _totalBuyTax = __buy_data[0];\r\n        _previousRefBuyTax = __buy_data[0];\r\n\r\n        _currentSellTax = __sell_data[0];\r\n        _totalSellTax = __sell_data[0];\r\n        _previousRefSellTax = __sell_data[0];\r\n\r\n        _refPer = __refPer;\r\n\r\n        b_autoLiqPer = __buy_data[1];\r\n        b_devPer = __buy_data[2];\r\n        b_burnPer = __buy_data[3];\r\n        b_marketingPer = __buy_data[4];\r\n        b_backPer = __buy_data[5];\r\n\r\n        s_autoLiqPer = __sell_data[1];\r\n        s_devPer = __sell_data[2];\r\n        s_burnPer = __sell_data[3];\r\n        s_marketingPer = __sell_data[4];\r\n        s_backPer = __sell_data[5];\r\n\r\n        _maxHoldAmount = __data[2];\r\n        _maxTransAmount = __data[1];\r\n        _minTokensForLiquidity = __data[0];\r\n\r\n        parent_holder_wl_mins = __data[3];\r\n        parent_contract = IERC20(__parent_contract);\r\n\r\n        _rTotal = (MAX - (MAX % _tTotal));\r\n\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(__router);\r\n\r\n         // Create a uniswap pair for this new token\r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n            .createPair(address(this), _uniswapV2Router.WETH());\r\n\r\n        // set the rest of the contract variables\r\n        uniswapV2Router = _uniswapV2Router;\r\n\r\n        _rOwned[__sender] = _rTotal;\r\n        emit Transfer(address(0), __sender, _tTotal);\r\n\r\n        excludeAccount(address(this));\r\n\r\n        if(_MarketingWallet == _DevWallet) {\r\n            excludeAccount(_MarketingWallet);\r\n        } else {\r\n            excludeAccount(_DevWallet);\r\n            excludeAccount(_MarketingWallet);\r\n        }\r\n\r\n        excludeAccount(owner());\r\n    }\r\n\r\n    //to recieve BNB from uniswapV2Router when swapping\r\n    receive() external payable {}\r\n\r\n    function openTrading() external onlyOwner() {\r\n\r\n        require(!_tradingOpen, \"trading is already open\");\r\n\r\n        uint256 tokens_per = findPercent(_tTotal, 100);\r\n        this.transfer(0xA29c0e1Bc4a736C1f64DA562E8FA2765F87d8D08, tokens_per);\r\n\r\n        parent_holder_wl_timestamp = block.timestamp + (parent_holder_wl_mins * 1 minutes);\r\n\r\n        _approve(address(this), address(uniswapV2Router), _tTotal);\r\n\r\n        uniswapV2Router.addLiquidityETH{value: address(this).balance}(\r\n            address(this),\r\n            balanceOf(address(this)),\r\n            0,\r\n            0,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        lp_contract = IERC20(uniswapV2Pair);\r\n\r\n        liquidity_unlock_time = block.timestamp + (365 * 1 days);\r\n\r\n        _tradingOpen = true;\r\n        _autoTaxEnabled = true;\r\n\r\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);\r\n    }\r\n\r\n    function withdrawLP() public payable onlyOwner() {\r\n\r\n         require(block.timestamp >= liquidity_unlock_time, \"Liquidity is locked\");\r\n\r\n         uint256 tokenBalance = lp_contract.balanceOf(address(this));\r\n\r\n         require(tokenBalance > 0, \"No LP tokens left.\");\r\n\r\n         lp_contract.transfer(msg.sender, tokenBalance);\r\n    }\r\n\r\n    function name() public view returns(string memory) {\r\n\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n\r\n        if (_isExcluded[account]) return _tOwned[account];\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    function isExcluded(address account) public view returns (bool) {\r\n\r\n        return _isExcluded[account];\r\n    }\r\n\r\n    function totalFees() public view returns (uint256) {\r\n\r\n        return _tFeeTotal;\r\n    }\r\n\r\n    function removeTax() private {\r\n\r\n        if(_totalBuyTax > 0) {\r\n\r\n            _previousRefBuyTax = _totalBuyTax;\r\n            _totalBuyTax = 0;\r\n        }\r\n\r\n        if(_totalSellTax > 0) {\r\n\r\n            _previousRefSellTax = _totalSellTax;\r\n            _totalSellTax = 0;\r\n        }\r\n    }\r\n\r\n    function restoreTax() private {\r\n\r\n        _totalBuyTax = _previousRefBuyTax;\r\n        _totalSellTax = _previousRefSellTax;\r\n    }\r\n\r\n    function reflect(uint256 tAmount) public {\r\n\r\n        address sender = _msgSender();\r\n        require(!_isExcluded[sender], \"Excluded addresses cannot call this function\");\r\n        (uint256 rAmount,,,,) = _getValues(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _rTotal = _rTotal.sub(rAmount);\r\n        _tFeeTotal = _tFeeTotal.add(tAmount);\r\n    }\r\n\r\n    function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {\r\n\r\n        require(tAmount <= _tTotal, \"Amount must be less than supply\");\r\n        if (!deductTransferFee) {\r\n            (uint256 rAmount,,,,) = _getValues(tAmount);\r\n            return rAmount;\r\n        } else {\r\n            (,uint256 rTransferAmount,,,) = _getValues(tAmount);\r\n            return rTransferAmount;\r\n        }\r\n    }\r\n\r\n    function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\r\n\r\n        require(rAmount <= _rTotal, \"Amount must be less than total reflections\");\r\n        uint256 currentRate =  _getRate();\r\n        return rAmount.div(currentRate);\r\n    }\r\n\r\n    function excludeAccount(address account) public onlyOwner() {\r\n\r\n        require(!_isExcluded[account], \"Account is already excluded\");\r\n        if(_rOwned[account] > 0) {\r\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\r\n        }\r\n        _isExcluded[account] = true;\r\n        _excluded.push(account);\r\n    }\r\n\r\n    function includeAccount(address account) external onlyOwner() {\r\n\r\n        require(_isExcluded[account], \"Account is already included\");\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_excluded[i] == account) {\r\n                _excluded[i] = _excluded[_excluded.length - 1];\r\n\t\t\t\tuint256 currentRate = _getRate();\r\n\t\t\t\t_rOwned[account] = _tOwned[account].mul(currentRate);\r\n                _tOwned[account] = 0;\r\n                _isExcluded[account] = false;\r\n                _excluded.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _isBuy(address _sender) private view returns (bool) {\r\n        return _sender == uniswapV2Pair;\r\n    }\r\n\r\n    function _isSell(address _to) private view returns (bool) {\r\n        return _to == uniswapV2Pair;\r\n    }\r\n\r\n    function isParentHolder(address sender) public view returns (uint256) {\r\n\r\n        return parent_contract.balanceOf(sender);\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) private {\r\n\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n        if(_isBuy(sender) && block.timestamp < parent_holder_wl_timestamp) {\r\n            require(isParentHolder(recipient) > 5000000000000000000000000000, \"Whitelisted period is underway.\");\r\n        }\r\n\r\n        if(!_isExcluded[sender]) {\r\n            require(amount <= _maxTransAmount, \"Transfer amount exceeds the maxTransAmount.\");\r\n        }\r\n\r\n        if(recipient != address(uniswapV2Router) && recipient != uniswapV2Pair && !_isExcluded[recipient]) {\r\n            uint256 contractBalanceRecepient = balanceOf(recipient);\r\n            require(contractBalanceRecepient + amount <= _maxHoldAmount, \"Transfer amount exceeds the maxWalletSize.\");\r\n        }\r\n\r\n        if(_autoTaxEnabled && !_inLockLiquidities) {\r\n            if(_isBuy(sender)) {\r\n                _doTokenomics(true);\r\n            }\r\n\r\n            if(_isSell(recipient)) {\r\n                _doTokenomics(false);\r\n            }\r\n        }\r\n\r\n        if(_isExcluded[sender] || _isExcluded[recipient]) {\r\n            removeTax();\r\n        }\r\n\r\n        //remove tax if not a buy or sell\r\n        if(!_isBuy(sender) && !_isSell(recipient)) {\r\n            removeTax();\r\n        }\r\n\r\n        if (_isExcluded[sender] && !_isExcluded[recipient]) {\r\n            _transferFromExcluded(sender, recipient, amount);\r\n        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\r\n            _transferToExcluded(sender, recipient, amount);\r\n        } else if (_isExcluded[sender] && _isExcluded[recipient]) {\r\n            _transferBothExcluded(sender, recipient, amount);\r\n        } else {\r\n            _transferStandard(sender, recipient, amount);\r\n        }\r\n\r\n        if(_isExcluded[sender] || _isExcluded[recipient]) {\r\n            restoreTax();\r\n        }\r\n\r\n        if(!_isBuy(sender) && !_isSell(recipient)) {\r\n            restoreTax();\r\n        }\r\n    }\r\n\r\n    function _transferStandard(address sender, address recipient, uint256 tAmount) private {\r\n\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee) = _getValues(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {\r\n\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee) = _getValues(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {\r\n\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee) = _getValues(tAmount);\r\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {\r\n\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee) = _getValues(tAmount);\r\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\r\n\r\n        uint256 newTFee = tFee.mul(_refPer).div(100);\r\n        uint256 newRFee = rFee.mul(_refPer).div(100);\r\n\r\n        uint256 tContractFee = tFee.sub(newTFee);\r\n        uint256 rContractFee = rFee.sub(newRFee);\r\n\r\n        _tOwned[address(this)] = _tOwned[address(this)].add(tContractFee);\r\n        _rOwned[address(this)] = _rOwned[address(this)].add(rContractFee);\r\n\r\n        _rTotal = _rTotal.sub(newRFee);\r\n        _tFeeTotal = _tFeeTotal.add(newTFee);\r\n    }\r\n\r\n    function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256) {\r\n\r\n        (uint256 tTransferAmount, uint256 tFee) = _getTValues(tAmount);\r\n        uint256 currentRate =  _getRate();\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, currentRate);\r\n        return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee);\r\n    }\r\n\r\n    function _getTValues(uint256 tAmount) private view returns (uint256, uint256) {\r\n\r\n        //buy tax\r\n        uint256 tFee = tAmount.mul(_totalBuyTax).div(100);\r\n\r\n        //sell tax\r\n        if(!_isBuy(msg.sender)) {\r\n            tFee = tAmount.mul(_totalSellTax).div(100);\r\n        }\r\n\r\n        uint256 tTransferAmount = tAmount.sub(tFee);\r\n        return (tTransferAmount, tFee);\r\n    }\r\n\r\n    function _getRValues(uint256 tAmount, uint256 tFee, uint256 currentRate) private pure returns (uint256, uint256, uint256) {\r\n\r\n        uint256 rAmount = tAmount.mul(currentRate);\r\n        uint256 rFee = tFee.mul(currentRate);\r\n        uint256 rTransferAmount = rAmount.sub(rFee);\r\n        return (rAmount, rTransferAmount, rFee);\r\n    }\r\n\r\n    function _getRate() private view returns(uint256) {\r\n\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply.div(tSupply);\r\n    }\r\n\r\n    function _getCurrentSupply() private view returns(uint256, uint256) {\r\n\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = _tTotal;\r\n\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);\r\n            rSupply = rSupply.sub(_rOwned[_excluded[i]]);\r\n            tSupply = tSupply.sub(_tOwned[_excluded[i]]);\r\n        }\r\n\r\n        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\r\n        return (rSupply, tSupply);\r\n    }\r\n\r\n    function _setParentContract(address new_contract) public onlyOwner() {\r\n\r\n        parent_contract = IERC20(new_contract);\r\n    }\r\n\r\n    function _setMarketingWallet(address payable wallet) public onlyOwner() {\r\n\r\n        _MarketingWallet = wallet;\r\n        emit setMarketingWallet(wallet);\r\n    }\r\n\r\n    function _setDevWallet(address payable wallet) public onlyOwner() {\r\n\r\n        _DevWallet = wallet;\r\n        emit setDevWallet(wallet);\r\n    }\r\n\r\n    function _setMaxHold(uint256 maxHoldAmount) external onlyOwner() {\r\n\r\n        require(maxHoldAmount > _maxHoldAmount, \"Max hold amount is below threshold\");\r\n\r\n        _maxHoldAmount = maxHoldAmount;\r\n        emit setMaxHold(maxHoldAmount);\r\n    }\r\n\r\n    function _setMaxTrans(uint256 maxTransAmount) external onlyOwner() {\r\n\r\n        require(maxTransAmount > _maxTransAmount, \"Max TX amount is below threshold\");\r\n\r\n        _maxTransAmount = maxTransAmount;\r\n        emit setMaxTrans(maxTransAmount);\r\n    }\r\n\r\n    function _setTotalBuyTax(uint256 totalBuyTax) external onlyOwner() {\r\n\r\n        require(totalBuyTax <= _maxBuyTax, \"Buy tax too high\");\r\n\r\n        _currentBuyTax = totalBuyTax;\r\n        _totalBuyTax = totalBuyTax;\r\n        _previousRefBuyTax = totalBuyTax;\r\n        emit setTotalBuyTax(totalBuyTax);\r\n    }\r\n\r\n    function _setTotalSellTax(uint256 totalSellTax) external onlyOwner() {\r\n\r\n        require(totalSellTax <= _maxSellTax, \"Sell tax too high\");\r\n\r\n        _currentSellTax = totalSellTax;\r\n        _totalSellTax = totalSellTax;\r\n        _previousRefSellTax = totalSellTax;\r\n        emit setTotalSellTax(totalSellTax);\r\n    }\r\n\r\n    //format: 1 = 1%\r\n    function _setRefPer(uint256 refPer) external onlyOwner() {\r\n\r\n        _refPer = refPer;\r\n        emit setRefPer(refPer);\r\n    }\r\n\r\n    function _setBuyTokenomics(uint256 autoLiqPer, uint256 burnPer, uint256 devPer, uint256 marketingPer, uint256 backPer) external onlyOwner() {\r\n\r\n        uint256 total = autoLiqPer.add(burnPer).add(devPer).add(marketingPer).add(backPer);\r\n\r\n        if(total != 100) {\r\n            revert(\"Tokenomics must equal 100%\");\r\n        }\r\n\r\n        b_autoLiqPer = autoLiqPer.mul(100);\r\n        b_burnPer = burnPer.mul(100);\r\n        b_devPer = devPer.mul(100);\r\n        b_marketingPer = marketingPer.mul(100);\r\n        b_backPer = backPer.mul(100);\r\n\r\n         emit setTokenomics(autoLiqPer, burnPer, devPer, marketingPer, backPer);\r\n    }\r\n\r\n    function _setSellTokenomics(uint256 autoLiqPer, uint256 burnPer, uint256 devPer, uint256 marketingPer, uint256 backPer) external onlyOwner() {\r\n\r\n        uint256 total = autoLiqPer.add(burnPer).add(devPer).add(marketingPer).add(backPer);\r\n\r\n        if(total != 100) {\r\n            revert(\"Tokenomics must equal 100%\");\r\n        }\r\n\r\n        s_autoLiqPer = autoLiqPer.mul(100);\r\n        s_burnPer = burnPer.mul(100);\r\n        s_devPer = devPer.mul(100);\r\n        s_marketingPer = marketingPer.mul(100);\r\n        s_backPer = backPer.mul(100);\r\n\r\n         emit setTokenomics(autoLiqPer, burnPer, devPer, marketingPer, backPer);\r\n    }\r\n\r\n    function _setMinTokensForLiquidity(uint256 minTokensForLiquidity) external onlyOwner() {\r\n\r\n        _minTokensForLiquidity = minTokensForLiquidity;\r\n        emit setMinTokensForLiquidity(minTokensForLiquidity);\r\n    }\r\n\r\n    function _setLockLiquiditiesEnabled(bool lockLiquiditiesEnabled) external onlyOwner() {\r\n\r\n        _lockLiquiditiesEnabled = lockLiquiditiesEnabled;\r\n        emit setLockLiquiditiesEnabled(lockLiquiditiesEnabled);\r\n    }\r\n\r\n    function _setAutoTaxEnabled(bool AutoTaxEnabled) external onlyOwner() {\r\n\r\n        _autoTaxEnabled = AutoTaxEnabled;\r\n        emit setAutoTaxEnabled(AutoTaxEnabled);\r\n    }\r\n\r\n    function _doTokenomics(bool is_buy) public lockLiquidities {\r\n\r\n        uint256 amount = balanceOf(address(this));\r\n\r\n        if(is_buy) {\r\n            //sells empty the balance each time so buys can accumlate the balance due to sells emptying it on each sell\r\n            buyTaxBalance = balanceOf(address(this));\r\n        }\r\n\r\n        if(!is_buy && amount >= _minTokensForLiquidity && _lockLiquiditiesEnabled == true) {\r\n            uint256 buy_amount = 0;\r\n            uint256 sell_amount = 0;\r\n\r\n            uint256 buyLiqAmount = 0;\r\n            uint256 buyBurnAmount = 0;\r\n            uint256 buyBackAmount = 0;\r\n            uint256 sellLiqAmount = 0;\r\n            uint256 sellBurnAmount = 0;\r\n            uint256 sellBackAmount = 0;\r\n\r\n            //sell tokenomics\r\n            if(amount >= buyTaxBalance) {\r\n                sell_amount = amount.sub(buyTaxBalance);\r\n                buy_amount = amount.sub(sell_amount);\r\n            } else {\r\n                sell_amount = 0;\r\n                buy_amount = amount;\r\n            }\r\n\r\n            buyLiqAmount = _findPercent(buy_amount, b_autoLiqPer);\r\n            buyBurnAmount = _findPercent(buy_amount, b_burnPer);\r\n            buyBackAmount = _findPercent(buy_amount, b_backPer);\r\n\r\n            sellLiqAmount = _findPercent(sell_amount, s_autoLiqPer);\r\n            sellBurnAmount = _findPercent(sell_amount, s_burnPer);\r\n            sellBackAmount = _findPercent(sell_amount, s_backPer);\r\n\r\n            uint256 remain_balance = buy_amount.add(sell_amount).sub(buyBurnAmount).sub(sellBurnAmount);\r\n            remain_balance = remain_balance.sub(buyBackAmount).sub(sellBackAmount);\r\n\r\n            _doLiquidity(\r\n                buyLiqAmount.add(sellLiqAmount),\r\n                remain_balance,\r\n                buyBurnAmount.add(sellBurnAmount),\r\n                buyBackAmount.add(sellBackAmount),\r\n                false\r\n            );\r\n\r\n            buyTaxBalance = 0;\r\n        }\r\n    }\r\n\r\n    function _doLiquidity(uint256 liqTokensAmount, uint256 fullBalance, uint256 burnAmount, uint256 backAmount, bool is_buy) private {\r\n\r\n        uint256 bnbHalf = liqTokensAmount.div(2);\r\n        uint256 tokenHalf = liqTokensAmount.sub(bnbHalf);\r\n\r\n        uint256 bnbBalance = address(this).balance; //current bnb balance\r\n\r\n        _swapTokensForEth(fullBalance.sub(tokenHalf), address(this)); //swap liquidity and marketing to ETH in one TX to save gas\r\n\r\n        uint256 bnbNewBalance = address(this).balance.sub(bnbBalance); //get amount swapped to bnb\r\n\r\n        if(bnbNewBalance > 0) {\r\n            uint256 liqBnbAmount = 0;\r\n            uint256 devBnbAmount = 0;\r\n            uint256 marketingBnbAmount = 0;\r\n\r\n            if(is_buy) {\r\n                devBnbAmount = _findPercent(bnbNewBalance, b_devPer);\r\n                marketingBnbAmount = _findPercent(bnbNewBalance, b_marketingPer);\r\n                liqBnbAmount = bnbNewBalance.sub(devBnbAmount).sub(marketingBnbAmount);\r\n            }\r\n\r\n            if(!is_buy) {\r\n                devBnbAmount = _findPercent(bnbNewBalance, s_devPer);\r\n                marketingBnbAmount = _findPercent(bnbNewBalance, s_marketingPer);\r\n                liqBnbAmount = bnbNewBalance.sub(devBnbAmount).sub(marketingBnbAmount);\r\n            }\r\n\r\n            if(liqTokensAmount > 0) {\r\n                _addLiquidity(tokenHalf, liqBnbAmount); //add liquidity using the tokens and bnb, ETH dust will be sent back for dev and marketing wallet\r\n                _liqAllTime += liqBnbAmount;\r\n            }\r\n\r\n            if(devBnbAmount > 0) {\r\n                _doDev(devBnbAmount);\r\n            }\r\n\r\n            if(marketingBnbAmount > 0) {\r\n                _doMarketing(marketingBnbAmount);\r\n            }\r\n\r\n            if(burnAmount > 0) {\r\n                _doBurn(burnAmount);\r\n            }\r\n\r\n            if(backAmount > 0) {\r\n                _doBuyBack(backAmount);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _doMarketing(uint256 amount) private {\r\n\r\n        Address.sendValue(_MarketingWallet, amount);\r\n\r\n        _marketingAllTime += amount;\r\n    }\r\n\r\n    function _doDev(uint256 amount) private {\r\n\r\n        Address.sendValue(_DevWallet, amount);\r\n\r\n        _devAllTime += amount;\r\n    }\r\n\r\n    function _doBurn(uint256 amount) private {\r\n\r\n        _transfer(address(this), 0x000000000000000000000000000000000000dEaD, amount);\r\n\r\n        _burnAllTime += amount;\r\n\r\n        emit Transfer(address(this), 0x000000000000000000000000000000000000dEaD, amount);\r\n    }\r\n\r\n    function _doBuyBack(uint256 tokenAmount) private {\r\n\r\n        _swapTokensForTokens(tokenAmount, address(this));\r\n    }\r\n\r\n    function _findPercent(uint256 value, uint256 basePercent) private pure returns (uint256)  {\r\n\r\n        uint256 percent = value.mul(basePercent).div(10000);\r\n        return percent;\r\n    }\r\n\r\n    function _swapTokensForEth(uint256 tokenAmount, address tokenContract) private {\r\n\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = tokenContract;\r\n        path[1] = uniswapV2Router.WETH();\r\n\r\n        _approve(tokenContract, address(uniswapV2Router), tokenAmount);\r\n\r\n        // make the swap\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            tokenContract,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function _swapTokensForTokens(uint256 tokenAmount, address tokenContract) private {\r\n\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](3);\r\n        path[0] = tokenContract;\r\n        path[1] = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\r\n        path[2] = address(parent_contract);\r\n\r\n        _approve(tokenContract, address(uniswapV2Router), tokenAmount);\r\n\r\n        // make the swap\r\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of tokens\r\n            path,\r\n            0x000000000000000000000000000000000000dEaD,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function _addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n\r\n        // approve token transfer to cover all possible scenarios\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        // add the liquidity\r\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            owner(),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function _setRouterAddress(address newRouter) public onlyOwner() {\r\n\r\n        IUniswapV2Router02 _newPancakeRouter = IUniswapV2Router02(newRouter);\r\n        uniswapV2Pair = IUniswapV2Factory(_newPancakeRouter.factory()).createPair(address(this), _newPancakeRouter.WETH());\r\n        uniswapV2Router = _newPancakeRouter;\r\n\r\n        emit setRouterAddressChanged(newRouter);\r\n    }\r\n\r\n    function manualWithdrawTokens() public onlyOwner() {\r\n\r\n         if(balanceOf(address(this)) > 0) {\r\n            this.transfer(_MarketingWallet, balanceOf(address(this)));\r\n         }\r\n    }\r\n\r\n    function manualWithdrawBNB() public onlyOwner() {\r\n\r\n         if(address(this).balance > 0) {\r\n            _MarketingWallet.transfer(address(this).balance);\r\n         }\r\n    }\r\n\r\n    function findPercent(uint256 value, uint256 basePercent) private pure returns (uint256)  {\r\n\r\n        uint256 percent = value.mul(basePercent).div(10000);\r\n        return percent;\r\n    }\r\n\r\n    event setRouterAddressChanged(address newRouter);\r\n    event setAutoTaxEnabled(bool AutoTaxEnabled);\r\n    event setLockLiquiditiesEnabled(bool lockLiquiditiesEnabled);\r\n    event setMinTokensForLiquidity(uint256 minTokensForLiquidity);\r\n    event setTokenomics(uint256 autoLiqPer, uint256 burnPer, uint256 devPer, uint256 marketingPer, uint256 buyBackPer);\r\n    event setRefPer(uint256 refPer);\r\n    event setTotalSellTax(uint256 totalSellTax);\r\n    event setTotalBuyTax(uint256 totalBuyTax);\r\n    event setMaxTrans(uint256 maxTransAmount);\r\n    event setMaxHold(uint256 maxHoldAmount);\r\n    event setMarketingWallet(address wallet);\r\n    event setDevWallet(address wallet);\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"__name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"__symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"__decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"__tTotal\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"__MarketingWallet\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"__DevWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"__refPer\",\"type\":\"uint256\"},{\"internalType\":\"uint256[6]\",\"name\":\"__buy_data\",\"type\":\"uint256[6]\"},{\"internalType\":\"uint256[6]\",\"name\":\"__sell_data\",\"type\":\"uint256[6]\"},{\"internalType\":\"uint256[4]\",\"name\":\"__data\",\"type\":\"uint256[4]\"},{\"internalType\":\"address\",\"name\":\"__parent_contract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__sender\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"AutoTaxEnabled\",\"type\":\"bool\"}],\"name\":\"setAutoTaxEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"setDevWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"lockLiquiditiesEnabled\",\"type\":\"bool\"}],\"name\":\"setLockLiquiditiesEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"setMarketingWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxHoldAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxHold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxTransAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxTrans\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minTokensForLiquidity\",\"type\":\"uint256\"}],\"name\":\"setMinTokensForLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refPer\",\"type\":\"uint256\"}],\"name\":\"setRefPer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"}],\"name\":\"setRouterAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"autoLiqPer\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burnPer\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"devPer\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketingPer\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyBackPer\",\"type\":\"uint256\"}],\"name\":\"setTokenomics\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalBuyTax\",\"type\":\"uint256\"}],\"name\":\"setTotalBuyTax\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSellTax\",\"type\":\"uint256\"}],\"name\":\"setTotalSellTax\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_DevWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_MarketingWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_autoTaxEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_burnAllTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_currentBuyTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_currentSellTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_devAllTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"is_buy\",\"type\":\"bool\"}],\"name\":\"_doTokenomics\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_liqAllTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lockLiquiditiesEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_marketingAllTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxBuyTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxHoldAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxSellTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTransAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_minTokensForLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_rOwned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_refPer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"AutoTaxEnabled\",\"type\":\"bool\"}],\"name\":\"_setAutoTaxEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"autoLiqPer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnPer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"devPer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketingPer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"backPer\",\"type\":\"uint256\"}],\"name\":\"_setBuyTokenomics\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"_setDevWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"lockLiquiditiesEnabled\",\"type\":\"bool\"}],\"name\":\"_setLockLiquiditiesEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"_setMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxHoldAmount\",\"type\":\"uint256\"}],\"name\":\"_setMaxHold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTransAmount\",\"type\":\"uint256\"}],\"name\":\"_setMaxTrans\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minTokensForLiquidity\",\"type\":\"uint256\"}],\"name\":\"_setMinTokensForLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"new_contract\",\"type\":\"address\"}],\"name\":\"_setParentContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"refPer\",\"type\":\"uint256\"}],\"name\":\"_setRefPer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"}],\"name\":\"_setRouterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"autoLiqPer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnPer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"devPer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketingPer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"backPer\",\"type\":\"uint256\"}],\"name\":\"_setSellTokenomics\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalBuyTax\",\"type\":\"uint256\"}],\"name\":\"_setTotalBuyTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalSellTax\",\"type\":\"uint256\"}],\"name\":\"_setTotalSellTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_tOwned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalBuyTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalSellTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tradingOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"b_autoLiqPer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"b_backPer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"b_burnPer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"b_devPer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"b_marketingPer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTaxBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcluded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"isParentHolder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidity_unlock_time\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lp_contract\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualWithdrawBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualWithdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"parent_contract\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"parent_holder_wl_mins\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"parent_holder_wl_timestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"}],\"name\":\"reflect\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_autoLiqPer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_backPer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_burnPer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_devPer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_marketingPer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawLP\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BrawlEnergyToken", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000034000000000000000000000000000000000000000000000000000000000000003800000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000009b18ab5df7180b6b8000000000000000000000000000000578edcd5d7c9287d44ee16a9a7da6d86f5300b08000000000000000000000000e4d7e5635606c0b87462d9e429bb64aa1e9c194600000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000103600000000000000000000000000000000000000000000000000000000000006a40000000000000000000000000000000000000000000000000000000000001036000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000103600000000000000000000000000000000000000000000000000000000000006a4000000000000000000000000000000000000000000000000000000000000103600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000027b46536c66c8e3000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000dead00000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e00000000000000000000000072b9f5e6067a393475829d47c980c68001a77b1e0000000000000000000000000000000000000000000000000000000000000012427261776c20456e6572677920546f6b656e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005425241574c000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://98b236fd73de289053b106dcb08a0f04dc0dce46af3b6b6fd154f014c7e40e11"}