{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2021-10-20\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\ninterface IBEP20 {\r\n  function totalSupply() external view returns (uint256);\r\n  function decimals() external view returns (uint8);\r\n  function symbol() external view returns (string memory);\r\n  function name() external view returns (string memory);\r\n  function getOwner() external view returns (address);\r\n  function balanceOf(address account) external view returns (uint256);\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n  function allowance(address _owner, address spender) external view returns (uint256);\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\ninterface BurningMoon is IBEP20{\r\n    function Compound() external;\r\n    function getDividents(address addr) external view returns (uint256);\r\n    function ClaimAnyToken(address token) external payable;\r\n    function ClaimBNB() external;\r\n    function TransferSacrifice(address target, uint256 amount) external;\r\n}\r\ninterface IPancakeRouter01 {\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getamountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getamountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getamountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getamountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IPancakeRouter02 is IPancakeRouter01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface IERC165 {\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\ninterface IERC721 is IERC165 {\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n\r\nabstract contract ERC165 is IERC165 {\r\n    /*\r\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\r\n     */\r\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\r\n\r\n    /**\r\n     * @dev Mapping of interface ids to whether or not it's supported.\r\n     */\r\n    mapping(bytes4 => bool) private _supportedInterfaces;\r\n\r\n    constructor () {\r\n        // Derived contracts need only register support for their own interfaces,\r\n        // we register support for ERC165 itself here\r\n        _registerInterface(_INTERFACE_ID_ERC165);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     *\r\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return _supportedInterfaces[interfaceId];\r\n    }\r\n\r\n    /**\r\n     * @dev Registers the contract as an implementer of the interface defined by\r\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\r\n     * registering its interface id is not required.\r\n     *\r\n     * See {IERC165-supportsInterface}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\r\n     */\r\n    function _registerInterface(bytes4 interfaceId) internal virtual {\r\n        require(interfaceId != 0xffffffff, \"ERC165: invalid interface id\");\r\n        _supportedInterfaces[interfaceId] = true;\r\n    }\r\n}\r\nlibrary Strings {\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        uint256 index = digits - 1;\r\n        temp = value;\r\n        while (temp != 0) {\r\n            buffer[index--] = bytes1(uint8(48 + temp % 10));\r\n            temp /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\ninterface IERC721Metadata is IERC721 {\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\nlibrary EnumerableSet {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping (bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\r\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\r\n\r\n            bytes32 lastvalue = set._values[lastIndex];\r\n\r\n            // Move the last value to the index where the value to delete is\r\n            set._values[toDeleteIndex] = lastvalue;\r\n            // Update the index for the moved value\r\n            set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\r\n        return set._values[index];\r\n    }\r\n\r\n    // Bytes32Set\r\n\r\n    struct Bytes32Set {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _add(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _remove(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\r\n        return _contains(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(Bytes32Set storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\r\n        return _at(set._inner, index);\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint160(uint256(_at(set._inner, index))));\r\n    }\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n}\r\n\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\ninterface IERC721Enumerable\r\n{\r\n\r\n  /**\r\n   * @dev Returns a count of valid NFTs tracked by this contract, where each one of them has an\r\n   * assigned and queryable owner not equal to the zero address.\r\n   * @return Total supply of NFTs.\r\n   */\r\n  function totalSupply()\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n  /**\r\n   * @dev Returns the token identifier for the `_index`th NFT. Sort order is not specified.\r\n   * @param _index A counter less than `totalSupply()`.\r\n   * @return Token id.\r\n   */\r\n  function tokenByIndex(\r\n    uint256 _index\r\n  )\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n  /**\r\n   * @dev Returns the token identifier for the `_index`th NFT assigned to `_owner`. Sort order is\r\n   * not specified. It throws if `_index` >= `balanceOf(_owner)` or if `_owner` is the zero address,\r\n   * representing invalid NFTs.\r\n   * @param _owner An address where we are interested in NFTs owned by them.\r\n   * @param _index A counter less than `balanceOf(_owner)`.\r\n   * @return Token id.\r\n   */\r\n  function tokenOfOwnerByIndex(\r\n    address _owner,\r\n    uint256 _index\r\n  )\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n}\r\nabstract contract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract BurningMoonDividentNFT is ERC165, IERC721, IERC721Metadata ,IERC721Enumerable,Ownable {\r\n    using Address for address;\r\n    // Token name\r\n    string private _name=\"FesBNB x BurningMoon\";\r\n    // Token symbol\r\n    string private _symbol=\"FesBNBXBM\";\r\n    \r\n    string public _baseURI=\"\";\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n    using EnumerableSet for EnumerableSet.UintSet;\r\n    using Strings for uint256;\r\n\r\n\r\n    // Mapping from token ID to owner address\r\n    mapping(uint256 => address) private _owners;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping(uint256 => address) private _tokenApprovals;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n    \r\n    //Mapping of the tokenIDs of an owner\r\n    mapping(address => uint256[]) private _tokenOfOwner;\r\n    \r\n    //Mapping of the shares of each account based on the rarity of the NFTs they hold\r\n    mapping(address => uint256) public shares;\r\n    mapping(address => uint256) private paidOutShares;\r\n\r\n\r\n    //The rarity determines the amount of BM you get as reflection \r\n    //and the worth of the NFT    \r\n    enum Rarity{Common,Uncommon, Rare, Epic,Legendary}\r\n    struct NFTData{\r\n        string Name;\r\n        string URI;\r\n        Rarity rarity;\r\n    }\r\n    address[] NFTHolders;\r\n    uint256[] ownerID;\r\n    uint256[] NFTValue;\r\n    uint256[] public NFTs;\r\n\r\n    NFTData[] NFTPrototypes;\r\n\r\n    uint256 public currentValue=7*10**16; //0.0005 BNB for first NFT\r\n    \r\n    function OwnerSetValue(uint256 value) external onlyOwner{\r\n        currentValue=value;\r\n    }\r\n    uint8 Taxes=50;//5%\r\n\r\n    uint256 constant dividentMagnifier=10**32;\r\n    uint256 profitPerShare;\r\n    uint256 public totalShares;\r\n\r\n    function getDividents(address account) public view returns (uint256){\r\n        uint256 fullPayout = profitPerShare * shares[account];\r\n        //if excluded from staking or some error return 0\r\n        if(fullPayout<=paidOutShares[account]) return 0;\r\n        return ((fullPayout - paidOutShares[account]) / dividentMagnifier);\r\n    }\r\n    //Set of the token that are curently for sale\r\n    EnumerableSet.UintSet TokenForSale;\r\n    \r\n    BurningMoon private BM;\r\n    IPancakeRouter02 private BMPCS;\r\n    IPancakeRouter02 private TokenPCS;\r\n    IBEP20 private Token;\r\n    function OwnerSetTokenRouter(address Router) external onlyOwner{\r\n        TokenPCS=IPancakeRouter02(Router);\r\n    }\r\n    function OwnerSetBMRouter(address Router) external onlyOwner{\r\n        BMPCS=IPancakeRouter02(Router);\r\n    }\r\n    function OwnerSetToken(address tokenAddress) external onlyOwner{\r\n        Token=IBEP20(tokenAddress);\r\n    }\r\n    function OwnerSetBM(address BMAddress) external onlyOwner{\r\n        BM=BurningMoon(BMAddress);\r\n    }\r\n    //Mainnet\r\n    address constant BMaddress=0x97c6825e6911578A515B11e25B552Ecd5fE58dbA;\r\n    address constant PCSaddress=0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n    address constant TokenAddress=0x8371a55dBEE669f16bD9e6137e2cE39ee87aE8e2;//FesBNB\r\n    //TestNet\r\n    //address constant BMaddress=0x1Fd93329706579516e18ef2B51890F7a146B5b14;\r\n    //address constant PCSaddress=0x9Ac64Cc6e4415144C455BD8E4837Fea55603e5c3;\r\n    //address constant TokenAddress=0x78867BbEeF44f2326bF8DDd1941a4439382EF2A7;\r\n\r\n    constructor() {\r\n        // register the supported interfaces to conform to ERC721 via ERC165\r\n        _registerInterface(type(IERC721).interfaceId);\r\n        _registerInterface(type(IERC721Metadata).interfaceId);\r\n        _registerInterface(type(IERC721Enumerable).interfaceId);\r\n        NFTPrototypes.push(NFTData(\"Common\", \"0\", Rarity.Common));\r\n        NFTPrototypes.push(NFTData(\"Common\", \"0\", Rarity.Common));\r\n        NFTPrototypes.push(NFTData(\"Common\", \"0\", Rarity.Common));\r\n        NFTPrototypes.push(NFTData(\"Common\", \"0\", Rarity.Common));\r\n        NFTPrototypes.push(NFTData(\"Common\", \"0\", Rarity.Common));\r\n\r\n        NFTPrototypes.push(NFTData(\"Uncommon\", \"1\", Rarity.Uncommon));\r\n        NFTPrototypes.push(NFTData(\"Uncommon\", \"1\", Rarity.Uncommon));\r\n        NFTPrototypes.push(NFTData(\"Uncommon\", \"1\", Rarity.Uncommon));\r\n        NFTPrototypes.push(NFTData(\"Uncommon\", \"1\", Rarity.Uncommon));\r\n        NFTPrototypes.push(NFTData(\"Uncommon\", \"1\", Rarity.Uncommon));\r\n\r\n        NFTPrototypes.push(NFTData(\"Rare\", \"2\", Rarity.Rare));\r\n        NFTPrototypes.push(NFTData(\"Rare\", \"2\", Rarity.Rare));\r\n        NFTPrototypes.push(NFTData(\"Rare\", \"2\", Rarity.Rare));\r\n        NFTPrototypes.push(NFTData(\"Rare\", \"2\", Rarity.Rare));\r\n        NFTPrototypes.push(NFTData(\"Rare\", \"2\", Rarity.Rare));\r\n\r\n        NFTPrototypes.push(NFTData(\"Epic\", \"2\", Rarity.Epic));\r\n        NFTPrototypes.push(NFTData(\"Epic\", \"2\", Rarity.Epic));\r\n        NFTPrototypes.push(NFTData(\"Epic\", \"2\", Rarity.Epic));\r\n        NFTPrototypes.push(NFTData(\"Epic\", \"2\", Rarity.Epic));\r\n        NFTPrototypes.push(NFTData(\"Epic\", \"2\", Rarity.Epic));\r\n\r\n        NFTPrototypes.push(NFTData(\"Legendary\", \"2\", Rarity.Legendary));\r\n        NFTPrototypes.push(NFTData(\"Legendary\", \"2\", Rarity.Legendary));\r\n        NFTPrototypes.push(NFTData(\"Legendary\", \"2\", Rarity.Legendary));\r\n        NFTPrototypes.push(NFTData(\"Legendary\", \"2\", Rarity.Legendary));\r\n        NFTPrototypes.push(NFTData(\"Legendary\", \"2\", Rarity.Legendary));       \r\n        \r\n        BM=BurningMoon(BMaddress);\r\n        \r\n        BMPCS=IPancakeRouter02(PCSaddress);\r\n        TokenPCS=IPancakeRouter02(PCSaddress);\r\n        Token=IBEP20(TokenAddress); \r\n    }\r\n\r\n    bool _isInFunction;\r\n    modifier isInFunction{\r\n        require(!_isInFunction);\r\n        _isInFunction=true;\r\n        _;\r\n        _isInFunction=false;\r\n    }\r\n    \r\n    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    //BM Dividents////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// \r\n    bool isPaying;\r\n    uint256 CurrentAirdropID;\r\n\r\n    \r\n    function Airdrop(uint256 count) public{\r\n        _distributeToken();\r\n        uint256 holderLength=holders.length();\r\n        if(count>holderLength)count=holderLength;\r\n        if(CurrentAirdropID>=holderLength) CurrentAirdropID=0;\r\n        for(uint i=0;i<count;i++)\r\n        {\r\n           try this.Payout(holders.at(CurrentAirdropID)){}\r\n           catch{}\r\n            CurrentAirdropID++;\r\n            if(CurrentAirdropID>=holderLength)\r\n                CurrentAirdropID=0;  \r\n        }\r\n    }\r\n    uint8 airdropsPerClaim=10;\r\n    function OwnerSetAirdropsPerClaim(uint8 airdrops) public onlyOwner{\r\n        require(airdrops<=10);\r\n        airdropsPerClaim=airdrops;\r\n    }\r\n    function AccountClaimDividents() external{\r\n        _distributeToken();\r\n        uint256 amount=getDividents(msg.sender);\r\n        require(amount>0,\"No payout\");\r\n        _payout(msg.sender);\r\n        try this.Airdrop(airdropsPerClaim){}\r\n        catch{}\r\n    }\r\n    function Payout(address account) external isInFunction{\r\n        _payout(account);\r\n    }\r\n    function _payout(address account) private{\r\n        uint256 amount=getDividents(account);\r\n        if(amount==0)return;\r\n        paidOutShares[account]=shares[account]*profitPerShare;\r\n        Token.transfer(account, amount);\r\n    }\r\n    function _distributeBNB(uint amount) private{\r\n        if(amount>address(this).balance)amount=address(this).balance;\r\n        if(amount<=0) return;\r\n            uint256 BMAmount=amount*80/100;\r\n            uint256 TokenAmount=amount*15/100;\r\n            //Sends the sender 15% of the BNB Amount in token\r\n            SwapForToken(TokenAmount,Token,TokenPCS,msg.sender);\r\n            _buyAndSacrificeBM(BMAmount);\r\n    }\r\n    function _buyAndSacrificeBM(uint256 amount)private{\r\n        if(amount==0) return;\r\n        //Buy BM\r\n        address[] memory path = new address[](2);\r\n        path[1] = address(BM);\r\n        path[0] = BMPCS.WETH();\r\n        uint SwapBM=SwapForToken(amount,BM,BMPCS,address(this));\r\n        uint TokenForSender=SwapBM*18/100;\r\n        if(SwapBM==0) return;\r\n        try BM.transfer(msg.sender,TokenForSender){\r\n            SwapBM-=TokenForSender;}catch{}\r\n\r\n        try BM.transfer(address(0xdead),SwapBM){}catch{}\r\n    }\r\n    function SwapForToken(uint BNBAmount,IBEP20 token, IPancakeRouter02 router,address Target) private returns(uint256){\r\n        address[] memory path = new address[](2);\r\n        path[1] = address(token);\r\n        path[0] = router.WETH();\r\n        uint256 initialBalance=token.balanceOf(Target);\r\n\r\n        try router.swapExactETHForTokensSupportingFeeOnTransferTokens{value:BNBAmount}(\r\n            0,\r\n            path,\r\n            Target,\r\n            block.timestamp\r\n        ){}\r\n        catch{\r\n            (bool sent,)=Target.call{value:BNBAmount}(\"\");\r\n            sent=true;\r\n            return 0;\r\n        }\r\n        return token.balanceOf(Target)-initialBalance;\r\n    }\r\n    \r\n    function _distributeToken() private{\r\n        //If total shares is 0, ignore compound\r\n        if(totalShares==0) return;\r\n        uint256 newDividents=BM.getDividents(address(this));\r\n        if(newDividents<=0) return;\r\n\r\n        uint256 InitialBNB=address(this).balance;\r\n        BM.ClaimBNB();\r\n        uint256 newBNB=address(this).balance-InitialBNB;\r\n\r\n        uint newBalance=SwapForToken(newBNB,Token,TokenPCS,address(this));\r\n        profitPerShare += ((newBalance * dividentMagnifier) / totalShares);\r\n\r\n    }\r\n\r\n    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    //Owner Settings//////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// \r\n    \r\n    //Changes the BaseURI \r\n    function OwnerSetBaseURI(string memory newBaseURI) external onlyOwner{\r\n        _baseURI=newBaseURI;\r\n    }\r\n\r\n    function OwnerBatchSetURI(string[] memory newURI, uint StartID) external onlyOwner{\r\n        for(uint i=0;i<newURI.length;i++){\r\n        uint ID=i+StartID;\r\n        NFTData memory data=NFTPrototypes[ID];\r\n        data.URI=newURI[i];\r\n        NFTPrototypes[ID]=data;\r\n        }\r\n\r\n    }\r\n\r\n\r\n    function OwnerSetURI(string memory newURI, uint ID) external onlyOwner{\r\n        NFTData memory data=NFTPrototypes[ID];\r\n        data.URI=newURI;\r\n        NFTPrototypes[ID]=data;\r\n    }\r\n    function OwnerSetTaxes(uint8 taxes) external onlyOwner{\r\n        Taxes=taxes;\r\n    }\r\n    function OwnerTransferSacrifice(address target,uint256  amount) external onlyOwner{\r\n        BM.TransferSacrifice(target, amount);\r\n    }\r\n    function OwnerClaimBNB() external isInFunction{\r\n        uint256 amount=address(this).balance;        \r\n        (bool sent,)=owner().call{value:amount}(\"\");\r\n        sent=true;\r\n    }\r\n\r\n    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    //NFTTrading//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// \r\n    \r\n\r\n    function Sell(uint256 ID, uint256 value, bool isForSale)external{\r\n        require(_isApprovedOrOwner(msg.sender,ID));\r\n        NFTValue[ID]=value;\r\n        if(isForSale) TokenForSale.add(ID);\r\n        else TokenForSale.remove(ID);\r\n    }\r\n    function SellNextNFT(uint256 value)external{\r\n        for(uint SellID=0;SellID<balanceOf(msg.sender);SellID++)\r\n        {\r\n        uint TokenID=tokenOfOwnerByIndex(msg.sender,SellID);\r\n          if(!isNFTForSale(TokenID)){\r\n              NFTValue[SellID]=value;\r\n              TokenForSale.add(TokenID);\r\n              return;\r\n          }\r\n        }\r\n        revert(\"No token left to sell\");\r\n    }\r\n    function SellRemoveNextNFT()external{\r\n        for(uint SellID=0;SellID<balanceOf(msg.sender);SellID++)\r\n        {\r\n        uint TokenID=tokenOfOwnerByIndex(msg.sender,SellID);\r\n          if(isNFTForSale(TokenID)){\r\n              TokenForSale.remove(TokenID);\r\n              return;\r\n          }\r\n        }\r\n        revert(\"No token to remove from sale\");\r\n    }\r\n    \r\n    //Iterates over all NFTs to find the cheapest NFT in the given Rarity\r\n    function BuyNFTByRarity(Rarity rarity) external payable{\r\n        uint buyID;\r\n        uint cheapestValue = type(uint).max;\r\n        \r\n        for(uint i=0;i<TokenForSale.length();i++){\r\n            uint NFTID=TokenForSale.at(i);    \r\n            if(NFTs[NFTID]==uint8(rarity)){         \r\n                uint newValue=getValue(NFTID);\r\n                if(newValue<cheapestValue){\r\n                    cheapestValue=newValue;\r\n                    buyID=NFTID;\r\n                }\r\n            }\r\n        }\r\n        require(cheapestValue<type(uint).max,\"no NFT for sale in this rarity found\");\r\n        BuyNFT(buyID);\r\n    }\r\n    //Iterates over all NFTs to find the cheapest NFT with the given name\r\n    function BuyNFTByName(string memory NFTName) external payable{\r\n        uint buyID;\r\n        uint cheapestValue = type(uint).max;\r\n        bytes32 nameHash = keccak256(abi.encodePacked(NFTName));\r\n        for(uint i=0;i<TokenForSale.length();i++){\r\n            uint NFTID=TokenForSale.at(i);    \r\n            if(keccak256(abi.encodePacked(NFTPrototypes[NFTs[NFTID]].Name))==nameHash){         \r\n                uint newValue=getValue(NFTID);\r\n                if(newValue<cheapestValue){\r\n                    cheapestValue=newValue;\r\n                    buyID=NFTID;\r\n                }\r\n            }\r\n        }\r\n        require(cheapestValue<type(uint).max,\"no NFT for sale found\");\r\n        BuyNFT(buyID);\r\n    }  \r\n        //Iterates over all NFTs to find the cheapest NFT with the given name\r\n    function BuyCheapestNFT() external payable{\r\n        uint buyID;\r\n        uint cheapestValue = type(uint).max;\r\n        for(uint i=0;i<TokenForSale.length();i++){\r\n            uint NFTID=TokenForSale.at(i);    \r\n                uint newValue=getValue(NFTID);\r\n                if(newValue<cheapestValue){\r\n                    cheapestValue=newValue;\r\n                    buyID=NFTID;\r\n            }\r\n        }\r\n        require(cheapestValue<type(uint).max,\"no NFT for sale in this rarity found\");\r\n        BuyNFT(buyID);\r\n    }  \r\n \r\n    function BuyMostExpensiveNFT() external payable{\r\n        uint buyID;\r\n        uint mostExpensiveValue = 0;\r\n        for(uint i=0;i<TokenForSale.length();i++){\r\n            uint NFTID=TokenForSale.at(i);    \r\n                uint newValue=getValue(NFTID);\r\n                if(newValue>mostExpensiveValue){\r\n                    mostExpensiveValue=newValue;\r\n                    buyID=NFTID;\r\n            }\r\n        }\r\n        require(mostExpensiveValue>0,\"no NFT for sale found\");\r\n        BuyNFT(buyID);\r\n    }  \r\n    \r\n    function BuyNFT(uint256 ID) public payable isInFunction{\r\n        //Locked NFTs can't be traded\r\n        require(isNFTForSale(ID),\"NFT is Locked\");\r\n        uint256 Value=getValue(ID);\r\n        uint256 TaxedValue=Value*(1000-Taxes)/1000;\r\n        require(msg.value>=Value,\"not enough BNB to buy NFT\");\r\n\r\n        address oldOwner=ownerOf(ID);\r\n        bool sent;\r\n        (sent,)=oldOwner.call{value:TaxedValue}(\"\");\r\n        require(sent);\r\n        _transfer(oldOwner,msg.sender,ID);\r\n        \r\n        if(msg.value>Value){\r\n            //transfer back excess funds\r\n            (sent,)=msg.sender.call{value: msg.value-Value}(\"\");\r\n            require(sent);\r\n        }\r\n\r\n        _distributeBNB(Value);\r\n    }\r\n\r\n    \r\n    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    //NFTPresale//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// \r\n    bool public SaleOpen;  \r\n    function OwnerSetSale(bool Open) external onlyOwner{\r\n        SaleOpen=Open;\r\n    }\r\n    function OwnerIncreaseNFTMintCount(uint NewCount) external onlyOwner{\r\n        MaxNFTCount=NewCount;\r\n    }\r\n    uint256 public MaxNFTCount=5000;\r\n\r\n    event BatchMint(uint Count, uint StartIndex, uint[] PrototypeIDs,address account);\r\n    function PresalePurchase() public payable isInFunction{\r\n        require(!msg.sender.isContract(),\"no Contracts allowed\");\r\n        require(SaleOpen,\"Sale not yet open\");\r\n        uint256 presalePurchases=msg.value/currentValue;\r\n        require(presalePurchases>0,\"Not enough BNB sent\");\r\n        require(NFTHolders.length+presalePurchases<=MaxNFTCount);\r\n        uint[] memory MintedIDs=new uint[](presalePurchases);\r\n        for(uint i=0;i<presalePurchases;i++){\r\n            MintedIDs[i]=_mint(msg.sender,i);\r\n        }\r\n        _recalculateShares(msg.sender);\r\n        uint256 remainder=msg.value%presalePurchases;\r\n        if(remainder>0){\r\n            (bool sent,)=msg.sender.call{value:remainder}(\"\");\r\n            require(sent,\"send failed\");\r\n        }\r\n        _distributeBNB(msg.value-remainder);\r\n        if(presalePurchases>1)\r\n            emit BatchMint(presalePurchases,NFTs.length-presalePurchases,MintedIDs,msg.sender);\r\n    }\r\n\r\n    receive() external payable {\r\n        if(msg.sender==address(BMPCS)||msg.sender==address(BM)) \r\n            return;\r\n        PresalePurchase();\r\n    }\r\n\r\n    function _prng(uint256 modulo,uint256 seed) private view returns(uint256) {\r\n\r\n        uint256 WBNBBalance = address(0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c).balance;\r\n        \r\n        //generates a PseudoRandomNumber\r\n        uint256 randomResult = uint256(keccak256(abi.encodePacked(\r\n            WBNBBalance + \r\n            seed +\r\n            block.timestamp + \r\n            block.difficulty +\r\n            block.gaslimit\r\n            ))) % modulo;\r\n            \r\n        return randomResult;    \r\n    }\r\n    \r\n    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    //Public View//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////     \r\n    function getSharesOfNFT(uint256 ID) public view returns(uint256){\r\n        require(_exists(ID));\r\n        return 2**(NFTs[ID]/5);\r\n    }\r\n    function getValue(uint256 ID) public view returns (uint256){\r\n        require(_exists(ID));\r\n        if(NFTValue[ID]==0)   \r\n           return currentValue*getSharesOfNFT(ID);\r\n        \r\n        return NFTValue[ID];\r\n    }\r\n    function getNFTInfo(uint256 ID) public view returns(string memory name_, string memory uri_, address holder_, Rarity rarity){\r\n        NFTData memory data=NFTPrototypes[NFTs[ID]];\r\n        return(data.Name, data.URI, NFTHolders[ID], data.rarity);\r\n    }\r\n    function getNFTForSaleAt(uint256 ID) public view returns(uint){\r\n        return TokenForSale.at(ID);\r\n    }  \r\n    function isNFTForSale(uint256 NFTID) public view returns (bool){\r\n        require(_exists(NFTID),\"NFT doesn't exist\");\r\n        return TokenForSale.contains(NFTID);\r\n    }   \r\n    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    //ERC721//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    function transferFrom(address from, address to, uint256 tokenId) external override{\r\n        require(_isApprovedOrOwner(msg.sender, tokenId), \"Not owner nor approved\");\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) external override{\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public override{\r\n        require(_isApprovedOrOwner(msg.sender, tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n        _safeTransfer(from, to, tokenId, _data);\r\n    }\r\n\r\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) private {\r\n        _transfer(from, to, tokenId);\r\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n    \r\n\r\n    function getUniqueCountOfRarity(uint8 rarity, address account) public view returns(uint){\r\n        uint[] memory counts=NFTHold[account];\r\n        uint count;\r\n        for(uint i=0;i<counts.length;i++){\r\n            if(uint8(NFTPrototypes[i].rarity)==rarity){\r\n                if(counts[i]>0)\r\n                count++;\r\n            }\r\n        }\r\n        return count; \r\n    }\r\n    function getTotalCountOfRarity(uint8 rarity, address account) public view returns(uint){\r\n        uint[] memory counts=NFTHold[account];\r\n        uint count;\r\n        for(uint i=0;i<counts.length;i++){\r\n            if(uint8(NFTPrototypes[i].rarity)==rarity)\r\n            count+=counts[i];\r\n        }\r\n        return count; \r\n    }\r\n    function getUniqueCount(address account) public view returns(uint){\r\n        uint[] memory counts=NFTHold[account];\r\n        uint count;\r\n        for(uint i=0;i<counts.length;i++){\r\n            if(counts[i]>0)count++;\r\n        }\r\n        return count; \r\n    }\r\n\r\n    event Mint(address to, uint ID, uint PrototypeID);\r\n    uint public MintedCommon;\r\n    uint public MintedUncommon;\r\n    uint public MintedRare;\r\n    uint public MintedEpic;\r\n    uint public MintedLegendary;\r\n    mapping (address=>uint[]) public NFTHold;\r\n    function _setNFTHold(address account, uint ID, bool Add) private{\r\n        uint[] memory AccountNFTs=NFTHold[account];\r\n        if(AccountNFTs.length==0) AccountNFTs=new uint[](NFTPrototypes.length);\r\n\r\n        if(Add) AccountNFTs[ID]++;\r\n        else AccountNFTs[ID]--;\r\n\r\n        NFTHold[account]=AccountNFTs;\r\n    }\r\n    function _recalculateShares(address account) private{\r\n        //Removes previous Shares\r\n        totalShares-=shares[account];\r\n        uint[] memory counts=NFTHold[account];\r\n        uint totalNewShares=0;\r\n        uint totalSharesOfRarity=0;\r\n        bool HasAll=true;\r\n        bool HasAllRarities=true;\r\n        //iterates through all NFTs to get the shares\r\n        for(uint i=0;i<counts.length;i++){\r\n            uint count=counts[i];\r\n            if(count>0){\r\n                uint NewShares=getSharesOfNFT(i)*count;\r\n                totalSharesOfRarity+=NewShares;\r\n                totalNewShares+=NewShares;\r\n            } \r\n            else HasAll=false;\r\n\r\n            //Check on last NFT of rarity if all are collected;\r\n            if(i%5==4){\r\n                if(HasAll) totalNewShares+=totalSharesOfRarity*(i/5+1);\r\n                if(totalSharesOfRarity==0) HasAllRarities=false;\r\n                HasAll=true;\r\n                totalSharesOfRarity=0;\r\n            }\r\n        }\r\n        if(HasAllRarities)\r\n            totalNewShares*=2;\r\n        //Sets the new Shares;\r\n        totalShares+=totalNewShares;\r\n        shares[account]=totalNewShares;\r\n        paidOutShares[account]=totalNewShares*profitPerShare;\r\n    }\r\n\r\n\r\n\r\n    function _mint(address to, uint seed) private returns (uint){\r\n        uint value=_prng(1000, seed);\r\n        Rarity rarity;\r\n        if(value<10){           //1% drop rate\r\n            rarity=Rarity.Legendary;\r\n            MintedLegendary++;\r\n        } else if(value<60){   //5% drop rate\r\n             rarity=Rarity.Epic;\r\n             MintedEpic++;\r\n        }else if(value<160){    //10% drop rate\r\n           rarity=Rarity.Rare; \r\n           MintedRare++;\r\n        }else if(value<450){    //29% drop rate\r\n            rarity=Rarity.Uncommon;\r\n            MintedUncommon++;\r\n        }else{                  //55% drop rate\r\n            rarity=Rarity.Common;\r\n            MintedCommon++;\r\n        }\r\n        //Assigns one of the 5 designs per rarity\r\n        uint mintID=uint8(rarity)*5;\r\n        mintID+=value%5;\r\n\r\n        uint256 ID=NFTHolders.length;\r\n        NFTs.push(mintID);\r\n        ownerID.push(0);\r\n        NFTHolders.push(to);\r\n        _AddNFT(to,ID);\r\n        NFTValue.push(0);\r\n        emit Transfer(address(0),to,ID);\r\n        emit Mint(to, ID, mintID);\r\n        return mintID;\r\n    }\r\n    \r\n    function _transfer(address from, address to, uint256 tokenId) private {\r\n        require(ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\r\n        require(to != address(0), \"ERC721: transfer to the zero address\");\r\n        // Clear approvals from the previous owner\r\n        _approve(address(0), tokenId);\r\n        _RemoveNFT(from, tokenId);\r\n        _recalculateShares(from);\r\n        _AddNFT(to,tokenId);\r\n        _recalculateShares(to);\r\n        TokenForSale.remove(tokenId);\r\n        NFTValue[tokenId]=0;\r\n        emit Transfer(from, to, tokenId);\r\n    }\r\n    EnumerableSet.AddressSet holders;\r\n        //Adds NFT during transfer\r\n    function _AddNFT(address account, uint256 ID) private{\r\n        //the holderID of the NFT will be the last index of the ownerIDs\r\n        ownerID[ID]=balanceOf(account);\r\n        //the new NFT will be added as the last NFT of the holder\r\n        _tokenOfOwner[account].push(ID);\r\n        if(_tokenOfOwner[account].length==1)\r\n            holders.add(account);\r\n        NFTHolders[ID]=account;\r\n        //pays out dividents and sets new shares\r\n        if(getDividents(account)>0) _payout(account);\r\n        _setNFTHold(account,NFTs[ID],true);\r\n\r\n\r\n    }\r\n    //Removes NFT during transfer\r\n    function _RemoveNFT(address account, uint256 ID) private{\r\n        //the token the holder holds\r\n        uint256[] memory IDs=_tokenOfOwner[account];\r\n        //the Index of the token to be removed\r\n        uint256 TokenIndex=ownerID[ID];\r\n        //If token isn't the last token, reorder token\r\n        if(TokenIndex<IDs.length-1){\r\n            uint256 lastID=IDs[IDs.length-1];\r\n            _tokenOfOwner[account][TokenIndex]=lastID;\r\n        }\r\n        //Remove the Last token ID\r\n        _tokenOfOwner[account].pop();\r\n        if(_tokenOfOwner[account].length==0)\r\n            holders.remove(account);\r\n        //pays out dividents and sets new shares\r\n        if(getDividents(account)>0) _payout(account);\r\n        _setNFTHold(account,NFTs[ID],false);\r\n        //doesn't remove token, token gets transfered by Add token and therefore removed\r\n    }\r\n    \r\n    \r\n    //the total Supply is the same as the Length of holders\r\n    function totalSupply() external override view returns (uint256){\r\n        return NFTHolders.length;\r\n    }\r\n    //Index is always = token ID\r\n    function tokenByIndex(uint256 _index) external override view returns (uint256){\r\n        require(_exists(_index));\r\n        return _index;\r\n    }\r\n    \r\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\r\n        address owner = NFTHolders[tokenId];\r\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\r\n        return owner;\r\n    }\r\n    //returns the NFT ID of the owner at position\r\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) public override view returns (uint256){\r\n        return _tokenOfOwner[_owner][_index];\r\n    }\r\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\r\n        return NFTHolders.length>tokenId;\r\n    }\r\n    \r\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data) private returns (bool) {\r\n        if (to.isContract()) {\r\n            try IERC721Receiver(to).onERC721Received(msg.sender, from, tokenId, _data) returns (bytes4 retval) {\r\n                return retval == IERC721Receiver.onERC721Received.selector;\r\n            } catch (bytes memory reason) {\r\n                if (reason.length == 0) {\r\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\r\n                } else {\r\n                    assembly {\r\n                        revert(add(32, reason), mload(reason))\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n    \r\n    \r\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\r\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\r\n        address owner = ownerOf(tokenId);\r\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\r\n    } \r\n    \r\n    \r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return\r\n            interfaceId == type(IERC721).interfaceId ||\r\n            interfaceId == type(IERC721Metadata).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-balanceOf}.\r\n     */\r\n    function balanceOf(address owner) public view virtual override returns (uint256) {\r\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\r\n        return _tokenOfOwner[owner].length;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-name}.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-symbol}.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-tokenURI}.\r\n     */\r\n  //  function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n    //    require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\n  //      string memory currentURI=NFTs[tokenId].URI;\r\n  //      if(keccak256(abi.encodePacked((currentURI))) == keccak256(abi.encodePacked((\"\")))) return baseURI;\r\n  //      return NFTs[tokenId].URI;\r\n  //  }\r\n\r\n    function tokenURIOfPrototype(uint8 rarity) public view returns (string memory){\r\n        string memory _tokenURI = NFTPrototypes[rarity].URI;\r\n        string memory base = baseURI();\r\n        return string(abi.encodePacked(base, _tokenURI));\r\n    }\r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\n\r\n        string memory _tokenURI = NFTPrototypes[NFTs[tokenId]].URI;\r\n        string memory base = baseURI();\r\n        return string(abi.encodePacked(base, _tokenURI));\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    /**\r\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\r\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\r\n     * by default, can be overriden in child contracts.\r\n     */\r\n\r\n    function baseURI() public view virtual returns (string memory) {\r\n        return _baseURI;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-approve}.\r\n     */\r\n    function approve(address to, uint256 tokenId) public virtual override {\r\n        address owner = ownerOf(tokenId);\r\n        require(to != owner, \"ERC721: approval to current owner\");\r\n\r\n        require(\r\n            msg.sender == owner || isApprovedForAll(owner, msg.sender),\r\n            \"ERC721: approve caller is not owner nor approved for all\"\r\n        );\r\n\r\n        _approve(to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-getApproved}.\r\n     */\r\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\r\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) public virtual override {\r\n        require(operator != msg.sender, \"ERC721: approve to caller\");\r\n\r\n        _operatorApprovals[msg.sender][operator] = approved;\r\n        emit ApprovalForAll(msg.sender, operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n    function _approve(address to, uint256 tokenId) internal virtual {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(ownerOf(tokenId), to, tokenId);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Count\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"StartIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"PrototypeIDs\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"BatchMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"PrototypeID\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AccountClaimDividents\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"Airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BuyCheapestNFT\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BuyMostExpensiveNFT\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ID\",\"type\":\"uint256\"}],\"name\":\"BuyNFT\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"NFTName\",\"type\":\"string\"}],\"name\":\"BuyNFTByName\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum BurningMoonDividentNFT.Rarity\",\"name\":\"rarity\",\"type\":\"uint8\"}],\"name\":\"BuyNFTByRarity\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MaxNFTCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MintedCommon\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MintedEpic\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MintedLegendary\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MintedRare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MintedUncommon\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"NFTHold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"NFTs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"newURI\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"StartID\",\"type\":\"uint256\"}],\"name\":\"OwnerBatchSetURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OwnerClaimBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"NewCount\",\"type\":\"uint256\"}],\"name\":\"OwnerIncreaseNFTMintCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"airdrops\",\"type\":\"uint8\"}],\"name\":\"OwnerSetAirdropsPerClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"BMAddress\",\"type\":\"address\"}],\"name\":\"OwnerSetBM\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Router\",\"type\":\"address\"}],\"name\":\"OwnerSetBMRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newBaseURI\",\"type\":\"string\"}],\"name\":\"OwnerSetBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"Open\",\"type\":\"bool\"}],\"name\":\"OwnerSetSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"taxes\",\"type\":\"uint8\"}],\"name\":\"OwnerSetTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"OwnerSetToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Router\",\"type\":\"address\"}],\"name\":\"OwnerSetTokenRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"ID\",\"type\":\"uint256\"}],\"name\":\"OwnerSetURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"OwnerSetValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"OwnerTransferSacrifice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Payout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PresalePurchase\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SaleOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isForSale\",\"type\":\"bool\"}],\"name\":\"Sell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SellNextNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SellRemoveNextNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getDividents\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ID\",\"type\":\"uint256\"}],\"name\":\"getNFTForSaleAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ID\",\"type\":\"uint256\"}],\"name\":\"getNFTInfo\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"uri_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"holder_\",\"type\":\"address\"},{\"internalType\":\"enum BurningMoonDividentNFT.Rarity\",\"name\":\"rarity\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ID\",\"type\":\"uint256\"}],\"name\":\"getSharesOfNFT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"rarity\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getTotalCountOfRarity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getUniqueCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"rarity\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getUniqueCountOfRarity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ID\",\"type\":\"uint256\"}],\"name\":\"getValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"NFTID\",\"type\":\"uint256\"}],\"name\":\"isNFTForSale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"rarity\",\"type\":\"uint8\"}],\"name\":\"tokenURIOfPrototype\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BurningMoonDividentNFT", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://82b742546d91756cb66266879269af6a0e41ecc012f234dc20a1050a513e8556"}