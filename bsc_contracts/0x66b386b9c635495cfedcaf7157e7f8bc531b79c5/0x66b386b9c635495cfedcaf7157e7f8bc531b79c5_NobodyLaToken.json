{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.1;\r\n\r\ninterface IBEP20 {\r\n\t/**\r\n\t * @dev Returns the amount of tokens in existence.\r\n\t */\r\n\tfunction totalSupply() external view returns(uint256);\r\n\r\n\t/**\r\n\t * @dev Returns the token decimals.\r\n\t */\r\n\tfunction decimals() external view returns(uint8);\r\n\r\n\t/**\r\n\t * @dev Returns the token symbol.\r\n\t */\r\n\tfunction symbol() external view returns(string memory);\r\n\r\n\t/**\r\n\t * @dev Returns the token name.\r\n\t */\r\n\tfunction name() external view returns(string memory);\r\n\r\n\t/**\r\n\t * @dev Returns the bep token owner.\r\n\t */\r\n\tfunction getOwner() external view returns(address);\r\n\r\n\t/**\r\n\t * @dev Returns the amount of tokens owned by `account`.\r\n\t */\r\n\tfunction balanceOf(address account) external view returns(uint256);\r\n\r\n\t/**\r\n\t * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n\t *\r\n\t * Returns a boolean value indicating whether the operation succeeded.\r\n\t *\r\n\t * Emits a {Transfer} event.\r\n\t */\r\n\tfunction transfer(address recipient, uint256 amount)\r\n\texternal\r\n\treturns(bool);\r\n\r\n\t/**\r\n\t * @dev Returns the remaining number of tokens that `spender` will be\r\n\t * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n\t * zero by default.\r\n\t *\r\n\t * This value changes when {approve} or {transferFrom} are called.\r\n\t */\r\n\tfunction allowance(address _owner, address spender)\r\n\texternal\r\n\tview\r\n\treturns(uint256);\r\n\r\n\t/**\r\n\t * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n\t *\r\n\t * Returns a boolean value indicating whether the operation succeeded.\r\n\t *\r\n\t * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n\t * that someone may use both the old and the new allowance by unfortunate\r\n\t * transaction ordering. One possible solution to mitigate this race\r\n\t * condition is to first reduce the spender's allowance to 0 and set the\r\n\t * desired value afterwards:\r\n\t * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n\t *\r\n\t * Emits an {Approval} event.\r\n\t */\r\n\tfunction approve(address spender, uint256 amount) external returns(bool);\r\n\r\n\r\n\r\n\tfunction burn(uint256 amount) external returns(bool);\r\n\t/**\r\n\t * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n\t * allowance mechanism. `amount` is then deducted from the caller's\r\n\t * allowance.\r\n\t *\r\n\t * Returns a boolean value indicating whether the operation succeeded.\r\n\t *\r\n\t * Emits a {Transfer} event.\r\n\t */\r\n\tfunction transferFrom(\r\n\t\taddress sender,\r\n\t\taddress recipient,\r\n\t\tuint256 amount\r\n\t) external returns(bool);\r\n\r\n\t/**\r\n\t * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n\t * another (`to`).\r\n\t *\r\n\t * Note that `value` may be zero.\r\n\t */\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n\t/**\r\n\t * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n\t * a call to {approve}. `value` is the new allowance.\r\n\t */\r\n\tevent Approval(\r\n\t\taddress indexed owner,\r\n\t\taddress indexed spender,\r\n\t\tuint256 value\r\n\t);\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n\r\n\tfunction _msgSender() internal view returns(address) {\r\n\t\treturn msg.sender;\r\n\t}\r\n\r\n\tfunction _msgData() internal view returns(bytes memory) {\r\n\t\tthis\r\n\t\t; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n\t\treturn msg.data;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n\t/**\r\n\t * @dev Returns the addition of two unsigned integers, reverting on\r\n\t * overflow.\r\n\t *\r\n\t * Counterpart to Solidity's `+` operator.\r\n\t *\r\n\t * Requirements:\r\n\t * - Addition cannot overflow.\r\n\t */\r\n\tfunction add(uint256 a, uint256 b) internal pure returns(uint256) {\r\n\t\tuint256 c = a + b;\r\n\t\trequire(c >= a, \"SafeMath: addition overflow\");\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the subtraction of two unsigned integers, reverting on\r\n\t * overflow (when the result is negative).\r\n\t *\r\n\t * Counterpart to Solidity's `-` operator.\r\n\t *\r\n\t * Requirements:\r\n\t * - Subtraction cannot overflow.\r\n\t */\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns(uint256) {\r\n\t\treturn sub(a, b, \"SafeMath: subtraction overflow\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n\t * overflow (when the result is negative).\r\n\t *\r\n\t * Counterpart to Solidity's `-` operator.\r\n\t *\r\n\t * Requirements:\r\n\t * - Subtraction cannot overflow.\r\n\t */\r\n\tfunction sub(\r\n\t\tuint256 a,\r\n\t\tuint256 b,\r\n\t\tstring memory errorMessage\r\n\t) internal pure returns(uint256) {\r\n\t\trequire(b <= a, errorMessage);\r\n\t\tuint256 c = a - b;\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the multiplication of two unsigned integers, reverting on\r\n\t * overflow.\r\n\t *\r\n\t * Counterpart to Solidity's `*` operator.\r\n\t *\r\n\t * Requirements:\r\n\t * - Multiplication cannot overflow.\r\n\t */\r\n\tfunction mul(uint256 a, uint256 b) internal pure returns(uint256) {\r\n\t\t// Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n\t\t// benefit is lost if 'b' is also tested.\r\n\t\t// See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n\t\tif (a == 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\tuint256 c = a * b;\r\n\t\trequire(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the integer division of two unsigned integers. Reverts on\r\n\t * division by zero. The result is rounded towards zero.\r\n\t *\r\n\t * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n\t * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n\t * uses an invalid opcode to revert (consuming all remaining gas).\r\n\t *\r\n\t * Requirements:\r\n\t * - The divisor cannot be zero.\r\n\t */\r\n\tfunction div(uint256 a, uint256 b) internal pure returns(uint256) {\r\n\t\treturn div(a, b, \"SafeMath: division by zero\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n\t * division by zero. The result is rounded towards zero.\r\n\t *\r\n\t * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n\t * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n\t * uses an invalid opcode to revert (consuming all remaining gas).\r\n\t *\r\n\t * Requirements:\r\n\t * - The divisor cannot be zero.\r\n\t */\r\n\tfunction div(\r\n\t\tuint256 a,\r\n\t\tuint256 b,\r\n\t\tstring memory errorMessage\r\n\t) internal pure returns(uint256) {\r\n\t\t// Solidity only automatically asserts when dividing by 0\r\n\t\trequire(b > 0, errorMessage);\r\n\t\tuint256 c = a / b;\r\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n\t * Reverts when dividing by zero.\r\n\t *\r\n\t * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n\t * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n\t * invalid opcode to revert (consuming all remaining gas).\r\n\t *\r\n\t * Requirements:\r\n\t * - The divisor cannot be zero.\r\n\t */\r\n\tfunction mod(uint256 a, uint256 b) internal pure returns(uint256) {\r\n\t\treturn mod(a, b, \"SafeMath: modulo by zero\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n\t * Reverts with custom message when dividing by zero.\r\n\t *\r\n\t * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n\t * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n\t * invalid opcode to revert (consuming all remaining gas).\r\n\t *\r\n\t * Requirements:\r\n\t * - The divisor cannot be zero.\r\n\t */\r\n\tfunction mod(\r\n\t\tuint256 a,\r\n\t\tuint256 b,\r\n\t\tstring memory errorMessage\r\n\t) internal pure returns(uint256) {\r\n\t\trequire(b != 0, errorMessage);\r\n\t\treturn a % b;\r\n\t}\r\n}\r\n\r\n\r\ninterface IRouter {\r\n\tfunction factory() external pure returns(address);\r\n\r\n\tfunction WETH() external pure returns(address);\r\n\r\n\tfunction getAmountsOut(uint256 amountIn, address[] calldata path)\r\n\texternal\r\n\tview\r\n\treturns(uint256[] memory amounts);\r\n\r\n\tfunction addLiquidity(\r\n\t\taddress tokenA,\r\n\t\taddress tokenB,\r\n\t\tuint256 amountADesired,\r\n\t\tuint256 amountBDesired,\r\n\t\tuint256 amountAMin,\r\n\t\tuint256 amountBMin,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t) external returns(uint256 amountA, uint256 amountB, uint256 liquidity);\r\n\r\n\tfunction swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n\t\tuint amountIn,\r\n\t\tuint amountOutMin,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint deadline\r\n\t) external;\r\n}\r\n\r\ninterface IFactory {\r\n\tfunction createPair(address tokenA, address tokenB)\r\n\texternal\r\n\treturns(address PancakePair);\r\n}\r\n\r\ninterface IPair {\r\n\tfunction getReserves()\r\n\texternal\r\n\tview\r\n\treturns(\r\n\t\tuint112 reserve0,\r\n\t\tuint112 reserve1,\r\n\t\tuint32 blockTimestampLast\r\n\t);\r\n\r\n\tfunction token0() external view returns(address);\r\n\r\n\tfunction token1() external view returns(address);\r\n}\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n\taddress private _owner;\r\n\r\n\tevent OwnershipTransferred(\r\n\t\taddress indexed previousOwner,\r\n\t\taddress indexed newOwner\r\n\t);\r\n\r\n\t/**\r\n\t * @dev Initializes the contract setting the deployer as the initial owner.\r\n\t */\r\n\tconstructor() {\r\n\t\taddress msgSender = _msgSender();\r\n\t\t_owner = msgSender;\r\n\t\temit OwnershipTransferred(address(0), msgSender);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the address of the current owner.\r\n\t */\r\n\tfunction owner() public view returns(address) {\r\n\t\treturn _owner;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Throws if called by any account other than the owner.\r\n\t */\r\n\tmodifier onlyOwner() {\r\n\t\trequire(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Leaves the contract without owner. It will not be possible to call\r\n\t * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n\t *\r\n\t * NOTE: Renouncing ownership will leave the contract without an owner,\r\n\t * thereby removing any functionality that is only available to the owner.\r\n\t */\r\n\tfunction renounceOwnership() public onlyOwner {\r\n\t\temit OwnershipTransferred(_owner, address(0));\r\n\t\t_owner = address(0);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n\t * Can only be called by the current owner.\r\n\t */\r\n\tfunction transferOwnership(address newOwner) public onlyOwner {\r\n\t\t_transferOwnership(newOwner);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n\t */\r\n\tfunction _transferOwnership(address newOwner) internal {\r\n\t\trequire(\r\n\t\t\tnewOwner != address(0),\r\n\t\t\t\"Ownable: new owner is the zero address\"\r\n\t\t);\r\n\t\temit OwnershipTransferred(_owner, newOwner);\r\n\t\t_owner = newOwner;\r\n\t}\r\n}\r\n\r\ncontract PancakeTool {\r\n\taddress public PancakePair;\r\n\tIRouter internal PancakeV2Router;\r\n\t\r\n\tfunction initIRouter(address router,address pair) internal {\r\n\t\tPancakeV2Router = IRouter(router);\r\n\t\tPancakePair = IFactory(PancakeV2Router.factory()).createPair(\r\n\t\t\taddress(this),\r\n\t\t\tpair\r\n\t\t);\r\n\t}\r\n\r\n\tfunction addLiquidity(\r\n\t\taddress tokenA,\r\n\t\taddress tokenB,\r\n\t\tuint256 amountA,\r\n\t\tuint256 amountB\r\n\t) internal {\r\n\t\tPancakeV2Router.addLiquidity(\r\n\t\t\ttokenA,\r\n\t\t\ttokenB,\r\n\t\t\tamountA,\r\n\t\t\tamountB,\r\n\t\t\t0,\r\n\t\t\t0,\r\n\t\t\taddress(0x0),\r\n\t\t\tblock.timestamp\r\n\t\t);\r\n\t}\r\n\r\n\tfunction swapTokensForTokens(uint256 amountA,address tokenB , address to) internal {\r\n\t\taddress[] memory path = new address[](2);\r\n\t\tpath[0] = address(this);\r\n\t\tpath[1] = tokenB;\r\n\t\tPancakeV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n\t\t\tamountA,\r\n\t\t\t0,\r\n\t\t\tpath,\r\n\t\t\tto,\r\n\t\t\tblock.timestamp\r\n\t\t);\r\n\t}\r\n\r\n\tfunction getPoolInfo()\r\n\tpublic\r\n\tview\r\n\treturns(uint112 WETHAmount, uint112 TOKENAmount) {\r\n\t\t(uint112 _reserve0, uint112 _reserve1, ) = IPair(PancakePair)\r\n\t\t\t.getReserves();\r\n\t\tWETHAmount = _reserve1;\r\n\t\tTOKENAmount = _reserve0;\r\n\t\tif (IPair(PancakePair).token0() == PancakeV2Router.WETH()) {\r\n\t\t\tWETHAmount = _reserve0;\r\n\t\t\tTOKENAmount = _reserve1;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction getLPTotal(address user) internal view returns(uint256) {\r\n\t\treturn IBEP20(PancakePair).balanceOf(user);\r\n\t}\r\n\r\n\tfunction getTotalSupply() internal view returns(uint256) {\r\n\t\treturn IBEP20(PancakePair).totalSupply();\r\n\t}\r\n}\r\n\r\ncontract TokenDistributor {\r\n\tconstructor(address token) {\r\n\t\tIBEP20(token).approve(msg.sender, uint256(~uint256(0)));\r\n\t}\r\n}\r\n\r\ncontract NobodyLaToken is Context, IBEP20, Ownable, PancakeTool {\r\n\tusing SafeMath\r\n\tfor uint256;\r\n\r\n\tmapping(address => uint256) private _balances;\r\n\r\n\tmapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n\tuint256 private _totalSupply;\r\n\tuint8 public _decimals;\r\n\tstring public _symbol;\r\n\tstring public _name;\r\n\r\n\tuint256 private shareSize = 0;\r\n\r\n    address private USDT = 0x55d398326f99059fF775485246999027B3197955;\r\n\taddress private pancakeRouter = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n\taddress public walletM = 0x16799554DE451C47625D993B4aB2820e86E71994;\r\n\taddress private unLockPool = 0xeC013ae8336926679C534695B29AfE99e8101000;\r\n\r\n\taddress private initPoolHolder;\r\n\r\n\tuint256 public _fund;\r\n\tuint256 public _backflow;\r\n\r\n\taddress public lastSender;\r\n\taddress public lastRecipient;\r\n\r\n\tuint8 private _cPercent = 40;\r\n\tuint8 private _iPercent = 30;\r\n\tuint8 private _mPercent = 10;\r\n\tuint8 private _Percent = 80;\r\n\tuint8 private _Fee = _Percent - _iPercent;\r\n\r\n\tuint256 private divBase = 1000;\r\n\tuint256 private tokenSize = 1000000000000000000;\r\n\t\r\n\tuint256 public constant  TIME_LIMIT = 86400;\r\n\tuint256 private rewardMin = 100000000000000000;\r\n\tuint256 private swapMin = 400000 * tokenSize;\r\n\r\n\tuint256 private startIndex = 0;\r\n\tuint256 private interval = 10;\r\n\r\n\r\n\tuint256 public _lpHolderTotal;\r\n\tmapping(address => bool) public isLpHolders;\r\n\tmapping(uint256 => address) private _lpHolders;\r\n\r\n\tbool public unLock;\r\n\tuint256 public unLockTime;\r\n\r\n\tbool swapLocking;\r\n\r\n\tmodifier lockTheSwap() {\r\n\t\tswapLocking = true;\r\n\t\t_;\r\n\t\tswapLocking = false;\r\n\t}\r\n\r\n\r\n\tTokenDistributor private _distSwap; \r\n\tTokenDistributor private _distBack;\r\n\r\n\tconstructor() {\r\n\t\t_name = \"NobodyLa Token\";\r\n\t\t_symbol = \"NobodyLa\";\r\n\t\t_decimals = 18;\r\n\t\t_totalSupply = 1000000000 * tokenSize;\r\n\t\t_balances[msg.sender] = _totalSupply;\r\n\r\n\t\t_distSwap = new TokenDistributor(USDT);\r\n\t\t_distBack = new TokenDistributor(USDT);\r\n\r\n\t\tinitIRouter(pancakeRouter,USDT);\r\n\r\n\t\tinitPoolHolder = msg.sender;\r\n\t\t\r\n\t\t_approve(address(this), pancakeRouter, ~uint256(0));\r\n\t\t_approve(owner(), pancakeRouter, ~uint256(0));\r\n\r\n\t\tIBEP20(USDT).approve(pancakeRouter, ~uint256(0));\r\n\r\n\t\temit Transfer(address(0), msg.sender, _totalSupply);\r\n\t}\r\n\r\n\t\r\n\t/**\r\n\t * @dev Returns the bep token owner.\r\n\t */\r\n\tfunction getOwner() override external view returns(address) {\r\n\t\treturn owner();\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the token decimals.\r\n\t */\r\n\tfunction decimals() override external view returns(uint8) {\r\n\t\treturn _decimals;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the token symbol.\r\n\t */\r\n\tfunction symbol() override external view returns(string memory) {\r\n\t\treturn _symbol;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the token name.\r\n\t */\r\n\tfunction name() override external view returns(string memory) {\r\n\t\treturn _name;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {BEP20-totalSupply}.\r\n\t */\r\n\tfunction totalSupply() override external view returns(uint256) {\r\n\t\treturn _totalSupply;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {BEP20-balanceOf}.\r\n\t */\r\n\tfunction balanceOf(address account) override external view returns(uint256) {\r\n\t\treturn _balances[account];\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {BEP20-transfer}.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `recipient` cannot be the zero address.\r\n\t * - the caller must have a balance of at least `amount`.\r\n\t */\r\n\r\n\r\n\tfunction transfer(address recipient, uint256 amount) override\r\n\texternal\r\n\treturns(bool) {\r\n\t\t_transfer(_msgSender(), recipient, amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {BEP20-allowance}.\r\n\t */\r\n\tfunction allowance(address owner, address spender)\r\n\toverride external\r\n\tview\r\n\treturns(uint256) {\r\n\t\treturn _allowances[owner][spender];\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {BEP20-approve}.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `spender` cannot be the zero address.\r\n\t */\r\n\tfunction approve(address spender, uint256 amount) override external returns(bool) {\r\n\t\t_approve(_msgSender(), spender, amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {BEP20-transferFrom}.\r\n\t *\r\n\t * Emits an {Approval} event indicating the updated allowance. This is not\r\n\t * required by the EIP. See the note at the beginning of {BEP20};\r\n\t *\r\n\t * Requirements:\r\n\t * - `sender` and `recipient` cannot be the zero address.\r\n\t * - `sender` must have a balance of at least `amount`.\r\n\t * - the caller must have allowance for `sender`'s tokens of at least\r\n\t * `amount`.\r\n\t */\r\n\tfunction transferFrom(\r\n\t\taddress sender,\r\n\t\taddress recipient,\r\n\t\tuint256 amount\r\n\t) override external returns(bool) {\r\n\t\t_transfer(sender, recipient, amount);\r\n\t\t_approve(\r\n\t\t\tsender,\r\n\t\t\t_msgSender(),\r\n\t\t\t_allowances[sender][_msgSender()].sub(\r\n\t\t\t\tamount,\r\n\t\t\t\t\"BEP20: transfer amount exceeds allowance\"\r\n\t\t\t)\r\n\t\t);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n\t *\r\n\t * This is an alternative to {approve} that can be used as a mitigation for\r\n\t * problems described in {BEP20-approve}.\r\n\t *\r\n\t * Emits an {Approval} event indicating the updated allowance.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `spender` cannot be the zero address.\r\n\t */\r\n\tfunction increaseAllowance(address spender, uint256 addedValue)\r\n\tpublic\r\n\treturns(bool) {\r\n\t\t_approve(\r\n\t\t\t_msgSender(),\r\n\t\t\tspender,\r\n\t\t\t_allowances[_msgSender()][spender].add(addedValue)\r\n\t\t);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n\t *\r\n\t * This is an alternative to {approve} that can be used as a mitigation for\r\n\t * problems described in {BEP20-approve}.\r\n\t *\r\n\t * Emits an {Approval} event indicating the updated allowance.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `spender` cannot be the zero address.\r\n\t * - `spender` must have allowance for the caller of at least\r\n\t * `subtractedValue`.\r\n\t */\r\n\tfunction decreaseAllowance(address spender, uint256 subtractedValue)\r\n\tpublic\r\n\treturns(bool) {\r\n\t\t_approve(\r\n\t\t\t_msgSender(),\r\n\t\t\tspender,\r\n\t\t\t_allowances[_msgSender()][spender].sub(\r\n\t\t\t\tsubtractedValue,\r\n\t\t\t\t\"BEP20: decreased allowance below zero\"\r\n\t\t\t)\r\n\t\t);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Burn `amount` tokens and decreasing the total supply.\r\n\t */\r\n\tfunction burn(uint256 amount) public returns(bool) {\r\n\t\t_burn(_msgSender(), amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\r\n\r\n\tfunction getTokens() public view returns(address[2] memory adds) {\r\n        adds[0] = address(_distSwap);\r\n        adds[1] = address(_distBack);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n\t *\r\n\t * This is internal function is equivalent to {transfer}, and can be used to\r\n\t * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n\t *\r\n\t * Emits a {Transfer} event.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `sender` cannot be the zero address.\r\n\t * - `recipient` cannot be the zero address.\r\n\t * - `sender` must have a balance of at least `amount`.\r\n\t */\r\n\tfunction _transfer(\r\n\t\taddress sender,\r\n\t\taddress recipient,\r\n\t\tuint256 amount\r\n\t) internal {\t\r\n\t\trequire(sender != address(0), \"BEP20: transfer from the zero address\");\r\n\t\trequire(recipient != address(0), \"BEP20: transfer to the zero address\");\r\n\t\tif (_balances[address(this)] > 0 && sender != PancakePair && !swapLocking) { swapAndbackflow(); }\r\n\r\n\t\tif (swapLocking) {\r\n\t\t\t_balances[sender] = _balances[sender].sub(\r\n\t\t\t\tamount,\r\n\t\t\t\t\"BEP20: transfer amount exceeds balance\"\r\n\t\t\t);\r\n\t\t\t_balances[recipient] = _balances[recipient].add(amount);\r\n\t\t\temit Transfer(sender, recipient, amount);\r\n\t\t} else {\r\n\t\t\t_beforeTransfer(sender,recipient,amount);\r\n\r\n\t\t\t_balances[sender] = _balances[sender].sub(\r\n\t\t\t\tamount,\r\n\t\t\t\t\"BEP20: transfer amount exceeds balance\"\r\n\t\t\t);\r\n\r\n\t\t\tif (sender != owner() && sender != address(this) && recipient != address(this) && recipient != owner()) {\r\n\t\t\t\tuint256 totalFee = (amount / divBase) * _Percent;\r\n\t\t\t\t_balances[address(this)] = _balances[address(this)].add(totalFee);\r\n\t\t\t\temit Transfer(sender, address(this), totalFee);\r\n\t\t\t\tamount = amount.sub(totalFee);\r\n\t\t\t}\r\n\r\n\t\t\t_balances[recipient] = _balances[recipient].add(amount);\r\n\t\t\temit Transfer(sender, recipient, amount);\r\n\r\n\t\t\t_afterTransfer(sender, recipient);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction _beforeTransfer(address sender,address recipient,uint256 amount) internal {\r\n\t\tif (lastRecipient != address(0)) {\r\n\t\t\tif (!isLpHolders[lastRecipient] && super.getLPTotal(lastRecipient) > 0) {\r\n\t\t\t\tisLpHolders[lastRecipient] = true;\r\n\t\t\t\t_lpHolders[_lpHolderTotal] = lastRecipient;\r\n\t\t\t\t_lpHolderTotal = _lpHolderTotal.add(1);\r\n\t\t\t}\r\n\t\t\tdelete lastRecipient;\r\n\t\t}\r\n\r\n\t\tif (lastSender != address(0)) {\r\n\t\t\tif (!isLpHolders[lastSender] && super.getLPTotal(lastSender) > 0) {\r\n\t\t\t\tisLpHolders[lastSender] = true;\r\n\t\t\t\t_lpHolders[_lpHolderTotal] = lastSender;\r\n\t\t\t\t_lpHolderTotal = _lpHolderTotal.add(1);\r\n\t\t\t}\r\n\t\t\tdelete lastSender;\r\n\t\t}\r\n\r\n\t\tif (sender == initPoolHolder || sender == address(this) || recipient == initPoolHolder) {\r\n            return;\r\n        }\r\n\r\n\t\tif(recipient == unLockPool && unLockTime == 0){\r\n\t\t\tunLock = true;\r\n\t\t\tunLockTime = block.timestamp;\r\n\t\t}\t\r\n\r\n\t\trequire(unLock,\"Can't buy\");\r\n\t\tif(block.timestamp - unLockTime <= TIME_LIMIT){\r\n\t\t\tif (recipient == tx.origin && recipient != initPoolHolder) {\r\n\t\t\t\trequire(amount <= 2000000 * tokenSize && _balances[recipient] <= 10000000 * tokenSize);\r\n        \t}\r\n\r\n\t\t\tif (sender == tx.origin && sender != initPoolHolder) {\r\n\t\t\t\trequire(amount <= 2000000 * tokenSize);\r\n\t\t\t\trequire(amount <= (_balances[sender] / divBase) * 999);\r\n\t\t\t}\r\n\t\t}else{\r\n\t\t\tif (sender == tx.origin && sender != initPoolHolder) {\r\n\t\t\t\trequire(amount <= (_balances[sender] / divBase) * 999);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tfunction _afterTransfer(address sender, address recipient) internal {\r\n\t\tif (sender == tx.origin &&\r\n\t\t\t!isLpHolders[sender] &&\r\n\t\t\tsender != initPoolHolder &&\r\n\t\t\tsender != walletM\r\n\t\t) {\r\n\t\t\tlastSender = sender;\r\n\t\t}\r\n\r\n\t\tif (recipient == tx.origin &&\r\n\t\t\t!isLpHolders[recipient] &&\r\n\t\t\trecipient != initPoolHolder &&\r\n\t\t\trecipient != walletM\r\n\t\t) {\r\n\t\t\tlastRecipient = recipient;\r\n\t\t}\r\n\t\t//Increase impact reward\r\n\t\trewardLiquidity();\r\n\t}\r\n\r\n\tfunction swapAndbackflow() private lockTheSwap {\r\n        uint256 balance = _balances[address(this)];\r\n\t\tif (_balances[PancakePair] / 100 < balance) balance = _balances[PancakePair] / 100;\r\n\t\tif(balance >= swapMin){\r\n            swapTokensForUSDT(balance * _Fee / _Percent);\r\n            backflow(balance * _iPercent / _Percent);\r\n       }\r\n\t}\r\n\r\n\tfunction swapTokensForUSDT(uint256 amount) private{\r\n\t\tuint256 oldBalance = IBEP20(USDT).balanceOf(address(this));\r\n\t\tswapTokensForTokens(amount, USDT, address(_distSwap));\r\n\r\n\t\tIBEP20(USDT).transferFrom(\r\n\t\t\taddress(_distSwap),\r\n\t\t\taddress(this),\r\n\t\t\tIBEP20(USDT).balanceOf(address(_distSwap))\r\n\t\t);\r\n\r\n\t\tuint256 riseBalance = IBEP20(USDT).balanceOf(address(this)) - oldBalance;\r\n\t\t_fund = _fund.add(calculateReward(_Fee, riseBalance, _cPercent));\r\n\r\n\t\tTransferUSDT(walletM, calculateReward(_Fee, riseBalance, _mPercent));\r\n\t}\r\n\r\n\tfunction backflow(uint256 amount) private{\r\n        uint256 half = amount.div(2);\r\n        uint256 otherHalf = amount.sub(half);\r\n        uint256 oldBalance = IBEP20(USDT).balanceOf(address(this));\r\n\r\n        swapTokensForTokens(half, USDT, address(_distBack));\r\n\r\n        IBEP20(USDT).transferFrom(\r\n            address(_distBack),\r\n            address(this),\r\n            IBEP20(USDT).balanceOf(address(_distBack))\r\n        );\r\n        \r\n        uint256 riseBalance = IBEP20(USDT).balanceOf(address(this)) - oldBalance;\r\n        addLiquidity(address(this), USDT, otherHalf, riseBalance);\r\n\t}\r\n\r\n\tfunction rewardLiquidity() private  {\r\n\t\t// exclude initial pool holder and locked part.\r\n\t\tuint256 pool = super.getTotalSupply() - (super.getLPTotal(initPoolHolder) + super.getLPTotal(address(0)));\r\n\t\tuint256 reward = _fund;\r\n\t\tif (reward >= rewardMin) { \r\n\t\t\tfor (uint256 index = startIndex; index < _lpHolderTotal; index++) {\r\n\t\t\t\taddress account = _lpHolders[index];\r\n\t\t\t\tuint256 LPHolders = super.getLPTotal(account);\r\n\t\t\t\tif (LPHolders > 0) {\r\n\t\t\t\t\tuint256 r = calculateReward(pool, reward, LPHolders);\r\n\t\t\t\t\t_fund = _fund.sub(r);\r\n\t\t\t\t\tTransferUSDT(account, r);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (index == _lpHolderTotal - 1) {\r\n\t\t\t\t\tstartIndex = 0;\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (index - startIndex == interval) {\r\n\t\t\t\t\tstartIndex += interval;\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n    function changeSwapMin(uint256 min) public returns(bool){\r\n\t\trequire(msg.sender == unLockPool);\r\n        swapMin = min * tokenSize;\r\n        return true;\r\n    }\r\n\r\n\r\n\tfunction calculateReward(\r\n\t\tuint256 total,\r\n\t\tuint256 reward,\r\n\t\tuint256 holders\r\n\t) internal view returns(uint256) {\r\n\t\treturn (reward * ((holders * tokenSize) / total)) / tokenSize;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @dev Destroys `amount` tokens from `account`, reducing the\r\n\t * total supply.\r\n\t *\r\n\t * Emits a {Transfer} event with `to` set to the zero address.\r\n\t *\r\n\t * Requirements\r\n\t *\r\n\t * - `account` cannot be the zero address.\r\n\t * - `account` must have at least `amount` tokens.\r\n\t */\r\n\tfunction _burn(address account, uint256 amount) internal {\r\n\t\trequire(account != address(0), \"BEP20: burn from the zero address\");\r\n\r\n\t\t_balances[account] = _balances[account].sub(\r\n\t\t\tamount,\r\n\t\t\t\"BEP20: burn amount exceeds balance\"\r\n\t\t);\r\n\t\t_totalSupply = _totalSupply.sub(amount);\r\n\t\temit Transfer(account, address(0), amount);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n\t *\r\n\t * This is internal function is equivalent to `approve`, and can be used to\r\n\t * e.g. set automatic allowances for certain subsystems, etc.\r\n\t *\r\n\t * Emits an {Approval} event.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `owner` cannot be the zero address.\r\n\t * - `spender` cannot be the zero address.\r\n\t */\r\n\tfunction _approve(\r\n\t\taddress owner,\r\n\t\taddress spender,\r\n\t\tuint256 amount\r\n\t) internal {\r\n\t\trequire(owner != address(0), \"BEP20: approve from the zero address\");\r\n\t\trequire(spender != address(0), \"BEP20: approve to the zero address\");\r\n\r\n\t\t_allowances[owner][spender] = amount;\r\n\t\temit Approval(owner, spender, amount);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\r\n\t * from the caller's allowance.\r\n\t *\r\n\t * See {_burn} and {_approve}.\r\n\t */\r\n\tfunction _burnFrom(address account, uint256 amount) internal {\r\n\t\t_burn(account, amount);\r\n\t\t_approve(\r\n\t\t\taccount,\r\n\t\t\t_msgSender(),\r\n\t\t\t_allowances[account][_msgSender()].sub(\r\n\t\t\t\tamount,\r\n\t\t\t\t\"BEP20: burn amount exceeds allowance\"\r\n\t\t\t)\r\n\t\t);\r\n\t}\r\n\r\n\tfunction batchTransfer(uint256 amount, address[] memory to) public {\r\n\t\tfor (uint256 i = 0; i < to.length; i++) {\r\n\t\t\t_transfer(_msgSender(), to[i], amount);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\r\n\r\n\tfunction TransferUSDT(address account, uint256 amount) private {\r\n\t\tIBEP20(USDT).transfer(account, amount);\r\n\t}\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PancakePair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TIME_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_backflow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_fund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lpHolderTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"}],\"name\":\"batchTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"}],\"name\":\"changeSwapMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolInfo\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"WETHAmount\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"TOKENAmount\",\"type\":\"uint112\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokens\",\"outputs\":[{\"internalType\":\"address[2]\",\"name\":\"adds\",\"type\":\"address[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isLpHolders\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unLock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unLockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletM\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "NobodyLaToken", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://9eea128fb1a3c1e2bb2d86cd960170340153b9ddd52515a6b3927ed10aa2854d"}