{"SourceCode": "// SPDX-License-Identifier: AGPL-3.0-or-later\r\n// File: contracts/IDistributor.sol\r\n\r\n\r\npragma solidity 0.7.5;\r\n\r\ninterface IDistributor {\r\n    function distribute() external returns ( bool );\r\n}\r\n// File: contracts/IWarmup.sol\r\n\r\n\r\npragma solidity 0.7.5;\r\n\r\n\r\ninterface IWarmup {\r\n    function retrieve( address staker_, uint amount_ ) external;\r\n}\r\n\r\n// File: contracts/IsOHM.sol\r\n\r\n\r\npragma solidity 0.7.5;\r\n\r\n\r\n\r\ninterface IsOHM {\r\n    function rebase( uint256 ohmProfit_, uint epoch_) external returns (uint256);\r\n\r\n    function circulatingSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function gonsForBalance( uint amount ) external view returns ( uint );\r\n\r\n    function balanceForGons( uint gons ) external view returns ( uint );\r\n    \r\n    function index() external view returns ( uint );\r\n}\r\n\r\n// File: contracts/IOwnable.sol\r\n\r\n\r\npragma solidity 0.7.5;\r\n\r\ninterface IOwnable {\r\n  function policy() external view returns (address);\r\n\r\n  function renounceManagement() external;\r\n  \r\n  function pushManagement( address newOwner_ ) external;\r\n  \r\n  function pullManagement() external;\r\n}\r\n// File: contracts/Ownable.sol\r\n\r\n\r\npragma solidity 0.7.5;\r\n\r\n\r\ncontract Ownable is IOwnable {\r\n\r\n    address internal _owner;\r\n    address internal _newOwner;\r\n\r\n    event OwnershipPushed(address indexed previousOwner, address indexed newOwner);\r\n    event OwnershipPulled(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        _owner = msg.sender;\r\n        emit OwnershipPushed( address(0), _owner );\r\n    }\r\n\r\n    function policy() public view override returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyPolicy() {\r\n        require( _owner == msg.sender, \"Ownable: caller is not the owner\" );\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require( _owner == msg.sender, \"Ownable: caller is not the owner\" );\r\n        _;\r\n    }\r\n\r\n    modifier onlyManager() {\r\n        require( _owner == msg.sender, \"Ownable: caller is not the owner\" );\r\n        _;\r\n    }\r\n\r\n    function renounceManagement() public virtual override onlyPolicy() {\r\n        emit OwnershipPushed( _owner, address(0) );\r\n        _owner = address(0);\r\n    }\r\n\r\n    function pushManagement( address newOwner_ ) public virtual override onlyPolicy() {\r\n        require( newOwner_ != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipPushed( _owner, newOwner_ );\r\n        _newOwner = newOwner_;\r\n    }\r\n    \r\n    function pullManagement() public virtual override {\r\n        require( msg.sender == _newOwner, \"Ownable: must be new owner to pull\");\r\n        emit OwnershipPulled( _owner, _newOwner );\r\n        _owner = _newOwner;\r\n    }\r\n}\r\n// File: contracts/IERC20.sol\r\n\r\n\r\npragma solidity 0.7.5;\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/Address.sol\r\n\r\n\r\npragma solidity 0.7.5;\r\n\r\nlibrary Address {\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            if (returndata.length > 0) {\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n\r\n    function addressToString(address _address) internal pure returns(string memory) {\r\n        bytes32 _bytes = bytes32(uint256(_address));\r\n        bytes memory HEX = \"0123456789abcdef\";\r\n        bytes memory _addr = new bytes(42);\r\n\r\n        _addr[0] = '0';\r\n        _addr[1] = 'x';\r\n\r\n        for(uint256 i = 0; i < 20; i++) {\r\n            _addr[2+i*2] = HEX[uint8(_bytes[i + 12] >> 4)];\r\n            _addr[3+i*2] = HEX[uint8(_bytes[i + 12] & 0x0f)];\r\n        }\r\n\r\n        return string(_addr);\r\n\r\n    }\r\n}\r\n// File: contracts/SafeMath.sol\r\n\r\n\r\npragma solidity 0.7.5;\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n\r\n    function sqrrt(uint256 a) internal pure returns (uint c) {\r\n        if (a > 3) {\r\n            c = a;\r\n            uint b = add( div( a, 2), 1 );\r\n            while (b < c) {\r\n                c = b;\r\n                b = div( add( div( a, b ), b), 2 );\r\n            }\r\n        } else if (a != 0) {\r\n            c = 1;\r\n        }\r\n    }\r\n\r\n    function percentageAmount( uint256 total_, uint8 percentage_ ) internal pure returns ( uint256 percentAmount_ ) {\r\n        return div( mul( total_, percentage_ ), 1000 );\r\n    }\r\n\r\n    function substractPercentage( uint256 total_, uint8 percentageToSub_ ) internal pure returns ( uint256 result_ ) {\r\n        return sub( total_, div( mul( total_, percentageToSub_ ), 1000 ) );\r\n    }\r\n\r\n    function percentageOfTotal( uint256 part_, uint256 total_ ) internal pure returns ( uint256 percent_ ) {\r\n        return div( mul(part_, 100) , total_ );\r\n    }\r\n\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n\r\n    function quadraticPricing( uint256 payment_, uint256 multiplier_ ) internal pure returns (uint256) {\r\n        return sqrrt( mul( multiplier_, payment_ ) );\r\n    }\r\n\r\n  function bondingCurve( uint256 supply_, uint256 multiplier_ ) internal pure returns (uint256) {\r\n      return mul( multiplier_, supply_ );\r\n  }\r\n}\r\n// File: contracts/SafeERC20.sol\r\n\r\n\r\npragma solidity 0.7.5;\r\n\r\n\r\n\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n// File: contracts/satking.sol\r\n\r\n\r\npragma solidity 0.7.5;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract OlympusStaking is Ownable {\r\n\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    address public immutable OHM;\r\n    address public immutable sOHM;\r\n\r\n    struct Epoch {\r\n        uint length;\r\n        uint number;\r\n        uint endBlock;\r\n        uint distribute;\r\n    }\r\n    Epoch public epoch;\r\n\r\n    address public distributor;\r\n    \r\n    address public locker;\r\n    uint public totalBonus;\r\n    \r\n    address public warmupContract;\r\n    uint public warmupPeriod;\r\n    \r\n    constructor ( \r\n        address _OHM, \r\n        address _sOHM, \r\n        uint _epochLength,\r\n        uint _firstEpochNumber,\r\n        uint _firstEpochBlock\r\n    ) {\r\n        require( _OHM != address(0) );\r\n        OHM = _OHM;\r\n        require( _sOHM != address(0) );\r\n        sOHM = _sOHM;\r\n        \r\n        epoch = Epoch({\r\n            length: _epochLength,\r\n            number: _firstEpochNumber,\r\n            endBlock: _firstEpochBlock,\r\n            distribute: 0\r\n        });\r\n    }\r\n\r\n    struct Claim {\r\n        uint deposit;\r\n        uint gons;\r\n        uint expiry;\r\n        bool lock; // prevents malicious delays\r\n    }\r\n    mapping( address => Claim ) public warmupInfo;\r\n\r\n    /**\r\n        @notice stake OHM to enter warmup\r\n        @param _amount uint\r\n        @return bool\r\n     */\r\n    function stake( uint _amount, address _recipient ) external returns ( bool ) {\r\n        rebase();\r\n        \r\n        IERC20( OHM ).safeTransferFrom( msg.sender, address(this), _amount );\r\n\r\n        Claim memory info = warmupInfo[ _recipient ];\r\n        require( !info.lock, \"Deposits for account are locked\" );\r\n\r\n        warmupInfo[ _recipient ] = Claim ({\r\n            deposit: info.deposit.add( _amount ),\r\n            gons: info.gons.add( IsOHM( sOHM ).gonsForBalance( _amount ) ),\r\n            expiry: epoch.number.add( warmupPeriod ),\r\n            lock: false\r\n        });\r\n        \r\n        IERC20( sOHM ).safeTransfer( warmupContract, _amount );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n        @notice retrieve sOHM from warmup\r\n        @param _recipient address\r\n     */\r\n    function claim ( address _recipient ) public {\r\n        Claim memory info = warmupInfo[ _recipient ];\r\n        if ( epoch.number >= info.expiry && info.expiry != 0 ) {\r\n            delete warmupInfo[ _recipient ];\r\n            IWarmup( warmupContract ).retrieve( _recipient, IsOHM( sOHM ).balanceForGons( info.gons ) );\r\n        }\r\n    }\r\n\r\n    /**\r\n        @notice forfeit sOHM in warmup and retrieve OHM\r\n     */\r\n    function forfeit() external {\r\n        Claim memory info = warmupInfo[ msg.sender ];\r\n        delete warmupInfo[ msg.sender ];\r\n\r\n        IWarmup( warmupContract ).retrieve( address(this), IsOHM( sOHM ).balanceForGons( info.gons ) );\r\n        IERC20( OHM ).safeTransfer( msg.sender, info.deposit );\r\n    }\r\n\r\n    /**\r\n        @notice prevent new deposits to address (protection from malicious activity)\r\n     */\r\n    function toggleDepositLock() external {\r\n        warmupInfo[ msg.sender ].lock = !warmupInfo[ msg.sender ].lock;\r\n    }\r\n\r\n    /**\r\n        @notice redeem sOHM for OHM\r\n        @param _amount uint\r\n        @param _trigger bool\r\n     */\r\n    function unstake( uint _amount, bool _trigger ) external {\r\n        if ( _trigger ) {\r\n            rebase();\r\n        }\r\n        IERC20( sOHM ).safeTransferFrom( msg.sender, address(this), _amount );\r\n        IERC20( OHM ).safeTransfer( msg.sender, _amount );\r\n    }\r\n\r\n    /**\r\n        @notice returns the sOHM index, which tracks rebase growth\r\n        @return uint\r\n     */\r\n    function index() public view returns ( uint ) {\r\n        return IsOHM( sOHM ).index();\r\n    }\r\n\r\n    /**\r\n        @notice trigger rebase if epoch over\r\n     */\r\n    function rebase() public {\r\n        if( epoch.endBlock <= block.number ) {\r\n\r\n            IsOHM( sOHM ).rebase( epoch.distribute, epoch.number );\r\n\r\n            epoch.endBlock = epoch.endBlock.add( epoch.length );\r\n            epoch.number++;\r\n            \r\n            if ( distributor != address(0) ) {\r\n                IDistributor( distributor ).distribute();\r\n            }\r\n\r\n            uint balance = contractBalance();\r\n            uint staked = IsOHM( sOHM ).circulatingSupply();\r\n\r\n            if( balance <= staked ) {\r\n                epoch.distribute = 0;\r\n            } else {\r\n                epoch.distribute = balance.sub( staked );\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n        @notice returns contract OHM holdings, including bonuses provided\r\n        @return uint\r\n     */\r\n    function contractBalance() public view returns ( uint ) {\r\n        return IERC20( OHM ).balanceOf( address(this) ).add( totalBonus );\r\n    }\r\n\r\n    /**\r\n        @notice provide bonus to locked staking contract\r\n        @param _amount uint\r\n     */\r\n    function giveLockBonus( uint _amount ) external {\r\n        require( msg.sender == locker );\r\n        totalBonus = totalBonus.add( _amount );\r\n        IERC20( sOHM ).safeTransfer( locker, _amount );\r\n    }\r\n\r\n    /**\r\n        @notice reclaim bonus from locked staking contract\r\n        @param _amount uint\r\n     */\r\n    function returnLockBonus( uint _amount ) external {\r\n        require( msg.sender == locker );\r\n        totalBonus = totalBonus.sub( _amount );\r\n        IERC20( sOHM ).safeTransferFrom( locker, address(this), _amount );\r\n    }\r\n\r\n    enum DEPENDENCIES { DISTRIBUTOR, WARMUP, LOCKER }\r\n\r\n    /**\r\n        @notice sets the contract address for LP staking\r\n        @param _dependency_ address\r\n     */\r\n    function setContract( DEPENDENCIES _dependency_, address _address ) external onlyManager() {\r\n        if( _dependency_ == DEPENDENCIES.DISTRIBUTOR ) { // 0\r\n            distributor = _address;\r\n        } else if ( _dependency_ == DEPENDENCIES.WARMUP ) { // 1\r\n            require( warmupContract == address( 0 ), \"Warmup cannot be set more than once\" );\r\n            warmupContract = _address;\r\n        } else if ( _dependency_ == DEPENDENCIES.LOCKER ) { // 2\r\n            require( locker == address(0), \"Locker cannot be set more than once\" );\r\n            locker = _address;\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * @notice set warmup period for new stakers\r\n     * @param _warmupPeriod uint\r\n     */\r\n    function setWarmup( uint _warmupPeriod ) external onlyManager() {\r\n        warmupPeriod = _warmupPeriod;\r\n    }\r\n\r\n     /**\r\n     * @notice set rebase power period \r\n     * @param _rebasePeriod uint\r\n     */\r\n    function adjustEpochLength( uint _rebasePeriod ) external onlyManager() {\r\n         require( _rebasePeriod!= 0 );\r\n        epoch.length = _rebasePeriod;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_OHM\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sOHM\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_epochLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_firstEpochNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_firstEpochBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipPulled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipPushed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"OHM\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rebasePeriod\",\"type\":\"uint256\"}],\"name\":\"adjustEpochLength\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"distribute\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forfeit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"giveLockBonus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"index\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"locker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"policy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pullManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner_\",\"type\":\"address\"}],\"name\":\"pushManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"returnLockBonus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sOHM\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum OlympusStaking.DEPENDENCIES\",\"name\":\"_dependency_\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_warmupPeriod\",\"type\":\"uint256\"}],\"name\":\"setWarmup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"stake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleDepositLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_trigger\",\"type\":\"bool\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"warmupContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"warmupInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gons\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"lock\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"warmupPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "OlympusStaking", "CompilerVersion": "v0.7.5+commit.eb77ed08", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000b4c16ed711c06b84e4312d5f09bcbd88e4f4d3b600000000000000000000000034b51bf2f838f819563e86a1118eecbdf0c31ea1000000000000000000000000000000000000000000000000000000000000384000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000e00dee", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f5f05be8b01eb22fe46e1af708865114fea91b5afe253476df29182e1d3ede79"}