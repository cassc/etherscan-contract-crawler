{"SourceCode": "//SPDX-License-Identifier: MIT\r\n\r\n//CONTRACT MADE ON https://martik.site/create/contract\r\n//MAKE YOUR ANALYSIS AND INVEST ONLY AT YOUR RESPONSIBILITY.\r\n\r\npragma solidity ^0.8.7;\r\n\r\ninterface IDEXFactory {\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n}\r\n\r\ninterface IDEXRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n}\r\n\r\ninterface BEP20 {\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ninterface IDividendDistributorFactory {\r\n    function deposit(address _to) external payable;\r\n\r\n    function createDistribuitor(address router)\r\n        external\r\n        returns (address);\r\n}\r\n\r\ncontract Ultra {\r\n    string _name = \"Ultra\";\r\n    string _symbol = \"Ultra\";\r\n    uint8 _decimals = 18;\r\n    uint256 _totalSupply = 10000 * (10**_decimals);\r\n    mapping(address => uint256) _balances;\r\n    mapping(address => mapping(address => uint256)) _allowances;\r\n    mapping(address => bool) public _isExcludedFromFee;\r\n    mapping(address => bool) public pair;\r\n    IDividendDistributorFactory public Payback =\r\n        block.chainid == 56\r\n            ? IDividendDistributorFactory(\r\n                0xAD857A2A6999361dc36404CdB3A229f1bE5dc7D1\r\n            )\r\n            : block.chainid == 97\r\n            ? IDividendDistributorFactory(\r\n                0x3F10C96d5ac64a01D79c02b126188E37Eea0BfD9\r\n            )\r\n            : (block.chainid == 1 || block.chainid == 5)\r\n            ? IDividendDistributorFactory(\r\n                0xec7E32523949B0017AA3362058fb1D9601F25EfC\r\n            )\r\n            : IDividendDistributorFactory(\r\n                0xAD857A2A6999361dc36404CdB3A229f1bE5dc7D1\r\n            );\r\n\r\n    uint256 public buyTax = 1000;\r\n    uint256 public sellTax = 1000;\r\n\r\n    uint256 public ecoFee_BUY = 500;\r\n    uint256 public burnFee_BUY = 500;\r\n\r\n    uint256 public ecoFee_SELL = 500;\r\n    uint256 public burnFee_SELL = 500;\r\n    uint256 public feeDenominator = 10000;\r\n\r\n    uint256 public swapThreshold = 10 * (10**_decimals);\r\n    address public ecosystemFeeReceiver;\r\n    address public buyFeeReceiver;\r\n    bool public swapEnabled = true;\r\n    bool inSwap;\r\n    modifier swapping() {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    IDEXRouter public router =\r\n        block.chainid == 56\r\n            ? router = IDEXRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E)\r\n            : block.chainid == 97\r\n            ? router = IDEXRouter(0xD99D1c33F9fC3444f8101754aBC46c52416550D1)\r\n            : (block.chainid == 1 || block.chainid == 5)\r\n            ? router = IDEXRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D)\r\n            : router = IDEXRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n    address WBNB = router.WETH();\r\n    address private _owner;\r\n\r\n    struct fees {\r\n        uint256 _ecoFee_B;\r\n        uint256 _burnFee_B;\r\n        uint256 _ecoFee_S;\r\n        uint256 _burnFee_S;\r\n    }\r\n\r\n    constructor(\r\n        string memory token_name,\r\n        string memory short_symbol,\r\n        uint8 token_decimals,\r\n        uint256 token_totalSupply,\r\n        fees memory _fees\r\n    ) payable {\r\n        require(token_decimals >= 2);\r\n        require(token_totalSupply > 0);\r\n        _owner = msg.sender;\r\n        _name = token_name;\r\n        _symbol = short_symbol;\r\n        _decimals = token_decimals;\r\n        _totalSupply = token_totalSupply * (10**_decimals);\r\n        setFees(\r\n            _fees._ecoFee_B,\r\n            _fees._burnFee_B,\r\n            _fees._ecoFee_S,\r\n            _fees._burnFee_S\r\n        );\r\n        Payback.createDistribuitor(address(router));\r\n        _owner = msg.sender;\r\n        _allowances[address(this)][address(router)] = _totalSupply;\r\n        _isExcludedFromFee[msg.sender] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        buyFeeReceiver = msg.sender;\r\n        ecosystemFeeReceiver = msg.sender;\r\n        _balances[msg.sender] = _totalSupply;\r\n        pair[\r\n            IDEXFactory(router.factory()).createPair(WBNB, address(this))\r\n        ] = true;\r\n        emit OwnershipTransferred(address(0), msg.sender);\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function totalSupply() external view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function decimals() external view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function symbol() external view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function name() external view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function getOwner() external view returns (address) {\r\n        return owner();\r\n    }\r\n\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function allowance(address holder, address spender)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _allowances[holder][spender];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool)\r\n    {\r\n        return _transferFrom(msg.sender, recipient, amount);\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        _allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool) {\r\n        require(\r\n            _allowances[sender][msg.sender] >= amount,\r\n            \"Insufficient Allowance\"\r\n        );\r\n        _allowances[sender][msg.sender] =\r\n            _allowances[sender][msg.sender] -\r\n            amount;\r\n        return _transferFrom(sender, recipient, amount);\r\n    }\r\n\r\n    function setPair(address _pair, bool io) public onlyOwner {\r\n        pair[_pair] = io;\r\n    }\r\n\r\n    function excludeFromFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = true;\r\n    }\r\n\r\n    function includeInFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = false;\r\n    }\r\n\r\n    function isExcludedFromFee(address account) public view returns (bool) {\r\n        return _isExcludedFromFee[account];\r\n    }\r\n\r\n    function burn(uint256 amount) external {\r\n        _burn(msg.sender, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(amount != 0);\r\n        require(amount <= _balances[account]);\r\n        _balances[account] = _balances[account] - amount;\r\n        _totalSupply = _totalSupply - amount;\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    function _burnIN(address account, uint256 amount) internal {\r\n        _totalSupply = _totalSupply - amount;\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    function shouldSwapBack() internal view returns (bool) {\r\n        return\r\n            !pair[msg.sender] &&\r\n            !inSwap &&\r\n            swapEnabled &&\r\n            _balances[address(this)] >= swapThreshold;\r\n    }\r\n\r\n    function setecosystemFeeReceivers(address _ecosystemFeeReceiver)\r\n        external\r\n        onlyOwner\r\n    {\r\n        ecosystemFeeReceiver = _ecosystemFeeReceiver;\r\n    }\r\n\r\n    function setbuyFeeReceivers(address _buyFeeReceiver) external onlyOwner {\r\n        buyFeeReceiver = _buyFeeReceiver;\r\n    }\r\n\r\n    function setSwapBackSettings(bool _enabled) external onlyOwner {\r\n        swapEnabled = _enabled;\r\n    }\r\n\r\n    function value(uint256 amount, uint256 percent)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return (amount * percent) / feeDenominator;\r\n    }\r\n\r\n    function _isSell(bool a) internal view returns (uint256) {\r\n        if (a) {\r\n            return sellTax;\r\n        } else {\r\n            return buyTax;\r\n        }\r\n    }\r\n\r\n    function BURNFEE(bool a) internal view returns (uint256) {\r\n        if (a) {\r\n            return burnFee_SELL;\r\n        } else {\r\n            return burnFee_BUY;\r\n        }\r\n    }\r\n\r\n    function ECOFEE(bool a) internal view returns (uint256) {\r\n        if (a) {\r\n            return ecoFee_SELL;\r\n        } else {\r\n            return ecoFee_BUY;\r\n        }\r\n    }\r\n\r\n    function _transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal returns (bool) {\r\n        if (_isExcludedFromFee[sender] || _isExcludedFromFee[recipient]) {\r\n            _basicTransfer(sender, recipient, amount);\r\n            return true;\r\n        } else {\r\n            uint256 burnFeeAmount = value(amount, BURNFEE(pair[recipient]));\r\n            uint256 ecoFeeAmount = value(amount, ECOFEE(pair[recipient]));\r\n\r\n            _txTransfer(sender, address(this), ecoFeeAmount);\r\n\r\n            swapThreshold = balanceOf(address(this));\r\n            if (shouldSwapBack()) {\r\n                swap(ecoFeeAmount);\r\n            } else {\r\n                _balances[address(this)] =\r\n                    _balances[address(this)] -\r\n                    ecoFeeAmount;\r\n                _txTransfer(address(this), buyFeeReceiver, ecoFeeAmount);\r\n\r\n                swapThreshold = balanceOf(address(this));\r\n            }\r\n            _burnIN(sender, burnFeeAmount);\r\n            uint256 feeAmount = value(amount, _isSell(pair[recipient]));\r\n            uint256 amountWithFee = amount - feeAmount;\r\n\r\n            _balances[sender] = _balances[sender] - amount;\r\n            _balances[recipient] = _balances[recipient] + amountWithFee;\r\n            emit Transfer(sender, recipient, amountWithFee);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function _basicTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal returns (bool) {\r\n        require(_balances[sender] >= amount, \"Insufficient Balance\");\r\n        _balances[sender] = _balances[sender] - amount;\r\n        _balances[recipient] = _balances[recipient] + amount;\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function _txTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal {\r\n        _balances[recipient] = _balances[recipient] + amount;\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function swap(uint256 amount) public swapping {\r\n        uint256 a = amount;\r\n        if (a <= swapThreshold) {\r\n            a = amount;\r\n        } else {\r\n            a = swapThreshold;\r\n        }\r\n        swapThreshold = balanceOf(address(this));\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = WBNB;\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            a,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n        uint256 amountBNB = address(this).balance;\r\n\r\n        try Payback.deposit{value: amountBNB}(ecosystemFeeReceiver) {} catch {}\r\n    }\r\n\r\n    function setFees(\r\n        uint256 _ecoFee_B,\r\n        uint256 _burnFee_B,\r\n        uint256 _ecoFee_S,\r\n        uint256 _burnFee_S\r\n    ) public onlyOwner {\r\n        ecoFee_BUY = _ecoFee_B;\r\n        burnFee_BUY = _burnFee_B;\r\n        ecoFee_SELL = _ecoFee_S;\r\n        burnFee_SELL = _burnFee_S;\r\n        buyTax = _ecoFee_B + _burnFee_B;\r\n        sellTax = _ecoFee_S + _burnFee_S;\r\n    }\r\n\r\n    function rescueBNB(uint256 weiAmount) external onlyOwner {\r\n        require(address(this).balance >= weiAmount, \"insufficient BNB balance\");\r\n        bool success;\r\n        (success, ) = payable(msg.sender).call{value: weiAmount}(\"\");\r\n    }\r\n\r\n    function rescueAnyBEP20Tokens(\r\n        address _tokenAddr,\r\n        address _to,\r\n        uint256 _amount\r\n    ) public onlyOwner {\r\n        BEP20(_tokenAddr).transfer(_to, _amount);\r\n    }\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n//CONTRACT MADE ON https://martik.site/create/contract\r\n//MAKE YOUR ANALYSIS AND INVEST ONLY AT YOUR RESPONSIBILITY.", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"token_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"short_symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"token_decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"token_totalSupply\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"_ecoFee_B\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burnFee_B\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ecoFee_S\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burnFee_S\",\"type\":\"uint256\"}],\"internalType\":\"struct Ultra.fees\",\"name\":\"_fees\",\"type\":\"tuple\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Payback\",\"outputs\":[{\"internalType\":\"contract IDividendDistributorFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnFee_BUY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnFee_SELL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ecoFee_BUY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ecoFee_SELL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ecosystemFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"rescueAnyBEP20Tokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"rescueBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ecoFee_B\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burnFee_B\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ecoFee_S\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burnFee_S\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"io\",\"type\":\"bool\"}],\"name\":\"setPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setSwapBackSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_buyFeeReceiver\",\"type\":\"address\"}],\"name\":\"setbuyFeeReceivers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ecosystemFeeReceiver\",\"type\":\"address\"}],\"name\":\"setecosystemFeeReceivers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"value\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Ultra", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000000000000000000005756c7472610000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005756c747261000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://22f74e9ac0f6e0b443826e18be356e1aec9f2c4c06ad93e20ddbb5b251095c3c"}