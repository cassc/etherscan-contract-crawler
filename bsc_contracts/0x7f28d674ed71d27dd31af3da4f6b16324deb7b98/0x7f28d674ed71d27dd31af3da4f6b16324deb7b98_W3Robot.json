{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\ncontract W3Robot {\r\n    address public owner;\r\n    address public usdt;\r\n    mapping(address => uint256) membersInfo;\r\n    //\u9ed8\u8ba4 usdt\u7684\u7cbe\u5ea6 18\u4f4d\r\n    uint256 priceDay = 3 * (10**18);\r\n    uint256 priceWeek = 18 * (10**18);\r\n    uint256 priceMonth = 70 * (10**18);\r\n    uint256 priceQuarter = 200 * (10**18);\r\n    uint256 priceForever = 500 * (10**18);\r\n    uint256 rebate = 20;\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor(address usdtAddress) {\r\n        owner = msg.sender;\r\n        usdt = usdtAddress;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(\r\n            msg.sender == owner,\r\n            \"Only the contract owner can call this function\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    function setPrice(\r\n        uint256 _priceDay,\r\n        uint256 _priceWeek,\r\n        uint256 _priceMonth,\r\n        uint256 _priceQuarter,\r\n        uint256 _priceForever\r\n    ) external onlyOwner {\r\n        priceDay = _priceDay;\r\n        priceWeek = _priceWeek;\r\n        priceMonth = _priceMonth;\r\n        priceQuarter = _priceQuarter;\r\n        priceForever = _priceForever;\r\n    }\r\n\r\n    function getPrice() external view returns (uint256[] memory) {\r\n        uint256[] memory priceArr = new uint256[](5);\r\n        priceArr[0] = priceDay;\r\n        priceArr[1] = priceWeek;\r\n        priceArr[2] = priceMonth;\r\n        priceArr[3] = priceQuarter;\r\n        priceArr[4] = priceForever;\r\n        return priceArr;\r\n    }\r\n\r\n    function buyTime(address inviter, uint256 timeType) external {\r\n        bool rewardAvailable;\r\n        if (membersInfo[inviter] > block.timestamp) {\r\n            rewardAvailable = true;\r\n        } else {\r\n            rewardAvailable = false;\r\n        }\r\n        uint256 price;\r\n        uint256 time;\r\n        if (timeType == 1) {\r\n            price = priceDay;\r\n            time = 1 days;\r\n        } else if (timeType == 2) {\r\n            price = priceWeek;\r\n            time = 7 days;\r\n        } else if (timeType == 3) {\r\n            price = priceMonth;\r\n            time = 30 days;\r\n        } else if (timeType == 4) {\r\n            price = priceQuarter;\r\n            time = 120 days;\r\n        } else if (timeType == 5) {\r\n            price = priceForever;\r\n            time = 100 * 365 days;\r\n        }\r\n        if (rewardAvailable) {\r\n            require(\r\n                IERC20(usdt).transferFrom(\r\n                    msg.sender,\r\n                    owner,\r\n                    (price * (100 - rebate)) / 100\r\n                ),\r\n                \"Transfer fail\"\r\n            );\r\n            require(\r\n                IERC20(usdt).transferFrom(\r\n                    msg.sender,\r\n                    inviter,\r\n                    (price * rebate) / 100\r\n                ),\r\n                \"Reward fail\"\r\n            );\r\n        } else {\r\n            require(\r\n                IERC20(usdt).transferFrom(msg.sender, owner, price),\r\n                \"Transfer fail\"\r\n            );\r\n        }\r\n        //\u5982\u679c\u4f1a\u5458\u8fc7\u671f\r\n        if (\r\n            membersInfo[msg.sender] == 0 ||\r\n            block.timestamp > membersInfo[msg.sender]\r\n        ) {\r\n            membersInfo[msg.sender] = block.timestamp + time;\r\n        } else {\r\n            membersInfo[msg.sender] += time;\r\n        }\r\n    }\r\n\r\n    function setRabate(uint256 _rabate) external onlyOwner {\r\n        rebate = _rabate;\r\n    }\r\n\r\n    function addWhiteList(address _userAddr) external onlyOwner {\r\n        membersInfo[_userAddr] = block.timestamp + 100 * 365 days;\r\n    }\r\n\r\n    function removeWhiteList(address _userAddr) external onlyOwner {\r\n        membersInfo[_userAddr] = 0;\r\n    }\r\n\r\n    function isExpired(address member) external view returns (bool) {\r\n        return block.timestamp > membersInfo[member];\r\n    }\r\n\r\n    function getDeadLine(address member) external view returns (uint256) {\r\n        return membersInfo[member];\r\n    }\r\n\r\n    function withdrawToken(address token, address to) public onlyOwner {\r\n        uint256 balance = IERC20(token).balanceOf(address(this));\r\n        IERC20(token).transfer(to, balance);\r\n    }\r\n\r\n    function withdrawBNB(address to) public onlyOwner {\r\n        uint256 balance = address(this).balance;\r\n        payable(to).transfer(balance);\r\n    }\r\n\r\n    function transferOwnerShip(address newOwner) external onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        owner = newOwner;\r\n        emit OwnershipTransferred(owner, newOwner);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usdtAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddr\",\"type\":\"address\"}],\"name\":\"addWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"inviter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timeType\",\"type\":\"uint256\"}],\"name\":\"buyTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"getDeadLine\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"isExpired\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddr\",\"type\":\"address\"}],\"name\":\"removeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_priceDay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_priceWeek\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_priceMonth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_priceQuarter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_priceForever\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rabate\",\"type\":\"uint256\"}],\"name\":\"setRabate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnerShip\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "W3Robot", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000055d398326f99059ff775485246999027b3197955", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://4c1250fe57cde4acdd6b5ef09656b557ab3cc476af0bf010f3a59ee51e90afbc"}