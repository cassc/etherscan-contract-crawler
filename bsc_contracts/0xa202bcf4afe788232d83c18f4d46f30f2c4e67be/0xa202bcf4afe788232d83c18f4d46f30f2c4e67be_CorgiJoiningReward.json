{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.12;\r\n\r\n/**\r\n * @dev Interface of the BSC standard as defined in the EIP.\r\n */\r\ninterface IBSC {\r\n\tfunction totalSupply() external view returns (uint256);\r\n\tfunction balanceOf(address account) external view returns (uint256);\r\n\tfunction transfer(address recipient, uint256 amount) external returns (bool);\r\n\tfunction allowance(address owner, address spender) external view returns (uint256);\r\n\tfunction approve(address spender, uint256 amount) external returns (bool);\r\n\tfunction transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\ncontract CorgiJoiningReward is Ownable {\r\n  struct Claimer {\r\n    address referer;\r\n    uint256 tier1;\r\n    uint256 tier2;\r\n    uint256 tier3;\r\n    uint256 tier4;\r\n    uint256 totalRef;\r\n    uint256 claimed;\r\n  }\r\n\r\n  IBSC public claimToken;\r\n\r\n  address public support;\r\n\r\n  uint[] public rewards;\r\n  uint256 public totalclaimers;\r\n  uint256 public _claimTokenRegister = 100 * 1e11;\r\n  uint256 public _claimTokenTier1 = 5 * 1e11;\r\n  uint256 public _claimTokenTier2 = 3 * 1e11;\r\n  uint256 public _claimTokenTier3 = 2 * 1e11;\r\n  uint256 public _claimTokenTier4 = 1 * 1e11;\r\n  uint256 public totalrewards;\r\n\r\n  mapping (address => Claimer) public claimers;\r\n  event Claim(address user, address referer);\r\n  event Reward(address user, uint256 amount);\r\n\r\n  constructor(address _claimToken) public {\r\n    rewards.push(_claimTokenTier1);\r\n    rewards.push(_claimTokenTier2);\r\n    rewards.push(_claimTokenTier3);\r\n    rewards.push(_claimTokenTier4);\r\n    support = msg.sender;\r\n    claimToken = IBSC(_claimToken);\r\n  }\r\n\r\n  function claim(address referer) external {\r\n    if (claimers[msg.sender].claimed == 0) {\r\n      claimers[msg.sender].claimed = _claimTokenRegister;\r\n\r\n      totalclaimers++;\r\n\r\n      if (claimers[referer].claimed != 0 && referer != msg.sender) {\r\n        address rec = referer;\r\n        claimers[msg.sender].referer = referer;\r\n\r\n        for (uint256 i = 0; i < rewards.length; i++) {\r\n          if (claimers[rec].claimed == 0) {\r\n            break;\r\n          }\r\n\r\n          if (i == 0) {\r\n            claimers[rec].tier1++;\r\n          }\r\n\r\n          if (i == 1) {\r\n            claimers[rec].tier2++;\r\n          }\r\n\r\n          if (i == 2) {\r\n            claimers[rec].tier3++;\r\n          }\r\n\r\n          if (i == 3) {\r\n            claimers[rec].tier3++;\r\n          }\r\n\r\n          rec = claimers[rec].referer;\r\n        }\r\n\r\n        rewardReferers(referer);\r\n      }\r\n\r\n      require(IBSC(claimToken).transfer(msg.sender, _claimTokenRegister), 'Claim token is failed');\r\n      emit Claim(msg.sender, referer);\r\n    }\r\n  }\r\n\r\n  function rewardReferers(address referer) internal {\r\n    address rec = referer;\r\n\r\n    for (uint256 i = 0; i < rewards.length; i++) {\r\n      if (claimers[rec].claimed == 0) {\r\n        break;\r\n      }\r\n\r\n      uint256 a = rewards[i];\r\n\r\n      claimers[rec].claimed += a;\r\n      totalrewards += a;\r\n\r\n      require(IBSC(claimToken).transfer(rec, a), 'Claim reward token is failed');\r\n      emit Reward(rec, a);\r\n\r\n      rec = claimers[rec].referer;\r\n    }\r\n  }\r\n\r\n  function balanceOf(address user) public view returns (uint256) {\r\n    return claimers[user].claimed;\r\n  }\r\n\r\n  function availabe() public view returns (uint256) {\r\n    return IBSC(claimToken).balanceOf(address(this));\r\n  }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_claimToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"referer\",\"type\":\"address\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Reward\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_claimTokenRegister\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_claimTokenTier1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_claimTokenTier2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_claimTokenTier3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_claimTokenTier4\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"availabe\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referer\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimToken\",\"outputs\":[{\"internalType\":\"contract IBSC\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"referer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tier1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tier2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tier3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tier4\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRef\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"support\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalclaimers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalrewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CorgiJoiningReward", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000cfcaaa6a3f4ea9017ac23e0dc5878b75bfb5bb5a", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b0bd590395731decdb87911d509a361e768b45d3556fff6ccb3eb569209507c0"}