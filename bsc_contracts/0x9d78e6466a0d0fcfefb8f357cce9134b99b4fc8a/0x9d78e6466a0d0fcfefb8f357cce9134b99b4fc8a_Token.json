{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.12;\r\n\r\nabstract contract OwnerRole {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor () public {\r\n        owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), msg.sender);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) external virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\nabstract contract MinterRole {\r\n    mapping(address => bool) private minters;\r\n\r\n    event MinterAdded(address indexed _minter);\r\n    event MinterRemoved(address indexed _minter);\r\n\r\n    constructor () public {\r\n        addMinter(msg.sender);\r\n    }\r\n\r\n    modifier onlyMinter() {\r\n        require(minters[msg.sender], \"Minterable: caller is not the minter\");\r\n        _;\r\n    }\r\n\r\n    function isIMinter() external view returns (bool) {\r\n        return minters[msg.sender];\r\n    }\r\n\r\n    function isMinter(address _minter) external view virtual returns (bool) {\r\n        return minters[_minter];\r\n    }\r\n\r\n    function addMinter(address _minter) public virtual {\r\n        minters[_minter] = true;\r\n        emit MinterAdded(_minter);\r\n    }\r\n\r\n    function removeMinter(address _minter) public virtual {\r\n        minters[_minter] = false;\r\n        emit MinterRemoved(_minter);\r\n    }\r\n}\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, 'SafeMath: addition overflow');\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, 'SafeMath: subtraction overflow');\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, 'SafeMath: multiplication overflow');\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, 'SafeMath: division by zero');\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, 'SafeMath: modulo by zero');\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n\r\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = x < y ? x : y;\r\n    }\r\n\r\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\r\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\r\n        if (y > 3) {\r\n            z = y;\r\n            uint256 x = y / 2 + 1;\r\n            while (x < z) {\r\n                z = x;\r\n                x = (y / x + x) / 2;\r\n            }\r\n        } else if (y != 0) {\r\n            z = 1;\r\n        }\r\n    }\r\n}\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\nabstract contract BEP20 is OwnerRole, MinterRole {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public totalSupply;\r\n    uint256 public totalBurned;\r\n\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals = 18;\r\n\r\n    uint16 public burnFee;\r\n    uint16 public devFee;\r\n\r\n    mapping(address => uint256) private balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private allowances;\r\n\r\n    constructor(string memory _name, string memory _symbol) public {\r\n        name = _name;\r\n        symbol = _symbol;\r\n    }\r\n\r\n    function balanceOf(address _account) external view virtual returns (uint256) {\r\n        return balances[_account];\r\n    }\r\n\r\n    function allowance(address _from, address _to) external view virtual returns (uint256) {\r\n        return allowances[_from][_to];\r\n    }\r\n\r\n    function mint(address _to, uint256 _amount) external virtual onlyMinter {\r\n        _mint(_to, _amount);\r\n    }\r\n\r\n    function burn(uint256 _amount) external virtual {\r\n        _burn(msg.sender, _amount);\r\n    }\r\n\r\n    function approve(address _to, uint256 _amount) external virtual returns (bool) {\r\n        require(_amount > 0, \"BEP20: amount must be greater than zero\");\r\n\r\n        _approve(msg.sender, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _amount) external virtual returns (bool) {\r\n        require(msg.sender != _to, \"BEP20: can't transfer to own address\");\r\n\r\n        _transfer(msg.sender, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _amount) external virtual returns (bool) {\r\n        require(_from != _to, \"BEP20: can't transfer to own address\");\r\n        require(allowances[_from][msg.sender] >= _amount, \"BEP20: transfer amount exceeds allowance\");\r\n\r\n        _transfer(_from, _to, _amount);\r\n        _approve(_from, msg.sender, allowances[_from][msg.sender] - _amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address _to, uint256 _amount) external virtual returns (bool) {\r\n        require(_amount > 0, \"BEP20: amount must be greater than zero\");\r\n\r\n        uint256 total = allowances[msg.sender][_to].add(_amount);\r\n        _approve(msg.sender, _to, total);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address _to, uint256 _amount) external virtual returns (bool) {\r\n        require(allowances[msg.sender][_to] >= _amount, \"BEP20: decreased allowance below zero\");\r\n        require(_amount > 0, \"BEP20: amount must be greater than zero\");\r\n\r\n        uint256 total = allowances[msg.sender][_to].sub(_amount);\r\n        _approve(msg.sender, _to, total);\r\n        return true;\r\n    }\r\n\r\n    function addMinter(address _minter) public onlyOwner override(MinterRole) {\r\n        super.addMinter(_minter);\r\n    }\r\n\r\n    function removeMinter(address _minter) public onlyOwner override(MinterRole) {\r\n        super.removeMinter(_minter);\r\n    }\r\n\r\n    function updateBurnFee(uint16 _percent) external onlyOwner {\r\n        require(_percent >= 0 && _percent <= 10000, \"BEP20: incorrect percentage\");\r\n        require(_percent + devFee <= 10000, \"BEP20: the sum of all commissions cannot exceed 10000 percent\");\r\n\r\n        burnFee = _percent;\r\n    }\r\n\r\n    function updateDevFee(uint16 _percent) external onlyOwner {\r\n        require(_percent >= 0 && _percent <= 10000, \"BEP20: incorrect percentage\");\r\n        require(_percent + burnFee <= 10000, \"BEP20: the sum of all commissions cannot exceed 10000 percent\");\r\n\r\n        devFee = _percent;\r\n    }\r\n\r\n    function calcFee(uint256 _amount, uint16 _percent) public pure returns (uint256) {\r\n        require(_percent >= 0 && _percent <= 10000, \"BEP20: incorrect percentage\");\r\n\r\n        return _amount.mul(_percent).div(10000);\r\n    }\r\n\r\n    function _mint(address _to, uint256 _amount) internal virtual {\r\n        require(_to != address(0), \"BEP20: mint to the zero address\");\r\n        require(_amount > 0, \"BEP20: amount must be greater than zero\");\r\n\r\n        totalSupply = totalSupply.add(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n\r\n        emit Transfer(address(0), _to, _amount);\r\n    }\r\n\r\n    function _burn(address _from, uint256 _amount) internal virtual {\r\n        require(_from != address(0), \"BEP20: burn from the zero address\");\r\n        require(_amount > 0, \"BEP20: amount must be greater than zero\");\r\n        require(balances[_from] >= _amount, \"BEP20: burn amount exceeds balance\");\r\n\r\n        balances[_from] = balances[_from].sub(_amount);\r\n        totalSupply = totalSupply.sub(_amount);\r\n        totalBurned = totalBurned.add(_amount);\r\n\r\n        emit Transfer(_from, address(0), _amount);\r\n    }\r\n\r\n    function _approve(address _from, address _to, uint256 _amount) internal virtual {\r\n        require(_from != address(0), \"BEP20: approve from the zero address\");\r\n        require(_to != address(0), \"BEP20: approve to the zero address\");\r\n\r\n        allowances[_from][_to] = _amount;\r\n        emit Approval(_from, _to, _amount);\r\n    }\r\n\r\n    function _transfer(address _from, address _to, uint256 _amount) internal virtual {\r\n        require(_from != address(0), \"BEP20: transfer from the zero address\");\r\n        require(_to != address(0), \"BEP20: transfer to the zero address\");\r\n        require(balances[_from] >= _amount, \"BEP20: transfer amount exceeds balance\");\r\n        require(_amount > 0, \"BEP20: amount must be greater than zero\");\r\n\r\n        uint256 burnFeeValue = calcFee(_amount, burnFee);\r\n        uint256 devFeeValue = calcFee(_amount, devFee);\r\n        uint256 calculatedAmount = _amount.sub(burnFeeValue).sub(devFeeValue);\r\n\r\n        balances[_from] = balances[_from].sub(calculatedAmount).sub(devFeeValue);\r\n\r\n        if (calculatedAmount > 0) {\r\n            balances[_to] = balances[_to].add(calculatedAmount);\r\n            emit Transfer(_from, _to, calculatedAmount);\r\n        }\r\n\r\n        if (devFeeValue > 0) {\r\n            balances[owner] = balances[owner].add(devFeeValue);\r\n            emit Transfer(_from, owner, devFeeValue);\r\n        }\r\n\r\n        if (burnFeeValue > 0) {\r\n            _burn(_from, burnFeeValue);\r\n        }\r\n    }\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\ncontract Token is BEP20 {\r\n    constructor(string memory _name, string memory _symbol, uint256 _initialSupply) public BEP20(_name, _symbol) {\r\n        _mint(msg.sender, _initialSupply * 10 ** uint256(decimals));\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_initialSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"MinterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"MinterRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_percent\",\"type\":\"uint16\"}],\"name\":\"calcFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isIMinter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"removeMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBurned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_percent\",\"type\":\"uint16\"}],\"name\":\"updateBurnFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_percent\",\"type\":\"uint16\"}],\"name\":\"updateDevFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Token", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000c446f6e616c6420546f6b656e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006444f4e414c440000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://cfb3282bffa7af3620157b84e92d21b5162c3a8213352506c30a5238d8322169"}