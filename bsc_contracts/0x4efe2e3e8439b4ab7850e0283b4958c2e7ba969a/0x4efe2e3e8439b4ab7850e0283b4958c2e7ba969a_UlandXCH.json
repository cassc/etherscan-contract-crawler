{"SourceCode": "//\r\n//  \u2588\u2588    \u2588\u2588 \u2588\u2588       \u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588    \u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588       \u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\r\n//  \u2588\u2588    \u2588\u2588 \u2588\u2588      \u2588\u2588   \u2588\u2588 \u2588\u2588\u2588\u2588   \u2588\u2588 \u2588\u2588   \u2588\u2588      \u2588\u2588 \u2588\u2588    \u2588\u2588\r\n//  \u2588\u2588    \u2588\u2588 \u2588\u2588      \u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588 \u2588\u2588  \u2588\u2588 \u2588\u2588   \u2588\u2588      \u2588\u2588 \u2588\u2588    \u2588\u2588\r\n//  \u2588\u2588    \u2588\u2588 \u2588\u2588      \u2588\u2588   \u2588\u2588 \u2588\u2588  \u2588\u2588 \u2588\u2588 \u2588\u2588   \u2588\u2588      \u2588\u2588 \u2588\u2588    \u2588\u2588\r\n//   \u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588   \u2588\u2588 \u2588\u2588   \u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588   \u2588\u2588  \u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\r\n//\r\n// @title dApp / uland.io\r\n// @author 57pixels@uland.io\r\n// @whitepaper https://whitepaper.uland.io/\r\n//\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/access/Ownable.sol@v4.9.1\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.9.1\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\n\r\n// File contracts/IUlandToken.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.4;\r\n/**\r\n * @dev Uland token Interface\r\n */\r\ninterface IUlandToken is IERC20 {\r\n\tfunction setRewardsFactor(address holder, uint256 balance) external;\r\n\r\n\tfunction addStaticReward(address recipient, uint256 amount) external;\r\n\r\n\tfunction addAirdropReward(address recipient, uint256 amount) external;\r\n\r\n\tfunction allowNftTrade(address account, bool value) external;\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/math/SafeMath.sol@v4.9.1\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/IUlandNFT.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\n//import \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\n\r\ninterface IUlandAsset {\r\n\tstruct Asset {\r\n\t\tuint256 id; // token id\r\n\t\tuint256 parentId;\r\n\t\tuint256 price;\t// Price $ULAND\r\n\t\tuint256 priceBNB;\r\n\t\tuint256 population; // Population. Rewards distributed based on population\r\n\t\tuint256 totalTax; // Accumulated tax earned through distribution\r\n\t\tuint256 assetType; // Asset type\r\n\t\tuint16 taxRate; // Asset Distribution tax rate\r\n\t\tstring tag; // tag|titleid|0|Henry, eg. Promiseland|1|Henry\r\n\t\tstring logoUrl; // Custom logo\r\n\t\tstring attributes; // bgColour|future expansion\t\t\r\n\t}\r\n}\r\n\r\n/**\r\n * @dev Uland NFT Interface\r\n */\r\ninterface IUlandNFT {\r\n\r\n\tfunction mint(uint256 tokenId, uint256 parentId, uint256 population, uint256 assetType) external;\r\n\tfunction buy(uint256 tokenId) external;\r\n\tfunction airdrop(uint256 tokenId, uint256 parentId,\tuint256 population,uint256 assetType) external;\r\n\r\n\tfunction setTokenMetadata(uint256 tokenId, uint256 assetType, uint16 taxRate,string memory tag,string memory logoUrl,string memory attributes) external;\r\n\tfunction setTokenPrice(uint256 tokenId, uint256 price, uint256 priceBNB) external;\r\n\r\n\tfunction exists(uint256 tokenId) external view returns (bool);\r\n\r\n\tfunction increaseTokenTotalTax(uint256 tokenId,\tuint256 balance) external;\r\n\tfunction getTokenDetail(uint256 tokenId) external view returns (IUlandAsset.Asset memory);\r\n\tfunction getTokenOwner(uint256 tokenId) external view returns (address);\r\n\tfunction getTotalPopulationByOwner(address _owner) external view returns (uint256);\r\n}\r\n\r\n\r\n// File contracts/IUniswapV2Factory.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\n\r\n// File contracts/IUniswapV2Pair.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\n\r\n// File contracts/IUniswapV2Router.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\n\r\n\r\n// pragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n\r\n// File contracts/UlandVerifyAsset.sol\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\nlibrary UlandVerifyAsset {\r\n\tfunction getMessageHash(\r\n\t\tuint256 _tokenId,\r\n\t\tuint256 _amount,\r\n\t\tuint256 _validTo,\r\n\t\tuint256 _parentId,\r\n\t\tuint256 _population,\r\n\t\tuint256 _ulandreward,\r\n\t\tuint16 _payType,\r\n\t\taddress _recipient\t\t\r\n\t) internal pure returns (bytes32) {\r\n\t\treturn\r\n\t\t\tkeccak256(\r\n\t\t\t\tabi.encodePacked(\r\n\t\t\t\t\t_tokenId,\r\n\t\t\t\t\t_amount,\r\n\t\t\t\t\t_validTo,\r\n\t\t\t\t\t_parentId,\r\n\t\t\t\t\t_population,\r\n\t\t\t\t\t_ulandreward,\r\n\t\t\t\t\t_payType,\r\n\t\t\t\t\t_recipient\r\n\t\t\t\t)\r\n\t\t\t);\r\n\t}\r\n\r\n\tfunction getEthSignedMessageHash(bytes32 _messageHash)\r\n\t\tinternal\r\n\t\tpure\r\n\t\treturns (bytes32)\r\n\t{\r\n\t\t/*\r\n        Signature is produced by signing a keccak256 hash with the following format:\r\n        \"\\x19Ethereum Signed Message\\n\" + len(msg) + msg\r\n        */\r\n\t\treturn\r\n\t\t\tkeccak256(\r\n\t\t\t\tabi.encodePacked(\r\n\t\t\t\t\t\"\\x19Ethereum Signed Message:\\n32\",\r\n\t\t\t\t\t_messageHash\r\n\t\t\t\t)\r\n\t\t\t);\r\n\t}\r\n\r\n\tfunction verify(\r\n\t\taddress _signer,\r\n\t\tuint256 _tokenId,\r\n\t\tuint256 _amount,\r\n\t\tuint256 _validTo,\r\n\t\tuint256 _parentId,\r\n\t\tuint256 _population,\r\n\t\tuint256 _ulandreward,\r\n\t\tuint16 _payType,\r\n\t\taddress _recipient,\r\n\t\tbytes memory signature\r\n\t) internal pure returns (bool) {\r\n\t\tbytes32 messageHash = getMessageHash(\r\n\t\t\t_tokenId,\r\n\t\t\t_amount,\r\n\t\t\t_validTo,\r\n\t\t\t_parentId,\r\n\t\t\t_population,\r\n\t\t\t_ulandreward,\r\n\t\t\t_payType,\r\n\t\t\t_recipient\r\n\t\t);\r\n\t\tbytes32 ethSignedMessageHash = getEthSignedMessageHash(messageHash);\t\t\r\n\t\treturn recoverSigner(ethSignedMessageHash, signature) == _signer;\r\n\t}\r\n\r\n\tfunction verify2(\r\n\t\taddress _signer,\r\n\t\tbytes32 messageHash,\r\n\t\tbytes memory signature\r\n\t) internal pure returns (bool) {\r\n\t\tbytes32 ethSignedMessageHash = getEthSignedMessageHash(messageHash);\t\t\r\n\t\treturn recoverSigner(ethSignedMessageHash, signature) == _signer;\r\n\t}\r\n\r\n\tfunction verifyMeta(\r\n\t\taddress _signer,\r\n\t\tuint256 _tokenId,\r\n\t\tuint256 _validTo,\r\n\t\tuint16 _taxRate,\r\n\t\tstring memory  _str1,\r\n\t\tstring memory _str2,\r\n\t\tstring memory _str3,\r\n\t\tbytes memory signature\r\n\t) internal pure returns (bool) {\r\n\t\tbytes32 messageHash = getMessageMetaHash(\r\n\t\t\t_tokenId,\r\n\t\t\t_validTo,\r\n\t\t\t_taxRate,\r\n\t\t\t_str1,\r\n\t\t\t_str2,\r\n\t\t\t_str3\r\n\t\t);\r\n\t\tbytes32 ethSignedMessageHash = getEthSignedMessageHash(messageHash);\t\t\r\n\t\treturn recoverSigner(ethSignedMessageHash, signature) == _signer;\r\n\t}\r\n\r\n\tfunction getMessageMetaHash(\r\n\t\tuint256 _tokenId,\r\n\t\tuint256 _validTo,\r\n\t\tuint16 _taxRate,\r\n\t\tstring memory _str1,\r\n\t\tstring memory _str2,\r\n\t\tstring memory _str3\r\n\t) internal pure returns (bytes32) {\r\n\t\treturn\r\n\t\t\tkeccak256(\r\n\t\t\t\tabi.encodePacked(\r\n\t\t\t\t\t_tokenId,\r\n\t\t\t\t\t_validTo,\r\n\t\t\t\t\t_taxRate,\r\n\t\t\t\t\t_str1,\r\n\t\t\t\t\t_str2,\r\n\t\t\t\t\t_str3\r\n\t\t\t\t)\r\n\t\t\t);\r\n\t}\r\n\r\n\tfunction recoverSigner(\r\n\t\tbytes32 _ethSignedMessageHash,\r\n\t\tbytes memory _signature\r\n\t) internal pure returns (address) {\r\n\t\t(bytes32 r, bytes32 s, uint8 v) = splitSignature(_signature);\r\n\r\n\t\treturn ecrecover(_ethSignedMessageHash, v, r, s);\r\n\t}\r\n\r\n\tfunction splitSignature(bytes memory sig)\r\n\t\tinternal\r\n\t\tpure\r\n\t\treturns (\r\n\t\t\tbytes32 r,\r\n\t\t\tbytes32 s,\r\n\t\t\tuint8 v\r\n\t\t)\r\n\t{\r\n\t\trequire(sig.length == 65, \"invalid signature length\");\r\n\r\n\t\tassembly {\r\n\t\t\t/*\r\n            First 32 bytes stores the length of the signature\r\n\r\n            add(sig, 32) = pointer of sig + 32\r\n            effectively, skips first 32 bytes of signature\r\n\r\n            mload(p) loads next 32 bytes starting at the memory address p into memory\r\n            */\r\n\r\n\t\t\t// first 32 bytes, after the length prefix\r\n\t\t\tr := mload(add(sig, 32))\r\n\t\t\t// second 32 bytes\r\n\t\t\ts := mload(add(sig, 64))\r\n\t\t\t// final byte (first byte of the next 32 bytes)\r\n\t\t\tv := byte(0, mload(add(sig, 96)))\r\n\t\t}\r\n\r\n\t\t// implicitly return (r, s, v)\r\n\t}\r\n}\r\n\r\n\r\n// File contracts/UlandXCH.sol\r\npragma solidity ^0.8.4;\r\n\r\ncontract UlandXCH is Ownable {\r\n\tbool public ULAND_IS_AWESOME = true;\r\n\r\n\taddress public signerAddress;\r\n\tstring public _name;\r\n\tmapping(address => bool) public ulandContracts;\r\n\r\n\tusing SafeMath for uint256;\r\n\r\n\tIUlandToken public _ulandToken;\r\n\r\n\tbool public paused = false;\r\n\tmapping(string => bool) public _usedNonces;\r\n\r\n\taddress public rewardsWallet = 0x24554c414E440000000000000000000000000002; // $ULAND Internal Rewards Wallet\r\n\r\n\tmodifier onlyUland() {\r\n\t\trequire(ulandContracts[msg.sender]);\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Modifier to make a function callable only when the contract is not paused.\r\n\t */\r\n\tmodifier whenNotPaused() {\r\n\t\trequire(!paused);\r\n\t\t_;\r\n\t}\r\n\r\n\tconstructor(\r\n\t\taddress ulandToken,\r\n\t\taddress _signerAddress,\r\n\t\tstring memory name\r\n\t) {\r\n\t\t_ulandToken = IUlandToken(ulandToken);\r\n\t\tsignerAddress = _signerAddress;\r\n\t\t_name = name;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the name of the token.\r\n\t */\r\n\tfunction name() public view returns (string memory) {\r\n\t\treturn _name;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the symbol of the token\r\n\t */\r\n\tfunction symbol() public pure returns (string memory) {\r\n\t\treturn \"UXCH\";\r\n\t}\r\n\r\n\tenum Method {\r\n\t\tNull,\r\n\t\tTransfer,\r\n\t\tReward\r\n\t}\r\n\r\n\tstruct WithdrawParams {\r\n\t\tstring nonce;\r\n\t\tMethod method;\r\n\t\tuint32 validTo;\r\n\t\tuint256 amount;\r\n\t}\r\n\r\n\tfunction withdraw(\r\n\t\tWithdrawParams memory params,\r\n\t\tbytes32 hash,\r\n\t\tbytes memory signature\r\n\t) external whenNotPaused {\r\n\t\trequire(block.timestamp <= params.validTo, \"EXPIRED\");\r\n\t\trequire(!_usedNonces[params.nonce], \"NONCE REUSED\");\r\n\t\tbytes32 _hash = calculateHash(params);\r\n\t\trequire(_hash == hash, \"INVALID HASH\");\r\n\t\trequire(\r\n\t\t\tUlandVerifyAsset.verify2(signerAddress, _hash, signature) == true,\r\n\t\t\t\"INVALIDSIG\"\r\n\t\t);\r\n\r\n\t\tif (params.method == Method.Transfer) {\r\n\t\t\t_ulandToken.transfer(msg.sender, params.amount);\r\n\t\t} else if (params.method == Method.Reward) {\r\n\t\t\t_ulandToken.transfer(rewardsWallet, params.amount);\r\n\t\t\t_ulandToken.addStaticReward(msg.sender, params.amount);\r\n\t\t}\r\n\r\n\t\t_usedNonces[params.nonce] = true;\r\n\t\temit Withdrawal(params.nonce, params.method, msg.sender, params.amount);\r\n\t}\r\n\r\n\tfunction dappwithdraw(WithdrawParams memory params) public onlyUland {\r\n\r\n\t\tif (params.method == Method.Transfer) {\r\n\t\t\t_ulandToken.transfer(msg.sender, params.amount);\r\n\t\t} else if (params.method == Method.Reward) {\r\n\t\t\t_ulandToken.transfer(rewardsWallet, params.amount);\r\n\t\t\t_ulandToken.addStaticReward(tx.origin, params.amount);\r\n\t\t}\r\n\t\temit Withdrawal(params.nonce, params.method, tx.origin, params.amount);\r\n\t}\r\n\r\n\tfunction calculateHash(\r\n\t\tWithdrawParams memory params\r\n\t) private view returns (bytes32) {\r\n\t\treturn\r\n\t\t\tkeccak256(\r\n\t\t\t\tabi.encodePacked(\r\n\t\t\t\t\tparams.method,\r\n\t\t\t\t\tparams.validTo,\r\n\t\t\t\t\tparams.amount,\r\n\t\t\t\t\tparams.nonce,\r\n\t\t\t\t\tmsg.sender\r\n\t\t\t\t)\r\n\t\t\t);\r\n\t}\r\n\r\n\t/// @dev Withdraw funds that gets stuck in contract by accident\r\n\tfunction emergencyWithdraw() external onlyOwner {\r\n\t\tpayable(owner()).transfer(address(this).balance);\r\n\t}\r\n\r\n\t/// @dev Withdraw ULAND that gets stuck in contract by accident\r\n\tfunction emergencyWithdrawERC20(address tokenAddress) external onlyOwner {\r\n\t\tIERC20 token = IERC20(tokenAddress);\r\n\t\ttoken.transfer(owner(), token.balanceOf(address(this)));\r\n\t}\r\n\r\n\t/*\r\n\t * onlyOwner\r\n\t */\r\n\r\n\tfunction setSignerAddress(address _signerAddress) public onlyOwner {\r\n\t\tsignerAddress = _signerAddress;\r\n\t}\r\n\r\n\tfunction setPause(bool _paused) public onlyOwner {\r\n\t\tpaused = _paused;\r\n\t}\r\n\r\n\tfunction setUlandContractAllow(\r\n\t\taddress contractAddress,\r\n\t\tbool access\r\n\t) public onlyOwner {\r\n\t\tulandContracts[contractAddress] = access;\r\n\t}\r\n\r\n\t/*\r\n\t * Events\r\n\t */\r\n\r\n\tevent Withdrawal(string nonce, Method method, address to, uint256 amount);\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ulandToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_signerAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"nonce\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"enum UlandXCH.Method\",\"name\":\"method\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ULAND_IS_AWESOME\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_ulandToken\",\"outputs\":[{\"internalType\":\"contract IUlandToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"_usedNonces\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"nonce\",\"type\":\"string\"},{\"internalType\":\"enum UlandXCH.Method\",\"name\":\"method\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"validTo\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct UlandXCH.WithdrawParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"dappwithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"emergencyWithdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"setPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signerAddress\",\"type\":\"address\"}],\"name\":\"setSignerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"access\",\"type\":\"bool\"}],\"name\":\"setUlandContractAllow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ulandContracts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"nonce\",\"type\":\"string\"},{\"internalType\":\"enum UlandXCH.Method\",\"name\":\"method\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"validTo\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct UlandXCH.WithdrawParams\",\"name\":\"params\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "UlandXCH", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "1", "ConstructorArguments": "0000000000000000000000009789df6753b7f813a1c55ed20ecf83571dfde428000000000000000000000000a92d115716a71c6ad8bcd9e00002cd1fc219f48c00000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000009554c414e44204d52500000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://eb3fa6029e0300cd2e2ab6f0047b07bc63f0604fcd0bf66d2ff0c1556ca55d8a"}