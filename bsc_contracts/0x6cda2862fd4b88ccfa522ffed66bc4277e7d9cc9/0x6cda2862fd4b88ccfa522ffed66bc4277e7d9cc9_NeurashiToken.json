{"SourceCode": "{\"BasicToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.8;\\r\\n\\r\\nabstract contract BEP20Basic {\\r\\n    uint public totalSupply;\\r\\n     function balanceOf(address who) public virtual view returns (uint256);\\r\\n     function transfer(address to, uint256 value) public virtual returns(bool);\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n}\\r\\n\\r\\nabstract contract BasicToken is BEP20Basic {\\r\\n    \\r\\n    mapping(address =\\u003e uint256) internal _balances;\\r\\n    \\r\\n    function  transfer(address to, uint256 value) public override validRecipient(to) returns(bool) {\\r\\n        _transfer(msg.sender, to, value);\\r\\n        return true;\\r\\n    }\\r\\n    \\r\\n    function _transfer(address from, address to, uint256 value) internal {\\r\\n        require(from != address(0), \\\"ERROR: transfer from the zero address\\\");\\r\\n        require(value \\u003e 0, \\\"ERROR: the transfer amount is 0\\\");\\r\\n        require(_balances[from] \\u003e= value, \\\"ERROR: transfer amount exceeds balance\\\");\\r\\n        _balances[from] = _balances[from] - value;\\r\\n        _balances[to] = _balances[to] + value;\\r\\n        emit Transfer(from, to, value);\\r\\n    }\\r\\n\\r\\n   function balanceOf(address _owner)  public override view returns(uint256) {\\r\\n      return _balances[_owner];\\r\\n    }\\r\\n\\r\\n    function availableBalance(address _owner) public view returns(uint256) {\\r\\n        return _balances[_owner];\\r\\n    }\\r\\n \\r\\n    modifier validRecipient(address _recipient) {\\r\\n        require(_recipient != address(0) \\u0026\\u0026 _recipient != address(this), \\\"ERROR: it cannot be the zero address or the address of this contract.\\\");\\r\\n    _;\\r\\n    }\\r\\n}\\r\\n\"},\"NeurashiToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.8;\\r\\n\\r\\nimport \\\"./SmartToken.sol\\\";\\r\\n\\r\\ncontract NeurashiToken is SmartToken {\\r\\n    string private constant _name = \\\"Neurashi\\\";\\r\\n    string private constant _symbol = \\\"NEI\\\";\\r\\n    uint8 private immutable _decimals = 18;\\r\\n    \\r\\n    constructor()  {\\r\\n        address account = msg.sender;\\r\\n        uint256 amount = 45000000000e18;\\r\\n        totalSupply = totalSupply + amount;\\r\\n        _balances[account] = _balances[account] + amount;\\r\\n        emit Transfer(address(0), account, amount);\\r\\n    }\\r\\n\\r\\n    function name() public pure returns(string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    function symbol() public pure returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    function decimals() public pure returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n    \\r\\n}\\r\\n\"},\"SmartToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.8;\\r\\n\\r\\nimport \\\"./StandardToken.sol\\\";\\r\\n\\r\\n\\r\\nabstract contract IBEP677 is IBEP20 {\\r\\n    function transferAndCall(address receiver, uint value, bytes memory data) public virtual returns (bool success);\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value, bytes data);\\r\\n}\\r\\n\\r\\nabstract contract BEP677Receiver {\\r\\n    function onTokenTransfer(address _sender, uint _value, bytes memory _data) public virtual;\\r\\n}\\r\\n\\r\\nabstract contract SmartToken is IBEP677, StandardToken {\\r\\n    \\r\\n    function transferAndCall(address _to, uint256 _value, bytes memory _data) public override validRecipient(_to) returns(bool success) {\\r\\n        _transfer(msg.sender, _to, _value);\\r\\n        emit Transfer(msg.sender, _to, _value, _data);\\r\\n        if (_isContract(_to)) {\\r\\n            contractFallback(_to, _value, _data);\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function contractFallback(address _to, uint _value, bytes memory _data) private {\\r\\n        BEP677Receiver receiver = BEP677Receiver(_to);\\r\\n        receiver.onTokenTransfer(msg.sender, _value, _data);\\r\\n    }\\r\\n\\r\\n    function _isContract(address addr) internal view returns (bool) {\\r\\n        uint256 size;\\r\\n        assembly {\\r\\n            size := extcodesize(addr)\\r\\n        }\\r\\n        return size \\u003e 0;\\r\\n    }\\r\\n    \\r\\n}\\r\\n\"},\"StandardToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.8;\\r\\n\\r\\nimport \\\"./BasicToken.sol\\\";\\r\\n\\r\\n\\r\\nabstract contract IBEP20 is BEP20Basic {\\r\\n    function allowance(address owner, address spender) public virtual view returns (uint256);\\r\\n    function approve(address spender, uint256 value) public virtual returns (bool);\\r\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\\r\\n\\r\\nabstract contract StandardToken is IBEP20, BasicToken {\\r\\n    mapping(address =\\u003e mapping(address =\\u003e uint256)) private _allowed;\\r\\n\\r\\n    function approve(address spender, uint256 value) public override validRecipient(spender) returns(bool) {\\r\\n        _approve(msg.sender, spender, value);\\r\\n        return true;\\r\\n    }\\r\\n    \\r\\n    function _approve(address _owner, address spender, uint256 value) private {\\r\\n        _allowed[_owner][spender] = value;\\r\\n        emit Approval(_owner, spender, value);\\r\\n    }\\r\\n\\r\\n    function transferFrom(address from, address to, uint256 value) public override validRecipient(to) returns(bool) {\\r\\n        require(_allowed[from][msg.sender] \\u003e= value, \\\"ERROR: transfer amount exceeds allowance\\\");\\r\\n        _transfer(from, to, value);\\r\\n        _approve(from, msg.sender, _allowed[from][msg.sender] - value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function allowance(address _owner, address _spender) public override view returns (uint256) {\\r\\n        return _allowed[_owner][_spender];\\r\\n    }\\r\\n\\r\\n    function increaseAllowance(address spender, uint256 addedValue) public validRecipient(spender) returns(bool) {\\r\\n        _approve(msg.sender, spender, _allowed[msg.sender][spender] + addedValue);\\r\\n        return true;\\r\\n    }\\r\\n    \\r\\n    function decreaseAllowance(address spender, uint256 subtractValue) public validRecipient(spender) returns(bool) {\\r\\n        uint256 oldValue = _allowed[msg.sender][spender];\\r\\n        if(subtractValue \\u003e oldValue) {\\r\\n            _approve(msg.sender, spender, 0);\\r\\n        }\\r\\n        else {\\r\\n            _approve(msg.sender, spender, oldValue - subtractValue);\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n}\\r\\n\"}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"availableBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transferAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "NeurashiToken", "CompilerVersion": "v0.8.8+commit.dddeac2f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://305457d77a7357dc2a31ee717d016b883601210fbb0a432be222dc6c2b4a9303"}