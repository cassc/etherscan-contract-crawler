{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.19;\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\ncontract permission {\r\n\r\n    address private _owner;\r\n    mapping(address => mapping(string => bytes32)) private _permit;\r\n\r\n    modifier forRole(string memory str) {\r\n        require(checkpermit(msg.sender,str),\"Permit Revert!\");\r\n        _;\r\n    }\r\n\r\n    constructor() {\r\n        newpermit(msg.sender,\"owner\");\r\n        newpermit(msg.sender,\"permit\");\r\n        _owner = msg.sender;\r\n    }\r\n\r\n    function owner() public view returns (address) { return _owner; }\r\n    function newpermit(address adr,string memory str) internal { _permit[adr][str] = bytes32(keccak256(abi.encode(adr,str))); }\r\n    function clearpermit(address adr,string memory str) internal { _permit[adr][str] = bytes32(keccak256(abi.encode(\"null\"))); }\r\n    function checkpermit(address adr,string memory str) public view returns (bool) {\r\n        if(_permit[adr][str]==bytes32(keccak256(abi.encode(adr,str)))){ return true; }else{ return false; }\r\n    }\r\n\r\n    function grantRole(address adr,string memory role) public forRole(\"owner\") returns (bool) { newpermit(adr,role); return true; }\r\n    function revokeRole(address adr,string memory role) public forRole(\"owner\") returns (bool) { clearpermit(adr,role); return true; }\r\n\r\n    function transferOwnership(address adr) public forRole(\"owner\") returns (bool) {\r\n        newpermit(adr,\"owner\");\r\n        clearpermit(msg.sender,\"owner\");\r\n        _owner = adr;\r\n        return true;\r\n    }\r\n\r\n    function renounceOwnership() public forRole(\"owner\") returns (bool) {\r\n        newpermit(address(0),\"owner\");\r\n        clearpermit(msg.sender,\"owner\");\r\n        _owner = address(0);\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract BWGMasterChefv3 is permission {\r\n\r\n    address[] private participants;\r\n\r\n    event Deposit(address indexed from,address indexed to,uint256 amount,uint256 blockstamp);\r\n    event Withdraw(address indexed to,uint256 amount,uint256 blockstamp);\r\n    event Claim(address indexed to,uint256 amount,uint256 blockstamp);\r\n    \r\n    struct userInfo {\r\n        uint256 amount;\r\n        uint256 rewards;\r\n        uint256 rewardDebt;\r\n        bool register;\r\n    }\r\n\r\n    address public treasury = address(0xdead);\r\n\r\n    address public rewardToken = 0x55d398326f99059fF775485246999027B3197955;\r\n    address public depositToken = 0x5DA8C3C30FcF2A17825fB09507ae358ac88202E9;\r\n\r\n    address public WBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\r\n    address public pairToken = 0x152B5f27072e602F81DFba477bC142f4A0161C43;\r\n\r\n    uint256 public depositFee = 20;\r\n    uint256 depositFeeDenominator = 1000;\r\n\r\n    uint256 public minimumETHValue;\r\n\r\n    uint256 public rewardPerBlock;\r\n    uint256 public totalSupply;\r\n    uint256 public latestBlock;\r\n    uint256 public accumulated;\r\n    uint256 public finalBlock;\r\n    bool public disbleDeposit;\r\n\r\n    mapping(address => userInfo) public user;\r\n\r\n    bool locked;\r\n    modifier noReentrant() {\r\n        require(!locked, \"No re-entrancy\");\r\n        locked = true;\r\n        _;\r\n        locked = false;\r\n    }\r\n\r\n    constructor() {}\r\n\r\n    function viewParticipants() public view returns (address[] memory) {\r\n        return participants;\r\n    }\r\n\r\n    function deposit(address addr,uint256 amount) external noReentrant returns (bool) {\r\n        require(amount > 0, \"Deposit amount can't be zero\");\r\n        require(!disbleDeposit,\"Pool Was Not Actived\");\r\n        require(amount>=getMinimumAmount(minimumETHValue),\"Error on minimal deposiit amount\");\r\n        if(!user[addr].register){\r\n            user[addr].register = true;\r\n            participants.push(addr);\r\n        }\r\n        harvestRewards(addr);\r\n        uint256 fee = amount * depositFee / depositFeeDenominator;\r\n        amount = amount - fee;\r\n        IERC20(depositToken).transferFrom(msg.sender,treasury,fee);\r\n        user[addr].amount = user[addr].amount + amount;\r\n        user[addr].rewardDebt = user[addr].amount * accumulated / 1e12;\r\n        totalSupply = totalSupply + amount;\r\n        IERC20(depositToken).transferFrom(msg.sender,address(this),amount);\r\n        emit Deposit(msg.sender,addr,amount,block.timestamp);\r\n        return true;\r\n    }\r\n\r\n    function withdraw() external noReentrant returns (bool) {\r\n        address addr = msg.sender;\r\n        uint256 amount = user[addr].amount;\r\n        require(amount > 0, \"Withdraw amount can't be zero\");\r\n        harvestRewards(addr);\r\n        user[addr].amount = 0;\r\n        user[addr].rewardDebt = user[addr].amount * accumulated / 1e12;\r\n        totalSupply = totalSupply - amount;\r\n        IERC20(depositToken).transfer(addr,amount);\r\n        emit Withdraw(msg.sender,amount,block.timestamp);\r\n        return true;\r\n    }\r\n\r\n    function getMinimumAmount(uint256 ethAmount) public view returns (uint256) {\r\n        uint256 balanceOfETH = IERC20(WBNB).balanceOf(pairToken);\r\n        uint256 balanceOfToken = IERC20(depositToken).balanceOf(pairToken);\r\n        uint256 tokenPerETH = ( balanceOfToken / balanceOfETH ) * 1e18;\r\n        return tokenPerETH * ethAmount / 1e18;\r\n    }\r\n\r\n    function claimHarvestRewards() public noReentrant returns (bool) {\r\n        harvestRewards(msg.sender);\r\n        return true;\r\n    }\r\n\r\n    function harvestRewards(address addr) internal {\r\n        updatePoolRewards();\r\n        uint256 rewardsToHarvest = (user[addr].amount * accumulated / 1e12) - user[addr].rewardDebt;\r\n        if (rewardsToHarvest == 0) {\r\n            user[addr].rewardDebt = user[addr].amount * accumulated / 1e12;\r\n            return;\r\n        }\r\n        user[addr].rewards = 0;\r\n        user[addr].rewardDebt = user[addr].amount * accumulated / 1e12;\r\n        if(rewardsToHarvest>0){\r\n            IERC20(rewardToken).transfer(addr,rewardsToHarvest);\r\n            emit Claim(msg.sender,rewardsToHarvest,block.timestamp);\r\n        }\r\n    }\r\n\r\n    function updatePoolRewards() internal {\r\n        if (totalSupply == 0) {\r\n            latestBlock = block.timestamp;\r\n            return;\r\n        }\r\n        if(finalBlock!=0 && block.timestamp > finalBlock){ \r\n            latestBlock = finalBlock;\r\n        }\r\n        uint256 period = block.timestamp - latestBlock;\r\n        uint256 rewards = period * rewardPerBlock;\r\n        accumulated = accumulated + (rewards * 1e12 / totalSupply);\r\n        latestBlock = block.timestamp;\r\n    }\r\n\r\n    function pendingReward(address addr) external view returns (uint256) {\r\n        if (totalSupply == 0) { return 0; }\r\n        uint256 period = block.timestamp - latestBlock;\r\n        uint256 rewards = period * rewardPerBlock;\r\n        uint256 t_accumulated = accumulated + (rewards * 1e12 / totalSupply);\r\n        return (user[addr].amount * t_accumulated / 1e12) - user[addr].rewardDebt;\r\n    }\r\n\r\n    function poolDisbleToggle() public forRole(\"owner\") returns (bool) {\r\n        disbleDeposit = !disbleDeposit;\r\n        return true;\r\n    }\r\n\r\n    function updateUserWithPermit(address account,uint256 amount,uint256 rewards,uint256 rewardDebt,bool registered) external forRole(\"permit\") returns (bool) {\r\n        _updateUser(account,amount,rewards,rewardDebt,registered);\r\n        return true;\r\n    }\r\n\r\n    function _updateUser(address account,uint256 amount,uint256 rewards,uint256 rewardDebt,bool registered) internal {\r\n        user[account].amount = amount;\r\n        user[account].rewards = rewards;\r\n        user[account].rewardDebt = rewardDebt;\r\n        user[account].register = registered;\r\n    }\r\n\r\n    function updateTokenAddress(address[] memory Addresses) external forRole(\"owner\") returns (bool) {\r\n        rewardToken = Addresses[0];\r\n        depositToken = Addresses[1];\r\n        treasury = Addresses[2];\r\n        return true;\r\n    }\r\n\r\n    function updateRewardPerMonth(uint256 amount) external forRole(\"owner\") returns (bool) {\r\n        uint256 totalBusdRewardPerMonth = amount * 1e18;\r\n        uint256 monthSecond = 2592000;\r\n        rewardPerBlock = totalBusdRewardPerMonth / monthSecond;\r\n        updatePoolRewards();\r\n        return true;\r\n    }\r\n\r\n    function updateRewardPerBlock(uint256 amount) external forRole(\"owner\") returns (bool) {\r\n        rewardPerBlock = amount;\r\n        updatePoolRewards();\r\n        return true;\r\n    }\r\n\r\n\r\n    function updateMinimalDeposit(uint256 amountETH) external forRole(\"owner\") returns (bool) {\r\n        minimumETHValue = amountETH;\r\n        return true;\r\n    }\r\n\r\n    function updateDepositFee(uint256 amount) external forRole(\"owner\") returns (bool) {\r\n        depositFee = amount;\r\n        return true;\r\n    }\r\n\r\n    function updateFinalBlock(uint256 _block) external forRole(\"owner\") returns (bool) {\r\n        finalBlock = _block;\r\n        updatePoolRewards();\r\n        return true;\r\n    }\r\n\r\n    function purgeToken(address token,uint256 amount) public forRole(\"owner\") returns (bool) {\r\n        IERC20(token).transfer(msg.sender,amount);\r\n        return true;\r\n    }\r\n\r\n    function purgeETH() public forRole(\"owner\") returns (bool) {\r\n        _clearStuckBalance(owner());\r\n        return true;\r\n    }\r\n\r\n    function _clearStuckBalance(address receiver) internal {\r\n        (bool success,) = receiver.call{ value: address(this).balance }(\"\");\r\n        require(success, \"!fail to send eth\");\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockstamp\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockstamp\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockstamp\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WBNB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accumulated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"checkpermit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimHarvestRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disbleDeposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"getMinimumAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"role\",\"type\":\"string\"}],\"name\":\"grantRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumETHValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"pendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolDisbleToggle\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"purgeETH\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"purgeToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"role\",\"type\":\"string\"}],\"name\":\"revokeRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"updateDepositFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"updateFinalBlock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"}],\"name\":\"updateMinimalDeposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"updateRewardPerBlock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"updateRewardPerMonth\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"Addresses\",\"type\":\"address[]\"}],\"name\":\"updateTokenAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"registered\",\"type\":\"bool\"}],\"name\":\"updateUserWithPermit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"user\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"register\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewParticipants\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BWGMasterChefv3", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://1110da3c08d6ed64d9c61473c5e32197da2e64ca9623185243d57809c1018278"}