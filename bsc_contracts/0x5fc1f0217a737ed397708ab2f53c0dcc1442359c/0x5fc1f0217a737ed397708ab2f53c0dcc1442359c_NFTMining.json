{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.17;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function sync() external;\r\n        event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n     function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function getAmountsOut(uint amountIn, address[] memory path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IERC20 {\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function decimals() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\nabstract contract Ownable {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"!owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"new is 0\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract NFTMining is Ownable{\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public buyToLpFee = 50;\r\n    uint256 public buyToInsuranceAddressFee = 15;\r\n    uint256 public buyToTeamAddressFee = 20;\r\n    uint256 public buyToMarketAddressFee = 15;\r\n\r\n    address private insuranceAddress = 0x875562C0a3ffE8B9AD33444F9Fd6b89cF18De149; //\u6d4b\u8bd5\u7f51\uff0c\u6240\u4ee5\u8fd8\u6ca1\u6539\r\n    address private teamAddress = 0x03d0aB4A81035dae65ec04db190254c78F5602bf;\r\n    address private marketAddress = 0xf4221279A481e7F360094c9f072FcCc279b1f733;\r\n\r\n    uint256 public lowAmount = 500;\r\n    uint256 public upAmount = 5000;\r\n\r\n    address private deadAddress = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    //NBO\u548cUSDT\u5730\u5740\r\n    address public NBO;\r\n    address public USDT;\r\n\r\n    //bsc\u4e0a\u8def\u7531\r\n    address public uniswapV2Router;\r\n    address public uniswapV2Pair;\r\n\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 ethReceived,\r\n        uint256 tokensIntoLiqudity\r\n    );\r\n    event buyNFTMiningEvent(address sender,uint256 amount,uint256 time);\r\n\r\n    mapping(address => bool) public isBuy;\r\n\r\n    constructor(address _nboAddress,address _usdtAddress){\r\n        NBO = _nboAddress;\r\n        USDT = _usdtAddress;\r\n\r\n        uniswapV2Router = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n        uniswapV2Pair = IUniswapV2Factory(IUniswapV2Router02(uniswapV2Router).factory()).getPair(NBO,USDT); //NBO\u548cusd\u4ea4\u6613\u5bf9\r\n\r\n        IERC20(USDT).approve(address(uniswapV2Router),type(uint256).max);\r\n        IERC20(NBO).approve(address(uniswapV2Router),type(uint256).max);\r\n    }\r\n\r\n    function setBuyAmount(uint256 low,uint256 up) public onlyOwner{\r\n        lowAmount = low;\r\n        upAmount = up;\r\n    }\r\n\r\n    //\u6e05\u9664\u7528\u6237\u8d2d\u4e70\r\n    function setIsBuyToFalse(address user) public onlyOwner{\r\n        isBuy[user] = false;\r\n    }\r\n\r\n    //\u7528\u6570\u91cf\u4e3aamount\u7684USDT\u6240\u5bf9\u5e94\u4ef7\u503c\u7684NBO\u6765\u8d2d\u4e70NFT\r\n    function buyNFT(uint256 _amount) public returns(bool){\r\n        if(_amount>upAmount || _amount<lowAmount || _amount%50 != 0){ //\u9ed8\u8ba4amount\u5927\u4e8e500u\u5c0f\u4e8e5000u\u5e76\u4e14\u4e3a50\u7684\u6574\u6570\u500d\r\n            return false;\r\n        }\r\n\r\n        if(isBuy[msg.sender]){\r\n            return false;\r\n        }\r\n        isBuy[msg.sender] = true;\r\n\r\n        uint256 amount = _amount * 1e18;\r\n\r\n        require(IERC20(USDT).allowance(msg.sender,address(this)) >= amount,\"allowance is not enough\");\r\n        require(IERC20(USDT).balanceOf(msg.sender) >= amount,\"sender dont have enough usdt\");\r\n        IERC20(USDT).transferFrom(msg.sender,address(this),amount);\r\n\r\n        uint256 swapAndAddLpAmount = amount.mul(buyToLpFee).div(100);\r\n        swapAndLiquify(swapAndAddLpAmount); //\u5c0650%\u7684amount\u4e2d\u7684\u4e00\u534a\u4ea4\u6362\u6210NBO\u540e\u52a0\u5165\u6c60\u5b50\r\n        \r\n        distributeToAddress(amount); //\u51cf\u53bb50%\u7684\u52a0\u6c60\u5b50\u8d39\u540e\uff0c\u5c06\u5269\u4e0b\u7684USDT\u5206\u914d\u7ed9\u51e0\u4e2a\u5730\u5740\r\n\r\n        emit buyNFTMiningEvent(msg.sender,amount,block.timestamp);\r\n\r\n        return true;\r\n    }\r\n\r\n    function distributeToAddress(uint256 amount) private{\r\n        uint256 buyToInsuranceAmount = amount.mul(buyToInsuranceAddressFee).div(100);\r\n        uint256 buyToTeamAddressAmount = amount.mul(buyToTeamAddressFee).div(100);\r\n        uint256 buyToMarketAddressAmount = amount.mul(buyToMarketAddressFee).div(100);\r\n        IERC20(USDT).transfer(insuranceAddress,buyToInsuranceAmount);\r\n        IERC20(USDT).transfer(teamAddress,buyToTeamAddressAmount);\r\n        IERC20(USDT).transfer(marketAddress,buyToMarketAddressAmount);\r\n    }\r\n\r\n    //\u5c06\u8fdb\u573a\u8d44\u91d1\u768450%NBO\u4e2d\u4e00\u534a\u5151\u6362\u6210USDT\u4e0e\u53e6\u4e00\u534a\u6dfb\u52a0\u8fdbLP\u6c60\u5b50\r\n    function swapAndLiquify(uint256 amount) private {\r\n        uint256 half = amount.div(2);\r\n        uint256 otherHalf = amount.sub(half);\r\n\r\n        uint256 initialBalance = address(this).balance;\r\n\r\n        swapUSDTForNBO(half); // <- this breaks the USDT -> NBO swap when swap+liquify is triggered\r\n\r\n        uint256 newBalance = address(this).balance.sub(initialBalance);\r\n\r\n        // add liquidity to uniswap\r\n        addLiquidity(half,IERC20(NBO).balanceOf(address(this)));\r\n\r\n        emit SwapAndLiquify(half, newBalance, otherHalf);\r\n    }\r\n\r\n    function swapUSDTForNBO(uint256 amount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = USDT;\r\n        path[1] = NBO;\r\n\r\n        // make the swap\r\n        IUniswapV2Router02(uniswapV2Router).swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            amount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    //\u6dfb\u52a0NBO_USDT\u7684\u6c60\u5b50\r\n    function addLiquidity(uint256 usdtAmount, uint256 nboAmount) private {\r\n        // add the liquidity\r\n        IUniswapV2Router02(uniswapV2Router).addLiquidity(\r\n            NBO,\r\n            USDT,\r\n            nboAmount,\r\n            usdtAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            deadAddress,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    //\u63d0\u53d6\u8be5\u5408\u7ea6\u4e2d\u7684\u67d0\u4e2a\u4ee3\u5e01\r\n    function withdrawToken(address tokenAddress,uint256 amount) public onlyOwner{\r\n        IERC20(tokenAddress).transfer(msg.sender,amount);\r\n    }\r\n    function withdrawETH() public onlyOwner{\r\n        (bool _bool,) = payable(msg.sender).call{value:address(this).balance}(\"\");\r\n        require(_bool,\"withdrawETH failed\");\r\n    }\r\n\r\n    receive() external payable{}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nboAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdtAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"buyNFTMiningEvent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NBO\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"buyNFT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyToInsuranceAddressFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyToLpFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyToMarketAddressFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyToTeamAddressFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lowAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"low\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"up\",\"type\":\"uint256\"}],\"name\":\"setBuyAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"setIsBuyToFalse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "NFTMining", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000007d0f3a424331512ea5871ef356b924f1e1a8c6a700000000000000000000000055d398326f99059ff775485246999027b3197955", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://11bf39e1bae5d2c8b425de82fd7c7b4aa9e68bb49026ec293de8d5093dbfc349"}