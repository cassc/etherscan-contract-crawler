{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.9;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    // add liquidityeth\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    uint256 private _lockTime;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    function getUnlockTime() public view returns (uint256) {\r\n        return _lockTime;\r\n    }\r\n\r\n    function getTime() public view returns (uint256) {\r\n        return block.timestamp;\r\n    }\r\n\r\n    function lock(uint256 time) public virtual onlyOwner {\r\n        _previousOwner = _owner;\r\n        _owner = address(0);\r\n        _lockTime = block.timestamp + time;\r\n        emit OwnershipTransferred(_owner, address(0));\r\n    }\r\n\r\n    function unlock() public virtual {\r\n        require(\r\n            _previousOwner == msg.sender,\r\n            \"You don't have permission to unlock\"\r\n        );\r\n        require(block.timestamp > _lockTime, \"Contract is locked until 7 days\");\r\n        emit OwnershipTransferred(_owner, _previousOwner);\r\n        _owner = _previousOwner;\r\n    }\r\n}\r\n\r\ncontract Presale is Ownable {\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n\r\n    mapping(address => uint256) public tokenClaimed;\r\n    mapping(address => uint256) public rewardsGiven;\r\n    mapping(address => bool) public isWhitelisted;\r\n    mapping(address => bool) public isBlacklisted;\r\n    mapping(address => uint256) public userEthDepositAmount;\r\n    mapping(uint256 => uint256) public roundEthRaised;\r\n\r\n    address[] public depositers;\r\n    address public projectToken;\r\n\r\n    uint256 public ethDepositLimit; // eth limit per person\r\n    uint256 public ethDepositPrice; // token price per eth (decimals included)\r\n    uint256 public minEthDeposit; // min eth deposit per person\r\n    uint256 public totalReferralCount = 0;\r\n    uint256 public referralPercentage = 10;\r\n    uint256 public ethRaiseLimit = 0; // eth that can be raised per round\r\n\r\n    uint256 public presaleRound = 0;\r\n    uint256 public totalProjectTokenSold = 0;\r\n\r\n    bool public isPresaleActive = false;\r\n    bool public isPresalePublic = false;\r\n\r\n    bool lock_ = false;\r\n\r\n    modifier Lock() {\r\n        require(!lock_, \"Process is locked\");\r\n        lock_ = true;\r\n        _;\r\n        lock_ = false;\r\n    }\r\n\r\n    event SetEthDepositPrice(uint256 _price);\r\n    event SetPresaleStartTime(uint256 _startTime);\r\n    event SetPresaleEndTime(uint256 _endTime);\r\n    event SetEthDepositLimit(uint256 _limit);\r\n\r\n    constructor() {\r\n        ethDepositLimit = 50 ether;\r\n        minEthDeposit = 0.01 ether;\r\n        projectToken = 0xB879E304a5709694bB1814403EDCdB1c88a446CF;\r\n        address currentRouter;\r\n\r\n        if (block.chainid == 97) {\r\n            currentRouter = 0xD99D1c33F9fC3444f8101754aBC46c52416550D1; // PCS Testnet\r\n        } else if (block.chainid == 1 || block.chainid == 4) {\r\n            currentRouter = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D; //Mainnet\r\n        } else if (block.chainid == 56) {\r\n            currentRouter = 0x10ED43C718714eb63d5aA57B78B54704E256024E; // BSC\r\n        } else {\r\n            revert();\r\n        }\r\n\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(currentRouter);\r\n        uniswapV2Router = _uniswapV2Router;\r\n        transferOwnership(0x23c7D54411b1e30fAc755479A7A214dD0d084629);\r\n    }\r\n\r\n    // receive eth and auto deposit in presale\r\n    receive() external payable {\r\n        depositEth(0x0000000000000000000000000000000000000000);\r\n    }\r\n\r\n    // deposit eth using this function\r\n    function depositEth(address _referral) public payable Lock {\r\n        require(isPresaleActive, \"Presale is not active\");\r\n        require(\r\n            roundEthRaised[presaleRound] + msg.value <= ethRaiseLimit,\r\n            \"Hardcap reached\"\r\n        );\r\n        require(\r\n            isPresalePublic || isWhitelisted[msg.sender],\r\n            \"You are not whitelisted\"\r\n        );\r\n        require(!isBlacklisted[msg.sender], \"You are blacklisted\");\r\n        require(ethDepositPrice > 0, \"Eth deposit price not set\");\r\n\r\n        require(msg.value >= minEthDeposit, \"Invalid amount\");\r\n        require(\r\n            userEthDepositAmount[msg.sender] + msg.value <= ethDepositLimit,\r\n            \"Deposit limit exceeded\"\r\n        );\r\n\r\n        // implement refferal here\r\n        address zero = 0x0000000000000000000000000000000000000000;\r\n        uint256 _referralAmount;\r\n\r\n        if (_referral != zero) {\r\n            _referralAmount = (msg.value * referralPercentage) / 100;\r\n            payable(_referral).transfer(_referralAmount);\r\n            rewardsGiven[_referral] += _referralAmount;\r\n            totalReferralCount += 1;\r\n        }\r\n\r\n        if (tokenClaimed[msg.sender] == 0) depositers.push(msg.sender);\r\n        payable(owner()).transfer(msg.value - _referralAmount);\r\n        IERC20(projectToken).transfer(\r\n            msg.sender,\r\n            (msg.value * ethDepositPrice) / (10 ** 18)\r\n        );\r\n\r\n        userEthDepositAmount[msg.sender] += msg.value;\r\n        roundEthRaised[presaleRound] += msg.value;\r\n        tokenClaimed[msg.sender] += (msg.value * ethDepositPrice) / (10 ** 18);\r\n        totalProjectTokenSold += (msg.value * ethDepositPrice) / (10 ** 18);\r\n    }\r\n\r\n    // read only functions\r\n\r\n    // get all depositers and their claimed amount\r\n    function getDepositors()\r\n        public\r\n        view\r\n        returns (address[] memory, uint256[] memory)\r\n    {\r\n        address[] memory _depositers = new address[](depositers.length);\r\n        uint256[] memory _claimed = new uint256[](depositers.length);\r\n\r\n        for (uint256 i = 0; i < depositers.length; i++) {\r\n            _depositers[i] = depositers[i];\r\n            _claimed[i] = tokenClaimed[depositers[i]];\r\n        }\r\n\r\n        return (_depositers, _claimed);\r\n    }\r\n\r\n    // read only functions here--------------------------------------------\r\n\r\n    // total claimed amount of all holders\r\n    function totalClaimedAmount() public view returns (uint256) {\r\n        uint256 _claimed = 0;\r\n        for (uint256 i = 0; i < depositers.length; i++) {\r\n            _claimed += tokenClaimed[depositers[i]];\r\n        }\r\n        return _claimed;\r\n    }\r\n\r\n    // Only owner functions here---------------------------------------------\r\n\r\n    function nextRound() public onlyOwner {\r\n        // presaleTokenReleased (1 = 0.01%)\r\n        presaleRound += 1;\r\n        uint mult = 1e6 * 10 ** IERC20(projectToken).decimals(); // multiplier * decimals\r\n\r\n        if (presaleRound == 1) {\r\n            isPresaleActive = true;\r\n            isPresalePublic = true;\r\n            ethRaiseLimit = 50 ether;\r\n            ethDepositPrice = 1500 * mult;\r\n        } else if (presaleRound == 2) {\r\n            ethRaiseLimit = 100 ether;\r\n            ethDepositPrice = 1125 * mult;\r\n        } else if (presaleRound == 3) {\r\n            ethRaiseLimit = 250 ether;\r\n            ethDepositPrice = 750 * mult;\r\n        } else if (presaleRound == 4) {\r\n            ethRaiseLimit = 500 ether;\r\n            ethDepositPrice = 375 * mult;\r\n        } else if (presaleRound == 5) {\r\n            ethRaiseLimit = 1000 ether;\r\n            ethDepositPrice = 225 * mult;\r\n        } else if (presaleRound == 6) {\r\n            ethRaiseLimit = 2500 ether;\r\n            ethDepositPrice = 185 * mult;\r\n        } else {\r\n            isPresaleActive = false;\r\n        }\r\n    }\r\n\r\n    // override tokenClaimable\r\n    function overrideTokenClaimable(\r\n        address _user,\r\n        uint256 _amount\r\n    ) public onlyOwner {\r\n        tokenClaimed[_user] = _amount;\r\n    }\r\n\r\n    // set presale status\r\n    function setReferralPercentage(uint _percentage) public onlyOwner {\r\n        referralPercentage = _percentage;\r\n    }\r\n\r\n    // set presale status\r\n    function setPresaleStatus(bool _status) public onlyOwner {\r\n        isPresaleActive = _status;\r\n    }\r\n\r\n    // set presale public\r\n    function setPresalePublic(bool _status) public onlyOwner {\r\n        isPresalePublic = _status;\r\n    }\r\n\r\n    // set presale token deposit limit\r\n    function setMinEthDeposit(uint256 _price) public onlyOwner {\r\n        minEthDeposit = _price;\r\n    }\r\n\r\n    // set presale round\r\n    function setPresaleRound(uint256 _round) public onlyOwner {\r\n        presaleRound = _round;\r\n    }\r\n\r\n    // set eth raise limit\r\n    function setEthRaiseLimit(uint256 _newLimit) public onlyOwner {\r\n        ethRaiseLimit = _newLimit;\r\n    }\r\n\r\n    // whitelist user\r\n    function whitelistUser(address _user) public onlyOwner {\r\n        isWhitelisted[_user] = true;\r\n    }\r\n\r\n    // blacklist user\r\n    function blacklistUser(address _user, bool _flag) public onlyOwner {\r\n        isBlacklisted[_user] = _flag;\r\n    }\r\n\r\n    // whitelist users\r\n    function whitelistUsers(\r\n        address[] memory _users,\r\n        bool _flag\r\n    ) public onlyOwner {\r\n        for (uint256 i = 0; i < _users.length; i++) {\r\n            isWhitelisted[_users[i]] = _flag;\r\n        }\r\n    }\r\n\r\n    // set presale token\r\n    function setProjectToken(address _token) public onlyOwner {\r\n        projectToken = _token;\r\n    }\r\n\r\n    // blacklist users\r\n    function blacklistUsers(address[] memory _users) public onlyOwner {\r\n        for (uint256 i = 0; i < _users.length; i++) {\r\n            isBlacklisted[_users[i]] = true;\r\n        }\r\n    }\r\n\r\n    // set eth deposit limit\r\n    function setEthDepositLimit(uint256 _limit) public onlyOwner {\r\n        ethDepositLimit = _limit;\r\n        emit SetEthDepositLimit(_limit);\r\n    }\r\n\r\n    // set eth deposit price\r\n    function setEthDepositPrice(uint256 _price) public onlyOwner {\r\n        ethDepositPrice = _price;\r\n        emit SetEthDepositPrice(_price);\r\n    }\r\n\r\n    // this function is to withdraw BNB\r\n    function withdrawEth(uint256 _amount) external onlyOwner returns (bool) {\r\n        (bool success, ) = payable(msg.sender).call{value: _amount}(\"\");\r\n        return success;\r\n    }\r\n\r\n    // this function is to withdraw tokens\r\n    function withdrawBEP20(\r\n        address _tokenAddress,\r\n        uint256 _amount\r\n    ) external onlyOwner returns (bool) {\r\n        IERC20 token = IERC20(_tokenAddress);\r\n        bool success = token.transfer(msg.sender, _amount);\r\n        return success;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"SetEthDepositLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"SetEthDepositPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"SetPresaleEndTime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"SetPresaleStartTime\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_flag\",\"type\":\"bool\"}],\"name\":\"blacklistUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"}],\"name\":\"blacklistUsers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referral\",\"type\":\"address\"}],\"name\":\"depositEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"depositers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethDepositLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethDepositPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethRaiseLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDepositors\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPresaleActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPresalePublic\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minEthDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"overrideTokenClaimable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projectToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referralPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardsGiven\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roundEthRaised\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"setEthDepositLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setEthDepositPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newLimit\",\"type\":\"uint256\"}],\"name\":\"setEthRaiseLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setMinEthDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setPresalePublic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"}],\"name\":\"setPresaleRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setPresaleStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setProjectToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percentage\",\"type\":\"uint256\"}],\"name\":\"setReferralPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalClaimedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalProjectTokenSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReferralCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userEthDepositAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"whitelistUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_flag\",\"type\":\"bool\"}],\"name\":\"whitelistUsers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawBEP20\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEth\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Presale", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://4494528abcca36a2ed69e5606fca830a5eb253dd6d3537116cda5d23e7c58b92"}