{"SourceCode": "pragma solidity ^0.6.0;\r\npragma experimental ABIEncoderV2;\r\n// SPDX-License-Identifier: GPL-3.0-or-later\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor() internal {}\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), 'Ownable: caller is not the owner');\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), 'Ownable: new owner is the zero address');\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\ncontract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, 'SafeMath: addition overflow');\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, 'SafeMath: subtraction overflow');\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, 'SafeMath: multiplication overflow');\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, 'SafeMath: division by zero');\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, 'SafeMath: modulo by zero');\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n\r\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = x < y ? x : y;\r\n    }\r\n\r\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\r\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\r\n        if (y > 3) {\r\n            z = y;\r\n            uint256 x = y / 2 + 1;\r\n            while (x < z) {\r\n                z = x;\r\n                x = (y / x + x) / 2;\r\n            }\r\n        } else if (y != 0) {\r\n            z = 1;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            codehash := extcodehash(account)\r\n        }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, 'Address: insufficient balance');\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{value: amount}('');\r\n        require(success, 'Address: unable to send value, recipient may have reverted');\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, 'Address: low-level call failed');\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, 'Address: low-level call with value failed');\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, 'Address: insufficient balance for call');\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 weiValue,\r\n        string memory errorMessage\r\n    ) private returns (bytes memory) {\r\n        require(isContract(target), 'Address: call to non-contract');\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface IBEP20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the token decimals.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Returns the token symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the bep token owner.\r\n     */\r\n    function getOwner() external view returns (address);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title SafeBEP20\r\n * @dev Wrappers around BEP20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeBEP20 for IBEP20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeBEP20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IBEP20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IBEP20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IBEP20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IBEP20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            'SafeBEP20: approve from non-zero to non-zero allowance'\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IBEP20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IBEP20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(\r\n            value,\r\n            'SafeBEP20: decreased allowance below zero'\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IBEP20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, 'SafeBEP20: low-level call failed');\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), 'SafeBEP20: BEP20 operation did not succeed');\r\n        }\r\n    }\r\n}\r\n\r\nlibrary xWinLib {\r\n   \r\n    // Info of each pool.\r\n    struct PoolInfo {\r\n        address lpToken;           \r\n        uint256 rewardperblock;       \r\n        uint256 multiplier;       \r\n    }\r\n    \r\n    struct UserInfo {\r\n        uint256 amount;     \r\n        uint256 blockstart; \r\n    }\r\n\r\n    struct TradeParams {\r\n      address xFundAddress;\r\n      uint256 amount;\r\n      uint256 priceImpactTolerance;\r\n      uint256 deadline;\r\n      bool returnInBase;\r\n      address referral;\r\n    }  \r\n   \r\n    struct transferData {\r\n      \r\n      address[] targetNamesAddress;\r\n      uint256 totalTrfAmt;\r\n      uint256 totalUnderlying;\r\n      uint256 qtyToTrfAToken;\r\n    }\r\n    \r\n    struct xWinReward {\r\n      uint256 blockstart;\r\n      uint256 accBasetoken;\r\n      uint256 accMinttoken;\r\n      uint256 previousRealizedQty;\r\n    }\r\n    \r\n    struct xWinReferral {\r\n      address referral;\r\n    }\r\n    \r\n    struct UnderWeightData {\r\n      uint256 activeWeight;\r\n      uint256 fundWeight;\r\n      bool overweight;\r\n      address token;\r\n    }\r\n    \r\n    struct DeletedNames {\r\n      address token;\r\n      uint256 targetWeight;\r\n    }\r\n    \r\n    struct PancakePriceToken {\r\n        string tokenname;\r\n        address addressToken;     \r\n    }\r\n\r\n}\r\n\r\n// helper methods for interacting with BEP20 tokens and sending ETH that do not consistently return true/false\r\nlibrary TransferHelper {\r\n    function safeApprove(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\r\n    }\r\n\r\n    function safeTransfer(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n    }\r\n\r\n    function safeTransferBNB(address to, uint256 value) internal {\r\n        (bool success, ) = to.call{value: value}(new bytes(0));\r\n        require(success, 'TransferHelper: BNB_TRANSFER_FAILED');\r\n    }\r\n}\r\n\r\ninterface xWinFund {\r\n    \r\n    function getManagerFee() external view returns(uint256);\r\n    function getTargetWeight(address addr) external view returns (uint256);\r\n    function getWhoIsManager() external view returns(address mangerAddress);\r\n    function getBalance(address fromAdd) external view returns (uint256 balance);\r\n    function getFundValues() external view returns (uint256);\r\n    function getTargetWeightQty(address targetAdd, uint256 srcQty) external view returns (uint256);\r\n    function updateManager(address managerAdd) external payable;\r\n    function updateManagerFee(uint256 newFeebps) external payable;\r\n    function updateRebalancePeriod(uint newCycle) external payable;\r\n    function updateProtocol(address _newProtocol) external;\r\n    \r\n    function Redeem(\r\n        xWinLib.TradeParams memory _tradeParams,\r\n        address _investorAddress\r\n    ) external payable returns (uint256);\r\n        \r\n    function Rebalance(\r\n        address[] calldata _toAddresses, \r\n        uint256[] calldata _targetWeight,\r\n        uint256 deadline,\r\n        uint256 priceImpactTolerance\r\n        ) external payable returns (uint256 baseccyBal);\r\n        \r\n    function Subscribe(\r\n        xWinLib.TradeParams memory _tradeParams,\r\n        address _investorAddress\r\n    ) external payable returns (uint256);\r\n        \r\n    function MoveNonIndexNameToBase(\r\n        address _tokenaddress,\r\n        uint256 deadline,\r\n        uint256 priceImpactTolerance\r\n        ) external returns (uint256 balanceToken, uint256 swapOutput);\r\n        \r\n    function CreateTargetNames(\r\n        address[] calldata _toAddresses, \r\n        uint256[] calldata _targetWeight\r\n    ) external payable;\r\n    \r\n    function emergencyRedeem(uint256 redeemUnit, address _investorAddress) external payable; \r\n    function emergencyRemoveFromFarm() external;\r\n   \r\n    function getUnitPrice() external view returns(uint256 unitprice);\r\n    function getUnitPriceInUSD() external view returns(uint256 unitprice);\r\n    function getTargetNamesAddress() external view returns (address[] memory _targetNamesAddress);\r\n}\r\n\r\n\r\ninterface xWinStake {\r\n    \r\n    function StakeReward(\r\n        address payable _investorAddress,\r\n        uint256 rewardQty,\r\n        uint256 bnbQty,\r\n        uint256 deadline\r\n        ) external payable; \r\n        \r\n    function GetQuotes(\r\n        uint256 rewardQty, \r\n        uint256 baseQty,\r\n        address targetToken\r\n        ) external view \r\n        returns (uint amountB, uint amountA, uint amountOut); \r\n}\r\n\r\n\r\ncontract xWinDefi is Ownable, ReentrancyGuard {\r\n    \r\n    using SafeMath for uint256;\r\n    using SafeBEP20 for IBEP20;\r\n\r\n\r\n    string public name;\r\n    address public xWinToken;\r\n    address private platformWallet;\r\n    address public xwinBenefitPool;\r\n    address private deployeraddress;\r\n    address private stakeAddress;\r\n    uint256 private platformFeeBps;\r\n    uint256 public startblock;\r\n    bool public emergencyOn = false;\r\n    mapping (uint256 => mapping (address => xWinLib.UserInfo)) public userInfo;\r\n    mapping(address => bool) public isxwinFund;\r\n    xWinLib.PoolInfo[] public poolInfo;\r\n    \r\n    mapping(address => xWinLib.xWinReward) public xWinRewards;\r\n    mapping(address => xWinLib.xWinReferral) public xWinReferral;\r\n    uint256 private rewardperuint = 95129375951;\r\n    uint256 private referralperunit = 100000000000000000;\r\n    uint256 private managerRewardperunit = 50000000000000000;\r\n    uint256 public rewardRemaining = 60000000000000000000000000;\r\n    \r\n    event Received(address, uint);\r\n\r\n    event _MoveNonIndexNameToBaseEvent(address indexed from, address indexed toFund, address tokenAddress, uint256 amount, uint swapOutput);\r\n    event _RebalanceAllInOne(address indexed from, address indexed toFund, uint256 baseBalance, uint txnTime);\r\n    event _Subscribe(address indexed from, address indexed toFund, uint256 subsAmt, uint256 mintQty);\r\n    event _Redeem(address indexed from, address indexed toFund, uint256 redeemUnit, uint256 rewardQty, uint256 redeemratio);\r\n    event _CreateTarget(address indexed from, address indexed toFund, address[] newTargets, uint256[] newWeight, uint txnTime);\r\n    event _StakeMyReward(address indexed from, uint256 rewardQty);\r\n    event _WithdrawReward(address indexed from, uint256 rewardQty);\r\n    event _DepositFarm(address indexed from, uint256 pid, uint256 amount);\r\n    event _WithdrawFarm(address indexed from, uint256 pid, uint256 amount);\r\n    event _EmergencyRedeem(address indexed user, address fundaddress, uint256 amount);\r\n    \r\n    modifier onlyEmergency {\r\n        require(emergencyOn == true, \"only emergency can call this\");\r\n        _;\r\n    }\r\n    \r\n    modifier onlyNonEmergency {\r\n        require(emergencyOn == false, \"only non-emergency can call this\");\r\n        _;\r\n    }\r\n    \r\n    constructor (\r\n            uint256 _platformFeeBps,\r\n            address _platformWallet,\r\n            address _xwinBenefitPool,\r\n            address _stakeAddress,\r\n            address _xWinToken\r\n        ) public {\r\n        \r\n        name = \"xWinDefi Protocol\";\r\n        platformWallet = _platformWallet;\r\n        xwinBenefitPool = _xwinBenefitPool;\r\n        platformFeeBps = _platformFeeBps;\r\n        deployeraddress = msg.sender;\r\n        startblock = block.number;\r\n        stakeAddress = _stakeAddress;\r\n        xWinToken = _xWinToken;\r\n    }\r\n    \r\n    receive() external payable {\r\n        emit Received(msg.sender, msg.value);\r\n    }\r\n    \r\n    function addxwinFund(address[] calldata _fundaddress, bool [] memory _isxwinFund) public onlyOwner {\r\n        \r\n        for (uint i = 0; i < _fundaddress.length; i++) {\r\n            isxwinFund[_fundaddress[i]] = _isxwinFund[i];\r\n        }\r\n    }\r\n    \r\n    function poolLength() external view returns (uint256) {\r\n        return poolInfo.length;\r\n    }\r\n    \r\n    // Add a new lp to the pool. Can only be called by the owner.\r\n    // DO NOT add the same LP token more than once. Rewards will be messed up if you do.\r\n    function add(address _lpToken, uint256 _rewardperblock, uint256 _multiplier) public onlyOwner onlyNonEmergency {\r\n        \r\n        poolInfo.push(xWinLib.PoolInfo({\r\n            lpToken: _lpToken,\r\n            rewardperblock : _rewardperblock,\r\n            multiplier : _multiplier\r\n        }));\r\n    }\r\n    \r\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\r\n    function emergencyWithdraw(uint256 _pid) public onlyEmergency {\r\n        \r\n        xWinLib.PoolInfo memory pool = poolInfo[_pid];\r\n        xWinLib.UserInfo storage user = userInfo[_pid][msg.sender];\r\n        TransferHelper.safeTransfer(pool.lpToken, msg.sender, user.amount);\r\n        user.amount = 0;\r\n        user.blockstart = 0;\r\n    }\r\n    \r\n    /// @dev reward per block by deployer\r\n    function updateRewardPerBlock(uint256 _rewardperblock) external onlyOwner {\r\n        rewardperuint = _rewardperblock;\r\n    }\r\n    \r\n    /// @dev turn on emerrgency state by deployer\r\n    function updateEmergencyState(bool _state) external onlyOwner {\r\n        emergencyOn = _state;\r\n    }\r\n    \r\n    /// @dev update xwin defi protocol\r\n    function updateProtocol(address _fundaddress, address _newProtocol) external onlyOwner {\r\n        xWinFund _xWinFund = xWinFund(_fundaddress);\r\n        _xWinFund.updateProtocol(_newProtocol);\r\n    }\r\n    \r\n     /// @dev create or update farm pool fee by deployer\r\n    function updateFarmPoolInfo(uint256 _pid, uint256 _rewardperblock, uint256 _multiplier) external onlyOwner {\r\n        \r\n        xWinLib.PoolInfo storage pool = poolInfo[_pid];\r\n        if(pool.lpToken != address(0)){\r\n            pool.rewardperblock = _rewardperblock;\r\n            pool.multiplier = _multiplier;\r\n        }\r\n    }\r\n    \r\n    /// @dev View function to see all pending xWin token earn on frontend.\r\n    function getAllPendingXwin(address _user) public view returns (uint256) {\r\n        \r\n        uint256 length = poolInfo.length;\r\n        uint256 total = 0;\r\n        for (uint256 pid = 0; pid < length; ++pid) {\r\n            total = total.add(pendingXwin(pid, _user));\r\n        }\r\n        return total;\r\n    }\r\n    \r\n    /// @dev View function to see pending xWin on frontend.\r\n    function pendingXwin(uint256 _pid, address _user) public view returns (uint256) {\r\n        \r\n        if(rewardRemaining == 0) return 0;\r\n        xWinLib.PoolInfo memory pool = poolInfo[_pid];\r\n        xWinLib.UserInfo memory user = userInfo[_pid][_user];\r\n        uint blockdiff = block.number.sub(user.blockstart);\r\n        uint256 currentRealizedQty = pool.multiplier.mul(pool.rewardperblock).mul(blockdiff).mul(user.amount).div(1e18).div(100);\r\n        return currentRealizedQty;\r\n    }\r\n    \r\n    /// @dev Deposit LP tokens to xWin Protocol for xWin allocation.\r\n    function DepositFarm(uint256 _pid, uint256 _amount) public nonReentrant onlyNonEmergency {\r\n\r\n        xWinLib.PoolInfo memory pool = poolInfo[_pid];\r\n        require(pool.lpToken != address(0), \"No pool found\");\r\n        xWinLib.UserInfo storage user = userInfo[_pid][msg.sender];\r\n        if (user.amount > 0) {\r\n            uint256 pending = pendingXwin(_pid, msg.sender);\r\n            _sendRewards(msg.sender, pending);\r\n        }\r\n        if (_amount > 0) {\r\n            TransferHelper.safeTransferFrom(pool.lpToken, msg.sender, address(this), _amount);\r\n            user.amount = user.amount.add(_amount);\r\n        }\r\n        user.blockstart = block.number;\r\n        emit _DepositFarm(msg.sender, _pid, _amount);\r\n    }\r\n    \r\n    /// @dev Withdraw LP tokens from xWin Protocol.\r\n    function WithdrawFarm(uint256 _pid, uint256 _amount) public nonReentrant onlyNonEmergency {\r\n\r\n        xWinLib.PoolInfo memory pool = poolInfo[_pid];\r\n        xWinLib.UserInfo storage user = userInfo[_pid][msg.sender];\r\n        require(user.amount >= _amount, \"withdraw: not good\");\r\n\r\n        uint256 pending = pendingXwin(_pid, msg.sender);\r\n        if(pending > 0) _sendRewards(msg.sender, pending);\r\n        \r\n        if(_amount > 0) {\r\n            user.amount = user.amount.sub(_amount);\r\n            TransferHelper.safeTransfer(pool.lpToken, msg.sender, _amount);\r\n        }\r\n        user.blockstart = block.number;\r\n        emit _WithdrawFarm(msg.sender, _pid, _amount);\r\n    }\r\n    \r\n   \r\n    /// @dev perform subscription based on ratio setup and put into lending if available \r\n    function Subscribe(xWinLib.TradeParams memory _tradeParams) public nonReentrant onlyNonEmergency payable {\r\n        \r\n        require(isxwinFund[_tradeParams.xFundAddress] == true, \"not xwin fund\");\r\n        xWinLib.xWinReferral memory _xWinReferral = xWinReferral[msg.sender];\r\n        require(msg.sender != _tradeParams.referral, \"referal cannot be own address\");\r\n        \r\n        if(_xWinReferral.referral != address(0)){\r\n            require(_xWinReferral.referral == _tradeParams.referral, \"already had referral\");\r\n        }\r\n        xWinFund _xWinFund = xWinFund(_tradeParams.xFundAddress);\r\n        TransferHelper.safeTransferBNB(_tradeParams.xFundAddress, _tradeParams.amount);\r\n        uint256 mintQty = _xWinFund.Subscribe(_tradeParams, msg.sender);\r\n        \r\n        if(rewardRemaining > 0){\r\n            _storeRewardQty(msg.sender, _tradeParams.amount, mintQty);\r\n            _updateReferralReward(_tradeParams, _xWinFund.getWhoIsManager());\r\n        }\r\n        emit _Subscribe(msg.sender, _tradeParams.xFundAddress, _tradeParams.amount, mintQty);\r\n    }\r\n    \r\n    /// @dev perform redemption based on unit redeem\r\n    function Redeem(xWinLib.TradeParams memory _tradeParams) external nonReentrant onlyNonEmergency payable {\r\n        \r\n        require(IBEP20(_tradeParams.xFundAddress).balanceOf(msg.sender) >= _tradeParams.amount, \"Not enough balance to redeem\");\r\n        require(isxwinFund[_tradeParams.xFundAddress] == true, \"not xwin fund\");\r\n        TransferHelper.safeTransferFrom(_tradeParams.xFundAddress, msg.sender, address(this), _tradeParams.amount);\r\n        xWinFund _xWinFund = xWinFund(_tradeParams.xFundAddress);\r\n        uint256 redeemratio = _xWinFund.Redeem(_tradeParams, msg.sender);\r\n        uint256 rewardQty = _updateRewardBal(msg.sender, _tradeParams.amount);\r\n        emit _Redeem(msg.sender, _tradeParams.xFundAddress, _tradeParams.amount, rewardQty, redeemratio);\r\n    }\r\n    \r\n    /// @dev perform redemption based on unit redeem and give up all xwin rewards\r\n    function emergencyRedeem(uint256 _redeemAmount, address _fundaddress) external nonReentrant onlyEmergency payable {\r\n        \r\n        require(IBEP20(_fundaddress).balanceOf(msg.sender) >= _redeemAmount, \"Not enough balance to redeem\");\r\n        TransferHelper.safeTransferFrom(_fundaddress, msg.sender, address(this), _redeemAmount);\r\n        xWinFund _xWinFund = xWinFund(_fundaddress);\r\n        _xWinFund.emergencyRedeem(_redeemAmount, msg.sender);\r\n        _resetRewards(msg.sender);\r\n        emit _EmergencyRedeem(msg.sender, _fundaddress, _redeemAmount);\r\n    }\r\n    \r\n    /// @dev manager perform remove from farm for emergency state\r\n    function emergencyRemoveFromFarm(address _fundaddress) external nonReentrant onlyEmergency payable {\r\n        \r\n        xWinFund _xWinFund = xWinFund(_fundaddress);\r\n        require(msg.sender == _xWinFund.getWhoIsManager(), \"not the manager to move from farm\");\r\n        _xWinFund.emergencyRemoveFromFarm();\r\n    }\r\n    \r\n    /// @dev perform MoveNonIndexNameTo BNB for non benchmark name\r\n    function MoveNonIndexNameToBase(\r\n        address xFundAddress,\r\n        address _tokenaddress,\r\n        uint256 deadline,\r\n        uint256 priceImpactTolerance\r\n        ) external nonReentrant payable {\r\n        \r\n        xWinFund _xWinFund = xWinFund(xFundAddress);\r\n        require(msg.sender == _xWinFund.getWhoIsManager(), \"not the manager to move the balance\");\r\n         (uint256 balanceToken, uint256 swapOutput) = _xWinFund.MoveNonIndexNameToBase(_tokenaddress, deadline, priceImpactTolerance);\r\n        emit _MoveNonIndexNameToBaseEvent(msg.sender, xFundAddress, _tokenaddress, balanceToken, swapOutput);\r\n    }\r\n    \r\n    /// @dev create target ratio by portfolio manager\r\n    function CreateTarget(\r\n        address[] calldata _toAddresses, \r\n        uint256[] calldata _targetWeight,\r\n        address xFundAddress \r\n        ) external nonReentrant onlyNonEmergency {\r\n        \r\n        xWinFund _xWinFund = xWinFund(xFundAddress);\r\n        require(msg.sender == _xWinFund.getWhoIsManager(), \"only owner of the fund is allowed\");\r\n        _xWinFund.CreateTargetNames(_toAddresses, _targetWeight);\r\n        emit _CreateTarget(msg.sender, xFundAddress, _toAddresses, _targetWeight, block.timestamp);\r\n    }\r\n    \r\n    /// @dev perform update target, move non-bm to base and finally rebalance\r\n    function RebalanceAllInOne(\r\n        xWinLib.TradeParams memory _tradeParams,\r\n        address[] calldata _toAddresses, \r\n        uint256[] calldata _targetWeight\r\n        ) external nonReentrant onlyNonEmergency payable {\r\n        \r\n        xWinFund _xWinFund = xWinFund(_tradeParams.xFundAddress);\r\n        require(msg.sender == _xWinFund.getWhoIsManager(), \"only owner of the fund is allowed\");\r\n        \r\n        uint256 baseccyBal = _xWinFund.Rebalance(_toAddresses, _targetWeight, _tradeParams.deadline, _tradeParams.priceImpactTolerance);\r\n        emit _RebalanceAllInOne(msg.sender, _tradeParams.xFundAddress, baseccyBal, block.timestamp);\r\n    }\r\n    \r\n    /// @dev update platform fee by deployer\r\n    function updatePlatformFee(uint256 newPlatformFee) external onlyOwner {\r\n        platformFeeBps = newPlatformFee;\r\n    }\r\n    \r\n    /// @dev get platform fee\r\n    function getPlatformFee() view external returns (uint256) {\r\n        return platformFeeBps;\r\n    }\r\n    \r\n    /// @dev get platform wallet address\r\n    function getPlatformAddress() view external returns (address) {\r\n        return platformWallet;\r\n    }\r\n    \r\n    /// @dev get platform wallet address\r\n    function gexWinBenefitPool() view external returns (address) {\r\n        return xwinBenefitPool;\r\n    }\r\n    \r\n    /// @dev update platform fee by deployer\r\n    function updateXwinBenefitPool(address _xwinBenefitPool) external onlyOwner {\r\n        xwinBenefitPool = _xwinBenefitPool;\r\n    }\r\n    \r\n    /// @dev update rewardRemaining by deployer\r\n    function updateRewardRemaining(uint256 _newRemaining) external onlyOwner {\r\n        rewardRemaining = _newRemaining;\r\n    }\r\n    \r\n    /// @dev update platform fee by deployer\r\n    function updateStakeProtocol(address newStakeProtocol) external onlyOwner {\r\n        stakeAddress = newStakeProtocol;\r\n    }\r\n    \r\n    /// @dev update referal fee by deployer\r\n    function updateReferralRewardPerUnit(uint256 _referralperunit) external onlyOwner {\r\n        referralperunit = _referralperunit;\r\n    }\r\n\r\n    /// @dev update manager reward by deployer\r\n    function updateManagerRewardPerUnit(uint256 _managerRewardperunit) external onlyOwner {\r\n        managerRewardperunit = _managerRewardperunit;\r\n    }\r\n    \r\n    function _multiplier(uint256 _blockstart) internal view returns (uint256) {\r\n        \r\n        if(_blockstart == 0) return 0;\r\n        uint256 blockdiff = _blockstart.sub(startblock); \r\n        if(blockdiff < 5256000) return 50000; //first 6 months, 5x\r\n        if(blockdiff >= 5256000 && blockdiff <= 10512000) return 25000; //then following 6 months \r\n        if(blockdiff >= 10512000 && blockdiff <= 15768000) return 12500; //then following 6 months\r\n        if(blockdiff > 15768000) return 10000;\r\n    }\r\n    \r\n    /// @dev get estimated reward of XWN token\r\n    function GetEstimateReward(address fromAddress) public view returns (uint256) {\r\n        \r\n        xWinLib.xWinReward memory _xwinReward =  xWinRewards[fromAddress];\r\n        if(_xwinReward.blockstart == 0) return 0;\r\n        uint blockdiff = block.number.sub(_xwinReward.blockstart);\r\n        uint256 currentRealizedQty = _multiplier(_xwinReward.blockstart).mul(rewardperuint).mul(blockdiff).mul(_xwinReward.accBasetoken).div(1e18).div(10000); \r\n        uint256 allRealizedQty = currentRealizedQty.add(_xwinReward.previousRealizedQty);\r\n        return  (rewardRemaining >= allRealizedQty) ? allRealizedQty: rewardRemaining;\r\n    }\r\n    \r\n    function GetQuotes(\r\n        uint tokenBal,\r\n        address targetToken\r\n        ) external view returns (uint amountB, uint amountA) {\r\n        xWinStake _xWinStake = xWinStake(stakeAddress);\r\n        (amountB, amountA, ) = _xWinStake.GetQuotes(tokenBal, 1e18, targetToken);\r\n        return (amountB, amountA);\r\n    }   \r\n    \r\n    /// @dev User to claim the reward and stake them into DEX\r\n    function StakeMyReward(\r\n        uint256 deadline \r\n        ) external nonReentrant onlyNonEmergency payable {\r\n        \r\n        //only token owner are allowed\r\n        xWinLib.xWinReward storage _xwinReward =  xWinRewards[msg.sender];\r\n        uint256 rewardQty = GetEstimateReward(msg.sender);\r\n        require(rewardQty > 0, \"No reward to claim\");\r\n        \r\n        _xwinReward.previousRealizedQty = 0;\r\n        _xwinReward.blockstart = block.number;\r\n        \r\n        xWinStake _xWinStake = xWinStake(stakeAddress);\r\n        TransferHelper.safeTransferBNB(stakeAddress, msg.value); \r\n        \r\n        _sendRewards(stakeAddress, rewardQty);\r\n\r\n        _xWinStake.StakeReward(msg.sender, rewardQty, msg.value, deadline);\r\n        emit _StakeMyReward(msg.sender, rewardQty);\r\n    }\r\n    \r\n    function _updateReferralReward(xWinLib.TradeParams memory _tradeParams, address _managerAddress) internal {\r\n        \r\n        xWinLib.xWinReferral storage _xWinReferral = xWinReferral[msg.sender];\r\n        if(_xWinReferral.referral == address(0)){\r\n            _xWinReferral.referral = _tradeParams.referral; //store referal address\r\n        }\r\n        xWinLib.xWinReward storage _xwinReward =  xWinRewards[_xWinReferral.referral];\r\n        \r\n        if(_xwinReward.accBasetoken > 0){\r\n            uint256 entitleAmt = _tradeParams.amount.mul(referralperunit).div(1e18);  //0.10\r\n            _xwinReward.previousRealizedQty = _xwinReward.previousRealizedQty.add(entitleAmt);\r\n        } \r\n\r\n        xWinLib.xWinReward storage _xwinRewardManager =  xWinRewards[_managerAddress];\r\n        if(_xwinRewardManager.blockstart == 0){\r\n            _xwinRewardManager.blockstart = block.number;\r\n        }\r\n        uint256 entitleAmtManager = _tradeParams.amount.mul(managerRewardperunit).div(1e18); //manager get 0.05\r\n        _xwinRewardManager.previousRealizedQty = _xwinRewardManager.previousRealizedQty.add(entitleAmtManager);\r\n    }\r\n    \r\n    /// @dev withdraw reward of XWN token\r\n    function WithdrawReward() external nonReentrant onlyNonEmergency payable {\r\n        \r\n        xWinLib.xWinReward storage _xwinReward =  xWinRewards[msg.sender];\r\n        uint256 rewardQty = GetEstimateReward(msg.sender);\r\n        require(rewardQty > 0, \"No reward\");\r\n        \r\n        _xwinReward.previousRealizedQty = 0;\r\n        _xwinReward.blockstart = block.number;\r\n        \r\n        uint amountWithdraw = (rewardRemaining >= rewardQty) ? rewardQty: rewardRemaining;\r\n        \r\n        if(amountWithdraw > 0) _sendRewards(msg.sender, amountWithdraw);\r\n        emit _WithdrawReward(msg.sender, amountWithdraw);\r\n    }\r\n    \r\n    function _storeRewardQty(address from, uint256 baseQty, uint256 mintQty) internal {\r\n\r\n        xWinLib.xWinReward storage _xwinReward =  xWinRewards[from];\r\n        if(_xwinReward.blockstart == 0){\r\n            _xwinReward.blockstart = block.number;\r\n            _xwinReward.accBasetoken = baseQty;\r\n            _xwinReward.accMinttoken = mintQty;\r\n            _xwinReward.previousRealizedQty = 0;\r\n        }else{\r\n            \r\n            uint blockdiff = block.number.sub(_xwinReward.blockstart);\r\n            uint256 currentRealizedQty = _multiplier(_xwinReward.blockstart).mul(rewardperuint).mul(blockdiff).mul(_xwinReward.accBasetoken).div(1e18).div(10000); \r\n            _xwinReward.blockstart = block.number;\r\n            _xwinReward.accBasetoken = baseQty.add(_xwinReward.accBasetoken);\r\n            _xwinReward.accMinttoken = mintQty.add(_xwinReward.accMinttoken);\r\n            _xwinReward.previousRealizedQty = _xwinReward.previousRealizedQty.add(currentRealizedQty);\r\n        }\r\n    }\r\n    \r\n    function _updateRewardBal(address from, uint256 redeemUnit) internal returns (uint256 rewardQty){\r\n\r\n        if(rewardRemaining == 0) return 0;\r\n        xWinLib.xWinReward storage _xwinReward =  xWinRewards[from];\r\n        rewardQty = GetEstimateReward(from);\r\n        \r\n        if(_xwinReward.accMinttoken == 0) return 0;\r\n        if(rewardQty == 0) return 0;\r\n        \r\n        if(_xwinReward.accMinttoken >= redeemUnit){\r\n            uint256 ratio = redeemUnit.mul(1e8).div(_xwinReward.accMinttoken);\r\n            uint256 reducedBal = _xwinReward.accBasetoken.mul(ratio).div(1e8);\r\n            _xwinReward.accBasetoken = _xwinReward.accBasetoken.sub(reducedBal);    \r\n            _xwinReward.accMinttoken = _xwinReward.accMinttoken.sub(redeemUnit);\r\n        }else{\r\n            _xwinReward.accMinttoken = 0;\r\n            _xwinReward.accBasetoken = 0;\r\n        }\r\n        _xwinReward.previousRealizedQty = 0;\r\n        _xwinReward.blockstart = block.number;\r\n        \r\n        _sendRewards(msg.sender, rewardQty);\r\n        return rewardQty;\r\n    }\r\n    \r\n    /// @dev emergency trf XWN token to new protocol\r\n    function ProtocolTransfer(address _newProtocol, uint256 amount) public onlyOwner onlyEmergency payable {\r\n        TransferHelper.safeTransfer(xWinToken, _newProtocol, amount);\r\n    }\r\n    \r\n    function _sendRewards(address _to, uint256 amount) internal {\r\n        \r\n        if(rewardRemaining == 0) return;\r\n        uint256 xwinTokenBal = IBEP20(xWinToken).balanceOf(address(this));\r\n        if(xwinTokenBal == 0) return;\r\n        \r\n        if(rewardRemaining >= amount && xwinTokenBal >= amount){\r\n            TransferHelper.safeTransfer(xWinToken, _to, amount);\r\n            rewardRemaining = rewardRemaining.sub(amount);\r\n        }else{\r\n            uint amountTosend = (xwinTokenBal >= amount) ? amount: xwinTokenBal;\r\n            TransferHelper.safeTransfer(xWinToken, _to, amountTosend);\r\n            rewardRemaining = 0; //mark reward ended\r\n        }\r\n    }\r\n    \r\n    function _resetRewards(address _from) internal {\r\n        xWinLib.xWinReward storage _xwinReward =  xWinRewards[_from];\r\n        _xwinReward.accMinttoken = 0;\r\n        _xwinReward.accBasetoken = 0;\r\n        _xwinReward.previousRealizedQty = 0;\r\n        _xwinReward.blockstart = block.number;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_platformFeeBps\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_platformWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_xwinBenefitPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_xWinToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Received\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toFund\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"newTargets\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"newWeight\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"txnTime\",\"type\":\"uint256\"}],\"name\":\"_CreateTarget\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"_DepositFarm\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fundaddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"_EmergencyRedeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toFund\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapOutput\",\"type\":\"uint256\"}],\"name\":\"_MoveNonIndexNameToBaseEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toFund\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"txnTime\",\"type\":\"uint256\"}],\"name\":\"_RebalanceAllInOne\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toFund\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"redeemUnit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardQty\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"redeemratio\",\"type\":\"uint256\"}],\"name\":\"_Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardQty\",\"type\":\"uint256\"}],\"name\":\"_StakeMyReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toFund\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"subsAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintQty\",\"type\":\"uint256\"}],\"name\":\"_Subscribe\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"_WithdrawFarm\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardQty\",\"type\":\"uint256\"}],\"name\":\"_WithdrawReward\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_toAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_targetWeight\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"xFundAddress\",\"type\":\"address\"}],\"name\":\"CreateTarget\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"DepositFarm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromAddress\",\"type\":\"address\"}],\"name\":\"GetEstimateReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenBal\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"targetToken\",\"type\":\"address\"}],\"name\":\"GetQuotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"xFundAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenaddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceImpactTolerance\",\"type\":\"uint256\"}],\"name\":\"MoveNonIndexNameToBase\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newProtocol\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ProtocolTransfer\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"xFundAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceImpactTolerance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"returnInBase\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"}],\"internalType\":\"struct xWinLib.TradeParams\",\"name\":\"_tradeParams\",\"type\":\"tuple\"},{\"internalType\":\"address[]\",\"name\":\"_toAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_targetWeight\",\"type\":\"uint256[]\"}],\"name\":\"RebalanceAllInOne\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"xFundAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceImpactTolerance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"returnInBase\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"}],\"internalType\":\"struct xWinLib.TradeParams\",\"name\":\"_tradeParams\",\"type\":\"tuple\"}],\"name\":\"Redeem\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"StakeMyReward\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"xFundAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceImpactTolerance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"returnInBase\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"}],\"internalType\":\"struct xWinLib.TradeParams\",\"name\":\"_tradeParams\",\"type\":\"tuple\"}],\"name\":\"Subscribe\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawFarm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WithdrawReward\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardperblock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_multiplier\",\"type\":\"uint256\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_fundaddress\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"_isxwinFund\",\"type\":\"bool[]\"}],\"name\":\"addxwinFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyOn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_redeemAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_fundaddress\",\"type\":\"address\"}],\"name\":\"emergencyRedeem\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fundaddress\",\"type\":\"address\"}],\"name\":\"emergencyRemoveFromFarm\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getAllPendingXwin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPlatformAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPlatformFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gexWinBenefitPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isxwinFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingXwin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewardperblock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRemaining\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startblock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"updateEmergencyState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardperblock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_multiplier\",\"type\":\"uint256\"}],\"name\":\"updateFarmPoolInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_managerRewardperunit\",\"type\":\"uint256\"}],\"name\":\"updateManagerRewardPerUnit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPlatformFee\",\"type\":\"uint256\"}],\"name\":\"updatePlatformFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fundaddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newProtocol\",\"type\":\"address\"}],\"name\":\"updateProtocol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_referralperunit\",\"type\":\"uint256\"}],\"name\":\"updateReferralRewardPerUnit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardperblock\",\"type\":\"uint256\"}],\"name\":\"updateRewardPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newRemaining\",\"type\":\"uint256\"}],\"name\":\"updateRewardRemaining\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newStakeProtocol\",\"type\":\"address\"}],\"name\":\"updateStakeProtocol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_xwinBenefitPool\",\"type\":\"address\"}],\"name\":\"updateXwinBenefitPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockstart\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"xWinReferral\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"xWinRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockstart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accBasetoken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accMinttoken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"previousRealizedQty\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xWinToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xwinBenefitPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "xWinDefi", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000320000000000000000000000005c76a314495fbe334165416f169201da224e5f500000000000000000000000005c76a314495fbe334165416f169201da224e5f5000000000000000000000000064b33456b649015b25a3403d03c340bab718d153000000000000000000000000d88ca08d8eec1e9e09562213ae83a7853ebb5d28", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0da67ab9960eb59e26b017f69d8ee5453a0f2dab9778c61505baccd6cc039a9d"}