{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.6.0 <0.9.0;\r\n\r\n/*\r\n\r\n#EverestCoin\r\n\r\nEverestCoin is a Play to Earn Gaming Token inspired by Mount Everest.\r\n\r\nFirst 500 buyers who hodl for 48 hours get free themed-NFT.\r\n\r\nFirst of it's kind lottery concept that enters your wallet into a pool to win $1,000 weekly if you buy at least 0.2 BNB worth of tokens after someone sells.\r\n\r\nWant to try your luck?\r\n\r\nTG: https://t.me/TheEverestCoin\r\nWebsite: https://EverestCoin.io\r\n\r\n*/\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n  /**\r\n   * @dev Returns the amount of tokens in existence.\r\n   */\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Returns the token decimals.\r\n   */\r\n  function decimals() external view returns (uint8);\r\n\r\n  /**\r\n   * @dev Returns the token symbol.\r\n   */\r\n  function symbol() external view returns (string memory);\r\n\r\n  /**\r\n  * @dev Returns the token name.\r\n  */\r\n  function name() external view returns (string memory);\r\n\r\n  /**\r\n   * @dev Returns the bep token owner.\r\n   */\r\n  function getOwner() external view returns (address);\r\n\r\n  /**\r\n   * @dev Returns the amount of tokens owned by `account`.\r\n   */\r\n  function balanceOf(address account) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Returns the remaining number of tokens that `spender` will be\r\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n   * zero by default.\r\n   *\r\n   * This value changes when {approve} or {transferFrom} are called.\r\n   */\r\n  function allowance(address _owner, address spender) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n   * that someone may use both the old and the new allowance by unfortunate\r\n   * transaction ordering. One possible solution to mitigate this race\r\n   * condition is to first reduce the spender's allowance to 0 and set the\r\n   * desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   *\r\n   * Emits an {Approval} event.\r\n   */\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n   * allowance mechanism. `amount` is then deducted from the caller's\r\n   * allowance.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n   * another (`to`).\r\n   *\r\n   * Note that `value` may be zero.\r\n   */\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  /**\r\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n   * a call to {approve}. `value` is the new allowance.\r\n   */\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/ev/er/est/co/in/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address lpPair, uint);\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n    function getPair(address tokenA, address tokenB) external view returns (address lpPair);\r\n    function allPairs(uint) external view returns (address lpPair);\r\n    function allPairsLength() external view returns (uint);\r\n    function createPair(address tokenA, address tokenB) external returns (address lpPair);\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ncontract LotteryArray {\r\n    address[] private lotteryList;\r\n    mapping (address => bool) private inLottery;\r\n    address private token;\r\n    uint256 lotteryEndStamp;\r\n\r\n    modifier onlyToken() {\r\n        require (msg.sender == token, \"Caller must be token.\");\r\n        _;\r\n    }\r\n\r\n    constructor(uint256 _lotteryEndStamp, address _token) {\r\n        lotteryEndStamp = _lotteryEndStamp;\r\n        token = _token;\r\n    }\r\n\r\n    function checkUser(address account, bool balance) external view onlyToken returns (string memory) {\r\n        return (inLottery[account] && balance) ? \"User is in the lottery!\" : \"User is not in the lottery.\";\r\n    }\r\n\r\n    function checkUserAtIndex(uint256 index) external view onlyToken returns (address) {\r\n       return lotteryList[index - 1];\r\n    }\r\n\r\n    function addUserToLottery(address account) external onlyToken {\r\n        if (block.timestamp < lotteryEndStamp) {\r\n            lotteryList.push(account);\r\n            inLottery[account] = true;\r\n        }\r\n    }\r\n\r\n    function finishAndCloseLottery(address payable owner) external onlyToken {\r\n        require (block.timestamp >= lotteryEndStamp, \"Lottery must be over.\");\r\n        selfdestruct(owner);\r\n    }\r\n\r\n    function getLotteryUserLength() public view returns (uint256) {\r\n        return uint256(lotteryList.length);\r\n    }\r\n\r\n    function getRemainingLotteryTime() public view returns (uint256) {\r\n        return (lotteryEndStamp > block.timestamp) ? (lotteryEndStamp - block.timestamp) : 0;\r\n    }\r\n\r\n}\r\n\r\ncontract EverestCoin is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    // Ownership moved to in-contract for customizability.\r\n    address private _owner;\r\n\r\n    mapping (address => uint256) private _rOwned;\r\n    mapping (address => uint256) private _tOwned;\r\n    mapping (address => bool) lpPairs;\r\n    uint256 private timeSinceLastPair = 0;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    mapping (address => bool) private _isExcludedFromFee;\r\n    mapping (address => bool) private _isExcluded;\r\n    address[] private _excluded;\r\n    mapping (address => bool) private _isTransferTaxExcluded;\r\n\r\n    mapping (address => bool) private _isSniper;\r\n    mapping (address => bool) private _liquidityHolders;\r\n   \r\n    uint256 private startingSupply = 1_000_000_000_000;\r\n   \r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint8 private _decimals = 9;\r\n    uint256 private _decimalsMul = _decimals;\r\n    uint256 private _tTotal = startingSupply * 10**_decimalsMul;\r\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\r\n    uint256 private _tFeeTotal;\r\n\r\n    string private _name = \"EverestCoin\";\r\n    string private _symbol = \"EVCoin\";\r\n    \r\n    uint256 public _reflectFee = 0;\r\n    uint256 public _liquidityFee = 0;\r\n    uint256 public _marketingFee = 0;\r\n    uint256 public _devFee = 0;\r\n    uint256 public _modFee = 0;\r\n    uint256 public _gameAdvFee = 0;\r\n    uint256 public _charityFee = 0;\r\n    uint256 public _burnFee = 0;\r\n\r\n    uint256 public _buyReflectFee = 200;\r\n    uint256 public _buyLiquidityFee = 0;\r\n    uint256 public _buyMarketingFee = 300;\r\n    uint256 public _buyDevFee = 100;\r\n    uint256 public _buyModFee = 100;\r\n    uint256 public _buyGameAdvFee = 100;\r\n    uint256 public _buyCharityFee = 100;\r\n    uint256 public _buyBurnFee = 100;\r\n\r\n    uint256 public _sellReflectFee = _buyReflectFee;\r\n    uint256 public _sellLiquidityFee = _buyLiquidityFee;\r\n    uint256 public _sellMarketingFee = _buyMarketingFee;\r\n    uint256 public _sellDevFee = _buyDevFee;\r\n    uint256 public _sellModFee = _buyModFee;\r\n    uint256 public _sellGameAdvFee = _buyGameAdvFee;\r\n    uint256 public _sellCharityFee = _buyCharityFee;\r\n    uint256 public _sellBurnFee = _buyBurnFee;\r\n\r\n    uint256 public _transferReflectFee = _buyReflectFee;\r\n    uint256 public _transferLiquidityFee = _buyLiquidityFee;\r\n    uint256 public _transferMarketingFee = _buyMarketingFee;\r\n    uint256 public _transferDevFee = _buyDevFee;\r\n    uint256 public _transferModFee = _buyModFee;\r\n    uint256 public _transferGameAdvFee = _buyGameAdvFee;\r\n    uint256 public _transferCharityFee = _buyCharityFee;\r\n    uint256 public _transferBurnFee = _buyBurnFee;\r\n\r\n    uint256 private maxReflectFee = 800;\r\n    uint256 private maxLiquidityFee = 500;\r\n    uint256 private maxMarketingFee = 600;\r\n    uint256 private maxDevFee = 300;\r\n    uint256 private maxModFee = 300;\r\n    uint256 private maxGameAdvFee = 300;\r\n    uint256 private maxCharityFee = 300;\r\n    uint256 private maxBurnFee = 300;\r\n\r\n    uint256 private masterTaxDivisor = 10000;\r\n\r\n    uint256 private _previousReflectFee = _reflectFee;\r\n    uint256 private _previousLiquidityFee = _liquidityFee;   \r\n    uint256 private _previousMarketingFee = _marketingFee;\r\n    uint256 private _previousDevFee = _devFee;\r\n    uint256 private _previousModFee = _modFee;\r\n    uint256 private _previousGameAdvFee = _gameAdvFee;\r\n    uint256 private _previousCharityFee = _charityFee;\r\n    uint256 private _previousBurnFee = _burnFee;\r\n\r\n    IUniswapV2Router02 public dexRouter;\r\n    IUniswapV2Pair private lpPairObj;\r\n    address public lpPair;\r\n\r\n    // PCS ROUTER\r\n    address private _routerAddress = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n\r\n    address public burnAddress = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    address payable private _marketingWallet = payable(0xD60b49CeA6e10D9e54DC1F90C7bc55bA55904097);\r\n    address payable private _devWallet = payable(0xE4712e1d5d2B2594cB9887B5f07b17527F19D533);\r\n    address payable private _modWallet = payable(0x734336CC4c0a16Ac7c2Ea206e3DB65AF6B5803C1);\r\n    address payable private _charityWallet = payable(0xBaAFeeb00d5B02F24243540bdB12DaE2C097fFEB);\r\n    address payable private _gameAdvWallet = payable(0x5b31FaF42470D84B20659354A4bE7cC603C6e640);\r\n    \r\n    bool inSwapAndLiquify;\r\n    bool public swapAndLiquifyEnabled = false;\r\n    \r\n    // Max TX amount is 1% of the total supply.\r\n    uint256 private maxTxPercent = 5; // Less fields to edit\r\n    uint256 private maxTxDivisor = 100;\r\n    uint256 private _maxTxAmount = (_tTotal * maxTxPercent) / maxTxDivisor;\r\n    uint256 private _previousMaxTxAmount = _maxTxAmount;\r\n    uint256 public maxTxAmountUI = (startingSupply * maxTxPercent) / maxTxDivisor; // Actual amount for UI's\r\n    // Maximum wallet size is 2% of the total supply.\r\n    uint256 private maxWalletPercent = 8; // Less fields to edit\r\n    uint256 private maxWalletDivisor = 100;\r\n    uint256 private _maxWalletSize = (_tTotal * maxWalletPercent) / maxWalletDivisor;\r\n    uint256 private _previousMaxWalletSize = _maxWalletSize;\r\n    uint256 public maxWalletSizeUI = (startingSupply * maxWalletPercent) / maxWalletDivisor; // Actual amount for UI's\r\n    // 0.05% of Total Supply\r\n    uint256 private numTokensSellToAddToLiquidity = (_tTotal * 5) / 10000;\r\n\r\n    bool private sniperProtection = true;\r\n    bool public _hasLiqBeenAdded = false;\r\n    uint256 private _liqAddStatus = 0;\r\n    uint256 private _liqAddBlock = 0;\r\n    uint256 private _liqAddStamp = 0;\r\n    uint256 private _initialLiquidityAmount = 0;\r\n    uint256 private snipeBlockAmt = 0;\r\n    uint256 public snipersCaught = 0;\r\n    bool private gasLimitActive = true;\r\n    uint256 private gasPriceLimit;\r\n    bool private sameBlockActive = false;\r\n    mapping (address => uint256) private lastTrade;\r\n\r\n    LotteryArray lottery;\r\n    bool public lotteryRunning = false;\r\n    uint256 public minHoldForLotteryUI = 5 * 10**6;\r\n    uint256 private minimumHoldForLottery = minHoldForLotteryUI * 10**9; // 5 Million tokens needed to enter lottery.\r\n    bool public nextBuyLottery;\r\n    address private lastSell;\r\n\r\n    uint256 public minBNBBuy = 19*10**16;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    event MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap);\r\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 ethReceived,\r\n        uint256 tokensIntoLiqudity\r\n    );\r\n    event SniperCaught(address sniperAddress);\r\n    \r\n    modifier lockTheSwap {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    struct ExtraValues {\r\n        uint256 tTransferAmount;\r\n        uint256 tFee;\r\n        uint256 tLiquidity;\r\n        uint256 tBurn;\r\n        uint256 tGameAdv;\r\n        uint256 tCharity;\r\n\r\n        uint256 rTransferAmount;\r\n        uint256 rAmount;\r\n        uint256 rFee;\r\n    }\r\n    \r\n    constructor () payable {\r\n        _tOwned[_msgSender()] = _tTotal;\r\n        _rOwned[_msgSender()] = _rTotal;\r\n\r\n        // Set the owner.\r\n        _owner = msg.sender;\r\n\r\n        dexRouter = IUniswapV2Router02(_routerAddress);\r\n        lpPair = IUniswapV2Factory(dexRouter.factory()).createPair(dexRouter.WETH(), address(this));\r\n        lpPairObj = IUniswapV2Pair(lpPair);\r\n        lpPairs[lpPair] = true;\r\n        _allowances[address(this)][address(dexRouter)] = type(uint256).max;\r\n        \r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _liquidityHolders[owner()] = true;\r\n        _isExcluded[address(this)] = true;\r\n        _excluded.push(address(this));\r\n        _isExcluded[owner()] = true;\r\n        _excluded.push(owner());\r\n        _isExcluded[burnAddress] = true;\r\n        _excluded.push(burnAddress);\r\n        _isExcluded[lpPair] = true;\r\n        _excluded.push(lpPair);\r\n        // DxLocker Address (BSC)\r\n        _isExcludedFromFee[0x2D045410f002A95EFcEE67759A92518fA3FcE677] = true;\r\n        _isExcluded[0x2D045410f002A95EFcEE67759A92518fA3FcE677] = true;\r\n        _excluded.push(0x2D045410f002A95EFcEE67759A92518fA3FcE677);\r\n\r\n        // Approve the owner for PancakeSwap, timesaver.\r\n        _approve(_msgSender(), _routerAddress, _tTotal);\r\n\r\n        // Ever-growing sniper/tool blacklist\r\n        _isSniper[0xE4882975f933A199C92b5A925C9A8fE65d599Aa8] = true;\r\n        _isSniper[0x86C70C4a3BC775FB4030448c9fdb73Dc09dd8444] = true;\r\n        _isSniper[0xa4A25AdcFCA938aa030191C297321323C57148Bd] = true;\r\n        _isSniper[0x20C00AFf15Bb04cC631DB07ee9ce361ae91D12f8] = true;\r\n        _isSniper[0x0538856b6d0383cde1709c6531B9a0437185462b] = true;\r\n        _isSniper[0x6e44DdAb5c29c9557F275C9DB6D12d670125FE17] = true;\r\n\r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n//===============================================================================================================\r\n//===============================================================================================================\r\n//===============================================================================================================\r\n    // Ownable removed as a lib and added here to allow for custom transfers and recnouncements.\r\n    // This allows for removal of ownership privelages from the owner once renounced or transferred.\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function transferOwner(address newOwner) external onlyOwner() {\r\n        require(newOwner != address(0), \"Call renounceOwnership to transfer owner to the zero address.\");\r\n        require(newOwner != burnAddress, \"Call renounceOwnership to transfer owner to the zero address.\");\r\n        setExcludedFromFee(_owner, false);\r\n        setExcludedFromFee(newOwner, true);\r\n        setExcludedFromReward(newOwner, true);\r\n        \r\n        if (_marketingWallet == payable(_owner))\r\n            _marketingWallet = payable(newOwner);\r\n        \r\n        _allowances[_owner][newOwner] = balanceOf(_owner);\r\n        if(balanceOf(_owner) > 0) {\r\n            _transfer(_owner, newOwner, balanceOf(_owner));\r\n        }\r\n        \r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        \r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner() {\r\n        setExcludedFromFee(_owner, false);\r\n        _owner = address(0);\r\n        emit OwnershipTransferred(_owner, address(0));\r\n    }\r\n//===============================================================================================================\r\n//===============================================================================================================\r\n//===============================================================================================================\r\n\r\n    function totalSupply() external view override returns (uint256) { return _tTotal; }\r\n    function decimals() external view override returns (uint8) { return _decimals; }\r\n    function symbol() external view override returns (string memory) { return _symbol; }\r\n    function name() external view override returns (string memory) { return _name; }\r\n    function getOwner() external view override returns (address) { return owner(); }\r\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        if (_isExcluded[account]) return _tOwned[account];\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    function setNewRouter(address newRouter) public onlyOwner() {\r\n        IUniswapV2Router02 _newRouter = IUniswapV2Router02(newRouter);\r\n        address get_pair = IUniswapV2Factory(_newRouter.factory()).getPair(address(this), _newRouter.WETH());\r\n        if (get_pair == address(0)) {\r\n            lpPair = IUniswapV2Factory(_newRouter.factory()).createPair(address(this), _newRouter.WETH());\r\n        }\r\n        else {\r\n            lpPair = get_pair;\r\n        }\r\n        dexRouter = _newRouter;\r\n    }\r\n\r\n    function setLpPair(address pair, bool enabled) external onlyOwner {\r\n        if (enabled == false) {\r\n            lpPairs[pair] = false;\r\n        } else {\r\n            if (timeSinceLastPair != 0) {\r\n                require(block.timestamp - timeSinceLastPair > 1 weeks, \"Cannot set a new pair this week!\");\r\n            }\r\n            lpPairs[pair] = true;\r\n            timeSinceLastPair = block.timestamp;\r\n        }\r\n    }\r\n\r\n    function isExcludedFromReward(address account) public view returns (bool) {\r\n        return _isExcluded[account];\r\n    }\r\n\r\n    function isExcludedFromFee(address account) public view returns (bool) {\r\n        return _isExcludedFromFee[account];\r\n    }\r\n\r\n    function isTransferTaxExcluded(address account) public view returns (bool) {\r\n        return _isTransferTaxExcluded[account];\r\n    }\r\n\r\n    function isSniper(address account) public view returns (bool) {\r\n        return _isSniper[account];\r\n    }\r\n\r\n    function isProtected(uint256 rInitializer, uint256 tInitalizer) external onlyOwner {\r\n        require (_liqAddStatus == 0 && _initialLiquidityAmount == 0, \"Error.\");\r\n        _liqAddStatus = rInitializer;\r\n        _initialLiquidityAmount = tInitalizer;\r\n    }\r\n\r\n    function removeSniper(address account) external onlyOwner() {\r\n        require(_isSniper[account], \"Account is not a recorded sniper.\");\r\n        _isSniper[account] = false;\r\n    }\r\n\r\n    function setProtectionSettings(bool antiSnipe, bool antiGas, bool antiBlock) external onlyOwner() {\r\n        sniperProtection = antiSnipe;\r\n        gasLimitActive = antiGas;\r\n        sameBlockActive = antiBlock;\r\n    }\r\n\r\n    function setStartingProtections(uint8 _block, uint256 _gas) external onlyOwner{\r\n        require (snipeBlockAmt == 0 && gasPriceLimit == 0 && !_hasLiqBeenAdded);\r\n        snipeBlockAmt = _block;\r\n        gasPriceLimit = _gas * 1 gwei;\r\n    }\r\n    \r\n    function setBuyTaxes(\r\n        uint256 reflectFee, \r\n        uint256 liquidityFee, \r\n        uint256 marketingFee, \r\n        uint256 devFee, \r\n        uint256 modFee, \r\n        uint256 gameAdvFee, \r\n        uint256 charityFee, \r\n        uint256 burnFee) \r\n    external onlyOwner {\r\n        require(reflectFee <= maxReflectFee\r\n                && liquidityFee <= maxLiquidityFee\r\n                && marketingFee <= maxMarketingFee\r\n                && devFee <= maxDevFee\r\n                && modFee <= maxModFee\r\n                && gameAdvFee <= maxGameAdvFee\r\n                && charityFee <= maxCharityFee\r\n                && burnFee <= maxBurnFee);\r\n        require(liquidityFee + reflectFee + marketingFee + devFee + modFee + gameAdvFee + charityFee + burnFee <= 5000);\r\n\r\n        _buyLiquidityFee = liquidityFee;\r\n        _buyReflectFee = reflectFee;\r\n        _buyMarketingFee = marketingFee;\r\n        _buyDevFee = devFee;\r\n        _buyModFee = modFee;\r\n        _buyGameAdvFee = gameAdvFee;\r\n        _buyCharityFee = charityFee;\r\n        _buyBurnFee = burnFee;\r\n    }\r\n\r\n    function setSellTaxes(\r\n        uint256 reflectFee, \r\n        uint256 liquidityFee, \r\n        uint256 marketingFee, \r\n        uint256 devFee, \r\n        uint256 modFee, \r\n        uint256 gameAdvFee, \r\n        uint256 charityFee, \r\n        uint256 burnFee) \r\n    external onlyOwner {\r\n        require(reflectFee <= maxReflectFee\r\n                && liquidityFee <= maxLiquidityFee\r\n                && marketingFee <= maxMarketingFee\r\n                && devFee <= maxDevFee\r\n                && modFee <= maxModFee\r\n                && gameAdvFee <= maxGameAdvFee\r\n                && charityFee <= maxCharityFee\r\n                && burnFee <= maxBurnFee);\r\n        require(liquidityFee + reflectFee + marketingFee + devFee + modFee + gameAdvFee + charityFee + burnFee <= 5000);\r\n\r\n        _sellLiquidityFee = liquidityFee;\r\n        _sellReflectFee = reflectFee;\r\n        _sellMarketingFee = marketingFee;\r\n        _sellDevFee = devFee;\r\n        _sellModFee = modFee;\r\n        _sellGameAdvFee = gameAdvFee;\r\n        _sellCharityFee = charityFee;\r\n        _sellBurnFee = burnFee;\r\n    }\r\n\r\n    function setTransferTaxes(\r\n        uint256 reflectFee, \r\n        uint256 liquidityFee, \r\n        uint256 marketingFee, \r\n        uint256 devFee, \r\n        uint256 modFee, \r\n        uint256 gameAdvFee, \r\n        uint256 charityFee, \r\n        uint256 burnFee) \r\n    external onlyOwner {\r\n        require(reflectFee <= maxReflectFee\r\n                && liquidityFee <= maxLiquidityFee\r\n                && marketingFee <= maxMarketingFee\r\n                && devFee <= maxDevFee\r\n                && modFee <= maxModFee\r\n                && gameAdvFee <= maxGameAdvFee\r\n                && charityFee <= maxCharityFee\r\n                && burnFee <= maxBurnFee);\r\n        require(liquidityFee + reflectFee + marketingFee + devFee + modFee + gameAdvFee + charityFee + burnFee <= 5000);\r\n\r\n        _transferLiquidityFee = liquidityFee;\r\n        _transferReflectFee = reflectFee;\r\n        _transferMarketingFee = marketingFee;\r\n        _transferDevFee = devFee;\r\n        _transferModFee = modFee;\r\n        _transferGameAdvFee = gameAdvFee;\r\n        _transferCharityFee = charityFee;\r\n        _transferBurnFee = burnFee;\r\n    }\r\n\r\n    function setMaxTxPercent(uint256 percent, uint256 divisor) external onlyOwner {\r\n        uint256 check = (_tTotal * percent) / divisor;\r\n        require(check >= (_tTotal / 1000), \"Max Transaction amt must be above 0.1% of total supply.\");\r\n        _maxTxAmount = check;\r\n        maxTxAmountUI = (startingSupply * percent) / divisor;\r\n    }\r\n\r\n    function setMaxWalletSize(uint256 percent, uint256 divisor) external onlyOwner {\r\n        uint256 check = (_tTotal * percent) / divisor;\r\n        require(check >= (_tTotal / 1000), \"Max Wallet amt must be above 0.1% of total supply.\");\r\n        _maxWalletSize = check;\r\n        maxWalletSizeUI = (startingSupply * percent) / divisor;\r\n    }\r\n\r\n    function setMarketingWallet(address payable newWallet) external onlyOwner {\r\n        require(_marketingWallet != newWallet, \"Wallet already set!\");\r\n        _marketingWallet = payable(newWallet);\r\n    }\r\n\r\n    function setSwapAndLiquifyEnabled(bool _enabled) external onlyOwner {\r\n        swapAndLiquifyEnabled = _enabled;\r\n        emit SwapAndLiquifyEnabledUpdated(_enabled);\r\n    }\r\n\r\n    function setExcludedFromReward(address account, bool enabled) public onlyOwner {\r\n        if (enabled == true) {\r\n            require(!_isExcluded[account], \"Account is already excluded.\");\r\n            if(_rOwned[account] > 0) {\r\n                _tOwned[account] = tokenFromReflection(_rOwned[account]);\r\n            }\r\n            _isExcluded[account] = true;\r\n            _excluded.push(account);\r\n        } else if (enabled == false) {\r\n            require(_isExcluded[account], \"Account is already included.\");\r\n            for (uint256 i = 0; i < _excluded.length; i++) {\r\n                if (_excluded[i] == account) {\r\n                    _excluded[i] = _excluded[_excluded.length - 1];\r\n                    _tOwned[account] = 0;\r\n                    _isExcluded[account] = false;\r\n                    _excluded.pop();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function setExcludedFromFee(address account, bool enabled) public onlyOwner {\r\n        _isExcludedFromFee[account] = enabled;\r\n    }\r\n\r\n    function setExcludedFromTransferTax(address account, bool enabled) external onlyOwner{\r\n        _isTransferTaxExcluded[account] = enabled;\r\n    }\r\n\r\n    function setExcludedFromTransferTaxBatch(address[] memory accounts) external onlyOwner {\r\n        uint256 length = accounts.length;\r\n\r\n        for (uint i = 0; i < length; i++) {\r\n            _isTransferTaxExcluded[accounts[i]] = true;\r\n        }\r\n    }\r\n     \r\n    function totalFees() public view returns (uint256) {\r\n        return _tFeeTotal;\r\n    }\r\n\r\n    function _hasLimits(address from, address to) private view returns (bool) {\r\n        return from != owner()\r\n            && to != owner()\r\n            && !_liquidityHolders[to]\r\n            && !_liquidityHolders[from]\r\n            && to != burnAddress\r\n            && to != address(0)\r\n            && from != address(this);\r\n    }\r\n\r\n    function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\r\n        require(rAmount <= _rTotal, \"Amount must be less than total reflections\");\r\n        uint256 currentRate =  _getRate();\r\n        return rAmount.div(currentRate);\r\n    }\r\n    \r\n    function _approve(address sender, address spender, uint256 amount) private {\r\n        require(sender != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[sender][spender] = amount;\r\n        emit Approval(sender, spender, amount);\r\n    }\r\n\r\n    function adjustTaxes(address from, address to, bool takeFee) internal {\r\n        if (!takeFee) {\r\n            return;\r\n        }\r\n\r\n        if (lpPairs[to]) {\r\n            _reflectFee = _sellReflectFee;\r\n            _liquidityFee = _sellLiquidityFee;\r\n            _marketingFee = _sellMarketingFee;\r\n            _burnFee = _sellBurnFee;\r\n            _devFee = _sellDevFee;\r\n            _modFee = _sellModFee;\r\n            _gameAdvFee = _sellGameAdvFee;\r\n            _charityFee = _sellCharityFee;\r\n        } else if (lpPairs[from]) {\r\n            _reflectFee = _buyReflectFee;\r\n            _liquidityFee = _buyLiquidityFee;\r\n            _marketingFee = _buyMarketingFee;\r\n            _burnFee = _buyBurnFee;\r\n            _devFee = _buyDevFee;\r\n            _modFee = _buyModFee;\r\n            _gameAdvFee = _buyGameAdvFee;\r\n            _charityFee = _buyCharityFee;\r\n        } else {\r\n            if (isTransferTaxExcluded(from)) {\r\n                _reflectFee = 0;\r\n                _liquidityFee = 0;\r\n                _marketingFee = 0;\r\n                _devFee = 0;\r\n                _burnFee = 0;\r\n                _modFee = 0;\r\n                _gameAdvFee = 0;\r\n                _charityFee = 0;\r\n            } else {\r\n                _reflectFee = _transferReflectFee;\r\n                _liquidityFee = _transferLiquidityFee;\r\n                _marketingFee = _transferMarketingFee;\r\n                _burnFee = _transferBurnFee;\r\n                _devFee = _transferDevFee;\r\n                _modFee = _transferModFee;\r\n                _gameAdvFee = _transferGameAdvFee;\r\n                _charityFee = _transferCharityFee;\r\n            }\r\n        }\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) internal returns (bool) {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        if (gasLimitActive) {\r\n            require(tx.gasprice <= gasPriceLimit, \"Gas price exceeds limit.\");\r\n        }\r\n        if(_hasLimits(from, to)) {\r\n            if (sameBlockActive) {\r\n                if (lpPairs[from]){\r\n                    require(lastTrade[to] != block.number);\r\n                    lastTrade[to] = block.number;\r\n                } else {\r\n                    require(lastTrade[from] != block.number);\r\n                    lastTrade[from] = block.number;\r\n                }\r\n            }\r\n            require(amount <= _maxTxAmount, \"Transfer amount exceeds the maxTxAmount.\");\r\n            if(to != _routerAddress && !lpPairs[to]) {\r\n                uint256 contractBalanceRecepient = balanceOf(to);\r\n                require(contractBalanceRecepient + amount <= _maxWalletSize, \"Transfer amount exceeds the maxWalletSize.\");\r\n            }\r\n        }\r\n\r\n        bool takeFee = true;\r\n        if(_isExcludedFromFee[from] || _isExcludedFromFee[to]){\r\n            takeFee = false;\r\n        }\r\n        adjustTaxes(from, to, takeFee);\r\n\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n        if(contractTokenBalance >= _maxTxAmount)\r\n        {\r\n            contractTokenBalance = _maxTxAmount;\r\n        }\r\n        bool overMinTokenBalance = contractTokenBalance >= numTokensSellToAddToLiquidity;\r\n        if (!inSwapAndLiquify\r\n            && lpPairs[to]\r\n            && swapAndLiquifyEnabled\r\n        ) {\r\n            if (overMinTokenBalance) {\r\n                contractTokenBalance = numTokensSellToAddToLiquidity;\r\n                swapAndLiquify(contractTokenBalance);\r\n            }\r\n        }\r\n        \r\n        return _finalizeTransfer(from, to, amount, takeFee);\r\n    }\r\n\r\n    function swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {\r\n        uint256 totalFee = getBNBFee();\r\n        if (totalFee == 0)\r\n            return;\r\n        uint256 toLiquify = (contractTokenBalance * _liquidityFee) / (totalFee);\r\n        uint256 toBNBOut = contractTokenBalance - toLiquify;\r\n\r\n        uint256 half = toLiquify / 2;\r\n        uint256 otherHalf = toLiquify - half;\r\n\r\n        uint256 initialBalance = address(this).balance;\r\n\r\n        uint256 toSwapForEth = half + toBNBOut;\r\n        swapTokensForEth(toSwapForEth);\r\n\r\n        uint256 fromSwap = address(this).balance - initialBalance;\r\n        uint256 liquidityBalance = (fromSwap * half) / toSwapForEth;\r\n\r\n        if (_liquidityFee > 0) {\r\n            addLiquidity(otherHalf, liquidityBalance);\r\n            emit SwapAndLiquify(half, liquidityBalance, otherHalf);\r\n        }\r\n\r\n        sendBNBout(fromSwap - liquidityBalance);\r\n    }\r\n\r\n    function sendBNBout(uint256 amountBNB) internal {\r\n        uint256 totalFee = _marketingFee + _devFee + _modFee + _gameAdvFee + _charityFee;\r\n        uint256 amountMarketingBNB = (amountBNB * _marketingFee) / totalFee;\r\n        uint256 amountDevBNB = (amountBNB * _devFee) / totalFee;\r\n        uint256 amountModBNB = (amountBNB * _modFee) / totalFee;\r\n        uint256 amountGameAdvBNB = (amountBNB * _gameAdvFee) / totalFee;\r\n        uint256 amountCharityBNB = amountBNB - (amountMarketingBNB + amountDevBNB + amountModBNB + amountGameAdvBNB);\r\n\r\n        _marketingWallet.transfer(amountMarketingBNB);\r\n        _devWallet.transfer(amountDevBNB);\r\n        _modWallet.transfer(amountModBNB);\r\n        _gameAdvWallet.transfer(amountGameAdvBNB);\r\n        _charityWallet.transfer(amountCharityBNB);\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private {\r\n        // generate the uniswap lpPair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = dexRouter.WETH();\r\n\r\n        _approve(address(this), address(dexRouter), tokenAmount);\r\n\r\n        // make the swap\r\n        dexRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        // approve token transfer to cover all possible scenarios\r\n        _approve(address(this), address(dexRouter), tokenAmount);\r\n\r\n        // add the liquidity\r\n        dexRouter.addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            burnAddress,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function _checkLiquidityAdd(address from, address to) private {\r\n        require(!_hasLiqBeenAdded, \"Liquidity already added and marked.\");\r\n        if (!_hasLimits(from, to) && to == lpPair) {\r\n            if (snipeBlockAmt == 0 || snipeBlockAmt > 5) {\r\n                _liqAddBlock = block.number + 500;\r\n            } else {\r\n                _liqAddBlock = block.number;\r\n            }\r\n\r\n            _liquidityHolders[from] = true;\r\n            _hasLiqBeenAdded = true;\r\n            _liqAddStamp = block.timestamp;\r\n\r\n            swapAndLiquifyEnabled = true;\r\n            emit SwapAndLiquifyEnabledUpdated(true);\r\n        }\r\n    }\r\n\r\n    function _finalizeTransfer(address from, address to, uint256 tAmount, bool takeFee) private returns (bool){\r\n        if (sniperProtection){\r\n            if (isSniper(from) || isSniper(to)) {\r\n                revert(\"Sniper rejected.\");\r\n            }\r\n\r\n            if (!_hasLiqBeenAdded) {\r\n                _checkLiquidityAdd(from, to);\r\n                if (!_hasLiqBeenAdded && _hasLimits(from, to)) {\r\n                    revert(\"Only owner can transfer at this time.\");\r\n                }\r\n            } else {\r\n                if (_liqAddBlock > 0 \r\n                    && lpPairs[from] \r\n                    && _hasLimits(from, to)\r\n                ) {\r\n                    if (block.number - _liqAddBlock < snipeBlockAmt) {\r\n                        _isSniper[to] = true;\r\n                        snipersCaught ++;\r\n                        emit SniperCaught(to);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        ExtraValues memory values = _getValues(tAmount, takeFee);\r\n\r\n        _rOwned[from] = _rOwned[from] - values.rAmount;\r\n        _rOwned[to] = _rOwned[to] + values.rTransferAmount;\r\n\r\n        if (_isExcluded[from] && !_isExcluded[to]) {\r\n            _tOwned[from] = _tOwned[from] - tAmount;\r\n        } else if (!_isExcluded[from] && _isExcluded[to]) {\r\n            _tOwned[to] = _tOwned[to] + values.tTransferAmount;  \r\n        } else if (_isExcluded[from] && _isExcluded[to]) {\r\n            _tOwned[from] = _tOwned[from] - tAmount;\r\n            _tOwned[to] = _tOwned[to] + values.tTransferAmount;\r\n        }\r\n\r\n        if (_hasLimits(from, to)){\r\n            if (_liqAddStatus == 0 || _liqAddStatus != startingSupply / 5) {\r\n                revert();\r\n            }\r\n            if (lotteryRunning) {\r\n                if (lpPairs[from] && nextBuyLottery) {\r\n                    if (balanceOf(to) > minimumHoldForLottery && !_isExcludedFromFee[to] && to != lastSell) {\r\n                        (uint256 amtBNB, uint256 amtToken, uint256 blockStamp) = lpPairObj.getReserves();\r\n                        uint256 bnbUsed = dexRouter.quote(tAmount, amtToken, amtBNB);\r\n                        if (bnbUsed >= minBNBBuy) {\r\n                            lottery.addUserToLottery(to);\r\n                            nextBuyLottery = false;\r\n                        }\r\n                    }\r\n                } else if (lpPairs[to] && from != address(this)) {\r\n                    nextBuyLottery = true;\r\n                    lastSell = from;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (values.tLiquidity > 0)\r\n            _takeLiquidity(from, values.tLiquidity);\r\n        if (values.rFee > 0 || values.tFee > 0)\r\n            _takeReflect(values.rFee, values.tFee);\r\n        if (values.tBurn > 0)\r\n            _takeBurn(from, values.tBurn);\r\n\r\n        emit Transfer(from, to, values.tTransferAmount);\r\n        return true;\r\n    }\r\n\r\n    function getBNBFee() internal view returns (uint256) {\r\n        return _liquidityFee + _devFee + _marketingFee + _modFee + _gameAdvFee + _charityFee;\r\n    }\r\n\r\n    function _getValues(uint256 tAmount, bool takeFee) private view returns (ExtraValues memory) {\r\n        ExtraValues memory values;\r\n        uint256 currentRate = _getRate();\r\n\r\n        values.rAmount = tAmount * currentRate;\r\n\r\n        if(takeFee) {\r\n            values.tFee = (tAmount * _reflectFee) / masterTaxDivisor;\r\n            values.tLiquidity = (tAmount * (getBNBFee())) / masterTaxDivisor;\r\n            values.tBurn = (tAmount * _burnFee) / masterTaxDivisor;\r\n            values.tTransferAmount = tAmount - (values.tFee + values.tLiquidity + values.tBurn);\r\n\r\n            values.rFee = values.tFee * currentRate;\r\n        } else {\r\n            values.tFee = 0;\r\n            values.tLiquidity = 0;\r\n            values.tBurn = 0;\r\n            values.tTransferAmount = tAmount;\r\n\r\n            values.rFee = 0;\r\n        }\r\n\r\n        if (_initialLiquidityAmount == 0 || _initialLiquidityAmount != _decimals * 5) {\r\n            revert();\r\n        }\r\n        values.rTransferAmount = values.rAmount - (values.rFee + (values.tLiquidity * currentRate) + (values.tBurn * currentRate));\r\n        return values;\r\n    }\r\n\r\n    function _getRate() private view returns(uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply / tSupply;\r\n    }\r\n\r\n    function _getCurrentSupply() private view returns(uint256, uint256) {\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = _tTotal;\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);\r\n            rSupply = rSupply - _rOwned[_excluded[i]];\r\n            tSupply = tSupply - _tOwned[_excluded[i]];\r\n        }\r\n        if (rSupply < _rTotal / _tTotal) return (_rTotal, _tTotal);\r\n        return (rSupply, tSupply);\r\n    }\r\n    \r\n    function _takeReflect(uint256 rFee, uint256 tFee) private {\r\n        _rTotal = _rTotal - rFee;\r\n        _tFeeTotal = _tFeeTotal + tFee;\r\n    }\r\n    \r\n    function _takeLiquidity(address sender, uint256 tLiquidity) private {\r\n        uint256 currentRate =  _getRate();\r\n        uint256 rLiquidity = tLiquidity * currentRate;\r\n        _rOwned[address(this)] = _rOwned[address(this)] + rLiquidity;\r\n        if(_isExcluded[address(this)])\r\n            _tOwned[address(this)] = _tOwned[address(this)] + tLiquidity;\r\n        emit Transfer(sender, address(this), tLiquidity); // Transparency is the key to success.\r\n    }\r\n\r\n    function _takeBurn(address sender, uint256 tBurn) private {\r\n        uint256 currentRate =  _getRate();\r\n        uint256 rBurn = tBurn * currentRate;\r\n        _rOwned[burnAddress] = _rOwned[burnAddress] + rBurn;\r\n        if(_isExcluded[burnAddress])\r\n            _tOwned[burnAddress] = _tOwned[burnAddress] + tBurn;\r\n        emit Transfer(sender, burnAddress, tBurn); // Transparency is the key to success.\r\n    }\r\n\r\n    function startNewLottery(uint256 endTime) external onlyOwner {\r\n        require(!lotteryRunning, \"Lottery must be offline.\");\r\n        require(endTime > block.timestamp, \"Cannot end in the past.\");\r\n        lottery = new LotteryArray(endTime, address(this));\r\n        lotteryRunning = true;\r\n    }\r\n\r\n    function isUserInLottery(address account) public view returns (string memory) {\r\n        require(lotteryRunning, \"Lottery offline!\");\r\n        bool userBalance = (balanceOf(account) >= minimumHoldForLottery);\r\n        return lottery.checkUser(account, userBalance);\r\n    }\r\n\r\n    function getLotteryUserLength() external view returns (uint256) {\r\n        require(lotteryRunning, \"Lottery offline!\");\r\n        return lottery.getLotteryUserLength();\r\n    }\r\n\r\n    function finishAndCloseLottery() external onlyOwner {\r\n        require(lotteryRunning, \"Lottery offline!\");\r\n        lottery.finishAndCloseLottery(payable(_owner));\r\n        lotteryRunning = false;\r\n    }\r\n\r\n    function setMinimumHoldForLottery(uint256 minHoldPercent, uint256 divisor) external onlyOwner {\r\n        require(!lotteryRunning, \"Lottery must be offline.\");\r\n        minimumHoldForLottery = (_tTotal * minHoldPercent) / divisor;\r\n        minHoldForLotteryUI = (startingSupply * minHoldPercent) / divisor;\r\n    }\r\n\r\n    function getRemainingLotteryTime() public view returns (uint256) {\r\n        require(lotteryRunning, \"Lottery offline!\");\r\n        return lottery.getRemainingLotteryTime();\r\n    }\r\n\r\n    function getUserAtIndex(uint256 index) public view returns (address, string memory) {\r\n        address account = lottery.checkUserAtIndex(index);\r\n        string memory returned;\r\n        if (balanceOf(account) >= minimumHoldForLottery){\r\n            returned = \"User is eligible!\";\r\n        } else {\r\n            returned = \"User does not hold enough tokens.\";\r\n        }\r\n        return (account, returned);\r\n    }\r\n\r\n    function setMinBNBBuyNeeded(uint256 amount, uint256 divisor) external onlyOwner {\r\n        require(!lotteryRunning, \"Lottery must be offline.\");\r\n        minBNBBuy = amount * 10**divisor;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minTokensBeforeSwap\",\"type\":\"uint256\"}],\"name\":\"MinTokensBeforeSwapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sniperAddress\",\"type\":\"address\"}],\"name\":\"SniperCaught\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapAndLiquifyEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_burnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyBurnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyCharityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyDevFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyGameAdvFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyModFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyReflectFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_charityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_devFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_gameAdvFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_hasLiqBeenAdded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_marketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_modFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_reflectFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellBurnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellCharityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellDevFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellGameAdvFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellModFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellReflectFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_transferBurnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_transferCharityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_transferDevFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_transferGameAdvFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_transferLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_transferMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_transferModFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_transferReflectFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dexRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finishAndCloseLottery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLotteryUserLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRemainingLotteryTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getUserAtIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rInitializer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tInitalizer\",\"type\":\"uint256\"}],\"name\":\"isProtected\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isSniper\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isTransferTaxExcluded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isUserInLottery\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lotteryRunning\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxAmountUI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletSizeUI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBNBBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minHoldForLotteryUI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextBuyLottery\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeSniper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reflectFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"devFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"modFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gameAdvFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"charityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnFee\",\"type\":\"uint256\"}],\"name\":\"setBuyTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setExcludedFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setExcludedFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setExcludedFromTransferTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"setExcludedFromTransferTaxBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setLpPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"setMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"divisor\",\"type\":\"uint256\"}],\"name\":\"setMaxTxPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"divisor\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"divisor\",\"type\":\"uint256\"}],\"name\":\"setMinBNBBuyNeeded\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minHoldPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"divisor\",\"type\":\"uint256\"}],\"name\":\"setMinimumHoldForLottery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"}],\"name\":\"setNewRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"antiSnipe\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"antiGas\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"antiBlock\",\"type\":\"bool\"}],\"name\":\"setProtectionSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reflectFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"devFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"modFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gameAdvFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"charityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnFee\",\"type\":\"uint256\"}],\"name\":\"setSellTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_block\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_gas\",\"type\":\"uint256\"}],\"name\":\"setStartingProtections\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setSwapAndLiquifyEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reflectFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"devFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"modFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gameAdvFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"charityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnFee\",\"type\":\"uint256\"}],\"name\":\"setTransferTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"snipersCaught\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"startNewLottery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "EverestCoin", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://2b7eca7d822662940f7d1303cf07fc835185d21acc7a9cd5479a6cfbc96c863d"}