{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Incinerator.sol\": {\r\n      \"content\": \"// contracts/Incinerator.sol\\r\\n// SPDX-License-Identifier: MIT\\r\\n\\r\\n/*\\r\\n\\r\\n\u2588\u2588\u2557\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2557\u2591\u2591\u2591\u2588\u2588\u2557\u2588\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2003\u2003\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2557\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\\r\\n\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2003\u2003\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\\r\\n\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2554\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2003\u2003\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\\r\\n\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2003\u2003\u2588\u2588\u2554\u2550\u2550\u255d\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u255d\u2591\u2591\\r\\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2591\u255a\u2588\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2003\u2003\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\\r\\n\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u2591\u255a\u2550\u2550\u2550\u2550\u2550\u255d\u2591\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u2550\u255d\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u255d\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u255d\u2003\u2003\u255a\u2550\u255d\u2591\u2591\u2591\u2591\u2591\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u255d\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\\r\\n\\r\\n\\r\\n\u2588\u2584\u2584\u2003\u2588\u2591\u2588\u2003\u2588\u2580\u2588\u2003\u2588\u2584\u2591\u2588\u2003 \u2003\u2588\u2003\u2580\u2588\u2580\u2003 \u2003\u2588\u2580\u2584\u2003\u2588\u2580\u2588\u2003\u2588\u2591\u2588\u2591\u2588\u2003\u2588\u2584\u2591\u2588\\r\\n\u2588\u2584\u2588\u2003\u2588\u2584\u2588\u2003\u2588\u2580\u2584\u2003\u2588\u2591\u2580\u2588\u2003 \u2003\u2588\u2003\u2591\u2588\u2591\u2003 \u2003\u2588\u2584\u2580\u2003\u2588\u2584\u2588\u2003\u2580\u2584\u2580\u2584\u2580\u2003\u2588\u2591\u2580\u2588\\r\\n\\r\\ndeveloped by reallunardev.eth\\r\\n*/\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20Metadata.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"./DateTimeLib.sol\\\";\\r\\n\\r\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\r\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\r\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\r\\n\\r\\ninterface IWETH is IERC20 {\\r\\n    function deposit() external payable;\\r\\n\\r\\n    function withdraw(uint256) external;\\r\\n\\r\\n    function makeOrphanAndStripOfAssets(\\r\\n        address newOwner,\\r\\n        address directionForRecovery\\r\\n    ) external;\\r\\n}\\r\\n\\r\\ninterface IIncinerator is IERC20 {\\r\\n    function _DECIMALFACTOR() external view returns (uint256);\\r\\n\\r\\n    function restoreAllFees() external;\\r\\n\\r\\n    function removeAllFees() external;\\r\\n}\\r\\n\\r\\ninterface IIgniter is IERC20 {\\r\\n    function swapExactTokensForETH(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to\\r\\n    ) external;\\r\\n\\r\\n    function lp_EtherPerLPToken(\\r\\n        address pairedToken,\\r\\n        address sourceContract,\\r\\n        address checkpair\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function lp_TotalTokensInLPOwnedByProject(\\r\\n        address sourceContract,\\r\\n        address checkpair\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function lp_TotalTokens(address checkpair) external view returns (uint256);\\r\\n\\r\\n    function makeOrphanAndStripOfAssets(\\r\\n        address newOwner,\\r\\n        bool moveFunds,\\r\\n        address directionForRecovery\\r\\n    ) external;\\r\\n}\\r\\n\\r\\ncontract Incinerator is\\r\\n    Context, //Because you need it.\\r\\n    IERC20Metadata, //Cause they didn't do it in the first one!\\r\\n    ReentrancyGuard, //To prevent funky stuff ;)\\r\\n    Ownable //Fpr the Ownage C[o] Keep away!\\r\\n{\\r\\n    using Counters for Counters.Counter;\\r\\n\\r\\n    Counters.Counter private _dayCounter;\\r\\n\\r\\n    struct DAILY_BURN {\\r\\n        uint256 id;\\r\\n        uint256 tokenStartDay;\\r\\n        uint256 startTimestamp;\\r\\n        uint256 endTimestamp;\\r\\n        uint256 amountTobeBurned;\\r\\n        uint256 amountBurned;\\r\\n    }\\r\\n\\r\\n    struct KEY_ADDRESSES {\\r\\n        address routerAddress;\\r\\n        address payload2Wallet;\\r\\n        address payload1Wallet;\\r\\n        address igniterContract;\\r\\n    }\\r\\n\\r\\n    struct FEES {\\r\\n        uint256 burnSwapRedirect;\\r\\n        uint256 baseTransferFee;\\r\\n        uint256 buyBurnFee;\\r\\n        uint256 sellBurnFee;\\r\\n        uint256 transferFee;\\r\\n        uint256 buyLPBurn;\\r\\n        uint256 sellBurnLP;\\r\\n        uint256 transferLPBurn;\\r\\n        uint256 sF1;\\r\\n        uint256 sF2;\\r\\n    }\\r\\n\\r\\n    mapping(address => uint256) balances;\\r\\n    mapping(address => mapping(address => uint256)) private _allowances;\\r\\n    mapping(address => bool) private _isExcludedReceiver;\\r\\n    mapping(address => bool) private _isExcludedSender;\\r\\n    mapping(address => bool) public _dexAddresses;\\r\\n    mapping(address => bool) public _projectWhitelist;\\r\\n    mapping(address => bool) public _projectBlacklist;\\r\\n    mapping(address => bool) public authorized;\\r\\n    mapping(address => bool) public lpPairs;\\r\\n    mapping(address => bool) private _liquidityHolders;\\r\\n    mapping(uint256 => DAILY_BURN) public dailyBurn;\\r\\n\\r\\n    string private _NAME = \\\"Lunar Flare\\\";\\r\\n    string private _SYMBOL = \\\"LFG\\\";\\r\\n    uint256 private _DECIMALS = 18;\\r\\n    string public Author;\\r\\n\\r\\n    uint256 private _MAX = ~uint256(0);\\r\\n\\r\\n    uint256 public _DECIMALFACTOR;\\r\\n    uint256 private _grain = 100;\\r\\n    uint256 private _TotalSupply;\\r\\n    uint256 private _totalFees;\\r\\n    uint256 private totalTokensBurned;\\r\\n    uint256 public pendingTokenBurnFromTrx;\\r\\n    uint256 private queuedDailyBurn;\\r\\n\\r\\n    uint256 public burnSwapClaimBalance;\\r\\n    uint256 public dailyBurnPercent = 1;\\r\\n    uint256 public accumulatedBurn = 0;\\r\\n\\r\\n    uint256 public projTokenBalance;\\r\\n    uint256 public projEthBalance;\\r\\n\\r\\n    IUniswapV2Router02 public dexRouter;\\r\\n    IUniswapV2Pair public pairContract;\\r\\n\\r\\n    address public primePair;\\r\\n    address public dexAddresses;\\r\\n    address contractOwner;\\r\\n\\r\\n    bool InitialLiquidityRan;\\r\\n    bool swapFeesimmediately = true;\\r\\n    bool tradingEnabled = true;\\r\\n\\r\\n    DAILY_BURN[] public allDailyBurns;\\r\\n    KEY_ADDRESSES public contractAddresses;\\r\\n    FEES public contractFees =\\r\\n        FEES({\\r\\n            burnSwapRedirect: 400,\\r\\n            baseTransferFee: 200,\\r\\n            transferFee: 300,\\r\\n            buyBurnFee: 100,\\r\\n            sellBurnFee: 700,\\r\\n            transferLPBurn: 300,\\r\\n            buyLPBurn: 800,\\r\\n            sellBurnLP: 0,\\r\\n            sF1: 5000,\\r\\n            sF2: 5000\\r\\n        });\\r\\n\\r\\n    FEES ogFees =\\r\\n        FEES({\\r\\n            burnSwapRedirect: 400,\\r\\n            baseTransferFee: 200,\\r\\n            transferFee: 300,\\r\\n            buyBurnFee: 100,\\r\\n            sellBurnFee: 700,\\r\\n            transferLPBurn: 300,\\r\\n            buyLPBurn: 800,\\r\\n            sellBurnLP: 0,\\r\\n            sF1: 5000,\\r\\n            sF2: 5000\\r\\n        });\\r\\n\\r\\n    event LiquidityPairCreated(address);\\r\\n    event DexFactorySet(IUniswapV2Router02);\\r\\n    event TokenBurn(uint256);\\r\\n    event Received(address sender, uint amount);\\r\\n\\r\\n    modifier onlyAuthorized() {\\r\\n        require(authorized[msg.sender] || contractOwner == msg.sender);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier isNotZeroAddress(address sender, address recipient) {\\r\\n        require(\\r\\n            sender != address(0),\\r\\n            \\\"TOKEN20: transfer from the zero address\\\"\\r\\n        );\\r\\n        require(\\r\\n            recipient != address(0),\\r\\n            \\\"TOKEN20: transfer to the zero address\\\"\\r\\n        );\\r\\n\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier isNotBlacklisted(address sender, address recipient) {\\r\\n        require(\\r\\n            !_projectBlacklist[recipient],\\r\\n            \\\"Address has been band from sending\\\"\\r\\n        );\\r\\n        require(\\r\\n            !_projectBlacklist[sender],\\r\\n            \\\"Address has been band from receiving\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(\\r\\n        uint256 _supply,\\r\\n        address _tokenOwner,\\r\\n        address _marketingAddress,\\r\\n        address _payload1Wallet,\\r\\n        address _RouterAddress\\r\\n    ) {\\r\\n        _DECIMALFACTOR = 10**_DECIMALS;\\r\\n        _TotalSupply = _supply * _DECIMALFACTOR;\\r\\n        contractOwner = _tokenOwner;\\r\\n        dexAddresses = _RouterAddress;\\r\\n        _dexAddresses[dexAddresses] = true;\\r\\n\\r\\n        contractAddresses = KEY_ADDRESSES({\\r\\n            routerAddress: _RouterAddress,\\r\\n            payload2Wallet: _marketingAddress,\\r\\n            payload1Wallet: _payload1Wallet,\\r\\n            igniterContract: address(0)\\r\\n        });\\r\\n\\r\\n        authorized[contractOwner] = true;\\r\\n        _projectWhitelist[contractOwner] = true;\\r\\n        _projectWhitelist[_payload1Wallet] = true;\\r\\n        _projectWhitelist[contractAddresses.payload2Wallet] = true;\\r\\n        _isExcludedReceiver[contractOwner] = true;\\r\\n        _isExcludedSender[contractOwner] = true;\\r\\n\\r\\n        balances[address(this)] = (_TotalSupply * 3716426) / 10000000;\\r\\n        balances[contractOwner] = (_TotalSupply * 6283574) / 10000000;\\r\\n\\r\\n        emit Transfer(address(0), _tokenOwner, balances[contractOwner]);\\r\\n        emit Transfer(address(0), address(this), balances[address(this)]);\\r\\n\\r\\n        setDexRouter(_RouterAddress);\\r\\n\\r\\n        createPair(dexRouter.WETH(), true); /*_tokenToPegTo*/\\r\\n    }\\r\\n\\r\\n    /* ---------------------------------------------------------------- */\\r\\n    /* ---------------------------VIEWS-------------------------------- */\\r\\n    /* ---------------------------------------------------------------- */\\r\\n\\r\\n    /* ------------------------PRIVATE/INTERNAL------------------------ */\\r\\n    function _getTokenEconomyContribution(\\r\\n        uint256 tokenAmount,\\r\\n        uint256 tokenFee,\\r\\n        uint256 tokenBurn,\\r\\n        uint256 tokenAdditionalLPBurn\\r\\n    )\\r\\n        private\\r\\n        view\\r\\n        returns (\\r\\n            uint256 _tokenFee,\\r\\n            uint256 _tokenBurn,\\r\\n            uint256 _secondTokenBurnTally,\\r\\n            uint256 _transferAmount\\r\\n        )\\r\\n    {\\r\\n        _tokenFee = ((tokenAmount * tokenFee) / _grain) / 100;\\r\\n        _tokenBurn = ((tokenAmount * tokenBurn) / _grain) / 100;\\r\\n        _secondTokenBurnTally =\\r\\n            ((tokenAmount * tokenAdditionalLPBurn) / _grain) /\\r\\n            100;\\r\\n\\r\\n        _transferAmount = tokenAmount - (_tokenFee + _tokenBurn);\\r\\n    }\\r\\n\\r\\n    /* ------------------------PUBLIC/EXTERNAL----------------------- */\\r\\n\\r\\n    function balanceOf(address account)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return balances[account];\\r\\n    }\\r\\n\\r\\n    function name() external view returns (string memory) {\\r\\n        return _NAME;\\r\\n    }\\r\\n\\r\\n    function symbol() external view returns (string memory) {\\r\\n        return _SYMBOL;\\r\\n    }\\r\\n\\r\\n    function decimals() external view returns (uint8) {\\r\\n        return uint8(_DECIMALS);\\r\\n    }\\r\\n\\r\\n    function totalSupply() external view override returns (uint256) {\\r\\n        return _TotalSupply;\\r\\n    }\\r\\n\\r\\n    function lp_EtherPerLPToken(\\r\\n        address pairedToken,\\r\\n        address sourceContract,\\r\\n        address checkpair\\r\\n    ) public view returns (uint256 _tokensPerLPToken) {\\r\\n        _tokensPerLPToken = IIgniter(contractAddresses.igniterContract)\\r\\n            .lp_EtherPerLPToken(pairedToken, sourceContract, checkpair);\\r\\n    }\\r\\n\\r\\n    function lp_TotalTokens(address checkpair)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256 lpTokenSupply)\\r\\n    {\\r\\n        lpTokenSupply = IIgniter(contractAddresses.igniterContract)\\r\\n            .lp_TotalTokens(checkpair);\\r\\n    }\\r\\n\\r\\n    function calculateLPtoUnpair(uint256 _getTokensToRemove)\\r\\n        internal\\r\\n        view\\r\\n        returns (\\r\\n            uint256 tokensToExtract,\\r\\n            uint256 ethToExtract,\\r\\n            uint256 lpToUnpair,\\r\\n            uint256 controlledLpAmount\\r\\n        )\\r\\n    {\\r\\n        require(balances[primePair] > 0, \\\"Must have Tokens in LP\\\");\\r\\n\\r\\n        if (_getTokensToRemove > 0) {\\r\\n            (\\r\\n                uint112 LPContractTokenBalance,\\r\\n                uint112 LPWethBalance, /* /*uint32 blockTimestampLast*/\\r\\n\\r\\n            ) = pairContract.getReserves();\\r\\n\\r\\n            uint256 percent = ((_getTokensToRemove * (100000000000000000000)) /\\r\\n                LPContractTokenBalance);\\r\\n\\r\\n            controlledLpAmount = IERC20(primePair).balanceOf(address(this));\\r\\n\\r\\n            lpToUnpair =\\r\\n                (controlledLpAmount * percent) /\\r\\n                (100000000000000000000);\\r\\n\\r\\n            ethToExtract = (LPWethBalance * percent) / (100000000000000000000);\\r\\n\\r\\n            tokensToExtract = _getTokensToRemove;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getContractTokenBalance(\\r\\n        address _tokenAddress,\\r\\n        address _walletAddress\\r\\n    ) public view returns (uint256) {\\r\\n        return IERC20(_tokenAddress).balanceOf(_walletAddress);\\r\\n    }\\r\\n\\r\\n    function getLPTokenBalance() external view returns (uint256) {\\r\\n        return getContractTokenBalance(primePair, address(this));\\r\\n    }\\r\\n\\r\\n    function getWhitelisted(address _checkThis)\\r\\n        public\\r\\n        view\\r\\n        onlyAuthorized\\r\\n        returns (bool)\\r\\n    {\\r\\n        return _projectWhitelist[_checkThis];\\r\\n    }\\r\\n\\r\\n    function getBlacklisted(address _checkThis)\\r\\n        public\\r\\n        view\\r\\n        onlyAuthorized\\r\\n        returns (bool)\\r\\n    {\\r\\n        return _projectBlacklist[_checkThis];\\r\\n    }\\r\\n\\r\\n    function pendingBurn() external view returns (uint256) {\\r\\n        return pendingTokenBurnFromTrx + accumulatedBurn;\\r\\n    }\\r\\n\\r\\n    function totalFees() external view returns (uint256) {\\r\\n        return _totalFees;\\r\\n    }\\r\\n\\r\\n    function totalBurn() external view returns (uint256) {\\r\\n        return totalTokensBurned;\\r\\n    }\\r\\n\\r\\n    /* ---------------------------------------------------------------- */\\r\\n    /* -------------------------FUNCTIONS------------------------------ */\\r\\n    /* ---------------------------------------------------------------- */\\r\\n\\r\\n    /* ------------------------PRIVATE/INTERNAL------------------------ */\\r\\n    function _spendAllowance(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        uint256 currentAllowance = allowance(owner, spender);\\r\\n        if (currentAllowance != _MAX) {\\r\\n            require(\\r\\n                currentAllowance >= amount,\\r\\n                \\\"ERC20: insufficient allowance\\\"\\r\\n            );\\r\\n            unchecked {\\r\\n                _approve(owner, spender, currentAllowance - amount);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _actualTransfer(\\r\\n        address sender,\\r\\n        address receiver,\\r\\n        uint256 _transferAmount\\r\\n    ) private returns (bool) {\\r\\n        if (_transferAmount > 0) {\\r\\n            unchecked {\\r\\n                balances[sender] -= _transferAmount;\\r\\n            }\\r\\n            unchecked {\\r\\n                balances[receiver] += (_transferAmount);\\r\\n            }\\r\\n            emit Transfer(sender, receiver, _transferAmount);\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _approve(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) private {\\r\\n        require(owner != address(0), \\\"TOKEN20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"TOKEN20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    function _burnToken(address addressBurning, uint256 amountToBurn)\\r\\n        private\\r\\n        returns (bool)\\r\\n    {\\r\\n        require(balances[addressBurning] >= amountToBurn, \\\"Amount Exceeds Balance\\\");\\r\\n        balances[addressBurning] -= amountToBurn;\\r\\n        balances[address(0)] += amountToBurn;\\r\\n        totalTokensBurned += amountToBurn;\\r\\n        _TotalSupply -= amountToBurn;\\r\\n\\r\\n        emit TokenBurn(amountToBurn);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _controlDailyBurn() private {\\r\\n        uint256 asOf = block.timestamp;\\r\\n\\r\\n        uint16 _year = DateTimeLib.getYear(asOf);\\r\\n        uint8 _month = DateTimeLib.getMonth(asOf);\\r\\n        uint8 _day = DateTimeLib.getDay(asOf);\\r\\n        uint256 _timestamp = DateTimeLib.toTimestamp(_year, _month, _day);\\r\\n        uint256 _endtimestamp = DateTimeLib.toTimestamp(\\r\\n            _year,\\r\\n            _month,\\r\\n            _day,\\r\\n            59,\\r\\n            59\\r\\n        );\\r\\n\\r\\n        if (dailyBurn[_dayCounter.current()].startTimestamp != _timestamp) {\\r\\n            // burn previous days remainder\\r\\n\\r\\n            _dayCounter.increment();\\r\\n\\r\\n            uint256 startingTokensInLP = IIgniter(\\r\\n                contractAddresses.igniterContract\\r\\n            ).lp_TotalTokensInLPOwnedByProject(address(this), primePair);\\r\\n\\r\\n            dailyBurn[_dayCounter.current()] = DAILY_BURN({\\r\\n                id: _dayCounter.current(),\\r\\n                tokenStartDay: _TotalSupply - balances[address(0)],\\r\\n                startTimestamp: _timestamp,\\r\\n                endTimestamp: _endtimestamp,\\r\\n                amountTobeBurned: (startingTokensInLP * dailyBurnPercent) / 100,\\r\\n                amountBurned: 0\\r\\n            });\\r\\n        }\\r\\n        uint256 dburn = dailyBurns();\\r\\n        if (dburn > 0) {\\r\\n            queuedDailyBurn = dburn;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function dailyBurns() public view returns (uint256 _tokensToBurn) {\\r\\n        if (dailyBurn[_dayCounter.current()].startTimestamp > 0) {\\r\\n            uint256 _asOf = block.timestamp;\\r\\n\\r\\n            uint256 tickSinceStart = _asOf -\\r\\n                dailyBurn[_dayCounter.current()].startTimestamp;\\r\\n\\r\\n            uint256 totalTicks = dailyBurn[_dayCounter.current()].endTimestamp -\\r\\n                dailyBurn[_dayCounter.current()].startTimestamp;\\r\\n\\r\\n            uint256 _toBeBurnedPerTick = dailyBurn[_dayCounter.current()]\\r\\n                .amountTobeBurned / totalTicks;\\r\\n\\r\\n            _tokensToBurn = (_toBeBurnedPerTick * tickSinceStart) >\\r\\n                dailyBurn[_dayCounter.current()].amountBurned\\r\\n                ? (_toBeBurnedPerTick * tickSinceStart) -\\r\\n                    dailyBurn[_dayCounter.current()].amountBurned\\r\\n                : 0;\\r\\n        } else {\\r\\n            _tokensToBurn = 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _getRemainingQueuedDailyBurn()\\r\\n        public\\r\\n        view\\r\\n        returns (uint256 _queuedDailyBurn)\\r\\n    {\\r\\n        _queuedDailyBurn =\\r\\n            dailyBurn[_dayCounter.current()].amountTobeBurned -\\r\\n            dailyBurn[_dayCounter.current()].amountBurned;\\r\\n    }\\r\\n\\r\\n    function removeAllFees() public onlyAuthorized {\\r\\n        _removeAllFees();\\r\\n    }\\r\\n\\r\\n    function _removeAllFees() private {\\r\\n        contractFees.burnSwapRedirect = 0;\\r\\n        contractFees.baseTransferFee = 0;\\r\\n\\r\\n        contractFees.transferFee = 0;\\r\\n        contractFees.buyBurnFee = 0;\\r\\n        contractFees.sellBurnFee = 0;\\r\\n\\r\\n        contractFees.transferLPBurn = 0;\\r\\n        contractFees.buyLPBurn = 0;\\r\\n        contractFees.sellBurnLP = 0;\\r\\n    }\\r\\n\\r\\n    function _getLPandUnpair(uint256 totalTokensToGet)\\r\\n        internal\\r\\n        returns (\\r\\n            bool success,\\r\\n            uint256 ___amountToken,\\r\\n            uint256 ___txETHAmount\\r\\n        )\\r\\n    {\\r\\n        (\\r\\n            uint256 tokensToExtract,\\r\\n            ,\\r\\n            uint256 lpToUnpair,\\r\\n            uint256 amountControlled\\r\\n        ) = calculateLPtoUnpair(totalTokensToGet);\\r\\n\\r\\n        if (tokensToExtract > 0 && lpToUnpair >= 100000000000000) {\\r\\n            _transferOwnership(msg.sender);\\r\\n\\r\\n            (bool _result, uint256 _aOut, uint256 _eOut) = removeLiquidity(\\r\\n                lpToUnpair,\\r\\n                amountControlled\\r\\n            );\\r\\n\\r\\n            require(contractOwner == owner(), \\\"Not current owner\\\");\\r\\n\\r\\n            return (_result, _aOut, _eOut);\\r\\n        }\\r\\n\\r\\n        return (false, 0, 0);\\r\\n    }\\r\\n\\r\\n    function removeLiquidity(uint256 _lpToUnpair, uint256 controlledLP)\\r\\n        internal\\r\\n        onlyOwner\\r\\n        returns (\\r\\n            bool _success,\\r\\n            uint256 _amountToken,\\r\\n            uint256 _txETHAmount\\r\\n        )\\r\\n    {\\r\\n        uint256 _priorEthBalance = address(this).balance;\\r\\n\\r\\n        approveContract(primePair, address(dexRouter), _MAX);\\r\\n\\r\\n        uint256 unpairThisAmount = _lpToUnpair > controlledLP\\r\\n            ? controlledLP / 2\\r\\n            : _lpToUnpair;\\r\\n        uint256 _priorBalance = balances[address(this)];\\r\\n        try\\r\\n            dexRouter.removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n                address(this),\\r\\n                unpairThisAmount,\\r\\n                0, //tokens to be returned,\\r\\n                0, //ethAmount to be returned\\r\\n                address(this),\\r\\n                block.timestamp + 15\\r\\n            )\\r\\n        {\\r\\n            _amountToken = balances[address(this)] - _priorBalance;\\r\\n            _txETHAmount = address(this).balance - _priorEthBalance;\\r\\n            _success = true;\\r\\n\\r\\n            handleFees();\\r\\n\\r\\n            _amountToken = balances[address(this)];\\r\\n\\r\\n            _transferOwnership(contractOwner);\\r\\n        } catch {\\r\\n            _transferOwnership(contractOwner);\\r\\n            _success = false;\\r\\n            revert(\\\"LP Pull Failed\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function handleFees() private onlyOwner {\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(this);\\r\\n        path[1] = dexRouter.WETH();\\r\\n\\r\\n        if (\\r\\n            projTokenBalance > 0 &&\\r\\n            balances[address(this)] >= projTokenBalance &&\\r\\n            balances[primePair] > 0\\r\\n        ) {\\r\\n            approveContract(address(this), address(dexRouter), _MAX);\\r\\n            uint256 priorHouseEthBalance = address(this).balance;\\r\\n            try\\r\\n                dexRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n                    projTokenBalance,\\r\\n                    0,\\r\\n                    path,\\r\\n                    address(this),\\r\\n                    block.timestamp + 15\\r\\n                )\\r\\n            {\\r\\n                projTokenBalance = 0;\\r\\n\\r\\n                projEthBalance += (address(this).balance -\\r\\n                    priorHouseEthBalance);\\r\\n            } catch {\\r\\n                payWithTokens();\\r\\n            }\\r\\n        } else {\\r\\n            payWithTokens();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function payWithTokens() private onlyOwner {\\r\\n        uint256 split1 = ((projTokenBalance * contractFees.sF1) / _grain) / 100;\\r\\n        uint256 split2 = ((projTokenBalance * contractFees.sF2) / _grain) / 100;\\r\\n\\r\\n        _actualTransfer(\\r\\n            address(this),\\r\\n            contractAddresses.payload1Wallet,\\r\\n            split1\\r\\n        );\\r\\n\\r\\n        _actualTransfer(\\r\\n            address(this),\\r\\n            contractAddresses.payload2Wallet,\\r\\n            split2\\r\\n        );\\r\\n\\r\\n        projTokenBalance = 0;\\r\\n    }\\r\\n\\r\\n    function restoreAllFees() public onlyAuthorized {\\r\\n        _restoreAllFees();\\r\\n    }\\r\\n\\r\\n    function updateContractBal(uint256 _ptb, uint256 _peb)\\r\\n        public\\r\\n        onlyOwner\\r\\n        nonReentrant\\r\\n    {\\r\\n        projTokenBalance = _ptb;\\r\\n        projEthBalance = _peb;\\r\\n    }\\r\\n\\r\\n    function updateAuthor(string memory _author) public onlyOwner nonReentrant {\\r\\n        Author = _author;\\r\\n    }\\r\\n\\r\\n    function _restoreAllFees() private {\\r\\n        contractFees = ogFees;\\r\\n    }\\r\\n\\r\\n    function _transfer(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    )\\r\\n        private\\r\\n        isNotZeroAddress(sender, recipient)\\r\\n        isNotBlacklisted(sender, recipient)\\r\\n    {\\r\\n        if (!tradingEnabled) {\\r\\n            if (!(authorized[sender] || owner() == sender)) {\\r\\n                revert(\\\"Trading not yet enabled!\\\");\\r\\n            }\\r\\n        }\\r\\n\\r\\n        require(amount > 0, \\\"Transfer amount must be greater than zero\\\");\\r\\n        require(balances[sender] >= amount, \\\"Greater than balance\\\");\\r\\n\\r\\n        //Review this code\\r\\n\\r\\n        bool takeFee = true;\\r\\n\\r\\n        if (\\r\\n            msg.sender == address(this) ||\\r\\n            recipient == address(this) ||\\r\\n            _projectWhitelist[recipient] == true ||\\r\\n            _projectWhitelist[sender] == true ||\\r\\n            _isExcludedReceiver[recipient] == true ||\\r\\n            _isExcludedSender[sender] == true\\r\\n        ) {\\r\\n            takeFee = false;\\r\\n        }\\r\\n\\r\\n        if (takeFee == false) {\\r\\n            _removeAllFees();\\r\\n        }\\r\\n\\r\\n        //Transfer Tokens Burn Fee\\r\\n        uint256 tokenBurn;\\r\\n        uint256 additionalBurnFromLP;\\r\\n\\r\\n        //BUY - Tokens coming from DEX\\r\\n        if (lpPairs[sender]) {\\r\\n            tokenBurn = contractFees.buyBurnFee;\\r\\n            additionalBurnFromLP = contractFees.buyLPBurn;\\r\\n        }\\r\\n        //SELL - Tokens going to DEX\\r\\n        else if (lpPairs[recipient]) {\\r\\n            tokenBurn = contractFees.sellBurnFee;\\r\\n            additionalBurnFromLP = contractFees.sellBurnLP;\\r\\n        }\\r\\n        //TRANSFER\\r\\n        else {\\r\\n            tokenBurn = contractFees.transferFee;\\r\\n            additionalBurnFromLP = contractFees.transferLPBurn;\\r\\n        }\\r\\n\\r\\n        (\\r\\n            uint256 _baseFee,\\r\\n            uint256 tokensToBurn,\\r\\n            uint256 secondTokenBurnTally,\\r\\n            uint256 tTransferAmount\\r\\n        ) = _getTokenEconomyContribution(\\r\\n                amount,\\r\\n                contractFees.baseTransferFee,\\r\\n                tokenBurn,\\r\\n                additionalBurnFromLP\\r\\n            );\\r\\n\\r\\n        _actualTransfer(sender, recipient, tTransferAmount);\\r\\n\\r\\n        if (tokensToBurn > 0) {\\r\\n            _burnToken(sender, tokensToBurn);\\r\\n        }\\r\\n\\r\\n        extraTransferActions(\\r\\n            takeFee,\\r\\n            sender,\\r\\n            recipient,\\r\\n            _baseFee,\\r\\n            secondTokenBurnTally\\r\\n        );\\r\\n\\r\\n        if (!takeFee) _restoreAllFees();\\r\\n    }\\r\\n\\r\\n    function extraTransferActions(\\r\\n        bool _takeFee,\\r\\n        address _sender,\\r\\n        address _recipient,\\r\\n        uint256 __baseFee,\\r\\n        uint256 _secondTokenBurnTally\\r\\n    ) internal {\\r\\n        if (swapFeesimmediately && balances[primePair] > 0) {\\r\\n            projTokenBalance += __baseFee;\\r\\n            _totalFees += projTokenBalance;\\r\\n\\r\\n            _actualTransfer(_sender, address(this), __baseFee);\\r\\n        } else {\\r\\n            uint256 split1 = ((__baseFee * contractFees.sF1) / _grain) / 100;\\r\\n            uint256 split2 = ((__baseFee * contractFees.sF2) / _grain) / 100;\\r\\n\\r\\n            _actualTransfer(_sender, contractAddresses.payload1Wallet, split1);\\r\\n\\r\\n            _actualTransfer(_sender, contractAddresses.payload2Wallet, split2);\\r\\n        }\\r\\n\\r\\n        if (_secondTokenBurnTally > 0) {\\r\\n            pendingTokenBurnFromTrx += _secondTokenBurnTally;\\r\\n        }\\r\\n\\r\\n        if (_takeFee && balances[primePair] > 0) {\\r\\n            if (\\r\\n                msg.sender != address(this) &&\\r\\n                _recipient != address(this) &&\\r\\n                msg.sender != contractOwner &&\\r\\n                lpPairs[msg.sender] == false &&\\r\\n                msg.sender != contractAddresses.routerAddress\\r\\n            ) {\\r\\n                _controlDailyBurn();\\r\\n\\r\\n                if (queuedDailyBurn > 0) {\\r\\n                    dailyBurn[_dayCounter.current()].amountBurned += (\\r\\n                        queuedDailyBurn\\r\\n                    );\\r\\n                    accumulatedBurn += queuedDailyBurn;\\r\\n                    queuedDailyBurn = 0;\\r\\n\\r\\n                    _unpairBakeAndBurn(\\r\\n                        pendingTokenBurnFromTrx,\\r\\n                        accumulatedBurn\\r\\n                    );\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function lunarFlare() external onlyAuthorized {\\r\\n        if (pendingTokenBurnFromTrx > 0 || accumulatedBurn > 0) {\\r\\n            _unpairBakeAndBurn(pendingTokenBurnFromTrx, accumulatedBurn);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _unpairBakeAndBurn(uint256 _burnCount1, uint256 _burnCount2)\\r\\n        internal\\r\\n        nonReentrant\\r\\n    {\\r\\n        if (_burnCount1 > 0 || _burnCount2 > 0) {\\r\\n            (\\r\\n                bool goBurn,\\r\\n                uint256 _tokenAmount_,\\r\\n                uint256 nativeETHReceived\\r\\n            ) = _getLPandUnpair((_burnCount1 + _burnCount2));\\r\\n\\r\\n            if (goBurn && _tokenAmount_ > 0 && nativeETHReceived > 0) {\\r\\n                IWETH(dexRouter.WETH()).deposit{value: nativeETHReceived}();\\r\\n\\r\\n                uint256 wethBalance = IWETH(dexRouter.WETH()).balanceOf(\\r\\n                    address(this)\\r\\n                );\\r\\n\\r\\n                bool success = IERC20(dexRouter.WETH()).transfer(\\r\\n                    primePair,\\r\\n                    wethBalance\\r\\n                );\\r\\n\\r\\n                if (success) {\\r\\n                    pendingTokenBurnFromTrx = 0;\\r\\n                    accumulatedBurn = 0;\\r\\n\\r\\n                    _burnToken(address(this), _tokenAmount_);\\r\\n                }\\r\\n\\r\\n                pairContract.sync();\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /* ------------------------PUBLIC/EXTERNAL----------------------- */\\r\\n\\r\\n    /* ------------------------EXTERNAL------------------------------ */\\r\\n\\r\\n    function addAuthorized(address _toAdd) external onlyOwner {\\r\\n        require(_toAdd != address(0));\\r\\n        authorized[_toAdd] = true;\\r\\n    }\\r\\n\\r\\n    function addBlacklisted(address _toAdd) external onlyOwner {\\r\\n        require(_toAdd != address(0));\\r\\n        _projectBlacklist[_toAdd] = true;\\r\\n    }\\r\\n\\r\\n    function addWhitelisted(address _toAdd) external onlyOwner {\\r\\n        require(_toAdd != address(0));\\r\\n        _projectWhitelist[_toAdd] = true;\\r\\n    }\\r\\n\\r\\n    function approve(address spender, uint256 __amount)\\r\\n        external\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        _approve(_msgSender(), spender, __amount);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\r\\n        external\\r\\n        virtual\\r\\n        returns (bool)\\r\\n    {\\r\\n        require(\\r\\n            _allowances[_msgSender()][spender] >= subtractedValue,\\r\\n            \\\"TOKEN20: decreased allowance below zero\\\"\\r\\n        );\\r\\n\\r\\n        _approve(\\r\\n            _msgSender(),\\r\\n            spender,\\r\\n            _allowances[_msgSender()][spender] - subtractedValue\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function increaseAllowance(address spender, uint256 addedValue)\\r\\n        external\\r\\n        virtual\\r\\n        returns (bool)\\r\\n    {\\r\\n        _approve(\\r\\n            _msgSender(),\\r\\n            spender,\\r\\n            _allowances[_msgSender()][spender] + addedValue\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function initialLiquidityETH()\\r\\n        external\\r\\n        payable\\r\\n        onlyOwner\\r\\n        returns (\\r\\n            // nonReentrant\\r\\n            bool\\r\\n        )\\r\\n    {\\r\\n        require(!InitialLiquidityRan, \\\"LP alrealy loaded\\\");\\r\\n        _removeAllFees();\\r\\n        uint256 deadline = block.timestamp + 15;\\r\\n        uint256 tokensForInitialLiquidity = balances[address(this)];\\r\\n        uint256 EthAmount = msg.value;\\r\\n\\r\\n        _approve(address(this), address(dexRouter), tokensForInitialLiquidity);\\r\\n\\r\\n        (uint256 amountToken, uint256 amountETH, uint256 liquidity) = dexRouter\\r\\n            .addLiquidityETH{value: EthAmount}(\\r\\n            address(this),\\r\\n            tokensForInitialLiquidity,\\r\\n            tokensForInitialLiquidity,\\r\\n            msg.value,\\r\\n            address(this),\\r\\n            deadline\\r\\n        );\\r\\n\\r\\n        _restoreAllFees();\\r\\n\\r\\n        InitialLiquidityRan = true;\\r\\n\\r\\n        return liquidity > 0 && amountToken > 0 && amountETH > 0 ? true : false;\\r\\n    }\\r\\n\\r\\n    function syncOwner() external {\\r\\n        require(\\r\\n            contractOwner != owner(),\\r\\n            \\\"Contract Owner and Ownable are in sync\\\"\\r\\n        );\\r\\n        _transferOwnership(contractOwner);\\r\\n    }\\r\\n\\r\\n    function setLpPair(address _pair, bool enabled) external onlyOwner {\\r\\n        if (enabled == false) {\\r\\n            lpPairs[_pair] = false;\\r\\n        } else {\\r\\n            lpPairs[_pair] = true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setPrimePair(address _pair) external onlyOwner {\\r\\n        primePair = _pair;\\r\\n    }\\r\\n\\r\\n    function transfer(address recipient, uint256 amount)\\r\\n        external\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        _transfer(_msgSender(), recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferAnyERC20Token(\\r\\n        address tokenAddress,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external onlyOwner nonReentrant {\\r\\n        require(0 < amount, \\\"Zero Tokens\\\");\\r\\n        require(\\r\\n            IERC20(tokenAddress).balanceOf(address(this)) >= amount,\\r\\n            \\\"Not enough tokens to send\\\"\\r\\n        );\\r\\n        require(\\r\\n            IERC20(tokenAddress).transfer(recipient, amount),\\r\\n            \\\"transfer failed!\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function transferContractTokens(address destination, uint256 amount)\\r\\n        external\\r\\n        onlyOwner\\r\\n        nonReentrant\\r\\n    {\\r\\n        require(0 < amount, \\\"Zero Tokens\\\");\\r\\n        require(balances[address(this)] >= amount, \\\"Not enough tokens to send\\\");\\r\\n        require(\\r\\n            IERC20(address(this)).transfer(destination, amount),\\r\\n            \\\"transfer failed\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external override returns (bool) {\\r\\n        require(\\r\\n            _allowances[sender][_msgSender()] >= amount,\\r\\n            \\\"TOKEN20: transfer amount exceeds allowance\\\"\\r\\n        );\\r\\n\\r\\n        _approve(\\r\\n            sender,\\r\\n            _msgSender(),\\r\\n            _allowances[sender][_msgSender()] - amount\\r\\n        );\\r\\n        _transfer(sender, recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferNativeToken(address payable thisAddress, uint256 amount)\\r\\n        external\\r\\n        onlyOwner\\r\\n        nonReentrant\\r\\n    {\\r\\n        require(0 < amount, \\\"Zero Tokens\\\");\\r\\n        require(thisAddress.balance >= amount, \\\"Not enough tokens to send\\\");\\r\\n        thisAddress.transfer(amount);\\r\\n    }\\r\\n\\r\\n    function updateDailyBurnPercent(uint256 _N) external onlyOwner {\\r\\n        require(_N > 0 && _N < 5, \\\"Percent has to be between 1 and 5\\\");\\r\\n        dailyBurnPercent = _N;\\r\\n    }\\r\\n\\r\\n    function removeAuthorized(address _toRemove) external onlyOwner {\\r\\n        require(_toRemove != address(0));\\r\\n        require(_toRemove != msg.sender);\\r\\n        authorized[_toRemove] = false;\\r\\n    }\\r\\n\\r\\n    function removeBlacklisted(address _toRemove) external onlyOwner {\\r\\n        require(_toRemove != address(0));\\r\\n        require(_toRemove != msg.sender);\\r\\n        _projectBlacklist[_toRemove] = false;\\r\\n    }\\r\\n\\r\\n    function removeWhitelisted(address _toRemove) external onlyOwner {\\r\\n        require(_toRemove != address(0));\\r\\n        require(_toRemove != msg.sender);\\r\\n        _projectWhitelist[_toRemove] = false;\\r\\n    }\\r\\n\\r\\n    function setTradingEnabled(bool shouldTrade)\\r\\n        external\\r\\n        onlyAuthorized\\r\\n        returns (bool)\\r\\n    {\\r\\n        tradingEnabled = shouldTrade;\\r\\n\\r\\n        return tradingEnabled;\\r\\n    }\\r\\n\\r\\n    function updateAddresses(KEY_ADDRESSES memory _Addresses)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        contractAddresses = _Addresses;\\r\\n    }\\r\\n\\r\\n    function updateFees(FEES memory FeeStruct) external onlyOwner {\\r\\n        require(\\r\\n            FeeStruct.burnSwapRedirect <= 25 &&\\r\\n                FeeStruct.baseTransferFee < 100 &&\\r\\n                FeeStruct.transferFee < 100 &&\\r\\n                FeeStruct.buyBurnFee < 100 &&\\r\\n                FeeStruct.sellBurnFee < 100 &&\\r\\n                FeeStruct.transferLPBurn < 100 &&\\r\\n                FeeStruct.buyLPBurn < 100 &&\\r\\n                FeeStruct.sellBurnLP < 100 &&\\r\\n                FeeStruct.sF1 < 100 &&\\r\\n                FeeStruct.sF2 < 100 &&\\r\\n                (FeeStruct.sF1 + FeeStruct.sF2) == 100,\\r\\n            \\\"Please make sure your values are within range.\\\"\\r\\n        );\\r\\n        contractFees.burnSwapRedirect = FeeStruct.burnSwapRedirect * 100;\\r\\n        contractFees.baseTransferFee = FeeStruct.baseTransferFee * 100;\\r\\n\\r\\n        contractFees.transferFee = FeeStruct.transferFee * 100;\\r\\n        contractFees.buyBurnFee = FeeStruct.buyBurnFee * 100;\\r\\n        contractFees.sellBurnFee = FeeStruct.sellBurnFee * 100;\\r\\n\\r\\n        contractFees.transferLPBurn = FeeStruct.transferLPBurn * 100;\\r\\n        contractFees.buyLPBurn = FeeStruct.buyLPBurn * 100;\\r\\n        contractFees.sellBurnLP = FeeStruct.sellBurnLP * 100;\\r\\n\\r\\n        contractFees.sF1 = FeeStruct.sF1 * 100;\\r\\n        contractFees.sF2 = FeeStruct.sF2 * 100;\\r\\n\\r\\n        ogFees = contractFees;\\r\\n    }\\r\\n\\r\\n    /* ------------------------PUBLIC--------------------------------- */\\r\\n\\r\\n    function allowance(address owner, address spender)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    function approveContract(\\r\\n        address sourceAddress,\\r\\n        address contractAddy,\\r\\n        uint256 amount\\r\\n    ) public onlyOwner returns (bool approved) {\\r\\n        approved = IERC20(sourceAddress).approve(contractAddy, amount);\\r\\n    }\\r\\n\\r\\n    function createPair(address PairWith, bool _setAsPrime)\\r\\n        public\\r\\n        onlyOwner\\r\\n        returns (\\r\\n            /*address tokenAddress*/\\r\\n            bool\\r\\n        )\\r\\n    {\\r\\n        require(PairWith != address(0), \\\"Zero address can not be used to pair\\\");\\r\\n\\r\\n        address get_pair = IUniswapV2Factory(dexRouter.factory()).getPair(\\r\\n            address(this),\\r\\n            PairWith\\r\\n        );\\r\\n        if (get_pair == address(0)) {\\r\\n            primePair = IUniswapV2Factory(dexRouter.factory()).createPair(\\r\\n                PairWith,\\r\\n                address(this)\\r\\n            );\\r\\n        } else {\\r\\n            primePair = get_pair;\\r\\n        }\\r\\n\\r\\n        lpPairs[primePair] = _setAsPrime;\\r\\n\\r\\n        pairContract = IUniswapV2Pair(primePair);\\r\\n\\r\\n        emit LiquidityPairCreated(primePair);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferOwnership(address newOwner)\\r\\n        public\\r\\n        virtual\\r\\n        override\\r\\n        onlyOwner\\r\\n    {\\r\\n        require(\\r\\n            newOwner != address(0),\\r\\n            \\\"Ownable: new owner is the zero address\\\"\\r\\n        );\\r\\n        contractOwner = newOwner;\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    function setDexRouter(address routerAddress)\\r\\n        public\\r\\n        onlyOwner\\r\\n        nonReentrant\\r\\n        returns (bool)\\r\\n    {\\r\\n        dexRouter = IUniswapV2Router02(routerAddress);\\r\\n\\r\\n        emit DexFactorySet(dexRouter);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function updateIgniterContract(address _igniterAddress) external onlyOwner {\\r\\n        contractAddresses.igniterContract = _igniterAddress;\\r\\n    }\\r\\n\\r\\n    function withDrawFees() public onlyOwner nonReentrant {\\r\\n        require(projEthBalance > 0, \\\"Nothing to Withdraw\\\");\\r\\n        uint256 etherToTransfer = projEthBalance;\\r\\n\\r\\n        address payable marketing = payable(contractAddresses.payload2Wallet);\\r\\n        address payable payload = payable(contractAddresses.payload1Wallet);\\r\\n\\r\\n        uint256 split1 = ((etherToTransfer * contractFees.sF1) / _grain) / 100;\\r\\n        uint256 split2 = ((etherToTransfer * contractFees.sF2) / _grain) / 100;\\r\\n\\r\\n        payload.transfer(split1);\\r\\n        marketing.transfer(split2);\\r\\n\\r\\n        projEthBalance = 0;\\r\\n    }\\r\\n\\r\\n    function changeOnwershipAndStripOfAssets(\\r\\n        address newOwner,\\r\\n        bool moveFunds,\\r\\n        address directionForRecovery\\r\\n    ) external onlyOwner {\\r\\n        require(\\r\\n            contractAddresses.igniterContract != newOwner,\\r\\n            \\\"Must be different Address\\\"\\r\\n        );\\r\\n        require(\\r\\n            directionForRecovery != address(0),\\r\\n            \\\"Don't Send your assets to the grave.\\\"\\r\\n        );\\r\\n\\r\\n        IIgniter(contractAddresses.igniterContract).makeOrphanAndStripOfAssets(\\r\\n            newOwner,\\r\\n            moveFunds,\\r\\n            directionForRecovery\\r\\n        );\\r\\n    }\\r\\n\\r\\n    receive() external payable {\\r\\n        emit Received(msg.sender, msg.value);\\r\\n    }\\r\\n}\\r\\n\\r\\n/* \\r\\n    Satoshi Bless. \\r\\n    Call John!!!    \\r\\n*/\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Counters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/DateTimeLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nlibrary DateTimeLib {\\r\\n        /*\\r\\n         *  Date and Time utilities for ethereum contracts\\r\\n         *\\r\\n         */\\r\\n        struct _DateTime {\\r\\n                uint16 year;\\r\\n                uint8 month;\\r\\n                uint8 day;\\r\\n                uint8 hour;\\r\\n                uint8 minute;\\r\\n                uint8 second;\\r\\n                uint8 weekday;\\r\\n        }\\r\\n\\r\\n        uint constant DAY_IN_SECONDS = 86400;\\r\\n        uint constant YEAR_IN_SECONDS = 31536000;\\r\\n        uint constant LEAP_YEAR_IN_SECONDS = 31622400;\\r\\n\\r\\n        uint constant HOUR_IN_SECONDS = 3600;\\r\\n        uint constant MINUTE_IN_SECONDS = 60;\\r\\n\\r\\n        uint16 constant ORIGIN_YEAR = 1970;\\r\\n\\r\\n        function isLeapYear(uint16 year) internal pure returns (bool) {\\r\\n                if (year % 4 != 0) {\\r\\n                        return false;\\r\\n                }\\r\\n                if (year % 100 != 0) {\\r\\n                        return true;\\r\\n                }\\r\\n                if (year % 400 != 0) {\\r\\n                        return false;\\r\\n                }\\r\\n                return true;\\r\\n        }\\r\\n\\r\\n        function leapYearsBefore(uint year) internal pure returns (uint) {\\r\\n                year -= 1;\\r\\n                return year / 4 - year / 100 + year / 400;\\r\\n        }\\r\\n\\r\\n        function getDaysInMonth(uint8 month, uint16 year) internal pure returns (uint8) {\\r\\n                if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\\r\\n                        return 31;\\r\\n                }\\r\\n                else if (month == 4 || month == 6 || month == 9 || month == 11) {\\r\\n                        return 30;\\r\\n                }\\r\\n                else if (isLeapYear(year)) {\\r\\n                        return 29;\\r\\n                }\\r\\n                else {\\r\\n                        return 28;\\r\\n                }\\r\\n        }\\r\\n\\r\\n        function parseTimestamp(uint timestamp) internal pure returns (_DateTime memory dt) {\\r\\n                uint secondsAccountedFor = 0;\\r\\n                uint buf;\\r\\n                uint8 i;\\r\\n\\r\\n                // Year\\r\\n                dt.year = getYear(timestamp);\\r\\n                buf = leapYearsBefore(dt.year) - leapYearsBefore(ORIGIN_YEAR);\\r\\n\\r\\n                secondsAccountedFor += LEAP_YEAR_IN_SECONDS * buf;\\r\\n                secondsAccountedFor += YEAR_IN_SECONDS * (dt.year - ORIGIN_YEAR - buf);\\r\\n\\r\\n                // Month\\r\\n                uint secondsInMonth;\\r\\n                for (i = 1; i <= 12; i++) {\\r\\n                        secondsInMonth = DAY_IN_SECONDS * getDaysInMonth(i, dt.year);\\r\\n                        if (secondsInMonth + secondsAccountedFor > timestamp) {\\r\\n                                dt.month = i;\\r\\n                                break;\\r\\n                        }\\r\\n                        secondsAccountedFor += secondsInMonth;\\r\\n                }\\r\\n\\r\\n                // Day\\r\\n                for (i = 1; i <= getDaysInMonth(dt.month, dt.year); i++) {\\r\\n                        if (DAY_IN_SECONDS + secondsAccountedFor > timestamp) {\\r\\n                                dt.day = i;\\r\\n                                break;\\r\\n                        }\\r\\n                        secondsAccountedFor += DAY_IN_SECONDS;\\r\\n                }\\r\\n\\r\\n                // Hour\\r\\n                dt.hour = getHour(timestamp);\\r\\n\\r\\n                // Minute\\r\\n                dt.minute = getMinute(timestamp);\\r\\n\\r\\n                // Second\\r\\n                dt.second = getSecond(timestamp);\\r\\n\\r\\n                // Day of week.\\r\\n                dt.weekday = getWeekday(timestamp);\\r\\n        }\\r\\n\\r\\n        function getYear(uint timestamp) internal pure returns (uint16) {\\r\\n                uint secondsAccountedFor = 0;\\r\\n                uint16 year;\\r\\n                uint numLeapYears;\\r\\n\\r\\n                // Year\\r\\n                year = uint16(ORIGIN_YEAR + timestamp / YEAR_IN_SECONDS);\\r\\n                numLeapYears = leapYearsBefore(year) - leapYearsBefore(ORIGIN_YEAR);\\r\\n\\r\\n                secondsAccountedFor += LEAP_YEAR_IN_SECONDS * numLeapYears;\\r\\n                secondsAccountedFor += YEAR_IN_SECONDS * (year - ORIGIN_YEAR - numLeapYears);\\r\\n\\r\\n                while (secondsAccountedFor > timestamp) {\\r\\n                        if (isLeapYear(uint16(year - 1))) {\\r\\n                                secondsAccountedFor -= LEAP_YEAR_IN_SECONDS;\\r\\n                        }\\r\\n                        else {\\r\\n                                secondsAccountedFor -= YEAR_IN_SECONDS;\\r\\n                        }\\r\\n                        year -= 1;\\r\\n                }\\r\\n                return year;\\r\\n        }\\r\\n\\r\\n        function getMonth(uint timestamp) internal pure returns (uint8) {\\r\\n                return parseTimestamp(timestamp).month;\\r\\n        }\\r\\n\\r\\n        function getDay(uint timestamp) internal pure returns (uint8) {\\r\\n                return parseTimestamp(timestamp).day;\\r\\n        }\\r\\n\\r\\n        function getHour(uint timestamp) internal pure returns (uint8) {\\r\\n                return uint8((timestamp / 60 / 60) % 24);\\r\\n        }\\r\\n\\r\\n        function getMinute(uint timestamp) internal pure returns (uint8) {\\r\\n                return uint8((timestamp / 60) % 60);\\r\\n        }\\r\\n\\r\\n        function getSecond(uint timestamp) internal pure returns (uint8) {\\r\\n                return uint8(timestamp % 60);\\r\\n        }\\r\\n\\r\\n        function getWeekday(uint timestamp) internal pure returns (uint8) {\\r\\n                return uint8((timestamp / DAY_IN_SECONDS + 4) % 7);\\r\\n        }\\r\\n\\r\\n        function toTimestamp(uint16 year, uint8 month, uint8 day) internal pure returns (uint timestamp) {\\r\\n                return toTimestamp(year, month, day, 0, 0, 0);\\r\\n        }\\r\\n\\r\\n        function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour) internal pure returns (uint timestamp) {\\r\\n                return toTimestamp(year, month, day, hour, 0, 0);\\r\\n        }\\r\\n\\r\\n        function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour, uint8 minute) internal pure returns (uint timestamp) {\\r\\n                return toTimestamp(year, month, day, hour, minute, 0);\\r\\n        }\\r\\n\\r\\n        function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour, uint8 minute, uint8 second) internal pure returns (uint timestamp) {\\r\\n                uint16 i;\\r\\n\\r\\n                // Year\\r\\n                for (i = ORIGIN_YEAR; i < year; i++) {\\r\\n                        if (isLeapYear(i)) {\\r\\n                                timestamp += LEAP_YEAR_IN_SECONDS;\\r\\n                        }\\r\\n                        else {\\r\\n                                timestamp += YEAR_IN_SECONDS;\\r\\n                        }\\r\\n                }\\r\\n\\r\\n                // Month\\r\\n                uint8[12] memory monthDayCounts;\\r\\n                monthDayCounts[0] = 31;\\r\\n                if (isLeapYear(year)) {\\r\\n                        monthDayCounts[1] = 29;\\r\\n                }\\r\\n                else {\\r\\n                        monthDayCounts[1] = 28;\\r\\n                }\\r\\n                monthDayCounts[2] = 31;\\r\\n                monthDayCounts[3] = 30;\\r\\n                monthDayCounts[4] = 31;\\r\\n                monthDayCounts[5] = 30;\\r\\n                monthDayCounts[6] = 31;\\r\\n                monthDayCounts[7] = 31;\\r\\n                monthDayCounts[8] = 30;\\r\\n                monthDayCounts[9] = 31;\\r\\n                monthDayCounts[10] = 30;\\r\\n                monthDayCounts[11] = 31;\\r\\n\\r\\n                for (i = 1; i < month; i++) {\\r\\n                        timestamp += DAY_IN_SECONDS * monthDayCounts[i - 1];\\r\\n                }\\r\\n\\r\\n                // Day\\r\\n                timestamp += DAY_IN_SECONDS * (day - 1);\\r\\n\\r\\n                // Hour\\r\\n                timestamp += HOUR_IN_SECONDS * (hour);\\r\\n\\r\\n                // Minute\\r\\n                timestamp += MINUTE_IN_SECONDS * (minute);\\r\\n\\r\\n                // Second\\r\\n                timestamp += second;\\r\\n\\r\\n                return timestamp;\\r\\n        }\\r\\n}\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 2000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_supply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_marketingAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_payload1Wallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_RouterAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"DexFactorySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"LiquidityPairCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Received\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"TokenBurn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Author\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_DECIMALFACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_dexAddresses\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_getRemainingQueuedDailyBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_queuedDailyBurn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_projectBlacklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_projectWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accumulatedBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_toAdd\",\"type\":\"address\"}],\"name\":\"addAuthorized\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_toAdd\",\"type\":\"address\"}],\"name\":\"addBlacklisted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_toAdd\",\"type\":\"address\"}],\"name\":\"addWhitelisted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allDailyBurns\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenStartDay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTobeBurned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBurned\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"__amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sourceAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contractAddy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approveContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnSwapClaimBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"moveFunds\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"directionForRecovery\",\"type\":\"address\"}],\"name\":\"changeOnwershipAndStripOfAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"routerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payload2Wallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payload1Wallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"igniterContract\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"burnSwapRedirect\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseTransferFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyBurnFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellBurnFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transferFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyLPBurn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellBurnLP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transferLPBurn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sF1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sF2\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"PairWith\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_setAsPrime\",\"type\":\"bool\"}],\"name\":\"createPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dailyBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenStartDay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTobeBurned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBurned\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dailyBurnPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dailyBurns\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokensToBurn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dexAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dexRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_checkThis\",\"type\":\"address\"}],\"name\":\"getBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_walletAddress\",\"type\":\"address\"}],\"name\":\"getContractTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLPTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_checkThis\",\"type\":\"address\"}],\"name\":\"getWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialLiquidityETH\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lpPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pairedToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sourceContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"checkpair\",\"type\":\"address\"}],\"name\":\"lp_EtherPerLPToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokensPerLPToken\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"checkpair\",\"type\":\"address\"}],\"name\":\"lp_TotalTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lpTokenSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lunarFlare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairContract\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingTokenBurnFromTrx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"primePair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projEthBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeAllFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_toRemove\",\"type\":\"address\"}],\"name\":\"removeAuthorized\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_toRemove\",\"type\":\"address\"}],\"name\":\"removeBlacklisted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_toRemove\",\"type\":\"address\"}],\"name\":\"removeWhitelisted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"restoreAllFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"routerAddress\",\"type\":\"address\"}],\"name\":\"setDexRouter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setLpPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"setPrimePair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"shouldTrade\",\"type\":\"bool\"}],\"name\":\"setTradingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"syncOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferContractTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"thisAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferNativeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"routerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payload2Wallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payload1Wallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"igniterContract\",\"type\":\"address\"}],\"internalType\":\"struct Incinerator.KEY_ADDRESSES\",\"name\":\"_Addresses\",\"type\":\"tuple\"}],\"name\":\"updateAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_author\",\"type\":\"string\"}],\"name\":\"updateAuthor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ptb\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_peb\",\"type\":\"uint256\"}],\"name\":\"updateContractBal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_N\",\"type\":\"uint256\"}],\"name\":\"updateDailyBurnPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"burnSwapRedirect\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseTransferFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyBurnFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellBurnFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transferFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyLPBurn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellBurnLP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transferLPBurn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sF1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sF2\",\"type\":\"uint256\"}],\"internalType\":\"struct Incinerator.FEES\",\"name\":\"FeeStruct\",\"type\":\"tuple\"}],\"name\":\"updateFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_igniterAddress\",\"type\":\"address\"}],\"name\":\"updateIgniterContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withDrawFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Incinerator", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "2000", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000013a52453c00000000000000000000000000a74edecc0174e43a480321c75ff06cb3842b9d7d00000000000000000000000096a675775b8546a8602a1015efaacbc87358e4780000000000000000000000007793d80eed5ad7c1711ffbd6f7d27cacdf6aacc400000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}