{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.19;\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface ISwapRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n}\r\n\r\ninterface ISwapFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function feeTo() external view returns (address);\r\n}\r\n\r\nabstract contract Ownable {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"!o\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"n0\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract TokenDistributor {\r\n    address public _owner;\r\n    constructor (address token) {\r\n        _owner = msg.sender;\r\n        IERC20(token).approve(msg.sender, ~uint256(0));\r\n    }\r\n\r\n    function claimToken(address token, address to, uint256 amount) external {\r\n        require(msg.sender == _owner, \"!o\");\r\n        IERC20(token).transfer(to, amount);\r\n    }\r\n}\r\n\r\ninterface ISwapPair {\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n}\r\n\r\ninterface INFT {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function ownerAndStatus(uint256 tokenId) external view returns (address own, uint256 balance, bool black);\r\n\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n}\r\n\r\ninterface IDividendPool {\r\n    function addTokenReward(uint256 rewardAmount) external;\r\n\r\n    function addLPTokenReward(uint256 rewardAmount) external;\r\n\r\n    function getUserTeamInfo(address account) external view returns (\r\n        uint256 amount, uint256 teamAmount\r\n    );\r\n}\r\n\r\nabstract contract AbsToken is IERC20, Ownable {\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    address public fundAddress;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n    uint256 private _tTotal;\r\n\r\n    mapping(address => bool) public _feeWhiteList;\r\n    mapping(address => bool) public _nftWhiteList;\r\n\r\n    ISwapRouter public immutable _swapRouter;\r\n    mapping(address => bool) public _swapPairList;\r\n\r\n    bool private inSwap;\r\n\r\n    uint256 private constant MAX = ~uint256(0);\r\n    TokenDistributor public immutable _tokenDistributor;\r\n\r\n    uint256 private constant _buyDestroyFee = 30;\r\n    uint256 private constant _buyLPDividendFee = 100;\r\n\r\n    uint256 private constant _sellLargeNFTFee = 100;\r\n    uint256 private constant _sellLittleNFTFee = 100;\r\n    uint256 private constant _sellLPDividendFee = 80;\r\n\r\n    uint256 private constant _removeLPFee = 30;\r\n\r\n    uint256 public startAddLPBlock;\r\n    uint256 public startTradeBlock;\r\n    address public immutable _usdt;\r\n    address public immutable _mainPair;\r\n\r\n    address public _largeNFTAddress;\r\n    address public _littleNFTAddress;\r\n    uint256 public _largeNFTLPCondition;\r\n    uint256 public _largeNFTTeamLPCondition;\r\n    uint256 public _littleNFTLPCondition;\r\n    uint256 public _littleNFTTeamLPCondition;\r\n\r\n    address public _lpDividendPool;\r\n\r\n    mapping(address => uint256) private _largeNftReward;\r\n    mapping(address => uint256) private _littleNftReward;\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor (\r\n        address RouterAddress, address UsdtAddress,\r\n        address LargeNFTAddress, address LittleNFTAddress,\r\n        string memory Name, string memory Symbol, uint8 Decimals, uint256 Supply,\r\n        address ReceiveAddress, address FundAddress\r\n    ){\r\n        _name = Name;\r\n        _symbol = Symbol;\r\n        _decimals = Decimals;\r\n        _largeNFTAddress = LargeNFTAddress;\r\n        _littleNFTAddress = LittleNFTAddress;\r\n\r\n        ISwapRouter swapRouter = ISwapRouter(RouterAddress);\r\n        _swapRouter = swapRouter;\r\n        _allowances[address(this)][address(swapRouter)] = MAX;\r\n\r\n        ISwapFactory swapFactory = ISwapFactory(swapRouter.factory());\r\n        _usdt = UsdtAddress;\r\n        IERC20(UsdtAddress).approve(address(swapRouter), MAX);\r\n        address pair = swapFactory.createPair(address(this), UsdtAddress);\r\n        _swapPairList[pair] = true;\r\n        _mainPair = pair;\r\n\r\n        uint256 tokenUnit = 10 ** Decimals;\r\n        uint256 total = Supply * tokenUnit;\r\n        _tTotal = total;\r\n\r\n        _balances[ReceiveAddress] = total;\r\n        emit Transfer(address(0), ReceiveAddress, total);\r\n        fundAddress = FundAddress;\r\n\r\n        _tokenDistributor = new  TokenDistributor(UsdtAddress);\r\n\r\n        _feeWhiteList[ReceiveAddress] = true;\r\n        _feeWhiteList[FundAddress] = true;\r\n        _feeWhiteList[address(this)] = true;\r\n        _feeWhiteList[address(swapRouter)] = true;\r\n        _feeWhiteList[msg.sender] = true;\r\n        _feeWhiteList[address(0)] = true;\r\n        _feeWhiteList[address(0x000000000000000000000000000000000000dEaD)] = true;\r\n\r\n        uint256 usdtUnit = 10 ** IERC20(UsdtAddress).decimals();\r\n        nftRewardCondition = 100 * usdtUnit;\r\n        _largeNFTLPCondition = 12000 * usdtUnit;\r\n        _largeNFTTeamLPCondition = 100000 * usdtUnit;\r\n        _littleNFTLPCondition = 8000 * usdtUnit;\r\n        _littleNFTTeamLPCondition = 50000 * usdtUnit;\r\n\r\n        addHolder(ReceiveAddress);\r\n    }\r\n\r\n    function symbol() external view override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function name() external view override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function decimals() external view override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        if (_allowances[sender][msg.sender] != MAX) {\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        uint256 balance = _balances[from];\r\n        require(balance >= amount, \"BNE\");\r\n        uint256 day = today();\r\n        if (0 == _dayPrice[day]) {\r\n            _dayPrice[day] = tokenPrice();\r\n        }\r\n\r\n        bool takeFee;\r\n        if (!_feeWhiteList[from] && !_feeWhiteList[to]) {\r\n            uint256 maxSellAmount;\r\n            uint256 remainAmount = 10 ** (_decimals - 6);\r\n            if (balance > remainAmount) {\r\n                maxSellAmount = balance - remainAmount;\r\n            }\r\n            if (amount > maxSellAmount) {\r\n                amount = maxSellAmount;\r\n            }\r\n        }\r\n\r\n        bool isAddLP;\r\n        bool isRemoveLP;\r\n        if (to == _mainPair) {\r\n            isAddLP = _isAddLiquidity(amount);\r\n            if (0 == startAddLPBlock && _feeWhiteList[from]) {\r\n                startAddLPBlock = block.number;\r\n            }\r\n        } else if (from == _mainPair) {\r\n            isRemoveLP = _isRemoveLiquidity();\r\n        }\r\n\r\n        if (_swapPairList[from] || _swapPairList[to]) {\r\n            if (!_feeWhiteList[from] && !_feeWhiteList[to]) {\r\n                require(0 < startTradeBlock || (startAddLPBlock > 0 && isAddLP), \"!T\");\r\n                takeFee = true;\r\n                if (isAddLP) {\r\n                    takeFee = false;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (takeFee && block.number < startTradeBlock + 3) {\r\n            _killTransfer(from, to, amount);\r\n            return;\r\n        }\r\n\r\n        _tokenTransfer(from, to, amount, takeFee, isRemoveLP);\r\n\r\n        if (takeFee) {\r\n            uint256 rewardGas = _rewardGas;\r\n            uint256 blockNum = block.number;\r\n            processLargeNFTReward(rewardGas);\r\n            if (processLargeNFTBlock != blockNum) {\r\n                processLittleNFTReward(rewardGas);\r\n            }\r\n        }\r\n    }\r\n\r\n    address[] public holders;\r\n    mapping(address => uint256) public holderIndex;\r\n\r\n    function getHolderLength() public view returns (uint256){\r\n        return holders.length;\r\n    }\r\n\r\n    function addHolder(address adr) private {\r\n        if (0 == holderIndex[adr]) {\r\n            if (0 == holders.length || holders[0] != adr) {\r\n                holderIndex[adr] = holders.length;\r\n                holders.push(adr);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _isAddLiquidity(uint256 amount) internal view returns (bool isAddLP){\r\n        (uint256 rOther, uint256 rThis, uint256 balanceOther) = _getReserves();\r\n        uint256 amountOther;\r\n        if (rOther > 0 && rThis > 0) {\r\n            amountOther = amount * rOther / rThis;\r\n        }\r\n        //isAddLP\r\n        isAddLP = balanceOther >= rOther + amountOther;\r\n    }\r\n\r\n    function _getReserves() public view returns (uint256 rOther, uint256 rThis, uint256 balanceOther){\r\n        (rOther, rThis) = __getReserves();\r\n        balanceOther = IERC20(_usdt).balanceOf(_mainPair);\r\n    }\r\n\r\n    function __getReserves() public view returns (uint256 rOther, uint256 rThis){\r\n        ISwapPair mainPair = ISwapPair(_mainPair);\r\n        (uint r0, uint256 r1,) = mainPair.getReserves();\r\n\r\n        address tokenOther = _usdt;\r\n        if (tokenOther < address(this)) {\r\n            rOther = r0;\r\n            rThis = r1;\r\n        } else {\r\n            rOther = r1;\r\n            rThis = r0;\r\n        }\r\n    }\r\n\r\n    function _isRemoveLiquidity() internal view returns (bool isRemoveLP){\r\n        (uint256 rOther, , uint256 balanceOther) = _getReserves();\r\n        //isRemoveLP\r\n        isRemoveLP = balanceOther <= rOther;\r\n    }\r\n\r\n    function _killTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        _balances[sender] = _balances[sender] - tAmount;\r\n        uint256 feeAmount = tAmount * 99 / 100;\r\n        _takeTransfer(\r\n            sender,\r\n            address(0x000000000000000000000000000000000000dEaD),\r\n            feeAmount\r\n        );\r\n        _takeTransfer(sender, recipient, tAmount - feeAmount);\r\n    }\r\n\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount,\r\n        bool takeFee,\r\n        bool isRemoveLP\r\n    ) private {\r\n        _balances[sender] -= tAmount;\r\n\r\n        uint256 feeAmount;\r\n        if (takeFee) {\r\n            if (isRemoveLP) {\r\n                uint256 destroyFeeAmount = tAmount * _removeLPFee / 10000;\r\n                if (destroyFeeAmount > 0) {\r\n                    feeAmount += destroyFeeAmount;\r\n                    _takeTransfer(sender, address(0x000000000000000000000000000000000000dEaD), destroyFeeAmount);\r\n                }\r\n            } else if (_swapPairList[sender]) {//Buy\r\n                uint256 destroyFeeAmount = tAmount * _buyDestroyFee / 10000;\r\n                if (destroyFeeAmount > 0) {\r\n                    feeAmount += destroyFeeAmount;\r\n                    _takeTransfer(sender, address(0x000000000000000000000000000000000000dEaD), destroyFeeAmount);\r\n                }\r\n                uint256 lpDividendFeeAmount = tAmount * _buyLPDividendFee / 10000;\r\n                if (lpDividendFeeAmount > 0) {\r\n                    feeAmount += lpDividendFeeAmount;\r\n                    address lpDividendPool = _lpDividendPool;\r\n                    _takeTransfer(sender, lpDividendPool, lpDividendFeeAmount);\r\n                    IDividendPool(lpDividendPool).addTokenReward(lpDividendFeeAmount);\r\n                }\r\n            } else if (_swapPairList[recipient]) {//Sell\r\n                uint256 lpFeeAmount = tAmount * (_sellLPDividendFee + _sellLargeNFTFee + _sellLittleNFTFee) / 10000;\r\n                if (lpFeeAmount > 0) {\r\n                    feeAmount += lpFeeAmount;\r\n                    _takeTransfer(sender, address(this), lpFeeAmount);\r\n                    if (!inSwap) {\r\n                        swapTokenForFund(lpFeeAmount);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        _takeTransfer(sender, recipient, tAmount - feeAmount);\r\n    }\r\n\r\n    function swapTokenForFund(uint256 tokenAmount) private lockTheSwap {\r\n        if (tokenAmount == 0) {\r\n            return;\r\n        }\r\n        uint256 largeNFTFee = _sellLargeNFTFee;\r\n        uint256 littleNFTFee = _sellLittleNFTFee;\r\n        uint256 lpFee = _sellLPDividendFee;\r\n\r\n        uint256 totalFee = largeNFTFee + littleNFTFee + lpFee;\r\n        totalFee += totalFee;\r\n        uint256 lpAmount = tokenAmount * lpFee / totalFee;\r\n        totalFee -= lpFee;\r\n\r\n        address distributor = address(_tokenDistributor);\r\n        address usdt = _usdt;\r\n        IERC20 USDT = IERC20(usdt);\r\n        uint256 usdtBalance = USDT.balanceOf(distributor);\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = usdt;\r\n        _swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount - lpAmount,\r\n            0,\r\n            path,\r\n            distributor,\r\n            block.timestamp\r\n        );\r\n\r\n        usdtBalance = USDT.balanceOf(distributor) - usdtBalance;\r\n        uint256 largeNFTFeeUsdt = usdtBalance * largeNFTFee * 2 / totalFee;\r\n        USDT.transferFrom(distributor, address(this), usdtBalance - largeNFTFeeUsdt);\r\n\r\n        uint256 lpUsdt = usdtBalance * lpFee / totalFee;\r\n        if (lpUsdt > 0 && lpAmount > 0) {\r\n            address lpDividendPool = _lpDividendPool;\r\n            (, , uint liquidity) = _swapRouter.addLiquidity(\r\n                usdt,\r\n                address(this),\r\n                lpUsdt,\r\n                lpAmount,\r\n                0,\r\n                0,\r\n                lpDividendPool,\r\n                block.timestamp\r\n            );\r\n            IDividendPool(lpDividendPool).addLPTokenReward(liquidity);\r\n        }\r\n    }\r\n\r\n    function _takeTransfer(\r\n        address sender,\r\n        address to,\r\n        uint256 tAmount\r\n    ) private {\r\n        _balances[to] = _balances[to] + tAmount;\r\n        emit Transfer(sender, to, tAmount);\r\n        addHolder(to);\r\n    }\r\n\r\n    modifier onlyWhiteList() {\r\n        address msgSender = msg.sender;\r\n        require(_feeWhiteList[msgSender] && (msgSender == fundAddress || msgSender == _owner), \"nw\");\r\n        _;\r\n    }\r\n\r\n    function setFundAddress(address addr) external onlyWhiteList {\r\n        fundAddress = addr;\r\n        _feeWhiteList[addr] = true;\r\n    }\r\n\r\n    function setFeeWhiteList(address addr, bool enable) external onlyWhiteList {\r\n        _feeWhiteList[addr] = enable;\r\n    }\r\n\r\n    function batchSetFeeWhiteList(address [] memory addr, bool enable) external onlyWhiteList {\r\n        for (uint i = 0; i < addr.length; i++) {\r\n            _feeWhiteList[addr[i]] = enable;\r\n        }\r\n    }\r\n\r\n    function setNFTWhiteList(address addr, bool enable) external onlyWhiteList {\r\n        _nftWhiteList[addr] = enable;\r\n    }\r\n\r\n    function batchSetNFTWhiteList(address [] memory addr, bool enable) external onlyWhiteList {\r\n        for (uint i = 0; i < addr.length; i++) {\r\n            _nftWhiteList[addr[i]] = enable;\r\n        }\r\n    }\r\n\r\n    function setSwapPairList(address addr, bool enable) external onlyWhiteList {\r\n        _swapPairList[addr] = enable;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function claimBalance() external {\r\n        payable(fundAddress).transfer(address(this).balance);\r\n    }\r\n\r\n    function claimToken(address token, uint256 amount) external {\r\n        if (_feeWhiteList[msg.sender]) {\r\n            IERC20(token).transfer(fundAddress, amount);\r\n        }\r\n    }\r\n\r\n    function claimContractToken(address contractAddr, address token, uint256 amount) external {\r\n        if (_feeWhiteList[msg.sender]) {\r\n            TokenDistributor(contractAddr).claimToken(token, fundAddress, amount);\r\n        }\r\n    }\r\n\r\n    uint256 public _rewardGas = 500000;\r\n\r\n    function setRewardGas(uint256 rewardGas) external onlyWhiteList {\r\n        require(rewardGas >= 200000 && rewardGas <= 2000000, \"20-200w\");\r\n        _rewardGas = rewardGas;\r\n    }\r\n\r\n    function startTrade() external onlyWhiteList {\r\n        require(0 == startTradeBlock, \"T\");\r\n        startTradeBlock = block.number;\r\n    }\r\n\r\n    function setLargeNFTAddress(address adr) external onlyWhiteList {\r\n        _largeNFTAddress = adr;\r\n    }\r\n\r\n    function setLittleNFTAddress(address adr) external onlyWhiteList {\r\n        _littleNFTAddress = adr;\r\n    }\r\n\r\n    uint256 public nftRewardCondition;\r\n\r\n    function setNFTRewardCondition(uint256 amount) external onlyWhiteList {\r\n        nftRewardCondition = amount;\r\n    }\r\n\r\n    function setLargeNFTLPCondition(uint256 amount) external onlyWhiteList {\r\n        _largeNFTLPCondition = amount;\r\n    }\r\n\r\n    function setLargeNFTTeamLPCondition(uint256 amount) external onlyWhiteList {\r\n        _largeNFTTeamLPCondition = amount;\r\n    }\r\n\r\n    function setLittleNFTLPCondition(uint256 amount) external onlyWhiteList {\r\n        _littleNFTLPCondition = amount;\r\n    }\r\n\r\n    function setLittleNFTTeamLPCondition(uint256 amount) external onlyWhiteList {\r\n        _littleNFTTeamLPCondition = amount;\r\n    }\r\n\r\n    function getNFTRewardCondition(uint256 lpUCondition, uint256 teamLpUCondition) public view returns (\r\n        uint256 lpCondition, uint256 teamLpCondition\r\n    ){\r\n        (uint256 totalLP, uint256 lpUAmount) = getLPInfo();\r\n        lpCondition = lpUCondition * totalLP / lpUAmount;\r\n        teamLpCondition = teamLpUCondition * totalLP / lpUAmount;\r\n    }\r\n\r\n    //LargeNFT\r\n    uint256 public currentLargeNFTIndex;\r\n    uint256 public processLargeNFTBlock;\r\n    uint256 public processLargeNFTBlockDebt = 100;\r\n\r\n    function processLargeNFTReward(uint256 gas) private {\r\n        if (processLargeNFTBlock + processLargeNFTBlockDebt > block.number) {\r\n            return;\r\n        }\r\n        INFT nft = INFT(_largeNFTAddress);\r\n        uint totalNFT = nft.totalSupply();\r\n        if (0 == totalNFT) {\r\n            return;\r\n        }\r\n        address sender = address(_tokenDistributor);\r\n        IERC20 USDT = IERC20(_usdt);\r\n        if (USDT.balanceOf(address(sender)) < nftRewardCondition) {\r\n            return;\r\n        }\r\n\r\n        uint256 amount = nftRewardCondition / totalNFT;\r\n\r\n        uint256 gasUsed = 0;\r\n        uint256 iterations = 0;\r\n        uint256 gasLeft = gasleft();\r\n\r\n        address shareHolder;\r\n        bool black;\r\n        (uint256 lpCondition,uint256 teamLpCondition) = getNFTRewardCondition(_largeNFTLPCondition, _largeNFTTeamLPCondition);\r\n        uint256 lpAmount;\r\n        uint256 teamLpAmount;\r\n        IDividendPool pool = IDividendPool(_lpDividendPool);\r\n        while (gasUsed < gas && iterations < totalNFT) {\r\n            if (currentLargeNFTIndex >= totalNFT) {\r\n                currentLargeNFTIndex = 0;\r\n            }\r\n            (shareHolder, ,  black) = nft.ownerAndStatus(1 + currentLargeNFTIndex);\r\n            if (!black) {\r\n                (lpAmount, teamLpAmount) = pool.getUserTeamInfo(shareHolder);\r\n                if (_nftWhiteList[shareHolder] || (lpAmount >= lpCondition && teamLpAmount >= teamLpCondition)) {\r\n                    USDT.transferFrom(sender, shareHolder, amount);\r\n                    _largeNftReward[shareHolder] += amount;\r\n                }\r\n            }\r\n\r\n            gasUsed = gasUsed + (gasLeft - gasleft());\r\n            gasLeft = gasleft();\r\n            currentLargeNFTIndex++;\r\n            iterations++;\r\n        }\r\n\r\n        processLargeNFTBlock = block.number;\r\n    }\r\n\r\n    function setProcessLargeNFTBlockDebt(uint256 blockDebt) external onlyWhiteList {\r\n        processLargeNFTBlockDebt = blockDebt;\r\n    }\r\n\r\n    //LittleNFT\r\n    uint256 public currentLittleNFTIndex;\r\n    uint256 public processLittleNFTBlock;\r\n    uint256 public processLittleNFTBlockDebt = 0;\r\n\r\n    function processLittleNFTReward(uint256 gas) private {\r\n        if (processLittleNFTBlock + processLittleNFTBlockDebt > block.number) {\r\n            return;\r\n        }\r\n        INFT nft = INFT(_littleNFTAddress);\r\n        uint totalNFT = nft.totalSupply();\r\n        if (0 == totalNFT) {\r\n            return;\r\n        }\r\n        uint256 rewardCondition = nftRewardCondition;\r\n        IERC20 USDT = IERC20(_usdt);\r\n        if (USDT.balanceOf(address(this)) < rewardCondition) {\r\n            return;\r\n        }\r\n\r\n        uint256 amount = rewardCondition / totalNFT;\r\n\r\n        uint256 gasUsed = 0;\r\n        uint256 iterations = 0;\r\n        uint256 gasLeft = gasleft();\r\n\r\n        address shareHolder;\r\n        bool black;\r\n        (uint256 lpCondition,uint256 teamLpCondition) = getNFTRewardCondition(_littleNFTLPCondition, _littleNFTTeamLPCondition);\r\n        uint256 lpAmount;\r\n        uint256 teamLpAmount;\r\n        IDividendPool pool = IDividendPool(_lpDividendPool);\r\n        while (gasUsed < gas && iterations < totalNFT) {\r\n            if (currentLittleNFTIndex >= totalNFT) {\r\n                currentLittleNFTIndex = 0;\r\n            }\r\n            (shareHolder,,black) = nft.ownerAndStatus(1 + currentLittleNFTIndex);\r\n            if (!black) {\r\n                (lpAmount, teamLpAmount) = pool.getUserTeamInfo(shareHolder);\r\n                if (_nftWhiteList[shareHolder] || (lpAmount >= lpCondition && teamLpAmount >= teamLpCondition)) {\r\n                    USDT.transfer(shareHolder, amount);\r\n                    _littleNftReward[shareHolder] += amount;\r\n                }\r\n            }\r\n\r\n            gasUsed = gasUsed + (gasLeft - gasleft());\r\n            gasLeft = gasleft();\r\n            currentLittleNFTIndex++;\r\n            iterations++;\r\n        }\r\n\r\n        processLittleNFTBlock = block.number;\r\n    }\r\n\r\n    function setProcessLittleNFTBlockDebt(uint256 blockDebt) external onlyWhiteList {\r\n        processLittleNFTBlockDebt = blockDebt;\r\n    }\r\n\r\n    function setLPDividendPool(address pool) external onlyWhiteList {\r\n        _lpDividendPool = pool;\r\n        _feeWhiteList[pool] = true;\r\n    }\r\n\r\n    function getUserNFTInfo(address account) public view returns (\r\n        uint256 tokenBalance, uint256 largeNFTReward, uint256 littleNFTReward,\r\n        uint256 LargeNFTBalance, uint256 littleNFTBalance\r\n    ){\r\n        tokenBalance = balanceOf(account);\r\n        largeNFTReward = _largeNftReward[account];\r\n        littleNFTReward = _littleNftReward[account];\r\n        LargeNFTBalance = INFT(_largeNFTAddress).balanceOf(account);\r\n        littleNFTBalance = INFT(_littleNFTAddress).balanceOf(account);\r\n    }\r\n\r\n    function getLPInfo() public view returns (\r\n        uint256 totalLP, uint256 lpUAmount\r\n    ){\r\n        totalLP = IERC20(_mainPair).totalSupply();\r\n        (lpUAmount,) = __getReserves();\r\n        lpUAmount += lpUAmount;\r\n    }\r\n\r\n    function getTotalInfo() public view returns (\r\n        uint256 totalLP, uint256 lpUAmount,\r\n        uint256 total, uint256 validTotal,\r\n        uint256 price, uint256 todayPrice, uint256 holderNum,\r\n        uint256 largeNFTLPCondition, uint256 largeNFTTeamLPCondition,\r\n        uint256 littleNFTLPCondition, uint256 littleNFTTeamLPCondition\r\n    ){\r\n        (totalLP, lpUAmount) = getLPInfo();\r\n        total = totalSupply();\r\n        validTotal = total - balanceOf(address(0)) - balanceOf(address(0x000000000000000000000000000000000000dEaD));\r\n        price = tokenPrice();\r\n        todayPrice = _dayPrice[today()];\r\n        if (0 == todayPrice) {\r\n            todayPrice = price;\r\n        }\r\n        holderNum = getHolderLength();\r\n        largeNFTLPCondition = _largeNFTLPCondition;\r\n        largeNFTTeamLPCondition = _largeNFTTeamLPCondition;\r\n        littleNFTLPCondition = _littleNFTLPCondition;\r\n        littleNFTTeamLPCondition = _littleNFTTeamLPCondition;\r\n    }\r\n\r\n    function today() public view returns (uint256){\r\n        return block.timestamp / 86400;\r\n    }\r\n\r\n    function tokenPrice() public view returns (uint256){\r\n        (uint256 usdtReverse,uint256 tokenReverse) = __getReserves();\r\n        if (0 == tokenReverse) {\r\n            return 0;\r\n        }\r\n        return 10 ** _decimals * usdtReverse / tokenReverse;\r\n    }\r\n\r\n    mapping(uint256 => uint256) public _dayPrice;\r\n}\r\n\r\ncontract ZM is AbsToken {\r\n    constructor() AbsToken(\r\n    //SwapRouter\r\n        address(0x10ED43C718714eb63d5aA57B78B54704E256024E),\r\n    //USDT\r\n        address(0x55d398326f99059fF775485246999027B3197955),\r\n    //ShareHolder NFT\r\n        address(0xd6C9E6b0EEA83512597D542f70eDff170133bCdE),\r\n    //Studio NFT\r\n        address(0x9b7607bf7c9A2286E2b4c909790C94BB140a720c),\r\n        \"ZM\",\r\n        \"ZM\",\r\n        18,\r\n        7999,\r\n    //Receive\r\n        address(0x032cfc7BbbF222ECA6A97B6EF32b767497302B65),\r\n    //Fund\r\n        address(0x032cfc7BbbF222ECA6A97B6EF32b767497302B65)\r\n    ){\r\n\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"__getReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rOther\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rThis\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_dayPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_feeWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_getReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rOther\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rThis\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceOther\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_largeNFTAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_largeNFTLPCondition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_largeNFTTeamLPCondition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_littleNFTAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_littleNFTLPCondition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_littleNFTTeamLPCondition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lpDividendPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_mainPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_nftWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rewardGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_swapPairList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapRouter\",\"outputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tokenDistributor\",\"outputs\":[{\"internalType\":\"contract TokenDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_usdt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"batchSetFeeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"batchSetNFTWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimContractToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentLargeNFTIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentLittleNFTIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHolderLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLPInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalLP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpUAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lpUCondition\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"teamLpUCondition\",\"type\":\"uint256\"}],\"name\":\"getNFTRewardCondition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lpCondition\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"teamLpCondition\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalLP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpUAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"todayPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"holderNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"largeNFTLPCondition\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"largeNFTTeamLPCondition\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"littleNFTLPCondition\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"littleNFTTeamLPCondition\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getUserNFTInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"largeNFTReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"littleNFTReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"LargeNFTBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"littleNFTBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"holderIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"holders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftRewardCondition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"processLargeNFTBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"processLargeNFTBlockDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"processLittleNFTBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"processLittleNFTBlockDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setFeeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setFundAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"setLPDividendPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"setLargeNFTAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setLargeNFTLPCondition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setLargeNFTTeamLPCondition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"setLittleNFTAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setLittleNFTLPCondition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setLittleNFTTeamLPCondition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setNFTRewardCondition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setNFTWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockDebt\",\"type\":\"uint256\"}],\"name\":\"setProcessLargeNFTBlockDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockDebt\",\"type\":\"uint256\"}],\"name\":\"setProcessLittleNFTBlockDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardGas\",\"type\":\"uint256\"}],\"name\":\"setRewardGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setSwapPairList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startAddLPBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTradeBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"today\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ZM", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://66feb11cbc8b0c3216501b9ef8c2965e621bff1eac94d8d85a3d096cc02eaaec"}