{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/BlokToken.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.19;\\n\\n// ----------------------------------------------------------------------------\\n// EIP-20: ERC-20 Token Standard\\n// https://eips.ethereum.org/EIPS/eip-20\\n// -----------------------------------------\\n\\ninterface ERC20Interface {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(\\n        address _tokenOwner\\n    ) external view returns (uint256 balance);\\n\\n    function transfer(\\n        address _to,\\n        uint256 _tokens\\n    ) external returns (bool success);\\n\\n    function allowance(\\n        address _tokenOwner,\\n        address _spender\\n    ) external view returns (uint256 remaining);\\n\\n    function approve(\\n        address _spender,\\n        uint256 _tokens\\n    ) external returns (bool success);\\n\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _tokens\\n    ) external returns (bool success);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 tokens);\\n    event Approval(\\n        address indexed tokenOwner,\\n        address indexed spender,\\n        uint256 tokens\\n    );\\n}\\n\\ncontract BlokToken is ERC20Interface {\\n    string public name;\\n    string public symbol;\\n    uint256 public decimals = 18;\\n    uint256 public override totalSupply;\\n    address public admin;\\n    address[] holders;\\n\\n    mapping(address => uint256) public balances;\\n    mapping(address => mapping(address => uint256)) allowed;\\n\\n    constructor(\\n        uint256 initialSupply,\\n        string memory tokenName,\\n        string memory tokenSymbol\\n    ) {\\n        totalSupply = initialSupply;\\n        admin = msg.sender;\\n        balances[msg.sender] = totalSupply;\\n        holders.push(msg.sender);\\n        name = tokenName;\\n        symbol = tokenSymbol;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(msg.sender == admin, \\\"only admin can execute this\\\");\\n        _;\\n    }\\n\\n    function balanceOf(\\n        address _tokenOwner\\n    ) public view override returns (uint256 balance) {\\n        return balances[_tokenOwner];\\n    }\\n\\n    function _transfer(address _from, address _to, uint256 _tokens) internal {\\n        balances[_from] -= _tokens;\\n        balances[_to] += _tokens;\\n\\n        if (balances[_from] == 0) {\\n            for (uint256 i = 0; i < holders.length; i++) {\\n                if (holders[i] == _from) {\\n                    holders[i] = holders[holders.length - 1];\\n                    holders.pop();\\n                }\\n            }\\n        }\\n\\n        bool isHolderExist;\\n        for (uint256 i = 0; i < holders.length; i++) {\\n            if (holders[i] == _to) {\\n                isHolderExist = true;\\n            }\\n        }\\n        if (!isHolderExist) {\\n            holders.push(_to);\\n        }\\n        emit Transfer(_from, _to, _tokens);\\n    }\\n\\n    function transfer(\\n        address _to,\\n        uint256 _tokens\\n    ) public override returns (bool success) {\\n        require(balances[msg.sender] >= _tokens, \\\"insufficient balance\\\");\\n        _transfer(msg.sender, _to, _tokens);\\n        return true;\\n    }\\n\\n    function allowance(\\n        address _tokenOwner,\\n        address _spender\\n    ) public view override returns (uint256) {\\n        return allowed[_tokenOwner][_spender];\\n    }\\n\\n    function approve(\\n        address _spender,\\n        uint256 _tokens\\n    ) public override returns (bool success) {\\n        require(balances[msg.sender] >= _tokens);\\n        require(_tokens > 0);\\n\\n        allowed[msg.sender][_spender] = _tokens;\\n\\n        emit Approval(msg.sender, _spender, _tokens);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _tokens\\n    ) public override returns (bool success) {\\n        require(allowed[_from][msg.sender] >= _tokens, \\\"not allowed\\\");\\n        require(balances[_from] >= _tokens, \\\"insufficient balance\\\");\\n\\n        allowed[_from][msg.sender] -= _tokens;\\n        _transfer(_from, _to, _tokens);\\n\\n        emit Transfer(_from, _to, _tokens);\\n\\n        return true;\\n    }\\n\\n    function getHolders() public view returns (address[] memory) {\\n        return holders;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Governance.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./BlokToken.sol\\\";\\n\\ncontract Governance is Context, Ownable {\\n    using SafeMath for uint256;\\n\\n    address admin; // admin address\\n    address token; // token address\\n\\n    IERC20 stableCoin; // stable Coin address for dividends\\n\\n    mapping(address => uint256) public claimableStable; // Claimable StableCoin for Specific User\\n    mapping(address => uint256) public totalClaimedDiv; // Total Claimed Dividend Stable Coin by Specific User\\n    uint256 public totalDividend; // Total Dividend Sent to This Property\\n\\n    constructor(address _token, address _stableCoin) {\\n        admin = _msgSender();\\n        token = _token;\\n        stableCoin = IERC20(_stableCoin);\\n    }\\n\\n    /**\\n     * @dev onlyAdmin Modifier only Admin will allow to perform action\\n     */\\n    modifier onlyAdmin(address user) {\\n        require(user == admin, \\\"Only Admin Allowed\\\");\\n        _;\\n    }\\n    /**\\n     * @dev List of All event which performing in Contract\\n     */\\n    event SendDividends(uint256 dividend);\\n    event SendDividend(address user, uint256 dividend);\\n    event SetStableCoin(address stableCoin, address admin);\\n    event ClaimDividend(address claimer, uint256 claimingTokenAmount);\\n\\n    /**\\n     * @notice Only Admin is possible to call\\n     * @param _dividend the total Stable Coins from Admin\\n     * @dev Send Stable Coins to Contract and add claimable dividends for all users\\n     */\\n    function sendDividends(uint256 _dividend) external onlyAdmin(_msgSender()) {\\n        require(\\n            stableCoin.allowance(_msgSender(), address(this)) >= _dividend,\\n            \\\"Not allowed to send dividends\\\"\\n        );\\n        stableCoin.transferFrom(_msgSender(), address(this), _dividend);\\n        totalDividend = totalDividend.add(_dividend);\\n        uint256 totalSupply = BlokToken(token).totalSupply();\\n        for (uint256 i = 0; i < BlokToken(token).getHolders().length; i++) {\\n            uint256 balance = BlokToken(token).balanceOf(\\n                BlokToken(token).getHolders()[i]\\n            );\\n            claimableStable[BlokToken(token).getHolders()[i]] = claimableStable[\\n                BlokToken(token).getHolders()[i]\\n            ].add(_dividend.mul(balance).div(totalSupply));\\n        }\\n        emit SendDividends(_dividend);\\n    }\\n\\n    /**\\n     * @notice Only Admin is possible to call\\n     * @param _user the token holder to receive dividend.\\n     * @param _dividend the dividend for a specific user.\\n     * @dev Send a dividend for a specific user.\\n     */\\n    function sendDividend(\\n        address _user,\\n        uint256 _dividend\\n    ) external onlyAdmin(_msgSender()) {\\n        require(\\n            stableCoin.allowance(_msgSender(), address(this)) >= _dividend,\\n            \\\"Not allowed to send dividend\\\"\\n        );\\n        stableCoin.transferFrom(_msgSender(), address(this), _dividend);\\n        totalDividend = totalDividend.add(_dividend);\\n        claimableStable[_user] = claimableStable[_user].add(_dividend);\\n        emit SendDividend(_user, _dividend);\\n    }\\n\\n    /**\\n     * @param _users the addresses to compare\\n     * @param _user the address to compare\\n     * @dev Compare a specfic address is belong to address array\\n     */\\n    function _isBelongTo(\\n        address[] memory _users,\\n        address _user\\n    ) internal pure returns (bool) {\\n        for (uint256 i = 0; i < _users.length; i++) {\\n            if (_users[i] == _user) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @param _stableCoin the stable coin address\\n     * @dev Change Stable Coin that accepting for Dividends\\n     */\\n    function setStableCoin(\\n        address _stableCoin\\n    ) external onlyAdmin(_msgSender()) {\\n        stableCoin = IERC20(_stableCoin);\\n        emit SetStableCoin(_stableCoin, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Claim Dividend by Investor/BlokToken Owners\\n     */\\n    function claimDividend() external {\\n        require(\\n            claimableStable[_msgSender()] > 0,\\n            \\\"You do not have any Dividend\\\"\\n        );\\n        uint256 dividend = claimableStable[_msgSender()];\\n        totalClaimedDiv[_msgSender()] = totalClaimedDiv[_msgSender()].add(\\n            dividend\\n        );\\n        claimableStable[_msgSender()] = 0;\\n        stableCoin.transfer(_msgSender(), dividend);\\n        emit ClaimDividend(_msgSender(), dividend);\\n    }\\n\\n    /**\\n     * @dev  Return claimable Stable Coins for each holders\\n     */\\n    function getClaimableStable() external view returns (uint256) {\\n        return claimableStable[_msgSender()];\\n    }\\n\\n    /**\\n     * @dev Return total claimed dividend for each holders\\n     */\\n    function getTotalClaimedDiv() external view returns (uint256) {\\n        return totalClaimedDiv[_msgSender()];\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stableCoin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimingTokenAmount\",\"type\":\"uint256\"}],\"name\":\"ClaimDividend\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dividend\",\"type\":\"uint256\"}],\"name\":\"SendDividend\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dividend\",\"type\":\"uint256\"}],\"name\":\"SendDividends\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stableCoin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"SetStableCoin\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claimDividend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimableStable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getClaimableStable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalClaimedDiv\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_dividend\",\"type\":\"uint256\"}],\"name\":\"sendDividend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dividend\",\"type\":\"uint256\"}],\"name\":\"sendDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stableCoin\",\"type\":\"address\"}],\"name\":\"setStableCoin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalClaimedDiv\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDividend\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Governance", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "100", "ConstructorArguments": "000000000000000000000000a73a907e2d3a82d4ebeb834a2ec7274d34407cb500000000000000000000000055d398326f99059ff775485246999027b3197955", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}