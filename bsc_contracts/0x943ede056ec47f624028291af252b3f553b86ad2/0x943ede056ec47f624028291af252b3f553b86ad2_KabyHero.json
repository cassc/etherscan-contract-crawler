{"SourceCode": "// File: contracts/interfaces/ISummonStakingPool.sol\r\n\r\n//SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface ISummonStakingPool {\r\n    event StakedForBuy(address indexed account, uint amount, uint lockedTime);\r\n    event UnstakedFromBuy(address indexed account, uint amount);\r\n    event ClaimedFromBuy(address indexed account, uint reward);\r\n\r\n    struct StakingForBuyData {\r\n        uint balance;\r\n        uint APY;\r\n        uint lastUpdatedTime;\r\n        uint lockedTime;\r\n        uint reward;\r\n    }\r\n\r\n    /**\r\n     * @notice Stake KABY token for buy hero\r\n     */\r\n    function stakeForBuyHero(uint amount) external;\r\n\r\n    /**\r\n     * @notice Unstake KABY token from a hero.\r\n     */\r\n    function unstake() external;\r\n\r\n    /**\r\n     * @notice Gets status of upgrade star and KABY earned by a hero so far.\r\n     */\r\n    function earned(address account) external view returns (uint tokenEarned);\r\n\r\n    /**\r\n     * @notice Gets total KABY staked of a Hero.\r\n     */\r\n    function balanceOf(address account) external view returns (uint);\r\n    \r\n    /**\r\n     * @notice Gets max amount of hero can buy depend on amount of kabyToken staked\r\n     */\r\n    function getMaxAmountSummon(address account) external view returns (uint);\r\n\r\n    /**\r\n     * @notice Gets rewards depend on amount of kabyToken staked\r\n     */\r\n    function getStakingReward(address account) external view returns (uint);\r\n}\r\n// File: contracts/interfaces/IRandomNumberGenerator.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IRandomNumberGenerator {\r\n    /**\r\n     *  Request random for hero star\r\n     */\r\n    function requestRandomNumberForStar(uint heroId) external returns (bytes32);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n// File: contracts/utils/PermissionGroup.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\ncontract PermissionGroup is Ownable {\r\n    // List of authorized address to perform some restricted actions\r\n    mapping(address => bool) public operators;\r\n\r\n    modifier onlyOperator() {\r\n        require(operators[msg.sender], \"PermissionGroup: not operator\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Adds an address as operator.\r\n     */\r\n    function addOperator(address operator) external onlyOwner {\r\n        operators[operator] = true;\r\n    }\r\n\r\n    /**\r\n    * @notice Removes an address as operator.\r\n    */\r\n    function removeOperator(address operator) external onlyOwner {\r\n        operators[operator] = false;\r\n    }\r\n}\r\n// File: contracts/utils/AcceptedToken.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract AcceptedToken is PermissionGroup {\r\n    using SafeERC20 for IERC20;\r\n\r\n    // Token to be used in the ecosystem.\r\n    IERC20 public acceptedToken;\r\n\r\n    constructor(IERC20 tokenAddress) {\r\n        acceptedToken = tokenAddress;\r\n    }\r\n\r\n    modifier collectTokenAsFee(uint amount, address destAddr) {\r\n        require(acceptedToken.balanceOf(msg.sender) >= amount, \"AcceptedToken: insufficient token balance\");\r\n        _;\r\n        acceptedToken.safeTransferFrom(msg.sender, destAddr, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets accepted token using in the ecosystem.\r\n     */\r\n    function setAcceptedTokenContract(IERC20 tokenAddr) external onlyOwner {\r\n        require(address(tokenAddr) != address(0));\r\n        acceptedToken = tokenAddr;\r\n    }\r\n}\r\n// File: contracts/interfaces/IGem.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IGem {\r\n    enum GemType { GEM1, GEM2, GEM3, GEM4, GEM5}\r\n    enum Rarity { COMMON, UNCOMMON, RARE, EPIC, LEGENDARY, MYTHICAL }\r\n\r\n    struct Item {\r\n        string name;\r\n        uint16 maxSupply;\r\n        uint16 minted;\r\n        uint16 burnt;\r\n        uint8 tier;\r\n        uint8 upgradeAmount;\r\n        Rarity rarity;\r\n        GemType gemType;\r\n    }\r\n\r\n    event ItemCreated(uint indexed itemId, string name, uint16 maxSupply, Rarity rarity);\r\n    event ItemUpgradable(uint indexed itemId, uint indexed nextTierItemId, uint8 upgradeAmount);\r\n\r\n    /**\r\n     * @notice Create an item.\r\n     */\r\n    function createItem(string memory name, uint16 maxSupply, Rarity rarity, GemType gemType) external;\r\n\r\n    /**\r\n     * @notice Add next tier item to existing one.\r\n     */\r\n    function addNextTierItem(uint itemId, uint8 upgradeAmount) external;\r\n\r\n    /**\r\n     * @notice Burns the same items to upgrade its tier.\r\n     *\r\n     * Requirements:\r\n     * - sufficient token balance.\r\n     * - Item must have its next tier.\r\n     * - Sender's balance must have at least `upgradeAmount`\r\n     */\r\n    function upgradeItem(uint itemId) external;\r\n\r\n    /**\r\n     * @notice Pays some fee to get random items.\r\n     */\r\n    function rollGemGacha(uint vendorId, uint amount) external;\r\n\r\n    /**\r\n     * @notice Mints items and returns true if it's run out of stock.\r\n     */\r\n    function mint(address account, uint itemId, uint16 amount) external returns (bool);\r\n\r\n    /**\r\n     * @notice Burns ERC1155 gem since it is equipped to the hero.\r\n     */\r\n    function putItemsIntoStorage(address account, uint[] memory itemIds) external;\r\n\r\n    /**\r\n     * @notice Returns ERC1155 gem back to the owner.\r\n     */\r\n    function returnItems(address account, uint[] memory itemIds) external;\r\n\r\n    /**\r\n     * @notice Gets item information.\r\n     */\r\n    function getItem(uint itemId) external view returns (Item memory item);\r\n    \r\n    /**\r\n     * @notice Gets gem type.\r\n     */\r\n    function getGemType(uint itemId) external view returns (GemType);\r\n\r\n    /**\r\n     * @notice Check if item is out of stock.\r\n     */\r\n    function isOutOfStock(uint itemId, uint16 amount) external view returns (bool);\r\n}\r\n// File: contracts/interfaces/IKabyHero.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IKabyHero {\r\n    struct Hero {\r\n        uint star;\r\n        uint gem1;\r\n        uint gem2;\r\n        uint gem3;\r\n        uint gem4;\r\n        uint gem5;\r\n    }\r\n\r\n    struct Version {\r\n        uint currentSell;\r\n        uint currentReserve;\r\n        uint maxSupply;\r\n        uint maxForSell;\r\n        uint salePrice;\r\n        uint startTime;\r\n        uint endTime;\r\n        string provenance; // This is the provenance record of all Hero artworks in existence.\r\n        bool useSummonStaking;\r\n    }\r\n    \r\n    struct VersionConstructorParams {\r\n        uint maxSupply;\r\n        uint maxForSell;\r\n        uint salePrice;\r\n        uint startTime;\r\n        uint endTime;\r\n        string provenance;\r\n    }\r\n\r\n    event HeroCreated(uint indexed heroId, uint star, address ownerOfHero);\r\n    event HeroListed(uint indexed heroId, uint price, address ownerOfHero);\r\n    event HeroDelisted(uint indexed heroId, address ownerOfHero);\r\n    event HeroStarUpgraded(uint indexed heroId, uint newStar, uint amount);\r\n    event HeroBought(uint indexed heroId, address buyer, address seller, uint price);\r\n    event HeroOffered(uint indexed heroId, address buyer, uint price);\r\n    event HeroOfferCanceled(uint indexed heroId, address buyer);\r\n    event HeroPriceIncreased(uint indexed heroId, uint floorPrice, uint increasedAmount);\r\n    event ItemsEquipped(uint indexed heroId, uint[] itemIds);\r\n    event ItemsUnequipped(uint indexed heroId, uint[] itemIds);\r\n    event NewVersionAdded(uint versionId);\r\n    event UpdateRandomGenerator(address newRandomGenerator);\r\n    event SetStar(uint indexed heroId, uint star, address ownerOfHero);\r\n    event UpdateStakingPool(address newStakingPool);\r\n    event UpdateSummonStakingPool(address newSummonStakingPool);\r\n    event UpdateGem(address newGem);\r\n    event UpdateMaxStar(uint newMaxStar);\r\n    event UpdateMarketFee(uint newMarketFee);\r\n    event UpdateEndTime(uint endTime);\r\n    event UpdateMaxSupply(uint newMaxSupply);\r\n    \r\n    /**\r\n     * @notice Claims Heros when it's on presale phase.\r\n     */\r\n    function claimHero(uint versionId, uint amount) external;\r\n\r\n    /**\r\n     * @notice Upgrade star for hero\r\n     */\r\n    function upgradeStar(uint heroId, uint amount) external;\r\n\r\n    /**\r\n     * @notice Mint Heros from Minter to user.\r\n     */\r\n    function mintHero(uint versionId, uint amount, address account) external;\r\n\r\n    /**\r\n     * @notice Owner equips items to their Hero by burning ERC1155 Gem NFTs.\r\n     *\r\n     * Requirements:\r\n     * - caller must be owner of the Hero.\r\n     */\r\n    function equipItems(uint heroId, uint[] memory itemIds) external;\r\n\r\n    /**\r\n     * @notice Owner removes items from their Hero. ERC1155 Gem NFTs are minted back to the owner.\r\n     *\r\n     * Requirements:\r\n     * - caller must be owner of the Hero.\r\n     */\r\n    function removeItems(uint heroId, uint[] memory itemIds) external;\r\n\r\n    /**\r\n     * @notice Burns a Hero `.\r\n     *\r\n     * - Not financial advice: DONT DO THAT.\r\n     * - Remember to remove all items before calling this function.\r\n     */\r\n    function sacrificeHero(uint heroId) external;\r\n\r\n    /**\r\n     * @notice Lists a Hero on sale.\r\n     *\r\n     * Requirements:\r\n     * - `price` cannot be under Hero's `floorPrice`.\r\n     * - Caller must be the owner of the Hero.\r\n     */\r\n    function list(uint heroId, uint price) external;\r\n\r\n    /**\r\n     * @notice Delist a Hero on sale.\r\n     */\r\n    function delist(uint heroId) external;\r\n\r\n    /**\r\n     * @notice Instant buy a specific Hero on sale.\r\n     *\r\n     * Requirements:\r\n     * - Target Hero must be currently on sale.\r\n     * - Sent value must be exact the same as current listing price.\r\n     */\r\n    function buy(uint heroId) external;\r\n\r\n    /**\r\n     * @notice Gives offer for a Hero.\r\n     *\r\n     * Requirements:\r\n     * - Owner cannot offer.\r\n     */\r\n    function offer(uint heroId, uint offerValue) external;\r\n\r\n    /**\r\n     * @notice Owner take an offer to sell their Hero.\r\n     *\r\n     * Requirements:\r\n     * - Cannot take offer under Hero's `floorPrice`.\r\n     * - Offer value must be at least equal to `minPrice`.\r\n     */\r\n    function takeOffer(uint heroId, address offerAddr, uint minPrice) external;\r\n\r\n    /**\r\n     * @notice Cancels an offer for a specific Hero.\r\n     */\r\n    function cancelOffer(uint heroId) external;\r\n\r\n    /**\r\n     * @notice Finalizes the battle aftermath of 2 Heros.\r\n     */\r\n    // function finalizeDuelResult(uint winningheroId, uint losingheroId, uint penaltyInBps) external;\r\n\r\n    /**\r\n     * @notice Gets Hero information.\r\n     */\r\n    function getHero(uint heroId) external view returns (\r\n        uint star,\r\n        uint[5] memory gem\r\n    );\r\n    \r\n     /**\r\n     * @notice Gets current star of given hero.\r\n     */\r\n    function getHeroStar(uint heroId) external view returns (uint);\r\n\r\n     /**\r\n     * @notice Gets current total hero was created.\r\n     */\r\n    function totalSupply() external view returns (uint);\r\n\r\n    /**\r\n     * @notice Set random star\r\n     */\r\n    function setRandomStar(uint heroId, uint randomness) external;\r\n}\r\n// File: @openzeppelin/contracts/security/ReentrancyGuard.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/structs/EnumerableSet.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\r\n * and `uint256` (`UintSet`) are supported.\r\n */\r\nlibrary EnumerableSet {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping(bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) {\r\n            // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            if (lastIndex != toDeleteIndex) {\r\n                bytes32 lastvalue = set._values[lastIndex];\r\n\r\n                // Move the last value to the index where the value to delete is\r\n                set._values[toDeleteIndex] = lastvalue;\r\n                // Update the index for the moved value\r\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\r\n            }\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        return set._values[index];\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function _values(Set storage set) private view returns (bytes32[] memory) {\r\n        return set._values;\r\n    }\r\n\r\n    // Bytes32Set\r\n\r\n    struct Bytes32Set {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _add(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _remove(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\r\n        return _contains(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(Bytes32Set storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\r\n        return _at(set._inner, index);\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\r\n        return _values(set._inner);\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint160(uint256(_at(set._inner, index))));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(AddressSet storage set) internal view returns (address[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        address[] memory result;\r\n\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        uint256[] memory result;\r\n\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/ERC165.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Strings.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Metadata is IERC721 {\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/ERC721.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\r\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\r\n * {ERC721Enumerable}.\r\n */\r\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\r\n    using Address for address;\r\n    using Strings for uint256;\r\n\r\n    // Token name\r\n    string private _name;\r\n\r\n    // Token symbol\r\n    string private _symbol;\r\n\r\n    // Mapping from token ID to owner address\r\n    mapping(uint256 => address) private _owners;\r\n\r\n    // Mapping owner address to token count\r\n    mapping(address => uint256) private _balances;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping(uint256 => address) private _tokenApprovals;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    /**\r\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return\r\n            interfaceId == type(IERC721).interfaceId ||\r\n            interfaceId == type(IERC721Metadata).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-balanceOf}.\r\n     */\r\n    function balanceOf(address owner) public view virtual override returns (uint256) {\r\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-ownerOf}.\r\n     */\r\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\r\n        address owner = _owners[tokenId];\r\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\r\n        return owner;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-name}.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-symbol}.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-tokenURI}.\r\n     */\r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\n\r\n        string memory baseURI = _baseURI();\r\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\r\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\r\n     * by default, can be overriden in child contracts.\r\n     */\r\n    function _baseURI() internal view virtual returns (string memory) {\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-approve}.\r\n     */\r\n    function approve(address to, uint256 tokenId) public virtual override {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        require(to != owner, \"ERC721: approval to current owner\");\r\n\r\n        require(\r\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\r\n            \"ERC721: approve caller is not owner nor approved for all\"\r\n        );\r\n\r\n        _approve(to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-getApproved}.\r\n     */\r\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\r\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) public virtual override {\r\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\r\n\r\n        _operatorApprovals[_msgSender()][operator] = approved;\r\n        emit ApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-transferFrom}.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        //solhint-disable-next-line max-line-length\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) public virtual override {\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n        _safeTransfer(from, to, tokenId, _data);\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\r\n     *\r\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\r\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _transfer(from, to, tokenId);\r\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `tokenId` exists.\r\n     *\r\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\r\n     *\r\n     * Tokens start existing when they are minted (`_mint`),\r\n     * and stop existing when they are burned (`_burn`).\r\n     */\r\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\r\n        return _owners[tokenId] != address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\r\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\r\n    }\r\n\r\n    /**\r\n     * @dev Safely mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeMint(address to, uint256 tokenId) internal virtual {\r\n        _safeMint(to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\r\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\r\n     */\r\n    function _safeMint(\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _mint(to, tokenId);\r\n        require(\r\n            _checkOnERC721Received(address(0), to, tokenId, _data),\r\n            \"ERC721: transfer to non ERC721Receiver implementer\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _mint(address to, uint256 tokenId) internal virtual {\r\n        require(to != address(0), \"ERC721: mint to the zero address\");\r\n        require(!_exists(tokenId), \"ERC721: token already minted\");\r\n\r\n        _beforeTokenTransfer(address(0), to, tokenId);\r\n\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(address(0), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `tokenId`.\r\n     * The approval is cleared when the token is burned.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _burn(uint256 tokenId) internal virtual {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n\r\n        _beforeTokenTransfer(owner, address(0), tokenId);\r\n\r\n        // Clear approvals\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[owner] -= 1;\r\n        delete _owners[tokenId];\r\n\r\n        emit Transfer(owner, address(0), tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` from `from` to `to`.\r\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {\r\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\r\n        require(to != address(0), \"ERC721: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, tokenId);\r\n\r\n        // Clear approvals from the previous owner\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[from] -= 1;\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `to` to operate on `tokenId`\r\n     *\r\n     * Emits a {Approval} event.\r\n     */\r\n    function _approve(address to, uint256 tokenId) internal virtual {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\r\n     * The call is not executed if the target address is not a contract.\r\n     *\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param to target address that will receive the tokens\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes optional data to send along with the call\r\n     * @return bool whether the call correctly returned the expected magic value\r\n     */\r\n    function _checkOnERC721Received(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) private returns (bool) {\r\n        if (to.isContract()) {\r\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\r\n                return retval == IERC721Receiver.onERC721Received.selector;\r\n            } catch (bytes memory reason) {\r\n                if (reason.length == 0) {\r\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\r\n                } else {\r\n                    assembly {\r\n                        revert(add(32, reason), mload(reason))\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {}\r\n}\r\n\r\n// File: contracts/KabyHero.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract KabyHero is IKabyHero, ERC721, AcceptedToken, ReentrancyGuard {\r\n    using SafeERC20 for IERC20;\r\n    using EnumerableSet for EnumerableSet.UintSet;\r\n\r\n    uint private constant BPS = 10000;\r\n\r\n    IGem public gemContract;\r\n    IRandomNumberGenerator public randomGenerator;\r\n    ISummonStakingPool public summonStakingPool;\r\n\r\n    address public immutable kabyToken;\r\n    address public stakingPoolAddress;\r\n     \r\n    uint public marketFeeInBps = 20;\r\n    uint public maxStar = 9;\r\n    uint public maxBuyPerReq = 10;\r\n    string private _uri;\r\n    bool public useOracle;\r\n\r\n    Version[] public versions;\r\n    mapping(uint => uint) public herosOnSale;\r\n    mapping(uint => mapping(address => uint)) public herosWithOffers;\r\n    mapping(address => bool) public minters;\r\n    mapping(uint256 => uint256) private requestRandom;\r\n    mapping(address => uint256) public amountClaimed;\r\n\r\n    Hero[] private _heros;\r\n\r\n    uint[] public starIndex = new uint[](9);\r\n\r\n    constructor(\r\n        VersionConstructorParams memory param,\r\n        uint[] memory _starIndex,\r\n        address _kabyToken,\r\n        IGem gemAddress,\r\n        IERC20 tokenAddress,\r\n        string memory baseURI,\r\n        address _randomGenerator,\r\n        ISummonStakingPool _summonStakingPool\r\n    ) ERC721(\"KabyHero\", \"HERO\") AcceptedToken(tokenAddress)\r\n    {\r\n        starIndex = _initiate(_starIndex);\r\n        gemContract = gemAddress;\r\n        _uri = baseURI;\r\n        versions.push(Version(0, 0, param.maxSupply, param.maxForSell, param.salePrice, param.startTime, param.endTime, param.provenance, true));\r\n        kabyToken = _kabyToken;\r\n        randomGenerator = IRandomNumberGenerator(_randomGenerator);\r\n        summonStakingPool = _summonStakingPool;\r\n    }\r\n\r\n    modifier onlyHeroOwner(uint heroId) {\r\n        require(ownerOf(heroId) == msg.sender, \"KabyHero: not hero owner\");\r\n        _;\r\n    }\r\n    \r\n    modifier onlyStakingPool() {\r\n        require(getStakingPool() == msg.sender, \"KabyHero: not Staking pool\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyRandomNumberGenerator() {\r\n        require(address(randomGenerator) == msg.sender, \"KabyHero: not random number generator\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyMinter() {\r\n        require(minters[msg.sender], \"KabyHero: not minter\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function for owner init value for starIndex which is an array containing percent values for each star hero\r\n     * @param _starIndex array of new percent values\r\n     */\r\n    function _initiate(\r\n        uint[] memory _starIndex\r\n    ) private view returns(uint[] memory) {\r\n        require(_starIndex.length == maxStar, \"KabyHero: invalid value\");\r\n        uint totalRate;\r\n        uint[] memory initStarIndex = new uint[](9);\r\n        for(uint i = 0; i < _starIndex.length; i++){\r\n            totalRate += _starIndex[i];\r\n            initStarIndex[i] = totalRate;\r\n        }\r\n        require(totalRate == 100, \"KabyHero: invalid star rate\");\r\n        return initStarIndex;\r\n    }\r\n    \r\n    /**\r\n     * @dev Owner set value for starIndex which is an array containing percent values for each star hero\r\n     * @param _starIndex array of new percent values\r\n     */\r\n    function setStarIndex(uint[] memory _starIndex) external onlyOwner{\r\n        starIndex = _initiate(_starIndex);\r\n    }\r\n    \r\n    /**\r\n     * @dev Owner set SummonStakingPool contract\r\n     * @param _summonStakingPool new summonStakingPool contract address\r\n     */\r\n    function setSummonStakingPool(address _summonStakingPool) external onlyOwner {\r\n        require(_summonStakingPool != address(0));\r\n        summonStakingPool = ISummonStakingPool(_summonStakingPool);\r\n        emit UpdateSummonStakingPool(_summonStakingPool);\r\n    }\r\n    \r\n    /**\r\n     * @dev Owner add address as minter.\r\n     * @param minter new minter address can mint hero\r\n     */\r\n    function addMinterAddress(address minter) external onlyOwner {\r\n        minters[minter] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Owner remove minter from list minters.\r\n     * @param minter minter address which owner want to remove\r\n     */\r\n    function removeMinterAddress(address minter) external onlyOwner {\r\n        minters[minter] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Owner set type random star that contract use.\r\n     * @param isUseOracle Oracle set true, contract use the chainlink vrf random mechanism\r\n     */\r\n    function setUseOracle(bool isUseOracle) external onlyOwner{\r\n        useOracle = isUseOracle;\r\n    }\r\n    \r\n    /**\r\n     * @dev Owner set value for useSummonStaking\r\n     * @param isUseSummonStaking bool value, set it true if want KabyHero contract to use condition in SummonStakingPool for execute claim()\r\n     */\r\n    function setUseSummonStaking(uint versionId, bool isUseSummonStaking) external onlyOwner{\r\n        require(versionId <= getLatestVersion(), \"KabyHero: invalid version\");\r\n        Version storage version = versions[versionId];\r\n        version.useSummonStaking = isUseSummonStaking;\r\n    }\r\n    \r\n    /**\r\n     * @dev Owner set endTime value, user can only buy hero if their current time not reach endTime\r\n     * @param versionId version owner want to set new endTime value\r\n     * @param endTime endTime value for specific version\r\n     */\r\n    function setEndTime(uint versionId, uint endTime) external onlyOwner{\r\n        require(versionId <= getLatestVersion(), \"KabyHero: invalid version\");\r\n        require(block.timestamp < endTime, \"KabyHero: invalid endTime\");\r\n        Version storage version = versions[versionId];\r\n        version.endTime = endTime;\r\n        emit UpdateEndTime(endTime);\r\n    }\r\n    \r\n    /**\r\n     * @dev Owner set new maxSupply value\r\n     * @param versionId version owner want to set new maxSupply value\r\n     * @param newMaxSupply new maxSupply value for specific version\r\n     */\r\n    function setMaxSupply(uint versionId, uint newMaxSupply) external onlyOwner{\r\n        require(versionId <= getLatestVersion(), \"KabyHero: invalid version\");\r\n        Version storage version = versions[versionId];\r\n        require(version.currentSell + version.currentReserve <= newMaxSupply, \"KabyHero: invalid max supply\");\r\n        version.maxSupply = newMaxSupply;\r\n        emit UpdateMaxSupply(newMaxSupply);\r\n    }\r\n    \r\n    /**\r\n     * @dev Owner set new StakingPool contract\r\n     * @param _stakingPoolAddress new StakingPool contract address\r\n     */\r\n    function setStakingPoolContract(address _stakingPoolAddress) external onlyOwner {\r\n        require(_stakingPoolAddress != address(0));\r\n        stakingPoolAddress = _stakingPoolAddress;\r\n        emit UpdateStakingPool(_stakingPoolAddress);\r\n    }\r\n\r\n    /**\r\n     * @dev Owner set new gem contract\r\n     * @param gem new gem contract address\r\n     */\r\n    function setGemContract(IGem gem) external onlyOwner {\r\n        require(address(gem) != address(0));\r\n        gemContract = gem;\r\n        emit UpdateGem(address(gem));\r\n    }\r\n\r\n    /**\r\n     * @dev Owner set new max star for hero\r\n     * @param newMaxStar new max star of hero\r\n     */\r\n    function setMaxStar(uint newMaxStar) external onlyOwner {\r\n        require(newMaxStar > maxStar);\r\n        maxStar = newMaxStar;\r\n        emit UpdateMaxStar(newMaxStar);\r\n    }\r\n    \r\n    /**\r\n     * @dev Owner set new max hero can buy per request\r\n     * @param newMaxBuyPerReq new max hero per request\r\n     */\r\n    function setMaxBuyPerReq(uint newMaxBuyPerReq) external onlyOwner {\r\n        require(newMaxBuyPerReq > 0 && newMaxBuyPerReq <= 50);\r\n        maxBuyPerReq = newMaxBuyPerReq;\r\n    }\r\n\r\n    /**\r\n     * @dev Owner set new market fee\r\n     * @param marketFee new market fee in Bps\r\n     */\r\n    function setMarketFeeInBps(uint marketFee) external onlyOwner {\r\n        require(marketFee <= BPS * 30 / 100);\r\n        marketFeeInBps = marketFee;\r\n        emit UpdateMarketFee(marketFee);\r\n    }\r\n\r\n    /**\r\n     * @dev Owner set new baseURI\r\n     * @param baseURI prefix to link to hero details\r\n     */\r\n    function setBaseURI(string memory baseURI) external onlyOwner {\r\n        _uri = baseURI;\r\n    }\r\n\r\n    /**\r\n     * @dev Add new version with new configs\r\n     * @param maxSupply the maximum amount of hero can be created in this version \r\n     * @param maxForSell  the maximum amount of hero can be sold in version\r\n     * @param salePrice initial price per hero in this version\r\n     * @param startTime time to start sale heros in this version\r\n     * @param endTime time to end sale heros in this version\r\n     * @param provenance provenance of the heroes in this version\r\n     * @param isUseSummonStaking bool value, set it true if want KabyHero contract to use condition in SummonStakingPool for execute claim()\r\n     */\r\n    function addNewVersion(\r\n        uint maxSupply,\r\n        uint maxForSell,\r\n        uint salePrice,\r\n        uint startTime,\r\n        uint endTime,\r\n        string memory provenance,\r\n        bool isUseSummonStaking\r\n    ) external onlyOwner {\r\n        uint latestVersionId = getLatestVersion();\r\n        Version memory latestVersion = versions[latestVersionId];\r\n\r\n        require(latestVersion.currentSell + latestVersion.currentReserve == latestVersion.maxSupply);\r\n\r\n        versions.push(Version(0, 0, maxSupply, maxForSell, salePrice, startTime, endTime, provenance, isUseSummonStaking));\r\n        emit NewVersionAdded(latestVersionId + 1);\r\n    }\r\n\r\n    /**\r\n     * @dev User request to claim hero\r\n     * @param versionId id of version \r\n     * @param amount amount of hero want to claim\r\n     */\r\n    function claimHero(uint versionId, uint amount) external override {\r\n        require(versionId <= getLatestVersion(), \"KabyHero: invalid version\");\r\n        Version storage version = versions[versionId];\r\n        \r\n        if(version.useSummonStaking == true){\r\n            require(amountClaimed[msg.sender] + amount <= summonStakingPool.getMaxAmountSummon(msg.sender), \"KabyHero: invalid amount\");\r\n        }\r\n        \r\n        require(amount > 0 && amount <= maxBuyPerReq, \"KabyHero: amount out of range\");\r\n        require(block.timestamp >= version.startTime, \"KabyHero: Sale has not started\");\r\n        require(block.timestamp < version.endTime, \"KabyHero: Sale has ended\");\r\n        require(version.currentSell + amount <= version.maxForSell, \"KabyHero: sold out\");\r\n\r\n        for (uint i = 0; i < amount; i++) {\r\n            uint heroId = _createHero(msg.sender);\r\n            _safeMint(msg.sender, heroId);\r\n        }\r\n        \r\n        if(version.useSummonStaking == true){\r\n            amountClaimed[msg.sender] += amount;\r\n        }\r\n\r\n        version.currentSell += amount;\r\n\r\n        bool isSuccess = IERC20(kabyToken).transferFrom(msg.sender, owner(), version.salePrice * amount);\r\n        require(isSuccess);\r\n    }\r\n    \r\n    /**\r\n     * @dev Minter request to mint hero to specific account\r\n     * @param versionId id of version \r\n     * @param amount amount of hero want to mint\r\n     * @param account address of user will receive \r\n     */\r\n    function mintHero(uint versionId, uint amount, address account) external onlyMinter override {\r\n        require(versionId <= getLatestVersion(), \"KabyHero: invalid version\");\r\n        Version storage version = versions[versionId];\r\n\r\n        require(amount > 0 && amount <= 50, \"KabyHero: amount out of range\");\r\n        require(block.timestamp >= version.startTime, \"KabyHero: Sale has not started\");\r\n        require(amount + version.currentReserve + version.currentSell <= version.maxSupply, \"KabyHero: sold out, cannot mint\");\r\n\r\n        for (uint i = 0; i < amount; i++) {\r\n            uint heroId = _createHero(account);\r\n            _safeMint(account, heroId);\r\n        }\r\n\r\n        version.currentReserve += amount;\r\n    }\r\n\r\n    /**\r\n     * @dev Owner equips items to their hero\r\n     * @param heroId id of hero what will be equipped\r\n     * @param itemIds array of ids of items which equip to the hero\r\n     */\r\n    function equipItems(uint heroId, uint[] memory itemIds) external override onlyHeroOwner(heroId) {\r\n        require(heroId < _heros.length, \"KabyHero: invalid hero\");\r\n        _setHeroGem(heroId, itemIds, false);\r\n\r\n        gemContract.putItemsIntoStorage(msg.sender, itemIds);\r\n\r\n        emit ItemsEquipped(heroId, itemIds);\r\n    }\r\n\r\n    /**\r\n     * @dev Owner removes items from their hero\r\n     * @param heroId id of hero which will be unequipped\r\n     * @param itemIds array of ids of items which unequip from the hero\r\n     */\r\n    function removeItems(uint heroId, uint[] memory itemIds) external override onlyHeroOwner(heroId) {\r\n        require(heroId < _heros.length, \"KabyHero: invalid hero\");\r\n        _setHeroGem(heroId, itemIds, true);\r\n\r\n        gemContract.returnItems(msg.sender, itemIds);\r\n\r\n        emit ItemsUnequipped(heroId, itemIds);\r\n    }\r\n\r\n    /**\r\n     * @dev Owner burns a hero\r\n     * @param heroId id of hero which will be burned\r\n     */\r\n    function sacrificeHero(uint heroId) external override nonReentrant onlyHeroOwner(heroId) {\r\n        require(heroId < _heros.length, \"KabyHero: invalid hero\");\r\n        _burn(heroId);\r\n    }\r\n\r\n    /**\r\n     * @dev Owner lists a hero on sale.\r\n     * @param heroId id of hero which will be listed\r\n     * @param price price of hero want to sell\r\n     */\r\n    function list(uint heroId, uint price) external override onlyHeroOwner(heroId) {\r\n        require(heroId < _heros.length, \"KabyHero: invalid hero\");\r\n        require(price > 0, \"KabyHero: price is zero\");\r\n\r\n        herosOnSale[heroId] = price;\r\n\r\n        emit HeroListed(heroId, price, ownerOf(heroId));\r\n    }\r\n\r\n    /**\r\n     * @dev Owner delists a hero is being on sale.\r\n     * @param heroId id of hero which will be delisted\r\n     */\r\n    function delist(uint heroId) external override onlyHeroOwner(heroId) {\r\n        require(heroId < _heros.length, \"KabyHero: invalid hero\");\r\n        require(herosOnSale[heroId] > 0, \"KabyHero: not listed\");\r\n\r\n        herosOnSale[heroId] = 0;\r\n\r\n        emit HeroDelisted(heroId, ownerOf(heroId));\r\n    }\r\n\r\n    /**\r\n     * @dev Buyer buy a hero is being on sale.\r\n     * @param heroId id of hero which buyer want to buy \r\n     */\r\n    function buy(uint heroId) external override nonReentrant {\r\n        require(heroId < _heros.length, \"KabyHero: invalid hero\");\r\n        uint price = herosOnSale[heroId];\r\n        address seller = ownerOf(heroId);\r\n        address buyer = msg.sender;\r\n\r\n        require(price > 0, \"KabyHero: not on sale\");\r\n        require(buyer != seller, \"KabyHero: cannot buy your own Hero\");\r\n\r\n        bool isSuccess = IERC20(kabyToken).transferFrom(buyer, address(this), price);\r\n        require(isSuccess);\r\n        \r\n        _makeTransaction(heroId, buyer, seller, price);\r\n\r\n        emit HeroBought(heroId, buyer, seller, price);\r\n    }\r\n\r\n    /**\r\n     * @dev Buyer gives offer for a hero.\r\n     * @param heroId id of hero which buyer want to offer\r\n     * @param offerValue value of hero which buyer want to offer\r\n     */\r\n    function offer(uint heroId, uint offerValue) external override nonReentrant {\r\n        require(heroId < _heros.length, \"KabyHero: invalid hero\");\r\n        address buyer = msg.sender;\r\n        uint currentOffer = herosWithOffers[heroId][buyer];\r\n        bool needRefund = offerValue < currentOffer;\r\n        uint requiredValue = needRefund ? 0 : offerValue - currentOffer;\r\n\r\n        require(buyer != ownerOf(heroId), \"KabyHero: owner cannot offer\");\r\n        require(offerValue != currentOffer, \"KabyHero: same offer\");\r\n\r\n        if (requiredValue > 0) {\r\n            bool offerSuccess = IERC20(kabyToken).transferFrom(buyer, address(this), requiredValue);\r\n            require(offerSuccess);\r\n        }\r\n        herosWithOffers[heroId][buyer] = offerValue;\r\n\r\n        if (needRefund) {\r\n            uint returnedValue = currentOffer - offerValue;\r\n\r\n            bool returnSuccess = IERC20(kabyToken).transfer( buyer, returnedValue);\r\n            require(returnSuccess);\r\n        }\r\n\r\n        emit HeroOffered(heroId, buyer, offerValue);\r\n    }\r\n\r\n    /**\r\n     * @dev Owner take an offer to sell their hero.\r\n     * @param heroId id of hero which owner want to sell\r\n     * @param buyer address of buyer who offerd for the hero\r\n     * @param minPrice min price of the hero, can less than or equal to 'offerValue' when make offer before\r\n     */\r\n    function takeOffer(\r\n        uint heroId,\r\n        address buyer,\r\n        uint minPrice\r\n    ) external override nonReentrant onlyHeroOwner(heroId) {\r\n        require(heroId < _heros.length, \"KabyHero: invalid hero\");\r\n        uint offeredValue = herosWithOffers[heroId][buyer];\r\n        address seller = msg.sender;\r\n\r\n        require(offeredValue > 0, \"KabyHero: no offer found\");\r\n        require(offeredValue >= minPrice, \"KabyHero: less than min price\");\r\n        require(buyer != seller, \"KabyHero: cannot buy your own Hero\");\r\n\r\n        herosWithOffers[heroId][buyer] = 0;\r\n\r\n        _makeTransaction(heroId, buyer, seller, offeredValue);\r\n\r\n        emit HeroBought(heroId, buyer, seller, offeredValue);\r\n    }\r\n\r\n    /**\r\n     * @dev Buyer cancel offer for a hero which offered before.\r\n     * @param heroId id of hero which buyer want to cancel offer\r\n     */\r\n    function cancelOffer(uint heroId) external override nonReentrant {\r\n        require(heroId < _heros.length, \"KabyHero: invalid hero\");\r\n        address sender = msg.sender;\r\n        uint offerValue = herosWithOffers[heroId][sender];\r\n\r\n        require(offerValue > 0, \"KabyHero: no offer found\");\r\n\r\n        herosWithOffers[heroId][sender] = 0;\r\n\r\n        bool isSuccess = IERC20(kabyToken).transfer(sender, offerValue);\r\n        require(isSuccess);\r\n\r\n        emit HeroOfferCanceled(heroId, sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Upgrade star for hero\r\n     * @param heroId id of hero which will be upgraded\r\n     * @param amount amount star to upgrade\r\n     */\r\n    function upgradeStar(uint heroId, uint amount) external override onlyStakingPool {\r\n        require(heroId < _heros.length, \"KabyHero: invalid hero\");\r\n        Hero storage hero = _heros[heroId];\r\n        uint newStar = hero.star + amount;\r\n\r\n        require(amount > 0);\r\n        require(newStar <= maxStar, \"KabyHero: max Star reached\");\r\n\r\n        hero.star = newStar;\r\n\r\n        emit HeroStarUpgraded(heroId, newStar, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Get the hero to see detail info.\r\n     * @param heroId id of hero which user want to get detail info\r\n     * @return star return current star of hero.\r\n     * @return gem return detail info of hero. Current is a array has gem id values \r\n     */\r\n    function getHero(uint heroId) external view override returns (\r\n        uint star,\r\n        uint[5] memory gem\r\n    ) {\r\n        require(heroId < _heros.length, \"KabyHero: invalid hero\");\r\n        Hero memory hero = _heros[heroId];\r\n        star = hero.star;\r\n        gem = [\r\n            hero.gem1,\r\n            hero.gem2,\r\n            hero.gem3,\r\n            hero.gem4,\r\n            hero.gem5\r\n        ];\r\n    }\r\n\r\n    /**\r\n     * @dev Get current stakingPoolAddress\r\n     */\r\n    function getStakingPool() private view returns (address) {\r\n        return stakingPoolAddress;\r\n    }\r\n    \r\n    /**\r\n     * @dev get current star of given hero\r\n     * @param heroId id of hero which user want to get current star\r\n     */\r\n    function getHeroStar(uint heroId) external view override returns (uint) {\r\n        require(heroId < _heros.length, \"KabyHero: invalid hero\");\r\n        return _heros[heroId].star;\r\n    }\r\n\r\n    /**\r\n     * @dev Get latest version of system\r\n     */\r\n    function getLatestVersion() public view returns (uint) {\r\n        return versions.length - 1;\r\n    }\r\n\r\n    /**\r\n     * @dev Get amount of total heros are supplied\r\n     */\r\n    function totalSupply() external view override returns (uint) {\r\n        return _heros.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Get current uri\r\n     */\r\n    function _baseURI() internal view override returns (string memory) {\r\n        return _uri;\r\n    }\r\n\r\n    /**\r\n     * @dev Execute trade a hero\r\n     * @param heroId id of hero which will be trade\r\n     * @param buyer address of buyer\r\n     * @param seller address of seller\r\n     * @param price price of the hero\r\n     */\r\n    function _makeTransaction(uint heroId, address buyer, address seller, uint price) private {\r\n        //Hero storage Hero = _heros[heroId];\r\n        uint marketFee = price * marketFeeInBps / BPS;\r\n\r\n        herosOnSale[heroId] = 0;\r\n\r\n        bool transferToSeller = IERC20(kabyToken).transfer( seller, price - marketFee);\r\n        require(transferToSeller);\r\n\r\n        bool transferToTreasury = IERC20(kabyToken).transfer( owner(), marketFee);\r\n        require(transferToTreasury);\r\n\r\n        _transfer(seller, buyer, heroId);\r\n    }\r\n\r\n    /**\r\n     * @dev Owner set new randomGenerator contract\r\n     * @param randomAddress new randomGenerator contract address\r\n     */\r\n    function setRandomGenerator(IRandomNumberGenerator randomAddress) external onlyOwner {\r\n        require(address(randomAddress) != address(0));\r\n        randomGenerator = randomAddress;\r\n        emit UpdateRandomGenerator(address(randomAddress));\r\n    }\r\n\r\n    /**\r\n     * @dev Callable by random generator to set random star for hero\r\n     * @param heroId id of hero which user want to set random star\r\n     * @param randomness random number is returned from chainlink vrf random\r\n     */\r\n    function setRandomStar(uint heroId, uint randomness) external override onlyRandomNumberGenerator {\r\n        require(heroId < _heros.length, \"KabyHero: invalid hero\");\r\n        Hero storage hero = _heros[heroId];\r\n        uint randomStarIndex = randomness % 100;\r\n\r\n        uint star = 1;\r\n        while(star < 9 && starIndex[star-1] <= randomStarIndex){\r\n            star++;\r\n        }\r\n        hero.star = star;\r\n        emit SetStar(heroId, star, ownerOf(heroId));\r\n    }\r\n    \r\n\r\n    /**\r\n     * @dev Create a new hero\r\n     * @param ownerOfHero owner of hero\r\n     * @return heroId id of hero was just created\r\n     */\r\n    function _createHero(address ownerOfHero) private returns (uint heroId) {\r\n        _heros.push(Hero(0, 0, 0, 0, 0, 0));\r\n        heroId = _heros.length - 1;\r\n        uint star = randomStar(heroId);\r\n        if (star > 0) {\r\n            _heros[heroId].star = star;\r\n            emit SetStar(heroId, star, ownerOfHero);\r\n        }\r\n        emit HeroCreated(heroId, star, ownerOfHero);\r\n    }\r\n    \r\n    /**\r\n     * @dev Random star for create a new hero\r\n     * @return returnStar star of new hero will be created\r\n     */\r\n    function randomStar(uint heroId) private returns (uint256 returnStar){\r\n        require(heroId < _heros.length, \"KabyHero: invalid hero\");\r\n        if (useOracle == false){\r\n            uint randomStarIndex = uint(keccak256(abi.encodePacked(block.difficulty, block.timestamp, heroId))) % 100;\r\n            uint star = 1;\r\n            while(star < 9 && starIndex[star-1] <= randomStarIndex){\r\n                star++;\r\n            }\r\n            return star;\r\n        } else {\r\n            randomGenerator.requestRandomNumberForStar(heroId); // Calculate the finalNumber based on the randomResult generated by ChainLink's fallback\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev User equip/unequip gems to/from their hero\r\n     * @param heroId id of hero\r\n     * @param itemIds array of item id values\r\n     * @param isRemove bool value, true if user want to unquip items and false to equip items \r\n     */\r\n    function _setHeroGem(uint heroId, uint[] memory itemIds, bool isRemove) private {\r\n        require(herosOnSale[heroId] == 0, \"KabyHero: cannot change items while on sale\");\r\n        require(itemIds.length > 0, \"KabyHero: no item\");\r\n\r\n        Hero storage hero = _heros[heroId];\r\n        bool[] memory itemSet = new bool[](5);\r\n\r\n        for (uint i = 0; i < itemIds.length; i++) {\r\n            uint itemId = itemIds[i];\r\n            uint updatedItemId = isRemove ? 0 : itemId;\r\n            IGem.GemType gemType = gemContract.getGemType(itemId);\r\n\r\n            require(itemId != 0, \"KabyHero: invalid itemId\");\r\n            require(!itemSet[uint(gemType)], \"KabyHero: duplicate gemType\");\r\n\r\n            if (gemType == IGem.GemType.GEM1) {\r\n                require(isRemove ? hero.gem1 == itemId : hero.gem1 == 0, \"Kaby : invalid gem1\");\r\n                hero.gem1 = updatedItemId;\r\n                itemSet[uint(IGem.GemType.GEM1)] = true;\r\n            } else if (gemType == IGem.GemType.GEM2) {\r\n                require(isRemove ? hero.gem2 == itemId : hero.gem2 == 0, \"Kaby : invalid gem2\");\r\n                hero.gem2 = updatedItemId;\r\n                itemSet[uint(IGem.GemType.GEM2)] = true;\r\n            } else if (gemType == IGem.GemType.GEM3) {\r\n                require(isRemove ? hero.gem3 == itemId : hero.gem3 == 0, \"Kaby : invalid gem3\");\r\n                hero.gem3 = updatedItemId;\r\n                itemSet[uint(IGem.GemType.GEM3)] = true;\r\n            } else if (gemType == IGem.GemType.GEM4) {\r\n                require(isRemove ? hero.gem4 == itemId : hero.gem4 == 0, \"Kaby : invalid gem4\");\r\n                hero.gem4 = updatedItemId;\r\n                itemSet[uint(IGem.GemType.GEM4)] = true;\r\n            } else if (gemType == IGem.GemType.GEM5) {\r\n                require(isRemove ? hero.gem5 == itemId : hero.gem5 == 0, \"Kaby : invalid gem5\");\r\n                hero.gem5 = updatedItemId;\r\n                itemSet[uint(IGem.GemType.GEM5)] = true;\r\n            }\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxForSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"provenance\",\"type\":\"string\"}],\"internalType\":\"struct IKabyHero.VersionConstructorParams\",\"name\":\"param\",\"type\":\"tuple\"},{\"internalType\":\"uint256[]\",\"name\":\"_starIndex\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_kabyToken\",\"type\":\"address\"},{\"internalType\":\"contract IGem\",\"name\":\"gemAddress\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_randomGenerator\",\"type\":\"address\"},{\"internalType\":\"contract ISummonStakingPool\",\"name\":\"_summonStakingPool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"heroId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"HeroBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"heroId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"star\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"ownerOfHero\",\"type\":\"address\"}],\"name\":\"HeroCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"heroId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"ownerOfHero\",\"type\":\"address\"}],\"name\":\"HeroDelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"heroId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"ownerOfHero\",\"type\":\"address\"}],\"name\":\"HeroListed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"heroId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"HeroOfferCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"heroId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"HeroOffered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"heroId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"floorPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"increasedAmount\",\"type\":\"uint256\"}],\"name\":\"HeroPriceIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"heroId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newStar\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"HeroStarUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"heroId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"itemIds\",\"type\":\"uint256[]\"}],\"name\":\"ItemsEquipped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"heroId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"itemIds\",\"type\":\"uint256[]\"}],\"name\":\"ItemsUnequipped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"versionId\",\"type\":\"uint256\"}],\"name\":\"NewVersionAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"heroId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"star\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"ownerOfHero\",\"type\":\"address\"}],\"name\":\"SetStar\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"UpdateEndTime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newGem\",\"type\":\"address\"}],\"name\":\"UpdateGem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMarketFee\",\"type\":\"uint256\"}],\"name\":\"UpdateMarketFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxStar\",\"type\":\"uint256\"}],\"name\":\"UpdateMaxStar\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxSupply\",\"type\":\"uint256\"}],\"name\":\"UpdateMaxSupply\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newRandomGenerator\",\"type\":\"address\"}],\"name\":\"UpdateRandomGenerator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newStakingPool\",\"type\":\"address\"}],\"name\":\"UpdateStakingPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newSummonStakingPool\",\"type\":\"address\"}],\"name\":\"UpdateSummonStakingPool\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptedToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"addMinterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxForSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"provenance\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isUseSummonStaking\",\"type\":\"bool\"}],\"name\":\"addNewVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"addOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"amountClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"heroId\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"heroId\",\"type\":\"uint256\"}],\"name\":\"cancelOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"versionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimHero\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"heroId\",\"type\":\"uint256\"}],\"name\":\"delist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"heroId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"itemIds\",\"type\":\"uint256[]\"}],\"name\":\"equipItems\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gemContract\",\"outputs\":[{\"internalType\":\"contract IGem\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"heroId\",\"type\":\"uint256\"}],\"name\":\"getHero\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"star\",\"type\":\"uint256\"},{\"internalType\":\"uint256[5]\",\"name\":\"gem\",\"type\":\"uint256[5]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"heroId\",\"type\":\"uint256\"}],\"name\":\"getHeroStar\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"herosOnSale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"herosWithOffers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kabyToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"heroId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"list\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketFeeInBps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBuyPerReq\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxStar\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"versionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"mintHero\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"heroId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offerValue\",\"type\":\"uint256\"}],\"name\":\"offer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"operators\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"randomGenerator\",\"outputs\":[{\"internalType\":\"contract IRandomNumberGenerator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"heroId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"itemIds\",\"type\":\"uint256[]\"}],\"name\":\"removeItems\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"removeMinterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"removeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"heroId\",\"type\":\"uint256\"}],\"name\":\"sacrificeHero\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenAddr\",\"type\":\"address\"}],\"name\":\"setAcceptedTokenContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"versionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"setEndTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IGem\",\"name\":\"gem\",\"type\":\"address\"}],\"name\":\"setGemContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketFee\",\"type\":\"uint256\"}],\"name\":\"setMarketFeeInBps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxBuyPerReq\",\"type\":\"uint256\"}],\"name\":\"setMaxBuyPerReq\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxStar\",\"type\":\"uint256\"}],\"name\":\"setMaxStar\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"versionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newMaxSupply\",\"type\":\"uint256\"}],\"name\":\"setMaxSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRandomNumberGenerator\",\"name\":\"randomAddress\",\"type\":\"address\"}],\"name\":\"setRandomGenerator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"heroId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"randomness\",\"type\":\"uint256\"}],\"name\":\"setRandomStar\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingPoolAddress\",\"type\":\"address\"}],\"name\":\"setStakingPoolContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_starIndex\",\"type\":\"uint256[]\"}],\"name\":\"setStarIndex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_summonStakingPool\",\"type\":\"address\"}],\"name\":\"setSummonStakingPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isUseOracle\",\"type\":\"bool\"}],\"name\":\"setUseOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"versionId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isUseSummonStaking\",\"type\":\"bool\"}],\"name\":\"setUseSummonStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"starIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"summonStakingPool\",\"outputs\":[{\"internalType\":\"contract ISummonStakingPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"heroId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minPrice\",\"type\":\"uint256\"}],\"name\":\"takeOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"heroId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"upgradeStar\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"useOracle\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"versions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"currentSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentReserve\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxForSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"provenance\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"useSummonStaking\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "KabyHero", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000002a40c048ee2607b5f5606e445cfc3633fb20b58000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a40c048ee2607b5f5606e445cfc3633fb20b580000000000000000000000000000000000000000000000000000000000000340000000000000000000000000c4641c7e51ca3e6167e5879bcd1df33458315181000000000000000000000000a7d5d00737fe08431263152cbed7c5aa3c73e7c300000000000000000000000000000000000000000000000000000000000004b000000000000000000000000000000000000000000000000000000000000004b000000000000000000000000000000000000000000000003635c9adc5dea0000000000000000000000000000000000000000000000000000000000000613b48c0000000000000000000000000000000000000000000000000000000006144834000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000767656e65736973000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000046000000000000000000000000000000000000000000000000000000000000001b00000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002568747470733a2f2f6170692e6b6162796172656e612e636f6d2f5765624170692f6273632f000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://62cdce6875f2f5eaaf0bc09582a46ace346077fc0a15488c773862ea191664e4"}