{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.18;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two numbers, throws on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two numbers, truncating the quotient.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two numbers, throws on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via _msgSender() and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgValue() internal view virtual returns (uint) {\r\n        return msg.value;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * The initial owner is set to the address provided by the deployer. This can\r\n * later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    /**\r\n     * @dev The caller account is not authorized to perform an operation.\r\n     */\r\n    error OwnableUnauthorizedAccount(address account);\r\n\r\n    /**\r\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\r\n     */\r\n    error OwnableInvalidOwner(address owner);\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        if (owner() != _msgSender()) {\r\n            revert OwnableUnauthorizedAccount(_msgSender());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() external virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) external virtual onlyOwner {\r\n        if (newOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\ncontract BNBStake is Context, Ownable, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public constant INVEST_MIN_AMOUNT = 5e16; // 0.05 bnb\r\n    uint256 public constant INVEST_MORE_THEN_PERCENT = 1500; // %15 more\r\n\r\n    uint256[2] internal REFERRAL_PERCENTS = [700, 500]; // first line %7 second line %5\r\n    uint256 internal constant TOTAL_REF_BONUS = 1200; // total %12\r\n\r\n    uint256 public constant PROJECT_FEE = 1000; // %10\r\n    uint256 public constant DEV_FEE = 200; // %2\r\n\r\n    uint256 public constant PERCENTS_DIVIDER = 10000;\r\n    uint256 public constant TIME_STEP = 1 days;\r\n\r\n    uint256 public totalInvested;\r\n\r\n    struct Plan {\r\n        uint256 time;\r\n        uint256 percent;\r\n    }\r\n\r\n    Plan[] internal plans;\r\n\r\n    struct Deposit {\r\n        uint8 plan;\r\n        uint256 amount;\r\n        uint256 start;\r\n    }\r\n\r\n    struct Action {\r\n        uint8 types;\r\n        uint256 amount;\r\n        uint256 date;\r\n    }\r\n\r\n    struct User {\r\n        Deposit[] deposits;\r\n        uint256 checkpoint;\r\n        address referrer;\r\n        uint256[2] levels;\r\n        uint256 bonus;\r\n        uint256 totalBonus;\r\n        uint256 withdrawn;\r\n        Action[] actions;\r\n    }\r\n\r\n    mapping(address => User) internal users;\r\n    mapping(address => uint256) private lastDeposit;\r\n    mapping(address => uint256) private insurance;\r\n    mapping(address => uint256) private available;\r\n\r\n    uint8 private isDevFee = 1;\r\n\r\n    address public commissionWallet;\r\n    address public devWallet;\r\n    address public insuranceWallet;\r\n\r\n    event Newbie(address user);\r\n    event NewDeposit(address indexed user, uint8 plan, uint256 amount);\r\n    event Withdrawn(address indexed user, uint256 amount);\r\n    event WithdrawnRef(address indexed user, uint256 amount);\r\n    event RefBonus(\r\n        address indexed referrer,\r\n        address indexed referral,\r\n        uint256 indexed level,\r\n        uint256 amount\r\n    );\r\n    event FeePayed(address indexed user, uint256 totalAmount);\r\n\r\n    constructor(address comm_wallet, address dev_wallet, address ins_wallet) {\r\n        require(comm_wallet != address(0), \"can not be zero address\");\r\n        require(dev_wallet != address(0), \"can not be zero address\");\r\n        require(ins_wallet != address(0), \"can not be zero address\");\r\n\r\n        commissionWallet = comm_wallet;\r\n        devWallet = dev_wallet;\r\n        insuranceWallet = ins_wallet;\r\n\r\n        setPlan(300, 80);\r\n    }\r\n\r\n    function setPlan(uint256 time, uint256 earningPercent) public onlyOwner {\r\n        plans.push(Plan(time, earningPercent));\r\n    }\r\n\r\n    function changeInsuranceWalletWallet(address wallet) external onlyOwner {\r\n        insuranceWallet = wallet;\r\n    }\r\n\r\n    function changeCommissionWallet(address wallet) external onlyOwner {\r\n        commissionWallet = wallet;\r\n    }\r\n\r\n    modifier onlyDeveloper() {\r\n        require(_msgSender() == devWallet, \"dev can change this\");\r\n        _;\r\n    }\r\n\r\n    function changeDevWallet(address wallet) external onlyDeveloper {\r\n        devWallet = wallet;\r\n    }\r\n\r\n    function sendDevWallet(uint8 state) external onlyDeveloper {\r\n        isDevFee = state;\r\n    }\r\n\r\n    function invest(\r\n        address referrer,\r\n        uint8 planId\r\n    ) external payable nonReentrant {\r\n        require(planId < plans.length, \"Invalid plan code\");\r\n\r\n        uint256 investmentAmount = _msgValue();\r\n        address investor = _msgSender();\r\n\r\n        require(\r\n            investmentAmount >= INVEST_MIN_AMOUNT,\r\n            \"minimum invest amount error\"\r\n        );\r\n\r\n        // add INVEST_MORE_THEN_PERCENT to last deposit\r\n        require(\r\n            investmentAmount >=\r\n                lastDeposit[investor].mul(INVEST_MORE_THEN_PERCENT).div(\r\n                    PERCENTS_DIVIDER\r\n                ),\r\n            \"update amount more then last deposit\"\r\n        );\r\n\r\n        Plan storage _plan = plans[planId];\r\n\r\n        uint256 _project_fee = investmentAmount.mul(PROJECT_FEE).div(\r\n            PERCENTS_DIVIDER\r\n        );\r\n        uint256 _dev_fee = 0;\r\n\r\n        if (isDevFee == 1) {\r\n            _dev_fee = investmentAmount.mul(DEV_FEE).div(PERCENTS_DIVIDER);\r\n        }\r\n\r\n        User storage user = users[investor];\r\n\r\n        if (user.referrer == address(0)) {\r\n            if (users[referrer].deposits.length > 0 && referrer != investor) {\r\n                user.referrer = referrer;\r\n            }\r\n\r\n            address upline = user.referrer;\r\n            for (uint256 i = 0; i < 2; i++) {\r\n                if (upline != address(0)) {\r\n                    users[upline].levels[i] = users[upline].levels[i].add(1);\r\n                    upline = users[upline].referrer;\r\n                } else break;\r\n            }\r\n        }\r\n\r\n        if (user.referrer != address(0)) {\r\n            address upline = user.referrer;\r\n            for (uint256 i = 0; i < 2; i++) {\r\n                if (upline != address(0)) {\r\n                    uint256 amount = investmentAmount\r\n                        .mul(REFERRAL_PERCENTS[i])\r\n                        .div(PERCENTS_DIVIDER);\r\n                    users[upline].bonus = users[upline].bonus.add(amount);\r\n                    users[upline].totalBonus = users[upline].totalBonus.add(\r\n                        amount\r\n                    );\r\n                    emit RefBonus(upline, investor, i, amount);\r\n                    upline = users[upline].referrer;\r\n                } else break;\r\n            }\r\n        }\r\n\r\n        if (user.deposits.length == 0) {\r\n            user.checkpoint = block.timestamp;\r\n            emit Newbie(investor);\r\n        }\r\n\r\n        user.deposits.push(Deposit(planId, investmentAmount, block.timestamp));\r\n        user.actions.push(Action(0, investmentAmount, block.timestamp));\r\n\r\n        lastDeposit[investor] = investmentAmount;\r\n\r\n        // calculate max can get\r\n        uint256 _maxUserCanGet = investmentAmount\r\n            .mul(_plan.time)\r\n            .mul(_plan.percent)\r\n            .div(PERCENTS_DIVIDER);\r\n\r\n        available[investor] = available[investor].add(_maxUserCanGet);\r\n\r\n        totalInvested = totalInvested.add(investmentAmount);\r\n\r\n        sendNativeValue(commissionWallet, _project_fee);\r\n        emit FeePayed(investor, _project_fee);\r\n\r\n        if (_dev_fee > 0) {\r\n            sendNativeValue(devWallet, _dev_fee);\r\n            emit FeePayed(investor, _dev_fee);\r\n        }\r\n\r\n        emit NewDeposit(investor, planId, investmentAmount);\r\n    }\r\n\r\n    function withdraw() external nonReentrant {\r\n        require(address(this).balance > 0, \"zero native balance\");\r\n\r\n        address investor = _msgSender();\r\n\r\n        User storage user = users[investor];\r\n\r\n        uint256 totalAmount = getUserDividends(investor);\r\n        require(totalAmount > 0, \"User has no dividends\");\r\n\r\n        uint256 maxWithdraw = available[investor];\r\n        require(maxWithdraw > 0, \"Max withdraw should more then zero\");\r\n\r\n        if (totalAmount > maxWithdraw) {\r\n            totalAmount = maxWithdraw;\r\n        }\r\n\r\n        user.checkpoint = block.timestamp;\r\n        user.withdrawn = user.withdrawn.add(totalAmount);\r\n\r\n        available[investor] = available[investor].sub(totalAmount);\r\n\r\n        if (available[investor] == 0) {\r\n            removeUserDeposits(investor);\r\n        }\r\n\r\n        user.actions.push(Action(1, totalAmount, block.timestamp));\r\n\r\n        sendNativeValue(investor, totalAmount);\r\n        emit Withdrawn(investor, totalAmount);\r\n    }\r\n\r\n    function withdrawRef() external nonReentrant {\r\n        address investor = _msgSender();\r\n\r\n        uint256 referralBonus = getUserReferralBonus(investor);\r\n        require(referralBonus > 0, \"User has no referal bonus\");\r\n\r\n        User storage user = users[investor];\r\n\r\n        uint256 totalAmount = user.bonus;\r\n\r\n        uint256 maxWithdraw = available[investor];\r\n        require(maxWithdraw > 0, \"Max withdraw should more then zero\");\r\n\r\n        if (totalAmount > maxWithdraw) {\r\n            totalAmount = maxWithdraw;\r\n        }\r\n\r\n        available[investor] = available[investor].sub(totalAmount);\r\n        user.withdrawn = user.withdrawn.add(totalAmount);\r\n\r\n        if (available[investor] == 0) {\r\n            user.bonus = user.bonus.sub(totalAmount);\r\n            removeUserDeposits(investor);\r\n        } else {\r\n            user.bonus = user.bonus.sub(totalAmount);\r\n        }\r\n\r\n        sendNativeValue(investor, totalAmount);\r\n        emit WithdrawnRef(investor, totalAmount);\r\n    }\r\n\r\n    function sendNativeValue(address to_, uint256 amount_) internal {\r\n        (bool sent, ) = payable(to_).call{value: amount_}(\"\");\r\n        require(sent, \"BEP20: BNB_TX_FAIL on recover BNB\");\r\n    }\r\n\r\n    function removeUserDeposits(address account_) internal {\r\n        User storage user = users[account_];\r\n\r\n        for (uint256 i = 0; i < user.deposits.length; i++) {\r\n            user.deposits[i].amount = 0;\r\n        }\r\n    }\r\n\r\n    function setInsurance() external payable nonReentrant {\r\n        address investor = _msgSender();\r\n        uint256 activeAmount = getUserActivePlansAmount(investor);\r\n        require(activeAmount > 0, \"No active investment\");\r\n\r\n        uint256 _ins_fee = activeAmount.div(10); // 10%\r\n\r\n        require(_msgValue() >= _ins_fee, \"Should pay insurance fee\");\r\n\r\n        insurance[investor] = 1;\r\n\r\n        uint256 devFee = _ins_fee.mul(200).div(1000); // 2%\r\n        uint256 insuranceFeeAfterDevFee = _ins_fee.sub(devFee); // 8%\r\n\r\n        sendNativeValue(insuranceWallet, insuranceFeeAfterDevFee);\r\n        sendNativeValue(devWallet, devFee);\r\n\r\n        emit FeePayed(investor, _ins_fee);\r\n    }\r\n\r\n    function userInsuranceStatus(\r\n        address userAddress\r\n    ) external view returns (uint256) {\r\n        return insurance[userAddress];\r\n    }\r\n\r\n    function withdrawns(address payable to_) external onlyOwner {\r\n        require(to_ != address(0), \"ERC20: transfer to the zero address\");\r\n        require(address(this).balance > 0, \"ERC20: zero native balance\");\r\n        (bool sent, ) = to_.call{value: address(this).balance}(\"\");\r\n        require(sent, \"ERC20: ETH_TX_FAIL on recover ETH\");\r\n    }\r\n\r\n    function getContractBalance() external view returns (uint256) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    function getPlanInfo(\r\n        uint id_\r\n    ) external view returns (uint256 time, uint256 percent) {\r\n        time = plans[id_].time;\r\n        percent = plans[id_].percent;\r\n    }\r\n\r\n    function getUserDividends(\r\n        address userAddress\r\n    ) public view returns (uint256) {\r\n        User storage user = users[userAddress];\r\n\r\n        uint256 totalAmount = 0;\r\n\r\n        for (uint256 i = 0; i < user.deposits.length; i++) {\r\n            uint256 finish = user.deposits[i].start.add(\r\n                plans[user.deposits[i].plan].time.mul(TIME_STEP)\r\n            );\r\n            if (user.checkpoint < finish) {\r\n                uint256 share = user\r\n                    .deposits[i]\r\n                    .amount\r\n                    .mul(plans[user.deposits[i].plan].percent)\r\n                    .div(PERCENTS_DIVIDER);\r\n                uint256 from = user.deposits[i].start > user.checkpoint\r\n                    ? user.deposits[i].start\r\n                    : user.checkpoint;\r\n                uint256 to = finish < block.timestamp\r\n                    ? finish\r\n                    : block.timestamp;\r\n                if (from < to) {\r\n                    totalAmount = totalAmount.add(\r\n                        share.mul(to.sub(from)).div(TIME_STEP)\r\n                    );\r\n                }\r\n            }\r\n        }\r\n\r\n        return totalAmount;\r\n    }\r\n\r\n    function getUserActivePlansAmount(\r\n        address userAddress\r\n    ) public view returns (uint256) {\r\n        User storage user = users[userAddress];\r\n\r\n        uint256 totalAmount = 0;\r\n\r\n        for (uint256 i = 0; i < user.deposits.length; i++) {\r\n            uint256 finish = user.deposits[i].start.add(\r\n                plans[user.deposits[i].plan].time.mul(TIME_STEP)\r\n            );\r\n            if (user.checkpoint < finish) {\r\n                uint256 _amount = user.deposits[i].amount;\r\n                uint256 from = user.deposits[i].start > user.checkpoint\r\n                    ? user.deposits[i].start\r\n                    : user.checkpoint;\r\n                uint256 to = finish < block.timestamp\r\n                    ? finish\r\n                    : block.timestamp;\r\n                if (from < to) {\r\n                    totalAmount = totalAmount.add(_amount);\r\n                }\r\n            }\r\n        }\r\n\r\n        return totalAmount;\r\n    }\r\n\r\n    function getUserTotalWithdrawn(\r\n        address userAddress\r\n    ) public view returns (uint256) {\r\n        return users[userAddress].withdrawn;\r\n    }\r\n\r\n    function getUserCheckpoint(\r\n        address userAddress\r\n    ) external view returns (uint256) {\r\n        return users[userAddress].checkpoint;\r\n    }\r\n\r\n    function getUserReferrer(\r\n        address userAddress\r\n    ) external view returns (address) {\r\n        return users[userAddress].referrer;\r\n    }\r\n\r\n    function getUserDownlineCount(\r\n        address userAddress\r\n    ) external view returns (uint256[2] memory referrals) {\r\n        return (users[userAddress].levels);\r\n    }\r\n\r\n    function getUserTotalReferrals(\r\n        address userAddress\r\n    ) public view returns (uint256) {\r\n        return users[userAddress].levels[0] + users[userAddress].levels[1];\r\n    }\r\n\r\n    function getUserReferralBonus(\r\n        address userAddress\r\n    ) public view returns (uint256) {\r\n        return users[userAddress].bonus;\r\n    }\r\n\r\n    function getUserReferralTotalBonus(\r\n        address userAddress\r\n    ) external view returns (uint256) {\r\n        return users[userAddress].totalBonus;\r\n    }\r\n\r\n    function getUserReferralWithdrawn(\r\n        address userAddress\r\n    ) external view returns (uint256) {\r\n        return users[userAddress].totalBonus.sub(users[userAddress].bonus);\r\n    }\r\n\r\n    function getUserAvailable(\r\n        address userAddress\r\n    ) external view returns (uint256) {\r\n        return\r\n            getUserReferralBonus(userAddress).add(\r\n                getUserDividends(userAddress)\r\n            );\r\n    }\r\n\r\n    function getUserAmountOfDeposits(\r\n        address userAddress\r\n    ) external view returns (uint256) {\r\n        return users[userAddress].deposits.length;\r\n    }\r\n\r\n    function getUserTotalDeposits(\r\n        address userAddress\r\n    ) public view returns (uint256 amount) {\r\n        for (uint256 i = 0; i < users[userAddress].deposits.length; i++) {\r\n            amount = amount.add(users[userAddress].deposits[i].amount);\r\n        }\r\n    }\r\n\r\n    function getUserAvaibleDividens(\r\n        address userAddress\r\n    ) public view returns (uint256 amount) {\r\n        return available[userAddress];\r\n    }\r\n\r\n    function getUserDepositInfo(\r\n        address userAddress,\r\n        uint8 index_\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            uint8 plan,\r\n            uint256 percent,\r\n            uint256 amount,\r\n            uint256 start,\r\n            uint256 finish\r\n        )\r\n    {\r\n        User storage user = users[userAddress];\r\n\r\n        plan = user.deposits[index_].plan;\r\n        percent = plans[plan].percent;\r\n        amount = user.deposits[index_].amount;\r\n        start = user.deposits[index_].start;\r\n        finish = user.deposits[index_].start.add(\r\n            plans[user.deposits[index_].plan].time.mul(TIME_STEP)\r\n        );\r\n    }\r\n\r\n    function getUserActions(\r\n        address userAddress,\r\n        uint256 index\r\n    )\r\n        external\r\n        view\r\n        returns (uint8[] memory, uint256[] memory, uint256[] memory)\r\n    {\r\n        require(index > 0, \"wrong index\");\r\n        User storage user = users[userAddress];\r\n        uint256 start;\r\n        uint256 end;\r\n        uint256 cnt = 50;\r\n\r\n        start = (index - 1) * cnt;\r\n        if (user.actions.length < (index * cnt)) {\r\n            end = user.actions.length;\r\n        } else {\r\n            end = index * cnt;\r\n        }\r\n\r\n        uint8[] memory types = new uint8[](end - start);\r\n        uint256[] memory amount = new uint256[](end - start);\r\n        uint256[] memory date = new uint256[](end - start);\r\n\r\n        for (uint256 i = start; i < end; i++) {\r\n            types[i - start] = user.actions[i].types;\r\n            amount[i - start] = user.actions[i].amount;\r\n            date[i - start] = user.actions[i].date;\r\n        }\r\n        return (types, amount, date);\r\n    }\r\n\r\n    function getUserActionLength(\r\n        address userAddress\r\n    ) external view returns (uint256) {\r\n        return users[userAddress].actions.length;\r\n    }\r\n\r\n    function getSiteInfo()\r\n        external\r\n        view\r\n        returns (uint256 _totalInvested, uint256 _totalBonus)\r\n    {\r\n        return (\r\n            totalInvested,\r\n            totalInvested.mul(TOTAL_REF_BONUS).div(PERCENTS_DIVIDER)\r\n        );\r\n    }\r\n\r\n    function getUserInfo(\r\n        address userAddress\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            uint256 totalDeposit,\r\n            uint256 totalWithdrawn,\r\n            uint256 totalReferrals\r\n        )\r\n    {\r\n        return (\r\n            getUserTotalDeposits(userAddress),\r\n            getUserTotalWithdrawn(userAddress),\r\n            getUserTotalReferrals(userAddress)\r\n        );\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"comm_wallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dev_wallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ins_wallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"FeePayed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"plan\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NewDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Newbie\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RefBonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawnRef\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEV_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INVEST_MIN_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INVEST_MORE_THEN_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENTS_DIVIDER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROJECT_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TIME_STEP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"changeCommissionWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"changeDevWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"changeInsuranceWalletWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"commissionWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id_\",\"type\":\"uint256\"}],\"name\":\"getPlanInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSiteInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalInvested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalBonus\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserActionLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getUserActions\",\"outputs\":[{\"internalType\":\"uint8[]\",\"name\":\"\",\"type\":\"uint8[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserActivePlansAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserAmountOfDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserAvaibleDividens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserAvailable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserCheckpoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"index_\",\"type\":\"uint8\"}],\"name\":\"getUserDepositInfo\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"plan\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finish\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserDividends\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserDownlineCount\",\"outputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"referrals\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWithdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalReferrals\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserReferralBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserReferralTotalBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserReferralWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserReferrer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTotalDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTotalReferrals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTotalWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"insuranceWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"planId\",\"type\":\"uint8\"}],\"name\":\"invest\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"state\",\"type\":\"uint8\"}],\"name\":\"sendDevWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setInsurance\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earningPercent\",\"type\":\"uint256\"}],\"name\":\"setPlan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInvested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"userInsuranceStatus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawRef\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to_\",\"type\":\"address\"}],\"name\":\"withdrawns\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BNBStake", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000c41845c4251e114a85481aa12c82ed3b5f98c998000000000000000000000000a5c03e75d58388658aa1262e68ee56662a3a726f000000000000000000000000c7493a45b915f6fa9be5772a81b3cfcd4085d753", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://75f67a3bdf54d3a25f6a420053c3a87898fb131a8b0ed0de19e42ef71be08324"}