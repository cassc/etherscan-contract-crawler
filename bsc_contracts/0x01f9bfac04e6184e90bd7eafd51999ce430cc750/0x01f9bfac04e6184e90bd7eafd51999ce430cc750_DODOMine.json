{"SourceCode": "// File: contracts/lib/Ownable.sol\r\n\r\n/*\r\n\r\n    Copyright 2020 DODO ZOO.\r\n    SPDX-License-Identifier: Apache-2.0\r\n\r\n*/\r\n\r\npragma solidity 0.6.9;\r\npragma experimental ABIEncoderV2;\r\n\r\n/**\r\n * @title Ownable\r\n * @author DODO Breeder\r\n *\r\n * @notice Ownership related functions\r\n */\r\ncontract Ownable {\r\n    address public _OWNER_;\r\n    address public _NEW_OWNER_;\r\n\r\n    // ============ Events ============\r\n\r\n    event OwnershipTransferPrepared(address indexed previousOwner, address indexed newOwner);\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    // ============ Modifiers ============\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == _OWNER_, \"NOT_OWNER\");\r\n        _;\r\n    }\r\n\r\n    // ============ Functions ============\r\n\r\n    constructor() internal {\r\n        _OWNER_ = msg.sender;\r\n        emit OwnershipTransferred(address(0), _OWNER_);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) external onlyOwner {\r\n        emit OwnershipTransferPrepared(_OWNER_, newOwner);\r\n        _NEW_OWNER_ = newOwner;\r\n    }\r\n\r\n    function claimOwnership() external {\r\n        require(msg.sender == _NEW_OWNER_, \"INVALID_CLAIM\");\r\n        emit OwnershipTransferred(_OWNER_, _NEW_OWNER_);\r\n        _OWNER_ = _NEW_OWNER_;\r\n        _NEW_OWNER_ = address(0);\r\n    }\r\n}\r\n\r\n// File: contracts/lib/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @author DODO Breeder\r\n *\r\n * @notice Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"MUL_ERROR\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"DIVIDING_ERROR\");\r\n        return a / b;\r\n    }\r\n\r\n    function divCeil(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 quotient = div(a, b);\r\n        uint256 remainder = a - quotient * b;\r\n        if (remainder > 0) {\r\n            return quotient + 1;\r\n        } else {\r\n            return quotient;\r\n        }\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SUB_ERROR\");\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"ADD_ERROR\");\r\n        return c;\r\n    }\r\n\r\n    function sqrt(uint256 x) internal pure returns (uint256 y) {\r\n        uint256 z = x / 2 + 1;\r\n        y = x;\r\n        while (z < y) {\r\n            y = z;\r\n            z = (x / z + z) / 2;\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/lib/DecimalMath.sol\r\n\r\n/**\r\n * @title DecimalMath\r\n * @author DODO Breeder\r\n *\r\n * @notice Functions for fixed point number with 18 decimals\r\n */\r\nlibrary DecimalMath {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 internal constant ONE = 10**18;\r\n    uint256 internal constant ONE2 = 10**36;\r\n\r\n    function mulFloor(uint256 target, uint256 d) internal pure returns (uint256) {\r\n        return target.mul(d) / (10**18);\r\n    }\r\n\r\n    function mulCeil(uint256 target, uint256 d) internal pure returns (uint256) {\r\n        return target.mul(d).divCeil(10**18);\r\n    }\r\n\r\n    function divFloor(uint256 target, uint256 d) internal pure returns (uint256) {\r\n        return target.mul(10**18).div(d);\r\n    }\r\n\r\n    function divCeil(uint256 target, uint256 d) internal pure returns (uint256) {\r\n        return target.mul(10**18).divCeil(d);\r\n    }\r\n\r\n    function reciprocalFloor(uint256 target) internal pure returns (uint256) {\r\n        return uint256(10**36).div(target);\r\n    }\r\n\r\n    function reciprocalCeil(uint256 target) internal pure returns (uint256) {\r\n        return uint256(10**36).divCeil(target);\r\n    }\r\n}\r\n\r\n// File: contracts/intf/IERC20.sol\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// File: contracts/lib/SafeERC20.sol\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\r\n        );\r\n    }\r\n\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/DODOToken/DODORewardVault.sol\r\n\r\n\r\n\r\ninterface IDODORewardVault {\r\n    function reward(address to, uint256 amount) external;\r\n}\r\n\r\n\r\ncontract DODORewardVault is Ownable {\r\n    using SafeERC20 for IERC20;\r\n\r\n    address public dodoToken;\r\n\r\n    constructor(address _dodoToken) public {\r\n        dodoToken = _dodoToken;\r\n    }\r\n\r\n    function reward(address to, uint256 amount) external onlyOwner {\r\n        IERC20(dodoToken).safeTransfer(to, amount);\r\n    }\r\n}\r\n\r\n// File: contracts/DODOToken/DODOMine.sol\r\n\r\ncontract DODOMine is Ownable {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    // Info of each user.\r\n    struct UserInfo {\r\n        uint256 amount; // How many LP tokens the user has provided.\r\n        uint256 rewardDebt; // Reward debt. See explanation below.\r\n        //\r\n        // We do some fancy math here. Basically, any point in time, the amount of DODOs\r\n        // entitled to a user but is pending to be distributed is:\r\n        //\r\n        //   pending reward = (user.amount * pool.accDODOPerShare) - user.rewardDebt\r\n        //\r\n        // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\r\n        //   1. The pool's `accDODOPerShare` (and `lastRewardBlock`) gets updated.\r\n        //   2. User receives the pending reward sent to his/her address.\r\n        //   3. User's `amount` gets updated.\r\n        //   4. User's `rewardDebt` gets updated.\r\n    }\r\n\r\n    // Info of each pool.\r\n    struct PoolInfo {\r\n        address lpToken; // Address of LP token contract.\r\n        uint256 allocPoint; // How many allocation points assigned to this pool. DODOs to distribute per block.\r\n        uint256 lastRewardBlock; // Last block number that DODOs distribution occurs.\r\n        uint256 accDODOPerShare; // Accumulated DODOs per share, times 1e12. See below.\r\n    }\r\n\r\n    address public dodoRewardVault;\r\n    uint256 public dodoPerBlock;\r\n\r\n    // Info of each pool.\r\n    PoolInfo[] public poolInfos;\r\n    mapping(address => uint256) public lpTokenRegistry;\r\n\r\n    // Info of each user that stakes LP tokens.\r\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\r\n    mapping(address => uint256) public realizedReward;\r\n\r\n    // Total allocation points. Must be the sum of all allocation points in all pools.\r\n    uint256 public totalAllocPoint = 0;\r\n    // The block number when DODO mining starts.\r\n    uint256 public startBlock;\r\n\r\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event Claim(address indexed user, uint256 amount);\r\n\r\n    constructor(address _dodoToken, uint256 _startBlock) public {\r\n        dodoRewardVault = address(new DODORewardVault(_dodoToken));\r\n        startBlock = _startBlock;\r\n    }\r\n\r\n    // ============ Modifiers ============\r\n\r\n    modifier lpTokenExist(address lpToken) {\r\n        require(lpTokenRegistry[lpToken] > 0, \"LP Token Not Exist\");\r\n        _;\r\n    }\r\n\r\n    modifier lpTokenNotExist(address lpToken) {\r\n        require(lpTokenRegistry[lpToken] == 0, \"LP Token Already Exist\");\r\n        _;\r\n    }\r\n\r\n    // ============ Helper ============\r\n\r\n    function poolLength() external view returns (uint256) {\r\n        return poolInfos.length;\r\n    }\r\n\r\n    function getPid(address _lpToken) public view lpTokenExist(_lpToken) returns (uint256) {\r\n        return lpTokenRegistry[_lpToken] - 1;\r\n    }\r\n\r\n    function getUserLpBalance(address _lpToken, address _user) public view returns (uint256) {\r\n        uint256 pid = getPid(_lpToken);\r\n        return userInfo[pid][_user].amount;\r\n    }\r\n\r\n    // ============ Ownable ============\r\n\r\n    function addLpToken(\r\n        address _lpToken,\r\n        uint256 _allocPoint,\r\n        bool _withUpdate\r\n    ) public lpTokenNotExist(_lpToken) onlyOwner {\r\n        if (_withUpdate) {\r\n            massUpdatePools();\r\n        }\r\n        uint256 lastRewardBlock = block.number > startBlock ? block.number : startBlock;\r\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\r\n        poolInfos.push(\r\n            PoolInfo({\r\n                lpToken: _lpToken,\r\n                allocPoint: _allocPoint,\r\n                lastRewardBlock: lastRewardBlock,\r\n                accDODOPerShare: 0\r\n            })\r\n        );\r\n        lpTokenRegistry[_lpToken] = poolInfos.length;\r\n    }\r\n\r\n    function setLpToken(\r\n        address _lpToken,\r\n        uint256 _allocPoint,\r\n        bool _withUpdate\r\n    ) public onlyOwner {\r\n        if (_withUpdate) {\r\n            massUpdatePools();\r\n        }\r\n        uint256 pid = getPid(_lpToken);\r\n        totalAllocPoint = totalAllocPoint.sub(poolInfos[pid].allocPoint).add(_allocPoint);\r\n        poolInfos[pid].allocPoint = _allocPoint;\r\n    }\r\n\r\n    function setReward(uint256 _dodoPerBlock, bool _withUpdate) external onlyOwner {\r\n        if (_withUpdate) {\r\n            massUpdatePools();\r\n        }\r\n        dodoPerBlock = _dodoPerBlock;\r\n    }\r\n\r\n    // ============ View Rewards ============\r\n\r\n    function getPendingReward(address _lpToken, address _user) external view returns (uint256) {\r\n        uint256 pid = getPid(_lpToken);\r\n        PoolInfo storage pool = poolInfos[pid];\r\n        UserInfo storage user = userInfo[pid][_user];\r\n        uint256 accDODOPerShare = pool.accDODOPerShare;\r\n        uint256 lpSupply = IERC20(pool.lpToken).balanceOf(address(this));\r\n        if (block.number > pool.lastRewardBlock && lpSupply != 0) {\r\n            uint256 DODOReward = block\r\n                .number\r\n                .sub(pool.lastRewardBlock)\r\n                .mul(dodoPerBlock)\r\n                .mul(pool.allocPoint)\r\n                .div(totalAllocPoint);\r\n            accDODOPerShare = accDODOPerShare.add(DecimalMath.divFloor(DODOReward, lpSupply));\r\n        }\r\n        return DecimalMath.mulFloor(user.amount, accDODOPerShare).sub(user.rewardDebt);\r\n    }\r\n\r\n    function getAllPendingReward(address _user) external view returns (uint256) {\r\n        uint256 length = poolInfos.length;\r\n        uint256 totalReward = 0;\r\n        for (uint256 pid = 0; pid < length; ++pid) {\r\n            if (userInfo[pid][_user].amount == 0 || poolInfos[pid].allocPoint == 0) {\r\n                continue; // save gas\r\n            }\r\n            PoolInfo storage pool = poolInfos[pid];\r\n            UserInfo storage user = userInfo[pid][_user];\r\n            uint256 accDODOPerShare = pool.accDODOPerShare;\r\n            uint256 lpSupply = IERC20(pool.lpToken).balanceOf(address(this));\r\n            if (block.number > pool.lastRewardBlock && lpSupply != 0) {\r\n                uint256 DODOReward = block\r\n                    .number\r\n                    .sub(pool.lastRewardBlock)\r\n                    .mul(dodoPerBlock)\r\n                    .mul(pool.allocPoint)\r\n                    .div(totalAllocPoint);\r\n                accDODOPerShare = accDODOPerShare.add(DecimalMath.divFloor(DODOReward, lpSupply));\r\n            }\r\n            totalReward = totalReward.add(\r\n                DecimalMath.mulFloor(user.amount, accDODOPerShare).sub(user.rewardDebt)\r\n            );\r\n        }\r\n        return totalReward;\r\n    }\r\n\r\n    function getRealizedReward(address _user) external view returns (uint256) {\r\n        return realizedReward[_user];\r\n    }\r\n\r\n    function getDlpMiningSpeed(address _lpToken) external view returns (uint256) {\r\n        uint256 pid = getPid(_lpToken);\r\n        PoolInfo storage pool = poolInfos[pid];\r\n        return dodoPerBlock.mul(pool.allocPoint).div(totalAllocPoint);\r\n    }\r\n\r\n    // ============ Update Pools ============\r\n\r\n    // Update reward vairables for all pools. Be careful of gas spending!\r\n    function massUpdatePools() public {\r\n        uint256 length = poolInfos.length;\r\n        for (uint256 pid = 0; pid < length; ++pid) {\r\n            updatePool(pid);\r\n        }\r\n    }\r\n\r\n    // Update reward variables of the given pool to be up-to-date.\r\n    function updatePool(uint256 _pid) public {\r\n        PoolInfo storage pool = poolInfos[_pid];\r\n        if (block.number <= pool.lastRewardBlock) {\r\n            return;\r\n        }\r\n        uint256 lpSupply = IERC20(pool.lpToken).balanceOf(address(this));\r\n        if (lpSupply == 0) {\r\n            pool.lastRewardBlock = block.number;\r\n            return;\r\n        }\r\n        uint256 DODOReward = block\r\n            .number\r\n            .sub(pool.lastRewardBlock)\r\n            .mul(dodoPerBlock)\r\n            .mul(pool.allocPoint)\r\n            .div(totalAllocPoint);\r\n        pool.accDODOPerShare = pool.accDODOPerShare.add(DecimalMath.divFloor(DODOReward, lpSupply));\r\n        pool.lastRewardBlock = block.number;\r\n    }\r\n\r\n    // ============ Deposit & Withdraw & Claim ============\r\n    // Deposit & withdraw will also trigger claim\r\n\r\n    function deposit(address _lpToken, uint256 _amount) public {\r\n        uint256 pid = getPid(_lpToken);\r\n        PoolInfo storage pool = poolInfos[pid];\r\n        UserInfo storage user = userInfo[pid][msg.sender];\r\n        updatePool(pid);\r\n        if (user.amount > 0) {\r\n            uint256 pending = DecimalMath.mulFloor(user.amount, pool.accDODOPerShare).sub(\r\n                user.rewardDebt\r\n            );\r\n            safeDODOTransfer(msg.sender, pending);\r\n        }\r\n        IERC20(pool.lpToken).safeTransferFrom(address(msg.sender), address(this), _amount);\r\n        user.amount = user.amount.add(_amount);\r\n        user.rewardDebt = DecimalMath.mulFloor(user.amount, pool.accDODOPerShare);\r\n        emit Deposit(msg.sender, pid, _amount);\r\n    }\r\n\r\n    function withdraw(address _lpToken, uint256 _amount) public {\r\n        uint256 pid = getPid(_lpToken);\r\n        PoolInfo storage pool = poolInfos[pid];\r\n        UserInfo storage user = userInfo[pid][msg.sender];\r\n        require(user.amount >= _amount, \"withdraw too much\");\r\n        updatePool(pid);\r\n        uint256 pending = DecimalMath.mulFloor(user.amount, pool.accDODOPerShare).sub(\r\n            user.rewardDebt\r\n        );\r\n        safeDODOTransfer(msg.sender, pending);\r\n        user.amount = user.amount.sub(_amount);\r\n        user.rewardDebt = DecimalMath.mulFloor(user.amount, pool.accDODOPerShare);\r\n        IERC20(pool.lpToken).safeTransfer(address(msg.sender), _amount);\r\n        emit Withdraw(msg.sender, pid, _amount);\r\n    }\r\n\r\n    function withdrawAll(address _lpToken) public {\r\n        uint256 balance = getUserLpBalance(_lpToken, msg.sender);\r\n        withdraw(_lpToken, balance);\r\n    }\r\n\r\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\r\n    function emergencyWithdraw(address _lpToken) public {\r\n        uint256 pid = getPid(_lpToken);\r\n        PoolInfo storage pool = poolInfos[pid];\r\n        UserInfo storage user = userInfo[pid][msg.sender];\r\n        IERC20(pool.lpToken).safeTransfer(address(msg.sender), user.amount);\r\n        user.amount = 0;\r\n        user.rewardDebt = 0;\r\n    }\r\n\r\n    function claim(address _lpToken) public {\r\n        uint256 pid = getPid(_lpToken);\r\n        if (userInfo[pid][msg.sender].amount == 0 || poolInfos[pid].allocPoint == 0) {\r\n            return; // save gas\r\n        }\r\n        PoolInfo storage pool = poolInfos[pid];\r\n        UserInfo storage user = userInfo[pid][msg.sender];\r\n        updatePool(pid);\r\n        uint256 pending = DecimalMath.mulFloor(user.amount, pool.accDODOPerShare).sub(\r\n            user.rewardDebt\r\n        );\r\n        user.rewardDebt = DecimalMath.mulFloor(user.amount, pool.accDODOPerShare);\r\n        safeDODOTransfer(msg.sender, pending);\r\n    }\r\n\r\n    function claimAll() public {\r\n        uint256 length = poolInfos.length;\r\n        uint256 pending = 0;\r\n        for (uint256 pid = 0; pid < length; ++pid) {\r\n            if (userInfo[pid][msg.sender].amount == 0 || poolInfos[pid].allocPoint == 0) {\r\n                continue; // save gas\r\n            }\r\n            PoolInfo storage pool = poolInfos[pid];\r\n            UserInfo storage user = userInfo[pid][msg.sender];\r\n            updatePool(pid);\r\n            pending = pending.add(\r\n                DecimalMath.mulFloor(user.amount, pool.accDODOPerShare).sub(user.rewardDebt)\r\n            );\r\n            user.rewardDebt = DecimalMath.mulFloor(user.amount, pool.accDODOPerShare);\r\n        }\r\n        safeDODOTransfer(msg.sender, pending);\r\n    }\r\n\r\n    // Safe DODO transfer function\r\n    function safeDODOTransfer(address _to, uint256 _amount) internal {\r\n        IDODORewardVault(dodoRewardVault).reward(_to, _amount);\r\n        realizedReward[_to] = realizedReward[_to].add(_amount);\r\n        emit Claim(_to, _amount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dodoToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferPrepared\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_NEW_OWNER_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_OWNER_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"addLpToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dodoPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dodoRewardVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getAllPendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"}],\"name\":\"getDlpMiningSpeed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getPendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"}],\"name\":\"getPid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getRealizedReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserLpBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lpTokenRegistry\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfos\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accDODOPerShare\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"realizedReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"setLpToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dodoPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"setReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"}],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DODOMine", "CompilerVersion": "v0.6.9+commit.3e3065ac", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000067ee3Cb086F8a16f34beE3ca72FAD36F7Db929e200000000000000000000000000000000000000000000000000000000004c6c74", "EVMVersion": "Default", "Library": "", "LicenseType": "Apache-2.0", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f3fbf66dfa95cd38ba7310ca43b399e7d853be03baad543c0dc705e1a570db49"}