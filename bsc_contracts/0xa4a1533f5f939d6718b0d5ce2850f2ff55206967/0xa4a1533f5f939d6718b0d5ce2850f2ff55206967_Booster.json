{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-0.6/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-0.6/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-0.6/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-0.6/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/vendor/Booster.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"./interfaces/Interfaces.sol\\\";\\nimport \\\"@openzeppelin/contracts-0.6/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts-0.6/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-0.6/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts-0.6/token/ERC20/SafeERC20.sol\\\";\\n\\n/**\\n * @title   Booster\\n * @author  ConvexFinance -> WombexFinance\\n * @notice  Main deposit contract; keeps track of pool info & user deposits; distributes rewards.\\n * @dev     They say all paths lead to Rome, and the Booster is no different. This is where it all goes down.\\n *          It is responsible for tracking all the pools, it collects rewards from all pools and redirects it.\\n */\\ncontract Booster{\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n    using SafeMath for uint256;\\n\\n    uint256 public constant MAX_PENALTY_SHARE = 3000;\\n    uint256 public constant DENOMINATOR = 10000;\\n\\n    address public immutable crv;\\n    address public immutable cvx;\\n    address public immutable weth;\\n    address public immutable voterProxy;\\n\\n    address public owner;\\n    address public feeManager;\\n    address public poolManager;\\n    address public rewardFactory;\\n    address public tokenFactory;\\n    address public earmarkDelegate;\\n    address public crvLockRewards;\\n    address public cvxLocker;\\n    address public reservoirMinter;\\n    address public mintManager;\\n\\n    mapping(address => bool) public voteDelegate;\\n\\n    IExtraRewardsDistributor public extraRewardsDist;\\n\\n    uint256 public penaltyShare = 0;\\n    mapping(uint256 => uint256) public customPenaltyShare;\\n\\n    bool public earmarkOnDeposit;\\n\\n    uint256 public minMintRatio;\\n    uint256 public maxMintRatio;\\n    uint256 public mintRatio;\\n    bool public paused;\\n\\n    mapping(uint256 => uint256) public customMintRatio;\\n\\n    bool public isShutdown;\\n\\n    struct PoolInfo {\\n        address lptoken;\\n        address token;\\n        address gauge;\\n        address crvRewards;\\n        bool shutdown;\\n    }\\n\\n    //index(pid) -> pool\\n    PoolInfo[] public poolInfo;\\n    mapping(address => bool) public votingMap;\\n\\n    mapping(address => address[]) public lpPendingRewardTokens;\\n    mapping(address => mapping(address => uint256)) public lpPendingRewards;\\n\\n    event Deposited(address indexed user, uint256 indexed poolid, uint256 amount);\\n    event Withdrawn(address indexed user, uint256 indexed poolid, uint256 amount);\\n\\n    event PoolAdded(address indexed lpToken, address gauge, address token, address crvRewards, uint256 pid);\\n    event PoolShutdown(uint256 indexed poolId);\\n    event RewardMigrate(address indexed crvRewards, address indexed newBooster, uint256 indexed poolId);\\n\\n    event OwnerUpdated(address newOwner);\\n    event FeeManagerUpdated(address newFeeManager);\\n    event PoolManagerUpdated(address newPoolManager);\\n    event FactoriesUpdated(address rewardFactory, address tokenFactory);\\n    event ExtraRewardsDistributorUpdated(address newDist);\\n    event LpPendingRewardTokensUpdated(address indexed lpToken, address[] pendingRewardTokens);\\n    event PenaltyShareUpdated(uint256 newPenalty);\\n    event VoteDelegateUpdated(address voteDelegate, bool enabled);\\n    event EarmarkDelegateUpdated(address newEarmarkDelegate);\\n    event VotingMapUpdated(address voting, bool valid);\\n    event LockRewardContractsUpdated(address lockRewards, address cvxLocker);\\n    event MintParamsUpdated(uint256 mintRatio, address reservoirMinter, address mintManager);\\n    event SetPaused(bool paused);\\n    event CustomMintRatioUpdated(uint256 indexed pid, uint256 mintRatio);\\n    event CustomPenaltyShareUpdated(uint256 indexed pid, uint256 penaltyShare);\\n    event SetEarmarkOnDeposit(bool earmarkOnDeposit);\\n    event FeeInfoUpdated(address feeDistro, address lockFees, address feeToken);\\n    event FeeInfoChanged(address feeToken, bool active);\\n\\n    event EarmarkRewards(uint256 indexed pid, address indexed lpToken, address indexed rewardToken, uint256 amount);\\n    event EarmarkRewardsTransfer(uint256 indexed pid, address indexed lpToken, address indexed rewardToken, uint256 amount, address distro, bool queue);\\n    event RewardClaimed(uint256 indexed pid, address indexed user, uint256 amount, bool indexed lock, uint256 mintAmount, uint256 penalty);\\n    event MinterMint(address indexed recipient, uint256 amount);\\n\\n    /**\\n     * @dev Constructor doing what constructors do. It is noteworthy that\\n     *      a lot of basic config is set to 0 - expecting subsequent calls to setFeeInfo etc.\\n     * @param _voterProxy             VoterProxy (locks the crv and adds to all gauges)\\n     * @param _reservoirMinter        Reservoir\\n     * @param _cvx                    CVX/WMX token\\n     * @param _crv                    CRV/WOM\\n     * @param _weth                   WETH\\n     * @param _minMintRatio           Min mint ratio\\n     * @param _maxMintRatio           Max mint ratio\\n     */\\n    constructor(\\n        address _voterProxy,\\n        address _reservoirMinter,\\n        address _cvx,\\n        address _crv,\\n        address _weth,\\n        uint256 _minMintRatio,\\n        uint256 _maxMintRatio\\n    ) public {\\n        voterProxy = _voterProxy;\\n        reservoirMinter = _reservoirMinter;\\n        cvx = _cvx;\\n        crv = _crv;\\n        weth = _weth;\\n        isShutdown = false;\\n\\n        minMintRatio = _minMintRatio;\\n        maxMintRatio = _maxMintRatio;\\n\\n        owner = msg.sender;\\n        feeManager = msg.sender;\\n        poolManager = msg.sender;\\n\\n        emit OwnerUpdated(msg.sender);\\n        emit FeeManagerUpdated(msg.sender);\\n        emit PoolManagerUpdated(msg.sender);\\n    }\\n\\n\\n    /// SETTER SECTION ///\\n\\n    /**\\n     * @notice Owner is responsible for setting initial config, updating vote delegate and shutting system\\n     */\\n    function setOwner(address _owner) external {\\n        require(msg.sender == owner, \\\"!auth\\\");\\n        owner = _owner;\\n\\n        emit OwnerUpdated(_owner);\\n    }\\n\\n    /**\\n     * @notice Fee Manager can update the fees (lockIncentive, stakeIncentive, earmarkIncentive, platformFee)\\n     */\\n    function setFeeManager(address _feeM) external {\\n        require(msg.sender == owner, \\\"!auth\\\");\\n        feeManager = _feeM;\\n\\n        emit FeeManagerUpdated(_feeM);\\n    }\\n\\n    /**\\n     * @notice Pool manager is responsible for adding new pools\\n     */\\n    function setPoolManager(address _poolM) external {\\n        require(msg.sender == poolManager || msg.sender == owner, \\\"!auth\\\");\\n        poolManager = _poolM;\\n\\n        emit PoolManagerUpdated(_poolM);\\n    }\\n\\n    /**\\n     * @notice Factories are used when deploying new pools.\\n     */\\n    function setFactories(address _rfactory, address _tfactory) external {\\n        require(msg.sender == owner, \\\"!auth\\\");\\n        require(rewardFactory == address(0), \\\"!zero\\\");\\n\\n        //reward factory only allow this to be called once even if owner\\n        //removes ability to inject malicious staking contracts\\n        //token factory can also be immutable\\n        rewardFactory = _rfactory;\\n        tokenFactory = _tfactory;\\n\\n        emit FactoriesUpdated(_rfactory, _tfactory);\\n    }\\n\\n    /**\\n     * @notice Extra rewards distributor handles cvx/wmx penalty\\n     */\\n    function setExtraRewardsDistributor(address _dist) external {\\n        require(msg.sender==owner, \\\"!auth\\\");\\n        extraRewardsDist = IExtraRewardsDistributor(_dist);\\n\\n        IERC20(cvx).safeApprove(_dist, 0);\\n        IERC20(cvx).safeApprove(_dist, type(uint256).max);\\n\\n        emit ExtraRewardsDistributorUpdated(_dist);\\n    }\\n\\n    /**\\n     * @notice Extra rewards distributor handles cvx/wmx penalty\\n     */\\n    function setRewardClaimedPenalty(uint256 _penaltyShare) external {\\n        require(msg.sender==owner, \\\"!auth\\\");\\n        require(_penaltyShare <= MAX_PENALTY_SHARE, \\\">max\\\");\\n        penaltyShare = _penaltyShare;\\n\\n        emit PenaltyShareUpdated(_penaltyShare);\\n    }\\n\\n    function setRewardTokenPausedInPools(address[] memory _rewardPools, address _token, bool _paused) external {\\n        require(msg.sender==owner, \\\"!auth\\\");\\n\\n        for (uint256 i = 0; i < _rewardPools.length; i++) {\\n            IRewards(_rewardPools[i]).setRewardTokenPaused(_token, _paused);\\n        }\\n    }\\n\\n    /**\\n     * @notice Vote Delegate has the rights to cast votes on the VoterProxy via the Booster\\n     */\\n    function setVoteDelegate(address _voteDelegate, bool _enabled) external {\\n        require(msg.sender==owner, \\\"!auth\\\");\\n        voteDelegate[_voteDelegate] = _enabled;\\n\\n        emit VoteDelegateUpdated(_voteDelegate, _enabled);\\n    }\\n\\n    /**\\n     * @notice Vote Delegate has the rights to cast votes on the VoterProxy via the Booster\\n     */\\n    function setVotingValid(address _voting, bool _valid) external {\\n        require(msg.sender == owner || voteDelegate[msg.sender], \\\"!auth\\\");\\n        votingMap[_voting] = _valid;\\n\\n        emit VotingMapUpdated(_voting, _valid);\\n    }\\n\\n    /**\\n     * @notice Earmark Delegate has the rights to cast claim and distribute VoterProxy rewards\\n     */\\n    function setEarmarkDelegate(address _earmarkDelegate) external {\\n        require(msg.sender==owner, \\\"!auth\\\");\\n        earmarkDelegate = _earmarkDelegate;\\n\\n        emit EarmarkDelegateUpdated(_earmarkDelegate);\\n    }\\n\\n    /**\\n     * @notice Set tokens to cache pending rewards\\n     */\\n    function setLpPendingRewardTokens(address _lpToken, address[] memory _addresses) external {\\n        require(msg.sender==owner, \\\"!auth\\\");\\n        lpPendingRewardTokens[_lpToken] = _addresses;\\n\\n        emit LpPendingRewardTokensUpdated(_lpToken, _addresses);\\n    }\\n\\n    /**\\n     * @notice Set tokens to cache pending rewards\\n     */\\n    function updateLpPendingRewardTokensByGauge(uint256 _pid) external {\\n        require(msg.sender==owner, \\\"!auth\\\");\\n        PoolInfo storage p = poolInfo[_pid];\\n        lpPendingRewardTokens[p.lptoken] = IStaker(voterProxy).getGaugeRewardTokens(p.lptoken, p.gauge);\\n\\n        emit LpPendingRewardTokensUpdated(p.lptoken, lpPendingRewardTokens[p.lptoken]);\\n    }\\n\\n    /**\\n     * @notice Only called once, to set the address of cvxCrv/wmxWOM (lockRewards)\\n     */\\n    function setLockRewardContracts(address _crvLockRewards, address _cvxLocker) external {\\n        require(msg.sender == owner, \\\"!auth\\\");\\n\\n        //reward contracts are immutable or else the owner\\n        //has a means to redeploy and mint cvx/wmx via rewardClaimed()\\n        if (crvLockRewards == address(0)){\\n            crvLockRewards = _crvLockRewards;\\n            cvxLocker = _cvxLocker;\\n            IERC20(cvx).approve(cvxLocker, type(uint256).max);\\n            emit LockRewardContractsUpdated(_crvLockRewards, _cvxLocker);\\n        }\\n    }\\n\\n    /**\\n     * @notice Change mint ratio in boundaries\\n     */\\n    function setMintParams(uint256 _mintRatio, address _reservoirMinter, address _mintManager) external {\\n        require(msg.sender == owner, \\\"!auth\\\");\\n        if (_mintRatio != 0) {\\n            require(_mintRatio >= minMintRatio && _mintRatio <= maxMintRatio, \\\"!boundaries\\\");\\n        }\\n\\n        mintRatio = _mintRatio;\\n        reservoirMinter = _reservoirMinter;\\n        mintManager = _mintManager;\\n        emit MintParamsUpdated(_mintRatio, _reservoirMinter, _mintManager);\\n    }\\n\\n    /**\\n     * @notice Change mint ratio in boundaries\\n     */\\n    function setPaused(bool _paused) external {\\n        require(msg.sender == owner, \\\"!auth\\\");\\n        paused = _paused;\\n        emit SetPaused(_paused);\\n    }\\n\\n    /**\\n     * @notice Change mint ratio for multiple pools\\n     */\\n    function setCustomMintRatioMultiple(uint256[] memory _pids, uint256[] memory _mintRatios) external {\\n        require(msg.sender == owner, \\\"!auth\\\");\\n\\n        uint256 len = _pids.length;\\n        require(len == _mintRatios.length, \\\"!len\\\");\\n\\n        for(uint256 i = 0; i < len; i++) {\\n            if (_mintRatios[i] != 0) {\\n                require(_mintRatios[i] >= minMintRatio && _mintRatios[i] <= maxMintRatio, \\\"!boundaries\\\");\\n            }\\n\\n            customMintRatio[_pids[i]] = _mintRatios[i];\\n            emit CustomMintRatioUpdated(_pids[i], _mintRatios[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Change penalty share for multiple pools\\n     */\\n    function setCustomPenaltyShareMultiple(uint256[] memory _pids, uint256[] memory _penaltyShares) external {\\n        require(msg.sender == owner, \\\"!auth\\\");\\n\\n        uint256 len = _pids.length;\\n        require(len == _penaltyShares.length, \\\"!len\\\");\\n\\n        for(uint256 i = 0; i < len; i++) {\\n            customPenaltyShare[_pids[i]] = _penaltyShares[i];\\n            emit CustomPenaltyShareUpdated(_pids[i], _penaltyShares[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Owner can set earmarkOnDeposit\\n     * @param _earmarkOnDeposit   Call earmark on deposit or not\\n     */\\n    function setEarmarkOnDeposit(bool _earmarkOnDeposit) external{\\n        require(msg.sender == owner, \\\"!auth\\\");\\n        earmarkOnDeposit = _earmarkOnDeposit;\\n        emit SetEarmarkOnDeposit(_earmarkOnDeposit);\\n    }\\n\\n    /// END SETTER SECTION ///\\n\\n    /**\\n     * @notice Called by the PoolManager (i.e. PoolManagerProxy) to add a new pool - creates all the required\\n     *         contracts (DepositToken, RewardPool) and then adds to the list!\\n     */\\n    function addPool(address _lptoken, address _gauge) external returns (uint256) {\\n        //the next pool's pid\\n        uint256 pid = poolInfo.length;\\n\\n        //create a tokenized deposit\\n        address token = ITokenFactory(tokenFactory).CreateDepositToken(_lptoken);\\n        //create a reward contract for crv rewards\\n        address newRewardPool = IRewardFactory(rewardFactory).CreateCrvRewards(pid,token,_lptoken);\\n\\n        return addCreatedPool(_lptoken, _gauge, token, newRewardPool);\\n    }\\n\\n\\n    /**\\n     * @notice Called by the PoolManager (i.e. PoolManagerProxy) to add a new pool - creates all the required\\n     *         contracts (DepositToken, RewardPool) and then adds to the list!\\n     */\\n    function addCreatedPool(address _lptoken, address _gauge, address _token, address _crvRewards) public returns (uint256){\\n        require(msg.sender == poolManager && !isShutdown, \\\"!add\\\");\\n        require(_gauge != address(0) && _lptoken != address(0),\\\"!param\\\");\\n\\n        //the next pool's pid\\n        uint256 pid = poolInfo.length;\\n\\n        if (IRewards(_crvRewards).pid() != pid) {\\n            IRewards(_crvRewards).updateOperatorData(address(this), pid);\\n        }\\n\\n        IERC20(_token).safeApprove(_crvRewards, 0);\\n        IERC20(_token).safeApprove(_crvRewards, type(uint256).max);\\n\\n        //add the new pool\\n        poolInfo.push(\\n            PoolInfo({\\n                lptoken: _lptoken,\\n                token: _token,\\n                gauge: _gauge,\\n                crvRewards: _crvRewards,\\n                shutdown: false\\n            })\\n        );\\n\\n        emit PoolAdded(_lptoken, _gauge, _token, _crvRewards, pid);\\n        return poolInfo.length.sub(1);\\n    }\\n\\n    /**\\n     * @notice Shuts down the pool by withdrawing everything from the gauge to here (can later be\\n     *         claimed from depositors by using the withdraw fn) and marking it as shut down\\n     */\\n    function shutdownPool(uint256 _pid) external returns(bool) {\\n        require(msg.sender == poolManager, \\\"!auth\\\");\\n        PoolInfo storage pool = poolInfo[_pid];\\n\\n        //withdraw from gauge\\n        IStaker(voterProxy).withdrawAllLp(pool.lptoken,pool.gauge);\\n\\n        pool.shutdown = true;\\n\\n        emit PoolShutdown(_pid);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Shuts down the pool and sets shutdown flag even if withdrawAllLp failed.\\n     */\\n    function forceShutdownPool(uint256 _pid) external returns(bool){\\n        require(msg.sender==poolManager, \\\"!auth\\\");\\n        PoolInfo storage pool = poolInfo[_pid];\\n\\n        //withdraw from gauge\\n        uint128 amount = getLpBalance(pool.gauge, pool.lptoken);\\n        try IStaker(voterProxy).withdrawLp(pool.lptoken, pool.gauge, amount) {} catch {}\\n\\n        pool.shutdown = true;\\n\\n        emit PoolShutdown(_pid);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Shuts down the WHOLE SYSTEM by withdrawing all the LP tokens to here and then allowing\\n     *         for subsequent withdrawal by any depositors.\\n     */\\n    function shutdownSystem() external{\\n        require(msg.sender == owner, \\\"!auth\\\");\\n        isShutdown = true;\\n\\n        for(uint i=0; i < poolInfo.length; i++){\\n            PoolInfo storage pool = poolInfo[i];\\n            if (pool.shutdown) continue;\\n\\n            //withdraw from gauge\\n            uint128 amount = getLpBalance(pool.gauge, pool.lptoken);\\n            try IStaker(voterProxy).withdrawLp(pool.lptoken, pool.gauge, amount) {\\n                pool.shutdown = true;\\n            }catch{}\\n        }\\n    }\\n\\n    function migrateRewards(address[] calldata _rewards, uint256[] calldata _pids, address _newBooster) external {\\n        require(msg.sender == owner, \\\"!auth\\\");\\n        require(isShutdown, \\\"!shutdown\\\");\\n\\n        uint256 len = _rewards.length;\\n        require(len == _pids.length, \\\"!length\\\");\\n\\n        for (uint256 i = 0; i < len; i++) {\\n            if (_rewards[i] == address(0)) {\\n                continue;\\n            }\\n            IRewards(_rewards[i]).updateOperatorData(_newBooster, _pids[i]);\\n            if (_rewards[i] != crvLockRewards) {\\n                address stakingToken = IRewards(_rewards[i]).stakingToken();\\n                ITokenMinter(stakingToken).updateOperator(_newBooster);\\n            }\\n            emit RewardMigrate(_rewards[i], _newBooster, _pids[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice  Deposits an \\\"_amount\\\" to a given gauge (specified by _pid), mints a `DepositToken`\\n     *          and subsequently stakes that on BaseRewardPool\\n     */\\n    function deposit(uint256 _pid, uint256 _amount, bool _stake) public returns(bool){\\n        return depositFor(_pid, _amount, _stake, msg.sender);\\n    }\\n\\n    /**\\n     * @notice  Deposits an \\\"_amount\\\" to a given gauge (specified by _pid), mints a `DepositToken`\\n     *          and subsequently stakes that on BaseRewardPool\\n     */\\n    function depositFor(uint256 _pid, uint256 _amount, bool _stake, address _receiver) public returns(bool){\\n        require(!isShutdown,\\\"shutdown\\\");\\n        require(!paused, \\\"paused\\\");\\n        PoolInfo storage pool = poolInfo[_pid];\\n        require(pool.shutdown == false, \\\"closed\\\");\\n\\n        //send to proxy to stake\\n        address lptoken = pool.lptoken;\\n        IERC20(lptoken).safeTransferFrom(msg.sender, voterProxy, _amount);\\n\\n        //stake\\n        address gauge = pool.gauge;\\n        require(gauge != address(0),\\\"!gauge\\\");\\n\\n        uint256[] memory rewardBalancesBefore = getPendingRewards(lptoken);\\n        IStaker(voterProxy).deposit(lptoken, gauge);\\n        _writePendingRewards(lptoken, rewardBalancesBefore);\\n\\n        if (earmarkOnDeposit) {\\n            IBoosterEarmark(earmarkDelegate).earmarkRewardsIfAvailable(_pid);\\n        }\\n\\n        address token = pool.token;\\n        if(_stake){\\n            //mint here and send to rewards on user behalf\\n            ITokenMinter(token).mint(address(this), _amount);\\n            IRewards(pool.crvRewards).stakeFor(_receiver, _amount);\\n        }else{\\n            //add user balance directly\\n            ITokenMinter(token).mint(_receiver, _amount);\\n        }\\n\\n        emit Deposited(_receiver, _pid, _amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice  Withdraws LP tokens from a given PID (& user).\\n     *          1. Burn the cvxLP/wmxLP balance from \\\"_from\\\" (implicit balance check)\\n     *          2. If pool !shutdown.. withdraw from gauge\\n     *          3. Transfer out the LP tokens\\n     */\\n    function _withdraw(uint256 _pid, uint256 _amount, address _from, address _to) internal {\\n        require(!paused, \\\"paused\\\");\\n        PoolInfo storage pool = poolInfo[_pid];\\n        address lptoken = pool.lptoken;\\n        address gauge = pool.gauge;\\n\\n        //remove lp balance\\n        address token = pool.token;\\n        ITokenMinter(token).burn(_from,_amount);\\n\\n        //pull from gauge if not shutdown\\n        // if shutdown tokens will be in this contract\\n        if (!pool.shutdown) {\\n            uint256[] memory rewardBalancesBefore = getPendingRewards(lptoken);\\n            IStaker(voterProxy).withdrawLp(lptoken, gauge, _amount);\\n            _writePendingRewards(lptoken, rewardBalancesBefore);\\n\\n            if (earmarkOnDeposit) {\\n                IBoosterEarmark(earmarkDelegate).earmarkRewards(_pid);\\n            }\\n        }\\n\\n        //return lp tokens\\n        IERC20(lptoken).safeTransfer(_to, _amount);\\n\\n        emit Withdrawn(_to, _pid, _amount);\\n    }\\n\\n    /**\\n     * @notice  Withdraw a given amount from a pool (must already been unstaked from the Reward Pool -\\n     *          BaseRewardPool uses withdrawAndUnwrap to get around this)\\n     */\\n    function withdraw(uint256 _pid, uint256 _amount) public returns(bool){\\n        _withdraw(_pid,_amount,msg.sender,msg.sender);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Allows the actual BaseRewardPool to withdraw and send directly to the user\\n     */\\n    function withdrawTo(uint256 _pid, uint256 _amount, address _to) external returns(bool){\\n        address rewardContract = poolInfo[_pid].crvRewards;\\n        require(msg.sender == rewardContract,\\\"!auth\\\");\\n\\n        _withdraw(_pid,_amount,msg.sender,_to);\\n        return true;\\n    }\\n\\n    function getPendingRewardTokens(address _lptoken) public view returns (address[] memory tokens) {\\n        if (lpPendingRewardTokens[_lptoken].length > 0) {\\n            return lpPendingRewardTokens[_lptoken];\\n        } else {\\n            tokens = new address[](1);\\n            tokens[0] = crv;\\n        }\\n    }\\n\\n    function getPendingRewards(address _lptoken) public view returns (uint256[] memory result) {\\n        address[] memory tokens = getPendingRewardTokens(_lptoken);\\n        uint256 len = tokens.length;\\n        result = new uint256[](len);\\n        for (uint256 i = 0; i < len; i++) {\\n            uint256 balance = IERC20(tokens[i]).balanceOf(voterProxy);\\n            if (tokens[i] == weth) {\\n                balance = balance.add(voterProxy.balance);\\n            }\\n            result[i] = balance;\\n        }\\n    }\\n\\n    function _writePendingRewards(address _lptoken, uint256[] memory _rewardsBefore) internal {\\n        address[] memory tokens = getPendingRewardTokens(_lptoken);\\n        uint256 len = _rewardsBefore.length;\\n        for (uint256 i = 0; i < len; i++) {\\n            address token = tokens[i];\\n            uint256 balance = IERC20(token).balanceOf(voterProxy);\\n            if (token == weth) {\\n                balance = balance.add(voterProxy.balance);\\n            }\\n            lpPendingRewards[_lptoken][token] = lpPendingRewards[_lptoken][token].add(balance.sub(_rewardsBefore[i]));\\n        }\\n    }\\n\\n    /**\\n     * @notice set valid vote hash on VoterProxy\\n     */\\n    function setVote(bytes32 _hash, bool valid) external returns(bool){\\n        require(voteDelegate[msg.sender], \\\"!auth\\\");\\n\\n        IStaker(voterProxy).setVote(_hash, valid);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Delegate address votes on gauge weight via VoterProxy\\n     */\\n    function voteExecute(address _voting, uint256 _value, bytes calldata _data) external payable returns(bytes memory result) {\\n        require(voteDelegate[msg.sender], \\\"!auth\\\");\\n        require(votingMap[_voting], \\\"!voting\\\");\\n\\n        (, result) = IStaker(voterProxy).execute{value:_value}(_voting, _value, _data);\\n        return result;\\n    }\\n\\n    function voterProxyClaimRewards(uint256 _pid, address[] memory _pendingTokens) external returns (uint256[] memory pendingRewards) {\\n        require(earmarkDelegate == msg.sender, \\\"!auth\\\");\\n\\n        PoolInfo storage pool = poolInfo[_pid];\\n        address lptoken = pool.lptoken;\\n\\n        IStaker(voterProxy).claimCrv(lptoken, pool.gauge);\\n\\n        uint256 tLen = _pendingTokens.length;\\n        pendingRewards = new uint256[](tLen);\\n\\n        for (uint256 i = 0; i < tLen; i++) {\\n            pendingRewards[i] = lpPendingRewards[lptoken][_pendingTokens[i]];\\n            if (lpPendingRewards[lptoken][_pendingTokens[i]] > 0) {\\n                lpPendingRewards[lptoken][_pendingTokens[i]] = 0;\\n            }\\n        }\\n    }\\n\\n    function distributeRewards(\\n        uint256 _pid,\\n        address _lpToken,\\n        address _rewardToken,\\n        address[] memory _transferTo,\\n        uint256[] memory _transferAmount,\\n        bool[] memory _callQueue\\n    ) external {\\n        require(!paused, \\\"paused\\\");\\n        require(earmarkDelegate == msg.sender, \\\"!auth\\\");\\n\\n        uint256 tLen = _transferTo.length;\\n        require(tLen == _transferAmount.length && tLen == _callQueue.length, \\\"!len\\\");\\n\\n        uint256 sum = 0;\\n        for (uint256 i = 0; i < tLen; i++) {\\n            if (_transferAmount[i] == 0) {\\n                continue;\\n            }\\n            sum = sum.add(_transferAmount[i]);\\n            if (_callQueue[i]) {\\n                IRewards(_transferTo[i]).queueNewRewards(_rewardToken, _transferAmount[i]);\\n            } else {\\n                IERC20(_rewardToken).safeTransfer(_transferTo[i], _transferAmount[i]);\\n            }\\n            emit EarmarkRewardsTransfer(_pid, _lpToken, _rewardToken, _transferAmount[i], _transferTo[i], _callQueue[i]);\\n        }\\n        emit EarmarkRewards(_pid, _lpToken, _rewardToken, sum);\\n    }\\n\\n    function approveDistribution(address _distro, address[] memory _distributionTokens, uint256 _amount) external {\\n        require(earmarkDelegate == msg.sender, \\\"!auth\\\");\\n\\n        uint256 distTokensLen = _distributionTokens.length;\\n        for (uint256 i = 0; i < distTokensLen; i++) {\\n            IERC20(_distributionTokens[i]).safeApprove(_distro, 0);\\n            if (_amount > 0) {\\n                IERC20(_distributionTokens[i]).safeApprove(_distro, _amount);\\n            }\\n        }\\n    }\\n\\n    function approvePoolsCrvRewardsDistribution(address _token) external {\\n        require(earmarkDelegate == msg.sender, \\\"!auth\\\");\\n\\n        uint256 poolLen = poolInfo.length;\\n        for (uint256 i = 0; i < poolLen; i++) {\\n            IERC20(_token).safeApprove(poolInfo[i].crvRewards, 0);\\n            IERC20(_token).safeApprove(poolInfo[i].crvRewards, type(uint256).max);\\n        }\\n    }\\n\\n    /**\\n     * @notice Callback from reward contract when crv/wom is received.\\n     * @dev    Goes off and mints a relative amount of CVX/WMX based on the distribution schedule.\\n     */\\n    function rewardClaimed(uint256 _pid, address _address, uint256 _amount, bool _lock) external returns(bool){\\n        require(!paused, \\\"paused\\\");\\n        address rewardContract = poolInfo[_pid].crvRewards;\\n        require(msg.sender == rewardContract || msg.sender == crvLockRewards, \\\"!auth\\\");\\n\\n        uint256 mintAmount = _amount;\\n        uint256 poolMintRatio = customMintRatio[_pid];\\n        if (poolMintRatio == 0) {\\n            poolMintRatio = mintRatio;\\n        }\\n        if (poolMintRatio > 0) {\\n            mintAmount = mintAmount.mul(poolMintRatio).div(DENOMINATOR);\\n        }\\n        uint256 poolPenaltyShare = customPenaltyShare[_pid];\\n        if (poolPenaltyShare == 0) {\\n            poolPenaltyShare = penaltyShare;\\n        } else if (poolPenaltyShare == 1) {\\n            poolPenaltyShare = 0;\\n        }\\n\\n        ITokenMinter tokenMinter = reservoirMinter == address(0) ? ITokenMinter(cvx) : ITokenMinter(reservoirMinter);\\n        uint256 penalty;\\n        if (_lock) {\\n            uint256 balanceBefore = IERC20(cvx).balanceOf(address(this));\\n            tokenMinter.mint(address(this), mintAmount);\\n            ICvxLocker(cvxLocker).lock(_address, IERC20(cvx).balanceOf(address(this)).sub(balanceBefore));\\n        } else {\\n            penalty = mintAmount.mul(poolPenaltyShare).div(DENOMINATOR);\\n            mintAmount = mintAmount.sub(penalty);\\n            //mint reward to user, except the penalty\\n            tokenMinter.mint(_address, mintAmount);\\n            if (penalty > 0) {\\n                uint256 balanceBefore = IERC20(cvx).balanceOf(address(this));\\n                tokenMinter.mint(address(this), penalty);\\n                extraRewardsDist.addReward(cvx, IERC20(cvx).balanceOf(address(this)).sub(balanceBefore));\\n            }\\n        }\\n        emit RewardClaimed(_pid, _address, _amount, _lock, mintAmount, penalty);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Allows the owner to mint new `cvx` tokens and allocate them to a specified address.\\n     * @param _address The address to allocate the newly minted tokens to.\\n     * @param _amount The amount of `cvx` tokens to be minted.\\n     * @return A boolean indicating whether or not the operation was successful.\\n     */\\n    function minterMint(address _address, uint256 _amount) external returns(bool){\\n        require(msg.sender == mintManager, \\\"!auth\\\");\\n        ITokenMinter(cvx).mint(_address, _amount);\\n        emit MinterMint(_address, _amount);\\n        return true;\\n    }\\n\\n\\n    function getLpBalance(address _gauge, address _lptoken) public returns (uint128 amount) {\\n        uint256 mwPid = IStaker(voterProxy).lpTokenToPid(_gauge, _lptoken);\\n        (amount, , ,) = IMasterWombat(_gauge).userInfo(mwPid, voterProxy);\\n    }\\n\\n    function poolLength() external view returns (uint256) {\\n        return poolInfo.length;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/vendor/interfaces/Interfaces.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\ninterface IMasterWombat {\\n    function deposit(uint256 _pid, uint256 _amount) external;\\n    function balanceOf(address) external view returns(uint256);\\n    function userInfo(uint256, address) external view returns (uint128 amount, uint128 factor, uint128 rewardDebt, uint128 pendingWom);\\n    function withdraw(uint256 _pid, uint256 _amount) external;\\n    function poolLength() external view returns(uint256);\\n    function poolInfo(uint256 _pid) external view returns (address lpToken, uint96 allocPoint, IMasterWombatRewarder rewarder, uint256 sumOfFactors, uint104 accWomPerShare, uint104 accWomPerFactorShare, uint40 lastRewardTimestamp);\\n    function migrate(uint256[] calldata _pids) external view;\\n    function newMasterWombat() external view returns (address);\\n}\\n\\ninterface IMasterWombatRewarder {\\n    function rewardTokens() external view returns (address[] memory tokens);\\n}\\n\\ninterface IBooster {\\n    function owner() external view returns(address);\\n}\\n\\ninterface IVeWom {\\n    function mint(uint256 amount, uint256 lockDays) external returns (uint256 veWomAmount);\\n    function burn(uint256 slot) external;\\n    function vote(uint256, bool, bool) external; //voteId, support, executeIfDecided\\n}\\n\\ninterface IVoting{\\n    function vote(uint256, bool, bool) external; //voteId, support, executeIfDecided\\n    function getVote(uint256) external view returns(bool,bool,uint64,uint64,uint64,uint64,uint256,uint256,uint256,bytes memory);\\n    function vote_for_gauge_weights(address,uint256) external;\\n}\\n\\ninterface IMinter{\\n    function mint(address) external;\\n    function updateOperator() external;\\n    function operator() external returns(address);\\n}\\n\\ninterface ICvxLocker {\\n    function lock(address _account, uint256 _amount) external;\\n}\\n\\ninterface IStaker{\\n    function deposit(address, address) external returns (bool);\\n    function withdraw(address) external returns (uint256);\\n    function withdrawLp(address, address, uint256) external returns (bool);\\n    function withdrawAllLp(address, address) external returns (bool);\\n    function lock(uint256 _lockDays) external;\\n    function releaseLock(uint256 _slot) external returns(uint256);\\n    function getGaugeRewardTokens(address _lptoken, address _gauge) external returns (address[] memory tokens);\\n    function claimCrv(address, address) external returns (address[] memory tokens);\\n    function balanceOfPool(address, address) external view returns (uint256);\\n    function operator() external view returns (address);\\n    function execute(address _to, uint256 _value, bytes calldata _data) external payable returns (bool, bytes memory);\\n    function setVote(bytes32 hash, bool valid) external;\\n    function setOperator(address _operator) external;\\n    function setOwner(address _owner) external;\\n    function setDepositor(address _depositor) external;\\n    function lpTokenToPid(address _gauge, address _lptoken) external view returns (uint256);\\n    function lpTokenPidSet(address _gauge, address _lptoken) external view returns (bool);\\n}\\n\\ninterface IBoosterEarmark {\\n    function earmarkRewards(uint256 _pid) external;\\n    function earmarkRewardsIfAvailable(uint256 _pid) external;\\n    function earmarkIncentive() external view returns (uint256);\\n    function earmarkPeriod() external view returns (uint256);\\n    function distributionByTokenLength(address _token) external view returns (uint256);\\n    function distributionByTokens(address, uint256) external view returns (address, uint256, bool);\\n    function distributionTokenList() external view returns (address[] memory);\\n    function updateDistributionByTokens(address _token, address[] memory _distros, uint256[] memory _shares, bool[] memory _callQueue) external;\\n    function setEarmarkConfig(uint256 _earmarkIncentive, uint256 _earmarkPeriod) external;\\n    function transferOwnership(address newOwner) external;\\n    function addPool(address _lptoken, address _gauge) external returns (uint256);\\n    function addCreatedPool(address _lptoken, address _gauge, address _token, address _crvRewards) external returns (uint256);\\n}\\n\\ninterface IRewards{\\n    function pid() external view returns(uint256);\\n    function stake(address, uint256) external;\\n    function stakeFor(address, uint256) external;\\n    function withdraw(address, uint256) external;\\n    function exit(address) external;\\n    function getReward(address) external;\\n    function queueNewRewards(address, uint256) external;\\n    function notifyRewardAmount(uint256) external;\\n    function setRewardTokenPaused(address, bool) external;\\n    function updateOperatorData(address, uint256) external;\\n    function addExtraReward(address) external;\\n    function extraRewardsLength() external view returns (uint256);\\n    function stakingToken() external view returns (address);\\n    function rewardToken() external view returns(address);\\n    function earned(address account) external view returns (uint256);\\n    function setRatioData(uint256 duration_, uint256 newRewardRatio_) external;\\n}\\n\\ninterface ITokenMinter{\\n    function mint(address,uint256) external;\\n    function burn(address,uint256) external;\\n    function updateOperator(address) external;\\n}\\n\\ninterface IDeposit{\\n    function isShutdown() external view returns(bool);\\n    function balanceOf(address _account) external view returns(uint256);\\n    function totalSupply() external view returns(uint256);\\n    function poolInfo(uint256) external view returns(address,address,address,address,address, bool);\\n    function rewardClaimed(uint256,address,uint256,bool) external;\\n    function withdrawTo(uint256,uint256,address) external;\\n    function claimRewards(uint256,address) external returns(bool);\\n    function rewardArbitrator() external returns(address);\\n    function setGaugeRedirect(uint256 _pid) external returns(bool);\\n    function owner() external returns(address);\\n    function deposit(uint256 _pid, uint256 _amount, bool _stake) external returns(bool);\\n}\\n\\ninterface ICrvDeposit{\\n    function deposit(uint256, bool) external;\\n    function lockIncentive() external view returns(uint256);\\n}\\n\\ninterface IRewardFactory{\\n    function setAccess(address,bool) external;\\n    function CreateCrvRewards(uint256,address,address) external returns(address);\\n    function CreateTokenRewards(address,address,address) external returns(address);\\n    function activeRewardCount(address) external view returns(uint256);\\n    function addActiveReward(address,uint256) external returns(bool);\\n    function removeActiveReward(address,uint256) external returns(bool);\\n}\\n\\ninterface IStashFactory{\\n    function CreateStash(uint256,address,address,uint256) external returns(address);\\n}\\n\\ninterface ITokenFactory{\\n    function CreateDepositToken(address) external returns(address);\\n}\\n\\ninterface IPools{\\n    function addPool(address _lptoken, address _gauge, uint256 _stashVersion) external returns(bool);\\n    function forceAddPool(address _lptoken, address _gauge, uint256 _stashVersion) external returns(bool);\\n    function shutdownPool(uint256 _pid) external returns(bool);\\n    function poolInfo(uint256) external view returns(address,address,address,address,address,bool);\\n    function poolLength() external view returns (uint256);\\n    function gaugeMap(address) external view returns(bool);\\n    function setPoolManager(address _poolM) external;\\n}\\n\\ninterface IVestedEscrow{\\n    function fund(address[] calldata _recipient, uint256[] calldata _amount) external returns(bool);\\n}\\n\\ninterface IRewardDeposit {\\n    function addReward(address, uint256) external;\\n}\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n}\\n\\ninterface IExtraRewardsDistributor {\\n    function addReward(address _token, uint256 _amount) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 800\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voterProxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_reservoirMinter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cvx\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_crv\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minMintRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxMintRatio\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintRatio\",\"type\":\"uint256\"}],\"name\":\"CustomMintRatioUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"penaltyShare\",\"type\":\"uint256\"}],\"name\":\"CustomPenaltyShareUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newEarmarkDelegate\",\"type\":\"address\"}],\"name\":\"EarmarkDelegateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EarmarkRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"distro\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"queue\",\"type\":\"bool\"}],\"name\":\"EarmarkRewardsTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newDist\",\"type\":\"address\"}],\"name\":\"ExtraRewardsDistributorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardFactory\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenFactory\",\"type\":\"address\"}],\"name\":\"FactoriesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"FeeInfoChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeDistro\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lockFees\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"}],\"name\":\"FeeInfoUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newFeeManager\",\"type\":\"address\"}],\"name\":\"FeeManagerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lockRewards\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"cvxLocker\",\"type\":\"address\"}],\"name\":\"LockRewardContractsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"pendingRewardTokens\",\"type\":\"address[]\"}],\"name\":\"LpPendingRewardTokensUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"reservoirMinter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"mintManager\",\"type\":\"address\"}],\"name\":\"MintParamsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MinterMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPenalty\",\"type\":\"uint256\"}],\"name\":\"PenaltyShareUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"crvRewards\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"PoolAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPoolManager\",\"type\":\"address\"}],\"name\":\"PoolManagerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"PoolShutdown\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"lock\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"name\":\"RewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"crvRewards\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newBooster\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"RewardMigrate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"earmarkOnDeposit\",\"type\":\"bool\"}],\"name\":\"SetEarmarkOnDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"SetPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voteDelegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"VoteDelegateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voting\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"}],\"name\":\"VotingMapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_PENALTY_SHARE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lptoken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_crvRewards\",\"type\":\"address\"}],\"name\":\"addCreatedPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lptoken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"}],\"name\":\"addPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_distro\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_distributionTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approveDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"approvePoolsCrvRewardsDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crv\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crvLockRewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"customMintRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"customPenaltyShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cvx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cvxLocker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_stake\",\"type\":\"bool\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_stake\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"depositFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_transferTo\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_transferAmount\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"_callQueue\",\"type\":\"bool[]\"}],\"name\":\"distributeRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earmarkDelegate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earmarkOnDeposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extraRewardsDist\",\"outputs\":[{\"internalType\":\"contract IExtraRewardsDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"forceShutdownPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lptoken\",\"type\":\"address\"}],\"name\":\"getLpBalance\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lptoken\",\"type\":\"address\"}],\"name\":\"getPendingRewardTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lptoken\",\"type\":\"address\"}],\"name\":\"getPendingRewards\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"result\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isShutdown\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lpPendingRewardTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lpPendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMintRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_rewards\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_pids\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_newBooster\",\"type\":\"address\"}],\"name\":\"migrateRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minMintRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"minterMint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"penaltyShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"lptoken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"crvRewards\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"shutdown\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reservoirMinter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_lock\",\"type\":\"bool\"}],\"name\":\"rewardClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_pids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_mintRatios\",\"type\":\"uint256[]\"}],\"name\":\"setCustomMintRatioMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_pids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_penaltyShares\",\"type\":\"uint256[]\"}],\"name\":\"setCustomPenaltyShareMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_earmarkDelegate\",\"type\":\"address\"}],\"name\":\"setEarmarkDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_earmarkOnDeposit\",\"type\":\"bool\"}],\"name\":\"setEarmarkOnDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dist\",\"type\":\"address\"}],\"name\":\"setExtraRewardsDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rfactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tfactory\",\"type\":\"address\"}],\"name\":\"setFactories\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeM\",\"type\":\"address\"}],\"name\":\"setFeeManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_crvLockRewards\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cvxLocker\",\"type\":\"address\"}],\"name\":\"setLockRewardContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"setLpPendingRewardTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintRatio\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_reservoirMinter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mintManager\",\"type\":\"address\"}],\"name\":\"setMintParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolM\",\"type\":\"address\"}],\"name\":\"setPoolManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_penaltyShare\",\"type\":\"uint256\"}],\"name\":\"setRewardClaimedPenalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_rewardPools\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"setRewardTokenPausedInPools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"}],\"name\":\"setVote\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voteDelegate\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setVoteDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voting\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_valid\",\"type\":\"bool\"}],\"name\":\"setVotingValid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"shutdownPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shutdownSystem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updateLpPendingRewardTokensByGauge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"voteDelegate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voting\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"voteExecute\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voterProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_pendingTokens\",\"type\":\"address[]\"}],\"name\":\"voterProxyClaimRewards\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"pendingRewards\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"votingMap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Booster", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "800", "ConstructorArguments": "000000000000000000000000e3a7fb9c6790b02dcfa03b6ed9cda387104135690000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a75d9ca2a0a1d547409d82e1b06618ec284a2ced000000000000000000000000ad6742a35fb341a9cc6ad674738dd8da98b94fb1000000000000000000000000bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c00000000000000000000000000000000000000000000000000000000000003e80000000000000000000000000000000000000000000000000000000000003a98", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}