{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/usd.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.14;\\n\\ninterface IUSD {\\n    function owner() external view returns (address);\\n\\n    function minerTo() external view returns (address);\\n\\n    function stakeTo() external view returns (address);\\n\\n    function rewardTo() external view returns (address);\\n\\n    function inviter(address account_) external view returns (address);\\n}\\n\\nlibrary TransferHelper {\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0xa9059cbb, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper: TRANSFER_FAILED\\\"\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0x23b872dd, from, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper: TRANSFER_FROM_FAILED\\\"\\n        );\\n    }\\n}\\n\\ninterface IDepositUSD {\\n    function withdrawToken(\\n        address token_,\\n        address to_,\\n        uint256 amount_\\n    ) external;\\n\\n    function stakeUsd(address account_, uint256 amount_) external;\\n\\n    function unstakeUsd(address account_, uint256 amount_) external;\\n\\n    function depositFee(uint256 amount_) external;\\n\\n    function takeFee(address account_, uint256 amount_) external;\\n\\n    function getFee() external view returns (uint256);\\n\\n    function stakedOf(address account_) external view returns (uint256);\\n\\n    function takeReward(\\n        address token_,\\n        string memory usefor,\\n        address account_,\\n        uint256 amount_\\n    ) external;\\n\\n    function getReward(address token_, string memory usefor)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\\n// \u5b58\u50a8\u5408\u7ea6\u53ea\u652f\u6301\u94b1,\u4e0d\u652f\u6301\u4e3b\u52a8\u5b58\u94b1\\n// \u4e3a\u4e86\u7528\u6237\u7684\u5b89\u5168\u6027,\u5728\u6bcf\u6b21\u5347\u7ea7\u4f7f\u7528\u5408\u7ea6\u540e,\u7528\u6237\u9700\u91cd\u65b0\u6388\u6743\\n// \u5728\u4f7f\u7528\u5408\u7ea6\u91cc\u9762\u6536\u53d6token\u5e76\u53d1\u9001\u5230\u5b58\u50a8\u5408\u7ea6-\u65e0\u624b\u7eed\u8d39\\ncontract DepositUSD {\\n    address public usdAddress; // usd\u5408\u7ea6\\n\\n    uint256 public totalStaked; //\u603b\u8d28\u62bc\\n    mapping(address => uint256) public stakedOf; // \u8d28\u62bc\u6570\u91cf\\n\\n    uint256 public totalFees; //\u603b\u624b\u7eed\u8d39\\n    uint256 public totalUsedFees; //\u5df2\u652f\u4ed8\u624b\u7eed\u8d39\\n    uint256 public bonusReward; //\u5206\u7ea2\u5956\u52b1\\n\\n    mapping(address => mapping(string => uint256)) public totalReward; //\u603b\u5956\u52b1 reward[\u5956\u52b1token]\\n    //\u5956\u52b1\u4f7f\u7528\u60c5\u51b5 reward[\u5956\u52b1token][usefor] =\u300b \u652f\u4ed8\u5956\u52b1\\n    // usefor(string) invite(\u9080\u8bf7\u5956\u52b1),,,,\\n    mapping(address => mapping(string => uint256)) public useforReward; //\u5df2\u652f\u4ed8\u5956\u52b1\\n\\n    constructor(address usd_) {\\n        usdAddress = usd_;\\n    }\\n\\n    modifier onlyUseFor() {\\n        require(\\n            msg.sender == minerTo() ||\\n                msg.sender == stakeTo() ||\\n                msg.sender == owner() ||\\n                msg.sender == rewardTo(),\\n            \\\"caller can not be allowed\\\"\\n        );\\n        _;\\n    }\\n\\n    function withdrawToken(\\n        address token_,\\n        address to_,\\n        uint256 amount_\\n    ) external onlyUseFor {\\n        TransferHelper.safeTransfer(token_, to_, amount_);\\n    }\\n\\n    function stakeUsd(address account_, uint256 amount_) external onlyUseFor {\\n        totalStaked += amount_;\\n        stakedOf[account_] += amount_;\\n    }\\n\\n    function unstakeUsd(address account_, uint256 amount_) external onlyUseFor {\\n        totalStaked -= amount_;\\n        stakedOf[account_] -= amount_;\\n        TransferHelper.safeTransfer(usdAddress, account_, amount_);\\n    }\\n\\n    // \u83b7\u53d6\u53ef\u4f7f\u7528\u7684\u5956\u52b1\\n    function getReward(address token_, string memory usefor)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return totalReward[token_][usefor] - useforReward[token_][usefor];\\n    }\\n\\n    // \u8bf7\u5c06\u5b58\u50a8\u5408\u7ea6\u52a0\u5165\u5956\u52b1token\u767d\u540d\u5355\u4f7f\u7528,\u4ee5\u514d\u9664\u624b\u7eed\u8d39\u6ea2\u51fa\\n    function depositReward(\\n        address token_,\\n        string memory usefor,\\n        uint256 amount_\\n    ) public {\\n        totalReward[token_][usefor] += amount_;\\n        TransferHelper.safeTransferFrom(\\n            token_,\\n            msg.sender,\\n            address(this),\\n            amount_\\n        );\\n    }\\n\\n    // \u4f7f\u7528\u5956\u52b1\\n    function takeReward(\\n        address token_,\\n        string memory usefor,\\n        address account_,\\n        uint256 amount_\\n    ) external onlyUseFor {\\n        require(getReward(token_, usefor) >= amount_, \\\"not enough fee\\\");\\n        useforReward[token_][usefor] += amount_;\\n        TransferHelper.safeTransfer(token_, account_, amount_);\\n    }\\n\\n    function getFee() public view returns (uint256) {\\n        return totalFees - totalUsedFees;\\n    }\\n\\n    function depositFee(uint256 amount_) external {\\n        if (msg.sender != usdAddress) {\\n            TransferHelper.safeTransferFrom(\\n                usdAddress,\\n                msg.sender,\\n                address(this),\\n                amount_\\n            );\\n        }\\n        totalFees += amount_;\\n    }\\n\\n    function bonusFee(uint256 amount_) external onlyUseFor {\\n        require(getFee() >= amount_, \\\"not enough fee\\\");\\n        totalUsedFees += amount_;\\n        bonusReward += amount_;\\n    }\\n\\n    function takeFee(address account_, uint256 amount_) external onlyUseFor {\\n        if (amount_ > bonusReward) {\\n            amount_ = bonusReward;\\n        }\\n        bonusReward -= amount_;\\n        TransferHelper.safeTransfer(usdAddress, account_, amount_);\\n    }\\n\\n    function owner() public view returns (address) {\\n        return IUSD(usdAddress).owner();\\n    }\\n\\n    function minerTo() public view returns (address) {\\n        return IUSD(usdAddress).minerTo();\\n    }\\n\\n    function stakeTo() public view returns (address) {\\n        return IUSD(usdAddress).stakeTo();\\n    }\\n\\n    function rewardTo() public view returns (address) {\\n        return IUSD(usdAddress).rewardTo();\\n    }\\n}\\n\\ncontract UpgradeMaster {\\n    uint256 public effectiveTime = 300; // \u5347\u7ea7\u5408\u7ea6\u7684\u6709\u6548\u65f6\u95f4\\n\\n    address public owner; // \u62e5\u6709\u8005\u5730\u5740\\n    Upgrade public _minerTo; // \u77ff\u5de5\u5408\u7ea6\u5730\u5740\\n    Upgrade public _stakeTo; // \u8d28\u62bc\u5408\u7ea6\u5730\u5740\\n    Upgrade public _rewardTo; // \u5956\u52b1\u5408\u7ea6\u5730\u5740\\n\\n    struct Upgrade {\\n        address prev; // \u539f\u5408\u7ea6\u5730\u5740\\n        address to; // \u5347\u7ea7\u5408\u7ea6\u5730\u5740\\n        uint256 effectiveTime; // \u751f\u6548\u65f6\u95f4\\n    }\\n\\n    modifier onlyOwner() {\\n        require(owner == msg.sender, \\\"caller is not the owner\\\");\\n        _;\\n    }\\n\\n    modifier onlyMiner() {\\n        require(minerTo() == msg.sender, \\\"caller is not the miner\\\");\\n        _;\\n    }\\n\\n    function minerTo() public view returns (address) {\\n        return _getUpgradeTo(_minerTo);\\n    }\\n\\n    function stakeTo() public view returns (address) {\\n        return _getUpgradeTo(_stakeTo);\\n    }\\n\\n    function rewardTo() public view returns (address) {\\n        return _getUpgradeTo(_rewardTo);\\n    }\\n\\n    function setEffectiveTime(uint256 newEffectiveTime) external onlyOwner {\\n        require(\\n            newEffectiveTime > effectiveTime,\\n            \\\"new effective time is too short\\\"\\n        );\\n        effectiveTime = newEffectiveTime;\\n    }\\n\\n    function setOwner(address to) external onlyOwner {\\n        owner = to;\\n    }\\n\\n    function setMinerTo(address to) external onlyOwner {\\n        _upgradeTo(_minerTo, to);\\n    }\\n\\n    function setStakeTo(address to) external onlyOwner {\\n        _upgradeTo(_stakeTo, to);\\n    }\\n\\n    function setRewardTo(address to) external onlyOwner {\\n        _upgradeTo(_rewardTo, to);\\n    }\\n\\n    function _getUpgradeTo(Upgrade memory upgrade_)\\n        internal\\n        view\\n        returns (address)\\n    {\\n        if (block.timestamp >= upgrade_.effectiveTime) {\\n            return upgrade_.to;\\n        } else {\\n            return upgrade_.prev;\\n        }\\n    }\\n\\n    function _upgradeTo(Upgrade storage upgrade_, address to) internal {\\n        // \u7b2c\u4e00\u6b21\u8bbe\u7f6e\u76f4\u63a5\u751f\u6548\\n        if (upgrade_.effectiveTime == 0) {\\n            upgrade_.to = to;\\n        }\\n\\n        if (block.timestamp >= upgrade_.effectiveTime) {\\n            upgrade_.prev = upgrade_.to;\\n        }\\n\\n        upgrade_.to = to;\\n        upgrade_.effectiveTime = block.timestamp + effectiveTime;\\n    }\\n}\\n\\ncontract TokenUSD is UpgradeMaster {\\n    string public name = \\\"TokenUSD\\\";\\n    string public symbol = \\\"TokenUSD\\\";\\n    uint8 public decimals = 18;\\n    uint256 public totalSupply = 0;\\n    mapping(address => uint256) public balanceOf;\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    mapping(address => bool) public whiteFrom; // \u8f6c\u51fa\u767d\u540d\u5355\\n    mapping(address => bool) public whiteTo; // \u8f6c\u5165\u767d\u540d\u5355\\n    mapping(address => bool) public blackFrom; // \u8f6c\u51fa\u9ed1\u540d\u5355\\n\\n    mapping(address => address) public inviter; // \u9080\u8bf7\u4eba\\n    mapping(address => uint256) public inviteCount; // \u9080\u8bf7\u4eba\u6570\u91cf\\n\\n    uint256 public feeRate = 30; //\u8f6c\u8d26\u624b\u7eed\u8d39 feeRate / 10000 30\\n    uint256 public feeMax = 1e18; // \u6700\u9ad8\u624b\u7eed\u8d39 \u9ed8\u8ba41U 1e18\\n\\n    address public immutable depositAddress; // \u5b58\u6b3e\u5408\u7ea6\u5730\u5740\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(\\n        address indexed holder,\\n        address indexed spender,\\n        uint256 value\\n    );\\n    event BindInviter(address indexed _user, address indexed _inviter);\\n\\n    constructor(\\n        string memory name_,\\n        string memory symbol_,\\n        uint8 decimals_\\n    ) {\\n        name = name_;\\n        symbol = symbol_;\\n        decimals = decimals_;\\n        owner = msg.sender;\\n\\n        depositAddress = address(new DepositUSD(address(this)));\\n\\n        // \u521d\u59cb\u5316\u767d\u540d\u5355\\n        whiteFrom[address(this)] = true;\\n        whiteTo[address(this)] = true;\\n\\n        whiteFrom[depositAddress] = true;\\n        whiteTo[depositAddress] = true;\\n    }\\n\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        virtual\\n        returns (bool)\\n    {\\n        _transfer(msg.sender, recipient, amount);\\n        return true;\\n    }\\n\\n    function approve(address spender, uint256 amount)\\n        external\\n        virtual\\n        returns (bool)\\n    {\\n        _approve(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external virtual returns (bool) {\\n        uint256 currentAllowance = allowance[sender][msg.sender];\\n        require(\\n            currentAllowance >= amount,\\n            \\\"ERC20: transfer amount exceeds allowance\\\"\\n        );\\n\\n        unchecked {\\n            _approve(sender, msg.sender, currentAllowance - amount);\\n        }\\n\\n        _transfer(sender, recipient, amount);\\n\\n        return true;\\n    }\\n\\n    function increaseAllowance(address spender, uint256 addedValue)\\n        external\\n        virtual\\n        returns (bool)\\n    {\\n        _approve(\\n            msg.sender,\\n            spender,\\n            allowance[msg.sender][spender] + addedValue\\n        );\\n        return true;\\n    }\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\n        external\\n        virtual\\n        returns (bool)\\n    {\\n        uint256 currentAllowance = allowance[msg.sender][spender];\\n        require(\\n            currentAllowance >= subtractedValue,\\n            \\\"ERC20: decreased allowance below zero\\\"\\n        );\\n        unchecked {\\n            _approve(msg.sender, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n        require(!blackFrom[sender], \\\"ERC20: transfer from black list\\\");\\n        // require(!blackFrom[to], \\\"ERC20: transfer to black list\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = balanceOf[sender];\\n        require(\\n            senderBalance >= amount,\\n            \\\"ERC20: transfer amount exceeds balance\\\"\\n        );\\n        unchecked {\\n            balanceOf[sender] = senderBalance - amount;\\n        }\\n        balanceOf[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n        totalSupply += amount;\\n        balanceOf[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n        require(balanceOf[account] >= amount, \\\"ERC20: burn more than balance\\\");\\n        require(totalSupply >= amount, \\\"ERC20: burn more than total supply\\\");\\n        totalSupply -= amount;\\n        balanceOf[account] -= amount;\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    function _approve(\\n        address holder,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(holder != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        allowance[holder][spender] = amount;\\n        emit Approval(holder, spender, amount);\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        if (whiteFrom[from] || whiteTo[to]) {\\n            return;\\n        }\\n\\n        if (from == address(0) || to == address(0)) {\\n            return;\\n        }\\n\\n        uint256 fee = (amount * feeRate) / 10000;\\n        if (fee > feeMax) {\\n            fee = feeMax;\\n        }\\n\\n        //\u6263\u51cf\u624b\u7eed\u8d39\\n        balanceOf[to] -= fee;\\n        //\u5b58\u5165\u5b58\u6b3e\u5408\u7ea6\\n        IDepositUSD(depositAddress).depositFee(fee);\\n        balanceOf[depositAddress] += fee;\\n        emit Transfer(to, depositAddress, fee);\\n    }\\n\\n    function mint(address recipient, uint256 amount)\\n        external\\n        virtual\\n        onlyMiner\\n        returns (bool)\\n    {\\n        _mint(recipient, amount);\\n        return true;\\n    }\\n\\n    function burn(address account, uint256 amount)\\n        external\\n        virtual\\n        onlyMiner\\n        returns (bool)\\n    {\\n        _burn(account, amount);\\n        return true;\\n    }\\n\\n    // \u7ed1\u5b9a\u9080\u8bf7\u4eba\\n    function setInviter(address inviter_) external virtual returns (bool) {\\n        require(inviter[msg.sender] == address(0), \\\"already bind inviter\\\");\\n        require(msg.sender != inviter_, \\\"can't bind self\\\");\\n        // \u4e0a\u7ea7\u5fc5\u987b\u5df2\u7ecf\u7ed1\u5b9a\u8fc7\u9080\u8bf7\u4eba\u6216\u8005\u7ed1\u5b9a\u7ba1\u7406\u5458\u5e10\u53f7\\n        require(\\n            inviter_ == owner || inviter[inviter_] != address(0),\\n            \\\"inviter must be binded\\\"\\n        );\\n\\n        inviter[msg.sender] = inviter_;\\n        inviteCount[inviter_] += 1;\\n        emit BindInviter(msg.sender, inviter_);\\n        return true;\\n    }\\n\\n    //\u8bbe\u7f6e\u9ed1\u540d\u5355\\n    function setBlackFrom(address addr, bool value) external onlyOwner {\\n        blackFrom[addr] = value;\\n    }\\n\\n    //\u8bbe\u7f6e\u767d\u540d\u5355\\n    function setWhite(\\n        address addr,\\n        bool from,\\n        bool to\\n    ) external onlyOwner {\\n        whiteFrom[addr] = from;\\n        whiteTo[addr] = to;\\n    }\\n\\n    //\u8bbe\u7f6e\u624b\u7eed\u8d39\\n    function setFeeMax(uint256 newFeeMax) external onlyOwner {\\n        feeMax = newFeeMax;\\n    }\\n\\n    //\u8bbe\u7f6e\u624b\u7eed\u8d39\u7387\\n    function setFeeRate(uint256 newFeeRate) external onlyOwner {\\n        require(newFeeRate <= 10000, \\\"fee rate error\\\");\\n        feeRate = newFeeRate;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals_\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_inviter\",\"type\":\"address\"}],\"name\":\"BindInviter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_minerTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"prev\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"effectiveTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rewardTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"prev\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"effectiveTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_stakeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"prev\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"effectiveTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blackFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"effectiveTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"inviteCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"inviter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minerTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setBlackFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newEffectiveTime\",\"type\":\"uint256\"}],\"name\":\"setEffectiveTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFeeMax\",\"type\":\"uint256\"}],\"name\":\"setFeeMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFeeRate\",\"type\":\"uint256\"}],\"name\":\"setFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"inviter_\",\"type\":\"address\"}],\"name\":\"setInviter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"setMinerTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"setRewardTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"setStakeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"from\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"to\",\"type\":\"bool\"}],\"name\":\"setWhite\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whiteFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whiteTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "TokenUSD", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000084c4954452055534400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044c55534400000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}