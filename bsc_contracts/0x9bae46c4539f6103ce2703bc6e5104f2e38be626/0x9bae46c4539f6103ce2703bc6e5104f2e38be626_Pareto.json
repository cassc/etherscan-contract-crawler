{"SourceCode": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.0;\r\ninterface IPair {\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n}\r\ninterface IRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\ninterface IFactory {\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\nabstract contract Common {\r\n    address public ZERO = 0x0000000000000000000000000000000000000000;\r\n    address public ONE = 0x0000000000000000000000000000000000000001;\r\n    address public DEAD = 0x000000000000000000000000000000000000dEaD;\r\n    function toWei(uint256 amount) public pure returns(uint256) {\r\n        return amount * 1E18;\r\n    }\r\n}\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this;\r\n        return msg.data;\r\n    }\r\n}\r\nabstract contract Access is Context {\r\n    mapping(address => bool) accessor;\r\n    address accessorAdmin;\r\n    modifier accessed() {\r\n        require(isAccessable(_msgSender()), \"access valid\");\r\n        _;\r\n    }\r\n    constructor() {accessorAdmin=_msgSender();}\r\n    function grantAccess(address addr) public accessed {if (!isAccessable(addr)) accessor[addr] = true;}\r\n    function revokeAccess(address addr) public accessed {if (isAccessable(addr)) accessor[addr] = false;}\r\n    function isAccessable(address addr) internal view returns(bool) {return accessor[addr] || _msgSender() == accessorAdmin;}\r\n    function isAccessable() internal view returns(bool) {return isAccessable(_msgSender());}\r\n}\r\nabstract contract BotKiller is Access {\r\n    mapping(address => bool) botList;\r\n    uint256 private duration;\r\n    function markBot(address addr, bool b) public accessed {botList[addr] = b;}\r\n    function isBot(address addr) internal view returns (bool) {return botList[addr];}\r\n}\r\nabstract contract GICP is Common, Access {\r\n    IPair private pair;\r\n    IRouter private router;\r\n    uint256 calcBase = 1E18;\r\n    uint256 divBase = 12;\r\n    uint256 baseTOKEN = 1e8 * 120 ether / divBase;\r\n    uint256 baseETH = 120 ether / divBase;\r\n    uint256 public currentLayer = 1;\r\n    bool public isCanSellNow;\r\n    bool public isGICPFinish;\r\n    event LockSell(uint256 min, uint256 max, uint256 price, uint256 layer, uint flag);\r\n    event UnlockSell(uint256 min, uint256 max, uint256 price, uint256 layer, uint flag);\r\n    function getPoolInfo() public view returns (uint256, uint256, uint256) {\r\n        (uint112 _reserve0, uint112 _reserve1,) = pair.getReserves();\r\n        uint112 WETHAmount = _reserve1;\r\n        uint112 TOKENAmount = _reserve0;\r\n        if (pair.token0() == router.WETH()) {\r\n            WETHAmount = _reserve0;\r\n            TOKENAmount = _reserve1;\r\n        }\r\n        uint256 price = calcBase  * WETHAmount / TOKENAmount;\r\n        return (WETHAmount, TOKENAmount, price);\r\n    }\r\n    function initDivBase(uint256 b) public accessed {\r\n        divBase = b;\r\n    }\r\n    function GICPFinish(bool b) external accessed {\r\n        isGICPFinish = b;\r\n    }\r\n    function GICPCheck() internal view returns (bool) {\r\n        if (!isGICPFinish) return isCanSellNow;\r\n        return true;\r\n    }\r\n    uint256 min2;\r\n    function handleGICP() internal returns(bool) {\r\n        if (min2 == 0) min2 = baseETH;\r\n        if (!isGICPFinish) {\r\n            (, , uint256 price2) = getPoolInfo();\r\n            uint256 price = price2 * baseTOKEN / calcBase;\r\n            for (uint i = currentLayer; i < 500; i++) {\r\n                uint256 max = min2 + i * 1 ether / 2 / divBase;\r\n                if (min2 < price && price < max) {\r\n                    _unlockSell(min2, max, price);\r\n                    break;\r\n                } else if (price >= max) {\r\n                    currentLayer++;\r\n                    _lockSell(min2, max, price);\r\n                } else {\r\n                    _lockSell(min2, max, price);\r\n                    break;\r\n                }\r\n                min2 = max * 118 / 100;\r\n            }\r\n        }\r\n        return GICPCheck();\r\n    }\r\n    function _unlockSell(uint256 min, uint256 max, uint256 price) internal {\r\n        if (!isCanSellNow) isCanSellNow = true;\r\n        emit UnlockSell(min, max, price, currentLayer, 22);\r\n    }\r\n    function _lockSell(uint256 min, uint256 max, uint256 price) internal {\r\n        if (isCanSellNow) isCanSellNow = false;\r\n        emit LockSell(min, max, price, currentLayer, 11);\r\n    }\r\n    function initIPair2(IPair pair_) internal {pair = pair_;}\r\n    function initIRouter2(IRouter router_) internal {router = router_;}\r\n}\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\ninterface IERC20Metadata is IERC20 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n}\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\ncontract ERC20 is Context, IERC20, IERC20Metadata, Ownable {\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    uint256 private _totalSupply;\r\n    string private _name;\r\n    string private _symbol;\r\n    constructor (string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        _approve(sender, _msgSender(), currentAllowance - amount);\r\n        return true;\r\n    }\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        return true;\r\n    }\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n        _move(sender, recipient, amount);\r\n        _afterTokenTransfer(sender, recipient, amount);\r\n    }\r\n    function _move(address sender, address recipient, uint256 amount) internal virtual {\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[sender] = senderBalance - amount;\r\n        _balances[recipient] += amount;\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        _balances[account] = accountBalance - amount;\r\n        _totalSupply -= amount;\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n    receive() external payable {}\r\n    function rescueLossToken(IERC20 token_, address _recipient) public onlyOwner {token_.transfer(_recipient, token_.balanceOf(address(this)));}\r\n    function rescueLossChain(address payable _recipient) public onlyOwner {_recipient.transfer(address(this).balance);}\r\n}\r\ncontract FeeHandler is Common, Access, ERC20 {\r\n    struct Fee {\r\n        bool exists;\r\n        uint256 feeName;\r\n        uint256 percent;\r\n        address feeTo;\r\n        uint256 remainMinTotalSupply;\r\n    }\r\n    mapping(uint256 => Fee) public feeConfig;\r\n    uint256[] public feeNames;\r\n    mapping(address => bool) _noFee;\r\n    constructor(\r\n        string memory name_,\r\n        string memory symbol_\r\n    ) ERC20(name_, symbol_) {}\r\n    function noFee(address addr, bool noFee_) public accessed {\r\n        _noFee[addr] = noFee_;\r\n    }\r\n    function ifNoFee(address addr) public view returns (bool) {\r\n        return _noFee[addr];\r\n    }\r\n    function initFeeConfig(uint256 feeName, uint256 percent, address feeTo, uint256 remainMinTotalSupply) public accessed {\r\n        if (!feeConfig[feeName].exists) {\r\n            feeNames.push(feeName);\r\n        }\r\n        feeConfig[feeName] = Fee(true, feeName, percent, feeTo, remainMinTotalSupply);\r\n    }\r\n    function _processAllFees(address from, uint256 amount) internal virtual {\r\n        if (!ifNoFee(from)) {\r\n            _handAllFees(from, amount);\r\n        }\r\n    }\r\n    function _handAllFees(address from, uint256 amount) private {\r\n        uint256 amountLeft = amount;\r\n        for (uint8 i = 0; i < feeNames.length; i++) {\r\n            if (amountLeft == 0) break;\r\n            uint256 fee = amount * feeConfig[feeNames[i]].percent / 100;\r\n            if (amountLeft >= fee) amountLeft -= fee;\r\n            else {\r\n                fee = amountLeft;\r\n                amountLeft = 0;\r\n            }\r\n            if (fee > 0 && totalSupply() - super.balanceOf(DEAD) > feeConfig[feeNames[i]].remainMinTotalSupply) {\r\n                super._move(from, feeConfig[feeNames[i]].feeTo, fee);\r\n            }\r\n        }\r\n    }\r\n}\r\ncontract Pareto is Common, BotKiller, FeeHandler, GICP {\r\n    uint256 _totalSupply = 1000 * 1E8 * 1E18;\r\n    address public pair;\r\n    IRouter router;\r\n    bool public isStartSwap;\r\n    uint256 public _feePercent;\r\n    constructor() FeeHandler(\"pareto\", \"PARETO\") {\r\n        initIRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n        super.noFee(address(this), true);\r\n        super.noFee(_msgSender(), true);\r\n        super.noFee(DEAD, true);\r\n        initFee(10);\r\n        super.initFeeConfig(0, 60, 0xc5732c0bADD29dC16560e2a929feC21880B85593, 0);\r\n        super.initFeeConfig(1, 20, 0x9699bcfe3Cf3bfceC789F1c017B5933C3b6277d8, 0);\r\n        super.initFeeConfig(2, 15, 0xd38320736823328c15c6a160331547F2511e802d, 0);\r\n        super.initFeeConfig(3, 5,  0x9e84be81b00E54e1334A774805BDb5215ea68739, 0);\r\n        super._mint(_msgSender(), _totalSupply);\r\n    }\r\n    function initIRouter(address router_) private {\r\n        router = IRouter(router_);\r\n        address factory = router.factory();\r\n        pair = IFactory(factory).createPair(address(this), router.WETH());\r\n        super.initIPair2(IPair(pair));\r\n        super.initIRouter2(router);\r\n        super.noFee(pair, true);\r\n    }\r\n    function initFee(uint256 fee_) public accessed {\r\n        _feePercent = fee_;\r\n    }\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override {\r\n        require(!super.isBot(from) && !super.isBot(to), \"forbid\");\r\n        if (isStartSwap) {\r\n            if (pair == to) require(super.handleGICP(), \"Waiting for next sell duration\");\r\n        }\r\n        super._beforeTokenTransfer(from, to, amount);\r\n    }\r\n    function swapStart(bool b) public accessed {\r\n        isStartSwap = b;\r\n    }\r\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual override {\r\n        if (isStartSwap) {\r\n             if (amount > 0) {\r\n                 uint256 fees = amount * _feePercent / 100;\r\n                 if (pair == from) {\r\n                     super._processAllFees(to, fees);\r\n                 } else if (pair == to) {\r\n                     super._processAllFees(from, fees);\r\n                 } else if (from != owner()) {\r\n                     super._processAllFees(to, fees);\r\n                 }\r\n             }\r\n            super.handleGICP();\r\n        }\r\n        super._afterTokenTransfer(from, to, amount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"layer\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"flag\",\"type\":\"uint256\"}],\"name\":\"LockSell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"layer\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"flag\",\"type\":\"uint256\"}],\"name\":\"UnlockSell\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEAD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"b\",\"type\":\"bool\"}],\"name\":\"GICPFinish\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ONE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ZERO\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_feePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentLayer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"feeConfig\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"feeName\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"remainMinTotalSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"feeNames\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"grantAccess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ifNoFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"initDivBase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee_\",\"type\":\"uint256\"}],\"name\":\"initFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feeName\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"remainMinTotalSupply\",\"type\":\"uint256\"}],\"name\":\"initFeeConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isCanSellNow\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isGICPFinish\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isStartSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"b\",\"type\":\"bool\"}],\"name\":\"markBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"noFee_\",\"type\":\"bool\"}],\"name\":\"noFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"rescueLossChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"rescueLossToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"revokeAccess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"b\",\"type\":\"bool\"}],\"name\":\"swapStart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"toWei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Pareto", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://146c1f6c2f864e808bab2298dd5c709aa98c6e58dada8514e20c227213d58723"}