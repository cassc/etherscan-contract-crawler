{"SourceCode": "pragma solidity ^0.8.7;\r\n\r\ninterface OldContract {\r\n    \r\n    function userInfo(address _addr) view external returns( \r\n        uint256 for_withdraw, \r\n        uint256 totalInvested, \r\n        uint256 totalWithdrawn, \r\n        uint256 totalBonus,\r\n        uint256 giveawayBonus,\r\n         uint256[5] memory structure\r\n        );\r\n}\r\ninterface IERC20 {\r\n    \r\n    function totalSupply() external view returns (uint256);\r\n\r\n    \r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    \r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    \r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    \r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    \r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    \r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary Address {\r\n    \r\n    function isContract(address account) internal view returns (bool) {\r\n        \r\n        \r\n        \r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    \r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    \r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    \r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    \r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    \r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    \r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    \r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    \r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    \r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    \r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            \r\n            if (returndata.length > 0) {\r\n                \r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    \r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        \r\n        \r\n        \r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    \r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            \r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\n\r\nstruct daysPercent {\r\n    uint8 life_days;\r\n    uint8 percent;\r\n}\r\n\r\nstruct DepositStruct {\r\n    uint8 lockUp;\r\n    uint256 amount;\r\n    uint40 time;\r\n    uint256 finish;\r\n}\r\n\r\nstruct Investor {\r\n    address daddy;\r\n    uint256 dividends;\r\n    uint256 matchBonus;\r\n    uint40 lastPayout;\r\n    uint256 totalInvested;\r\n    uint256 totalWithdrawn;\r\n    uint256 totalBonus;\r\n    uint256 giveawayBonus;\r\n    DepositStruct [] depositsArray;\r\n    uint256[5] structure;\r\n}\r\n\r\ncontract BFarmV2 {\r\n    using SafeMath for uint256;\r\n    using SafeMath for uint40;\r\n    using SafeERC20 for IERC20;\r\n\r\n    uint256 public contractInvested;\r\n    uint256 public contractWithdrawn;\r\n    uint256 public matchBonus;\r\n\r\n    uint8 constant BonusLinesCount = 5;\r\n    uint16 constant percentDivider = 1000;\r\n    uint256 constant public ceoFee = 150;\r\n    uint8[BonusLinesCount] public referralBonus = [50, 30, 20, 5,5];\r\n    uint40 public TIME_STEP = 86400;\r\n    IERC20 public BUSD;\r\n\r\n    OldContract public oldContract = OldContract(0x45C32dcB2dA837A142a3B57Fb59532302978EcA8);\r\n\r\n    mapping(uint8 => daysPercent) public WPR;\r\n    mapping(address => Investor) public investorsMap;\r\n    mapping(address => bool) public isClaimed;\r\n    mapping(address=>uint256) public lossAmount;\r\n\r\n\r\n    address payable public ceoWallet;\r\n\r\n    event Upline(address indexed addr, address indexed upline, uint256 bonus);\r\n    event NewDeposit(address indexed addr, uint256 amount, uint8 tarif);\r\n    event MatchPayout(address indexed addr, address indexed from, uint256 amount);\r\n    event Withdraw(address indexed addr, uint256 amount);\r\n    event FeePayed(address indexed user, uint256 totalAmount); \r\n\r\n        constructor(address payable ceoAddr) {\r\n        require(!isContract(ceoAddr));\r\n        ceoWallet = ceoAddr;\r\n\r\n        uint8 percentage = 140;\r\n        for (uint8 daysInvested = 8; daysInvested <= 25; daysInvested++) {\r\n            WPR[daysInvested] = daysPercent(daysInvested, percentage);\r\n            percentage+= 6;\r\n        }\r\n        BUSD = IERC20(0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56);\r\n    }\r\n\r\n   \r\n    function claimableAmount() public view returns(uint256)\r\n    {\r\n        (uint256 for_withdraw, \r\n        uint256 totalInvested, \r\n        uint256 totalWithdrawn, \r\n        uint256 totalBonus,\r\n        uint256 giveawayBonus,\r\n         uint256[5] memory structure) = oldContract.userInfo(msg.sender);\r\n         if(totalInvested>totalWithdrawn){\r\n            return (totalInvested-totalWithdrawn);\r\n         }\r\n         else\r\n         {\r\n             return 0;\r\n         }    \r\n        \r\n         \r\n    }\r\n\r\n    function _payInvestor(address _addr) private {\r\n        uint256 payout = this.calcPayout(_addr);\r\n\r\n        if (payout > 0) {\r\n            investorsMap[_addr].lastPayout = uint40(block.timestamp);\r\n            investorsMap[_addr].dividends += payout;\r\n        }\r\n    }\r\n\r\n    function _refPayout(address _addr, uint256 _amount) private {\r\n        address up = investorsMap[_addr].daddy;\r\n\r\n        for (uint i = 0; i < BonusLinesCount; i ++) {\r\n            if(up == address(0)) break;\r\n\r\n            uint256 bonus = _amount * referralBonus[i] / percentDivider;\r\n\r\n            investorsMap[up].matchBonus += bonus;\r\n            investorsMap[up].totalBonus += bonus;\r\n\r\n            matchBonus += bonus;\r\n\r\n            emit MatchPayout(up, _addr, bonus);\r\n\r\n            up = investorsMap[up].daddy;\r\n        }\r\n    }\r\n\r\n     function _setUpdaddy(address _addr, address _upline) private {\r\n        if (investorsMap[_addr].daddy == address(0) && _addr != ceoWallet && investorsMap[_upline].depositsArray.length > 0) {\r\n\r\n            investorsMap[_addr].daddy = _upline;\r\n\r\n            for(uint i = 0; i < BonusLinesCount; i++) {\r\n                investorsMap[_upline].structure[i]++;\r\n\r\n                _upline = investorsMap[_upline].daddy;\r\n\r\n                if(_upline == address(0)) break;\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    function deposit(uint8 _lockUp, address _upline, uint256 amount) external { \r\n        uint256 currentBlockTimestamp = uint256(block.timestamp);\r\n        bool hasLaunchPassed = currentBlockTimestamp > 1643428800;\r\n        require(WPR[_lockUp].life_days >= 8, \"Tarif not found\");\r\n        require(amount >= 10 ether, \"Minimum deposit amount is 10 BUSD\");\r\n        require(hasLaunchPassed == true, \"We still havent launched yet!\");\r\n\r\n        BUSD.safeTransferFrom(msg.sender, address(this), amount);\r\n        Investor storage investor = investorsMap[msg.sender];\r\n        require(investor.depositsArray.length < 100, \"Max 100 deposits per address\");\r\n\r\n        uint256 cfee  = amount.mul(ceoFee).div(percentDivider);\r\n        if(investor.depositsArray.length==0)\r\n        {\r\n            lossAmount[msg.sender] = claimableAmount();\r\n        }\r\n\r\n        if(lossAmount[msg.sender]>0)\r\n        {\r\n            if(lossAmount[msg.sender]>cfee){\r\n                BUSD.safeTransfer(msg.sender, cfee);\r\n                lossAmount[msg.sender]-=cfee;\r\n            }\r\n            else{\r\n                BUSD.safeTransfer(msg.sender, lossAmount[msg.sender]);\r\n                lossAmount[msg.sender]=0;\r\n            }\r\n        }\r\n        else{\r\n            BUSD.safeTransfer(ceoWallet, cfee);\r\n        }\r\n \r\n        uint256 giveaway = 0;\r\n        if(WPR[_lockUp].life_days>=25)\r\n        {\r\n            giveaway = amount.mul(3).div(100);\r\n        }\r\n        else if(WPR[_lockUp].life_days>=16)\r\n        {\r\n            giveaway = amount.mul(2).div(100);\r\n        }\r\n        if(giveaway>0){\r\n            BUSD.safeTransfer(msg.sender,giveaway);  \r\n            investor.giveawayBonus = investor.giveawayBonus.add(giveaway);\r\n        }\r\n\r\n        _setUpdaddy(msg.sender, _upline);\r\n\r\n        investor.depositsArray.push(DepositStruct({\r\n            lockUp: _lockUp,\r\n            amount: amount,\r\n            time: uint40(block.timestamp),\r\n            finish : block.timestamp.add(_lockUp*TIME_STEP)\r\n        }));\r\n\r\n        investor.totalInvested += amount;\r\n        contractInvested += amount;\r\n\r\n        _refPayout(msg.sender, amount);\r\n\r\n        emit NewDeposit(msg.sender, amount, _lockUp);\r\n\r\n    }\r\n\r\n    function getInfo() view external returns ( \r\n        uint256 leLockup, \r\n        uint256 leTime, \r\n        uint256 leCurrent, \r\n        bool leTimeLess\r\n        ){\r\n        \r\n        Investor storage investor = investorsMap[msg.sender];\r\n        \r\n        uint256 lastDeposit = investor.depositsArray.length - 1;\r\n        uint256 sendDepositLockup = uint256(investor.depositsArray[lastDeposit].lockUp);\r\n        uint256 sendDepositBlocktime = uint256(investor.depositsArray[lastDeposit].time);\r\n        uint256 sendCurrentTime = uint256(block.timestamp);\r\n        bool isCurrenTimeLess = sendCurrentTime < sendDepositBlocktime + sendDepositLockup*TIME_STEP;\r\n    \r\n        return(\r\n            sendDepositLockup,\r\n            sendDepositBlocktime,\r\n            sendCurrentTime,\r\n            isCurrenTimeLess\r\n            );\r\n    }\r\n\r\n    function withdraw() external { \r\n        Investor storage investor = investorsMap[msg.sender];\r\n\r\n        _payInvestor(msg.sender);\r\n\r\n        require(investor.dividends > 0);\r\n\r\n        uint256 amount = investor.dividends;\r\n\r\n        investor.dividends = 0;\r\n        investor.totalWithdrawn += amount;\r\n\r\n        contractWithdrawn += amount;\r\n\r\n        BUSD.safeTransfer(msg.sender, amount);\r\n\r\n    }\r\n\r\n    function withdrawReferral() external\r\n    {\r\n        Investor storage investor = investorsMap[msg.sender];\r\n        require(investor.matchBonus > 0,\"No earning found\");\r\n        BUSD.safeTransfer(msg.sender, investor.matchBonus);\r\n        investor.totalWithdrawn += investor.matchBonus;\r\n        contractWithdrawn += investor.matchBonus;\r\n\r\n        investor.matchBonus = 0;\r\n    }\r\n\r\n    function depositHalf(uint8 _lockUp, address _upline, uint256 amount) internal {\r\n        require(WPR[_lockUp].life_days > 0, \"Tarif not found\");\r\n        require(amount >= 5 ether, \"Minimum deposit amount is 5 BUSD\");\r\n\r\n        Investor storage investor = investorsMap[msg.sender];\r\n\r\n        require(investor.depositsArray.length < 100, \"Max 100 deposits per address\");\r\n\r\n        uint256 cfee  = amount.mul(100).div(percentDivider);\r\n  \r\n        BUSD.safeTransfer(ceoWallet, cfee);\r\n\r\n \r\n        emit FeePayed (msg.sender, cfee);\r\n\r\n        _setUpdaddy(msg.sender, _upline);\r\n\r\n        investor.depositsArray.push(DepositStruct({\r\n            lockUp: _lockUp,\r\n            amount: amount,\r\n            time: uint40(block.timestamp),\r\n            finish : block.timestamp.add(_lockUp*TIME_STEP)\r\n        }));\r\n\r\n        investor.totalInvested += amount;\r\n        contractInvested += amount;\r\n\r\n        _refPayout(msg.sender, amount);\r\n\r\n        emit NewDeposit(msg.sender, amount, _lockUp);\r\n\r\n    }\r\n\r\n    function withdrawHalf() external { \r\n        Investor storage investor = investorsMap[msg.sender];\r\n\r\n        _payInvestor(msg.sender);\r\n        \r\n        require(investor.dividends > 0 || investor.matchBonus > 0, \"Zero Amount\");\r\n\r\n        uint256 amount = (investor.dividends + investor.matchBonus) / 2;\r\n        \r\n        investor.dividends = 0;\r\n        investor.matchBonus = 0;\r\n        investor.totalWithdrawn += amount;\r\n        contractWithdrawn += amount;\r\n\r\n            \r\n        address bigDaddy = investor.daddy;\r\n\r\n        depositHalf(16, bigDaddy, amount);\r\n\r\n        BUSD.safeTransfer(msg.sender, amount);\r\n    }\r\n\r\n    function calcPayout(address _addr) view external returns (uint256 value) {\r\n        Investor storage investor = investorsMap[_addr];\r\n\r\n        for (uint256 i = 0; i < investor.depositsArray.length; i++) {\r\n                if (investor.lastPayout < investor.depositsArray[i].finish) {\r\n                    DepositStruct storage iterDeposits = investor.depositsArray[i];\r\n                    if(iterDeposits.finish<=block.timestamp){\r\n                        value += iterDeposits.amount * WPR[iterDeposits.lockUp].percent / 100;\r\n                    }\r\n            }\r\n        }\r\n\r\n        return value;\r\n\r\n        }\r\n\r\n\r\n    function userInfo(address _addr) view external returns( \r\n        uint256 for_withdraw, \r\n        uint256 totalInvested, \r\n        uint256 totalWithdrawn, \r\n        uint256 totalBonus,\r\n        uint256 giveawayBonus,\r\n         uint256[BonusLinesCount] memory structure\r\n        ) {\r\n        Investor storage investor = investorsMap[_addr];\r\n\r\n        uint256 payout = this.calcPayout(_addr);\r\n\r\n        for(uint8 i = 0; i <BonusLinesCount; i++) {\r\n            structure[i] = investor.structure[i];\r\n        }\r\n        \r\n        return (\r\n            payout + investor.dividends + investor.matchBonus,\r\n            investor.totalInvested,\r\n            investor.totalWithdrawn,\r\n            investor.totalBonus,\r\n            investor.giveawayBonus,\r\n             structure\r\n            );\r\n    }\r\n\r\n    function depositeInfo(address user) view external returns( DepositStruct[] memory deposits)\r\n    {\r\n        return investorsMap[user].depositsArray;\r\n    }\r\n\r\n    function getUserAmountOfDeposits(address userAddress) public view returns(uint256) {\r\n\t\treturn investorsMap[userAddress].depositsArray.length;\r\n\t}\r\n\r\n    function depositeInfoSingle(address user,uint256 index) view external returns( DepositStruct memory deposits)\r\n    {\r\n        return investorsMap[user].depositsArray[index];\r\n    }\r\n\r\n    function contractInfo() view external returns(uint256 _invested, uint256 _withdrawn, uint256 _match_bonus) {\r\n        return (contractInvested, contractWithdrawn, matchBonus);\r\n    }\r\n\r\n    function isContract(address addr) internal view returns (bool) {\r\n        uint size;\r\n        assembly { size := extcodesize(addr) }\r\n        return size > 0;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"ceoAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"FeePayed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MatchPayout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"tarif\",\"type\":\"uint8\"}],\"name\":\"NewDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"upline\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bonus\",\"type\":\"uint256\"}],\"name\":\"Upline\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BUSD\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TIME_STEP\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"WPR\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"life_days\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"percent\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"calcPayout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ceoFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ceoWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_invested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_match_bonus\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractInvested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_lockUp\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_upline\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"depositeInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"lockUp\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"time\",\"type\":\"uint40\"},{\"internalType\":\"uint256\",\"name\":\"finish\",\"type\":\"uint256\"}],\"internalType\":\"struct DepositStruct[]\",\"name\":\"deposits\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"depositeInfoSingle\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"lockUp\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"time\",\"type\":\"uint40\"},{\"internalType\":\"uint256\",\"name\":\"finish\",\"type\":\"uint256\"}],\"internalType\":\"struct DepositStruct\",\"name\":\"deposits\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"leLockup\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"leTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"leCurrent\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"leTimeLess\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserAmountOfDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"investorsMap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"daddy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"dividends\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"matchBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"lastPayout\",\"type\":\"uint40\"},{\"internalType\":\"uint256\",\"name\":\"totalInvested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWithdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"giveawayBonus\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lossAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"matchBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oldContract\",\"outputs\":[{\"internalType\":\"contract OldContract\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"referralBonus\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"for_withdraw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalInvested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWithdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"giveawayBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256[5]\",\"name\":\"structure\",\"type\":\"uint256[5]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawHalf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawReferral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BFarmV2", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000030c2da9aab25f466be5e2edccb72c9f2fb490aa8", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://2385cff9bce6902f74ccab280feef1e28c5fe62b0d49368ddf72782c7d4bbc9a"}