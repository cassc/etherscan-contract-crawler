{"SourceCode": "pragma solidity ^0.4.12;\r\n\r\n\r\n/// @title Multisignature wallet - Allows multiple parties to agree on transactions before execution.\r\n/// @author Stefan George - <stefan.george@consensys.net>\r\ncontract MultiSigWallet {\r\n\r\n    event Confirmation(address sender, bytes32 transactionHash);\r\n    event Revocation(address sender, bytes32 transactionHash);\r\n    event Submission(bytes32 transactionHash);\r\n    event Execution(bytes32 transactionHash);\r\n    event Deposit(address sender, uint value);\r\n    event OwnerAddition(address owner);\r\n    event OwnerRemoval(address owner);\r\n    event RequiredUpdate(uint required);\r\n\r\n    mapping (bytes32 => Transaction) public transactions;\r\n    mapping (bytes32 => mapping (address => bool)) public confirmations;\r\n    mapping (address => bool) public isOwner;\r\n    address[] owners;\r\n    bytes32[] transactionList;\r\n    uint public required;\r\n\r\n    struct Transaction {\r\n        address destination;\r\n        uint value;\r\n        bytes data;\r\n        uint nonce;\r\n        bool executed;\r\n    }\r\n\r\n    modifier onlyWallet() {\r\n        if (msg.sender != address(this))\r\n            throw;\r\n        _;\r\n    }\r\n\r\n    modifier signaturesFromOwners(bytes32 transactionHash, uint8[] v, bytes32[] rs) {\r\n        for (uint i=0; i<v.length; i++)\r\n            if (!isOwner[ecrecover(transactionHash, v[i], rs[i], rs[v.length + i])])\r\n                throw;\r\n        _;\r\n    }\r\n\r\n    modifier ownerDoesNotExist(address owner) {\r\n        if (isOwner[owner])\r\n            throw;\r\n        _;\r\n    }\r\n\r\n    modifier ownerExists(address owner) {\r\n        if (!isOwner[owner])\r\n            throw;\r\n        _;\r\n    }\r\n\r\n    modifier confirmed(bytes32 transactionHash, address owner) {\r\n        if (!confirmations[transactionHash][owner])\r\n            throw;\r\n        _;\r\n    }\r\n\r\n    modifier notConfirmed(bytes32 transactionHash, address owner) {\r\n        if (confirmations[transactionHash][owner])\r\n            throw;\r\n        _;\r\n    }\r\n\r\n    modifier notExecuted(bytes32 transactionHash) {\r\n        if (transactions[transactionHash].executed)\r\n            throw;\r\n        _;\r\n    }\r\n\r\n    modifier notNull(address destination) {\r\n        if (destination == 0)\r\n            throw;\r\n        _;\r\n    }\r\n\r\n    modifier validRequired(uint _ownerCount, uint _required) {\r\n        if (   _required > _ownerCount\r\n            || _required == 0\r\n            || _ownerCount == 0)\r\n            throw;\r\n        _;\r\n    }\r\n\r\n    function addOwner(address owner)\r\n        external\r\n        onlyWallet\r\n        ownerDoesNotExist(owner)\r\n    {\r\n        isOwner[owner] = true;\r\n        owners.push(owner);\r\n        OwnerAddition(owner);\r\n    }\r\n\r\n    function removeOwner(address owner)\r\n        external\r\n        onlyWallet\r\n        ownerExists(owner)\r\n    {\r\n        isOwner[owner] = false;\r\n        for (uint i=0; i<owners.length - 1; i++)\r\n            if (owners[i] == owner) {\r\n                owners[i] = owners[owners.length - 1];\r\n                break;\r\n            }\r\n        owners.length -= 1;\r\n        if (required > owners.length)\r\n            updateRequired(owners.length);\r\n        OwnerRemoval(owner);\r\n    }\r\n\r\n    function updateRequired(uint _required)\r\n        public\r\n        onlyWallet\r\n        validRequired(owners.length, _required)\r\n    {\r\n        required = _required;\r\n        RequiredUpdate(_required);\r\n    }\r\n\r\n    function addTransaction(address destination, uint value, bytes data, uint nonce)\r\n        private\r\n        notNull(destination)\r\n        returns (bytes32 transactionHash)\r\n    {\r\n        transactionHash = sha3(destination, value, data, nonce);\r\n        if (transactions[transactionHash].destination == 0) {\r\n            transactions[transactionHash] = Transaction({\r\n                destination: destination,\r\n                value: value,\r\n                data: data,\r\n                nonce: nonce,\r\n                executed: false\r\n            });\r\n            transactionList.push(transactionHash);\r\n            Submission(transactionHash);\r\n        }\r\n    }\r\n\r\n    function submitTransaction(address destination, uint value, bytes data, uint nonce)\r\n        external\r\n        returns (bytes32 transactionHash)\r\n    {\r\n        transactionHash = addTransaction(destination, value, data, nonce);\r\n        confirmTransaction(transactionHash);\r\n    }\r\n\r\n    function submitTransactionWithSignatures(address destination, uint value, bytes data, uint nonce, uint8[] v, bytes32[] rs)\r\n        external\r\n        returns (bytes32 transactionHash)\r\n    {\r\n        transactionHash = addTransaction(destination, value, data, nonce);\r\n        confirmTransactionWithSignatures(transactionHash, v, rs);\r\n    }\r\n\r\n    function addConfirmation(bytes32 transactionHash, address owner)\r\n        private\r\n        notConfirmed(transactionHash, owner)\r\n    {\r\n        confirmations[transactionHash][owner] = true;\r\n        Confirmation(owner, transactionHash);\r\n    }\r\n\r\n    function confirmTransaction(bytes32 transactionHash)\r\n        public\r\n        ownerExists(msg.sender)\r\n    {\r\n        addConfirmation(transactionHash, msg.sender);\r\n        executeTransaction(transactionHash);\r\n    }\r\n\r\n    function confirmTransactionWithSignatures(bytes32 transactionHash, uint8[] v, bytes32[] rs)\r\n        public\r\n        signaturesFromOwners(transactionHash, v, rs)\r\n    {\r\n        for (uint i=0; i<v.length; i++)\r\n            addConfirmation(transactionHash, ecrecover(transactionHash, v[i], rs[i], rs[i + v.length]));\r\n        executeTransaction(transactionHash);\r\n    }\r\n\r\n    function executeTransaction(bytes32 transactionHash)\r\n        public\r\n        notExecuted(transactionHash)\r\n    {\r\n        if (isConfirmed(transactionHash)) {\r\n            Transaction tx = transactions[transactionHash];\r\n            tx.executed = true;\r\n            if (!tx.destination.call.value(tx.value)(tx.data))\r\n                throw;\r\n            Execution(transactionHash);\r\n        }\r\n    }\r\n\r\n    function revokeConfirmation(bytes32 transactionHash)\r\n        external\r\n        ownerExists(msg.sender)\r\n        confirmed(transactionHash, msg.sender)\r\n        notExecuted(transactionHash)\r\n    {\r\n        confirmations[transactionHash][msg.sender] = false;\r\n        Revocation(msg.sender, transactionHash);\r\n    }\r\n\r\n    function MultiSigWallet(address[] _owners, uint _required)\r\n        validRequired(_owners.length, _required)\r\n    {\r\n        for (uint i=0; i<_owners.length; i++)\r\n            isOwner[_owners[i]] = true;\r\n        owners = _owners;\r\n        required = _required;\r\n    }\r\n\r\n    function()\r\n        payable\r\n    {\r\n        if (msg.value > 0)\r\n            Deposit(msg.sender, msg.value);\r\n    }\r\n\r\n    function isConfirmed(bytes32 transactionHash)\r\n        public\r\n        constant\r\n        returns (bool)\r\n    {\r\n        uint count = 0;\r\n        for (uint i=0; i<owners.length; i++)\r\n            if (confirmations[transactionHash][owners[i]])\r\n                count += 1;\r\n            if (count == required)\r\n                return true;\r\n    }\r\n\r\n    function confirmationCount(bytes32 transactionHash)\r\n        external\r\n        constant\r\n        returns (uint count)\r\n    {\r\n        for (uint i=0; i<owners.length; i++)\r\n            if (confirmations[transactionHash][owners[i]])\r\n                count += 1;\r\n    }\r\n\r\n    function filterTransactions(bool isPending)\r\n        private\r\n        returns (bytes32[] _transactionList)\r\n    {\r\n        bytes32[] memory _transactionListTemp = new bytes32[](transactionList.length);\r\n        uint count = 0;\r\n        for (uint i=0; i<transactionList.length; i++)\r\n            if (   isPending && !transactions[transactionList[i]].executed\r\n                || !isPending && transactions[transactionList[i]].executed)\r\n            {\r\n                _transactionListTemp[count] = transactionList[i];\r\n                count += 1;\r\n            }\r\n        _transactionList = new bytes32[](count);\r\n        for (i=0; i<count; i++)\r\n            if (_transactionListTemp[i] > 0)\r\n                _transactionList[i] = _transactionListTemp[i];\r\n    }\r\n\r\n    function getPendingTransactions()\r\n        external\r\n        constant\r\n        returns (bytes32[] _transactionList)\r\n    {\r\n        return filterTransactions(true);\r\n    }\r\n\r\n    function getExecutedTransactions()\r\n        external\r\n        constant\r\n        returns (bytes32[] _transactionList)\r\n    {\r\n        return filterTransactions(false);\r\n    }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"confirmations\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"destination\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"},{\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"submitTransaction\",\"outputs\":[{\"name\":\"transactionHash\",\"type\":\"bytes32\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"removeOwner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"transactionHash\",\"type\":\"bytes32\"}],\"name\":\"confirmationCount\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_required\",\"type\":\"uint256\"}],\"name\":\"updateRequired\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"transactions\",\"outputs\":[{\"name\":\"destination\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"},{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"executed\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"transactionHash\",\"type\":\"bytes32\"}],\"name\":\"isConfirmed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"addOwner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"transactionHash\",\"type\":\"bytes32\"}],\"name\":\"confirmTransaction\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"destination\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"},{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"v\",\"type\":\"uint8[]\"},{\"name\":\"rs\",\"type\":\"bytes32[]\"}],\"name\":\"submitTransactionWithSignatures\",\"outputs\":[{\"name\":\"transactionHash\",\"type\":\"bytes32\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"transactionHash\",\"type\":\"bytes32\"}],\"name\":\"executeTransaction\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPendingTransactions\",\"outputs\":[{\"name\":\"_transactionList\",\"type\":\"bytes32[]\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"required\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getExecutedTransactions\",\"outputs\":[{\"name\":\"_transactionList\",\"type\":\"bytes32[]\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"transactionHash\",\"type\":\"bytes32\"}],\"name\":\"revokeConfirmation\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"transactionHash\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8[]\"},{\"name\":\"rs\",\"type\":\"bytes32[]\"}],\"name\":\"confirmTransactionWithSignatures\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owners\",\"type\":\"address[]\"},{\"name\":\"_required\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"transactionHash\",\"type\":\"bytes32\"}],\"name\":\"Confirmation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"transactionHash\",\"type\":\"bytes32\"}],\"name\":\"Revocation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"transactionHash\",\"type\":\"bytes32\"}],\"name\":\"Submission\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"transactionHash\",\"type\":\"bytes32\"}],\"name\":\"Execution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerAddition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerRemoval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"RequiredUpdate\",\"type\":\"event\"}]", "ContractName": "MultiSigWallet", "CompilerVersion": "v0.4.12+commit.194ff033", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000030000000000000000000000009539510014d0b37b38fd6630c0df20b4dc3079a2000000000000000000000000f20fcd5a60f15ca18785c75c491176c8a9e6b35f00000000000000000000000040cbcac07c69e1fbaa981466f9d44a9249242151", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU LGPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://7db6329c59c58af0e4aac431108e5fdf9f17458a3e76c4cec4b35d21cffa9680"}