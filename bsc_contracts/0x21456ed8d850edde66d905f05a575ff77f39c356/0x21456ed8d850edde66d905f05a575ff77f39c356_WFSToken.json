{"SourceCode": "// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` and `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``from``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `from` to `to`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n        }\r\n        _balances[to] += amount;\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\r\n     *\r\n     * Does not update the allowance amount in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Might emit an {Approval} event.\r\n     */\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\n// File: contracts/WFSToken.sol\r\n\r\n\r\npragma solidity 0.8.15;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n*   @dev Blacklist, Direct Push to Superior, Direct Push to Subordinate\r\n*/\r\ncontract WFSBase is Context, Ownable {\r\n\r\n    // Is it a blacklist\r\n    mapping(address => bool) public isBlacker;\r\n    // @require 2270\r\n    // Direct promotion to superior\r\n    mapping(address => address) public isConnected;\r\n    // @require 2270\r\n    // Direct Push Subordinate\r\n    mapping(address => address[]) internal _downLine;\r\n\r\n    event AddedList(address _account);\r\n    event RemovedList(address _account);\r\n\r\n    modifier isBlackList(address _maker) {\r\n        require(!(isBlacker[_maker]), \"IBL\");\r\n        _;\r\n    }\r\n\r\n    // @dev Query whether it is a blacklist member\r\n    // @return true/false\r\n    function getBlacker(address _maker) external view returns(bool) {\r\n        return isBlacker[_maker];\r\n    }\r\n\r\n    // @dev Query Subordinates\r\n    // @return Subordinate member address array\r\n    function getDownLine() public view returns(address[] memory) {        \r\n        return _downLine[_msgSender()];\r\n    }\r\n\r\n    // @dev Add blacklist\r\n    function addBlackeList (address _maker) public onlyOwner {\r\n        isBlacker[_maker] = true;\r\n        emit AddedList(_maker);\r\n    }\r\n\r\n    // @dev Remove blacklist\r\n    function removeBlackList (address _maker) public onlyOwner {\r\n        isBlacker[_maker] = false;\r\n        emit RemovedList(_maker);\r\n    }  \r\n\r\n    // @require 2270\r\n    // @dev Bind Parent\r\n    function addUpLine(address payable _uper) public returns(bool) {          \r\n        address _account = _msgSender();\r\n\r\n        // The superior cannot be the address 0\r\n        require(_uper != address(0), \"AUL0\");\r\n        // You cannot bind yourself\r\n        require(_account != _uper, \"AUL1\");\r\n        // No superior\r\n        require(isConnected[_account] == address(0), \"AUL2\");\r\n        // You have no subordinates (you cannot join other communities if you have a community)\r\n        require(_downLine[_account].length == 0, \"AUL3\");\r\n\r\n        // Put yourself on the superior community list\r\n        _downLine[_uper].push(_account);\r\n        // Associated Direct Push to Parent\r\n        isConnected[_account] = _uper;\r\n\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n*   @dev Calculation contract\r\n*          Arithmetic air drop, Arithmetic transfer, Arithmetic generation, Arithmetic destruction\r\n*          Calculation force holder record\r\n*          Main calculation force query, temporary calculation force query, platform total calculation force query\r\n*          Service charge currency setting, service charge setting for air drop, service charge setting for transfer and service charge setting for receiving dividends\r\n*          Close airdrop\r\n*          CALCULAR TRANSFER EVENT\r\n*/\r\ncontract WFSPower is WFSBase {\r\n    // Force calculation accuracy\r\n    uint256 public powDecimals = 2;\r\n    // The total amount of air drop is 150 million, and the precision is 100\r\n    uint256 public airDropSupply = 15000000000;\r\n    // Service charge currency\r\n    address public tokenFee;\r\n    // Calculate the import service charge, and the tokenFee in the service charge currency\r\n    uint256 public airDropFee = 0;\r\n    // @require 2268\r\n    // Calculate the transfer service charge. The service charge currency is the primary currency of the chain by default\r\n    uint256 public powTransferFee = 0;\r\n    // Receive the dividend service charge, and the tokenFee in the service charge currency\r\n    uint256 public receiveFee = 0;\r\n    // Total amount of computing power that the platform takes effect\r\n    uint256 public powTotalSupply;\r\n    // Number of users\r\n    uint256 private _userCount = 0;\r\n    // Whether air drop is enabled\r\n    bool public openAirDrop = true;\r\n\r\n    // Accumulated service charge (WBNB)\r\n    uint256 internal _totalFee = 0;\r\n    // Accumulated service charge for transfer of accounting force (BNB)\r\n    uint256 internal _totalPowTransferFee = 0;\r\n\r\n    // Principal computing force\r\n    mapping(address => uint256) private _maBalances;\r\n    // Secondary computing force\r\n    mapping(address => uint256) private _seBalances;\r\n    // Account user ID\r\n    mapping(address => uint256) internal _isSharer;\r\n\r\n    // @require 2266\r\n    // @dev CALCULAR TRANSFER EVENT\r\n    // @param: from Transfer out address\r\n    // @param: to Transfer address\r\n    // @param: amount Quantity of calculation force\r\n    // @param: powType Force type\r\n    event PTransfer(address indexed from, address indexed to, uint256 amount, uint256 powType);\r\n\r\n    // @require 2266\r\n    // @dev Query the real-time \"master computing power\" of the account according to the address\r\n    // @param: _account Query account address\r\n    function powMaBalanceOf(address _account) public view returns (uint256) {\r\n        return _maBalances[_account];\r\n    }\r\n\r\n    // @require 2266\r\n    // @dev Query the real-time \"temporary computing power\" of the account according to the address\r\n    // @param: _account Query account address\r\n    function powSeBalanceOf(address _account) public view returns (uint256) {\r\n        return _seBalances[_account];\r\n    }\r\n\r\n    // @dev Add numeracy holder\r\n    // @param\uff1aaccount List of holders\r\n    function getPowSharer(address _account) public view onlyOwner returns(uint256) {\r\n        return _isSharer[_account];\r\n    }\r\n\r\n    // @dev Setting service charge \r\n    // @param: _airDropFee Calculate the import service charge, 18 digits of tokenFee USDT in the service charge currency\r\n    // @param\uff1a_powTransferFee Calculate the transfer service charge. The service charge currency is the primary currency of the chain, tokenFee USDT, 18 digits by default\r\n    // @param\uff1a_receiveFee 18 numbers of tokenFee USDT in the currency of service charge for receiving dividend\r\n    function setFee(uint256 _airDropFee, uint256 _powTransferFee, uint256 _receiveFee) public onlyOwner {\r\n        airDropFee = _airDropFee;\r\n        powTransferFee = _powTransferFee;\r\n        receiveFee = _receiveFee;\r\n    }\r\n\r\n    // @dev Close airdrop\r\n    function closeAirDrop() public onlyOwner {\r\n        openAirDrop = false;\r\n    }\r\n\r\n     // @dev The platform checks the service charge received from the contract (WBNB)\r\n    function getFee() external view onlyOwner returns(uint256) {\r\n        return _totalFee;\r\n    }\r\n\r\n    // @dev Service charge received from platform withdrawal contract (WBNB)\r\n    function reFee() external onlyOwner returns(bool) {\r\n        uint256 _amount = _totalFee;\r\n        _totalFee = 0;\r\n        IERC20(tokenFee).transfer(_msgSender(), _amount);        \r\n        return true;\r\n    }\r\n\r\n     // @dev The platform checks the service charge (BNB) for the transfer of accounting power received by the contract\r\n    function getPowTransferFee() external view onlyOwner returns(uint256) {\r\n        return _totalPowTransferFee;\r\n    }\r\n\r\n    // @dev Service charge for transfer of accounting force (BNB) received from platform withdrawal contract\r\n    function rePowTransferFee() external onlyOwner returns(bool) {\r\n        uint256 _amount = _totalPowTransferFee;\r\n        _totalPowTransferFee = 0;\r\n        payable(_msgSender()).transfer(_amount);       \r\n        return true;\r\n    }\r\n    \r\n    // @require 2265\r\n    // @dev The administrator imports computing power and binds the superior\r\n    // @param\uff1a_account User address of air drop\r\n    // @param\uff1a_amount The number of air drops should be multiplied by 100 (calculation accuracy)\r\n    // @param\uff1a_uper Superior address, if no superior passes in 0x0000000000000000000000000000000000000000\r\n    // @return Documents\r\n    function powAirDrop(address _account, uint256 _amount, address _uper) public onlyOwner returns(bool) {\r\n        // CALI airdrop is on\r\n        require(openAirDrop, \"PAD1\");\r\n        // Total remaining airdrop\r\n        uint256 _supply = airDropSupply;\r\n        require(_supply >= _amount, \"PAD2\");\r\n        // Collect the handling charge for the introduction of computing power\r\n        IERC20(tokenFee).transferFrom(_account, address(this), airDropFee);\r\n        // Subtract Total\r\n        unchecked {\r\n            airDropSupply = _supply - _amount;\r\n        }\r\n        // Casting calculation force, 1 is permanent calculation force\r\n        _powMint(_account, _amount, 1);\r\n\r\n        if(_uper != address(0)) {\r\n            // Put yourself on the superior community list\r\n            _downLine[_uper].push(_account);\r\n            // Associated Direct Push to Parent\r\n            isConnected[_account] = _uper;\r\n        }\r\n        \r\n\t\t// Total handling charge increase (WBNB)\r\n        _totalFee += airDropFee;\r\n        \r\n        return true;\r\n    }\r\n\r\n    // @require 2268\r\n    // @dev Transfer of calculation force (only permanent calculation force transfer is allowed, and temporary calculation force transfer is not allowed)\r\n    // @param\uff1afrom Transfer out address\r\n    // @param\uff1ato Transfer in address\r\n    // @param\uff1aamount Transfer quantity\r\n    function powTransfer(address _to, uint256 _amount) public payable isBlackList(_msgSender()) returns(bool) {\r\n        require(msg.value >= powTransferFee, \"PT1\");\r\n        \r\n        require(_to != address(0), \"PT2\");\r\n        address _from = _msgSender();\r\n        // Permanent balance\r\n        uint256 _fromBalance = _maBalances[_from];\r\n        require(_fromBalance >= _amount, \"PT3\");\r\n        // Deduct the permanent calculation force of the billing address\r\n        unchecked {\r\n            _maBalances[_from] = _fromBalance - _amount;\r\n        }\r\n\r\n        // Increase the permanent calculation force of the collection address\r\n        _maBalances[_to] += _amount;\r\n        // Add payee to the list of accounting holders\r\n        _addPowSharer(_to);\r\n\r\n        emit PTransfer(_from, _to, _amount, 1);\r\n\r\n        // Increase in handling charge for transfer of final accounting force (BNB)\r\n\t\t_totalPowTransferFee += msg.value;\r\n\r\n        return true;\r\n    }\r\n\r\n    // @dev Casting calculation\r\n    // @param\uff1aaccount Collection user\r\n    // @param\uff1aamount Initial calculation force quantity\r\n    // @param\uff1apType Initial calculation force type,=1 is permanent calculation force,=2 is secondary calculation force\r\n    function _powMint(address _account, uint256 _amount, uint256 _powType) internal {\r\n        require(_account != address(0), \"_PM1\");\r\n        require(_powType == 1 || _powType == 2, \"_PM2\");\r\n        \r\n        // Increase in total computing power\r\n        powTotalSupply += _amount;\r\n        \r\n        // If it is 1, increase the permanent calculation force; Otherwise, it is 2, and the temporary calculation force is increased\r\n        if(_powType == 1) {\r\n            _maBalances[_account] += _amount;\r\n        }else {\r\n            _seBalances[_account] += _amount;\r\n        }\r\n\r\n        // Add payee to the list of accounting holders\r\n        _addPowSharer(_account);\r\n\r\n        emit PTransfer(address(0), _account, _amount, _powType);\r\n    }\r\n\r\n    // @dev Calculation of temporary destruction\r\n    // @param\uff1aaccount Transfer out address\r\n    // @param\uff1aamount Destroyed quantity\r\n    function _powBurn(address _account, uint256 _amount) internal virtual {\r\n        require(_account != address(0), \"_PB1\");\r\n\r\n        // User's temporary balance\r\n        uint256 _accountBalance = _seBalances[_account];\r\n        require(_accountBalance >= _amount, \"_PB2\");\r\n        \r\n        // Decrease in user's temporary calculation balance\r\n        unchecked {\r\n            _seBalances[_account] = _accountBalance - _amount;\r\n        }\r\n        // The total computing power of the platform decreases\r\n        powTotalSupply -= _amount;\r\n        \r\n        emit PTransfer(_account, address(0), _amount, 2);\r\n    }\r\n\r\n    // @dev Add numeracy holder\r\n    // @param\uff1aaccount List of holders\r\n    function _addPowSharer(address _account) internal {        \r\n        if(!(_isSharer[_account] > 0)) {            \r\n            _userCount++;\r\n            _isSharer[_account] = _userCount;\r\n        }\r\n    }  \r\n\r\n}\r\n\r\n/**\r\n*   @dev WFC Business contract\r\n*          Destroy, store, retrieve, reward, lose reward\r\n*          Fund dividends, users receiving dividends, dividend deflation\r\n*          Destruction events, storage events, retrieval events, and dividend collection events\r\n*          Storage order query\r\n*\r\n*          Freeze address setting and freeze amount query\r\n*          Re WFC transfer, re WFC third party transfer\r\n*          \r\n*/\r\ncontract WFSToken is ERC20, WFSPower {\r\n    // Basic business structure\r\n    struct BC {\r\n        // Business base\r\n        uint256 base;\r\n        // Calculated force ratio obtained\r\n        uint256 rate;\r\n    }\r\n\r\n    // Store Order Structure\r\n    struct SO {\r\n        // Storage amount\r\n        uint256 amount;\r\n        // Quantity of calculation force obtained\r\n        uint256 pow;\r\n        // Storage time\r\n        uint256 storageDate;\r\n    }\r\n\r\n    // Token storage order\r\n    SO[] private _storageOrders;\r\n    // List of foundations\r\n    address[] private _funders;\r\n\r\n    // Dividend deflation ratio 50%\r\n    uint256 constant public ShareDeflation = 50;\r\n    // The daily dividend amount is 500000 WFC = 500,000 * 10 ** 8\r\n    uint256 public shareAmount = 50000000000000;\r\n    // Last fixed dividend date\r\n    uint256 public shareDate = block.timestamp;\r\n    // Number of dividends\r\n    uint256 public shareCount = 0;\r\n    // Minimum storage amount\uff0c3000 * 10 ** 8\r\n    uint256 public storageBase = 300000000000;  \r\n\r\n    // @dev: Recommend reward configuration, and obtain reward configuration according to recommended interval algebra\r\n    // @param: Algebra 1-13\r\n    // @return: base The minimum amount of your own computing power required to obtain rewards\r\n    // @return: decimals Force calculation accuracy\r\n    // @return: rate Calculated force ratio obtained, 50 represents 50%\r\n    // @return: powType Force type,=1 is permanent force,=2 is temporary force\r\n    mapping(uint256 => BC) public rewardConf;\r\n    // @dev: Transaction pair address, transaction pair address on pancake\r\n    mapping(address => bool) public pairAddress;\r\n    // @dev: Destroy the configuration and obtain the configuration according to the burnType\r\n    // @param: burnType Destruction business type:=50 is 50% destruction,=100 is 100% destruction\r\n    // @return: Minimum destruction quantity\r\n    mapping(uint256 => uint256) public burnBase;\r\n    // @dev: Amount of dividends to be received by users\r\n    mapping(address => uint256) public accToReAmt;\r\n    // @dev: The last time the user received the dividend\r\n    mapping(address => uint256) public accToReDay;\r\n    // @dev: Frozen amount\r\n    // @param: User address\r\n    // @return: Frozen amount\r\n    mapping(address => uint256) private _freezeBalances;\r\n    // @dev: Query the amount not retrieved from the order according to the order number\r\n    // @param: Order ID\r\n    // @return: Unretrieved amount\r\n    mapping(uint256 => uint256) private _soToAmt;\r\n    // @dev: Query order user according to order ID\r\n    // @param: Order ID\r\n    // @return: User address\r\n    mapping(uint256 => address) private _soToAcc;     \r\n        \r\n    // Destruction event\r\n    // @param: burner Destroyer\r\n    // @param: amount Destroyed quantity\r\n    // @param: amountType Account type of destruction amount:=1 is balance destruction,=2 is freeze destruction\r\n    // @param: burnType Destruction business type:=50 is 50% destruction,=100 is 100% destruction\r\n    event Burned(address indexed burner, uint256 amount, uint256 amountType, uint256 burnType);\r\n    // Storage Events\r\n    // @param: id Storage record ID\r\n    // @param: stroager Stored by\r\n    // @param: amount  quantity\r\n    event Storaged(uint256 indexed id, address indexed stroager, uint256 amount);\r\n    // Retrieve storage events\r\n    // @param: id Retrieve record ID\r\n    // @param: retriever Retrieved by\r\n    // @param: amount quantity\r\n    event Retrieved(uint256 indexed id, address indexed retriever, uint256 amount);   \r\n    // Dividend receiving event\r\n    // @param: account Recipient\r\n    // @param: amount quantity\r\n    event Received(address indexed receiver, uint256 amount);\r\n\r\n    constructor() ERC20(\"WFCD\", \"WFCD\") {\r\n\r\n        // Service charge currency, WBNB as formal service charge\r\n        tokenFee = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\r\n\r\n        burnBase[50] = 50000000000;\r\n        burnBase[100] = 10000000000;\r\n\r\n        rewardConf[1] = BC(100, 100);\r\n        rewardConf[2] = BC(200, 30);\r\n        rewardConf[3] = BC(300, 20);\r\n        rewardConf[4] = BC(400, 5);\r\n        rewardConf[5] = BC(500, 5);\r\n        rewardConf[6] = BC(600, 5);\r\n        rewardConf[7] = BC(700, 5);\r\n        rewardConf[8] = BC(800, 5);\r\n        rewardConf[9] = BC(900, 5);\r\n        rewardConf[10] = BC(1000, 5);\r\n        rewardConf[11] = BC(1100, 5);\r\n        rewardConf[12] = BC(1200, 5);\r\n        rewardConf[13] = BC(1300, 5);\r\n    }\r\n\r\n    // @dev Override WFC accuracy\r\n    function decimals() public pure override returns (uint8) {\r\n        return 8;\r\n    }\r\n\r\n    // @dev Query of frozen amount\r\n    function freezeBalanceOf(address account) public view returns (uint256) {\r\n        return _freezeBalances[account];\r\n    }\r\n\r\n    // @dev Query storage order\r\n    // @param: _id Store order number\r\n    function getStorageOrder(uint256 _id) public view returns(SO memory) {\r\n        require(_msgSender() == _soToAcc[_id]);\r\n        return _storageOrders[_id];\r\n    }\r\n\r\n    // @dev Re, covering WFC transfer\r\n    function transfer(address to, uint256 amount) public override returns(bool) {\r\n        address owner = _msgSender();\r\n\r\n        // If the transfer out address is a transaction pair address, freeze the transaction; Otherwise, it is normal transfer business\r\n        if(pairAddress[owner]) {\r\n            _burn(owner, amount);\r\n            _freezeBalances[to] += amount;\r\n        } else {\r\n            _transfer(owner, to, amount);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    // @dev Rewritten, covering WFC third party transfers\r\n    function transferFrom(address from, address to, uint256 amount) public override returns(bool) {\r\n        address spender = _msgSender();\r\n\r\n        _spendAllowance(from, spender, amount);\r\n        // If the transfer initiating address is a transaction pair address, freeze the transaction\r\n        if(pairAddress[spender]) {\r\n            _burn(from, amount);\r\n            _freezeBalances[to] += amount;\r\n        }else {\r\n            _transfer(from, to, amount);\r\n        }\r\n        \r\n        return true;\r\n    }\r\n\r\n    // @dev Configure the list of foundations\r\n    // @param: _members List of foundations\r\n    function setFunders(address[] calldata _members) public onlyOwner {\r\n        _funders = _members;\r\n    }\r\n\r\n    // @dev Set transfer freezing address\r\n    function addPairAddress(address _pair) public onlyOwner {\r\n       pairAddress[_pair] = true;\r\n    }\r\n\r\n    // @dev Remove Transfer Blocking Address\r\n    function removePairAddress(address _pair) public onlyOwner {\r\n        pairAddress[_pair] = false;\r\n    }\r\n\r\n    // @require 2273\r\n    // @dev Destroy WFC to obtain permanent computing power\r\n    // @param: _amount Destruction amount, the value passed in=the quantity entered by the user * 10 * * 8 (WFC currency precision)\r\n    // @param: _amountType Type of destruction account:=1 is balance destruction (_burnType can only be transferred in=100),=2 is freeze destruction\r\n    // @param: _burnType Destruction business type:=50 is 50% destruction,=100 is 100% destruction\r\n    // @return Success Status \r\n    function burned(uint256 _amount, uint256 _amountType, uint256 _burnType) public returns(bool) {\r\n        // Restricted account type\r\n        require(_amountType == 1 || _amountType == 2, \"B1\");\r\n        // Restricted business type\r\n        require(_burnType == 50 || _burnType == 100, \"B2\");\r\n        // Read the storage parameter configurations of different business types\r\n        uint256 _base = burnBase[_burnType];        \r\n        address _burner = _msgSender();\r\n        // The destruction quantity must be greater than or equal to the configured minimum destruction quantity\r\n        require(_amount >= _base, \"B3\");\r\n        // The amount of calculation force obtained. The default is 100% of permanent calculation force\r\n        uint256 _pow = _amount / _base;\r\n        \r\n        // If account type=1 (balance destroyed)\r\n        if(_amountType == 1) {          \r\n            // Balance destruction can only be 100% destruction (burnType=2)\r\n            require(_burnType == 100, \"B4\");\r\n            // Destroy WFC in balance\r\n            _burn(_burner, _amount);  \r\n        }else {\r\n            // Otherwise, it is frozen and destroyed\r\n            // Freeze Balance\r\n            uint256 accountBalance = _freezeBalances[_burner];        \r\n            // The frozen balance is greater than or equal to the destruction amount\r\n            require(accountBalance >= _amount, \"B5\");\r\n            // Update frozen balance\r\n            unchecked {\r\n                _freezeBalances[_burner] = accountBalance - _amount;\r\n            }\r\n            // In case of 50% destruction (half of the destruction is converted into permanent accounting force, and half is put into the account balance)\r\n            if(_burnType == 50) {\r\n                // 50% included in the balance\r\n                _mint(_burner, (_amount / 2));\r\n                // 50% included in permanent calculation force\r\n                _pow = (_amount  / 2) / _base;\r\n            }\r\n        }\r\n\r\n        // The calculation accuracy is 2 digits, so it needs to be multiplied by 100\r\n        _pow = _pow * 100;\r\n        // Distribution of calculation force:_ Burner Destroyer_ Quantity of pow calculation force,=1 permanent calculation force\r\n        _powMint(_burner, _pow, 1);\r\n        // Reward calculation:_ Burner Destroyer_ Pow basic computing power,=1 permanent computing power,=1 incentive business\r\n        _reward(_burner, _pow, 1, 1);\r\n\r\n        emit Burned(_burner, _amount, _amountType, _burnType);\r\n        \r\n        return true;\r\n    }\r\n\r\n    // @require 2274\r\n    // @dev To store tokens for temporary computing power, users can store WFC or USDT\r\n    // @param: _amount Storage quantity\r\n    // @return Documents    \r\n    function storaged(uint256 _amount) public returns(bool) {\r\n        // The storage quantity is greater than or equal to the minimum storage quantity\r\n        require(_amount >= storageBase, \"S1\");\r\n        \r\n        address _storager = _msgSender();\r\n        // The depositor cannot be a transaction pair address\r\n        require(!(pairAddress[_storager]), \"S2\");\r\n        // Quantity of calculation force obtained\r\n        uint256 _pow = _amount * 100 / storageBase;\r\n        // Execute transfer  \r\n        _transfer(_storager, address(this), _amount); \r\n        // Store order information\r\n        _storageOrders.push(SO(_amount, _pow, block.timestamp));\r\n\r\n         // Order ID\r\n        uint256 _id = _storageOrders.length - 1;\r\n        // The storage user corresponding to the order ID\r\n        _soToAcc[_id] = _storager;\r\n        // Amount to be retrieved corresponding to order ID\r\n        _soToAmt[_id] = _amount;\r\n\r\n        // Distribution of calculation force:_ Storager_ Quantity of pow calculation force,=2 temporary calculation force\r\n        _powMint(_storager, _pow, 2);\r\n        // Arithmetic reward:_ Storager_ Pow basic calculation force,=2 temporary calculation force,=1 reward calculation force\r\n        _reward(_storager, _pow, 2, 1);\r\n\r\n        emit Storaged(_id, _storager, _amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    // @require 2274\r\n    // @dev Take out the stored tokens and lose the temporary computing power\r\n    // @param: _id Storage record ID\r\n    // @return Documents\r\n    function retrieved(uint256 _id) public returns(bool) {\r\n        address _retriever = _msgSender();\r\n        // You can only retrieve your own order\r\n        require(_retriever == _soToAcc[_id], \"RT1\");\r\n        // Get the order information\r\n        SO storage _so = _storageOrders[_id];\r\n\r\n        // The current time is greater than the storage time+7 days\r\n        require(block.timestamp >= _so.storageDate + 7 days, \"RT2\");\r\n        // Amount to be retrieved\r\n        uint256 _amount = _soToAmt[_id];\r\n        // The order's amount to be retrieved is greater than 0, that is, it has not been retrieved\r\n        require(_amount > 0, \"RT3\");\r\n\r\n        // Amount to be retrieved is returned to 0\r\n        _soToAmt[_id] = 0;\r\n        // Return the token stored by the user\r\n        _transfer(address(this), _retriever, _amount);\r\n\r\n        // The user subtracts the temporary computing power obtained during storage\r\n        _powBurn(_retriever, _so.pow);\r\n        // Calculation force retrieval:_ Retriever_ Pow foundation calculation force,=2 temporary calculation force,=2 retrieval calculation force\r\n        _reward(_retriever, _so.pow, 2, 2);\r\n\r\n        emit Retrieved(_id, _retriever, _amount);\r\n\r\n        return true;\r\n    }   \r\n\r\n    // @dev Query the daily dividend   \r\n    // @param: _account Query account address\r\n    function getDailyBonus(address _account) public view returns(uint256) {\r\n        // User ID, ID also exists\r\n        uint256 _id = _isSharer[_account];\r\n        require(_id > 0, \"GDB\");\r\n\r\n        // Total user computing power\r\n        uint256 _pow = powMaBalanceOf(_account) + powSeBalanceOf(_account);\r\n        // Initialize the number of user dividends today\r\n        uint256 _amount = 0;\r\n        // If the user's calculation force is>=100 (i.e. 1 calculation force, accuracy 2)\r\n        if(_pow >= 100) {\r\n            // Calculate the current dividend of the user=total dividend amount of the day * (1 - dividend proportion of the foundation) * user's total computing power/platform's total computing power\r\n            _amount = (shareAmount * _pow * 96) / (powTotalSupply * 100);\r\n        }\r\n\r\n        return _amount;\r\n    }\r\n\r\n    // @require 2275\r\n    // @dev The Foundation distributes dividends every day, which needs to be called once a day\r\n    // @dev Deflation every 360 days\r\n    function shareBonus() public onlyOwner returns(bool) {\r\n        // The current days are greater than the last dividend days\r\n        require((block.timestamp / 1 days) > (shareDate / 1 days), \"SB1\");\r\n        \r\n        // Dividend time+1 day\r\n        shareDate += 1 days;\r\n        // Number of dividends+1\r\n        shareCount += 1;\r\n\r\n        // Number of foundations        \r\n        uint256 _num = _funders.length;\r\n\r\n        if(_num > 0) {\r\n            // Fund member dividend=total dividend amount of the day * Fund dividend ratio/number of fund dividends\r\n            uint256 _amount = (shareAmount * 4) / (_num * 100) ;\r\n            for(uint256 i = 0; i <_num; i++) {\r\n                // Cyclic increase\r\n                _mint(_funders[i], _amount);\r\n            }\r\n        }\r\n\r\n        // Deflation: 50% reduction every 360 days\r\n        if((shareCount % 360) == 0) {\r\n            shareAmount = (shareAmount * ShareDeflation) / 100;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    // @require 2272\r\n    // @dev Receive dividends\r\n    // @param: _account Receiving user\r\n    // @param: _amount Amount received\r\n    function receivedBonus(address _account, uint256 _amount) public isBlackList(_account) onlyOwner returns(bool) {\r\n        uint256 _id = getPowSharer(_account);\r\n\r\n        require(_id > 0, \"RB1\");\r\n        require(_amount > 0, \"RB2\");\r\n        // Charge service charge\r\n        IERC20(tokenFee).transferFrom(_account, address(this), receiveFee);\r\n        // Cast WFC\r\n        _mint(_account, _amount);\r\n\r\n        emit Received(_account, _amount);\r\n\r\n        // Total handling charge increase (WBNB)\r\n        _totalFee += receiveFee;\r\n\r\n        return true;\r\n    }\r\n\r\n    // @require 2276\r\n    // @dev Reward calculation force and recovery of reward calculation force\r\n    // @param: _account Users with business\r\n    // @param: _pow Calculation quantity of basic business\r\n    // @param: _powType Calculation type:=1 permanent calculation force,=2 temporary calculation force\r\n    // @param: _powType Business type:=1 reward,=2 cancel reward\r\n    function _reward(address _account, uint256 _pow, uint256 _powType, uint256 _buniessType) private {\r\n        require(_powType == 1 || _powType ==2, \"R1\");\r\n        require(_buniessType == 1 || _buniessType ==2, \"R2\");\r\n\r\n        // Initialize user: directly push the parent user\r\n        address _cur = isConnected[_account];\r\n        // Initialization algebra: Generation 1\r\n        uint256 _count = 1;\r\n\r\n        while(_cur != address(0) && _count <= 13){\r\n            // Calculation power of reward rewardConf reward allocation\r\n            uint256 _curpow = _pow * rewardConf[_count].rate / 100;\r\n            if(_curpow > 0) {\r\n                if(_buniessType == 1) {       \r\n                    // Reward calculation             \r\n                    _powMint(_cur, _curpow, _powType);\r\n                } else {\r\n                    // Take back the reward calculation\r\n                    _powBurn(_cur,_curpow);\r\n                }\r\n            }\r\n\r\n            // Switch to the superior of the superior, and issue or withdraw prizes circularly\r\n            _cur = isConnected[_cur];\r\n            // Algebra+1\r\n            _count++;\r\n        }    \r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"AddedList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burnType\",\"type\":\"uint256\"}],\"name\":\"Burned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"powType\",\"type\":\"uint256\"}],\"name\":\"PTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Received\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"RemovedList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"retriever\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Retrieved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stroager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Storaged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ShareDeflation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accToReAmt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accToReDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_maker\",\"type\":\"address\"}],\"name\":\"addBlackeList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"addPairAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_uper\",\"type\":\"address\"}],\"name\":\"addUpLine\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airDropFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airDropSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"burnBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burnType\",\"type\":\"uint256\"}],\"name\":\"burned\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeAirDrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"freezeBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_maker\",\"type\":\"address\"}],\"name\":\"getBlacker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getDailyBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDownLine\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getPowSharer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPowTransferFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getStorageOrder\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"storageDate\",\"type\":\"uint256\"}],\"internalType\":\"struct WFSToken.SO\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBlacker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isConnected\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openAirDrop\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pairAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_uper\",\"type\":\"address\"}],\"name\":\"powAirDrop\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"powDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"powMaBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"powSeBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"powTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"powTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"powTransferFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rePowTransferFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiveFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"receivedBonus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_maker\",\"type\":\"address\"}],\"name\":\"removeBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"removePairAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"retrieved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardConf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"base\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_airDropFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_powTransferFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_receiveFee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_members\",\"type\":\"address[]\"}],\"name\":\"setFunders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shareAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shareBonus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shareCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shareDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"storageBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"storaged\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenFee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "WFSToken", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://cc7cb0986ed632069bf0e50afd53e3eddf77a12516bb3976a51c0156bd1a41f5"}