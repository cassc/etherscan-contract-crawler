{"SourceCode": "pragma solidity ^0.8.1;\r\ninterface IERC20 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        return account.code.length > 0;\r\n    }\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(\r\n            address(this).balance >= amount,\r\n            \"Address: insufficient balance\"\r\n        );\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(\r\n            success,\r\n            \"Address: unable to send value, recipient may have reverted\"\r\n        );\r\n    }\r\n    function functionCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionCallWithValue(\r\n                target,\r\n                data,\r\n                value,\r\n                \"Address: low-level call with value failed\"\r\n            );\r\n    }\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(\r\n            address(this).balance >= value,\r\n            \"Address: insufficient balance for call\"\r\n        );\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n        (bool success, bytes memory returndata) = target.call{value: value}(\r\n            data\r\n        );\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n    function functionStaticCall(address target, bytes memory data)\r\n        internal\r\n        view\r\n        returns (bytes memory)\r\n    {\r\n        return\r\n            functionStaticCall(\r\n                target,\r\n                data,\r\n                \"Address: low-level static call failed\"\r\n            );\r\n    }\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n    function functionDelegateCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return\r\n            functionDelegateCall(\r\n                target,\r\n                data,\r\n                \"Address: low-level delegate call failed\"\r\n            );\r\n    }\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            if (returndata.length > 0) {\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\ninterface ISwapPair {\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint32 blockTimestampLast\r\n        );\r\n    function skim(address to) external;\r\n    function sync() external;\r\n}\r\ninterface ISwapFactory {\r\n    function getPair(address tokenA, address tokenB)\r\n        external\r\n        view\r\n        returns (address pair);\r\n    function allPairs(uint256) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint256);\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n}\r\ninterface ISwapRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n    function swapTokensForExactETH(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) external pure returns (uint256 amountB);\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountOut);\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountIn);\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\ncontract Ownable {\r\n    address private _owner;\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _transferOwnership(newOwner);\r\n    }\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\ncontract ERC20 is IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    mapping(address => uint256) private _tBalances;\r\n    mapping(address => uint256) private _rBalances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) public isBonusExempt;\r\n    address[] private _bonusExempt;\r\n    uint256 private _tTotal;\r\n    uint256 private _rTotal;\r\n    uint256 private _totalCirculation;\r\n    uint256 private _minSupply;\r\n    uint256 private _maxSupply = ~uint256(0);\r\n    uint256 private _rebaseRate = 3 * 10**(decimals() - 4);\r\n    uint256 private _rebaseLastTime = block.timestamp;\r\n    uint256 private _rebaseEndTime;\r\n    uint256 private _rebaseStepTime = 2 minutes;\r\n    uint256 private _currentRate;\r\n    uint256 private _bounsMinHold;\r\n    uint256 private _rTotalBouns;\r\n    uint256 private _tTotalBouns;\r\n    uint256 private constant MAX = ~uint256(0);\r\n    bool private _autoRebase = true;\r\n    modifier transactional() {\r\n        _rebase();\r\n        _currentRate = _getRate();\r\n        _;\r\n        _currentRate = 0;\r\n    }\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n    function totalCirculation() public view virtual returns (uint256) {\r\n        return _totalCirculation;\r\n    }\r\n    function balanceOf(address account)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        if (isBonusExempt[account] || _tBalances[account] > 0)\r\n            return _tBalances[account];\r\n        uint256 currentRate = _getRate();\r\n        return _rBalances[account] / currentRate;\r\n    }\r\n    function transfer(address to, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        address owner = msg.sender;\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        address owner = msg.sender;\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address spender = msg.sender;\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        address owner = msg.sender;\r\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\r\n        return true;\r\n    }\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        address owner = msg.sender;\r\n        uint256 currentAllowance = _allowances[owner][spender];\r\n        require(\r\n            currentAllowance >= subtractedValue,\r\n            \"ERC20: decreased allowance below zero\"\r\n        );\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n        return true;\r\n    }\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 tAmount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        uint256 currentRate = _getRate();\r\n        uint256 rAmount = tAmount * currentRate;\r\n        require(\r\n            _rBalances[from] >= rAmount || _tBalances[from] >= tAmount,\r\n            \"ERC20: transfer amount exceeds balance\"\r\n        );\r\n        unchecked {\r\n            _balanceSub(from, tAmount, rAmount);\r\n        }\r\n        _balanceAdd(to, tAmount, rAmount);\r\n        emit Transfer(from, to, tAmount);\r\n    }\r\n    function _burn(address account, uint256 tAmount)\r\n        internal\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n        uint256 currentRate = _getRate();\r\n        uint256 rAmount = tAmount * currentRate;\r\n        require(\r\n            _rBalances[account] >= rAmount || _tBalances[account] >= tAmount,\r\n            \"ERC20: burn amount exceeds balance\"\r\n        );\r\n        unchecked {\r\n            _balanceSub(account, tAmount, rAmount);\r\n        }\r\n        _balanceAdd(address(0), tAmount, rAmount);\r\n        emit Transfer(account, address(0), tAmount);\r\n        return true;\r\n    }\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(\r\n                currentAllowance >= amount,\r\n                \"ERC20: insufficient allowance\"\r\n            );\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n    function getInfo(address account)\r\n        public\r\n        view\r\n        returns (uint256 tBalance, uint256 rBalance)\r\n    {\r\n        return (_tBalances[account], _rBalances[account]);\r\n    }\r\n    function getParam()\r\n        public\r\n        view\r\n        returns (\r\n            uint256 tTotal,\r\n            uint256 rTotal,\r\n            uint256 tBouns,\r\n            uint256 rBouns\r\n        )\r\n    {\r\n        return (_tTotal, _rTotal, _tTotalBouns, _rTotalBouns);\r\n    }\r\n    function minSupply() public view returns (uint256) {\r\n        return _minSupply;\r\n    }\r\n    function maxSupply() public view returns (uint256) {\r\n        return _maxSupply;\r\n    }\r\n    function rebaseRate() public view returns (uint256) {\r\n        return _rebaseRate;\r\n    }\r\n    function autoRebase() public view returns (bool) {\r\n        return _autoRebase;\r\n    }\r\n    function _setMinSupply(uint256 amount) internal {\r\n        _minSupply = amount;\r\n    }\r\n    function _setMaxSupply(uint256 amount) internal {\r\n        _maxSupply = amount;\r\n    }\r\n    function _setRebaseRate(uint256 rate) internal {\r\n        _rebaseRate = rate;\r\n    }\r\n    function _setAutoRebase(bool value) internal {\r\n        _autoRebase = value;\r\n    }\r\n    function _setRebaseEndTime(uint256 time) internal {\r\n        _rebaseEndTime = time;\r\n    }\r\n    function _setRebaseStepTime(uint256 time) internal {\r\n        _rebaseStepTime = time;\r\n    }\r\n    function _setBounsMinHold(uint256 minHold) internal {\r\n        _bounsMinHold = minHold;\r\n    }\r\n    function _addBounsExempt(address account) internal {\r\n        require(!isBonusExempt[account], \"Account is already exempt\");\r\n        if (_rBalances[account] > 0) {\r\n            uint256 currentRate = _getRate();\r\n            _tBalances[account] = _rBalances[account] / currentRate;\r\n            _totalBounsAdd(_tBalances[account], _rBalances[account]);\r\n            _rBalances[account] = 0;\r\n        }\r\n        isBonusExempt[account] = true;\r\n        _bonusExempt.push(account);\r\n    }\r\n    function _removeBounsExempt(address account) internal {\r\n        require(isBonusExempt[account], \"Account is already remove\");\r\n        for (uint256 i = 0; i < _bonusExempt.length; i++) {\r\n            if (_bonusExempt[i] == account) {\r\n                _bonusExempt[i] = _bonusExempt[_bonusExempt.length - 1];\r\n                uint256 currentRate = _getRate();\r\n                _rBalances[account] = _tBalances[account] * currentRate;\r\n                _totalBounsAdd(_tBalances[account], _rBalances[account]);\r\n                _tBalances[account] = 0;\r\n                isBonusExempt[account] = false;\r\n                _bonusExempt.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    function _init(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n        _tTotal = amount;\r\n        _rTotal = (MAX - (MAX % (_tTotal * 1_0000_0000)));\r\n        _totalCirculation = _tTotal;\r\n        _balanceAdd(account, _tTotal, _rTotal);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n    function _rebase() private {\r\n        if (\r\n            _autoRebase &&\r\n            (_tTotal < _maxSupply) &&\r\n            (_rebaseEndTime == 0 || block.timestamp <= _rebaseEndTime) &&\r\n            block.timestamp >= (_rebaseLastTime + _rebaseStepTime)\r\n        ) {\r\n            uint256 deltaTime = block.timestamp - _rebaseLastTime;\r\n            uint256 times = deltaTime / _rebaseStepTime;\r\n            for (uint256 i = 0; i < times; i++) {\r\n                _tTotal += _rebaseRate;\r\n            }\r\n            _rebaseLastTime = _rebaseLastTime + (times * _rebaseStepTime);\r\n            emit Rebase(times, _tTotal);\r\n        }\r\n    }\r\n    function _balanceAdd(\r\n        address account,\r\n        uint256 tAmount,\r\n        uint256 rAmount\r\n    ) private {\r\n        if (isBonusExempt[account]) {\r\n            _tBalances[account] += tAmount;\r\n            _totalBounsAdd(tAmount, rAmount);\r\n            return;\r\n        }\r\n        if (_rBalances[account] > 0) {\r\n            _rBalances[account] += rAmount;\r\n        } else {\r\n            if (_tBalances[account] + tAmount < _bounsMinHold) {\r\n                _tBalances[account] += tAmount;\r\n                _totalBounsAdd(tAmount, rAmount);\r\n            } else {\r\n                uint256 currentRate = _getRate();\r\n                uint256 rbalance = _tBalances[account] * currentRate;\r\n                _totalBounsSub(_tBalances[account], rbalance);\r\n                _tBalances[account] = 0;\r\n                _rBalances[account] += rbalance + rAmount;\r\n            }\r\n        }\r\n    }\r\n    function _balanceSub(\r\n        address account,\r\n        uint256 tAmount,\r\n        uint256 rAmount\r\n    ) private {\r\n        if (isBonusExempt[account]) {\r\n            _tBalances[account] -= tAmount;\r\n            _totalBounsSub(tAmount, rAmount);\r\n            return;\r\n        }\r\n        if (_tBalances[account] > 0) {\r\n            _tBalances[account] -= tAmount;\r\n            _totalBounsSub(tAmount, rAmount);\r\n        } else {\r\n            uint256 currentRate = _getRate();\r\n            _rBalances[account] -= rAmount;\r\n            if (_rBalances[account] / currentRate < _bounsMinHold) {\r\n                _tBalances[account] = _rBalances[account] / currentRate;\r\n                _totalBounsAdd(_tBalances[account], _rBalances[account]);\r\n                _rBalances[account] = 0;\r\n            }\r\n        }\r\n    }\r\n    function _totalBounsAdd(uint256 tAmount, uint256 rAmount) private {\r\n        _tTotalBouns += tAmount;\r\n        _rTotalBouns += rAmount;\r\n    }\r\n    function _totalBounsSub(uint256 tAmount, uint256 rAmount) private {\r\n        if (_tTotalBouns > tAmount) _tTotalBouns -= tAmount;\r\n        else _tTotalBouns = 0;\r\n        if (_rTotalBouns > rAmount) _rTotalBouns -= rAmount;\r\n        else _rTotalBouns = 0;\r\n    }\r\n    function _getRate() private view returns (uint256) {\r\n        if (_currentRate > 0) return _currentRate;\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply / tSupply;\r\n    }\r\n    function _getCurrentSupply() private view returns (uint256, uint256) {\r\n        uint256 rSupply = _rTotal - _rTotalBouns;\r\n        uint256 tSupply = _tTotal - _tTotalBouns;\r\n        if (tSupply == 0 || rSupply == 0) return (_rTotal, _tTotal);\r\n        return (rSupply, tSupply);\r\n    }\r\n    event Rebase(uint256 times, uint256 tTotal);\r\n}\r\ncontract Distributor {\r\n    constructor(address token) {\r\n        IERC20(token).approve(msg.sender, uint256(~uint256(0)));\r\n    }\r\n}\r\ncontract YT is ERC20, Ownable {\r\n    using Address for address;\r\n    mapping(address => bool) public isFeeExempt;\r\n    mapping(address => bool) public isSwapPair;\r\n    mapping(address => address) public refers;\r\n    uint256 public autoSwapMin;\r\n    address private _market;\r\n    address private _usdtAddress;\r\n    address private _swapPair;\r\n    ISwapRouter private _swapRouter;\r\n    Distributor internal _distributor;\r\n    bool _inSwapAndLiquify;\r\n    modifier lockTheSwap() {\r\n        _inSwapAndLiquify = true;\r\n        _;\r\n        _inSwapAndLiquify = false;\r\n    }\r\n    function withdrawToken(IERC20 token, uint256 amount) public onlyOwner {\r\n        token.transfer(msg.sender, amount);\r\n    }\r\n    function burn(uint256 amount) public virtual {\r\n        _burn(_msgSender(), amount);\r\n    }\r\n    constructor() ERC20(\"YT\", \"YT\") {\r\n        _market = 0x6951Cc026D2A0bc3A95fCa4559c52928759be49E;\r\n        address _adminAddress = 0x6951Cc026D2A0bc3A95fCa4559c52928759be49E;\r\n        _usdtAddress = 0x0D8Ce2A99Bb6e3B7Db580eD848240e4a0F9aE153;\r\n        address routerAddress = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n        _swapRouter = ISwapRouter(routerAddress);\r\n        _swapPair = ISwapFactory(_swapRouter.factory()).createPair(\r\n            address(this),\r\n            _usdtAddress\r\n        );\r\n        isSwapPair[_swapPair] = true;\r\n        isFeeExempt[owner()] = true;\r\n        isFeeExempt[address(this)] = true;\r\n        isFeeExempt[_adminAddress] = true;\r\n        addBounsExempt(_swapPair);\r\n        addBounsExempt(address(0));\r\n        addBounsExempt(address(this));\r\n        addBounsExempt(0x000000000000000000000000000000000000dEaD);\r\n        autoSwapMin = 1 * 10**(decimals() - 4);\r\n        _distributor = new Distributor(_usdtAddress);\r\n        _setBounsMinHold(2 * 10**decimals());\r\n        _setMaxSupply(1_0000 * 10**decimals());\r\n        _setRebaseRate(23148148148148148);\r\n        _setRebaseStepTime(2 minutes);\r\n        _init(_adminAddress, 1000 * 10**decimals());\r\n    }\r\n    function setIsFeeExempt(address account, bool newValue) public onlyOwner {\r\n        isFeeExempt[account] = newValue;\r\n    }\r\n    function setAutoSwapMin(uint256 amount) public onlyOwner {\r\n        autoSwapMin = amount;\r\n    }\r\n    function addBounsExempt(address account) public onlyOwner {\r\n        _addBounsExempt(account);\r\n    }\r\n    function removeBounsExempt(address account) public onlyOwner {\r\n        _removeBounsExempt(account);\r\n    }\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal override transactional {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        if (_inSwapAndLiquify) {\r\n            super._transfer(sender, recipient, amount);\r\n        } else if (isSwapPair[sender]) {\r\n            if (isFeeExempt[recipient]) {\r\n                super._transfer(sender, recipient, amount);\r\n            } else {\r\n                uint256 every = amount / 1000;\r\n                uint256 amountFainel = amount - every * 60;\r\n                super._transfer(sender, address(this), every * 45);\r\n                uint256 amountBurn;\r\n                address refer = refers[recipient];\r\n                if (refer == address(0)) {\r\n                    amountBurn += every * 15;\r\n                } else {\r\n                    super._transfer(sender, refer, every * 5);\r\n                    refer = refers[refer];\r\n                    if (refer == address(0)) {\r\n                        amountBurn += every * 10;\r\n                    } else {\r\n                        super._transfer(sender, refer, every * 5);\r\n                        refer = refers[refer];\r\n                        if (refer == address(0)) {\r\n                            amountBurn += every * 5;\r\n                        } else {\r\n                            super._transfer(sender, refer, every * 5);\r\n                        }\r\n                    }\r\n                }\r\n                if (amountBurn > 0) super._burn(sender, amountBurn);\r\n                super._transfer(sender, recipient, amountFainel);\r\n            }\r\n            _addLpProvider(recipient);\r\n        } else if (isSwapPair[recipient]) {\r\n            if (balanceOf(address(this)) > autoSwapMin && !_inSwapAndLiquify) {\r\n                _swapAndLiquify();\r\n            }\r\n            if (isFeeExempt[sender]) {\r\n                super._transfer(sender, recipient, amount);\r\n            } else {\r\n                uint256 every = amount / 1000;\r\n                uint256 amountFainel = amount - every * 70;\r\n                super._transfer(sender, address(this), every * 45);\r\n                uint256 amountBurn = every;\r\n                address refer = refers[sender];\r\n                if (refer == address(0)) {\r\n                    amountBurn += every * 15;\r\n                } else {\r\n                    super._transfer(sender, refer, every * 5);\r\n                    refer = refers[refer];\r\n                    if (refer == address(0)) {\r\n                        amountBurn += every * 10;\r\n                    } else {\r\n                        super._transfer(sender, refer, every * 5);\r\n                        refer = refers[refer];\r\n                        if (refer == address(0)) {\r\n                            amountBurn += every * 5;\r\n                        } else {\r\n                            super._transfer(sender, refer, every * 5);\r\n                        }\r\n                    }\r\n                }\r\n                if (amountBurn > 0) super._burn(sender, amountBurn);\r\n                super._transfer(sender, recipient, amountFainel);\r\n            }\r\n            _addLpProvider(sender);\r\n        } else {\r\n            super._transfer(sender, recipient, amount);\r\n            if (\r\n                refers[recipient] == address(0) &&\r\n                sender != recipient &&\r\n                refers[sender] != recipient\r\n            ) {\r\n                refers[recipient] = sender;\r\n            }\r\n        }\r\n        if (sender != address(this)) {\r\n            processLP(500000);\r\n        }\r\n    }\r\n    function swapAndLiquity() public {\r\n        if (balanceOf(address(this)) > autoSwapMin) {\r\n            _swapAndLiquify();\r\n        }\r\n    }\r\n    function _swapAndLiquify() private lockTheSwap returns (bool) {\r\n        uint256 amount = balanceOf(address(this));\r\n        address token0 = ISwapPair(_swapPair).token0();\r\n        (uint256 reserve0, uint256 reserve1, ) = ISwapPair(_swapPair)\r\n            .getReserves();\r\n        uint256 tokenPool = reserve0;\r\n        if (token0 != address(this)) tokenPool = reserve1;\r\n        if (amount > tokenPool / 100) {\r\n            amount = tokenPool / 100;\r\n        }\r\n        _swapTokensForUSDT(amount);\r\n        IERC20 USDT = IERC20(_usdtAddress);\r\n        uint256 bal = USDT.balanceOf(address(_distributor));\r\n        uint256 every = bal / 9;\r\n        USDT.transferFrom(address(_distributor), address(this), every * 4);\r\n        USDT.transferFrom(address(_distributor), _market, bal - every * 4);\r\n        return true;\r\n    }\r\n    function _swapTokensForUSDT(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _usdtAddress;\r\n        super._approve(address(this), address(_swapRouter), tokenAmount * 2);\r\n        _swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(_distributor),\r\n            block.timestamp\r\n        );\r\n        emit SwapTokensForTokens(tokenAmount, path);\r\n    }\r\n    event SwapTokensForTokens(uint256 amountIn, address[] path);\r\n    address[] public lpProviders;\r\n    mapping(address => uint256) public lpProviderIndex;\r\n    uint256 public lpRewardIndex;\r\n    uint256 public lpRewardBlock;\r\n    uint256 public lpRewardShare = 5 * 1e18;\r\n    function setLpRewardShare(uint256 amount) public onlyOwner {\r\n        lpRewardShare = amount;\r\n    }\r\n    function _addLpProvider(address account) private {\r\n        if (0 == lpProviderIndex[account]) {\r\n            if (0 == lpProviders.length || lpProviders[0] != account) {\r\n                lpProviderIndex[account] = lpProviders.length;\r\n                lpProviders.push(account);\r\n            }\r\n        }\r\n    }\r\n    function processLP(uint256 gas) private {\r\n        uint256 totalPair = IERC20(_swapPair).totalSupply();\r\n        if (0 == totalPair) {\r\n            return;\r\n        }\r\n        IERC20 USDT = IERC20(_usdtAddress);\r\n        uint256 usdtBalance = USDT.balanceOf(address(this));\r\n        if (usdtBalance < lpRewardShare) {\r\n            return;\r\n        }\r\n        address shareHolder;\r\n        uint256 pairBalance;\r\n        uint256 amount;\r\n        uint256 shareholderCount = lpProviders.length;\r\n        uint256 gasUsed = 0;\r\n        uint256 iterations = 0;\r\n        uint256 gasLeft = gasleft();\r\n        while (gasUsed < gas && iterations < shareholderCount) {\r\n            if (lpRewardIndex >= shareholderCount) {\r\n                lpRewardIndex = 0;\r\n            }\r\n            shareHolder = lpProviders[lpRewardIndex];\r\n            pairBalance = IERC20(_swapPair).balanceOf(shareHolder);\r\n            if (pairBalance > 0 && !shareHolder.isContract()) {\r\n                amount = (lpRewardShare * pairBalance) / totalPair;\r\n                if (usdtBalance < amount) {\r\n                    break;\r\n                }\r\n                if (amount > 0) {\r\n                    USDT.transfer(shareHolder, amount);\r\n                    usdtBalance -= amount;\r\n                }\r\n            }\r\n            gasUsed = gasUsed + (gasLeft - gasleft());\r\n            gasLeft = gasleft();\r\n            lpRewardIndex++;\r\n            iterations++;\r\n        }\r\n        lpRewardBlock = block.number;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"times\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tTotal\",\"type\":\"uint256\"}],\"name\":\"Rebase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"SwapTokensForTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addBounsExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoRebase\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoSwapMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getParam\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tBouns\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rBouns\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBonusExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isFeeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isSwapPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lpProviderIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lpProviders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpRewardBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpRewardIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpRewardShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebaseRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"refers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeBounsExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setAutoSwapMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"setIsFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setLpRewardShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCirculation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "YT", "CompilerVersion": "v0.8.8+commit.dddeac2f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://4e4708e97ef9f914c4d0fdfc219480c56f72dc02a57db6ae4f30cb0acbe3b816"}