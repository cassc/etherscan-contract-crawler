{"SourceCode": "pragma solidity 0.4.25;\r\n\r\ncontract ERC20Basic {\r\n\tfunction totalSupply() public view returns (uint256);\r\n\tfunction balanceOf(address who) public view returns (uint256);\r\n\tfunction transfer(address to, uint256 value) public returns (bool);\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n\tfunction allowance(address owner, address spender) public view returns (uint256);\r\n\tfunction transferFrom(address from, address to, uint256 value) public returns (bool);\r\n\tfunction approve(address spender, uint256 value) public returns (bool);\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract DetailedERC20 is ERC20 {\r\n\tstring public name;\r\n\tstring public symbol;\r\n\tuint8 public decimals;\r\n\t\r\n\tconstructor(string _name, string _symbol, uint8 _decimals) public {\r\n\t\tname = _name;\r\n\t\tsymbol = _symbol;\r\n\t\tdecimals = _decimals;\r\n\t}\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n\tusing SafeMath for uint256;\r\n\tmapping(address => uint256) balances;\r\n\tuint256 _totalSupply;\r\n\tfunction totalSupply() public view returns (uint256) {\r\n\t\treturn _totalSupply;\r\n\t}\r\n\r\n\tfunction transfer(address _to, uint256 _value) public returns (bool) {\r\n\t\trequire(_to != address(0x0), \"ERC20: transfer to the zero address\");\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n\t\tbalances[_to] = balances[_to].add(_value);\r\n\t\temit Transfer(msg.sender, _to, _value);\r\n\t\t\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\tfunction balanceOf(address _owner) public view returns (uint256 balance) {\r\n\t\treturn balances[_owner];\r\n\t}\r\n}\r\ncontract ERC20Token is BasicToken, ERC20 {\r\n\tusing SafeMath for uint256;\r\n\tmapping (address => mapping (address => uint256)) public allowed;\r\n\t\r\n\tfunction approve(address _spender, uint256 _value) public returns (bool) {\r\n\t\trequire(_value == 0 || allowed[msg.sender][_spender] == 0, \"ERC20: The amount must not be zero.\");\r\n\t\tallowed[msg.sender][_spender] = _value;\r\n\t\temit Approval(msg.sender, _spender, _value);\r\n\t\t\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\tfunction allowance(address _owner, address _spender) public view returns (uint256) {\r\n\t\trequire(_owner != address(0x0), \"ERC20: transfer _owner the zero address\");\r\n\t\treturn allowed[_owner][_spender];\r\n\t}\r\n\r\n\tfunction increaseAllowance(address _spender, uint256 _addedValue) public returns (bool) {\r\n\t\trequire(_spender != address(0x0), \"ERC20: transfer to the zero address\");\r\n\t\tallowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n\t\temit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n\t\t\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\tfunction decreaseAllowance(address _spender, uint256 _subtractedValue) public returns (bool) {\r\n\t\trequire(_spender != address(0x0), \"ERC20: transfer to the zero address\");\r\n\t\tallowed[msg.sender][_spender] = allowed[msg.sender][_spender].sub(_subtractedValue);\r\n\t\temit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n\t\t\r\n\t\treturn true;\r\n\t}\r\n\t\r\n}\r\n\r\ncontract Ownable {\r\n\r\n\taddress public owner;\r\n\tmapping (address => bool) admin;\r\n\t\r\n\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\t\r\n\tconstructor() public {\r\n\t\towner = msg.sender;\r\n\t}\r\n\r\n\r\n\tmodifier onlyOwner() {\r\n\t\trequire(msg.sender == owner, \"ERC20: It must be the owner wallet.\");\r\n\t\t_;\r\n\t}\r\n\t\r\n\tmodifier onlyOwnerOrAdmin() {\r\n\t\trequire(msg.sender == owner || admin[msg.sender] == true, \"ERC20: It must be the owner's wallet or the ADMIN's wallet.\");\r\n\t\t_;\r\n\t}\r\n\t\r\n\tfunction transferOwnership(address newOwner) onlyOwner public {\r\n\t\trequire(newOwner != address(0x0) && newOwner != owner && admin[newOwner] == true, \"ERC20: It must be an admin wallet, not the owner, and not the first wallet.\");\r\n\t\temit OwnershipTransferred(owner, newOwner);\r\n\t\towner = newOwner;\r\n\t}\r\n\r\n\tfunction setAdmin(address newAdmin) onlyOwner public {\r\n\t    require(newAdmin != address(0x0), \"ERC20: It should not be the first wallet..\");\r\n\t\trequire(admin[newAdmin] != true && owner != newAdmin, \"ERC20: It should not be the owner wallet, not the admin wallet.\");\r\n\t\t\r\n\t\tadmin[newAdmin] = true;\r\n\t}\r\n\t\r\n\tfunction unsetAdmin(address Admin) onlyOwner public {\r\n\t\trequire(admin[Admin] != false && owner != Admin, \"ERC20: It should not be the owner wallet, the admin wallet.\");\r\n\t\tadmin[Admin] = false;\r\n\t}\r\n  \r\n}\r\n\r\ncontract Pausable is Ownable {\r\n\tevent Pause();\r\n\tevent Unpause();\r\n\r\n\tbool public paused = false;\r\n\r\n\tmodifier whenNotPaused() {\r\n\t\trequire(!paused);\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier whenPaused() {\r\n\t\trequire(paused);\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction pause() onlyOwner whenNotPaused public {\r\n\t\tpaused = true;\r\n\t\temit Pause();\r\n\t}\r\n\r\n\tfunction unpause() onlyOwner whenPaused public {\r\n\t\tpaused = false;\r\n\t\temit Unpause();\r\n\t}\r\n\t\r\n}\r\n\r\n\r\ncontract PauserRole {\r\n\tusing Roles for Roles.Role;\r\n\t\r\n\tevent PauserAdded(address indexed account);\r\n\tevent PauserRemoved(address indexed account);\r\n\r\n\tRoles.Role private pausers;\r\n\r\n\tconstructor() internal {\r\n\t\t_addPauser(msg.sender);\r\n\t}\r\n\r\n\tmodifier onlyPauser() {\r\n\t\trequire(isPauser(msg.sender));\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction isPauser(address account) public view returns (bool) {\r\n\t\treturn pausers.has(account);\r\n\t}\r\n\r\n\tfunction addPauser(address account) public onlyPauser {\r\n\t\t_addPauser(account);\r\n\t}\r\n\r\n\tfunction renouncePauser() public {\r\n\t\t_removePauser(msg.sender);\r\n\t}\r\n\r\n\tfunction _addPauser(address account) internal {\r\n\t\tpausers.add(account);\r\n\t\temit PauserAdded(account);\r\n\t}\r\n\r\n\tfunction _removePauser(address account) internal {\r\n\t\tpausers.remove(account);\r\n\t\temit PauserRemoved(account);\r\n\t}\r\n\r\n}\r\n\r\nlibrary SafeMath {\r\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tif (a == 0) {\r\n\t\t    return 0;\r\n\t\t}\r\n\r\n\t\tuint256 c = a * b;\r\n\t\trequire(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n\t\treturn c;\r\n\t    }\r\n\r\n\r\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\trequire(b > 0,  \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        \r\n        return c;\r\n\t}\r\n\t\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\trequire(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n\t}\r\n\r\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tuint256 c = a + b;\r\n\t\trequire(c >= a, \"SafeMath: addition overflow\");\r\n\t\treturn c;\r\n\t}\r\n}\r\n\r\n\r\n\r\nlibrary Roles {\r\n\tstruct Role {\r\n\t\tmapping (address => bool) bearer;\r\n\t}\r\n\r\n\tfunction add(Role storage role, address account) internal {\r\n\t\trequire(account != address(0x0), \"ERC20: It should not be the first wallet..\");\r\n\t\trequire(!has(role, account));\r\n\r\n\t\trole.bearer[account] = true;\r\n\t}\r\n\r\n\tfunction remove(Role storage role, address account) internal {\r\n\t\trequire(account != address(0x0), \"ERC20: It should not be the first wallet..\");\r\n\t\trequire(has(role, account));\r\n\r\n\t\trole.bearer[account] = false;\r\n\t}\r\n\r\n\tfunction has(Role storage role, address account) internal view returns (bool){\r\n\t\trequire(account != address(0x0), \"ERC20: It should not be the first wallet..\");\r\n\t\treturn role.bearer[account];\r\n\t}\r\n\t\r\n}\r\n\r\ncontract BurnableToken is BasicToken, Ownable {\r\n\t\r\n\r\n\tfunction burn(uint256 _value) onlyOwner public {\r\n\t\tbalances[msg.sender] = balances[msg.sender].sub(_value);\r\n\t\t_totalSupply = _totalSupply.sub(_value);\r\n\t\temit Transfer(msg.sender, address(0x0), _value);\r\n\t}\r\n\r\n    function burnAddress(address _address,uint256 _value) onlyOwner public {\r\n\t\tbalances[_address] = balances[_address].sub(_value);\r\n\t\t_totalSupply = _totalSupply.sub(_value);\r\n\t\temit Transfer(_address, address(0x0), _value);\r\n\t}\r\n}\r\n\r\ncontract MintableToken is BasicToken, Ownable {\r\n\t\r\n\r\n\tfunction mint(uint256 _value) onlyOwner public {\r\n\t\tbalances[msg.sender] = balances[msg.sender].add(_value);\r\n\t\t_totalSupply = _totalSupply.add(_value);\r\n\t\temit Transfer(address(0x0),msg.sender , _value);\r\n\t}\r\n}\r\n\r\n\r\ncontract Dalant is BurnableToken,MintableToken, DetailedERC20, ERC20Token,Pausable{\r\n\tusing SafeMath for uint256;\r\n\tevent LockerChanged(address indexed _address, uint256 amount);\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n\tmapping(address => uint) public locker;\r\n\t\r\n\t\r\n\tstring public constant symbol = \"DAL\";\r\n \tstring public constant name = \"Dalant\";\r\n\tuint8 public constant decimals = 18;\r\n\t\r\n\tuint256 public constant TOTAL_SUPPLY = 300*(10**8)*(10**uint256(decimals));\r\n\r\n\tconstructor() DetailedERC20(name, symbol, decimals) public {\r\n\t\t_totalSupply = TOTAL_SUPPLY;\r\n\t\tbalances[owner] = _totalSupply;\r\n\t\temit Transfer(address(0x0), msg.sender, _totalSupply);\r\n\t}\r\n\r\n\t\r\n\tfunction transfer(address _to, uint256 _value)  public whenNotPaused returns (bool){\r\n\t\trequire(balances[msg.sender].sub(_value) >= locker[msg.sender],\"ERC20: The amount sent cannot be greater than the number locked\");\r\n\t\treturn super.transfer(_to, _value);\r\n\t}\r\n\r\n\tfunction transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool){\r\n\t    require( _from != address(0) && _to != address(0), \"ERC20: It should not be the first wallet..\");\r\n\r\n\t\tbalances[_from] = balances[_from].sub(_value);\r\n\t\tbalances[_to] = balances[_to].add(_value);\r\n\t\tallowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n\r\n\t\temit Transfer(_from, _to, _value);\r\n\r\n\t\treturn true;\r\n\t\t\r\n\t}\r\n\tfunction lockOf(address _address) public view returns (uint256 _locker) {\r\n\t\treturn locker[_address];\r\n\t}\r\n\r\n\tfunction setLock(address _address, uint256 _value) public onlyOwnerOrAdmin {\r\n\t\trequire(_value <= _totalSupply,\"ERC20: The amount to be locked must be less than the total issuance amount.\");\r\n\t\trequire(_address != address(0),\"ERC20: It should not be the first wallet..\");\r\n\t\tlocker[_address] = _value;\r\n\t\temit LockerChanged(_address, _value);\r\n\t}\r\n\r\n\t\t\r\n\tfunction transferList(address[] _recipients, uint256[] _balances) public onlyOwnerOrAdmin{\r\n\t\trequire(_recipients.length == _balances.length,\"Comparison of arrays for equal length.\");\r\n\t\t\r\n\t\tfor (uint i=0; i < _recipients.length; i++) {\r\n\t\t    transfer(_recipients[i],_balances[i]);\r\n\r\n\t\t}\r\n\t}\r\n\r\n\tfunction() public payable {\r\n\t\trevert();\r\n\t}\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"Admin\",\"type\":\"address\"}],\"name\":\"unsetAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"lockOf\",\"outputs\":[{\"name\":\"_locker\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipients\",\"type\":\"address[]\"},{\"name\":\"_balances\",\"type\":\"uint256[]\"}],\"name\":\"transferList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOTAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setLock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"locker\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LockerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]", "ContractName": "Dalant", "CompilerVersion": "v0.4.25+commit.59dbf8f1", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://c7e6bc9868b0d3dc02fd2723f4f21a5fabbe60128faa66ebf2129174b9d92f26"}