{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2022-03-10\r\n*/\r\n\r\npragma solidity ^0.5.8;\r\n\r\nlibrary SafeMath{\r\n    \r\n    /**\r\n    * List of revert message codes. Implementing dApp should handle showing the correct message.\r\n    * Based on 0xcert framework error codes.\r\n    */\r\n    string constant OVERFLOW = \"008001\";\r\n    string constant SUBTRAHEND_GREATER_THEN_MINUEND = \"008002\";\r\n    string constant DIVISION_BY_ZERO = \"008003\";\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, reverts on overflow.\r\n    * @param _factor1 Factor number.\r\n    * @param _factor2 Factor number.\r\n    * @return product The product of the two factors.\r\n    */\r\n    function mul(uint256 _factor1,uint256 _factor2)\r\n    internal\r\n    pure\r\n    returns (uint256 product){\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (_factor1 == 0){return 0;}\r\n\r\n        product = _factor1 * _factor2;\r\n        require(product / _factor1 == _factor2, OVERFLOW);\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient, reverts on division by zero.\r\n    * @param _dividend Dividend number.\r\n    * @param _divisor Divisor number.\r\n    * @return quotient The quotient.\r\n    */\r\n    function div(uint256 _dividend,uint256 _divisor)\r\n    internal\r\n    pure\r\n    returns (uint256 quotient){\r\n        // Solidity automatically asserts when dividing by 0, using all gas.\r\n        require(_divisor > 0, DIVISION_BY_ZERO);\r\n        quotient = _dividend / _divisor;\r\n        // assert(_dividend == _divisor * quotient + _dividend % _divisor); // There is no case in which this doesn't hold.\r\n    }\r\n\r\n    /**\r\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    * @param _minuend Minuend number.\r\n    * @param _subtrahend Subtrahend number.\r\n    * @return difference Difference.\r\n    */\r\n    function sub(uint256 _minuend,uint256 _subtrahend)\r\n    internal\r\n    pure\r\n    returns (uint256 difference){\r\n        require(_subtrahend <= _minuend, SUBTRAHEND_GREATER_THEN_MINUEND);\r\n        difference = _minuend - _subtrahend;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, reverts on overflow.\r\n    * @param _addend1 Number.\r\n    * @param _addend2 Number.\r\n    * @return sum Sum.\r\n    */\r\n    function add(uint256 _addend1,uint256 _addend2)\r\n    internal\r\n    pure\r\n    returns (uint256 sum){\r\n        sum = _addend1 + _addend2;\r\n        require(sum >= _addend1, OVERFLOW);\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo), reverts when\r\n    * dividing by zero.\r\n    * @param _dividend Number.\r\n    * @param _divisor Number.\r\n    * @return remainder Remainder.\r\n    */\r\n    function mod(uint256 _dividend,uint256 _divisor)\r\n    internal\r\n    pure\r\n    returns (uint256 remainder){\r\n        require(_divisor != 0, DIVISION_BY_ZERO);\r\n        remainder = _dividend % _divisor;\r\n    }\r\n}\r\n\r\nlibrary AddressUtils{\r\n    /**\r\n   * @dev Returns whether the target address is a contract.\r\n   * @param _addr Address to check.\r\n   * @return addressCheck True if _addr is a contract, false if not.\r\n   */\r\n   function isContract(address _addr)\r\n    internal\r\n    view\r\n    returns (bool addressCheck){\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        assembly { codehash := extcodehash(_addr) } // solhint-disable-line\r\n        addressCheck = (codehash != 0x0 && codehash != accountHash);\r\n    }\r\n}\r\n\r\ninterface ERC721 {\r\n  event Transfer(address indexed _from,address indexed _to,uint256 indexed _tokenId);\r\n  event Approval(address indexed _owner,address indexed _approved,uint256 indexed _tokenId);\r\n  event ApprovalForAll(address indexed _owner,address indexed _operator,bool _approved);\r\n  function safeTransferFrom(address _from,address _to,uint256 _tokenId,bytes calldata _data) external;   \r\n  function safeTransferFrom(address _from,address _to,uint256 _tokenId) external;   \r\n  function transferFrom(address _from,address _to,uint256 _tokenId) external;\r\n  function approve(address _approved,uint256 _tokenId) external;\r\n  function setApprovalForAll(address _operator,bool _approved) external;\r\n  function balanceOf(address _owner) external view returns (uint256);\r\n  function ownerOf(uint256 _tokenId) external view returns (address);\r\n  function getApproved(uint256 _tokenId) external view returns (address);\r\n  function mint(address _to,uint256 _tokenId,string calldata _uri) external;\r\n  function tokenURI(uint256 _tokenId) external view returns(string  memory _uri);\r\n  function isApprovedForAll(address _owner,address _operator) external view returns (bool);\r\n}\r\n\r\ninterface ERC721TokenReceiver{\r\n    \r\n    function onERC721Received(address _operator,address _from,uint256 _tokenId,bytes calldata _data) external returns(bytes4);\r\n}\r\n\r\ncontract Ownable{\r\n    /**\r\n    * @dev Error constants.\r\n    */\r\n    string public constant NOT_CURRENT_OWNER = \"018001\";\r\n    string public constant CANNOT_TRANSFER_TO_ZERO_ADDRESS = \"018002\";\r\n    string public constant NOT_CURRENT_MANAGER = \"018003\";\r\n\r\n    address public owner;\r\n    mapping(address=>bool) public Manager;\r\n\r\n\r\n    event OwnershipTransferred(address indexed previousOwner,address indexed newOwner);\r\n\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    modifier onlyOwner(){\r\n        require(msg.sender == owner, NOT_CURRENT_OWNER);\r\n        _;\r\n    }\r\n  \r\n    modifier onlyManager(){\r\n        require(Manager[msg.sender], NOT_CURRENT_MANAGER);\r\n        _;\r\n    }\r\n\r\n    function addManager(address _maddr) public onlyOwner{\r\n        Manager[_maddr] = true;\r\n    }\r\n  \r\n    function delManager(address _maddr) public onlyOwner{\r\n        Manager[_maddr] = false;\r\n    }\r\n    \r\n    function transferOwnership(address _newOwner) public onlyOwner{\r\n        require(_newOwner != address(0), CANNOT_TRANSFER_TO_ZERO_ADDRESS);\r\n        emit OwnershipTransferred(owner, _newOwner);\r\n        owner = _newOwner;\r\n    }\r\n\r\n}\r\n\r\ncontract NFToken is ERC721 ,Ownable {\r\n    \r\n    using SafeMath for uint256;\r\n    using AddressUtils for address;\r\n    uint256[] public tokens;\r\n\r\n    string constant ZERO_ADDRESS = \"003001\";\r\n    string constant NOT_VALID_NFT = \"003002\";\r\n    string constant NOT_OWNER_OR_OPERATOR = \"003003\";\r\n    string constant NOT_OWNER_APPROWED_OR_OPERATOR = \"003004\";\r\n    string constant NOT_ABLE_TO_RECEIVE_NFT = \"003005\";\r\n    string constant NFT_ALREADY_EXISTS = \"003006\";\r\n    string constant NOT_OWNER = \"003007\";\r\n    string constant IS_OWNER = \"003008\";\r\n\r\n    bytes4 internal constant MAGIC_ON_ERC721_RECEIVED = 0x150b7a02;\r\n    mapping (uint256 => string) internal idToUri;\r\n\r\n  \r\n    mapping (uint256 => address) public idToOwner;\r\n\r\n    uint256 internal tokenID;\r\n    mapping (uint256 => address) internal idToApproval;\r\n\r\n    mapping (address => uint256) private ownerToNFTokenCount;\r\n\r\n    mapping (address => mapping (address => bool)) internal ownerToOperators;\r\n\r\n    event Transfer(address indexed _from,address indexed _to,uint256 indexed _tokenId);\r\n\r\n    event Approval(address indexed _owner,address indexed _approved,uint256 indexed _tokenId);\r\n\r\n    event ApprovalForAll(address indexed _owner,address indexed _operator,bool _approved);\r\n\r\n// \u53ef\u4ee5\u64cd\u4f5c\r\n    modifier canOperate(uint256 _tokenId) {\r\n        address tokenOwner = idToOwner[_tokenId];\r\n        require(tokenOwner == msg.sender || ownerToOperators[tokenOwner][msg.sender], NOT_OWNER_OR_OPERATOR);\r\n        _;\r\n    }\r\n// \u53ef\u4ee5\u8f6c\u79fb\r\n    modifier canTransfer(uint256 _tokenId){\r\n        address tokenOwner = idToOwner[_tokenId];\r\n        require(\r\n            tokenOwner == msg.sender\r\n            || idToApproval[_tokenId] == msg.sender\r\n            || ownerToOperators[tokenOwner][msg.sender],\r\n            NOT_OWNER_APPROWED_OR_OPERATOR\r\n        );\r\n        _;\r\n    }\r\n\r\n// \u6709\u6548NFToken\r\n    modifier validNFToken(uint256 _tokenId){\r\n        require(idToOwner[_tokenId] != address(0), NOT_VALID_NFT);\r\n        _;\r\n    }\r\n\r\n    constructor() public{\r\n        //supportedInterfaces[0x80ac58cd] = true; // ERC721\r\n    }\r\n  \r\n    function viewTokenID() view public returns(uint256){\r\n        return tokenID;\r\n    }\r\n  \r\n    function safeTransferFrom(address _from,address _to,uint256 _tokenId,bytes calldata _data)external\r\n        //override\r\n    {\r\n        _safeTransferFrom(_from, _to, _tokenId, _data);\r\n    }\r\n// \u5b89\u5168\u8f6c\u79fb\r\n    function safeTransferFrom(address _from,address _to,uint256 _tokenId) external{\r\n        _safeTransferFrom(_from, _to, _tokenId, \"\");\r\n    }\r\n\r\n \r\n    function transferFrom(address _from,address _to,uint256 _tokenId) external\r\n    canTransfer(_tokenId)\r\n    validNFToken(_tokenId){\r\n        address tokenOwner = idToOwner[_tokenId];\r\n        require(tokenOwner == _from, NOT_OWNER);\r\n        require(_to != address(0), ZERO_ADDRESS);\r\n    if(Manager[_from]|| Manager[_to]){\r\n        _transfer(_to, _tokenId);}\r\n        else{\r\n            require(false,NOT_CURRENT_MANAGER);\r\n\r\n        }\r\n    }\r\n//   \u4f20\u8f93\u5217\u8868\r\n    function transferList(address _to,uint256[] calldata _tokenIdList) external{\r\n\r\n\r\n        if(Manager[msg.sender]|| Manager[_to]){\r\n        uint256 len = _tokenIdList.length;\r\n        address tokenOwner;// = idToOwner[_tokenId];\r\n        uint256 _tokenId;\r\n        require(len <= 100,\"token list too length\");\r\n        for(uint256 i=0;i<len;i++){\r\n            _tokenId = _tokenIdList[i];\r\n            tokenOwner = idToOwner[_tokenId];\r\n            require(tokenOwner != address(0), NOT_VALID_NFT);\r\n            require(\r\n                tokenOwner == msg.sender\r\n                || idToApproval[_tokenId] == msg.sender\r\n                || ownerToOperators[tokenOwner][msg.sender],\r\n                NOT_OWNER_APPROWED_OR_OPERATOR\r\n            );\r\n            _transfer(_to, _tokenId);\r\n        }\r\n        }\r\n        else{\r\n            require(false,NOT_CURRENT_MANAGER);\r\n        }\r\n    }\r\n    \r\n    function approve(address _approved,uint256 _tokenId) external\r\n    canOperate(_tokenId)\r\n    validNFToken(_tokenId){\r\n        address tokenOwner = idToOwner[_tokenId];\r\n        require(_approved != tokenOwner, IS_OWNER);\r\n\r\n        idToApproval[_tokenId] = _approved;\r\n        emit Approval(tokenOwner, _approved, _tokenId);\r\n    }\r\n\r\n//  \u6279\u51c6\u6240\u6709\r\n    function setApprovalForAll(address _operator,bool _approved) external{\r\n        ownerToOperators[msg.sender][_operator] = _approved;\r\n        emit ApprovalForAll(msg.sender, _operator, _approved);\r\n    }\r\n\r\n    function mint(address _to,uint256 _tokenId,string  calldata  _uri) external  {\r\n        require(Manager[msg.sender], NOT_CURRENT_MANAGER);\r\n        _mint(_to, _tokenId);\r\n        _setTokenUri(_tokenId, _uri);\r\n    }\r\n\r\n    // \u8bbe\u7f6e\u4ee4\u724cUri\r\n    function _setTokenUri(uint256 _tokenId, string  memory _uri) internal validNFToken(_tokenId) {\r\n        idToUri[_tokenId] = _uri;\r\n    }\r\n\r\n\r\n\r\n   function getPlayerByAddr(uint256   _tokenId) public view   returns(string memory) { \r\n        return idToUri[_tokenId]; \r\n    }\r\n\r\n\r\n        function balanceOf(address _owner) external view returns (uint256) {\r\n        require(_owner != address(0), ZERO_ADDRESS);\r\n        return _getOwnerNFTCount(_owner);\r\n    }\r\n\r\n//  \u6240\u6709\u8005\r\n    function ownerOf(uint256 _tokenId) external view returns (address _owner){\r\n        _owner = idToOwner[_tokenId];\r\n        require(_owner != address(0), NOT_VALID_NFT);\r\n    }\r\n// \u83b7\u5f97\u6279\u51c6\r\n    function getApproved(uint256 _tokenId) external view validNFToken(_tokenId) returns (address) {\r\n        return idToApproval[_tokenId];\r\n    }\r\n\r\n// \u5df2\u6279\u51c6\u7528\u4e8e\u6240\u6709\r\n    function isApprovedForAll( address _owner,  address _operator) external view returns (bool) {\r\n        return ownerToOperators[_owner][_operator];\r\n    }\r\n\r\n    function _transfer(address _to,uint256 _tokenId) internal{\r\n        address from = idToOwner[_tokenId];\r\n        _clearApproval(_tokenId);\r\n\r\n        _removeNFToken(from, _tokenId);\r\n        _addNFToken(_to, _tokenId);\r\n\r\n        emit Transfer(from, _to, _tokenId);\r\n    }\r\n\r\n    function _mint(address _to,uint256 _tokenId)internal{\r\n        require(_to != address(0), ZERO_ADDRESS);\r\n        require(idToOwner[_tokenId] == address(0), NFT_ALREADY_EXISTS);\r\n        tokenID++;\r\n        _addNFToken(_to, _tokenId);\r\n\r\n        emit Transfer(address(0), _to, _tokenId);\r\n    }\r\n\r\n\r\n    function _burn(uint256 _tokenId) internal validNFToken(_tokenId){\r\n        address tokenOwner = idToOwner[_tokenId];\r\n        _clearApproval(_tokenId);\r\n        _removeNFToken(tokenOwner, _tokenId);\r\n        emit Transfer(tokenOwner, address(0), _tokenId);\r\n    }\r\n    \r\n    function _removeNFToken(address _from,uint256 _tokenId) internal{\r\n        require(idToOwner[_tokenId] == _from, NOT_OWNER);\r\n        ownerToNFTokenCount[_from] = ownerToNFTokenCount[_from] - 1;\r\n        delete idToOwner[_tokenId];\r\n    }\r\n\r\n    function _addNFToken(address _to,uint256 _tokenId) internal{\r\n        require(idToOwner[_tokenId] == address(0), NFT_ALREADY_EXISTS);\r\n\r\n        idToOwner[_tokenId] = _to;\r\n        ownerToNFTokenCount[_to] = ownerToNFTokenCount[_to].add(1);\r\n    }\r\n\r\n    function _getOwnerNFTCount(address _owner) internal view returns (uint256) {\r\n        return ownerToNFTokenCount[_owner];\r\n    }\r\n\r\n    function _safeTransferFrom(address _from,address _to,uint256 _tokenId,bytes memory _data) private\r\n    canTransfer(_tokenId)\r\n    validNFToken(_tokenId){\r\n\r\n     \r\n\r\nif(Manager[_from]|| Manager[_to]){\r\n        address tokenOwner = idToOwner[_tokenId];\r\n        require(tokenOwner == _from, NOT_OWNER);\r\n        require(_to != address(0), ZERO_ADDRESS);\r\n\r\n        _transfer(_to, _tokenId);\r\n\r\n        if (_to.isContract()){\r\n            bytes4 retval = ERC721TokenReceiver(_to).onERC721Received(msg.sender, _from, _tokenId, _data);\r\n            require(retval == MAGIC_ON_ERC721_RECEIVED, NOT_ABLE_TO_RECEIVE_NFT);\r\n        }\r\n        }else{\r\n                require(false, NOT_CURRENT_MANAGER);\r\n        }\r\n    }\r\n\r\n    function _clearApproval(uint256 _tokenId)private{\r\n        if (idToApproval[_tokenId] != address(0)){\r\n            delete idToApproval[_tokenId];\r\n        }\r\n    }\r\n}\r\n\r\ncontract NFTMdata is NFToken {\r\n    \r\n\r\n    string internal nftName;\r\n    string internal nftSymbol;\r\n// \u65e0\u6548\u7d22\u5f15\r\n    string constant INVALID_INDEX = \"005007\";\r\n\r\n    // \u8981\u7d22\u5f15\u7684id\r\n    mapping(uint256 => uint256) public idToIndex;\r\n    // ID\u7684\u6240\u6709\u8005\r\n    mapping(address => uint256[]) public ownerToIds;\r\n    // \u6240\u6709\u8005\u7d22\u5f15\u7684id\r\n    mapping(uint256 => uint256) public idToOwnerIndex;\r\n    // \u7c7b\u578b\u540d\r\n    mapping(uint256 => string) public typeName;\r\n    // \u5230Uri\u7684id\r\n    // c Attributes\r\n     // c\u5c5e\u6027\u7ed3\u6784\r\n \r\n  \r\n    function name() external view returns (string memory _name){\r\n      return nftName;\r\n    }\r\n    function symbol() external view returns (string memory _symbol){\r\n      return nftSymbol;\r\n    }\r\n    function totalSupply() external view returns (uint256) {\r\n        return tokens.length;\r\n    }\r\n// \u6309\u7d22\u5f15\u6807\u8bb0\r\n    function tokenByIndex(uint256 _index) external view returns (uint256){\r\n        require(_index < tokens.length, INVALID_INDEX);\r\n        return tokens[_index];\r\n    }\r\n// \u6309\u7d22\u5f15\u7684\u6240\u6709\u8005\u6807\u8bb0\r\n    function tokenOfOwnerByIndex(address _owner,uint256 _index) external view returns (uint256){\r\n        require(_index < ownerToIds[_owner].length, INVALID_INDEX);\r\n        return ownerToIds[_owner][_index];\r\n    }\r\n    \r\n    function _mint(address _to,uint256 _tokenId) internal {\r\n        super._mint(_to, _tokenId);\r\n        tokens.push(_tokenId);\r\n        idToIndex[_tokenId] = tokens.length - 1;\r\n      \r\n    }\r\n\r\n    function _burn(uint256 _tokenId) internal {\r\n        super._burn(_tokenId);\r\n        uint256 tokenIndex = idToIndex[_tokenId];\r\n        uint256 lastTokenIndex = tokens.length - 1;\r\n        uint256 lastToken = tokens[lastTokenIndex];\r\n        tokens[tokenIndex] = lastToken;\r\n        tokens.pop();\r\n        idToIndex[lastToken] = tokenIndex;\r\n        idToIndex[_tokenId] = 0;\r\n    }\r\n\r\n// \u5220\u9664NFToken\r\n    function _removeNFToken(address _from,uint256 _tokenId) internal {\r\n        require(idToOwner[_tokenId] == _from, NOT_OWNER);\r\n        delete idToOwner[_tokenId];\r\n\r\n        uint256 tokenToRemoveIndex = idToOwnerIndex[_tokenId];\r\n        uint256 lastTokenIndex = ownerToIds[_from].length - 1;\r\n\r\n        if (lastTokenIndex != tokenToRemoveIndex){\r\n            uint256 lastToken = ownerToIds[_from][lastTokenIndex];\r\n            ownerToIds[_from][tokenToRemoveIndex] = lastToken;\r\n            idToOwnerIndex[lastToken] = tokenToRemoveIndex;\r\n        }\r\n\r\n        ownerToIds[_from].pop();\r\n    }\r\n\r\n// \u6dfb\u52a0NFToken\r\n    function _addNFToken(address _to,uint256 _tokenId) internal {\r\n        require(idToOwner[_tokenId] == address(0), NFT_ALREADY_EXISTS);\r\n        idToOwner[_tokenId] = _to;\r\n        ownerToIds[_to].push(_tokenId);\r\n        idToOwnerIndex[_tokenId] = ownerToIds[_to].length - 1;\r\n    }\r\n\r\n    // \u83b7\u53d6\u6240\u6709\u8005NFT\u8ba1\u6570\r\n    function _getOwnerNFTCount(address _owner) internal view returns (uint256){\r\n        return ownerToIds[_owner].length;\r\n    }\r\n    \r\n    // \u4ee4\u724cUri\r\n    function tokenURI(uint256 _tokenId) external view returns(string  memory _uri ){\r\n        _uri = idToUri[_tokenId];\r\n    }\r\n    \r\n\r\n    \r\n \r\n}\r\n\r\ncontract NFT is NFTMdata{\r\n   \r\n    constructor(string memory _name,string memory _symbol) public {\r\n        nftName = _name; \r\n        nftSymbol = _symbol;\r\n    }\r\n\r\n \r\n    \r\n    function burn(uint256 _tokenId) external {\r\n        require(idToOwner[_tokenId] == msg.sender, NOT_OWNER);\r\n        super._burn(_tokenId);\r\n    }\r\n \r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"CANNOT_TRANSFER_TO_ZERO_ADDRESS\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Manager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NOT_CURRENT_MANAGER\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NOT_CURRENT_OWNER\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_maddr\",\"type\":\"address\"}],\"name\":\"addManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_approved\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_maddr\",\"type\":\"address\"}],\"name\":\"delManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getPlayerByAddr\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"idToIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"idToOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"idToOwnerIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownerToIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIdList\",\"type\":\"uint256[]\"}],\"name\":\"transferList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"typeName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"viewTokenID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "NFT", "CompilerVersion": "v0.5.17+commit.d19bba13", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000b49205370616365204e4654000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b49205370616365204e4654000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://e52d8a8cc51402b4cbc48d5e669c80290a3afa7bf245453f8d9596347708a2ed"}