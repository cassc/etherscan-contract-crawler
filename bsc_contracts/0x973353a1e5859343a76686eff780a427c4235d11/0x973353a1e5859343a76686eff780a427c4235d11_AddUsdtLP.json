{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2023-01-14\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.7;\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface ISwapRouter {\r\n    function factory() external pure returns (address);\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n}\r\n\r\ninterface ISwapFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\nabstract contract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    //\u653e\u5f03\u6743\u9650\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    //\u8f6c\u79fb\u6743\u9650\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract TokenDistributor {\r\n    constructor (address token) {\r\n        IERC20(token).approve(msg.sender, uint(~uint256(0)));\r\n    }\r\n}\r\n\r\nabstract contract AbsToken is IERC20, Ownable {\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    string private _name;//\u540d\u79f0\r\n    string private _symbol;//\u7b26\u53f7\r\n    uint8 private _decimals;//\u7cbe\u5ea6\r\n\r\n    uint256 public fundFee = 0;\r\n    uint256 public dividendFee = 0;\r\n    uint256 public burnFee = 10;//\u9500\u6bc1\u7a0e\r\n    uint256 public lpFee = 10;//\u56de\u6d41\u7a0e\r\n\r\n    address public mainPair;\r\n\r\n    mapping(address => bool) private _feeWhiteList;//\u4ea4\u6613\u7a0e\u767d\u540d\u5355\r\n\r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 private _tTotal;//\u603b\u91cf\r\n    //\u4ea4\u6613\u5f00\u5173 true\u5f00\u542f\r\n    bool public swapEnable = true;\r\n    //\u65f6\u9650\u4ea4\u6613\u5f00\u5173 true\u5f00\u542f\r\n    bool public timeSwapEnable = false;\r\n\r\n    ISwapRouter public _swapRouter;\r\n    bool private inSwap;\r\n    uint256 public numTokensSellToFund;\r\n\r\n    TokenDistributor _tokenDistributor;\r\n    address private usdt;\r\n\r\n    mapping(address => bool) private _blackList;\r\n    mapping(address => uint256) public  _lastTransferTime;\r\n\r\n    address DEAD = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor (string memory Name, string memory Symbol, uint8 Decimals, uint256 Supply){\r\n        _name = Name;\r\n        _symbol = Symbol;\r\n        _decimals = Decimals;\r\n\r\n        _swapRouter = ISwapRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n        usdt = address(0x55d398326f99059fF775485246999027B3197955);\r\n\r\n        mainPair = ISwapFactory(_swapRouter.factory()).createPair(address(this), usdt);\r\n        _allowances[address(this)][address(_swapRouter)] = MAX;\r\n        IERC20(usdt).approve(address(_swapRouter), MAX);\r\n\r\n        _tTotal = Supply * 10 ** _decimals;\r\n        _balances[msg.sender] = _tTotal;\r\n        emit Transfer(address(0), msg.sender, _tTotal);\r\n\r\n        _feeWhiteList[msg.sender] = true;\r\n        _feeWhiteList[address(this)] = true;\r\n        _feeWhiteList[address(_swapRouter)] = true;\r\n\r\n        numTokensSellToFund = _tTotal / 10000;\r\n\r\n        _tokenDistributor = new TokenDistributor(usdt);\r\n    }\r\n\r\n    function symbol() external view override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function name() external view override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function decimals() external view override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() external view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        if (_allowances[sender][msg.sender] != MAX) {\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"approve from the zero address\");\r\n        require(spender != address(0), \"approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(from != address(0), \"Transfer from the zero address\");\r\n        require(to != address(0), \"Transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n        require(!_blackList[from], \"Transfer from the blackList address\");\r\n\r\n        bool takeFee = false;\r\n\r\n        address _tarAddress = address(0);\r\n        if (to == mainPair) {\r\n            require(swapEnable, \"swap no open\");\r\n             _tarAddress = from;\r\n        }else if(from == mainPair){\r\n            require(swapEnable, \"swap no open\");\r\n            _tarAddress = to;\r\n        }\r\n        if(_tarAddress != address(0) && timeSwapEnable){\r\n            require(block.timestamp - _lastTransferTime[_tarAddress] >= 43200, \"Transaction frequency is too high\");\r\n        }\r\n\r\n        if (to == mainPair) {\r\n            \r\n            if (!_feeWhiteList[from] && !_feeWhiteList[to]) {\r\n                require(amount <= balanceOf(from) * 9999 / 10000, \"Sale amount too much\");\r\n                takeFee = true;\r\n\r\n                uint256 contractTokenBalance = balanceOf(address(this));\r\n                bool overMinTokenBalance = contractTokenBalance >= numTokensSellToFund;\r\n                if (\r\n                    overMinTokenBalance &&\r\n                    !inSwap &&\r\n                    from != mainPair\r\n                ) {\r\n                    swapTokenForFund(numTokensSellToFund);\r\n                }\r\n            }\r\n        }\r\n\r\n        _tokenTransfer(from, to, amount, takeFee);\r\n\r\n        if(_tarAddress != address(0)){\r\n            _lastTransferTime[_tarAddress] = block.timestamp;\r\n        }\r\n    }\r\n\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount,\r\n        bool takeFee\r\n    ) private {\r\n        _balances[sender] = _balances[sender] - tAmount;\r\n\r\n        uint256 feeAmount;\r\n        if (takeFee) {\r\n            feeAmount = tAmount * (lpFee + fundFee + dividendFee) / 100;\r\n\r\n            _takeTransfer(sender, address(this), feeAmount);\r\n\r\n            uint256 burnAmount = tAmount * (burnFee) / 100;\r\n            _takeTransfer(sender, DEAD, burnAmount);\r\n\r\n            feeAmount = feeAmount + burnAmount;\r\n        }\r\n\r\n        tAmount = tAmount - feeAmount;\r\n        _takeTransfer(sender, recipient, tAmount);\r\n    }\r\n\r\n    function swapTokenForFund(uint256 tokenAmount) private lockTheSwap {\r\n        uint256 lpAmount = tokenAmount * lpFee / (lpFee + dividendFee + fundFee) / 2;\r\n\r\n        IERC20 USDT = IERC20(usdt);\r\n        uint256 initialBalance = USDT.balanceOf(address(_tokenDistributor));\r\n\r\n        swapTokensForUsdt(tokenAmount - lpAmount);\r\n\r\n        uint256 newBalance = USDT.balanceOf(address(_tokenDistributor)) - initialBalance;\r\n        uint256 totalUsdtFee = lpFee / 2 + dividendFee + fundFee;\r\n\r\n        uint256 lpUsdt = newBalance * lpFee / 2 / totalUsdtFee;\r\n        USDT.transferFrom(address(_tokenDistributor), address(this), lpUsdt);\r\n\r\n        addLiquidityUsdt(lpAmount, lpUsdt);\r\n    }\r\n\r\n    function addLiquidityUsdt(uint256 tokenAmount, uint256 usdtAmount) private {\r\n        _swapRouter.addLiquidity(\r\n            address(this),\r\n            usdt,\r\n            tokenAmount,\r\n            usdtAmount,\r\n            0,\r\n            0,\r\n            0x11e99e0DB7c87d616e9A57d373716E29ee2b0F7A,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function swapTokensForUsdt(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = usdt;\r\n        _swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(_tokenDistributor),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function _takeTransfer(\r\n        address sender,\r\n        address to,\r\n        uint256 tAmount\r\n    ) private {\r\n        _balances[to] = _balances[to] + tAmount;\r\n        emit Transfer(sender, to, tAmount);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    //\u8bbe\u7f6e\u4ea4\u6613\u624b\u7eed\u8d39\u767d\u540d\u5355\r\n    function setFeeWhiteList(address addr, bool enable) external onlyOwner {\r\n        _feeWhiteList[addr] = enable;\r\n    }\r\n\r\n    //\u67e5\u770b\u662f\u5426\u624b\u7eed\u8d39\u767d\u540d\u5355\r\n    function isFeeWhiteList(address addr) external view returns (bool){\r\n        return _feeWhiteList[addr];\r\n    }\r\n\r\n    //\u79fb\u9664\u9ed1\u540d\u5355\r\n    function removeBlackList(address addr) external onlyOwner {\r\n        _blackList[addr] = false;\r\n    }\r\n\r\n    //\u67e5\u770b\u662f\u5426\u9ed1\u540d\u5355\r\n    function isBlackList(address addr) external view returns (bool){\r\n        return _blackList[addr];\r\n    }\r\n    \r\n    //\u8bbe\u7f6e\u9ed1\u540d\u5355\r\n    function setBlackList(address addr, bool enable) external onlyOwner {\r\n        _blackList[addr] = enable;\r\n    }\r\n\r\n    //\u8bbe\u7f6e\u84b8\u53d1\u8d39\u7387\r\n    function setBurnFee(uint200 _fee) external onlyOwner{\r\n        burnFee = _fee;\r\n    }\r\n\r\n    //\u8bbe\u7f6elp\u8d39\u7387\r\n    function setLpFee(uint200 _fee) external onlyOwner{\r\n        lpFee = _fee;\r\n    }\r\n\r\n    //\u589e\u53d1 \r\n    // function _mint(address _target, uint256 _amount) external onlyOwner{\r\n    //     _tTotal += _amount * 10 ** _decimals;\r\n    //     _balances[_target] += _amount * 10 ** _decimals;\r\n    //     emit Transfer(address(0), _target, _amount * 10 ** _decimals);\r\n    // }\r\n\r\n    //\u8bbe\u7f6e\u4ea4\u6613\u5f00\u5173 true\u5f00\u542f false\u5173\u95ed\r\n    // function setSwapEnable(bool _target) external onlyOwner{\r\n    //     swapEnable = _target;\r\n    // }\r\n\r\n    //\u8bbe\u7f6e\u65f6\u9650\u4ea4\u6613\u5f00\u5173 true\u5f00\u542f false\u5173\u95ed\r\n    // function setTimeSwapEnable(bool _target) external onlyOwner{\r\n    //     timeSwapEnable = _target;\r\n    // }\r\n}\r\n\r\ncontract AddUsdtLP is AbsToken {\r\n    constructor() AbsToken(\r\n    //\u540d\u79f0\r\n        \"DR\",\r\n    //\u7b26\u53f7\r\n        \"DR\",\r\n    //\u7cbe\u5ea6\r\n        18,\r\n    //\u603b\u91cf 1\u4e07\r\n        10000\r\n    ){\r\n\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_lastTransferTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapRouter\",\"outputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dividendFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isBlackList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isFeeWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mainPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numTokensSellToFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"removeBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint200\",\"name\":\"_fee\",\"type\":\"uint200\"}],\"name\":\"setBurnFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setFeeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint200\",\"name\":\"_fee\",\"type\":\"uint200\"}],\"name\":\"setLpFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeSwapEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "AddUsdtLP", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://79758153f8e5099854831d65caa6d20a73bbf09e3b1da6f50b78a496acf9e946"}